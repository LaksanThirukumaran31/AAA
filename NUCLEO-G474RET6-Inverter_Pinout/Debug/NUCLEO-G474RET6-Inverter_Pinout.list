
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc34  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800ce18  0800ce18  0001ce18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2a0  0800d2a0  00020290  2**0
                  CONTENTS
  4 .ARM          00000008  0800d2a0  0800d2a0  0001d2a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2a8  0800d2a8  00020290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2a8  0800d2a8  0001d2a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d2ac  0800d2ac  0001d2ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  0800d2b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  20000290  0800d540  00020290  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000804  0800d540  00020804  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bcbc  00000000  00000000  00020303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003822  00000000  00000000  0003bfbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001630  00000000  00000000  0003f7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001122  00000000  00000000  00040e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a458  00000000  00000000  00041f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001baba  00000000  00000000  0006c392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011468c  00000000  00000000  00087e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000070c0  00000000  00000000  0019c4d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  001a3598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000290 	.word	0x20000290
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cdfc 	.word	0x0800cdfc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000294 	.word	0x20000294
 800021c:	0800cdfc 	.word	0x0800cdfc

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b970 	b.w	8000fb0 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	460d      	mov	r5, r1
 8000cf0:	4604      	mov	r4, r0
 8000cf2:	460f      	mov	r7, r1
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d14a      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf8:	428a      	cmp	r2, r1
 8000cfa:	4694      	mov	ip, r2
 8000cfc:	d965      	bls.n	8000dca <__udivmoddi4+0xe2>
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	b143      	cbz	r3, 8000d16 <__udivmoddi4+0x2e>
 8000d04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d08:	f1c3 0220 	rsb	r2, r3, #32
 8000d0c:	409f      	lsls	r7, r3
 8000d0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d12:	4317      	orrs	r7, r2
 8000d14:	409c      	lsls	r4, r3
 8000d16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d1a:	fa1f f58c 	uxth.w	r5, ip
 8000d1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d22:	0c22      	lsrs	r2, r4, #16
 8000d24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d2c:	fb01 f005 	mul.w	r0, r1, r5
 8000d30:	4290      	cmp	r0, r2
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x62>
 8000d34:	eb1c 0202 	adds.w	r2, ip, r2
 8000d38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d3c:	f080 811c 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d40:	4290      	cmp	r0, r2
 8000d42:	f240 8119 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d46:	3902      	subs	r1, #2
 8000d48:	4462      	add	r2, ip
 8000d4a:	1a12      	subs	r2, r2, r0
 8000d4c:	b2a4      	uxth	r4, r4
 8000d4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5a:	fb00 f505 	mul.w	r5, r0, r5
 8000d5e:	42a5      	cmp	r5, r4
 8000d60:	d90a      	bls.n	8000d78 <__udivmoddi4+0x90>
 8000d62:	eb1c 0404 	adds.w	r4, ip, r4
 8000d66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6a:	f080 8107 	bcs.w	8000f7c <__udivmoddi4+0x294>
 8000d6e:	42a5      	cmp	r5, r4
 8000d70:	f240 8104 	bls.w	8000f7c <__udivmoddi4+0x294>
 8000d74:	4464      	add	r4, ip
 8000d76:	3802      	subs	r0, #2
 8000d78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d7c:	1b64      	subs	r4, r4, r5
 8000d7e:	2100      	movs	r1, #0
 8000d80:	b11e      	cbz	r6, 8000d8a <__udivmoddi4+0xa2>
 8000d82:	40dc      	lsrs	r4, r3
 8000d84:	2300      	movs	r3, #0
 8000d86:	e9c6 4300 	strd	r4, r3, [r6]
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0xbc>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80ed 	beq.w	8000f72 <__udivmoddi4+0x28a>
 8000d98:	2100      	movs	r1, #0
 8000d9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da4:	fab3 f183 	clz	r1, r3
 8000da8:	2900      	cmp	r1, #0
 8000daa:	d149      	bne.n	8000e40 <__udivmoddi4+0x158>
 8000dac:	42ab      	cmp	r3, r5
 8000dae:	d302      	bcc.n	8000db6 <__udivmoddi4+0xce>
 8000db0:	4282      	cmp	r2, r0
 8000db2:	f200 80f8 	bhi.w	8000fa6 <__udivmoddi4+0x2be>
 8000db6:	1a84      	subs	r4, r0, r2
 8000db8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	4617      	mov	r7, r2
 8000dc0:	2e00      	cmp	r6, #0
 8000dc2:	d0e2      	beq.n	8000d8a <__udivmoddi4+0xa2>
 8000dc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000dc8:	e7df      	b.n	8000d8a <__udivmoddi4+0xa2>
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xe6>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f382 	clz	r3, r2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f040 8090 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dd8:	1a8a      	subs	r2, r1, r2
 8000dda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dde:	fa1f fe8c 	uxth.w	lr, ip
 8000de2:	2101      	movs	r1, #1
 8000de4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000de8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dec:	0c22      	lsrs	r2, r4, #16
 8000dee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000df2:	fb0e f005 	mul.w	r0, lr, r5
 8000df6:	4290      	cmp	r0, r2
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4290      	cmp	r0, r2
 8000e06:	f200 80cb 	bhi.w	8000fa0 <__udivmoddi4+0x2b8>
 8000e0a:	4645      	mov	r5, r8
 8000e0c:	1a12      	subs	r2, r2, r0
 8000e0e:	b2a4      	uxth	r4, r4
 8000e10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e14:	fb07 2210 	mls	r2, r7, r0, r2
 8000e18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e20:	45a6      	cmp	lr, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x14e>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e2c:	d202      	bcs.n	8000e34 <__udivmoddi4+0x14c>
 8000e2e:	45a6      	cmp	lr, r4
 8000e30:	f200 80bb 	bhi.w	8000faa <__udivmoddi4+0x2c2>
 8000e34:	4610      	mov	r0, r2
 8000e36:	eba4 040e 	sub.w	r4, r4, lr
 8000e3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e3e:	e79f      	b.n	8000d80 <__udivmoddi4+0x98>
 8000e40:	f1c1 0720 	rsb	r7, r1, #32
 8000e44:	408b      	lsls	r3, r1
 8000e46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e52:	fa20 f307 	lsr.w	r3, r0, r7
 8000e56:	40fd      	lsrs	r5, r7
 8000e58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e5c:	4323      	orrs	r3, r4
 8000e5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	fb09 5518 	mls	r5, r9, r8, r5
 8000e6a:	0c1c      	lsrs	r4, r3, #16
 8000e6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e70:	fb08 f50e 	mul.w	r5, r8, lr
 8000e74:	42a5      	cmp	r5, r4
 8000e76:	fa02 f201 	lsl.w	r2, r2, r1
 8000e7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e88:	f080 8088 	bcs.w	8000f9c <__udivmoddi4+0x2b4>
 8000e8c:	42a5      	cmp	r5, r4
 8000e8e:	f240 8085 	bls.w	8000f9c <__udivmoddi4+0x2b4>
 8000e92:	f1a8 0802 	sub.w	r8, r8, #2
 8000e96:	4464      	add	r4, ip
 8000e98:	1b64      	subs	r4, r4, r5
 8000e9a:	b29d      	uxth	r5, r3
 8000e9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ea0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ea4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ea8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000eb8:	d26c      	bcs.n	8000f94 <__udivmoddi4+0x2ac>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	d96a      	bls.n	8000f94 <__udivmoddi4+0x2ac>
 8000ebe:	3b02      	subs	r3, #2
 8000ec0:	4464      	add	r4, ip
 8000ec2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ec6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	42ac      	cmp	r4, r5
 8000ed0:	46c8      	mov	r8, r9
 8000ed2:	46ae      	mov	lr, r5
 8000ed4:	d356      	bcc.n	8000f84 <__udivmoddi4+0x29c>
 8000ed6:	d053      	beq.n	8000f80 <__udivmoddi4+0x298>
 8000ed8:	b156      	cbz	r6, 8000ef0 <__udivmoddi4+0x208>
 8000eda:	ebb0 0208 	subs.w	r2, r0, r8
 8000ede:	eb64 040e 	sbc.w	r4, r4, lr
 8000ee2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ee6:	40ca      	lsrs	r2, r1
 8000ee8:	40cc      	lsrs	r4, r1
 8000eea:	4317      	orrs	r7, r2
 8000eec:	e9c6 7400 	strd	r7, r4, [r6]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef8:	f1c3 0120 	rsb	r1, r3, #32
 8000efc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f00:	fa20 f201 	lsr.w	r2, r0, r1
 8000f04:	fa25 f101 	lsr.w	r1, r5, r1
 8000f08:	409d      	lsls	r5, r3
 8000f0a:	432a      	orrs	r2, r5
 8000f0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f10:	fa1f fe8c 	uxth.w	lr, ip
 8000f14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f18:	fb07 1510 	mls	r5, r7, r0, r1
 8000f1c:	0c11      	lsrs	r1, r2, #16
 8000f1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f22:	fb00 f50e 	mul.w	r5, r0, lr
 8000f26:	428d      	cmp	r5, r1
 8000f28:	fa04 f403 	lsl.w	r4, r4, r3
 8000f2c:	d908      	bls.n	8000f40 <__udivmoddi4+0x258>
 8000f2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f36:	d22f      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f38:	428d      	cmp	r5, r1
 8000f3a:	d92d      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	4461      	add	r1, ip
 8000f40:	1b49      	subs	r1, r1, r5
 8000f42:	b292      	uxth	r2, r2
 8000f44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f48:	fb07 1115 	mls	r1, r7, r5, r1
 8000f4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f50:	fb05 f10e 	mul.w	r1, r5, lr
 8000f54:	4291      	cmp	r1, r2
 8000f56:	d908      	bls.n	8000f6a <__udivmoddi4+0x282>
 8000f58:	eb1c 0202 	adds.w	r2, ip, r2
 8000f5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f60:	d216      	bcs.n	8000f90 <__udivmoddi4+0x2a8>
 8000f62:	4291      	cmp	r1, r2
 8000f64:	d914      	bls.n	8000f90 <__udivmoddi4+0x2a8>
 8000f66:	3d02      	subs	r5, #2
 8000f68:	4462      	add	r2, ip
 8000f6a:	1a52      	subs	r2, r2, r1
 8000f6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f70:	e738      	b.n	8000de4 <__udivmoddi4+0xfc>
 8000f72:	4631      	mov	r1, r6
 8000f74:	4630      	mov	r0, r6
 8000f76:	e708      	b.n	8000d8a <__udivmoddi4+0xa2>
 8000f78:	4639      	mov	r1, r7
 8000f7a:	e6e6      	b.n	8000d4a <__udivmoddi4+0x62>
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	e6fb      	b.n	8000d78 <__udivmoddi4+0x90>
 8000f80:	4548      	cmp	r0, r9
 8000f82:	d2a9      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f84:	ebb9 0802 	subs.w	r8, r9, r2
 8000f88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	e7a3      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f90:	4645      	mov	r5, r8
 8000f92:	e7ea      	b.n	8000f6a <__udivmoddi4+0x282>
 8000f94:	462b      	mov	r3, r5
 8000f96:	e794      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f98:	4640      	mov	r0, r8
 8000f9a:	e7d1      	b.n	8000f40 <__udivmoddi4+0x258>
 8000f9c:	46d0      	mov	r8, sl
 8000f9e:	e77b      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000fa0:	3d02      	subs	r5, #2
 8000fa2:	4462      	add	r2, ip
 8000fa4:	e732      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e70a      	b.n	8000dc0 <__udivmoddi4+0xd8>
 8000faa:	4464      	add	r4, ip
 8000fac:	3802      	subs	r0, #2
 8000fae:	e742      	b.n	8000e36 <__udivmoddi4+0x14e>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08c      	sub	sp, #48	; 0x30
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	2220      	movs	r2, #32
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f009 fdc0 	bl	800ab52 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fd2:	4b33      	ldr	r3, [pc, #204]	; (80010a0 <MX_ADC1_Init+0xec>)
 8000fd4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fd8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fda:	4b31      	ldr	r3, [pc, #196]	; (80010a0 <MX_ADC1_Init+0xec>)
 8000fdc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fe0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fe2:	4b2f      	ldr	r3, [pc, #188]	; (80010a0 <MX_ADC1_Init+0xec>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fe8:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <MX_ADC1_Init+0xec>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000fee:	4b2c      	ldr	r3, [pc, #176]	; (80010a0 <MX_ADC1_Init+0xec>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ff4:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <MX_ADC1_Init+0xec>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ffa:	4b29      	ldr	r3, [pc, #164]	; (80010a0 <MX_ADC1_Init+0xec>)
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001000:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <MX_ADC1_Init+0xec>)
 8001002:	2200      	movs	r2, #0
 8001004:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001006:	4b26      	ldr	r3, [pc, #152]	; (80010a0 <MX_ADC1_Init+0xec>)
 8001008:	2200      	movs	r2, #0
 800100a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800100c:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <MX_ADC1_Init+0xec>)
 800100e:	2201      	movs	r2, #1
 8001010:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001012:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <MX_ADC1_Init+0xec>)
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800101a:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <MX_ADC1_Init+0xec>)
 800101c:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8001020:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001022:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <MX_ADC1_Init+0xec>)
 8001024:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001028:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <MX_ADC1_Init+0xec>)
 800102c:	2201      	movs	r2, #1
 800102e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001032:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <MX_ADC1_Init+0xec>)
 8001034:	2200      	movs	r2, #0
 8001036:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001038:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <MX_ADC1_Init+0xec>)
 800103a:	2200      	movs	r2, #0
 800103c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001040:	4817      	ldr	r0, [pc, #92]	; (80010a0 <MX_ADC1_Init+0xec>)
 8001042:	f001 fd87 	bl	8002b54 <HAL_ADC_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 800104c:	f000 fb5c 	bl	8001708 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001058:	4619      	mov	r1, r3
 800105a:	4811      	ldr	r0, [pc, #68]	; (80010a0 <MX_ADC1_Init+0xec>)
 800105c:	f003 f9fc 	bl	8004458 <HAL_ADCEx_MultiModeConfigChannel>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001066:	f000 fb4f 	bl	8001708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MX_ADC1_Init+0xf0>)
 800106c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800106e:	2306      	movs	r3, #6
 8001070:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001072:	2302      	movs	r3, #2
 8001074:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001076:	237f      	movs	r3, #127	; 0x7f
 8001078:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800107a:	2304      	movs	r3, #4
 800107c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	4619      	mov	r1, r3
 8001086:	4806      	ldr	r0, [pc, #24]	; (80010a0 <MX_ADC1_Init+0xec>)
 8001088:	f002 fb6a 	bl	8003760 <HAL_ADC_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001092:	f000 fb39 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001096:	bf00      	nop
 8001098:	3730      	adds	r7, #48	; 0x30
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200002ac 	.word	0x200002ac
 80010a4:	08600004 	.word	0x08600004

080010a8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ae:	463b      	mov	r3, r7
 80010b0:	2220      	movs	r2, #32
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f009 fd4c 	bl	800ab52 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80010ba:	4b2b      	ldr	r3, [pc, #172]	; (8001168 <MX_ADC2_Init+0xc0>)
 80010bc:	4a2b      	ldr	r2, [pc, #172]	; (800116c <MX_ADC2_Init+0xc4>)
 80010be:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010c0:	4b29      	ldr	r3, [pc, #164]	; (8001168 <MX_ADC2_Init+0xc0>)
 80010c2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010c6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010c8:	4b27      	ldr	r3, [pc, #156]	; (8001168 <MX_ADC2_Init+0xc0>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ce:	4b26      	ldr	r3, [pc, #152]	; (8001168 <MX_ADC2_Init+0xc0>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80010d4:	4b24      	ldr	r3, [pc, #144]	; (8001168 <MX_ADC2_Init+0xc0>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010da:	4b23      	ldr	r3, [pc, #140]	; (8001168 <MX_ADC2_Init+0xc0>)
 80010dc:	2200      	movs	r2, #0
 80010de:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010e0:	4b21      	ldr	r3, [pc, #132]	; (8001168 <MX_ADC2_Init+0xc0>)
 80010e2:	2204      	movs	r2, #4
 80010e4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80010e6:	4b20      	ldr	r3, [pc, #128]	; (8001168 <MX_ADC2_Init+0xc0>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010ec:	4b1e      	ldr	r3, [pc, #120]	; (8001168 <MX_ADC2_Init+0xc0>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80010f2:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <MX_ADC2_Init+0xc0>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010f8:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <MX_ADC2_Init+0xc0>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001100:	4b19      	ldr	r3, [pc, #100]	; (8001168 <MX_ADC2_Init+0xc0>)
 8001102:	2200      	movs	r2, #0
 8001104:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001106:	4b18      	ldr	r3, [pc, #96]	; (8001168 <MX_ADC2_Init+0xc0>)
 8001108:	2200      	movs	r2, #0
 800110a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800110c:	4b16      	ldr	r3, [pc, #88]	; (8001168 <MX_ADC2_Init+0xc0>)
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_ADC2_Init+0xc0>)
 8001116:	2200      	movs	r2, #0
 8001118:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800111a:	4b13      	ldr	r3, [pc, #76]	; (8001168 <MX_ADC2_Init+0xc0>)
 800111c:	2200      	movs	r2, #0
 800111e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001122:	4811      	ldr	r0, [pc, #68]	; (8001168 <MX_ADC2_Init+0xc0>)
 8001124:	f001 fd16 	bl	8002b54 <HAL_ADC_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800112e:	f000 faeb 	bl	8001708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <MX_ADC2_Init+0xc8>)
 8001134:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001136:	2306      	movs	r3, #6
 8001138:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800113e:	237f      	movs	r3, #127	; 0x7f
 8001140:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001142:	2304      	movs	r3, #4
 8001144:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800114a:	463b      	mov	r3, r7
 800114c:	4619      	mov	r1, r3
 800114e:	4806      	ldr	r0, [pc, #24]	; (8001168 <MX_ADC2_Init+0xc0>)
 8001150:	f002 fb06 	bl	8003760 <HAL_ADC_ConfigChannel>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800115a:	f000 fad5 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	3720      	adds	r7, #32
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000318 	.word	0x20000318
 800116c:	50000100 	.word	0x50000100
 8001170:	19200040 	.word	0x19200040

08001174 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b0a4      	sub	sp, #144	; 0x90
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800118c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001190:	2254      	movs	r2, #84	; 0x54
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f009 fcdc 	bl	800ab52 <memset>
  if(adcHandle->Instance==ADC1)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011a2:	f040 80a8 	bne.w	80012f6 <HAL_ADC_MspInit+0x182>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011ac:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80011b0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011b6:	4618      	mov	r0, r3
 80011b8:	f004 fe40 	bl	8005e3c <HAL_RCCEx_PeriphCLKConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80011c2:	f000 faa1 	bl	8001708 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80011c6:	4b81      	ldr	r3, [pc, #516]	; (80013cc <HAL_ADC_MspInit+0x258>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	3301      	adds	r3, #1
 80011cc:	4a7f      	ldr	r2, [pc, #508]	; (80013cc <HAL_ADC_MspInit+0x258>)
 80011ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80011d0:	4b7e      	ldr	r3, [pc, #504]	; (80013cc <HAL_ADC_MspInit+0x258>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d10b      	bne.n	80011f0 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80011d8:	4b7d      	ldr	r3, [pc, #500]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 80011da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011dc:	4a7c      	ldr	r2, [pc, #496]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 80011de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e4:	4b7a      	ldr	r3, [pc, #488]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 80011e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f0:	4b77      	ldr	r3, [pc, #476]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f4:	4a76      	ldr	r2, [pc, #472]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 80011f6:	f043 0304 	orr.w	r3, r3, #4
 80011fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fc:	4b74      	ldr	r3, [pc, #464]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 80011fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	623b      	str	r3, [r7, #32]
 8001206:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001208:	4b71      	ldr	r3, [pc, #452]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 800120a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120c:	4a70      	ldr	r2, [pc, #448]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001214:	4b6e      	ldr	r3, [pc, #440]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 8001216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	61fb      	str	r3, [r7, #28]
 800121e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001220:	4b6b      	ldr	r3, [pc, #428]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 8001222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001224:	4a6a      	ldr	r2, [pc, #424]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 8001226:	f043 0302 	orr.w	r3, r3, #2
 800122a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122c:	4b68      	ldr	r3, [pc, #416]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 800122e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	61bb      	str	r3, [r7, #24]
 8001236:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8001238:	2304      	movs	r3, #4
 800123a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800123c:	2303      	movs	r3, #3
 800123e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 8001248:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800124c:	4619      	mov	r1, r3
 800124e:	4861      	ldr	r0, [pc, #388]	; (80013d4 <HAL_ADC_MspInit+0x260>)
 8001250:	f003 fe1c 	bl	8004e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8001254:	2302      	movs	r3, #2
 8001256:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001258:	2303      	movs	r3, #3
 800125a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8001264:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001268:	4619      	mov	r1, r3
 800126a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126e:	f003 fe0d 	bl	8004e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001272:	2303      	movs	r3, #3
 8001274:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001276:	2303      	movs	r3, #3
 8001278:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001282:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001286:	4619      	mov	r1, r3
 8001288:	4853      	ldr	r0, [pc, #332]	; (80013d8 <HAL_ADC_MspInit+0x264>)
 800128a:	f003 fdff 	bl	8004e8c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 800128e:	4b53      	ldr	r3, [pc, #332]	; (80013dc <HAL_ADC_MspInit+0x268>)
 8001290:	4a53      	ldr	r2, [pc, #332]	; (80013e0 <HAL_ADC_MspInit+0x26c>)
 8001292:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001294:	4b51      	ldr	r3, [pc, #324]	; (80013dc <HAL_ADC_MspInit+0x268>)
 8001296:	2205      	movs	r2, #5
 8001298:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800129a:	4b50      	ldr	r3, [pc, #320]	; (80013dc <HAL_ADC_MspInit+0x268>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a0:	4b4e      	ldr	r3, [pc, #312]	; (80013dc <HAL_ADC_MspInit+0x268>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012a6:	4b4d      	ldr	r3, [pc, #308]	; (80013dc <HAL_ADC_MspInit+0x268>)
 80012a8:	2280      	movs	r2, #128	; 0x80
 80012aa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012ac:	4b4b      	ldr	r3, [pc, #300]	; (80013dc <HAL_ADC_MspInit+0x268>)
 80012ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012b2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012b4:	4b49      	ldr	r3, [pc, #292]	; (80013dc <HAL_ADC_MspInit+0x268>)
 80012b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ba:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80012bc:	4b47      	ldr	r3, [pc, #284]	; (80013dc <HAL_ADC_MspInit+0x268>)
 80012be:	2200      	movs	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012c2:	4b46      	ldr	r3, [pc, #280]	; (80013dc <HAL_ADC_MspInit+0x268>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012c8:	4844      	ldr	r0, [pc, #272]	; (80013dc <HAL_ADC_MspInit+0x268>)
 80012ca:	f003 faad 	bl	8004828 <HAL_DMA_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 80012d4:	f000 fa18 	bl	8001708 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a40      	ldr	r2, [pc, #256]	; (80013dc <HAL_ADC_MspInit+0x268>)
 80012dc:	655a      	str	r2, [r3, #84]	; 0x54
 80012de:	4a3f      	ldr	r2, [pc, #252]	; (80013dc <HAL_ADC_MspInit+0x268>)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2100      	movs	r1, #0
 80012e8:	2012      	movs	r0, #18
 80012ea:	f003 fa75 	bl	80047d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80012ee:	2012      	movs	r0, #18
 80012f0:	f003 fa8c 	bl	800480c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80012f4:	e066      	b.n	80013c4 <HAL_ADC_MspInit+0x250>
  else if(adcHandle->Instance==ADC2)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a3a      	ldr	r2, [pc, #232]	; (80013e4 <HAL_ADC_MspInit+0x270>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d161      	bne.n	80013c4 <HAL_ADC_MspInit+0x250>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001300:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001306:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800130a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800130c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001310:	4618      	mov	r0, r3
 8001312:	f004 fd93 	bl	8005e3c <HAL_RCCEx_PeriphCLKConfig>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <HAL_ADC_MspInit+0x1ac>
      Error_Handler();
 800131c:	f000 f9f4 	bl	8001708 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001320:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <HAL_ADC_MspInit+0x258>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	3301      	adds	r3, #1
 8001326:	4a29      	ldr	r2, [pc, #164]	; (80013cc <HAL_ADC_MspInit+0x258>)
 8001328:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800132a:	4b28      	ldr	r3, [pc, #160]	; (80013cc <HAL_ADC_MspInit+0x258>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d10b      	bne.n	800134a <HAL_ADC_MspInit+0x1d6>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001332:	4b27      	ldr	r3, [pc, #156]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	4a26      	ldr	r2, [pc, #152]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 8001338:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800133c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800133e:	4b24      	ldr	r3, [pc, #144]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001342:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	4a20      	ldr	r2, [pc, #128]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001356:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	4a1a      	ldr	r2, [pc, #104]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 800137a:	230b      	movs	r3, #11
 800137c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800137e:	2303      	movs	r3, #3
 8001380:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800138e:	4619      	mov	r1, r3
 8001390:	4810      	ldr	r0, [pc, #64]	; (80013d4 <HAL_ADC_MspInit+0x260>)
 8001392:	f003 fd7b 	bl	8004e8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8001396:	2301      	movs	r3, #1
 8001398:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800139a:	2303      	movs	r3, #3
 800139c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 80013a6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013aa:	4619      	mov	r1, r3
 80013ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b0:	f003 fd6c 	bl	8004e8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2100      	movs	r1, #0
 80013b8:	2012      	movs	r0, #18
 80013ba:	f003 fa0d 	bl	80047d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80013be:	2012      	movs	r0, #18
 80013c0:	f003 fa24 	bl	800480c <HAL_NVIC_EnableIRQ>
}
 80013c4:	bf00      	nop
 80013c6:	3790      	adds	r7, #144	; 0x90
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200003e4 	.word	0x200003e4
 80013d0:	40021000 	.word	0x40021000
 80013d4:	48000800 	.word	0x48000800
 80013d8:	48000400 	.word	0x48000400
 80013dc:	20000384 	.word	0x20000384
 80013e0:	4002001c 	.word	0x4002001c
 80013e4:	50000100 	.word	0x50000100

080013e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80013ee:	4b12      	ldr	r3, [pc, #72]	; (8001438 <MX_DMA_Init+0x50>)
 80013f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f2:	4a11      	ldr	r2, [pc, #68]	; (8001438 <MX_DMA_Init+0x50>)
 80013f4:	f043 0304 	orr.w	r3, r3, #4
 80013f8:	6493      	str	r3, [r2, #72]	; 0x48
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <MX_DMA_Init+0x50>)
 80013fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <MX_DMA_Init+0x50>)
 8001408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800140a:	4a0b      	ldr	r2, [pc, #44]	; (8001438 <MX_DMA_Init+0x50>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6493      	str	r3, [r2, #72]	; 0x48
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <MX_DMA_Init+0x50>)
 8001414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2100      	movs	r1, #0
 8001422:	200c      	movs	r0, #12
 8001424:	f003 f9d8 	bl	80047d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001428:	200c      	movs	r0, #12
 800142a:	f003 f9ef 	bl	800480c <HAL_NVIC_EnableIRQ>

}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40021000 	.word	0x40021000

0800143c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	; 0x28
 8001440:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
 8001450:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001452:	4b3f      	ldr	r3, [pc, #252]	; (8001550 <MX_GPIO_Init+0x114>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	4a3e      	ldr	r2, [pc, #248]	; (8001550 <MX_GPIO_Init+0x114>)
 8001458:	f043 0304 	orr.w	r3, r3, #4
 800145c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145e:	4b3c      	ldr	r3, [pc, #240]	; (8001550 <MX_GPIO_Init+0x114>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800146a:	4b39      	ldr	r3, [pc, #228]	; (8001550 <MX_GPIO_Init+0x114>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	4a38      	ldr	r2, [pc, #224]	; (8001550 <MX_GPIO_Init+0x114>)
 8001470:	f043 0320 	orr.w	r3, r3, #32
 8001474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001476:	4b36      	ldr	r3, [pc, #216]	; (8001550 <MX_GPIO_Init+0x114>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	f003 0320 	and.w	r3, r3, #32
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	4b33      	ldr	r3, [pc, #204]	; (8001550 <MX_GPIO_Init+0x114>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	4a32      	ldr	r2, [pc, #200]	; (8001550 <MX_GPIO_Init+0x114>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148e:	4b30      	ldr	r3, [pc, #192]	; (8001550 <MX_GPIO_Init+0x114>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	4b2d      	ldr	r3, [pc, #180]	; (8001550 <MX_GPIO_Init+0x114>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	4a2c      	ldr	r2, [pc, #176]	; (8001550 <MX_GPIO_Init+0x114>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a6:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <MX_GPIO_Init+0x114>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b2:	4b27      	ldr	r3, [pc, #156]	; (8001550 <MX_GPIO_Init+0x114>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	4a26      	ldr	r2, [pc, #152]	; (8001550 <MX_GPIO_Init+0x114>)
 80014b8:	f043 0308 	orr.w	r3, r3, #8
 80014bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014be:	4b24      	ldr	r3, [pc, #144]	; (8001550 <MX_GPIO_Init+0x114>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2120      	movs	r1, #32
 80014ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d2:	f003 fe5d 	bl	8005190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2104      	movs	r1, #4
 80014da:	481e      	ldr	r0, [pc, #120]	; (8001554 <MX_GPIO_Init+0x118>)
 80014dc:	f003 fe58 	bl	8005190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 80014e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	4619      	mov	r1, r3
 80014f6:	4818      	ldr	r0, [pc, #96]	; (8001558 <MX_GPIO_Init+0x11c>)
 80014f8:	f003 fcc8 	bl	8004e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 80014fc:	2320      	movs	r3, #32
 80014fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001500:	2301      	movs	r3, #1
 8001502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4619      	mov	r1, r3
 8001512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001516:	f003 fcb9 	bl	8004e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 800151a:	2304      	movs	r3, #4
 800151c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151e:	2301      	movs	r3, #1
 8001520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	4808      	ldr	r0, [pc, #32]	; (8001554 <MX_GPIO_Init+0x118>)
 8001532:	f003 fcab 	bl	8004e8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2100      	movs	r1, #0
 800153a:	2028      	movs	r0, #40	; 0x28
 800153c:	f003 f94c 	bl	80047d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001540:	2028      	movs	r0, #40	; 0x28
 8001542:	f003 f963 	bl	800480c <HAL_NVIC_EnableIRQ>

}
 8001546:	bf00      	nop
 8001548:	3728      	adds	r7, #40	; 0x28
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40021000 	.word	0x40021000
 8001554:	48000c00 	.word	0x48000c00
 8001558:	48000800 	.word	0x48000800

0800155c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001560:	f001 f857 	bl	8002612 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001564:	f000 f822 	bl	80015ac <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001568:	f7ff ff68 	bl	800143c <MX_GPIO_Init>
	MX_DMA_Init();
 800156c:	f7ff ff3c 	bl	80013e8 <MX_DMA_Init>
	MX_ADC2_Init();
 8001570:	f7ff fd9a 	bl	80010a8 <MX_ADC2_Init>
	MX_ADC1_Init();
 8001574:	f7ff fd1e 	bl	8000fb4 <MX_ADC1_Init>
	MX_TIM1_Init();
 8001578:	f000 fa9e 	bl	8001ab8 <MX_TIM1_Init>
	MX_TIM3_Init();
 800157c:	f000 fb4e 	bl	8001c1c <MX_TIM3_Init>
	MX_USART2_UART_Init();
 8001580:	f000 fc82 	bl	8001e88 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8001584:	f000 fccc 	bl	8001f20 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	Shell_Init();
 8001588:	f000 fdbe 	bl	8002108 <Shell_Init>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800158c:	217f      	movs	r1, #127	; 0x7f
 800158e:	4805      	ldr	r0, [pc, #20]	; (80015a4 <main+0x48>)
 8001590:	f002 fece 	bl	8004330 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1,ADC_Buffer, ADC_BUF_SIZE);
 8001594:	2201      	movs	r2, #1
 8001596:	4904      	ldr	r1, [pc, #16]	; (80015a8 <main+0x4c>)
 8001598:	4802      	ldr	r0, [pc, #8]	; (80015a4 <main+0x48>)
 800159a:	f001 fd81 	bl	80030a0 <HAL_ADC_Start_DMA>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 800159e:	f000 fdf3 	bl	8002188 <Shell_Loop>
	{
 80015a2:	e7fc      	b.n	800159e <main+0x42>
 80015a4:	200002ac 	.word	0x200002ac
 80015a8:	200003ec 	.word	0x200003ec

080015ac <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b094      	sub	sp, #80	; 0x50
 80015b0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015b2:	f107 0318 	add.w	r3, r7, #24
 80015b6:	2238      	movs	r2, #56	; 0x38
 80015b8:	2100      	movs	r1, #0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f009 fac9 	bl	800ab52 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
 80015cc:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80015ce:	2000      	movs	r0, #0
 80015d0:	f003 fe1a 	bl	8005208 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015d4:	2301      	movs	r3, #1
 80015d6:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015dc:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015de:	2302      	movs	r3, #2
 80015e0:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015e2:	2303      	movs	r3, #3
 80015e4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80015e6:	2306      	movs	r3, #6
 80015e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80015ea:	2355      	movs	r3, #85	; 0x55
 80015ec:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015ee:	2302      	movs	r3, #2
 80015f0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015f2:	2302      	movs	r3, #2
 80015f4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015f6:	2302      	movs	r3, #2
 80015f8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015fa:	f107 0318 	add.w	r3, r7, #24
 80015fe:	4618      	mov	r0, r3
 8001600:	f003 feb6 	bl	8005370 <HAL_RCC_OscConfig>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <SystemClock_Config+0x62>
	{
		Error_Handler();
 800160a:	f000 f87d 	bl	8001708 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800160e:	230f      	movs	r3, #15
 8001610:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001612:	2303      	movs	r3, #3
 8001614:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2104      	movs	r1, #4
 8001626:	4618      	mov	r0, r3
 8001628:	f004 f9ba 	bl	80059a0 <HAL_RCC_ClockConfig>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <SystemClock_Config+0x8a>
	{
		Error_Handler();
 8001632:	f000 f869 	bl	8001708 <Error_Handler>
	}
}
 8001636:	bf00      	nop
 8001638:	3750      	adds	r7, #80	; 0x50
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	float u_Vf;
	uint16_t valf = ADC_Buffer[0];
 8001648:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <HAL_ADC_ConvCpltCallback+0x98>)
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	81fb      	strh	r3, [r7, #14]
	u_Vf = (valf / 4096.0) * 3.3;
 800164e:	89fb      	ldrh	r3, [r7, #14]
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe ff9f 	bl	8000594 <__aeabi_i2d>
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	4b20      	ldr	r3, [pc, #128]	; (80016dc <HAL_ADC_ConvCpltCallback+0x9c>)
 800165c:	f7ff f92e 	bl	80008bc <__aeabi_ddiv>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4610      	mov	r0, r2
 8001666:	4619      	mov	r1, r3
 8001668:	a315      	add	r3, pc, #84	; (adr r3, 80016c0 <HAL_ADC_ConvCpltCallback+0x80>)
 800166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166e:	f7fe fffb 	bl	8000668 <__aeabi_dmul>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4610      	mov	r0, r2
 8001678:	4619      	mov	r1, r3
 800167a:	f7ff facd 	bl	8000c18 <__aeabi_d2f>
 800167e:	4603      	mov	r3, r0
 8001680:	60bb      	str	r3, [r7, #8]
	Imesf =(u_Vf - 1.65) / 0.05;
 8001682:	68b8      	ldr	r0, [r7, #8]
 8001684:	f7fe ff98 	bl	80005b8 <__aeabi_f2d>
 8001688:	a30f      	add	r3, pc, #60	; (adr r3, 80016c8 <HAL_ADC_ConvCpltCallback+0x88>)
 800168a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168e:	f7fe fe33 	bl	80002f8 <__aeabi_dsub>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4610      	mov	r0, r2
 8001698:	4619      	mov	r1, r3
 800169a:	a30d      	add	r3, pc, #52	; (adr r3, 80016d0 <HAL_ADC_ConvCpltCallback+0x90>)
 800169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a0:	f7ff f90c 	bl	80008bc <__aeabi_ddiv>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4610      	mov	r0, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	f7ff fab4 	bl	8000c18 <__aeabi_d2f>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4a0b      	ldr	r2, [pc, #44]	; (80016e0 <HAL_ADC_ConvCpltCallback+0xa0>)
 80016b4:	6013      	str	r3, [r2, #0]

}
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	66666666 	.word	0x66666666
 80016c4:	400a6666 	.word	0x400a6666
 80016c8:	66666666 	.word	0x66666666
 80016cc:	3ffa6666 	.word	0x3ffa6666
 80016d0:	9999999a 	.word	0x9999999a
 80016d4:	3fa99999 	.word	0x3fa99999
 80016d8:	200003ec 	.word	0x200003ec
 80016dc:	40b00000 	.word	0x40b00000
 80016e0:	200003e8 	.word	0x200003e8

080016e4 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a04      	ldr	r2, [pc, #16]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d101      	bne.n	80016fa <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80016f6:	f000 ffa5 	bl	8002644 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40001000 	.word	0x40001000

08001708 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800170c:	b672      	cpsid	i
}
 800170e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001710:	e7fe      	b.n	8001710 <Error_Handler+0x8>
	...

08001714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171a:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <HAL_MspInit+0x44>)
 800171c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800171e:	4a0e      	ldr	r2, [pc, #56]	; (8001758 <HAL_MspInit+0x44>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6613      	str	r3, [r2, #96]	; 0x60
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <HAL_MspInit+0x44>)
 8001728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <HAL_MspInit+0x44>)
 8001734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001736:	4a08      	ldr	r2, [pc, #32]	; (8001758 <HAL_MspInit+0x44>)
 8001738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173c:	6593      	str	r3, [r2, #88]	; 0x58
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_MspInit+0x44>)
 8001740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800174a:	f003 fe01 	bl	8005350 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000

0800175c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08c      	sub	sp, #48	; 0x30
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800176c:	4b2c      	ldr	r3, [pc, #176]	; (8001820 <HAL_InitTick+0xc4>)
 800176e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001770:	4a2b      	ldr	r2, [pc, #172]	; (8001820 <HAL_InitTick+0xc4>)
 8001772:	f043 0310 	orr.w	r3, r3, #16
 8001776:	6593      	str	r3, [r2, #88]	; 0x58
 8001778:	4b29      	ldr	r3, [pc, #164]	; (8001820 <HAL_InitTick+0xc4>)
 800177a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177c:	f003 0310 	and.w	r3, r3, #16
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001784:	f107 020c 	add.w	r2, r7, #12
 8001788:	f107 0310 	add.w	r3, r7, #16
 800178c:	4611      	mov	r1, r2
 800178e:	4618      	mov	r0, r3
 8001790:	f004 fadc 	bl	8005d4c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001794:	f004 faae 	bl	8005cf4 <HAL_RCC_GetPCLK1Freq>
 8001798:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800179a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179c:	4a21      	ldr	r2, [pc, #132]	; (8001824 <HAL_InitTick+0xc8>)
 800179e:	fba2 2303 	umull	r2, r3, r2, r3
 80017a2:	0c9b      	lsrs	r3, r3, #18
 80017a4:	3b01      	subs	r3, #1
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017a8:	4b1f      	ldr	r3, [pc, #124]	; (8001828 <HAL_InitTick+0xcc>)
 80017aa:	4a20      	ldr	r2, [pc, #128]	; (800182c <HAL_InitTick+0xd0>)
 80017ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017ae:	4b1e      	ldr	r3, [pc, #120]	; (8001828 <HAL_InitTick+0xcc>)
 80017b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017b4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017b6:	4a1c      	ldr	r2, [pc, #112]	; (8001828 <HAL_InitTick+0xcc>)
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017bc:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <HAL_InitTick+0xcc>)
 80017be:	2200      	movs	r2, #0
 80017c0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c2:	4b19      	ldr	r3, [pc, #100]	; (8001828 <HAL_InitTick+0xcc>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80017c8:	4817      	ldr	r0, [pc, #92]	; (8001828 <HAL_InitTick+0xcc>)
 80017ca:	f004 fd85 	bl	80062d8 <HAL_TIM_Base_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80017d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d11b      	bne.n	8001814 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80017dc:	4812      	ldr	r0, [pc, #72]	; (8001828 <HAL_InitTick+0xcc>)
 80017de:	f004 fddd 	bl	800639c <HAL_TIM_Base_Start_IT>
 80017e2:	4603      	mov	r3, r0
 80017e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80017e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d111      	bne.n	8001814 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017f0:	2036      	movs	r0, #54	; 0x36
 80017f2:	f003 f80b 	bl	800480c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b0f      	cmp	r3, #15
 80017fa:	d808      	bhi.n	800180e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80017fc:	2200      	movs	r2, #0
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	2036      	movs	r0, #54	; 0x36
 8001802:	f002 ffe9 	bl	80047d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001806:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <HAL_InitTick+0xd4>)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	e002      	b.n	8001814 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001814:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001818:	4618      	mov	r0, r3
 800181a:	3730      	adds	r7, #48	; 0x30
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40021000 	.word	0x40021000
 8001824:	431bde83 	.word	0x431bde83
 8001828:	200003f0 	.word	0x200003f0
 800182c:	40001000 	.word	0x40001000
 8001830:	200000c0 	.word	0x200000c0

08001834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <NMI_Handler+0x4>

0800183a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800183e:	e7fe      	b.n	800183e <HardFault_Handler+0x4>

08001840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <MemManage_Handler+0x4>

08001846 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800184a:	e7fe      	b.n	800184a <BusFault_Handler+0x4>

0800184c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <UsageFault_Handler+0x4>

08001852 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <DMA1_Channel2_IRQHandler+0x10>)
 8001892:	f003 f9ac 	bl	8004bee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000384 	.word	0x20000384

080018a0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80018a4:	4803      	ldr	r0, [pc, #12]	; (80018b4 <ADC1_2_IRQHandler+0x14>)
 80018a6:	f001 fcdd 	bl	8003264 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80018aa:	4803      	ldr	r0, [pc, #12]	; (80018b8 <ADC1_2_IRQHandler+0x18>)
 80018ac:	f001 fcda 	bl	8003264 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	200002ac 	.word	0x200002ac
 80018b8:	20000318 	.word	0x20000318

080018bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018c0:	4802      	ldr	r0, [pc, #8]	; (80018cc <USART2_IRQHandler+0x10>)
 80018c2:	f006 fbcf 	bl	8008064 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200004d8 	.word	0x200004d8

080018d0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018d4:	4802      	ldr	r0, [pc, #8]	; (80018e0 <USART3_IRQHandler+0x10>)
 80018d6:	f006 fbc5 	bl	8008064 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000568 	.word	0x20000568

080018e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 80018e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018ec:	f003 fc68 	bl	80051c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <TIM6_DAC_IRQHandler+0x10>)
 80018fa:	f004 ffcd 	bl	8006898 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200003f0 	.word	0x200003f0

08001908 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return 1;
 800190c:	2301      	movs	r3, #1
}
 800190e:	4618      	mov	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <_kill>:

int _kill(int pid, int sig)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001922:	f009 f9c5 	bl	800acb0 <__errno>
 8001926:	4603      	mov	r3, r0
 8001928:	2216      	movs	r2, #22
 800192a:	601a      	str	r2, [r3, #0]
  return -1;
 800192c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001930:	4618      	mov	r0, r3
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <_exit>:

void _exit (int status)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001940:	f04f 31ff 	mov.w	r1, #4294967295
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ffe7 	bl	8001918 <_kill>
  while (1) {}    /* Make sure we hang here */
 800194a:	e7fe      	b.n	800194a <_exit+0x12>

0800194c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	e00a      	b.n	8001974 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800195e:	f3af 8000 	nop.w
 8001962:	4601      	mov	r1, r0
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	60ba      	str	r2, [r7, #8]
 800196a:	b2ca      	uxtb	r2, r1
 800196c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	3301      	adds	r3, #1
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	697a      	ldr	r2, [r7, #20]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	429a      	cmp	r2, r3
 800197a:	dbf0      	blt.n	800195e <_read+0x12>
  }

  return len;
 800197c:	687b      	ldr	r3, [r7, #4]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3718      	adds	r7, #24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b086      	sub	sp, #24
 800198a:	af00      	add	r7, sp, #0
 800198c:	60f8      	str	r0, [r7, #12]
 800198e:	60b9      	str	r1, [r7, #8]
 8001990:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	e009      	b.n	80019ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	1c5a      	adds	r2, r3, #1
 800199c:	60ba      	str	r2, [r7, #8]
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	3301      	adds	r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	dbf1      	blt.n	8001998 <_write+0x12>
  }
  return len;
 80019b4:	687b      	ldr	r3, [r7, #4]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <_close>:

int _close(int file)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019e6:	605a      	str	r2, [r3, #4]
  return 0;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <_isatty>:

int _isatty(int file)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019fe:	2301      	movs	r3, #1
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a30:	4a14      	ldr	r2, [pc, #80]	; (8001a84 <_sbrk+0x5c>)
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <_sbrk+0x60>)
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a3c:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <_sbrk+0x64>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d102      	bne.n	8001a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <_sbrk+0x64>)
 8001a46:	4a12      	ldr	r2, [pc, #72]	; (8001a90 <_sbrk+0x68>)
 8001a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <_sbrk+0x64>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d207      	bcs.n	8001a68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a58:	f009 f92a 	bl	800acb0 <__errno>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	220c      	movs	r2, #12
 8001a60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295
 8001a66:	e009      	b.n	8001a7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a68:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <_sbrk+0x64>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a6e:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <_sbrk+0x64>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <_sbrk+0x64>)
 8001a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20020000 	.word	0x20020000
 8001a88:	00000400 	.word	0x00000400
 8001a8c:	2000043c 	.word	0x2000043c
 8001a90:	20000808 	.word	0x20000808

08001a94 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <SystemInit+0x20>)
 8001a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a9e:	4a05      	ldr	r2, [pc, #20]	; (8001ab4 <SystemInit+0x20>)
 8001aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b098      	sub	sp, #96	; 0x60
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001abe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
 8001ad8:	611a      	str	r2, [r3, #16]
 8001ada:	615a      	str	r2, [r3, #20]
 8001adc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	2234      	movs	r2, #52	; 0x34
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f009 f834 	bl	800ab52 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001aea:	4b4a      	ldr	r3, [pc, #296]	; (8001c14 <MX_TIM1_Init+0x15c>)
 8001aec:	4a4a      	ldr	r2, [pc, #296]	; (8001c18 <MX_TIM1_Init+0x160>)
 8001aee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001af0:	4b48      	ldr	r3, [pc, #288]	; (8001c14 <MX_TIM1_Init+0x15c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001af6:	4b47      	ldr	r3, [pc, #284]	; (8001c14 <MX_TIM1_Init+0x15c>)
 8001af8:	2220      	movs	r2, #32
 8001afa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4250;
 8001afc:	4b45      	ldr	r3, [pc, #276]	; (8001c14 <MX_TIM1_Init+0x15c>)
 8001afe:	f241 029a 	movw	r2, #4250	; 0x109a
 8001b02:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b04:	4b43      	ldr	r3, [pc, #268]	; (8001c14 <MX_TIM1_Init+0x15c>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b0a:	4b42      	ldr	r3, [pc, #264]	; (8001c14 <MX_TIM1_Init+0x15c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b10:	4b40      	ldr	r3, [pc, #256]	; (8001c14 <MX_TIM1_Init+0x15c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b16:	483f      	ldr	r0, [pc, #252]	; (8001c14 <MX_TIM1_Init+0x15c>)
 8001b18:	f004 fcb8 	bl	800648c <HAL_TIM_PWM_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001b22:	f7ff fdf1 	bl	8001708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b26:	2320      	movs	r3, #32
 8001b28:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b32:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b36:	4619      	mov	r1, r3
 8001b38:	4836      	ldr	r0, [pc, #216]	; (8001c14 <MX_TIM1_Init+0x15c>)
 8001b3a:	f005 ffa3 	bl	8007a84 <HAL_TIMEx_MasterConfigSynchronization>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001b44:	f7ff fde0 	bl	8001708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b48:	2360      	movs	r3, #96	; 0x60
 8001b4a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 2550;
 8001b4c:	f640 13f6 	movw	r3, #2550	; 0x9f6
 8001b50:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b52:	2300      	movs	r3, #0
 8001b54:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b56:	2300      	movs	r3, #0
 8001b58:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4829      	ldr	r0, [pc, #164]	; (8001c14 <MX_TIM1_Init+0x15c>)
 8001b70:	f005 f812 	bl	8006b98 <HAL_TIM_PWM_ConfigChannel>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001b7a:	f7ff fdc5 	bl	8001708 <Error_Handler>
  }
  sConfigOC.Pulse = 1700;
 8001b7e:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8001b82:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b88:	2204      	movs	r2, #4
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4821      	ldr	r0, [pc, #132]	; (8001c14 <MX_TIM1_Init+0x15c>)
 8001b8e:	f005 f803 	bl	8006b98 <HAL_TIM_PWM_ConfigChannel>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8001b98:	f7ff fdb6 	bl	8001708 <Error_Handler>
  }
  sConfigOC.Pulse = 637;
 8001b9c:	f240 237d 	movw	r3, #637	; 0x27d
 8001ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ba2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ba6:	2208      	movs	r2, #8
 8001ba8:	4619      	mov	r1, r3
 8001baa:	481a      	ldr	r0, [pc, #104]	; (8001c14 <MX_TIM1_Init+0x15c>)
 8001bac:	f004 fff4 	bl	8006b98 <HAL_TIM_PWM_ConfigChannel>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8001bb6:	f7ff fda7 	bl	8001708 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 34;
 8001bc6:	2322      	movs	r3, #34	; 0x22
 8001bc8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bd2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001be0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001be4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001bea:	2300      	movs	r3, #0
 8001bec:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4807      	ldr	r0, [pc, #28]	; (8001c14 <MX_TIM1_Init+0x15c>)
 8001bf8:	f005 ffda 	bl	8007bb0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8001c02:	f7ff fd81 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c06:	4803      	ldr	r0, [pc, #12]	; (8001c14 <MX_TIM1_Init+0x15c>)
 8001c08:	f000 f8d6 	bl	8001db8 <HAL_TIM_MspPostInit>

}
 8001c0c:	bf00      	nop
 8001c0e:	3760      	adds	r7, #96	; 0x60
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000440 	.word	0x20000440
 8001c18:	40012c00 	.word	0x40012c00

08001c1c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001c22:	f107 0310 	add.w	r3, r7, #16
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c30:	1d3b      	adds	r3, r7, #4
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	605a      	str	r2, [r3, #4]
 8001c38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c3a:	4b1c      	ldr	r3, [pc, #112]	; (8001cac <MX_TIM3_Init+0x90>)
 8001c3c:	4a1c      	ldr	r2, [pc, #112]	; (8001cb0 <MX_TIM3_Init+0x94>)
 8001c3e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c40:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <MX_TIM3_Init+0x90>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c46:	4b19      	ldr	r3, [pc, #100]	; (8001cac <MX_TIM3_Init+0x90>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c4c:	4b17      	ldr	r3, [pc, #92]	; (8001cac <MX_TIM3_Init+0x90>)
 8001c4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c52:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c54:	4b15      	ldr	r3, [pc, #84]	; (8001cac <MX_TIM3_Init+0x90>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c5a:	4b14      	ldr	r3, [pc, #80]	; (8001cac <MX_TIM3_Init+0x90>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c60:	2300      	movs	r3, #0
 8001c62:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001c70:	f107 0310 	add.w	r3, r7, #16
 8001c74:	4619      	mov	r1, r3
 8001c76:	480d      	ldr	r0, [pc, #52]	; (8001cac <MX_TIM3_Init+0x90>)
 8001c78:	f005 fd35 	bl	80076e6 <HAL_TIMEx_HallSensor_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001c82:	f7ff fd41 	bl	8001708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001c86:	2350      	movs	r3, #80	; 0x50
 8001c88:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c8e:	1d3b      	adds	r3, r7, #4
 8001c90:	4619      	mov	r1, r3
 8001c92:	4806      	ldr	r0, [pc, #24]	; (8001cac <MX_TIM3_Init+0x90>)
 8001c94:	f005 fef6 	bl	8007a84 <HAL_TIMEx_MasterConfigSynchronization>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001c9e:	f7ff fd33 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ca2:	bf00      	nop
 8001ca4:	3720      	adds	r7, #32
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	2000048c 	.word	0x2000048c
 8001cb0:	40000400 	.word	0x40000400

08001cb4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <HAL_TIM_PWM_MspInit+0x38>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d10b      	bne.n	8001cde <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cca:	4a09      	ldr	r2, [pc, #36]	; (8001cf0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ccc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cd0:	6613      	str	r3, [r2, #96]	; 0x60
 8001cd2:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001cde:	bf00      	nop
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40012c00 	.word	0x40012c00
 8001cf0:	40021000 	.word	0x40021000

08001cf4 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08a      	sub	sp, #40	; 0x28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	f107 0314 	add.w	r3, r7, #20
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a26      	ldr	r2, [pc, #152]	; (8001dac <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d145      	bne.n	8001da2 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d16:	4b26      	ldr	r3, [pc, #152]	; (8001db0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1a:	4a25      	ldr	r2, [pc, #148]	; (8001db0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001d1c:	f043 0302 	orr.w	r3, r3, #2
 8001d20:	6593      	str	r3, [r2, #88]	; 0x58
 8001d22:	4b23      	ldr	r3, [pc, #140]	; (8001db0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2e:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d32:	4a1f      	ldr	r2, [pc, #124]	; (8001db0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d3a:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d46:	4b1a      	ldr	r3, [pc, #104]	; (8001db0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4a:	4a19      	ldr	r2, [pc, #100]	; (8001db0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001d4c:	f043 0304 	orr.w	r3, r3, #4
 8001d50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d52:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001d5e:	2350      	movs	r3, #80	; 0x50
 8001d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d62:	2302      	movs	r3, #2
 8001d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d72:	f107 0314 	add.w	r3, r7, #20
 8001d76:	4619      	mov	r1, r3
 8001d78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d7c:	f003 f886 	bl	8004e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	2302      	movs	r3, #2
 8001d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d92:	2302      	movs	r3, #2
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d96:	f107 0314 	add.w	r3, r7, #20
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4805      	ldr	r0, [pc, #20]	; (8001db4 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 8001d9e:	f003 f875 	bl	8004e8c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001da2:	bf00      	nop
 8001da4:	3728      	adds	r7, #40	; 0x28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40000400 	.word	0x40000400
 8001db0:	40021000 	.word	0x40021000
 8001db4:	48000800 	.word	0x48000800

08001db8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08a      	sub	sp, #40	; 0x28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a29      	ldr	r2, [pc, #164]	; (8001e7c <HAL_TIM_MspPostInit+0xc4>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d14b      	bne.n	8001e72 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dda:	4b29      	ldr	r3, [pc, #164]	; (8001e80 <HAL_TIM_MspPostInit+0xc8>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dde:	4a28      	ldr	r2, [pc, #160]	; (8001e80 <HAL_TIM_MspPostInit+0xc8>)
 8001de0:	f043 0302 	orr.w	r3, r3, #2
 8001de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001de6:	4b26      	ldr	r3, [pc, #152]	; (8001e80 <HAL_TIM_MspPostInit+0xc8>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	4b23      	ldr	r3, [pc, #140]	; (8001e80 <HAL_TIM_MspPostInit+0xc8>)
 8001df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df6:	4a22      	ldr	r2, [pc, #136]	; (8001e80 <HAL_TIM_MspPostInit+0xc8>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dfe:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <HAL_TIM_MspPostInit+0xc8>)
 8001e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001e0a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e10:	2302      	movs	r3, #2
 8001e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001e1c:	2306      	movs	r3, #6
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e20:	f107 0314 	add.w	r3, r7, #20
 8001e24:	4619      	mov	r1, r3
 8001e26:	4817      	ldr	r0, [pc, #92]	; (8001e84 <HAL_TIM_MspPostInit+0xcc>)
 8001e28:	f003 f830 	bl	8004e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001e2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001e3e:	2304      	movs	r3, #4
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001e42:	f107 0314 	add.w	r3, r7, #20
 8001e46:	4619      	mov	r1, r3
 8001e48:	480e      	ldr	r0, [pc, #56]	; (8001e84 <HAL_TIM_MspPostInit+0xcc>)
 8001e4a:	f003 f81f 	bl	8004e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 8001e4e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e54:	2302      	movs	r3, #2
 8001e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001e60:	2306      	movs	r3, #6
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e6e:	f003 f80d 	bl	8004e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e72:	bf00      	nop
 8001e74:	3728      	adds	r7, #40	; 0x28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40012c00 	.word	0x40012c00
 8001e80:	40021000 	.word	0x40021000
 8001e84:	48000400 	.word	0x48000400

08001e88 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e8c:	4b22      	ldr	r3, [pc, #136]	; (8001f18 <MX_USART2_UART_Init+0x90>)
 8001e8e:	4a23      	ldr	r2, [pc, #140]	; (8001f1c <MX_USART2_UART_Init+0x94>)
 8001e90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e92:	4b21      	ldr	r3, [pc, #132]	; (8001f18 <MX_USART2_UART_Init+0x90>)
 8001e94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e9a:	4b1f      	ldr	r3, [pc, #124]	; (8001f18 <MX_USART2_UART_Init+0x90>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ea0:	4b1d      	ldr	r3, [pc, #116]	; (8001f18 <MX_USART2_UART_Init+0x90>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ea6:	4b1c      	ldr	r3, [pc, #112]	; (8001f18 <MX_USART2_UART_Init+0x90>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001eac:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <MX_USART2_UART_Init+0x90>)
 8001eae:	220c      	movs	r2, #12
 8001eb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eb2:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <MX_USART2_UART_Init+0x90>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eb8:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <MX_USART2_UART_Init+0x90>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ebe:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <MX_USART2_UART_Init+0x90>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ec4:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <MX_USART2_UART_Init+0x90>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eca:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <MX_USART2_UART_Init+0x90>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ed0:	4811      	ldr	r0, [pc, #68]	; (8001f18 <MX_USART2_UART_Init+0x90>)
 8001ed2:	f005 ff8a 	bl	8007dea <HAL_UART_Init>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001edc:	f7ff fc14 	bl	8001708 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	480d      	ldr	r0, [pc, #52]	; (8001f18 <MX_USART2_UART_Init+0x90>)
 8001ee4:	f007 ff2d 	bl	8009d42 <HAL_UARTEx_SetTxFifoThreshold>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001eee:	f7ff fc0b 	bl	8001708 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	4808      	ldr	r0, [pc, #32]	; (8001f18 <MX_USART2_UART_Init+0x90>)
 8001ef6:	f007 ff62 	bl	8009dbe <HAL_UARTEx_SetRxFifoThreshold>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001f00:	f7ff fc02 	bl	8001708 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001f04:	4804      	ldr	r0, [pc, #16]	; (8001f18 <MX_USART2_UART_Init+0x90>)
 8001f06:	f007 fee3 	bl	8009cd0 <HAL_UARTEx_DisableFifoMode>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001f10:	f7ff fbfa 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f14:	bf00      	nop
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	200004d8 	.word	0x200004d8
 8001f1c:	40004400 	.word	0x40004400

08001f20 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f24:	4b22      	ldr	r3, [pc, #136]	; (8001fb0 <MX_USART3_UART_Init+0x90>)
 8001f26:	4a23      	ldr	r2, [pc, #140]	; (8001fb4 <MX_USART3_UART_Init+0x94>)
 8001f28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f2a:	4b21      	ldr	r3, [pc, #132]	; (8001fb0 <MX_USART3_UART_Init+0x90>)
 8001f2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f32:	4b1f      	ldr	r3, [pc, #124]	; (8001fb0 <MX_USART3_UART_Init+0x90>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f38:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <MX_USART3_UART_Init+0x90>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f3e:	4b1c      	ldr	r3, [pc, #112]	; (8001fb0 <MX_USART3_UART_Init+0x90>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f44:	4b1a      	ldr	r3, [pc, #104]	; (8001fb0 <MX_USART3_UART_Init+0x90>)
 8001f46:	220c      	movs	r2, #12
 8001f48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f4a:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <MX_USART3_UART_Init+0x90>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f50:	4b17      	ldr	r3, [pc, #92]	; (8001fb0 <MX_USART3_UART_Init+0x90>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f56:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <MX_USART3_UART_Init+0x90>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f5c:	4b14      	ldr	r3, [pc, #80]	; (8001fb0 <MX_USART3_UART_Init+0x90>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f62:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <MX_USART3_UART_Init+0x90>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f68:	4811      	ldr	r0, [pc, #68]	; (8001fb0 <MX_USART3_UART_Init+0x90>)
 8001f6a:	f005 ff3e 	bl	8007dea <HAL_UART_Init>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001f74:	f7ff fbc8 	bl	8001708 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f78:	2100      	movs	r1, #0
 8001f7a:	480d      	ldr	r0, [pc, #52]	; (8001fb0 <MX_USART3_UART_Init+0x90>)
 8001f7c:	f007 fee1 	bl	8009d42 <HAL_UARTEx_SetTxFifoThreshold>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001f86:	f7ff fbbf 	bl	8001708 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4808      	ldr	r0, [pc, #32]	; (8001fb0 <MX_USART3_UART_Init+0x90>)
 8001f8e:	f007 ff16 	bl	8009dbe <HAL_UARTEx_SetRxFifoThreshold>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001f98:	f7ff fbb6 	bl	8001708 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001f9c:	4804      	ldr	r0, [pc, #16]	; (8001fb0 <MX_USART3_UART_Init+0x90>)
 8001f9e:	f007 fe97 	bl	8009cd0 <HAL_UARTEx_DisableFifoMode>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001fa8:	f7ff fbae 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000568 	.word	0x20000568
 8001fb4:	40004800 	.word	0x40004800

08001fb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b0a0      	sub	sp, #128	; 0x80
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fd0:	f107 0318 	add.w	r3, r7, #24
 8001fd4:	2254      	movs	r2, #84	; 0x54
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f008 fdba 	bl	800ab52 <memset>
  if(uartHandle->Instance==USART2)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a45      	ldr	r2, [pc, #276]	; (80020f8 <HAL_UART_MspInit+0x140>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d13f      	bne.n	8002068 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001fec:	2300      	movs	r3, #0
 8001fee:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ff0:	f107 0318 	add.w	r3, r7, #24
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f003 ff21 	bl	8005e3c <HAL_RCCEx_PeriphCLKConfig>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002000:	f7ff fb82 	bl	8001708 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002004:	4b3d      	ldr	r3, [pc, #244]	; (80020fc <HAL_UART_MspInit+0x144>)
 8002006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002008:	4a3c      	ldr	r2, [pc, #240]	; (80020fc <HAL_UART_MspInit+0x144>)
 800200a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800200e:	6593      	str	r3, [r2, #88]	; 0x58
 8002010:	4b3a      	ldr	r3, [pc, #232]	; (80020fc <HAL_UART_MspInit+0x144>)
 8002012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201c:	4b37      	ldr	r3, [pc, #220]	; (80020fc <HAL_UART_MspInit+0x144>)
 800201e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002020:	4a36      	ldr	r2, [pc, #216]	; (80020fc <HAL_UART_MspInit+0x144>)
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002028:	4b34      	ldr	r3, [pc, #208]	; (80020fc <HAL_UART_MspInit+0x144>)
 800202a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002034:	230c      	movs	r3, #12
 8002036:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002038:	2302      	movs	r3, #2
 800203a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002040:	2300      	movs	r3, #0
 8002042:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002044:	2307      	movs	r3, #7
 8002046:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002048:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800204c:	4619      	mov	r1, r3
 800204e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002052:	f002 ff1b 	bl	8004e8c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002056:	2200      	movs	r2, #0
 8002058:	2100      	movs	r1, #0
 800205a:	2026      	movs	r0, #38	; 0x26
 800205c:	f002 fbbc 	bl	80047d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002060:	2026      	movs	r0, #38	; 0x26
 8002062:	f002 fbd3 	bl	800480c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002066:	e043      	b.n	80020f0 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a24      	ldr	r2, [pc, #144]	; (8002100 <HAL_UART_MspInit+0x148>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d13e      	bne.n	80020f0 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002072:	2304      	movs	r3, #4
 8002074:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002076:	2300      	movs	r3, #0
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800207a:	f107 0318 	add.w	r3, r7, #24
 800207e:	4618      	mov	r0, r3
 8002080:	f003 fedc 	bl	8005e3c <HAL_RCCEx_PeriphCLKConfig>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_UART_MspInit+0xd6>
      Error_Handler();
 800208a:	f7ff fb3d 	bl	8001708 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800208e:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <HAL_UART_MspInit+0x144>)
 8002090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002092:	4a1a      	ldr	r2, [pc, #104]	; (80020fc <HAL_UART_MspInit+0x144>)
 8002094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002098:	6593      	str	r3, [r2, #88]	; 0x58
 800209a:	4b18      	ldr	r3, [pc, #96]	; (80020fc <HAL_UART_MspInit+0x144>)
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a6:	4b15      	ldr	r3, [pc, #84]	; (80020fc <HAL_UART_MspInit+0x144>)
 80020a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020aa:	4a14      	ldr	r2, [pc, #80]	; (80020fc <HAL_UART_MspInit+0x144>)
 80020ac:	f043 0304 	orr.w	r3, r3, #4
 80020b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020b2:	4b12      	ldr	r3, [pc, #72]	; (80020fc <HAL_UART_MspInit+0x144>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80020be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020c2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c4:	2302      	movs	r3, #2
 80020c6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020cc:	2300      	movs	r3, #0
 80020ce:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020d0:	2307      	movs	r3, #7
 80020d2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80020d8:	4619      	mov	r1, r3
 80020da:	480a      	ldr	r0, [pc, #40]	; (8002104 <HAL_UART_MspInit+0x14c>)
 80020dc:	f002 fed6 	bl	8004e8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80020e0:	2200      	movs	r2, #0
 80020e2:	2100      	movs	r1, #0
 80020e4:	2027      	movs	r0, #39	; 0x27
 80020e6:	f002 fb77 	bl	80047d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020ea:	2027      	movs	r0, #39	; 0x27
 80020ec:	f002 fb8e 	bl	800480c <HAL_NVIC_EnableIRQ>
}
 80020f0:	bf00      	nop
 80020f2:	3780      	adds	r7, #128	; 0x80
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40004400 	.word	0x40004400
 80020fc:	40021000 	.word	0x40021000
 8002100:	40004800 	.word	0x40004800
 8002104:	48000800 	.word	0x48000800

08002108 <Shell_Init>:
char* 		argv[MAX_ARGS];
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;
extern float Imesf;
void Shell_Init(void){
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 800210c:	2224      	movs	r2, #36	; 0x24
 800210e:	2100      	movs	r1, #0
 8002110:	4816      	ldr	r0, [pc, #88]	; (800216c <Shell_Init+0x64>)
 8002112:	f008 fd1e 	bl	800ab52 <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 8002116:	2240      	movs	r2, #64	; 0x40
 8002118:	2100      	movs	r1, #0
 800211a:	4815      	ldr	r0, [pc, #84]	; (8002170 <Shell_Init+0x68>)
 800211c:	f008 fd19 	bl	800ab52 <memset>
 8002120:	4b14      	ldr	r3, [pc, #80]	; (8002174 <Shell_Init+0x6c>)
 8002122:	2200      	movs	r2, #0
 8002124:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 8002126:	2240      	movs	r2, #64	; 0x40
 8002128:	2100      	movs	r1, #0
 800212a:	4813      	ldr	r0, [pc, #76]	; (8002178 <Shell_Init+0x70>)
 800212c:	f008 fd11 	bl	800ab52 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002130:	2201      	movs	r2, #1
 8002132:	4910      	ldr	r1, [pc, #64]	; (8002174 <Shell_Init+0x6c>)
 8002134:	4811      	ldr	r0, [pc, #68]	; (800217c <Shell_Init+0x74>)
 8002136:	f005 ff3f 	bl	8007fb8 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 800213a:	4811      	ldr	r0, [pc, #68]	; (8002180 <Shell_Init+0x78>)
 800213c:	f7fe f8d0 	bl	80002e0 <strlen>
 8002140:	4603      	mov	r3, r0
 8002142:	b29a      	uxth	r2, r3
 8002144:	f04f 33ff 	mov.w	r3, #4294967295
 8002148:	490d      	ldr	r1, [pc, #52]	; (8002180 <Shell_Init+0x78>)
 800214a:	480c      	ldr	r0, [pc, #48]	; (800217c <Shell_Init+0x74>)
 800214c:	f005 fe9d 	bl	8007e8a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8002150:	480c      	ldr	r0, [pc, #48]	; (8002184 <Shell_Init+0x7c>)
 8002152:	f7fe f8c5 	bl	80002e0 <strlen>
 8002156:	4603      	mov	r3, r0
 8002158:	b29a      	uxth	r2, r3
 800215a:	f04f 33ff 	mov.w	r3, #4294967295
 800215e:	4909      	ldr	r1, [pc, #36]	; (8002184 <Shell_Init+0x7c>)
 8002160:	4806      	ldr	r0, [pc, #24]	; (800217c <Shell_Init+0x74>)
 8002162:	f005 fe92 	bl	8007e8a <HAL_UART_Transmit>
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000684 	.word	0x20000684
 8002170:	20000640 	.word	0x20000640
 8002174:	200005fc 	.word	0x200005fc
 8002178:	20000600 	.word	0x20000600
 800217c:	200004d8 	.word	0x200004d8
 8002180:	20000020 	.word	0x20000020
 8002184:	20000004 	.word	0x20000004

08002188 <Shell_Loop>:

void Shell_Loop(void){
 8002188:	b580      	push	{r7, lr}
 800218a:	b096      	sub	sp, #88	; 0x58
 800218c:	af00      	add	r7, sp, #0
	if(uartRxReceived){
 800218e:	4b8c      	ldr	r3, [pc, #560]	; (80023c0 <Shell_Loop+0x238>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d05b      	beq.n	800224e <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 8002196:	4b8b      	ldr	r3, [pc, #556]	; (80023c4 <Shell_Loop+0x23c>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b08      	cmp	r3, #8
 800219c:	d034      	beq.n	8002208 <Shell_Loop+0x80>
 800219e:	2b0d      	cmp	r3, #13
 80021a0:	d142      	bne.n	8002228 <Shell_Loop+0xa0>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 80021a2:	f04f 33ff 	mov.w	r3, #4294967295
 80021a6:	2203      	movs	r2, #3
 80021a8:	4987      	ldr	r1, [pc, #540]	; (80023c8 <Shell_Loop+0x240>)
 80021aa:	4888      	ldr	r0, [pc, #544]	; (80023cc <Shell_Loop+0x244>)
 80021ac:	f005 fe6d 	bl	8007e8a <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 80021b0:	4b87      	ldr	r3, [pc, #540]	; (80023d0 <Shell_Loop+0x248>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a87      	ldr	r2, [pc, #540]	; (80023d4 <Shell_Loop+0x24c>)
 80021b6:	2100      	movs	r1, #0
 80021b8:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 80021ba:	4b87      	ldr	r3, [pc, #540]	; (80023d8 <Shell_Loop+0x250>)
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 80021c0:	4986      	ldr	r1, [pc, #536]	; (80023dc <Shell_Loop+0x254>)
 80021c2:	4884      	ldr	r0, [pc, #528]	; (80023d4 <Shell_Loop+0x24c>)
 80021c4:	f008 fcce 	bl	800ab64 <strtok>
 80021c8:	4603      	mov	r3, r0
 80021ca:	4a85      	ldr	r2, [pc, #532]	; (80023e0 <Shell_Loop+0x258>)
 80021cc:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 80021ce:	e010      	b.n	80021f2 <Shell_Loop+0x6a>
				argv[argc++] = token;
 80021d0:	4b81      	ldr	r3, [pc, #516]	; (80023d8 <Shell_Loop+0x250>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	1c5a      	adds	r2, r3, #1
 80021d6:	4980      	ldr	r1, [pc, #512]	; (80023d8 <Shell_Loop+0x250>)
 80021d8:	600a      	str	r2, [r1, #0]
 80021da:	4a81      	ldr	r2, [pc, #516]	; (80023e0 <Shell_Loop+0x258>)
 80021dc:	6812      	ldr	r2, [r2, #0]
 80021de:	4981      	ldr	r1, [pc, #516]	; (80023e4 <Shell_Loop+0x25c>)
 80021e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 80021e4:	497d      	ldr	r1, [pc, #500]	; (80023dc <Shell_Loop+0x254>)
 80021e6:	2000      	movs	r0, #0
 80021e8:	f008 fcbc 	bl	800ab64 <strtok>
 80021ec:	4603      	mov	r3, r0
 80021ee:	4a7c      	ldr	r2, [pc, #496]	; (80023e0 <Shell_Loop+0x258>)
 80021f0:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 80021f2:	4b7b      	ldr	r3, [pc, #492]	; (80023e0 <Shell_Loop+0x258>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1ea      	bne.n	80021d0 <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 80021fa:	4b75      	ldr	r3, [pc, #468]	; (80023d0 <Shell_Loop+0x248>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 8002200:	4b79      	ldr	r3, [pc, #484]	; (80023e8 <Shell_Loop+0x260>)
 8002202:	2201      	movs	r2, #1
 8002204:	601a      	str	r2, [r3, #0]
			break;
 8002206:	e01f      	b.n	8002248 <Shell_Loop+0xc0>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 8002208:	4b71      	ldr	r3, [pc, #452]	; (80023d0 <Shell_Loop+0x248>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	1e5a      	subs	r2, r3, #1
 800220e:	4970      	ldr	r1, [pc, #448]	; (80023d0 <Shell_Loop+0x248>)
 8002210:	600a      	str	r2, [r1, #0]
 8002212:	4a70      	ldr	r2, [pc, #448]	; (80023d4 <Shell_Loop+0x24c>)
 8002214:	2100      	movs	r1, #0
 8002216:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 8002218:	f04f 33ff 	mov.w	r3, #4294967295
 800221c:	2204      	movs	r2, #4
 800221e:	4973      	ldr	r1, [pc, #460]	; (80023ec <Shell_Loop+0x264>)
 8002220:	486a      	ldr	r0, [pc, #424]	; (80023cc <Shell_Loop+0x244>)
 8002222:	f005 fe32 	bl	8007e8a <HAL_UART_Transmit>
			break;
 8002226:	e00f      	b.n	8002248 <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8002228:	4b69      	ldr	r3, [pc, #420]	; (80023d0 <Shell_Loop+0x248>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	1c5a      	adds	r2, r3, #1
 800222e:	4968      	ldr	r1, [pc, #416]	; (80023d0 <Shell_Loop+0x248>)
 8002230:	600a      	str	r2, [r1, #0]
 8002232:	4a64      	ldr	r2, [pc, #400]	; (80023c4 <Shell_Loop+0x23c>)
 8002234:	7811      	ldrb	r1, [r2, #0]
 8002236:	4a67      	ldr	r2, [pc, #412]	; (80023d4 <Shell_Loop+0x24c>)
 8002238:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 800223a:	f04f 33ff 	mov.w	r3, #4294967295
 800223e:	2201      	movs	r2, #1
 8002240:	4960      	ldr	r1, [pc, #384]	; (80023c4 <Shell_Loop+0x23c>)
 8002242:	4862      	ldr	r0, [pc, #392]	; (80023cc <Shell_Loop+0x244>)
 8002244:	f005 fe21 	bl	8007e8a <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 8002248:	4b5d      	ldr	r3, [pc, #372]	; (80023c0 <Shell_Loop+0x238>)
 800224a:	2200      	movs	r2, #0
 800224c:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 800224e:	4b66      	ldr	r3, [pc, #408]	; (80023e8 <Shell_Loop+0x260>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 8175 	beq.w	8002542 <Shell_Loop+0x3ba>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 8002258:	4b62      	ldr	r3, [pc, #392]	; (80023e4 <Shell_Loop+0x25c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4964      	ldr	r1, [pc, #400]	; (80023f0 <Shell_Loop+0x268>)
 800225e:	4618      	mov	r0, r3
 8002260:	f7fd ffde 	bl	8000220 <strcmp>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d107      	bne.n	800227a <Shell_Loop+0xf2>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 800226a:	f04f 33ff 	mov.w	r3, #4294967295
 800226e:	221a      	movs	r2, #26
 8002270:	4960      	ldr	r1, [pc, #384]	; (80023f4 <Shell_Loop+0x26c>)
 8002272:	4856      	ldr	r0, [pc, #344]	; (80023cc <Shell_Loop+0x244>)
 8002274:	f005 fe09 	bl	8007e8a <HAL_UART_Transmit>
 8002278:	e159      	b.n	800252e <Shell_Loop+0x3a6>
		}
		else if(strcmp(argv[0],"help")==0){
 800227a:	4b5a      	ldr	r3, [pc, #360]	; (80023e4 <Shell_Loop+0x25c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	495e      	ldr	r1, [pc, #376]	; (80023f8 <Shell_Loop+0x270>)
 8002280:	4618      	mov	r0, r3
 8002282:	f7fd ffcd 	bl	8000220 <strcmp>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10e      	bne.n	80022aa <Shell_Loop+0x122>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 800228c:	4a5b      	ldr	r2, [pc, #364]	; (80023fc <Shell_Loop+0x274>)
 800228e:	2140      	movs	r1, #64	; 0x40
 8002290:	485b      	ldr	r0, [pc, #364]	; (8002400 <Shell_Loop+0x278>)
 8002292:	f008 fbc7 	bl	800aa24 <sniprintf>
 8002296:	6478      	str	r0, [r7, #68]	; 0x44
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800229a:	b29a      	uxth	r2, r3
 800229c:	f04f 33ff 	mov.w	r3, #4294967295
 80022a0:	4957      	ldr	r1, [pc, #348]	; (8002400 <Shell_Loop+0x278>)
 80022a2:	484a      	ldr	r0, [pc, #296]	; (80023cc <Shell_Loop+0x244>)
 80022a4:	f005 fdf1 	bl	8007e8a <HAL_UART_Transmit>
 80022a8:	e141      	b.n	800252e <Shell_Loop+0x3a6>
		}
		else if(strcmp(argv[0],"speed")==0){
 80022aa:	4b4e      	ldr	r3, [pc, #312]	; (80023e4 <Shell_Loop+0x25c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4955      	ldr	r1, [pc, #340]	; (8002404 <Shell_Loop+0x27c>)
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fd ffb5 	bl	8000220 <strcmp>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d142      	bne.n	8002342 <Shell_Loop+0x1ba>
			float speedVal=atoi(argv[1]);
 80022bc:	4b49      	ldr	r3, [pc, #292]	; (80023e4 <Shell_Loop+0x25c>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f007 fe09 	bl	8009ed8 <atoi>
 80022c6:	ee07 0a90 	vmov	s15, r0
 80022ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ce:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
			if (speedVal> PWM_MAX){
 80022d2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80022d6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8002408 <Shell_Loop+0x280>
 80022da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e2:	dd01      	ble.n	80022e8 <Shell_Loop+0x160>
				speedVal=PWM_MAX;
 80022e4:	4b49      	ldr	r3, [pc, #292]	; (800240c <Shell_Loop+0x284>)
 80022e6:	657b      	str	r3, [r7, #84]	; 0x54
			}
			if (speedVal< PWM_MIN){
 80022e8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80022ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f4:	d502      	bpl.n	80022fc <Shell_Loop+0x174>
				speedVal=PWM_MIN;
 80022f6:	f04f 0300 	mov.w	r3, #0
 80022fa:	657b      	str	r3, [r7, #84]	; 0x54
			}

			speedVal=(DUTY_MAX*speedVal)/100; //PWM en pourcentage
 80022fc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002300:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002410 <Shell_Loop+0x288>
 8002304:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002308:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8002408 <Shell_Loop+0x280>
 800230c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002310:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,speedVal);
 8002314:	4b3f      	ldr	r3, [pc, #252]	; (8002414 <Shell_Loop+0x28c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800231c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002320:	ee17 2a90 	vmov	r2, s15
 8002324:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,DUTY_MAX - speedVal);
 8002326:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8002410 <Shell_Loop+0x288>
 800232a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800232e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002332:	4b38      	ldr	r3, [pc, #224]	; (8002414 <Shell_Loop+0x28c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800233a:	ee17 2a90 	vmov	r2, s15
 800233e:	639a      	str	r2, [r3, #56]	; 0x38
 8002340:	e0f5      	b.n	800252e <Shell_Loop+0x3a6>
		/*
		 * start -> Activation des PWM avec un rapport cyclique de 50%
		 * stop  -> Désactivation des PWM
		 * adc   -> On affiche la mesure du courant
		 */
		else if(strcmp(argv[0],"start")==0){
 8002342:	4b28      	ldr	r3, [pc, #160]	; (80023e4 <Shell_Loop+0x25c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4934      	ldr	r1, [pc, #208]	; (8002418 <Shell_Loop+0x290>)
 8002348:	4618      	mov	r0, r3
 800234a:	f7fd ff69 	bl	8000220 <strcmp>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d11a      	bne.n	800238a <Shell_Loop+0x202>

			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,0.5*DUTY_MAX);
 8002354:	4b2f      	ldr	r3, [pc, #188]	; (8002414 <Shell_Loop+0x28c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f640 024d 	movw	r2, #2125	; 0x84d
 800235c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,0.5*DUTY_MAX);
 800235e:	4b2d      	ldr	r3, [pc, #180]	; (8002414 <Shell_Loop+0x28c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f640 024d 	movw	r2, #2125	; 0x84d
 8002366:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002368:	2100      	movs	r1, #0
 800236a:	482a      	ldr	r0, [pc, #168]	; (8002414 <Shell_Loop+0x28c>)
 800236c:	f004 f8e6 	bl	800653c <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8002370:	2100      	movs	r1, #0
 8002372:	4828      	ldr	r0, [pc, #160]	; (8002414 <Shell_Loop+0x28c>)
 8002374:	f005 fa66 	bl	8007844 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002378:	2104      	movs	r1, #4
 800237a:	4826      	ldr	r0, [pc, #152]	; (8002414 <Shell_Loop+0x28c>)
 800237c:	f004 f8de 	bl	800653c <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8002380:	2104      	movs	r1, #4
 8002382:	4824      	ldr	r0, [pc, #144]	; (8002414 <Shell_Loop+0x28c>)
 8002384:	f005 fa5e 	bl	8007844 <HAL_TIMEx_PWMN_Start>
 8002388:	e0d1      	b.n	800252e <Shell_Loop+0x3a6>

		}
		else if(strcmp(argv[0],"stop")==0){
 800238a:	4b16      	ldr	r3, [pc, #88]	; (80023e4 <Shell_Loop+0x25c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4923      	ldr	r1, [pc, #140]	; (800241c <Shell_Loop+0x294>)
 8002390:	4618      	mov	r0, r3
 8002392:	f7fd ff45 	bl	8000220 <strcmp>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d141      	bne.n	8002420 <Shell_Loop+0x298>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800239c:	2100      	movs	r1, #0
 800239e:	481d      	ldr	r0, [pc, #116]	; (8002414 <Shell_Loop+0x28c>)
 80023a0:	f004 f9de 	bl	8006760 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80023a4:	2100      	movs	r1, #0
 80023a6:	481b      	ldr	r0, [pc, #108]	; (8002414 <Shell_Loop+0x28c>)
 80023a8:	f005 fb0e 	bl	80079c8 <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80023ac:	2104      	movs	r1, #4
 80023ae:	4819      	ldr	r0, [pc, #100]	; (8002414 <Shell_Loop+0x28c>)
 80023b0:	f004 f9d6 	bl	8006760 <HAL_TIM_PWM_Stop>

			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80023b4:	2104      	movs	r1, #4
 80023b6:	4817      	ldr	r0, [pc, #92]	; (8002414 <Shell_Loop+0x28c>)
 80023b8:	f005 fb06 	bl	80079c8 <HAL_TIMEx_PWMN_Stop>
 80023bc:	e0b7      	b.n	800252e <Shell_Loop+0x3a6>
 80023be:	bf00      	nop
 80023c0:	200005f8 	.word	0x200005f8
 80023c4:	200005fc 	.word	0x200005fc
 80023c8:	20000088 	.word	0x20000088
 80023cc:	200004d8 	.word	0x200004d8
 80023d0:	20000680 	.word	0x20000680
 80023d4:	20000640 	.word	0x20000640
 80023d8:	200006a8 	.word	0x200006a8
 80023dc:	0800ce18 	.word	0x0800ce18
 80023e0:	200006ac 	.word	0x200006ac
 80023e4:	20000684 	.word	0x20000684
 80023e8:	200006b0 	.word	0x200006b0
 80023ec:	2000008c 	.word	0x2000008c
 80023f0:	0800ce1c 	.word	0x0800ce1c
 80023f4:	200000a4 	.word	0x200000a4
 80023f8:	0800ce2c 	.word	0x0800ce2c
 80023fc:	0800ce34 	.word	0x0800ce34
 8002400:	20000600 	.word	0x20000600
 8002404:	0800ce5c 	.word	0x0800ce5c
 8002408:	42c80000 	.word	0x42c80000
 800240c:	42c80000 	.word	0x42c80000
 8002410:	4584d000 	.word	0x4584d000
 8002414:	20000440 	.word	0x20000440
 8002418:	0800ce64 	.word	0x0800ce64
 800241c:	0800ce6c 	.word	0x0800ce6c
		}
		else if(strcmp(argv[0],"adc")==0){
 8002420:	4b51      	ldr	r3, [pc, #324]	; (8002568 <Shell_Loop+0x3e0>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4951      	ldr	r1, [pc, #324]	; (800256c <Shell_Loop+0x3e4>)
 8002426:	4618      	mov	r0, r3
 8002428:	f7fd fefa 	bl	8000220 <strcmp>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d155      	bne.n	80024de <Shell_Loop+0x356>

			HAL_ADC_Start(&hadc1);
 8002432:	484f      	ldr	r0, [pc, #316]	; (8002570 <Shell_Loop+0x3e8>)
 8002434:	f000 fd50 	bl	8002ed8 <HAL_ADC_Start>
			//HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);
			uint16_t val;
			val= HAL_ADC_GetValue(&hadc1);
 8002438:	484d      	ldr	r0, [pc, #308]	; (8002570 <Shell_Loop+0x3e8>)
 800243a:	f000 ff05 	bl	8003248 <HAL_ADC_GetValue>
 800243e:	4603      	mov	r3, r0
 8002440:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
			float u_V,I_mes ;
			u_V = (val/4096.0)*3.3;
 8002444:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe f8a3 	bl	8000594 <__aeabi_i2d>
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	4b48      	ldr	r3, [pc, #288]	; (8002574 <Shell_Loop+0x3ec>)
 8002454:	f7fe fa32 	bl	80008bc <__aeabi_ddiv>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4610      	mov	r0, r2
 800245e:	4619      	mov	r1, r3
 8002460:	a33b      	add	r3, pc, #236	; (adr r3, 8002550 <Shell_Loop+0x3c8>)
 8002462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002466:	f7fe f8ff 	bl	8000668 <__aeabi_dmul>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4610      	mov	r0, r2
 8002470:	4619      	mov	r1, r3
 8002472:	f7fe fbd1 	bl	8000c18 <__aeabi_d2f>
 8002476:	4603      	mov	r3, r0
 8002478:	64fb      	str	r3, [r7, #76]	; 0x4c
			I_mes = (u_V-1.65)/0.05;
 800247a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800247c:	f7fe f89c 	bl	80005b8 <__aeabi_f2d>
 8002480:	a335      	add	r3, pc, #212	; (adr r3, 8002558 <Shell_Loop+0x3d0>)
 8002482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002486:	f7fd ff37 	bl	80002f8 <__aeabi_dsub>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	4610      	mov	r0, r2
 8002490:	4619      	mov	r1, r3
 8002492:	a333      	add	r3, pc, #204	; (adr r3, 8002560 <Shell_Loop+0x3d8>)
 8002494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002498:	f7fe fa10 	bl	80008bc <__aeabi_ddiv>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4610      	mov	r0, r2
 80024a2:	4619      	mov	r1, r3
 80024a4:	f7fe fbb8 	bl	8000c18 <__aeabi_d2f>
 80024a8:	4603      	mov	r3, r0
 80024aa:	64bb      	str	r3, [r7, #72]	; 0x48
			char buff[30];
			sprintf(buff, "Courant : %f A\r\n", I_mes);
 80024ac:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80024ae:	f7fe f883 	bl	80005b8 <__aeabi_f2d>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80024ba:	492f      	ldr	r1, [pc, #188]	; (8002578 <Shell_Loop+0x3f0>)
 80024bc:	f008 fae6 	bl	800aa8c <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)buff,strlen(buff),HAL_MAX_DELAY);
 80024c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fd ff0b 	bl	80002e0 <strlen>
 80024ca:	4603      	mov	r3, r0
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80024d2:	f04f 33ff 	mov.w	r3, #4294967295
 80024d6:	4829      	ldr	r0, [pc, #164]	; (800257c <Shell_Loop+0x3f4>)
 80024d8:	f005 fcd7 	bl	8007e8a <HAL_UART_Transmit>
 80024dc:	e027      	b.n	800252e <Shell_Loop+0x3a6>

		}
		else if(strcmp(argv[0],"adc_dma")==0){
 80024de:	4b22      	ldr	r3, [pc, #136]	; (8002568 <Shell_Loop+0x3e0>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4927      	ldr	r1, [pc, #156]	; (8002580 <Shell_Loop+0x3f8>)
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fd fe9b 	bl	8000220 <strcmp>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d117      	bne.n	8002520 <Shell_Loop+0x398>
			char buffd[30];
			sprintf(buffd, "Courant : %f A\r\n", Imesf);
 80024f0:	4b24      	ldr	r3, [pc, #144]	; (8002584 <Shell_Loop+0x3fc>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fe f85f 	bl	80005b8 <__aeabi_f2d>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	1d38      	adds	r0, r7, #4
 8002500:	491d      	ldr	r1, [pc, #116]	; (8002578 <Shell_Loop+0x3f0>)
 8002502:	f008 fac3 	bl	800aa8c <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)buffd,strlen(buffd),HAL_MAX_DELAY);
 8002506:	1d3b      	adds	r3, r7, #4
 8002508:	4618      	mov	r0, r3
 800250a:	f7fd fee9 	bl	80002e0 <strlen>
 800250e:	4603      	mov	r3, r0
 8002510:	b29a      	uxth	r2, r3
 8002512:	1d39      	adds	r1, r7, #4
 8002514:	f04f 33ff 	mov.w	r3, #4294967295
 8002518:	4818      	ldr	r0, [pc, #96]	; (800257c <Shell_Loop+0x3f4>)
 800251a:	f005 fcb6 	bl	8007e8a <HAL_UART_Transmit>
 800251e:	e006      	b.n	800252e <Shell_Loop+0x3a6>
		}
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8002520:	f04f 33ff 	mov.w	r3, #4294967295
 8002524:	2214      	movs	r2, #20
 8002526:	4918      	ldr	r1, [pc, #96]	; (8002588 <Shell_Loop+0x400>)
 8002528:	4814      	ldr	r0, [pc, #80]	; (800257c <Shell_Loop+0x3f4>)
 800252a:	f005 fcae 	bl	8007e8a <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800252e:	f04f 33ff 	mov.w	r3, #4294967295
 8002532:	221c      	movs	r2, #28
 8002534:	4915      	ldr	r1, [pc, #84]	; (800258c <Shell_Loop+0x404>)
 8002536:	4811      	ldr	r0, [pc, #68]	; (800257c <Shell_Loop+0x3f4>)
 8002538:	f005 fca7 	bl	8007e8a <HAL_UART_Transmit>
		newCmdReady = 0;
 800253c:	4b14      	ldr	r3, [pc, #80]	; (8002590 <Shell_Loop+0x408>)
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
	}
}
 8002542:	bf00      	nop
 8002544:	3758      	adds	r7, #88	; 0x58
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	f3af 8000 	nop.w
 8002550:	66666666 	.word	0x66666666
 8002554:	400a6666 	.word	0x400a6666
 8002558:	66666666 	.word	0x66666666
 800255c:	3ffa6666 	.word	0x3ffa6666
 8002560:	9999999a 	.word	0x9999999a
 8002564:	3fa99999 	.word	0x3fa99999
 8002568:	20000684 	.word	0x20000684
 800256c:	0800ce74 	.word	0x0800ce74
 8002570:	200002ac 	.word	0x200002ac
 8002574:	40b00000 	.word	0x40b00000
 8002578:	0800ce78 	.word	0x0800ce78
 800257c:	200004d8 	.word	0x200004d8
 8002580:	0800ce8c 	.word	0x0800ce8c
 8002584:	200003e8 	.word	0x200003e8
 8002588:	20000090 	.word	0x20000090
 800258c:	20000004 	.word	0x20000004
 8002590:	200006b0 	.word	0x200006b0

08002594 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 800259c:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <HAL_UART_RxCpltCallback+0x20>)
 800259e:	2201      	movs	r2, #1
 80025a0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80025a2:	2201      	movs	r2, #1
 80025a4:	4904      	ldr	r1, [pc, #16]	; (80025b8 <HAL_UART_RxCpltCallback+0x24>)
 80025a6:	4805      	ldr	r0, [pc, #20]	; (80025bc <HAL_UART_RxCpltCallback+0x28>)
 80025a8:	f005 fd06 	bl	8007fb8 <HAL_UART_Receive_IT>
}
 80025ac:	bf00      	nop
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	200005f8 	.word	0x200005f8
 80025b8:	200005fc 	.word	0x200005fc
 80025bc:	200004d8 	.word	0x200004d8

080025c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025c0:	480d      	ldr	r0, [pc, #52]	; (80025f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025c4:	480d      	ldr	r0, [pc, #52]	; (80025fc <LoopForever+0x6>)
  ldr r1, =_edata
 80025c6:	490e      	ldr	r1, [pc, #56]	; (8002600 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025c8:	4a0e      	ldr	r2, [pc, #56]	; (8002604 <LoopForever+0xe>)
  movs r3, #0
 80025ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80025cc:	e002      	b.n	80025d4 <LoopCopyDataInit>

080025ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025d2:	3304      	adds	r3, #4

080025d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025d8:	d3f9      	bcc.n	80025ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025da:	4a0b      	ldr	r2, [pc, #44]	; (8002608 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025dc:	4c0b      	ldr	r4, [pc, #44]	; (800260c <LoopForever+0x16>)
  movs r3, #0
 80025de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025e0:	e001      	b.n	80025e6 <LoopFillZerobss>

080025e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025e4:	3204      	adds	r2, #4

080025e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025e8:	d3fb      	bcc.n	80025e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025ea:	f7ff fa53 	bl	8001a94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025ee:	f008 fb65 	bl	800acbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025f2:	f7fe ffb3 	bl	800155c <main>

080025f6 <LoopForever>:

LoopForever:
    b LoopForever
 80025f6:	e7fe      	b.n	80025f6 <LoopForever>
  ldr   r0, =_estack
 80025f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002600:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 8002604:	0800d2b0 	.word	0x0800d2b0
  ldr r2, =_sbss
 8002608:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 800260c:	20000804 	.word	0x20000804

08002610 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002610:	e7fe      	b.n	8002610 <ADC3_IRQHandler>

08002612 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b082      	sub	sp, #8
 8002616:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002618:	2300      	movs	r3, #0
 800261a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800261c:	2003      	movs	r0, #3
 800261e:	f002 f8d0 	bl	80047c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002622:	200f      	movs	r0, #15
 8002624:	f7ff f89a 	bl	800175c <HAL_InitTick>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d002      	beq.n	8002634 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	71fb      	strb	r3, [r7, #7]
 8002632:	e001      	b.n	8002638 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002634:	f7ff f86e 	bl	8001714 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002638:	79fb      	ldrb	r3, [r7, #7]

}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002648:	4b05      	ldr	r3, [pc, #20]	; (8002660 <HAL_IncTick+0x1c>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	4b05      	ldr	r3, [pc, #20]	; (8002664 <HAL_IncTick+0x20>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4413      	add	r3, r2
 8002652:	4a03      	ldr	r2, [pc, #12]	; (8002660 <HAL_IncTick+0x1c>)
 8002654:	6013      	str	r3, [r2, #0]
}
 8002656:	bf00      	nop
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	200006b4 	.word	0x200006b4
 8002664:	200000c4 	.word	0x200000c4

08002668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return uwTick;
 800266c:	4b03      	ldr	r3, [pc, #12]	; (800267c <HAL_GetTick+0x14>)
 800266e:	681b      	ldr	r3, [r3, #0]
}
 8002670:	4618      	mov	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	200006b4 	.word	0x200006b4

08002680 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	431a      	orrs	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	609a      	str	r2, [r3, #8]
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
 80026ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	609a      	str	r2, [r3, #8]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80026dc:	4618      	mov	r0, r3
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b087      	sub	sp, #28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
 80026f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	3360      	adds	r3, #96	; 0x60
 80026fa:	461a      	mov	r2, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4b08      	ldr	r3, [pc, #32]	; (800272c <LL_ADC_SetOffset+0x44>)
 800270a:	4013      	ands	r3, r2
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	4313      	orrs	r3, r2
 8002718:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002720:	bf00      	nop
 8002722:	371c      	adds	r7, #28
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	03fff000 	.word	0x03fff000

08002730 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3360      	adds	r3, #96	; 0x60
 800273e:	461a      	mov	r2, r3
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002750:	4618      	mov	r0, r3
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800275c:	b480      	push	{r7}
 800275e:	b087      	sub	sp, #28
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	3360      	adds	r3, #96	; 0x60
 800276c:	461a      	mov	r2, r3
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	431a      	orrs	r2, r3
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002786:	bf00      	nop
 8002788:	371c      	adds	r7, #28
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002792:	b480      	push	{r7}
 8002794:	b087      	sub	sp, #28
 8002796:	af00      	add	r7, sp, #0
 8002798:	60f8      	str	r0, [r7, #12]
 800279a:	60b9      	str	r1, [r7, #8]
 800279c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	3360      	adds	r3, #96	; 0x60
 80027a2:	461a      	mov	r2, r3
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	431a      	orrs	r2, r3
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80027bc:	bf00      	nop
 80027be:	371c      	adds	r7, #28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	3360      	adds	r3, #96	; 0x60
 80027d8:	461a      	mov	r2, r3
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	431a      	orrs	r2, r3
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80027f2:	bf00      	nop
 80027f4:	371c      	adds	r7, #28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	615a      	str	r2, [r3, #20]
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002838:	2301      	movs	r3, #1
 800283a:	e000      	b.n	800283e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800284a:	b480      	push	{r7}
 800284c:	b087      	sub	sp, #28
 800284e:	af00      	add	r7, sp, #0
 8002850:	60f8      	str	r0, [r7, #12]
 8002852:	60b9      	str	r1, [r7, #8]
 8002854:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	3330      	adds	r3, #48	; 0x30
 800285a:	461a      	mov	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	0a1b      	lsrs	r3, r3, #8
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	f003 030c 	and.w	r3, r3, #12
 8002866:	4413      	add	r3, r2
 8002868:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	f003 031f 	and.w	r3, r3, #31
 8002874:	211f      	movs	r1, #31
 8002876:	fa01 f303 	lsl.w	r3, r1, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	401a      	ands	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	0e9b      	lsrs	r3, r3, #26
 8002882:	f003 011f 	and.w	r1, r3, #31
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	f003 031f 	and.w	r3, r3, #31
 800288c:	fa01 f303 	lsl.w	r3, r1, r3
 8002890:	431a      	orrs	r2, r3
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002896:	bf00      	nop
 8002898:	371c      	adds	r7, #28
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ae:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b087      	sub	sp, #28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	3314      	adds	r3, #20
 80028d8:	461a      	mov	r2, r3
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	0e5b      	lsrs	r3, r3, #25
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	4413      	add	r3, r2
 80028e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	0d1b      	lsrs	r3, r3, #20
 80028f0:	f003 031f 	and.w	r3, r3, #31
 80028f4:	2107      	movs	r1, #7
 80028f6:	fa01 f303 	lsl.w	r3, r1, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	401a      	ands	r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	0d1b      	lsrs	r3, r3, #20
 8002902:	f003 031f 	and.w	r3, r3, #31
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	fa01 f303 	lsl.w	r3, r1, r3
 800290c:	431a      	orrs	r2, r3
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002912:	bf00      	nop
 8002914:	371c      	adds	r7, #28
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a0f      	ldr	r2, [pc, #60]	; (800296c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d10a      	bne.n	800294a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002940:	431a      	orrs	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002948:	e00a      	b.n	8002960 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002956:	43db      	mvns	r3, r3
 8002958:	401a      	ands	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002960:	bf00      	nop
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	407f0000 	.word	0x407f0000

08002970 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 031f 	and.w	r3, r3, #31
}
 8002980:	4618      	mov	r0, r3
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800299c:	4618      	mov	r0, r3
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80029b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6093      	str	r3, [r2, #8]
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029e0:	d101      	bne.n	80029e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002a04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a08:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a30:	d101      	bne.n	8002a36 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a58:	f043 0201 	orr.w	r2, r3, #1
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a80:	f043 0202 	orr.w	r2, r3, #2
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d101      	bne.n	8002aac <LL_ADC_IsEnabled+0x18>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <LL_ADC_IsEnabled+0x1a>
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d101      	bne.n	8002ad2 <LL_ADC_IsDisableOngoing+0x18>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <LL_ADC_IsDisableOngoing+0x1a>
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002af0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002af4:	f043 0204 	orr.w	r2, r3, #4
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	d101      	bne.n	8002b20 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d101      	bne.n	8002b46 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b54:	b590      	push	{r4, r7, lr}
 8002b56:	b089      	sub	sp, #36	; 0x24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e1af      	b.n	8002ece <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d109      	bne.n	8002b90 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f7fe faf9 	bl	8001174 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff ff19 	bl	80029cc <LL_ADC_IsDeepPowerDownEnabled>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d004      	beq.n	8002baa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff feff 	bl	80029a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff ff34 	bl	8002a1c <LL_ADC_IsInternalRegulatorEnabled>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d115      	bne.n	8002be6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff ff18 	bl	80029f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bc4:	4b9f      	ldr	r3, [pc, #636]	; (8002e44 <HAL_ADC_Init+0x2f0>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	099b      	lsrs	r3, r3, #6
 8002bca:	4a9f      	ldr	r2, [pc, #636]	; (8002e48 <HAL_ADC_Init+0x2f4>)
 8002bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd0:	099b      	lsrs	r3, r3, #6
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002bd8:	e002      	b.n	8002be0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f9      	bne.n	8002bda <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff ff16 	bl	8002a1c <LL_ADC_IsInternalRegulatorEnabled>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10d      	bne.n	8002c12 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfa:	f043 0210 	orr.w	r2, r3, #16
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c06:	f043 0201 	orr.w	r2, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff ff76 	bl	8002b08 <LL_ADC_REG_IsConversionOngoing>
 8002c1c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c22:	f003 0310 	and.w	r3, r3, #16
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f040 8148 	bne.w	8002ebc <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f040 8144 	bne.w	8002ebc <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c38:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c3c:	f043 0202 	orr.w	r2, r3, #2
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff ff23 	bl	8002a94 <LL_ADC_IsEnabled>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d141      	bne.n	8002cd8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c5c:	d004      	beq.n	8002c68 <HAL_ADC_Init+0x114>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a7a      	ldr	r2, [pc, #488]	; (8002e4c <HAL_ADC_Init+0x2f8>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d10f      	bne.n	8002c88 <HAL_ADC_Init+0x134>
 8002c68:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c6c:	f7ff ff12 	bl	8002a94 <LL_ADC_IsEnabled>
 8002c70:	4604      	mov	r4, r0
 8002c72:	4876      	ldr	r0, [pc, #472]	; (8002e4c <HAL_ADC_Init+0x2f8>)
 8002c74:	f7ff ff0e 	bl	8002a94 <LL_ADC_IsEnabled>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	4323      	orrs	r3, r4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	bf0c      	ite	eq
 8002c80:	2301      	moveq	r3, #1
 8002c82:	2300      	movne	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	e012      	b.n	8002cae <HAL_ADC_Init+0x15a>
 8002c88:	4871      	ldr	r0, [pc, #452]	; (8002e50 <HAL_ADC_Init+0x2fc>)
 8002c8a:	f7ff ff03 	bl	8002a94 <LL_ADC_IsEnabled>
 8002c8e:	4604      	mov	r4, r0
 8002c90:	4870      	ldr	r0, [pc, #448]	; (8002e54 <HAL_ADC_Init+0x300>)
 8002c92:	f7ff feff 	bl	8002a94 <LL_ADC_IsEnabled>
 8002c96:	4603      	mov	r3, r0
 8002c98:	431c      	orrs	r4, r3
 8002c9a:	486f      	ldr	r0, [pc, #444]	; (8002e58 <HAL_ADC_Init+0x304>)
 8002c9c:	f7ff fefa 	bl	8002a94 <LL_ADC_IsEnabled>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	4323      	orrs	r3, r4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	bf0c      	ite	eq
 8002ca8:	2301      	moveq	r3, #1
 8002caa:	2300      	movne	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d012      	beq.n	8002cd8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cba:	d004      	beq.n	8002cc6 <HAL_ADC_Init+0x172>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a62      	ldr	r2, [pc, #392]	; (8002e4c <HAL_ADC_Init+0x2f8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d101      	bne.n	8002cca <HAL_ADC_Init+0x176>
 8002cc6:	4a65      	ldr	r2, [pc, #404]	; (8002e5c <HAL_ADC_Init+0x308>)
 8002cc8:	e000      	b.n	8002ccc <HAL_ADC_Init+0x178>
 8002cca:	4a65      	ldr	r2, [pc, #404]	; (8002e60 <HAL_ADC_Init+0x30c>)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	f7ff fcd4 	bl	8002680 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	7f5b      	ldrb	r3, [r3, #29]
 8002cdc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ce2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002ce8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002cee:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cf6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d106      	bne.n	8002d14 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	045b      	lsls	r3, r3, #17
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d009      	beq.n	8002d30 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d20:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	4b4b      	ldr	r3, [pc, #300]	; (8002e64 <HAL_ADC_Init+0x310>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6812      	ldr	r2, [r2, #0]
 8002d3e:	69b9      	ldr	r1, [r7, #24]
 8002d40:	430b      	orrs	r3, r1
 8002d42:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff fed2 	bl	8002b08 <LL_ADC_REG_IsConversionOngoing>
 8002d64:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff fedf 	bl	8002b2e <LL_ADC_INJ_IsConversionOngoing>
 8002d70:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d17f      	bne.n	8002e78 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d17c      	bne.n	8002e78 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d82:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d8a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d9a:	f023 0302 	bic.w	r3, r3, #2
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6812      	ldr	r2, [r2, #0]
 8002da2:	69b9      	ldr	r1, [r7, #24]
 8002da4:	430b      	orrs	r3, r1
 8002da6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d017      	beq.n	8002de0 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691a      	ldr	r2, [r3, #16]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002dbe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002dc8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002dcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6911      	ldr	r1, [r2, #16]
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6812      	ldr	r2, [r2, #0]
 8002dd8:	430b      	orrs	r3, r1
 8002dda:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002dde:	e013      	b.n	8002e08 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691a      	ldr	r2, [r3, #16]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002dee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6812      	ldr	r2, [r2, #0]
 8002dfc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e04:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d12a      	bne.n	8002e68 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e1c:	f023 0304 	bic.w	r3, r3, #4
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e28:	4311      	orrs	r1, r2
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002e2e:	4311      	orrs	r1, r2
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e34:	430a      	orrs	r2, r1
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f042 0201 	orr.w	r2, r2, #1
 8002e40:	611a      	str	r2, [r3, #16]
 8002e42:	e019      	b.n	8002e78 <HAL_ADC_Init+0x324>
 8002e44:	20000000 	.word	0x20000000
 8002e48:	053e2d63 	.word	0x053e2d63
 8002e4c:	50000100 	.word	0x50000100
 8002e50:	50000400 	.word	0x50000400
 8002e54:	50000500 	.word	0x50000500
 8002e58:	50000600 	.word	0x50000600
 8002e5c:	50000300 	.word	0x50000300
 8002e60:	50000700 	.word	0x50000700
 8002e64:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	691a      	ldr	r2, [r3, #16]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0201 	bic.w	r2, r2, #1
 8002e76:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d10c      	bne.n	8002e9a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	f023 010f 	bic.w	r1, r3, #15
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	1e5a      	subs	r2, r3, #1
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30
 8002e98:	e007      	b.n	8002eaa <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 020f 	bic.w	r2, r2, #15
 8002ea8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eae:	f023 0303 	bic.w	r3, r3, #3
 8002eb2:	f043 0201 	orr.w	r2, r3, #1
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	65da      	str	r2, [r3, #92]	; 0x5c
 8002eba:	e007      	b.n	8002ecc <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec0:	f043 0210 	orr.w	r2, r3, #16
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ecc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3724      	adds	r7, #36	; 0x24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd90      	pop	{r4, r7, pc}
 8002ed6:	bf00      	nop

08002ed8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ee8:	d004      	beq.n	8002ef4 <HAL_ADC_Start+0x1c>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a67      	ldr	r2, [pc, #412]	; (800308c <HAL_ADC_Start+0x1b4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d101      	bne.n	8002ef8 <HAL_ADC_Start+0x20>
 8002ef4:	4b66      	ldr	r3, [pc, #408]	; (8003090 <HAL_ADC_Start+0x1b8>)
 8002ef6:	e000      	b.n	8002efa <HAL_ADC_Start+0x22>
 8002ef8:	4b66      	ldr	r3, [pc, #408]	; (8003094 <HAL_ADC_Start+0x1bc>)
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff fd38 	bl	8002970 <LL_ADC_GetMultimode>
 8002f00:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff fdfe 	bl	8002b08 <LL_ADC_REG_IsConversionOngoing>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f040 80b4 	bne.w	800307c <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d101      	bne.n	8002f22 <HAL_ADC_Start+0x4a>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e0af      	b.n	8003082 <HAL_ADC_Start+0x1aa>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f001 f858 	bl	8003fe0 <ADC_Enable>
 8002f30:	4603      	mov	r3, r0
 8002f32:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002f34:	7dfb      	ldrb	r3, [r7, #23]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f040 809b 	bne.w	8003072 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f40:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f44:	f023 0301 	bic.w	r3, r3, #1
 8002f48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a4d      	ldr	r2, [pc, #308]	; (800308c <HAL_ADC_Start+0x1b4>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d009      	beq.n	8002f6e <HAL_ADC_Start+0x96>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a4e      	ldr	r2, [pc, #312]	; (8003098 <HAL_ADC_Start+0x1c0>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d002      	beq.n	8002f6a <HAL_ADC_Start+0x92>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	e003      	b.n	8002f72 <HAL_ADC_Start+0x9a>
 8002f6a:	4b4c      	ldr	r3, [pc, #304]	; (800309c <HAL_ADC_Start+0x1c4>)
 8002f6c:	e001      	b.n	8002f72 <HAL_ADC_Start+0x9a>
 8002f6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6812      	ldr	r2, [r2, #0]
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d002      	beq.n	8002f80 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d105      	bne.n	8002f8c <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f84:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f98:	d106      	bne.n	8002fa8 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f9e:	f023 0206 	bic.w	r2, r3, #6
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	661a      	str	r2, [r3, #96]	; 0x60
 8002fa6:	e002      	b.n	8002fae <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	221c      	movs	r2, #28
 8002fb4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a32      	ldr	r2, [pc, #200]	; (800308c <HAL_ADC_Start+0x1b4>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d009      	beq.n	8002fdc <HAL_ADC_Start+0x104>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a32      	ldr	r2, [pc, #200]	; (8003098 <HAL_ADC_Start+0x1c0>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d002      	beq.n	8002fd8 <HAL_ADC_Start+0x100>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	e003      	b.n	8002fe0 <HAL_ADC_Start+0x108>
 8002fd8:	4b30      	ldr	r3, [pc, #192]	; (800309c <HAL_ADC_Start+0x1c4>)
 8002fda:	e001      	b.n	8002fe0 <HAL_ADC_Start+0x108>
 8002fdc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d008      	beq.n	8002ffa <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	2b05      	cmp	r3, #5
 8002ff2:	d002      	beq.n	8002ffa <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	2b09      	cmp	r3, #9
 8002ff8:	d114      	bne.n	8003024 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d007      	beq.n	8003018 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003010:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff fd5f 	bl	8002ae0 <LL_ADC_REG_StartConversion>
 8003022:	e02d      	b.n	8003080 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003028:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a15      	ldr	r2, [pc, #84]	; (800308c <HAL_ADC_Start+0x1b4>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d009      	beq.n	800304e <HAL_ADC_Start+0x176>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a16      	ldr	r2, [pc, #88]	; (8003098 <HAL_ADC_Start+0x1c0>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d002      	beq.n	800304a <HAL_ADC_Start+0x172>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	e003      	b.n	8003052 <HAL_ADC_Start+0x17a>
 800304a:	4b14      	ldr	r3, [pc, #80]	; (800309c <HAL_ADC_Start+0x1c4>)
 800304c:	e001      	b.n	8003052 <HAL_ADC_Start+0x17a>
 800304e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003052:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00f      	beq.n	8003080 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003064:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003068:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003070:	e006      	b.n	8003080 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800307a:	e001      	b.n	8003080 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800307c:	2302      	movs	r3, #2
 800307e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003080:	7dfb      	ldrb	r3, [r7, #23]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	50000100 	.word	0x50000100
 8003090:	50000300 	.word	0x50000300
 8003094:	50000700 	.word	0x50000700
 8003098:	50000500 	.word	0x50000500
 800309c:	50000400 	.word	0x50000400

080030a0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030b4:	d004      	beq.n	80030c0 <HAL_ADC_Start_DMA+0x20>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a5a      	ldr	r2, [pc, #360]	; (8003224 <HAL_ADC_Start_DMA+0x184>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d101      	bne.n	80030c4 <HAL_ADC_Start_DMA+0x24>
 80030c0:	4b59      	ldr	r3, [pc, #356]	; (8003228 <HAL_ADC_Start_DMA+0x188>)
 80030c2:	e000      	b.n	80030c6 <HAL_ADC_Start_DMA+0x26>
 80030c4:	4b59      	ldr	r3, [pc, #356]	; (800322c <HAL_ADC_Start_DMA+0x18c>)
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff fc52 	bl	8002970 <LL_ADC_GetMultimode>
 80030cc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff fd18 	bl	8002b08 <LL_ADC_REG_IsConversionOngoing>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f040 809b 	bne.w	8003216 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d101      	bne.n	80030ee <HAL_ADC_Start_DMA+0x4e>
 80030ea:	2302      	movs	r3, #2
 80030ec:	e096      	b.n	800321c <HAL_ADC_Start_DMA+0x17c>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a4d      	ldr	r2, [pc, #308]	; (8003230 <HAL_ADC_Start_DMA+0x190>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d008      	beq.n	8003112 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	2b05      	cmp	r3, #5
 800310a:	d002      	beq.n	8003112 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	2b09      	cmp	r3, #9
 8003110:	d17a      	bne.n	8003208 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 ff64 	bl	8003fe0 <ADC_Enable>
 8003118:	4603      	mov	r3, r0
 800311a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800311c:	7dfb      	ldrb	r3, [r7, #23]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d16d      	bne.n	80031fe <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003126:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800312a:	f023 0301 	bic.w	r3, r3, #1
 800312e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a3a      	ldr	r2, [pc, #232]	; (8003224 <HAL_ADC_Start_DMA+0x184>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d009      	beq.n	8003154 <HAL_ADC_Start_DMA+0xb4>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a3b      	ldr	r2, [pc, #236]	; (8003234 <HAL_ADC_Start_DMA+0x194>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d002      	beq.n	8003150 <HAL_ADC_Start_DMA+0xb0>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	e003      	b.n	8003158 <HAL_ADC_Start_DMA+0xb8>
 8003150:	4b39      	ldr	r3, [pc, #228]	; (8003238 <HAL_ADC_Start_DMA+0x198>)
 8003152:	e001      	b.n	8003158 <HAL_ADC_Start_DMA+0xb8>
 8003154:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	6812      	ldr	r2, [r2, #0]
 800315c:	4293      	cmp	r3, r2
 800315e:	d002      	beq.n	8003166 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d105      	bne.n	8003172 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003176:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d006      	beq.n	800318c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003182:	f023 0206 	bic.w	r2, r3, #6
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	661a      	str	r2, [r3, #96]	; 0x60
 800318a:	e002      	b.n	8003192 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003196:	4a29      	ldr	r2, [pc, #164]	; (800323c <HAL_ADC_Start_DMA+0x19c>)
 8003198:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319e:	4a28      	ldr	r2, [pc, #160]	; (8003240 <HAL_ADC_Start_DMA+0x1a0>)
 80031a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a6:	4a27      	ldr	r2, [pc, #156]	; (8003244 <HAL_ADC_Start_DMA+0x1a4>)
 80031a8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	221c      	movs	r2, #28
 80031b0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f042 0210 	orr.w	r2, r2, #16
 80031c8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68da      	ldr	r2, [r3, #12]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f042 0201 	orr.w	r2, r2, #1
 80031d8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	3340      	adds	r3, #64	; 0x40
 80031e4:	4619      	mov	r1, r3
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f001 fbc5 	bl	8004978 <HAL_DMA_Start_IT>
 80031ee:	4603      	mov	r3, r0
 80031f0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff fc72 	bl	8002ae0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80031fc:	e00d      	b.n	800321a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8003206:	e008      	b.n	800321a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003214:	e001      	b.n	800321a <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003216:	2302      	movs	r3, #2
 8003218:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800321a:	7dfb      	ldrb	r3, [r7, #23]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	50000100 	.word	0x50000100
 8003228:	50000300 	.word	0x50000300
 800322c:	50000700 	.word	0x50000700
 8003230:	50000600 	.word	0x50000600
 8003234:	50000500 	.word	0x50000500
 8003238:	50000400 	.word	0x50000400
 800323c:	08004163 	.word	0x08004163
 8003240:	0800423b 	.word	0x0800423b
 8003244:	08004257 	.word	0x08004257

08003248 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003256:	4618      	mov	r0, r3
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
	...

08003264 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b08a      	sub	sp, #40	; 0x28
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800326c:	2300      	movs	r3, #0
 800326e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003288:	d004      	beq.n	8003294 <HAL_ADC_IRQHandler+0x30>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a8e      	ldr	r2, [pc, #568]	; (80034c8 <HAL_ADC_IRQHandler+0x264>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d101      	bne.n	8003298 <HAL_ADC_IRQHandler+0x34>
 8003294:	4b8d      	ldr	r3, [pc, #564]	; (80034cc <HAL_ADC_IRQHandler+0x268>)
 8003296:	e000      	b.n	800329a <HAL_ADC_IRQHandler+0x36>
 8003298:	4b8d      	ldr	r3, [pc, #564]	; (80034d0 <HAL_ADC_IRQHandler+0x26c>)
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff fb68 	bl	8002970 <LL_ADC_GetMultimode>
 80032a0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d017      	beq.n	80032dc <HAL_ADC_IRQHandler+0x78>
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d012      	beq.n	80032dc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ba:	f003 0310 	and.w	r3, r3, #16
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d105      	bne.n	80032ce <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f001 f8b8 	bl	8004444 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2202      	movs	r2, #2
 80032da:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d004      	beq.n	80032f0 <HAL_ADC_IRQHandler+0x8c>
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10b      	bne.n	8003308 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 8094 	beq.w	8003424 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 808e 	beq.w	8003424 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330c:	f003 0310 	and.w	r3, r3, #16
 8003310:	2b00      	cmp	r3, #0
 8003312:	d105      	bne.n	8003320 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003318:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff fa7d 	bl	8002824 <LL_ADC_REG_IsTriggerSourceSWStart>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d072      	beq.n	8003416 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a64      	ldr	r2, [pc, #400]	; (80034c8 <HAL_ADC_IRQHandler+0x264>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d009      	beq.n	800334e <HAL_ADC_IRQHandler+0xea>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a65      	ldr	r2, [pc, #404]	; (80034d4 <HAL_ADC_IRQHandler+0x270>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d002      	beq.n	800334a <HAL_ADC_IRQHandler+0xe6>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	e003      	b.n	8003352 <HAL_ADC_IRQHandler+0xee>
 800334a:	4b63      	ldr	r3, [pc, #396]	; (80034d8 <HAL_ADC_IRQHandler+0x274>)
 800334c:	e001      	b.n	8003352 <HAL_ADC_IRQHandler+0xee>
 800334e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6812      	ldr	r2, [r2, #0]
 8003356:	4293      	cmp	r3, r2
 8003358:	d008      	beq.n	800336c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	2b05      	cmp	r3, #5
 8003364:	d002      	beq.n	800336c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2b09      	cmp	r3, #9
 800336a:	d104      	bne.n	8003376 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	623b      	str	r3, [r7, #32]
 8003374:	e014      	b.n	80033a0 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a53      	ldr	r2, [pc, #332]	; (80034c8 <HAL_ADC_IRQHandler+0x264>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d009      	beq.n	8003394 <HAL_ADC_IRQHandler+0x130>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a53      	ldr	r2, [pc, #332]	; (80034d4 <HAL_ADC_IRQHandler+0x270>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d002      	beq.n	8003390 <HAL_ADC_IRQHandler+0x12c>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	e003      	b.n	8003398 <HAL_ADC_IRQHandler+0x134>
 8003390:	4b51      	ldr	r3, [pc, #324]	; (80034d8 <HAL_ADC_IRQHandler+0x274>)
 8003392:	e001      	b.n	8003398 <HAL_ADC_IRQHandler+0x134>
 8003394:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003398:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d135      	bne.n	8003416 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0308 	and.w	r3, r3, #8
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d12e      	bne.n	8003416 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff fba3 	bl	8002b08 <LL_ADC_REG_IsConversionOngoing>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d11a      	bne.n	80033fe <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 020c 	bic.w	r2, r2, #12
 80033d6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d112      	bne.n	8003416 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f4:	f043 0201 	orr.w	r2, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80033fc:	e00b      	b.n	8003416 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003402:	f043 0210 	orr.w	r2, r3, #16
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800340e:	f043 0201 	orr.w	r2, r3, #1
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fe f912 	bl	8001640 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	220c      	movs	r2, #12
 8003422:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	f003 0320 	and.w	r3, r3, #32
 800342a:	2b00      	cmp	r3, #0
 800342c:	d004      	beq.n	8003438 <HAL_ADC_IRQHandler+0x1d4>
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	f003 0320 	and.w	r3, r3, #32
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10b      	bne.n	8003450 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 80b3 	beq.w	80035aa <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 80ad 	beq.w	80035aa <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003454:	f003 0310 	and.w	r3, r3, #16
 8003458:	2b00      	cmp	r3, #0
 800345a:	d105      	bne.n	8003468 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003460:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff fa18 	bl	80028a2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003472:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff f9d3 	bl	8002824 <LL_ADC_REG_IsTriggerSourceSWStart>
 800347e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a10      	ldr	r2, [pc, #64]	; (80034c8 <HAL_ADC_IRQHandler+0x264>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d009      	beq.n	800349e <HAL_ADC_IRQHandler+0x23a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a11      	ldr	r2, [pc, #68]	; (80034d4 <HAL_ADC_IRQHandler+0x270>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d002      	beq.n	800349a <HAL_ADC_IRQHandler+0x236>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	e003      	b.n	80034a2 <HAL_ADC_IRQHandler+0x23e>
 800349a:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <HAL_ADC_IRQHandler+0x274>)
 800349c:	e001      	b.n	80034a2 <HAL_ADC_IRQHandler+0x23e>
 800349e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6812      	ldr	r2, [r2, #0]
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d008      	beq.n	80034bc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d005      	beq.n	80034bc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	2b06      	cmp	r3, #6
 80034b4:	d002      	beq.n	80034bc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2b07      	cmp	r3, #7
 80034ba:	d10f      	bne.n	80034dc <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	623b      	str	r3, [r7, #32]
 80034c4:	e01f      	b.n	8003506 <HAL_ADC_IRQHandler+0x2a2>
 80034c6:	bf00      	nop
 80034c8:	50000100 	.word	0x50000100
 80034cc:	50000300 	.word	0x50000300
 80034d0:	50000700 	.word	0x50000700
 80034d4:	50000500 	.word	0x50000500
 80034d8:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a8b      	ldr	r2, [pc, #556]	; (8003710 <HAL_ADC_IRQHandler+0x4ac>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d009      	beq.n	80034fa <HAL_ADC_IRQHandler+0x296>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a8a      	ldr	r2, [pc, #552]	; (8003714 <HAL_ADC_IRQHandler+0x4b0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d002      	beq.n	80034f6 <HAL_ADC_IRQHandler+0x292>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	e003      	b.n	80034fe <HAL_ADC_IRQHandler+0x29a>
 80034f6:	4b88      	ldr	r3, [pc, #544]	; (8003718 <HAL_ADC_IRQHandler+0x4b4>)
 80034f8:	e001      	b.n	80034fe <HAL_ADC_IRQHandler+0x29a>
 80034fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80034fe:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d047      	beq.n	800359c <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d007      	beq.n	8003526 <HAL_ADC_IRQHandler+0x2c2>
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d03f      	beq.n	800359c <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003522:	2b00      	cmp	r3, #0
 8003524:	d13a      	bne.n	800359c <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003530:	2b40      	cmp	r3, #64	; 0x40
 8003532:	d133      	bne.n	800359c <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d12e      	bne.n	800359c <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff faf3 	bl	8002b2e <LL_ADC_INJ_IsConversionOngoing>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d11a      	bne.n	8003584 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800355c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003562:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003572:	2b00      	cmp	r3, #0
 8003574:	d112      	bne.n	800359c <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357a:	f043 0201 	orr.w	r2, r3, #1
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	65da      	str	r2, [r3, #92]	; 0x5c
 8003582:	e00b      	b.n	800359c <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003588:	f043 0210 	orr.w	r2, r3, #16
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003594:	f043 0201 	orr.w	r2, r3, #1
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 ff29 	bl	80043f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2260      	movs	r2, #96	; 0x60
 80035a8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d011      	beq.n	80035d8 <HAL_ADC_IRQHandler+0x374>
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00c      	beq.n	80035d8 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f8b4 	bl	8003738 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2280      	movs	r2, #128	; 0x80
 80035d6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d012      	beq.n	8003608 <HAL_ADC_IRQHandler+0x3a4>
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00d      	beq.n	8003608 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 ff0f 	bl	800441c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003606:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800360e:	2b00      	cmp	r3, #0
 8003610:	d012      	beq.n	8003638 <HAL_ADC_IRQHandler+0x3d4>
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00d      	beq.n	8003638 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003620:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 ff01 	bl	8004430 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003636:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	f003 0310 	and.w	r3, r3, #16
 800363e:	2b00      	cmp	r3, #0
 8003640:	d043      	beq.n	80036ca <HAL_ADC_IRQHandler+0x466>
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	f003 0310 	and.w	r3, r3, #16
 8003648:	2b00      	cmp	r3, #0
 800364a:	d03e      	beq.n	80036ca <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003650:	2b00      	cmp	r3, #0
 8003652:	d102      	bne.n	800365a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003654:	2301      	movs	r3, #1
 8003656:	627b      	str	r3, [r7, #36]	; 0x24
 8003658:	e021      	b.n	800369e <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d015      	beq.n	800368c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003668:	d004      	beq.n	8003674 <HAL_ADC_IRQHandler+0x410>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a28      	ldr	r2, [pc, #160]	; (8003710 <HAL_ADC_IRQHandler+0x4ac>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d101      	bne.n	8003678 <HAL_ADC_IRQHandler+0x414>
 8003674:	4b29      	ldr	r3, [pc, #164]	; (800371c <HAL_ADC_IRQHandler+0x4b8>)
 8003676:	e000      	b.n	800367a <HAL_ADC_IRQHandler+0x416>
 8003678:	4b29      	ldr	r3, [pc, #164]	; (8003720 <HAL_ADC_IRQHandler+0x4bc>)
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff f986 	bl	800298c <LL_ADC_GetMultiDMATransfer>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00b      	beq.n	800369e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003686:	2301      	movs	r3, #1
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
 800368a:	e008      	b.n	800369e <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800369a:	2301      	movs	r3, #1
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d10e      	bne.n	80036c2 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036b4:	f043 0202 	orr.w	r2, r3, #2
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f845 	bl	800374c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2210      	movs	r2, #16
 80036c8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d018      	beq.n	8003706 <HAL_ADC_IRQHandler+0x4a2>
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d013      	beq.n	8003706 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ee:	f043 0208 	orr.w	r2, r3, #8
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036fe:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 fe81 	bl	8004408 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003706:	bf00      	nop
 8003708:	3728      	adds	r7, #40	; 0x28
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	50000100 	.word	0x50000100
 8003714:	50000500 	.word	0x50000500
 8003718:	50000400 	.word	0x50000400
 800371c:	50000300 	.word	0x50000300
 8003720:	50000700 	.word	0x50000700

08003724 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b0b6      	sub	sp, #216	; 0xd8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800376a:	2300      	movs	r3, #0
 800376c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003770:	2300      	movs	r3, #0
 8003772:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800377a:	2b01      	cmp	r3, #1
 800377c:	d102      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x24>
 800377e:	2302      	movs	r3, #2
 8003780:	f000 bc13 	b.w	8003faa <HAL_ADC_ConfigChannel+0x84a>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff f9b9 	bl	8002b08 <LL_ADC_REG_IsConversionOngoing>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	f040 83f3 	bne.w	8003f84 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6818      	ldr	r0, [r3, #0]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	6859      	ldr	r1, [r3, #4]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	461a      	mov	r2, r3
 80037ac:	f7ff f84d 	bl	800284a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff f9a7 	bl	8002b08 <LL_ADC_REG_IsConversionOngoing>
 80037ba:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7ff f9b3 	bl	8002b2e <LL_ADC_INJ_IsConversionOngoing>
 80037c8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f040 81d9 	bne.w	8003b88 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f040 81d4 	bne.w	8003b88 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037e8:	d10f      	bne.n	800380a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6818      	ldr	r0, [r3, #0]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2200      	movs	r2, #0
 80037f4:	4619      	mov	r1, r3
 80037f6:	f7ff f867 	bl	80028c8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003802:	4618      	mov	r0, r3
 8003804:	f7fe fffb 	bl	80027fe <LL_ADC_SetSamplingTimeCommonConfig>
 8003808:	e00e      	b.n	8003828 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6818      	ldr	r0, [r3, #0]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	6819      	ldr	r1, [r3, #0]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	461a      	mov	r2, r3
 8003818:	f7ff f856 	bl	80028c8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2100      	movs	r1, #0
 8003822:	4618      	mov	r0, r3
 8003824:	f7fe ffeb 	bl	80027fe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	695a      	ldr	r2, [r3, #20]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	08db      	lsrs	r3, r3, #3
 8003834:	f003 0303 	and.w	r3, r3, #3
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	2b04      	cmp	r3, #4
 8003848:	d022      	beq.n	8003890 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6818      	ldr	r0, [r3, #0]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	6919      	ldr	r1, [r3, #16]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800385a:	f7fe ff45 	bl	80026e8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6818      	ldr	r0, [r3, #0]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	6919      	ldr	r1, [r3, #16]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	461a      	mov	r2, r3
 800386c:	f7fe ff91 	bl	8002792 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6818      	ldr	r0, [r3, #0]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	6919      	ldr	r1, [r3, #16]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	7f1b      	ldrb	r3, [r3, #28]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d102      	bne.n	8003886 <HAL_ADC_ConfigChannel+0x126>
 8003880:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003884:	e000      	b.n	8003888 <HAL_ADC_ConfigChannel+0x128>
 8003886:	2300      	movs	r3, #0
 8003888:	461a      	mov	r2, r3
 800388a:	f7fe ff9d 	bl	80027c8 <LL_ADC_SetOffsetSaturation>
 800388e:	e17b      	b.n	8003b88 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2100      	movs	r1, #0
 8003896:	4618      	mov	r0, r3
 8003898:	f7fe ff4a 	bl	8002730 <LL_ADC_GetOffsetChannel>
 800389c:	4603      	mov	r3, r0
 800389e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10a      	bne.n	80038bc <HAL_ADC_ConfigChannel+0x15c>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2100      	movs	r1, #0
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7fe ff3f 	bl	8002730 <LL_ADC_GetOffsetChannel>
 80038b2:	4603      	mov	r3, r0
 80038b4:	0e9b      	lsrs	r3, r3, #26
 80038b6:	f003 021f 	and.w	r2, r3, #31
 80038ba:	e01e      	b.n	80038fa <HAL_ADC_ConfigChannel+0x19a>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2100      	movs	r1, #0
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fe ff34 	bl	8002730 <LL_ADC_GetOffsetChannel>
 80038c8:	4603      	mov	r3, r0
 80038ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80038d2:	fa93 f3a3 	rbit	r3, r3
 80038d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80038de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80038e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80038ea:	2320      	movs	r3, #32
 80038ec:	e004      	b.n	80038f8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80038ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038f2:	fab3 f383 	clz	r3, r3
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003902:	2b00      	cmp	r3, #0
 8003904:	d105      	bne.n	8003912 <HAL_ADC_ConfigChannel+0x1b2>
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	0e9b      	lsrs	r3, r3, #26
 800390c:	f003 031f 	and.w	r3, r3, #31
 8003910:	e018      	b.n	8003944 <HAL_ADC_ConfigChannel+0x1e4>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800391e:	fa93 f3a3 	rbit	r3, r3
 8003922:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003926:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800392a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800392e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003936:	2320      	movs	r3, #32
 8003938:	e004      	b.n	8003944 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800393a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800393e:	fab3 f383 	clz	r3, r3
 8003942:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003944:	429a      	cmp	r2, r3
 8003946:	d106      	bne.n	8003956 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2200      	movs	r2, #0
 800394e:	2100      	movs	r1, #0
 8003950:	4618      	mov	r0, r3
 8003952:	f7fe ff03 	bl	800275c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2101      	movs	r1, #1
 800395c:	4618      	mov	r0, r3
 800395e:	f7fe fee7 	bl	8002730 <LL_ADC_GetOffsetChannel>
 8003962:	4603      	mov	r3, r0
 8003964:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10a      	bne.n	8003982 <HAL_ADC_ConfigChannel+0x222>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2101      	movs	r1, #1
 8003972:	4618      	mov	r0, r3
 8003974:	f7fe fedc 	bl	8002730 <LL_ADC_GetOffsetChannel>
 8003978:	4603      	mov	r3, r0
 800397a:	0e9b      	lsrs	r3, r3, #26
 800397c:	f003 021f 	and.w	r2, r3, #31
 8003980:	e01e      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x260>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2101      	movs	r1, #1
 8003988:	4618      	mov	r0, r3
 800398a:	f7fe fed1 	bl	8002730 <LL_ADC_GetOffsetChannel>
 800398e:	4603      	mov	r3, r0
 8003990:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003994:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003998:	fa93 f3a3 	rbit	r3, r3
 800399c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80039a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80039a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80039b0:	2320      	movs	r3, #32
 80039b2:	e004      	b.n	80039be <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80039b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80039b8:	fab3 f383 	clz	r3, r3
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d105      	bne.n	80039d8 <HAL_ADC_ConfigChannel+0x278>
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	0e9b      	lsrs	r3, r3, #26
 80039d2:	f003 031f 	and.w	r3, r3, #31
 80039d6:	e018      	b.n	8003a0a <HAL_ADC_ConfigChannel+0x2aa>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039e4:	fa93 f3a3 	rbit	r3, r3
 80039e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80039ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80039f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80039f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80039fc:	2320      	movs	r3, #32
 80039fe:	e004      	b.n	8003a0a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003a00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a04:	fab3 f383 	clz	r3, r3
 8003a08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d106      	bne.n	8003a1c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2200      	movs	r2, #0
 8003a14:	2101      	movs	r1, #1
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fe fea0 	bl	800275c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2102      	movs	r1, #2
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fe fe84 	bl	8002730 <LL_ADC_GetOffsetChannel>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10a      	bne.n	8003a48 <HAL_ADC_ConfigChannel+0x2e8>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2102      	movs	r1, #2
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fe fe79 	bl	8002730 <LL_ADC_GetOffsetChannel>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	0e9b      	lsrs	r3, r3, #26
 8003a42:	f003 021f 	and.w	r2, r3, #31
 8003a46:	e01e      	b.n	8003a86 <HAL_ADC_ConfigChannel+0x326>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2102      	movs	r1, #2
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fe fe6e 	bl	8002730 <LL_ADC_GetOffsetChannel>
 8003a54:	4603      	mov	r3, r0
 8003a56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a5e:	fa93 f3a3 	rbit	r3, r3
 8003a62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003a66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003a6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003a76:	2320      	movs	r3, #32
 8003a78:	e004      	b.n	8003a84 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003a7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a7e:	fab3 f383 	clz	r3, r3
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d105      	bne.n	8003a9e <HAL_ADC_ConfigChannel+0x33e>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	0e9b      	lsrs	r3, r3, #26
 8003a98:	f003 031f 	and.w	r3, r3, #31
 8003a9c:	e016      	b.n	8003acc <HAL_ADC_ConfigChannel+0x36c>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003aaa:	fa93 f3a3 	rbit	r3, r3
 8003aae:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003ab0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ab2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003ab6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003abe:	2320      	movs	r3, #32
 8003ac0:	e004      	b.n	8003acc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003ac2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ac6:	fab3 f383 	clz	r3, r3
 8003aca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d106      	bne.n	8003ade <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	2102      	movs	r1, #2
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fe fe3f 	bl	800275c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2103      	movs	r1, #3
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fe fe23 	bl	8002730 <LL_ADC_GetOffsetChannel>
 8003aea:	4603      	mov	r3, r0
 8003aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10a      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x3aa>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2103      	movs	r1, #3
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fe fe18 	bl	8002730 <LL_ADC_GetOffsetChannel>
 8003b00:	4603      	mov	r3, r0
 8003b02:	0e9b      	lsrs	r3, r3, #26
 8003b04:	f003 021f 	and.w	r2, r3, #31
 8003b08:	e017      	b.n	8003b3a <HAL_ADC_ConfigChannel+0x3da>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2103      	movs	r1, #3
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fe fe0d 	bl	8002730 <LL_ADC_GetOffsetChannel>
 8003b16:	4603      	mov	r3, r0
 8003b18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b1c:	fa93 f3a3 	rbit	r3, r3
 8003b20:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003b22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b24:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003b26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003b2c:	2320      	movs	r3, #32
 8003b2e:	e003      	b.n	8003b38 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b32:	fab3 f383 	clz	r3, r3
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d105      	bne.n	8003b52 <HAL_ADC_ConfigChannel+0x3f2>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	0e9b      	lsrs	r3, r3, #26
 8003b4c:	f003 031f 	and.w	r3, r3, #31
 8003b50:	e011      	b.n	8003b76 <HAL_ADC_ConfigChannel+0x416>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b5a:	fa93 f3a3 	rbit	r3, r3
 8003b5e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b62:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003b6a:	2320      	movs	r3, #32
 8003b6c:	e003      	b.n	8003b76 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b70:	fab3 f383 	clz	r3, r3
 8003b74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d106      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2103      	movs	r1, #3
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fe fdea 	bl	800275c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fe ff81 	bl	8002a94 <LL_ADC_IsEnabled>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f040 813d 	bne.w	8003e14 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	6819      	ldr	r1, [r3, #0]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	f7fe feba 	bl	8002920 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	4aa2      	ldr	r2, [pc, #648]	; (8003e3c <HAL_ADC_ConfigChannel+0x6dc>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	f040 812e 	bne.w	8003e14 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10b      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0x480>
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	0e9b      	lsrs	r3, r3, #26
 8003bce:	3301      	adds	r3, #1
 8003bd0:	f003 031f 	and.w	r3, r3, #31
 8003bd4:	2b09      	cmp	r3, #9
 8003bd6:	bf94      	ite	ls
 8003bd8:	2301      	movls	r3, #1
 8003bda:	2300      	movhi	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	e019      	b.n	8003c14 <HAL_ADC_ConfigChannel+0x4b4>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003be8:	fa93 f3a3 	rbit	r3, r3
 8003bec:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003bee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bf0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003bf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003bf8:	2320      	movs	r3, #32
 8003bfa:	e003      	b.n	8003c04 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003bfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bfe:	fab3 f383 	clz	r3, r3
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	3301      	adds	r3, #1
 8003c06:	f003 031f 	and.w	r3, r3, #31
 8003c0a:	2b09      	cmp	r3, #9
 8003c0c:	bf94      	ite	ls
 8003c0e:	2301      	movls	r3, #1
 8003c10:	2300      	movhi	r3, #0
 8003c12:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d079      	beq.n	8003d0c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d107      	bne.n	8003c34 <HAL_ADC_ConfigChannel+0x4d4>
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	0e9b      	lsrs	r3, r3, #26
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	069b      	lsls	r3, r3, #26
 8003c2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c32:	e015      	b.n	8003c60 <HAL_ADC_ConfigChannel+0x500>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c3c:	fa93 f3a3 	rbit	r3, r3
 8003c40:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c44:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003c4c:	2320      	movs	r3, #32
 8003c4e:	e003      	b.n	8003c58 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c52:	fab3 f383 	clz	r3, r3
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	3301      	adds	r3, #1
 8003c5a:	069b      	lsls	r3, r3, #26
 8003c5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d109      	bne.n	8003c80 <HAL_ADC_ConfigChannel+0x520>
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	0e9b      	lsrs	r3, r3, #26
 8003c72:	3301      	adds	r3, #1
 8003c74:	f003 031f 	and.w	r3, r3, #31
 8003c78:	2101      	movs	r1, #1
 8003c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c7e:	e017      	b.n	8003cb0 <HAL_ADC_ConfigChannel+0x550>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c88:	fa93 f3a3 	rbit	r3, r3
 8003c8c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c90:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003c92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003c98:	2320      	movs	r3, #32
 8003c9a:	e003      	b.n	8003ca4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c9e:	fab3 f383 	clz	r3, r3
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	f003 031f 	and.w	r3, r3, #31
 8003caa:	2101      	movs	r1, #1
 8003cac:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb0:	ea42 0103 	orr.w	r1, r2, r3
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10a      	bne.n	8003cd6 <HAL_ADC_ConfigChannel+0x576>
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	0e9b      	lsrs	r3, r3, #26
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	f003 021f 	and.w	r2, r3, #31
 8003ccc:	4613      	mov	r3, r2
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	4413      	add	r3, r2
 8003cd2:	051b      	lsls	r3, r3, #20
 8003cd4:	e018      	b.n	8003d08 <HAL_ADC_ConfigChannel+0x5a8>
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cde:	fa93 f3a3 	rbit	r3, r3
 8003ce2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003cee:	2320      	movs	r3, #32
 8003cf0:	e003      	b.n	8003cfa <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf4:	fab3 f383 	clz	r3, r3
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	f003 021f 	and.w	r2, r3, #31
 8003d00:	4613      	mov	r3, r2
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	4413      	add	r3, r2
 8003d06:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	e07e      	b.n	8003e0a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d107      	bne.n	8003d28 <HAL_ADC_ConfigChannel+0x5c8>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	0e9b      	lsrs	r3, r3, #26
 8003d1e:	3301      	adds	r3, #1
 8003d20:	069b      	lsls	r3, r3, #26
 8003d22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d26:	e015      	b.n	8003d54 <HAL_ADC_ConfigChannel+0x5f4>
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d30:	fa93 f3a3 	rbit	r3, r3
 8003d34:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d38:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003d40:	2320      	movs	r3, #32
 8003d42:	e003      	b.n	8003d4c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d46:	fab3 f383 	clz	r3, r3
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	069b      	lsls	r3, r3, #26
 8003d50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d109      	bne.n	8003d74 <HAL_ADC_ConfigChannel+0x614>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	0e9b      	lsrs	r3, r3, #26
 8003d66:	3301      	adds	r3, #1
 8003d68:	f003 031f 	and.w	r3, r3, #31
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d72:	e017      	b.n	8003da4 <HAL_ADC_ConfigChannel+0x644>
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	fa93 f3a3 	rbit	r3, r3
 8003d80:	61fb      	str	r3, [r7, #28]
  return result;
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003d8c:	2320      	movs	r3, #32
 8003d8e:	e003      	b.n	8003d98 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	fab3 f383 	clz	r3, r3
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	3301      	adds	r3, #1
 8003d9a:	f003 031f 	and.w	r3, r3, #31
 8003d9e:	2101      	movs	r1, #1
 8003da0:	fa01 f303 	lsl.w	r3, r1, r3
 8003da4:	ea42 0103 	orr.w	r1, r2, r3
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10d      	bne.n	8003dd0 <HAL_ADC_ConfigChannel+0x670>
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	0e9b      	lsrs	r3, r3, #26
 8003dba:	3301      	adds	r3, #1
 8003dbc:	f003 021f 	and.w	r2, r3, #31
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	4413      	add	r3, r2
 8003dc6:	3b1e      	subs	r3, #30
 8003dc8:	051b      	lsls	r3, r3, #20
 8003dca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003dce:	e01b      	b.n	8003e08 <HAL_ADC_ConfigChannel+0x6a8>
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	fa93 f3a3 	rbit	r3, r3
 8003ddc:	613b      	str	r3, [r7, #16]
  return result;
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003de8:	2320      	movs	r3, #32
 8003dea:	e003      	b.n	8003df4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	fab3 f383 	clz	r3, r3
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	3301      	adds	r3, #1
 8003df6:	f003 021f 	and.w	r2, r3, #31
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	4413      	add	r3, r2
 8003e00:	3b1e      	subs	r3, #30
 8003e02:	051b      	lsls	r3, r3, #20
 8003e04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e08:	430b      	orrs	r3, r1
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	6892      	ldr	r2, [r2, #8]
 8003e0e:	4619      	mov	r1, r3
 8003e10:	f7fe fd5a 	bl	80028c8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	4b09      	ldr	r3, [pc, #36]	; (8003e40 <HAL_ADC_ConfigChannel+0x6e0>)
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 80be 	beq.w	8003f9e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e2a:	d004      	beq.n	8003e36 <HAL_ADC_ConfigChannel+0x6d6>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a04      	ldr	r2, [pc, #16]	; (8003e44 <HAL_ADC_ConfigChannel+0x6e4>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d10a      	bne.n	8003e4c <HAL_ADC_ConfigChannel+0x6ec>
 8003e36:	4b04      	ldr	r3, [pc, #16]	; (8003e48 <HAL_ADC_ConfigChannel+0x6e8>)
 8003e38:	e009      	b.n	8003e4e <HAL_ADC_ConfigChannel+0x6ee>
 8003e3a:	bf00      	nop
 8003e3c:	407f0000 	.word	0x407f0000
 8003e40:	80080000 	.word	0x80080000
 8003e44:	50000100 	.word	0x50000100
 8003e48:	50000300 	.word	0x50000300
 8003e4c:	4b59      	ldr	r3, [pc, #356]	; (8003fb4 <HAL_ADC_ConfigChannel+0x854>)
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fe fc3c 	bl	80026cc <LL_ADC_GetCommonPathInternalCh>
 8003e54:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a56      	ldr	r2, [pc, #344]	; (8003fb8 <HAL_ADC_ConfigChannel+0x858>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d004      	beq.n	8003e6c <HAL_ADC_ConfigChannel+0x70c>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a55      	ldr	r2, [pc, #340]	; (8003fbc <HAL_ADC_ConfigChannel+0x85c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d13a      	bne.n	8003ee2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d134      	bne.n	8003ee2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e80:	d005      	beq.n	8003e8e <HAL_ADC_ConfigChannel+0x72e>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a4e      	ldr	r2, [pc, #312]	; (8003fc0 <HAL_ADC_ConfigChannel+0x860>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	f040 8085 	bne.w	8003f98 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e96:	d004      	beq.n	8003ea2 <HAL_ADC_ConfigChannel+0x742>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a49      	ldr	r2, [pc, #292]	; (8003fc4 <HAL_ADC_ConfigChannel+0x864>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d101      	bne.n	8003ea6 <HAL_ADC_ConfigChannel+0x746>
 8003ea2:	4a49      	ldr	r2, [pc, #292]	; (8003fc8 <HAL_ADC_ConfigChannel+0x868>)
 8003ea4:	e000      	b.n	8003ea8 <HAL_ADC_ConfigChannel+0x748>
 8003ea6:	4a43      	ldr	r2, [pc, #268]	; (8003fb4 <HAL_ADC_ConfigChannel+0x854>)
 8003ea8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003eac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	f7fe fbf7 	bl	80026a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003eb8:	4b44      	ldr	r3, [pc, #272]	; (8003fcc <HAL_ADC_ConfigChannel+0x86c>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	099b      	lsrs	r3, r3, #6
 8003ebe:	4a44      	ldr	r2, [pc, #272]	; (8003fd0 <HAL_ADC_ConfigChannel+0x870>)
 8003ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec4:	099b      	lsrs	r3, r3, #6
 8003ec6:	1c5a      	adds	r2, r3, #1
 8003ec8:	4613      	mov	r3, r2
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	4413      	add	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003ed2:	e002      	b.n	8003eda <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1f9      	bne.n	8003ed4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ee0:	e05a      	b.n	8003f98 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a3b      	ldr	r2, [pc, #236]	; (8003fd4 <HAL_ADC_ConfigChannel+0x874>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d125      	bne.n	8003f38 <HAL_ADC_ConfigChannel+0x7d8>
 8003eec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ef0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d11f      	bne.n	8003f38 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a31      	ldr	r2, [pc, #196]	; (8003fc4 <HAL_ADC_ConfigChannel+0x864>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d104      	bne.n	8003f0c <HAL_ADC_ConfigChannel+0x7ac>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a34      	ldr	r2, [pc, #208]	; (8003fd8 <HAL_ADC_ConfigChannel+0x878>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d047      	beq.n	8003f9c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f14:	d004      	beq.n	8003f20 <HAL_ADC_ConfigChannel+0x7c0>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a2a      	ldr	r2, [pc, #168]	; (8003fc4 <HAL_ADC_ConfigChannel+0x864>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d101      	bne.n	8003f24 <HAL_ADC_ConfigChannel+0x7c4>
 8003f20:	4a29      	ldr	r2, [pc, #164]	; (8003fc8 <HAL_ADC_ConfigChannel+0x868>)
 8003f22:	e000      	b.n	8003f26 <HAL_ADC_ConfigChannel+0x7c6>
 8003f24:	4a23      	ldr	r2, [pc, #140]	; (8003fb4 <HAL_ADC_ConfigChannel+0x854>)
 8003f26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4610      	mov	r0, r2
 8003f32:	f7fe fbb8 	bl	80026a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f36:	e031      	b.n	8003f9c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a27      	ldr	r2, [pc, #156]	; (8003fdc <HAL_ADC_ConfigChannel+0x87c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d12d      	bne.n	8003f9e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d127      	bne.n	8003f9e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a1c      	ldr	r2, [pc, #112]	; (8003fc4 <HAL_ADC_ConfigChannel+0x864>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d022      	beq.n	8003f9e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f60:	d004      	beq.n	8003f6c <HAL_ADC_ConfigChannel+0x80c>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a17      	ldr	r2, [pc, #92]	; (8003fc4 <HAL_ADC_ConfigChannel+0x864>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d101      	bne.n	8003f70 <HAL_ADC_ConfigChannel+0x810>
 8003f6c:	4a16      	ldr	r2, [pc, #88]	; (8003fc8 <HAL_ADC_ConfigChannel+0x868>)
 8003f6e:	e000      	b.n	8003f72 <HAL_ADC_ConfigChannel+0x812>
 8003f70:	4a10      	ldr	r2, [pc, #64]	; (8003fb4 <HAL_ADC_ConfigChannel+0x854>)
 8003f72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	f7fe fb92 	bl	80026a6 <LL_ADC_SetCommonPathInternalCh>
 8003f82:	e00c      	b.n	8003f9e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f88:	f043 0220 	orr.w	r2, r3, #32
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003f96:	e002      	b.n	8003f9e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f98:	bf00      	nop
 8003f9a:	e000      	b.n	8003f9e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f9c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003fa6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	37d8      	adds	r7, #216	; 0xd8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	50000700 	.word	0x50000700
 8003fb8:	c3210000 	.word	0xc3210000
 8003fbc:	90c00010 	.word	0x90c00010
 8003fc0:	50000600 	.word	0x50000600
 8003fc4:	50000100 	.word	0x50000100
 8003fc8:	50000300 	.word	0x50000300
 8003fcc:	20000000 	.word	0x20000000
 8003fd0:	053e2d63 	.word	0x053e2d63
 8003fd4:	c7520000 	.word	0xc7520000
 8003fd8:	50000500 	.word	0x50000500
 8003fdc:	cb840000 	.word	0xcb840000

08003fe0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7fe fd51 	bl	8002a94 <LL_ADC_IsEnabled>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d14d      	bne.n	8004094 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689a      	ldr	r2, [r3, #8]
 8003ffe:	4b28      	ldr	r3, [pc, #160]	; (80040a0 <ADC_Enable+0xc0>)
 8004000:	4013      	ands	r3, r2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00d      	beq.n	8004022 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800400a:	f043 0210 	orr.w	r2, r3, #16
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004016:	f043 0201 	orr.w	r2, r3, #1
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e039      	b.n	8004096 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f7fe fd0c 	bl	8002a44 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800402c:	f7fe fb1c 	bl	8002668 <HAL_GetTick>
 8004030:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004032:	e028      	b.n	8004086 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4618      	mov	r0, r3
 800403a:	f7fe fd2b 	bl	8002a94 <LL_ADC_IsEnabled>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d104      	bne.n	800404e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4618      	mov	r0, r3
 800404a:	f7fe fcfb 	bl	8002a44 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800404e:	f7fe fb0b 	bl	8002668 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d914      	bls.n	8004086 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b01      	cmp	r3, #1
 8004068:	d00d      	beq.n	8004086 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406e:	f043 0210 	orr.w	r2, r3, #16
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800407a:	f043 0201 	orr.w	r2, r3, #1
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e007      	b.n	8004096 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b01      	cmp	r3, #1
 8004092:	d1cf      	bne.n	8004034 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	8000003f 	.word	0x8000003f

080040a4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fe fd02 	bl	8002aba <LL_ADC_IsDisableOngoing>
 80040b6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fe fce9 	bl	8002a94 <LL_ADC_IsEnabled>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d047      	beq.n	8004158 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d144      	bne.n	8004158 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f003 030d 	and.w	r3, r3, #13
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d10c      	bne.n	80040f6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7fe fcc3 	bl	8002a6c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2203      	movs	r2, #3
 80040ec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80040ee:	f7fe fabb 	bl	8002668 <HAL_GetTick>
 80040f2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040f4:	e029      	b.n	800414a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fa:	f043 0210 	orr.w	r2, r3, #16
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004106:	f043 0201 	orr.w	r2, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e023      	b.n	800415a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004112:	f7fe faa9 	bl	8002668 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d914      	bls.n	800414a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00d      	beq.n	800414a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004132:	f043 0210 	orr.w	r2, r3, #16
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800413e:	f043 0201 	orr.w	r2, r3, #1
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e007      	b.n	800415a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1dc      	bne.n	8004112 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b084      	sub	sp, #16
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004174:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004178:	2b00      	cmp	r3, #0
 800417a:	d14b      	bne.n	8004214 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004180:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0308 	and.w	r3, r3, #8
 8004192:	2b00      	cmp	r3, #0
 8004194:	d021      	beq.n	80041da <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4618      	mov	r0, r3
 800419c:	f7fe fb42 	bl	8002824 <LL_ADC_REG_IsTriggerSourceSWStart>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d032      	beq.n	800420c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d12b      	bne.n	800420c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d11f      	bne.n	800420c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d0:	f043 0201 	orr.w	r2, r3, #1
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80041d8:	e018      	b.n	800420c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d111      	bne.n	800420c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d105      	bne.n	800420c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004204:	f043 0201 	orr.w	r2, r3, #1
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f7fd fa17 	bl	8001640 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004212:	e00e      	b.n	8004232 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004218:	f003 0310 	and.w	r3, r3, #16
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f7ff fa93 	bl	800374c <HAL_ADC_ErrorCallback>
}
 8004226:	e004      	b.n	8004232 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	4798      	blx	r3
}
 8004232:	bf00      	nop
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b084      	sub	sp, #16
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004246:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f7ff fa6b 	bl	8003724 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800424e:	bf00      	nop
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b084      	sub	sp, #16
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004262:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004268:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004274:	f043 0204 	orr.w	r2, r3, #4
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f7ff fa65 	bl	800374c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004282:	bf00      	nop
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <LL_ADC_IsEnabled>:
{
 800428a:	b480      	push	{r7}
 800428c:	b083      	sub	sp, #12
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b01      	cmp	r3, #1
 800429c:	d101      	bne.n	80042a2 <LL_ADC_IsEnabled+0x18>
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <LL_ADC_IsEnabled+0x1a>
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <LL_ADC_StartCalibration>:
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80042c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	609a      	str	r2, [r3, #8]
}
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <LL_ADC_IsCalibrationOnGoing>:
{
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042f6:	d101      	bne.n	80042fc <LL_ADC_IsCalibrationOnGoing+0x1a>
 80042f8:	2301      	movs	r3, #1
 80042fa:	e000      	b.n	80042fe <LL_ADC_IsCalibrationOnGoing+0x1c>
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <LL_ADC_REG_IsConversionOngoing>:
{
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 0304 	and.w	r3, r3, #4
 800431a:	2b04      	cmp	r3, #4
 800431c:	d101      	bne.n	8004322 <LL_ADC_REG_IsConversionOngoing+0x18>
 800431e:	2301      	movs	r3, #1
 8004320:	e000      	b.n	8004324 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800433a:	2300      	movs	r3, #0
 800433c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004344:	2b01      	cmp	r3, #1
 8004346:	d101      	bne.n	800434c <HAL_ADCEx_Calibration_Start+0x1c>
 8004348:	2302      	movs	r3, #2
 800434a:	e04d      	b.n	80043e8 <HAL_ADCEx_Calibration_Start+0xb8>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f7ff fea5 	bl	80040a4 <ADC_Disable>
 800435a:	4603      	mov	r3, r0
 800435c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800435e:	7bfb      	ldrb	r3, [r7, #15]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d136      	bne.n	80043d2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004368:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800436c:	f023 0302 	bic.w	r3, r3, #2
 8004370:	f043 0202 	orr.w	r2, r3, #2
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6839      	ldr	r1, [r7, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f7ff ff96 	bl	80042b0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004384:	e014      	b.n	80043b0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	3301      	adds	r3, #1
 800438a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4a18      	ldr	r2, [pc, #96]	; (80043f0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d90d      	bls.n	80043b0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004398:	f023 0312 	bic.w	r3, r3, #18
 800439c:	f043 0210 	orr.w	r2, r3, #16
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e01b      	b.n	80043e8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7ff ff94 	bl	80042e2 <LL_ADC_IsCalibrationOnGoing>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1e2      	bne.n	8004386 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c4:	f023 0303 	bic.w	r3, r3, #3
 80043c8:	f043 0201 	orr.w	r2, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80043d0:	e005      	b.n	80043de <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d6:	f043 0210 	orr.w	r2, r3, #16
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	0004de01 	.word	0x0004de01

080043f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004458:	b590      	push	{r4, r7, lr}
 800445a:	b0a1      	sub	sp, #132	; 0x84
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800446e:	2b01      	cmp	r3, #1
 8004470:	d101      	bne.n	8004476 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004472:	2302      	movs	r3, #2
 8004474:	e0e7      	b.n	8004646 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800447e:	2300      	movs	r3, #0
 8004480:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004482:	2300      	movs	r3, #0
 8004484:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800448e:	d102      	bne.n	8004496 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004490:	4b6f      	ldr	r3, [pc, #444]	; (8004650 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004492:	60bb      	str	r3, [r7, #8]
 8004494:	e009      	b.n	80044aa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a6e      	ldr	r2, [pc, #440]	; (8004654 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d102      	bne.n	80044a6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80044a0:	4b6d      	ldr	r3, [pc, #436]	; (8004658 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80044a2:	60bb      	str	r3, [r7, #8]
 80044a4:	e001      	b.n	80044aa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80044a6:	2300      	movs	r3, #0
 80044a8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10b      	bne.n	80044c8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b4:	f043 0220 	orr.w	r2, r3, #32
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e0be      	b.n	8004646 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7ff ff1d 	bl	800430a <LL_ADC_REG_IsConversionOngoing>
 80044d0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff ff17 	bl	800430a <LL_ADC_REG_IsConversionOngoing>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f040 80a0 	bne.w	8004624 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80044e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f040 809c 	bne.w	8004624 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044f4:	d004      	beq.n	8004500 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a55      	ldr	r2, [pc, #340]	; (8004650 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d101      	bne.n	8004504 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004500:	4b56      	ldr	r3, [pc, #344]	; (800465c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004502:	e000      	b.n	8004506 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004504:	4b56      	ldr	r3, [pc, #344]	; (8004660 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004506:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d04b      	beq.n	80045a8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004510:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	6859      	ldr	r1, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004522:	035b      	lsls	r3, r3, #13
 8004524:	430b      	orrs	r3, r1
 8004526:	431a      	orrs	r2, r3
 8004528:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800452a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004534:	d004      	beq.n	8004540 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a45      	ldr	r2, [pc, #276]	; (8004650 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d10f      	bne.n	8004560 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004540:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004544:	f7ff fea1 	bl	800428a <LL_ADC_IsEnabled>
 8004548:	4604      	mov	r4, r0
 800454a:	4841      	ldr	r0, [pc, #260]	; (8004650 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800454c:	f7ff fe9d 	bl	800428a <LL_ADC_IsEnabled>
 8004550:	4603      	mov	r3, r0
 8004552:	4323      	orrs	r3, r4
 8004554:	2b00      	cmp	r3, #0
 8004556:	bf0c      	ite	eq
 8004558:	2301      	moveq	r3, #1
 800455a:	2300      	movne	r3, #0
 800455c:	b2db      	uxtb	r3, r3
 800455e:	e012      	b.n	8004586 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004560:	483c      	ldr	r0, [pc, #240]	; (8004654 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004562:	f7ff fe92 	bl	800428a <LL_ADC_IsEnabled>
 8004566:	4604      	mov	r4, r0
 8004568:	483b      	ldr	r0, [pc, #236]	; (8004658 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800456a:	f7ff fe8e 	bl	800428a <LL_ADC_IsEnabled>
 800456e:	4603      	mov	r3, r0
 8004570:	431c      	orrs	r4, r3
 8004572:	483c      	ldr	r0, [pc, #240]	; (8004664 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004574:	f7ff fe89 	bl	800428a <LL_ADC_IsEnabled>
 8004578:	4603      	mov	r3, r0
 800457a:	4323      	orrs	r3, r4
 800457c:	2b00      	cmp	r3, #0
 800457e:	bf0c      	ite	eq
 8004580:	2301      	moveq	r3, #1
 8004582:	2300      	movne	r3, #0
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d056      	beq.n	8004638 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800458a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004592:	f023 030f 	bic.w	r3, r3, #15
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	6811      	ldr	r1, [r2, #0]
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	6892      	ldr	r2, [r2, #8]
 800459e:	430a      	orrs	r2, r1
 80045a0:	431a      	orrs	r2, r3
 80045a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045a4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045a6:	e047      	b.n	8004638 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80045a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045b2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045bc:	d004      	beq.n	80045c8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a23      	ldr	r2, [pc, #140]	; (8004650 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d10f      	bne.n	80045e8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80045c8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80045cc:	f7ff fe5d 	bl	800428a <LL_ADC_IsEnabled>
 80045d0:	4604      	mov	r4, r0
 80045d2:	481f      	ldr	r0, [pc, #124]	; (8004650 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80045d4:	f7ff fe59 	bl	800428a <LL_ADC_IsEnabled>
 80045d8:	4603      	mov	r3, r0
 80045da:	4323      	orrs	r3, r4
 80045dc:	2b00      	cmp	r3, #0
 80045de:	bf0c      	ite	eq
 80045e0:	2301      	moveq	r3, #1
 80045e2:	2300      	movne	r3, #0
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	e012      	b.n	800460e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80045e8:	481a      	ldr	r0, [pc, #104]	; (8004654 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80045ea:	f7ff fe4e 	bl	800428a <LL_ADC_IsEnabled>
 80045ee:	4604      	mov	r4, r0
 80045f0:	4819      	ldr	r0, [pc, #100]	; (8004658 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80045f2:	f7ff fe4a 	bl	800428a <LL_ADC_IsEnabled>
 80045f6:	4603      	mov	r3, r0
 80045f8:	431c      	orrs	r4, r3
 80045fa:	481a      	ldr	r0, [pc, #104]	; (8004664 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80045fc:	f7ff fe45 	bl	800428a <LL_ADC_IsEnabled>
 8004600:	4603      	mov	r3, r0
 8004602:	4323      	orrs	r3, r4
 8004604:	2b00      	cmp	r3, #0
 8004606:	bf0c      	ite	eq
 8004608:	2301      	moveq	r3, #1
 800460a:	2300      	movne	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d012      	beq.n	8004638 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800461a:	f023 030f 	bic.w	r3, r3, #15
 800461e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004620:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004622:	e009      	b.n	8004638 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004628:	f043 0220 	orr.w	r2, r3, #32
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004636:	e000      	b.n	800463a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004638:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004642:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004646:	4618      	mov	r0, r3
 8004648:	3784      	adds	r7, #132	; 0x84
 800464a:	46bd      	mov	sp, r7
 800464c:	bd90      	pop	{r4, r7, pc}
 800464e:	bf00      	nop
 8004650:	50000100 	.word	0x50000100
 8004654:	50000400 	.word	0x50000400
 8004658:	50000500 	.word	0x50000500
 800465c:	50000300 	.word	0x50000300
 8004660:	50000700 	.word	0x50000700
 8004664:	50000600 	.word	0x50000600

08004668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004678:	4b0c      	ldr	r3, [pc, #48]	; (80046ac <__NVIC_SetPriorityGrouping+0x44>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004684:	4013      	ands	r3, r2
 8004686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800469a:	4a04      	ldr	r2, [pc, #16]	; (80046ac <__NVIC_SetPriorityGrouping+0x44>)
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	60d3      	str	r3, [r2, #12]
}
 80046a0:	bf00      	nop
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	e000ed00 	.word	0xe000ed00

080046b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046b4:	4b04      	ldr	r3, [pc, #16]	; (80046c8 <__NVIC_GetPriorityGrouping+0x18>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	0a1b      	lsrs	r3, r3, #8
 80046ba:	f003 0307 	and.w	r3, r3, #7
}
 80046be:	4618      	mov	r0, r3
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	e000ed00 	.word	0xe000ed00

080046cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	4603      	mov	r3, r0
 80046d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	db0b      	blt.n	80046f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046de:	79fb      	ldrb	r3, [r7, #7]
 80046e0:	f003 021f 	and.w	r2, r3, #31
 80046e4:	4907      	ldr	r1, [pc, #28]	; (8004704 <__NVIC_EnableIRQ+0x38>)
 80046e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	2001      	movs	r0, #1
 80046ee:	fa00 f202 	lsl.w	r2, r0, r2
 80046f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	e000e100 	.word	0xe000e100

08004708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	4603      	mov	r3, r0
 8004710:	6039      	str	r1, [r7, #0]
 8004712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004718:	2b00      	cmp	r3, #0
 800471a:	db0a      	blt.n	8004732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	b2da      	uxtb	r2, r3
 8004720:	490c      	ldr	r1, [pc, #48]	; (8004754 <__NVIC_SetPriority+0x4c>)
 8004722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004726:	0112      	lsls	r2, r2, #4
 8004728:	b2d2      	uxtb	r2, r2
 800472a:	440b      	add	r3, r1
 800472c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004730:	e00a      	b.n	8004748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	b2da      	uxtb	r2, r3
 8004736:	4908      	ldr	r1, [pc, #32]	; (8004758 <__NVIC_SetPriority+0x50>)
 8004738:	79fb      	ldrb	r3, [r7, #7]
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	3b04      	subs	r3, #4
 8004740:	0112      	lsls	r2, r2, #4
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	440b      	add	r3, r1
 8004746:	761a      	strb	r2, [r3, #24]
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	e000e100 	.word	0xe000e100
 8004758:	e000ed00 	.word	0xe000ed00

0800475c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800475c:	b480      	push	{r7}
 800475e:	b089      	sub	sp, #36	; 0x24
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	f1c3 0307 	rsb	r3, r3, #7
 8004776:	2b04      	cmp	r3, #4
 8004778:	bf28      	it	cs
 800477a:	2304      	movcs	r3, #4
 800477c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	3304      	adds	r3, #4
 8004782:	2b06      	cmp	r3, #6
 8004784:	d902      	bls.n	800478c <NVIC_EncodePriority+0x30>
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	3b03      	subs	r3, #3
 800478a:	e000      	b.n	800478e <NVIC_EncodePriority+0x32>
 800478c:	2300      	movs	r3, #0
 800478e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004790:	f04f 32ff 	mov.w	r2, #4294967295
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	43da      	mvns	r2, r3
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	401a      	ands	r2, r3
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047a4:	f04f 31ff 	mov.w	r1, #4294967295
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	fa01 f303 	lsl.w	r3, r1, r3
 80047ae:	43d9      	mvns	r1, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047b4:	4313      	orrs	r3, r2
         );
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3724      	adds	r7, #36	; 0x24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b082      	sub	sp, #8
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7ff ff4c 	bl	8004668 <__NVIC_SetPriorityGrouping>
}
 80047d0:	bf00      	nop
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	4603      	mov	r3, r0
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
 80047e4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80047e6:	f7ff ff63 	bl	80046b0 <__NVIC_GetPriorityGrouping>
 80047ea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	68b9      	ldr	r1, [r7, #8]
 80047f0:	6978      	ldr	r0, [r7, #20]
 80047f2:	f7ff ffb3 	bl	800475c <NVIC_EncodePriority>
 80047f6:	4602      	mov	r2, r0
 80047f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047fc:	4611      	mov	r1, r2
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff ff82 	bl	8004708 <__NVIC_SetPriority>
}
 8004804:	bf00      	nop
 8004806:	3718      	adds	r7, #24
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	4603      	mov	r3, r0
 8004814:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800481a:	4618      	mov	r0, r3
 800481c:	f7ff ff56 	bl	80046cc <__NVIC_EnableIRQ>
}
 8004820:	bf00      	nop
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e08d      	b.n	8004956 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	461a      	mov	r2, r3
 8004840:	4b47      	ldr	r3, [pc, #284]	; (8004960 <HAL_DMA_Init+0x138>)
 8004842:	429a      	cmp	r2, r3
 8004844:	d80f      	bhi.n	8004866 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	461a      	mov	r2, r3
 800484c:	4b45      	ldr	r3, [pc, #276]	; (8004964 <HAL_DMA_Init+0x13c>)
 800484e:	4413      	add	r3, r2
 8004850:	4a45      	ldr	r2, [pc, #276]	; (8004968 <HAL_DMA_Init+0x140>)
 8004852:	fba2 2303 	umull	r2, r3, r2, r3
 8004856:	091b      	lsrs	r3, r3, #4
 8004858:	009a      	lsls	r2, r3, #2
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a42      	ldr	r2, [pc, #264]	; (800496c <HAL_DMA_Init+0x144>)
 8004862:	641a      	str	r2, [r3, #64]	; 0x40
 8004864:	e00e      	b.n	8004884 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	461a      	mov	r2, r3
 800486c:	4b40      	ldr	r3, [pc, #256]	; (8004970 <HAL_DMA_Init+0x148>)
 800486e:	4413      	add	r3, r2
 8004870:	4a3d      	ldr	r2, [pc, #244]	; (8004968 <HAL_DMA_Init+0x140>)
 8004872:	fba2 2303 	umull	r2, r3, r2, r3
 8004876:	091b      	lsrs	r3, r3, #4
 8004878:	009a      	lsls	r2, r3, #2
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a3c      	ldr	r2, [pc, #240]	; (8004974 <HAL_DMA_Init+0x14c>)
 8004882:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800489a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800489e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80048a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 fa76 	bl	8004dc8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048e4:	d102      	bne.n	80048ec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f4:	b2d2      	uxtb	r2, r2
 80048f6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004900:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d010      	beq.n	800492c <HAL_DMA_Init+0x104>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2b04      	cmp	r3, #4
 8004910:	d80c      	bhi.n	800492c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 fa96 	bl	8004e44 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004928:	605a      	str	r2, [r3, #4]
 800492a:	e008      	b.n	800493e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	40020407 	.word	0x40020407
 8004964:	bffdfff8 	.word	0xbffdfff8
 8004968:	cccccccd 	.word	0xcccccccd
 800496c:	40020000 	.word	0x40020000
 8004970:	bffdfbf8 	.word	0xbffdfbf8
 8004974:	40020400 	.word	0x40020400

08004978 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004986:	2300      	movs	r3, #0
 8004988:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004990:	2b01      	cmp	r3, #1
 8004992:	d101      	bne.n	8004998 <HAL_DMA_Start_IT+0x20>
 8004994:	2302      	movs	r3, #2
 8004996:	e066      	b.n	8004a66 <HAL_DMA_Start_IT+0xee>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d155      	bne.n	8004a58 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0201 	bic.w	r2, r2, #1
 80049c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	68b9      	ldr	r1, [r7, #8]
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f000 f9bb 	bl	8004d4c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d008      	beq.n	80049f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f042 020e 	orr.w	r2, r2, #14
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	e00f      	b.n	8004a10 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 0204 	bic.w	r2, r2, #4
 80049fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 020a 	orr.w	r2, r2, #10
 8004a0e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d007      	beq.n	8004a2e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a2c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d007      	beq.n	8004a46 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a44:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f042 0201 	orr.w	r2, r2, #1
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	e005      	b.n	8004a64 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004a60:	2302      	movs	r3, #2
 8004a62:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3718      	adds	r7, #24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b085      	sub	sp, #20
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a76:	2300      	movs	r3, #0
 8004a78:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d005      	beq.n	8004a92 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2204      	movs	r2, #4
 8004a8a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	73fb      	strb	r3, [r7, #15]
 8004a90:	e037      	b.n	8004b02 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 020e 	bic.w	r2, r2, #14
 8004aa0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ab0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0201 	bic.w	r2, r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac6:	f003 021f 	and.w	r2, r3, #31
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	2101      	movs	r1, #1
 8004ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ad4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004ade:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00c      	beq.n	8004b02 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004af6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004b00:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d00d      	beq.n	8004b54 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2204      	movs	r2, #4
 8004b3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	73fb      	strb	r3, [r7, #15]
 8004b52:	e047      	b.n	8004be4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 020e 	bic.w	r2, r2, #14
 8004b62:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0201 	bic.w	r2, r2, #1
 8004b72:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b88:	f003 021f 	and.w	r2, r3, #31
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b90:	2101      	movs	r1, #1
 8004b92:	fa01 f202 	lsl.w	r2, r1, r2
 8004b96:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004ba0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00c      	beq.n	8004bc4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bb8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004bc2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	4798      	blx	r3
    }
  }
  return status;
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b084      	sub	sp, #16
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0a:	f003 031f 	and.w	r3, r3, #31
 8004c0e:	2204      	movs	r2, #4
 8004c10:	409a      	lsls	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4013      	ands	r3, r2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d026      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x7a>
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d021      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0320 	and.w	r3, r3, #32
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d107      	bne.n	8004c42 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 0204 	bic.w	r2, r2, #4
 8004c40:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c46:	f003 021f 	and.w	r2, r3, #31
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	2104      	movs	r1, #4
 8004c50:	fa01 f202 	lsl.w	r2, r1, r2
 8004c54:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d071      	beq.n	8004d42 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004c66:	e06c      	b.n	8004d42 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6c:	f003 031f 	and.w	r3, r3, #31
 8004c70:	2202      	movs	r2, #2
 8004c72:	409a      	lsls	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4013      	ands	r3, r2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d02e      	beq.n	8004cda <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d029      	beq.n	8004cda <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0320 	and.w	r3, r3, #32
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10b      	bne.n	8004cac <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 020a 	bic.w	r2, r2, #10
 8004ca2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb0:	f003 021f 	and.w	r2, r3, #31
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb8:	2102      	movs	r1, #2
 8004cba:	fa01 f202 	lsl.w	r2, r1, r2
 8004cbe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d038      	beq.n	8004d42 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004cd8:	e033      	b.n	8004d42 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cde:	f003 031f 	and.w	r3, r3, #31
 8004ce2:	2208      	movs	r2, #8
 8004ce4:	409a      	lsls	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d02a      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	f003 0308 	and.w	r3, r3, #8
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d025      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f022 020e 	bic.w	r2, r2, #14
 8004d06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0c:	f003 021f 	and.w	r2, r3, #31
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d14:	2101      	movs	r1, #1
 8004d16:	fa01 f202 	lsl.w	r2, r1, r2
 8004d1a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d004      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004d42:	bf00      	nop
 8004d44:	bf00      	nop
}
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
 8004d58:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004d62:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d004      	beq.n	8004d76 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004d74:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7a:	f003 021f 	and.w	r2, r3, #31
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	2101      	movs	r1, #1
 8004d84:	fa01 f202 	lsl.w	r2, r1, r2
 8004d88:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	2b10      	cmp	r3, #16
 8004d98:	d108      	bne.n	8004dac <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68ba      	ldr	r2, [r7, #8]
 8004da8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004daa:	e007      	b.n	8004dbc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	60da      	str	r2, [r3, #12]
}
 8004dbc:	bf00      	nop
 8004dbe:	3714      	adds	r7, #20
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	4b16      	ldr	r3, [pc, #88]	; (8004e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d802      	bhi.n	8004de2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004ddc:	4b15      	ldr	r3, [pc, #84]	; (8004e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	e001      	b.n	8004de6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004de2:	4b15      	ldr	r3, [pc, #84]	; (8004e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004de4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	3b08      	subs	r3, #8
 8004df2:	4a12      	ldr	r2, [pc, #72]	; (8004e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004df4:	fba2 2303 	umull	r2, r3, r2, r3
 8004df8:	091b      	lsrs	r3, r3, #4
 8004dfa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e00:	089b      	lsrs	r3, r3, #2
 8004e02:	009a      	lsls	r2, r3, #2
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	4413      	add	r3, r2
 8004e08:	461a      	mov	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a0b      	ldr	r2, [pc, #44]	; (8004e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004e12:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f003 031f 	and.w	r3, r3, #31
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	409a      	lsls	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e22:	bf00      	nop
 8004e24:	371c      	adds	r7, #28
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	40020407 	.word	0x40020407
 8004e34:	40020800 	.word	0x40020800
 8004e38:	40020820 	.word	0x40020820
 8004e3c:	cccccccd 	.word	0xcccccccd
 8004e40:	40020880 	.word	0x40020880

08004e44 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	4b0b      	ldr	r3, [pc, #44]	; (8004e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004e58:	4413      	add	r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a08      	ldr	r2, [pc, #32]	; (8004e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004e66:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	f003 031f 	and.w	r3, r3, #31
 8004e70:	2201      	movs	r2, #1
 8004e72:	409a      	lsls	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004e78:	bf00      	nop
 8004e7a:	3714      	adds	r7, #20
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	1000823f 	.word	0x1000823f
 8004e88:	40020940 	.word	0x40020940

08004e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b087      	sub	sp, #28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004e9a:	e15a      	b.n	8005152 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	2101      	movs	r1, #1
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f000 814c 	beq.w	800514c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f003 0303 	and.w	r3, r3, #3
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d005      	beq.n	8004ecc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d130      	bne.n	8004f2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	005b      	lsls	r3, r3, #1
 8004ed6:	2203      	movs	r2, #3
 8004ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8004edc:	43db      	mvns	r3, r3
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	68da      	ldr	r2, [r3, #12]
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f02:	2201      	movs	r2, #1
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0a:	43db      	mvns	r3, r3
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	091b      	lsrs	r3, r3, #4
 8004f18:	f003 0201 	and.w	r2, r3, #1
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f003 0303 	and.w	r3, r3, #3
 8004f36:	2b03      	cmp	r3, #3
 8004f38:	d017      	beq.n	8004f6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	2203      	movs	r2, #3
 8004f46:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4a:	43db      	mvns	r3, r3
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	689a      	ldr	r2, [r3, #8]
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f003 0303 	and.w	r3, r3, #3
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d123      	bne.n	8004fbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	08da      	lsrs	r2, r3, #3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	3208      	adds	r2, #8
 8004f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	220f      	movs	r2, #15
 8004f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f92:	43db      	mvns	r3, r3
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	4013      	ands	r3, r2
 8004f98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	691a      	ldr	r2, [r3, #16]
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f003 0307 	and.w	r3, r3, #7
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	08da      	lsrs	r2, r3, #3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3208      	adds	r2, #8
 8004fb8:	6939      	ldr	r1, [r7, #16]
 8004fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	2203      	movs	r2, #3
 8004fca:	fa02 f303 	lsl.w	r3, r2, r3
 8004fce:	43db      	mvns	r3, r3
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f003 0203 	and.w	r2, r3, #3
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 80a6 	beq.w	800514c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005000:	4b5b      	ldr	r3, [pc, #364]	; (8005170 <HAL_GPIO_Init+0x2e4>)
 8005002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005004:	4a5a      	ldr	r2, [pc, #360]	; (8005170 <HAL_GPIO_Init+0x2e4>)
 8005006:	f043 0301 	orr.w	r3, r3, #1
 800500a:	6613      	str	r3, [r2, #96]	; 0x60
 800500c:	4b58      	ldr	r3, [pc, #352]	; (8005170 <HAL_GPIO_Init+0x2e4>)
 800500e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	60bb      	str	r3, [r7, #8]
 8005016:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005018:	4a56      	ldr	r2, [pc, #344]	; (8005174 <HAL_GPIO_Init+0x2e8>)
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	089b      	lsrs	r3, r3, #2
 800501e:	3302      	adds	r3, #2
 8005020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005024:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f003 0303 	and.w	r3, r3, #3
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	220f      	movs	r2, #15
 8005030:	fa02 f303 	lsl.w	r3, r2, r3
 8005034:	43db      	mvns	r3, r3
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	4013      	ands	r3, r2
 800503a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005042:	d01f      	beq.n	8005084 <HAL_GPIO_Init+0x1f8>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a4c      	ldr	r2, [pc, #304]	; (8005178 <HAL_GPIO_Init+0x2ec>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d019      	beq.n	8005080 <HAL_GPIO_Init+0x1f4>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a4b      	ldr	r2, [pc, #300]	; (800517c <HAL_GPIO_Init+0x2f0>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d013      	beq.n	800507c <HAL_GPIO_Init+0x1f0>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a4a      	ldr	r2, [pc, #296]	; (8005180 <HAL_GPIO_Init+0x2f4>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d00d      	beq.n	8005078 <HAL_GPIO_Init+0x1ec>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a49      	ldr	r2, [pc, #292]	; (8005184 <HAL_GPIO_Init+0x2f8>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d007      	beq.n	8005074 <HAL_GPIO_Init+0x1e8>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a48      	ldr	r2, [pc, #288]	; (8005188 <HAL_GPIO_Init+0x2fc>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d101      	bne.n	8005070 <HAL_GPIO_Init+0x1e4>
 800506c:	2305      	movs	r3, #5
 800506e:	e00a      	b.n	8005086 <HAL_GPIO_Init+0x1fa>
 8005070:	2306      	movs	r3, #6
 8005072:	e008      	b.n	8005086 <HAL_GPIO_Init+0x1fa>
 8005074:	2304      	movs	r3, #4
 8005076:	e006      	b.n	8005086 <HAL_GPIO_Init+0x1fa>
 8005078:	2303      	movs	r3, #3
 800507a:	e004      	b.n	8005086 <HAL_GPIO_Init+0x1fa>
 800507c:	2302      	movs	r3, #2
 800507e:	e002      	b.n	8005086 <HAL_GPIO_Init+0x1fa>
 8005080:	2301      	movs	r3, #1
 8005082:	e000      	b.n	8005086 <HAL_GPIO_Init+0x1fa>
 8005084:	2300      	movs	r3, #0
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	f002 0203 	and.w	r2, r2, #3
 800508c:	0092      	lsls	r2, r2, #2
 800508e:	4093      	lsls	r3, r2
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	4313      	orrs	r3, r2
 8005094:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005096:	4937      	ldr	r1, [pc, #220]	; (8005174 <HAL_GPIO_Init+0x2e8>)
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	089b      	lsrs	r3, r3, #2
 800509c:	3302      	adds	r3, #2
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80050a4:	4b39      	ldr	r3, [pc, #228]	; (800518c <HAL_GPIO_Init+0x300>)
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	43db      	mvns	r3, r3
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	4013      	ands	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d003      	beq.n	80050c8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80050c8:	4a30      	ldr	r2, [pc, #192]	; (800518c <HAL_GPIO_Init+0x300>)
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80050ce:	4b2f      	ldr	r3, [pc, #188]	; (800518c <HAL_GPIO_Init+0x300>)
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	43db      	mvns	r3, r3
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	4013      	ands	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80050f2:	4a26      	ldr	r2, [pc, #152]	; (800518c <HAL_GPIO_Init+0x300>)
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80050f8:	4b24      	ldr	r3, [pc, #144]	; (800518c <HAL_GPIO_Init+0x300>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	43db      	mvns	r3, r3
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	4013      	ands	r3, r2
 8005106:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d003      	beq.n	800511c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	4313      	orrs	r3, r2
 800511a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800511c:	4a1b      	ldr	r2, [pc, #108]	; (800518c <HAL_GPIO_Init+0x300>)
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005122:	4b1a      	ldr	r3, [pc, #104]	; (800518c <HAL_GPIO_Init+0x300>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	43db      	mvns	r3, r3
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	4013      	ands	r3, r2
 8005130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4313      	orrs	r3, r2
 8005144:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005146:	4a11      	ldr	r2, [pc, #68]	; (800518c <HAL_GPIO_Init+0x300>)
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	3301      	adds	r3, #1
 8005150:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	fa22 f303 	lsr.w	r3, r2, r3
 800515c:	2b00      	cmp	r3, #0
 800515e:	f47f ae9d 	bne.w	8004e9c <HAL_GPIO_Init+0x10>
  }
}
 8005162:	bf00      	nop
 8005164:	bf00      	nop
 8005166:	371c      	adds	r7, #28
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr
 8005170:	40021000 	.word	0x40021000
 8005174:	40010000 	.word	0x40010000
 8005178:	48000400 	.word	0x48000400
 800517c:	48000800 	.word	0x48000800
 8005180:	48000c00 	.word	0x48000c00
 8005184:	48001000 	.word	0x48001000
 8005188:	48001400 	.word	0x48001400
 800518c:	40010400 	.word	0x40010400

08005190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	460b      	mov	r3, r1
 800519a:	807b      	strh	r3, [r7, #2]
 800519c:	4613      	mov	r3, r2
 800519e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051a0:	787b      	ldrb	r3, [r7, #1]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80051a6:	887a      	ldrh	r2, [r7, #2]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80051ac:	e002      	b.n	80051b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80051ae:	887a      	ldrh	r2, [r7, #2]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	4603      	mov	r3, r0
 80051c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80051ca:	4b08      	ldr	r3, [pc, #32]	; (80051ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051cc:	695a      	ldr	r2, [r3, #20]
 80051ce:	88fb      	ldrh	r3, [r7, #6]
 80051d0:	4013      	ands	r3, r2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d006      	beq.n	80051e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051d6:	4a05      	ldr	r2, [pc, #20]	; (80051ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051d8:	88fb      	ldrh	r3, [r7, #6]
 80051da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051dc:	88fb      	ldrh	r3, [r7, #6]
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 f806 	bl	80051f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80051e4:	bf00      	nop
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	40010400 	.word	0x40010400

080051f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	4603      	mov	r3, r0
 80051f8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80051fa:	bf00      	nop
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
	...

08005208 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d141      	bne.n	800529a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005216:	4b4b      	ldr	r3, [pc, #300]	; (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800521e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005222:	d131      	bne.n	8005288 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005224:	4b47      	ldr	r3, [pc, #284]	; (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800522a:	4a46      	ldr	r2, [pc, #280]	; (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800522c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005230:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005234:	4b43      	ldr	r3, [pc, #268]	; (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800523c:	4a41      	ldr	r2, [pc, #260]	; (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800523e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005242:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005244:	4b40      	ldr	r3, [pc, #256]	; (8005348 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2232      	movs	r2, #50	; 0x32
 800524a:	fb02 f303 	mul.w	r3, r2, r3
 800524e:	4a3f      	ldr	r2, [pc, #252]	; (800534c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005250:	fba2 2303 	umull	r2, r3, r2, r3
 8005254:	0c9b      	lsrs	r3, r3, #18
 8005256:	3301      	adds	r3, #1
 8005258:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800525a:	e002      	b.n	8005262 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	3b01      	subs	r3, #1
 8005260:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005262:	4b38      	ldr	r3, [pc, #224]	; (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800526a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800526e:	d102      	bne.n	8005276 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1f2      	bne.n	800525c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005276:	4b33      	ldr	r3, [pc, #204]	; (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800527e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005282:	d158      	bne.n	8005336 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e057      	b.n	8005338 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005288:	4b2e      	ldr	r3, [pc, #184]	; (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800528a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800528e:	4a2d      	ldr	r2, [pc, #180]	; (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005294:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005298:	e04d      	b.n	8005336 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052a0:	d141      	bne.n	8005326 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80052a2:	4b28      	ldr	r3, [pc, #160]	; (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80052aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ae:	d131      	bne.n	8005314 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052b0:	4b24      	ldr	r3, [pc, #144]	; (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052b6:	4a23      	ldr	r2, [pc, #140]	; (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80052c0:	4b20      	ldr	r3, [pc, #128]	; (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80052c8:	4a1e      	ldr	r2, [pc, #120]	; (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80052d0:	4b1d      	ldr	r3, [pc, #116]	; (8005348 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2232      	movs	r2, #50	; 0x32
 80052d6:	fb02 f303 	mul.w	r3, r2, r3
 80052da:	4a1c      	ldr	r2, [pc, #112]	; (800534c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80052dc:	fba2 2303 	umull	r2, r3, r2, r3
 80052e0:	0c9b      	lsrs	r3, r3, #18
 80052e2:	3301      	adds	r3, #1
 80052e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052e6:	e002      	b.n	80052ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	3b01      	subs	r3, #1
 80052ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052ee:	4b15      	ldr	r3, [pc, #84]	; (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052fa:	d102      	bne.n	8005302 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1f2      	bne.n	80052e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005302:	4b10      	ldr	r3, [pc, #64]	; (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800530a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800530e:	d112      	bne.n	8005336 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e011      	b.n	8005338 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005314:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800531a:	4a0a      	ldr	r2, [pc, #40]	; (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800531c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005320:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005324:	e007      	b.n	8005336 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005326:	4b07      	ldr	r3, [pc, #28]	; (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800532e:	4a05      	ldr	r2, [pc, #20]	; (8005344 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005330:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005334:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	40007000 	.word	0x40007000
 8005348:	20000000 	.word	0x20000000
 800534c:	431bde83 	.word	0x431bde83

08005350 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005350:	b480      	push	{r7}
 8005352:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005354:	4b05      	ldr	r3, [pc, #20]	; (800536c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	4a04      	ldr	r2, [pc, #16]	; (800536c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800535a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800535e:	6093      	str	r3, [r2, #8]
}
 8005360:	bf00      	nop
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	40007000 	.word	0x40007000

08005370 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b088      	sub	sp, #32
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e306      	b.n	8005990 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	d075      	beq.n	800547a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800538e:	4b97      	ldr	r3, [pc, #604]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f003 030c 	and.w	r3, r3, #12
 8005396:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005398:	4b94      	ldr	r3, [pc, #592]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f003 0303 	and.w	r3, r3, #3
 80053a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	2b0c      	cmp	r3, #12
 80053a6:	d102      	bne.n	80053ae <HAL_RCC_OscConfig+0x3e>
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	2b03      	cmp	r3, #3
 80053ac:	d002      	beq.n	80053b4 <HAL_RCC_OscConfig+0x44>
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	2b08      	cmp	r3, #8
 80053b2:	d10b      	bne.n	80053cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053b4:	4b8d      	ldr	r3, [pc, #564]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d05b      	beq.n	8005478 <HAL_RCC_OscConfig+0x108>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d157      	bne.n	8005478 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e2e1      	b.n	8005990 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053d4:	d106      	bne.n	80053e4 <HAL_RCC_OscConfig+0x74>
 80053d6:	4b85      	ldr	r3, [pc, #532]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a84      	ldr	r2, [pc, #528]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 80053dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e0:	6013      	str	r3, [r2, #0]
 80053e2:	e01d      	b.n	8005420 <HAL_RCC_OscConfig+0xb0>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053ec:	d10c      	bne.n	8005408 <HAL_RCC_OscConfig+0x98>
 80053ee:	4b7f      	ldr	r3, [pc, #508]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a7e      	ldr	r2, [pc, #504]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 80053f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053f8:	6013      	str	r3, [r2, #0]
 80053fa:	4b7c      	ldr	r3, [pc, #496]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a7b      	ldr	r2, [pc, #492]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 8005400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005404:	6013      	str	r3, [r2, #0]
 8005406:	e00b      	b.n	8005420 <HAL_RCC_OscConfig+0xb0>
 8005408:	4b78      	ldr	r3, [pc, #480]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a77      	ldr	r2, [pc, #476]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 800540e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005412:	6013      	str	r3, [r2, #0]
 8005414:	4b75      	ldr	r3, [pc, #468]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a74      	ldr	r2, [pc, #464]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 800541a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800541e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d013      	beq.n	8005450 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005428:	f7fd f91e 	bl	8002668 <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005430:	f7fd f91a 	bl	8002668 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b64      	cmp	r3, #100	; 0x64
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e2a6      	b.n	8005990 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005442:	4b6a      	ldr	r3, [pc, #424]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d0f0      	beq.n	8005430 <HAL_RCC_OscConfig+0xc0>
 800544e:	e014      	b.n	800547a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005450:	f7fd f90a 	bl	8002668 <HAL_GetTick>
 8005454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005456:	e008      	b.n	800546a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005458:	f7fd f906 	bl	8002668 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b64      	cmp	r3, #100	; 0x64
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e292      	b.n	8005990 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800546a:	4b60      	ldr	r3, [pc, #384]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1f0      	bne.n	8005458 <HAL_RCC_OscConfig+0xe8>
 8005476:	e000      	b.n	800547a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d075      	beq.n	8005572 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005486:	4b59      	ldr	r3, [pc, #356]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 030c 	and.w	r3, r3, #12
 800548e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005490:	4b56      	ldr	r3, [pc, #344]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f003 0303 	and.w	r3, r3, #3
 8005498:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	2b0c      	cmp	r3, #12
 800549e:	d102      	bne.n	80054a6 <HAL_RCC_OscConfig+0x136>
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d002      	beq.n	80054ac <HAL_RCC_OscConfig+0x13c>
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	2b04      	cmp	r3, #4
 80054aa:	d11f      	bne.n	80054ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054ac:	4b4f      	ldr	r3, [pc, #316]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d005      	beq.n	80054c4 <HAL_RCC_OscConfig+0x154>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e265      	b.n	8005990 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054c4:	4b49      	ldr	r3, [pc, #292]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	061b      	lsls	r3, r3, #24
 80054d2:	4946      	ldr	r1, [pc, #280]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80054d8:	4b45      	ldr	r3, [pc, #276]	; (80055f0 <HAL_RCC_OscConfig+0x280>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4618      	mov	r0, r3
 80054de:	f7fc f93d 	bl	800175c <HAL_InitTick>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d043      	beq.n	8005570 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e251      	b.n	8005990 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d023      	beq.n	800553c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054f4:	4b3d      	ldr	r3, [pc, #244]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a3c      	ldr	r2, [pc, #240]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 80054fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005500:	f7fd f8b2 	bl	8002668 <HAL_GetTick>
 8005504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005506:	e008      	b.n	800551a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005508:	f7fd f8ae 	bl	8002668 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d901      	bls.n	800551a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e23a      	b.n	8005990 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800551a:	4b34      	ldr	r3, [pc, #208]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005522:	2b00      	cmp	r3, #0
 8005524:	d0f0      	beq.n	8005508 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005526:	4b31      	ldr	r3, [pc, #196]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	061b      	lsls	r3, r3, #24
 8005534:	492d      	ldr	r1, [pc, #180]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 8005536:	4313      	orrs	r3, r2
 8005538:	604b      	str	r3, [r1, #4]
 800553a:	e01a      	b.n	8005572 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800553c:	4b2b      	ldr	r3, [pc, #172]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a2a      	ldr	r2, [pc, #168]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 8005542:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005548:	f7fd f88e 	bl	8002668 <HAL_GetTick>
 800554c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800554e:	e008      	b.n	8005562 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005550:	f7fd f88a 	bl	8002668 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b02      	cmp	r3, #2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e216      	b.n	8005990 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005562:	4b22      	ldr	r3, [pc, #136]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1f0      	bne.n	8005550 <HAL_RCC_OscConfig+0x1e0>
 800556e:	e000      	b.n	8005572 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005570:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0308 	and.w	r3, r3, #8
 800557a:	2b00      	cmp	r3, #0
 800557c:	d041      	beq.n	8005602 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d01c      	beq.n	80055c0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005586:	4b19      	ldr	r3, [pc, #100]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 8005588:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800558c:	4a17      	ldr	r2, [pc, #92]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 800558e:	f043 0301 	orr.w	r3, r3, #1
 8005592:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005596:	f7fd f867 	bl	8002668 <HAL_GetTick>
 800559a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800559c:	e008      	b.n	80055b0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800559e:	f7fd f863 	bl	8002668 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d901      	bls.n	80055b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e1ef      	b.n	8005990 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055b0:	4b0e      	ldr	r3, [pc, #56]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 80055b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d0ef      	beq.n	800559e <HAL_RCC_OscConfig+0x22e>
 80055be:	e020      	b.n	8005602 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055c0:	4b0a      	ldr	r3, [pc, #40]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 80055c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055c6:	4a09      	ldr	r2, [pc, #36]	; (80055ec <HAL_RCC_OscConfig+0x27c>)
 80055c8:	f023 0301 	bic.w	r3, r3, #1
 80055cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d0:	f7fd f84a 	bl	8002668 <HAL_GetTick>
 80055d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055d6:	e00d      	b.n	80055f4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055d8:	f7fd f846 	bl	8002668 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d906      	bls.n	80055f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e1d2      	b.n	8005990 <HAL_RCC_OscConfig+0x620>
 80055ea:	bf00      	nop
 80055ec:	40021000 	.word	0x40021000
 80055f0:	200000c0 	.word	0x200000c0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055f4:	4b8c      	ldr	r3, [pc, #560]	; (8005828 <HAL_RCC_OscConfig+0x4b8>)
 80055f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1ea      	bne.n	80055d8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0304 	and.w	r3, r3, #4
 800560a:	2b00      	cmp	r3, #0
 800560c:	f000 80a6 	beq.w	800575c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005610:	2300      	movs	r3, #0
 8005612:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005614:	4b84      	ldr	r3, [pc, #528]	; (8005828 <HAL_RCC_OscConfig+0x4b8>)
 8005616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <HAL_RCC_OscConfig+0x2b4>
 8005620:	2301      	movs	r3, #1
 8005622:	e000      	b.n	8005626 <HAL_RCC_OscConfig+0x2b6>
 8005624:	2300      	movs	r3, #0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00d      	beq.n	8005646 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800562a:	4b7f      	ldr	r3, [pc, #508]	; (8005828 <HAL_RCC_OscConfig+0x4b8>)
 800562c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800562e:	4a7e      	ldr	r2, [pc, #504]	; (8005828 <HAL_RCC_OscConfig+0x4b8>)
 8005630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005634:	6593      	str	r3, [r2, #88]	; 0x58
 8005636:	4b7c      	ldr	r3, [pc, #496]	; (8005828 <HAL_RCC_OscConfig+0x4b8>)
 8005638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800563a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005642:	2301      	movs	r3, #1
 8005644:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005646:	4b79      	ldr	r3, [pc, #484]	; (800582c <HAL_RCC_OscConfig+0x4bc>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800564e:	2b00      	cmp	r3, #0
 8005650:	d118      	bne.n	8005684 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005652:	4b76      	ldr	r3, [pc, #472]	; (800582c <HAL_RCC_OscConfig+0x4bc>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a75      	ldr	r2, [pc, #468]	; (800582c <HAL_RCC_OscConfig+0x4bc>)
 8005658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800565c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800565e:	f7fd f803 	bl	8002668 <HAL_GetTick>
 8005662:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005664:	e008      	b.n	8005678 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005666:	f7fc ffff 	bl	8002668 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d901      	bls.n	8005678 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e18b      	b.n	8005990 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005678:	4b6c      	ldr	r3, [pc, #432]	; (800582c <HAL_RCC_OscConfig+0x4bc>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005680:	2b00      	cmp	r3, #0
 8005682:	d0f0      	beq.n	8005666 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d108      	bne.n	800569e <HAL_RCC_OscConfig+0x32e>
 800568c:	4b66      	ldr	r3, [pc, #408]	; (8005828 <HAL_RCC_OscConfig+0x4b8>)
 800568e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005692:	4a65      	ldr	r2, [pc, #404]	; (8005828 <HAL_RCC_OscConfig+0x4b8>)
 8005694:	f043 0301 	orr.w	r3, r3, #1
 8005698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800569c:	e024      	b.n	80056e8 <HAL_RCC_OscConfig+0x378>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	2b05      	cmp	r3, #5
 80056a4:	d110      	bne.n	80056c8 <HAL_RCC_OscConfig+0x358>
 80056a6:	4b60      	ldr	r3, [pc, #384]	; (8005828 <HAL_RCC_OscConfig+0x4b8>)
 80056a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ac:	4a5e      	ldr	r2, [pc, #376]	; (8005828 <HAL_RCC_OscConfig+0x4b8>)
 80056ae:	f043 0304 	orr.w	r3, r3, #4
 80056b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056b6:	4b5c      	ldr	r3, [pc, #368]	; (8005828 <HAL_RCC_OscConfig+0x4b8>)
 80056b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056bc:	4a5a      	ldr	r2, [pc, #360]	; (8005828 <HAL_RCC_OscConfig+0x4b8>)
 80056be:	f043 0301 	orr.w	r3, r3, #1
 80056c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056c6:	e00f      	b.n	80056e8 <HAL_RCC_OscConfig+0x378>
 80056c8:	4b57      	ldr	r3, [pc, #348]	; (8005828 <HAL_RCC_OscConfig+0x4b8>)
 80056ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ce:	4a56      	ldr	r2, [pc, #344]	; (8005828 <HAL_RCC_OscConfig+0x4b8>)
 80056d0:	f023 0301 	bic.w	r3, r3, #1
 80056d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056d8:	4b53      	ldr	r3, [pc, #332]	; (8005828 <HAL_RCC_OscConfig+0x4b8>)
 80056da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056de:	4a52      	ldr	r2, [pc, #328]	; (8005828 <HAL_RCC_OscConfig+0x4b8>)
 80056e0:	f023 0304 	bic.w	r3, r3, #4
 80056e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d016      	beq.n	800571e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056f0:	f7fc ffba 	bl	8002668 <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056f6:	e00a      	b.n	800570e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056f8:	f7fc ffb6 	bl	8002668 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	f241 3288 	movw	r2, #5000	; 0x1388
 8005706:	4293      	cmp	r3, r2
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e140      	b.n	8005990 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800570e:	4b46      	ldr	r3, [pc, #280]	; (8005828 <HAL_RCC_OscConfig+0x4b8>)
 8005710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b00      	cmp	r3, #0
 800571a:	d0ed      	beq.n	80056f8 <HAL_RCC_OscConfig+0x388>
 800571c:	e015      	b.n	800574a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800571e:	f7fc ffa3 	bl	8002668 <HAL_GetTick>
 8005722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005724:	e00a      	b.n	800573c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005726:	f7fc ff9f 	bl	8002668 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	f241 3288 	movw	r2, #5000	; 0x1388
 8005734:	4293      	cmp	r3, r2
 8005736:	d901      	bls.n	800573c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e129      	b.n	8005990 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800573c:	4b3a      	ldr	r3, [pc, #232]	; (8005828 <HAL_RCC_OscConfig+0x4b8>)
 800573e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005742:	f003 0302 	and.w	r3, r3, #2
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1ed      	bne.n	8005726 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800574a:	7ffb      	ldrb	r3, [r7, #31]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d105      	bne.n	800575c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005750:	4b35      	ldr	r3, [pc, #212]	; (8005828 <HAL_RCC_OscConfig+0x4b8>)
 8005752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005754:	4a34      	ldr	r2, [pc, #208]	; (8005828 <HAL_RCC_OscConfig+0x4b8>)
 8005756:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800575a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0320 	and.w	r3, r3, #32
 8005764:	2b00      	cmp	r3, #0
 8005766:	d03c      	beq.n	80057e2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d01c      	beq.n	80057aa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005770:	4b2d      	ldr	r3, [pc, #180]	; (8005828 <HAL_RCC_OscConfig+0x4b8>)
 8005772:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005776:	4a2c      	ldr	r2, [pc, #176]	; (8005828 <HAL_RCC_OscConfig+0x4b8>)
 8005778:	f043 0301 	orr.w	r3, r3, #1
 800577c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005780:	f7fc ff72 	bl	8002668 <HAL_GetTick>
 8005784:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005786:	e008      	b.n	800579a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005788:	f7fc ff6e 	bl	8002668 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b02      	cmp	r3, #2
 8005794:	d901      	bls.n	800579a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e0fa      	b.n	8005990 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800579a:	4b23      	ldr	r3, [pc, #140]	; (8005828 <HAL_RCC_OscConfig+0x4b8>)
 800579c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057a0:	f003 0302 	and.w	r3, r3, #2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d0ef      	beq.n	8005788 <HAL_RCC_OscConfig+0x418>
 80057a8:	e01b      	b.n	80057e2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057aa:	4b1f      	ldr	r3, [pc, #124]	; (8005828 <HAL_RCC_OscConfig+0x4b8>)
 80057ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057b0:	4a1d      	ldr	r2, [pc, #116]	; (8005828 <HAL_RCC_OscConfig+0x4b8>)
 80057b2:	f023 0301 	bic.w	r3, r3, #1
 80057b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ba:	f7fc ff55 	bl	8002668 <HAL_GetTick>
 80057be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057c0:	e008      	b.n	80057d4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057c2:	f7fc ff51 	bl	8002668 <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d901      	bls.n	80057d4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e0dd      	b.n	8005990 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057d4:	4b14      	ldr	r3, [pc, #80]	; (8005828 <HAL_RCC_OscConfig+0x4b8>)
 80057d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1ef      	bne.n	80057c2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f000 80d1 	beq.w	800598e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057ec:	4b0e      	ldr	r3, [pc, #56]	; (8005828 <HAL_RCC_OscConfig+0x4b8>)
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f003 030c 	and.w	r3, r3, #12
 80057f4:	2b0c      	cmp	r3, #12
 80057f6:	f000 808b 	beq.w	8005910 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d15e      	bne.n	80058c0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005802:	4b09      	ldr	r3, [pc, #36]	; (8005828 <HAL_RCC_OscConfig+0x4b8>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a08      	ldr	r2, [pc, #32]	; (8005828 <HAL_RCC_OscConfig+0x4b8>)
 8005808:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800580c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800580e:	f7fc ff2b 	bl	8002668 <HAL_GetTick>
 8005812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005814:	e00c      	b.n	8005830 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005816:	f7fc ff27 	bl	8002668 <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	2b02      	cmp	r3, #2
 8005822:	d905      	bls.n	8005830 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e0b3      	b.n	8005990 <HAL_RCC_OscConfig+0x620>
 8005828:	40021000 	.word	0x40021000
 800582c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005830:	4b59      	ldr	r3, [pc, #356]	; (8005998 <HAL_RCC_OscConfig+0x628>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1ec      	bne.n	8005816 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800583c:	4b56      	ldr	r3, [pc, #344]	; (8005998 <HAL_RCC_OscConfig+0x628>)
 800583e:	68da      	ldr	r2, [r3, #12]
 8005840:	4b56      	ldr	r3, [pc, #344]	; (800599c <HAL_RCC_OscConfig+0x62c>)
 8005842:	4013      	ands	r3, r2
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	6a11      	ldr	r1, [r2, #32]
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800584c:	3a01      	subs	r2, #1
 800584e:	0112      	lsls	r2, r2, #4
 8005850:	4311      	orrs	r1, r2
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005856:	0212      	lsls	r2, r2, #8
 8005858:	4311      	orrs	r1, r2
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800585e:	0852      	lsrs	r2, r2, #1
 8005860:	3a01      	subs	r2, #1
 8005862:	0552      	lsls	r2, r2, #21
 8005864:	4311      	orrs	r1, r2
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800586a:	0852      	lsrs	r2, r2, #1
 800586c:	3a01      	subs	r2, #1
 800586e:	0652      	lsls	r2, r2, #25
 8005870:	4311      	orrs	r1, r2
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005876:	06d2      	lsls	r2, r2, #27
 8005878:	430a      	orrs	r2, r1
 800587a:	4947      	ldr	r1, [pc, #284]	; (8005998 <HAL_RCC_OscConfig+0x628>)
 800587c:	4313      	orrs	r3, r2
 800587e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005880:	4b45      	ldr	r3, [pc, #276]	; (8005998 <HAL_RCC_OscConfig+0x628>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a44      	ldr	r2, [pc, #272]	; (8005998 <HAL_RCC_OscConfig+0x628>)
 8005886:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800588a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800588c:	4b42      	ldr	r3, [pc, #264]	; (8005998 <HAL_RCC_OscConfig+0x628>)
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	4a41      	ldr	r2, [pc, #260]	; (8005998 <HAL_RCC_OscConfig+0x628>)
 8005892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005896:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005898:	f7fc fee6 	bl	8002668 <HAL_GetTick>
 800589c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800589e:	e008      	b.n	80058b2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058a0:	f7fc fee2 	bl	8002668 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e06e      	b.n	8005990 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058b2:	4b39      	ldr	r3, [pc, #228]	; (8005998 <HAL_RCC_OscConfig+0x628>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d0f0      	beq.n	80058a0 <HAL_RCC_OscConfig+0x530>
 80058be:	e066      	b.n	800598e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058c0:	4b35      	ldr	r3, [pc, #212]	; (8005998 <HAL_RCC_OscConfig+0x628>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a34      	ldr	r2, [pc, #208]	; (8005998 <HAL_RCC_OscConfig+0x628>)
 80058c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058ca:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80058cc:	4b32      	ldr	r3, [pc, #200]	; (8005998 <HAL_RCC_OscConfig+0x628>)
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	4a31      	ldr	r2, [pc, #196]	; (8005998 <HAL_RCC_OscConfig+0x628>)
 80058d2:	f023 0303 	bic.w	r3, r3, #3
 80058d6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80058d8:	4b2f      	ldr	r3, [pc, #188]	; (8005998 <HAL_RCC_OscConfig+0x628>)
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	4a2e      	ldr	r2, [pc, #184]	; (8005998 <HAL_RCC_OscConfig+0x628>)
 80058de:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80058e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e8:	f7fc febe 	bl	8002668 <HAL_GetTick>
 80058ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058ee:	e008      	b.n	8005902 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058f0:	f7fc feba 	bl	8002668 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e046      	b.n	8005990 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005902:	4b25      	ldr	r3, [pc, #148]	; (8005998 <HAL_RCC_OscConfig+0x628>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1f0      	bne.n	80058f0 <HAL_RCC_OscConfig+0x580>
 800590e:	e03e      	b.n	800598e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	69db      	ldr	r3, [r3, #28]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d101      	bne.n	800591c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e039      	b.n	8005990 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800591c:	4b1e      	ldr	r3, [pc, #120]	; (8005998 <HAL_RCC_OscConfig+0x628>)
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f003 0203 	and.w	r2, r3, #3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a1b      	ldr	r3, [r3, #32]
 800592c:	429a      	cmp	r2, r3
 800592e:	d12c      	bne.n	800598a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593a:	3b01      	subs	r3, #1
 800593c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800593e:	429a      	cmp	r2, r3
 8005940:	d123      	bne.n	800598a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800594e:	429a      	cmp	r2, r3
 8005950:	d11b      	bne.n	800598a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800595e:	429a      	cmp	r2, r3
 8005960:	d113      	bne.n	800598a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596c:	085b      	lsrs	r3, r3, #1
 800596e:	3b01      	subs	r3, #1
 8005970:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005972:	429a      	cmp	r2, r3
 8005974:	d109      	bne.n	800598a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005980:	085b      	lsrs	r3, r3, #1
 8005982:	3b01      	subs	r3, #1
 8005984:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005986:	429a      	cmp	r2, r3
 8005988:	d001      	beq.n	800598e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e000      	b.n	8005990 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3720      	adds	r7, #32
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	40021000 	.word	0x40021000
 800599c:	019f800c 	.word	0x019f800c

080059a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80059aa:	2300      	movs	r3, #0
 80059ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e11e      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059b8:	4b91      	ldr	r3, [pc, #580]	; (8005c00 <HAL_RCC_ClockConfig+0x260>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 030f 	and.w	r3, r3, #15
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d910      	bls.n	80059e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059c6:	4b8e      	ldr	r3, [pc, #568]	; (8005c00 <HAL_RCC_ClockConfig+0x260>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f023 020f 	bic.w	r2, r3, #15
 80059ce:	498c      	ldr	r1, [pc, #560]	; (8005c00 <HAL_RCC_ClockConfig+0x260>)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059d6:	4b8a      	ldr	r3, [pc, #552]	; (8005c00 <HAL_RCC_ClockConfig+0x260>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 030f 	and.w	r3, r3, #15
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d001      	beq.n	80059e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e106      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d073      	beq.n	8005adc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	2b03      	cmp	r3, #3
 80059fa:	d129      	bne.n	8005a50 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059fc:	4b81      	ldr	r3, [pc, #516]	; (8005c04 <HAL_RCC_ClockConfig+0x264>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d101      	bne.n	8005a0c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e0f4      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005a0c:	f000 f9d0 	bl	8005db0 <RCC_GetSysClockFreqFromPLLSource>
 8005a10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	4a7c      	ldr	r2, [pc, #496]	; (8005c08 <HAL_RCC_ClockConfig+0x268>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d93f      	bls.n	8005a9a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a1a:	4b7a      	ldr	r3, [pc, #488]	; (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d009      	beq.n	8005a3a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d033      	beq.n	8005a9a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d12f      	bne.n	8005a9a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a3a:	4b72      	ldr	r3, [pc, #456]	; (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a42:	4a70      	ldr	r2, [pc, #448]	; (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005a4a:	2380      	movs	r3, #128	; 0x80
 8005a4c:	617b      	str	r3, [r7, #20]
 8005a4e:	e024      	b.n	8005a9a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d107      	bne.n	8005a68 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a58:	4b6a      	ldr	r3, [pc, #424]	; (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d109      	bne.n	8005a78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e0c6      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a68:	4b66      	ldr	r3, [pc, #408]	; (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d101      	bne.n	8005a78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e0be      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005a78:	f000 f8ce 	bl	8005c18 <HAL_RCC_GetSysClockFreq>
 8005a7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	4a61      	ldr	r2, [pc, #388]	; (8005c08 <HAL_RCC_ClockConfig+0x268>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d909      	bls.n	8005a9a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a86:	4b5f      	ldr	r3, [pc, #380]	; (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a8e:	4a5d      	ldr	r2, [pc, #372]	; (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a94:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005a96:	2380      	movs	r3, #128	; 0x80
 8005a98:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a9a:	4b5a      	ldr	r3, [pc, #360]	; (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f023 0203 	bic.w	r2, r3, #3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	4957      	ldr	r1, [pc, #348]	; (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aac:	f7fc fddc 	bl	8002668 <HAL_GetTick>
 8005ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ab2:	e00a      	b.n	8005aca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ab4:	f7fc fdd8 	bl	8002668 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d901      	bls.n	8005aca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e095      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aca:	4b4e      	ldr	r3, [pc, #312]	; (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f003 020c 	and.w	r2, r3, #12
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d1eb      	bne.n	8005ab4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d023      	beq.n	8005b30 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0304 	and.w	r3, r3, #4
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d005      	beq.n	8005b00 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005af4:	4b43      	ldr	r3, [pc, #268]	; (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	4a42      	ldr	r2, [pc, #264]	; (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005afa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005afe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0308 	and.w	r3, r3, #8
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d007      	beq.n	8005b1c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005b0c:	4b3d      	ldr	r3, [pc, #244]	; (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005b14:	4a3b      	ldr	r2, [pc, #236]	; (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005b16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005b1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b1c:	4b39      	ldr	r3, [pc, #228]	; (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	4936      	ldr	r1, [pc, #216]	; (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	608b      	str	r3, [r1, #8]
 8005b2e:	e008      	b.n	8005b42 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	2b80      	cmp	r3, #128	; 0x80
 8005b34:	d105      	bne.n	8005b42 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005b36:	4b33      	ldr	r3, [pc, #204]	; (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	4a32      	ldr	r2, [pc, #200]	; (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005b3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b40:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b42:	4b2f      	ldr	r3, [pc, #188]	; (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 030f 	and.w	r3, r3, #15
 8005b4a:	683a      	ldr	r2, [r7, #0]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d21d      	bcs.n	8005b8c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b50:	4b2b      	ldr	r3, [pc, #172]	; (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f023 020f 	bic.w	r2, r3, #15
 8005b58:	4929      	ldr	r1, [pc, #164]	; (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b60:	f7fc fd82 	bl	8002668 <HAL_GetTick>
 8005b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b66:	e00a      	b.n	8005b7e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b68:	f7fc fd7e 	bl	8002668 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e03b      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b7e:	4b20      	ldr	r3, [pc, #128]	; (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 030f 	and.w	r3, r3, #15
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d1ed      	bne.n	8005b68 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0304 	and.w	r3, r3, #4
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d008      	beq.n	8005baa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b98:	4b1a      	ldr	r3, [pc, #104]	; (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	4917      	ldr	r1, [pc, #92]	; (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0308 	and.w	r3, r3, #8
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d009      	beq.n	8005bca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bb6:	4b13      	ldr	r3, [pc, #76]	; (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	490f      	ldr	r1, [pc, #60]	; (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005bca:	f000 f825 	bl	8005c18 <HAL_RCC_GetSysClockFreq>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	4b0c      	ldr	r3, [pc, #48]	; (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	091b      	lsrs	r3, r3, #4
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	490c      	ldr	r1, [pc, #48]	; (8005c0c <HAL_RCC_ClockConfig+0x26c>)
 8005bdc:	5ccb      	ldrb	r3, [r1, r3]
 8005bde:	f003 031f 	and.w	r3, r3, #31
 8005be2:	fa22 f303 	lsr.w	r3, r2, r3
 8005be6:	4a0a      	ldr	r2, [pc, #40]	; (8005c10 <HAL_RCC_ClockConfig+0x270>)
 8005be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005bea:	4b0a      	ldr	r3, [pc, #40]	; (8005c14 <HAL_RCC_ClockConfig+0x274>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fb fdb4 	bl	800175c <HAL_InitTick>
 8005bf4:	4603      	mov	r3, r0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	40022000 	.word	0x40022000
 8005c04:	40021000 	.word	0x40021000
 8005c08:	04c4b400 	.word	0x04c4b400
 8005c0c:	0800ce94 	.word	0x0800ce94
 8005c10:	20000000 	.word	0x20000000
 8005c14:	200000c0 	.word	0x200000c0

08005c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005c1e:	4b2c      	ldr	r3, [pc, #176]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f003 030c 	and.w	r3, r3, #12
 8005c26:	2b04      	cmp	r3, #4
 8005c28:	d102      	bne.n	8005c30 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c2a:	4b2a      	ldr	r3, [pc, #168]	; (8005cd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c2c:	613b      	str	r3, [r7, #16]
 8005c2e:	e047      	b.n	8005cc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005c30:	4b27      	ldr	r3, [pc, #156]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f003 030c 	and.w	r3, r3, #12
 8005c38:	2b08      	cmp	r3, #8
 8005c3a:	d102      	bne.n	8005c42 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c3c:	4b26      	ldr	r3, [pc, #152]	; (8005cd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c3e:	613b      	str	r3, [r7, #16]
 8005c40:	e03e      	b.n	8005cc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005c42:	4b23      	ldr	r3, [pc, #140]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f003 030c 	and.w	r3, r3, #12
 8005c4a:	2b0c      	cmp	r3, #12
 8005c4c:	d136      	bne.n	8005cbc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c4e:	4b20      	ldr	r3, [pc, #128]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f003 0303 	and.w	r3, r3, #3
 8005c56:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c58:	4b1d      	ldr	r3, [pc, #116]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	091b      	lsrs	r3, r3, #4
 8005c5e:	f003 030f 	and.w	r3, r3, #15
 8005c62:	3301      	adds	r3, #1
 8005c64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2b03      	cmp	r3, #3
 8005c6a:	d10c      	bne.n	8005c86 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c6c:	4a1a      	ldr	r2, [pc, #104]	; (8005cd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c74:	4a16      	ldr	r2, [pc, #88]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c76:	68d2      	ldr	r2, [r2, #12]
 8005c78:	0a12      	lsrs	r2, r2, #8
 8005c7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c7e:	fb02 f303 	mul.w	r3, r2, r3
 8005c82:	617b      	str	r3, [r7, #20]
      break;
 8005c84:	e00c      	b.n	8005ca0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c86:	4a13      	ldr	r2, [pc, #76]	; (8005cd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c8e:	4a10      	ldr	r2, [pc, #64]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c90:	68d2      	ldr	r2, [r2, #12]
 8005c92:	0a12      	lsrs	r2, r2, #8
 8005c94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c98:	fb02 f303 	mul.w	r3, r2, r3
 8005c9c:	617b      	str	r3, [r7, #20]
      break;
 8005c9e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ca0:	4b0b      	ldr	r3, [pc, #44]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	0e5b      	lsrs	r3, r3, #25
 8005ca6:	f003 0303 	and.w	r3, r3, #3
 8005caa:	3301      	adds	r3, #1
 8005cac:	005b      	lsls	r3, r3, #1
 8005cae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb8:	613b      	str	r3, [r7, #16]
 8005cba:	e001      	b.n	8005cc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005cc0:	693b      	ldr	r3, [r7, #16]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	371c      	adds	r7, #28
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	40021000 	.word	0x40021000
 8005cd4:	00f42400 	.word	0x00f42400
 8005cd8:	016e3600 	.word	0x016e3600

08005cdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ce0:	4b03      	ldr	r3, [pc, #12]	; (8005cf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	20000000 	.word	0x20000000

08005cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005cf8:	f7ff fff0 	bl	8005cdc <HAL_RCC_GetHCLKFreq>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	4b06      	ldr	r3, [pc, #24]	; (8005d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	0a1b      	lsrs	r3, r3, #8
 8005d04:	f003 0307 	and.w	r3, r3, #7
 8005d08:	4904      	ldr	r1, [pc, #16]	; (8005d1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d0a:	5ccb      	ldrb	r3, [r1, r3]
 8005d0c:	f003 031f 	and.w	r3, r3, #31
 8005d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	40021000 	.word	0x40021000
 8005d1c:	0800cea4 	.word	0x0800cea4

08005d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d24:	f7ff ffda 	bl	8005cdc <HAL_RCC_GetHCLKFreq>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	4b06      	ldr	r3, [pc, #24]	; (8005d44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	0adb      	lsrs	r3, r3, #11
 8005d30:	f003 0307 	and.w	r3, r3, #7
 8005d34:	4904      	ldr	r1, [pc, #16]	; (8005d48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d36:	5ccb      	ldrb	r3, [r1, r3]
 8005d38:	f003 031f 	and.w	r3, r3, #31
 8005d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	40021000 	.word	0x40021000
 8005d48:	0800cea4 	.word	0x0800cea4

08005d4c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	220f      	movs	r2, #15
 8005d5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005d5c:	4b12      	ldr	r3, [pc, #72]	; (8005da8 <HAL_RCC_GetClockConfig+0x5c>)
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f003 0203 	and.w	r2, r3, #3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005d68:	4b0f      	ldr	r3, [pc, #60]	; (8005da8 <HAL_RCC_GetClockConfig+0x5c>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005d74:	4b0c      	ldr	r3, [pc, #48]	; (8005da8 <HAL_RCC_GetClockConfig+0x5c>)
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005d80:	4b09      	ldr	r3, [pc, #36]	; (8005da8 <HAL_RCC_GetClockConfig+0x5c>)
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	08db      	lsrs	r3, r3, #3
 8005d86:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005d8e:	4b07      	ldr	r3, [pc, #28]	; (8005dac <HAL_RCC_GetClockConfig+0x60>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 020f 	and.w	r2, r3, #15
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	601a      	str	r2, [r3, #0]
}
 8005d9a:	bf00      	nop
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	40021000 	.word	0x40021000
 8005dac:	40022000 	.word	0x40022000

08005db0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005db6:	4b1e      	ldr	r3, [pc, #120]	; (8005e30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	f003 0303 	and.w	r3, r3, #3
 8005dbe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005dc0:	4b1b      	ldr	r3, [pc, #108]	; (8005e30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	091b      	lsrs	r3, r3, #4
 8005dc6:	f003 030f 	and.w	r3, r3, #15
 8005dca:	3301      	adds	r3, #1
 8005dcc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	2b03      	cmp	r3, #3
 8005dd2:	d10c      	bne.n	8005dee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005dd4:	4a17      	ldr	r2, [pc, #92]	; (8005e34 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ddc:	4a14      	ldr	r2, [pc, #80]	; (8005e30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005dde:	68d2      	ldr	r2, [r2, #12]
 8005de0:	0a12      	lsrs	r2, r2, #8
 8005de2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005de6:	fb02 f303 	mul.w	r3, r2, r3
 8005dea:	617b      	str	r3, [r7, #20]
    break;
 8005dec:	e00c      	b.n	8005e08 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005dee:	4a12      	ldr	r2, [pc, #72]	; (8005e38 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df6:	4a0e      	ldr	r2, [pc, #56]	; (8005e30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005df8:	68d2      	ldr	r2, [r2, #12]
 8005dfa:	0a12      	lsrs	r2, r2, #8
 8005dfc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e00:	fb02 f303 	mul.w	r3, r2, r3
 8005e04:	617b      	str	r3, [r7, #20]
    break;
 8005e06:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e08:	4b09      	ldr	r3, [pc, #36]	; (8005e30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	0e5b      	lsrs	r3, r3, #25
 8005e0e:	f003 0303 	and.w	r3, r3, #3
 8005e12:	3301      	adds	r3, #1
 8005e14:	005b      	lsls	r3, r3, #1
 8005e16:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e20:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005e22:	687b      	ldr	r3, [r7, #4]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	371c      	adds	r7, #28
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	40021000 	.word	0x40021000
 8005e34:	016e3600 	.word	0x016e3600
 8005e38:	00f42400 	.word	0x00f42400

08005e3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e44:	2300      	movs	r3, #0
 8005e46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e48:	2300      	movs	r3, #0
 8005e4a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f000 8098 	beq.w	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e5e:	4b43      	ldr	r3, [pc, #268]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10d      	bne.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e6a:	4b40      	ldr	r3, [pc, #256]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e6e:	4a3f      	ldr	r2, [pc, #252]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e74:	6593      	str	r3, [r2, #88]	; 0x58
 8005e76:	4b3d      	ldr	r3, [pc, #244]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e7e:	60bb      	str	r3, [r7, #8]
 8005e80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e82:	2301      	movs	r3, #1
 8005e84:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e86:	4b3a      	ldr	r3, [pc, #232]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a39      	ldr	r2, [pc, #228]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e92:	f7fc fbe9 	bl	8002668 <HAL_GetTick>
 8005e96:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e98:	e009      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e9a:	f7fc fbe5 	bl	8002668 <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d902      	bls.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	74fb      	strb	r3, [r7, #19]
        break;
 8005eac:	e005      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005eae:	4b30      	ldr	r3, [pc, #192]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d0ef      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005eba:	7cfb      	ldrb	r3, [r7, #19]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d159      	bne.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ec0:	4b2a      	ldr	r3, [pc, #168]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eca:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d01e      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d019      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005edc:	4b23      	ldr	r3, [pc, #140]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ee6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ee8:	4b20      	ldr	r3, [pc, #128]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eee:	4a1f      	ldr	r2, [pc, #124]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ef4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ef8:	4b1c      	ldr	r3, [pc, #112]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005efe:	4a1b      	ldr	r2, [pc, #108]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f08:	4a18      	ldr	r2, [pc, #96]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d016      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f1a:	f7fc fba5 	bl	8002668 <HAL_GetTick>
 8005f1e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f20:	e00b      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f22:	f7fc fba1 	bl	8002668 <HAL_GetTick>
 8005f26:	4602      	mov	r2, r0
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d902      	bls.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	74fb      	strb	r3, [r7, #19]
            break;
 8005f38:	e006      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f3a:	4b0c      	ldr	r3, [pc, #48]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d0ec      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005f48:	7cfb      	ldrb	r3, [r7, #19]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10b      	bne.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f4e:	4b07      	ldr	r3, [pc, #28]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f5c:	4903      	ldr	r1, [pc, #12]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005f64:	e008      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f66:	7cfb      	ldrb	r3, [r7, #19]
 8005f68:	74bb      	strb	r3, [r7, #18]
 8005f6a:	e005      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005f6c:	40021000 	.word	0x40021000
 8005f70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f74:	7cfb      	ldrb	r3, [r7, #19]
 8005f76:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f78:	7c7b      	ldrb	r3, [r7, #17]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d105      	bne.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f7e:	4ba7      	ldr	r3, [pc, #668]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f82:	4aa6      	ldr	r2, [pc, #664]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f88:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00a      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f96:	4ba1      	ldr	r3, [pc, #644]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f9c:	f023 0203 	bic.w	r2, r3, #3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	499d      	ldr	r1, [pc, #628]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00a      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fb8:	4b98      	ldr	r3, [pc, #608]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fbe:	f023 020c 	bic.w	r2, r3, #12
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	4995      	ldr	r1, [pc, #596]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0304 	and.w	r3, r3, #4
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00a      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005fda:	4b90      	ldr	r3, [pc, #576]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	498c      	ldr	r1, [pc, #560]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0308 	and.w	r3, r3, #8
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00a      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ffc:	4b87      	ldr	r3, [pc, #540]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006002:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	4984      	ldr	r1, [pc, #528]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800600c:	4313      	orrs	r3, r2
 800600e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0310 	and.w	r3, r3, #16
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00a      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800601e:	4b7f      	ldr	r3, [pc, #508]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006024:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	695b      	ldr	r3, [r3, #20]
 800602c:	497b      	ldr	r1, [pc, #492]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800602e:	4313      	orrs	r3, r2
 8006030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0320 	and.w	r3, r3, #32
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00a      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006040:	4b76      	ldr	r3, [pc, #472]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006046:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	4973      	ldr	r1, [pc, #460]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006050:	4313      	orrs	r3, r2
 8006052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00a      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006062:	4b6e      	ldr	r3, [pc, #440]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006068:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	496a      	ldr	r1, [pc, #424]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006072:	4313      	orrs	r3, r2
 8006074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00a      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006084:	4b65      	ldr	r3, [pc, #404]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800608a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	4962      	ldr	r1, [pc, #392]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006094:	4313      	orrs	r3, r2
 8006096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00a      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80060a6:	4b5d      	ldr	r3, [pc, #372]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b4:	4959      	ldr	r1, [pc, #356]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00a      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80060c8:	4b54      	ldr	r3, [pc, #336]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060ce:	f023 0203 	bic.w	r2, r3, #3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d6:	4951      	ldr	r1, [pc, #324]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00a      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060ea:	4b4c      	ldr	r3, [pc, #304]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f8:	4948      	ldr	r1, [pc, #288]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006108:	2b00      	cmp	r3, #0
 800610a:	d015      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800610c:	4b43      	ldr	r3, [pc, #268]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800610e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006112:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611a:	4940      	ldr	r1, [pc, #256]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800611c:	4313      	orrs	r3, r2
 800611e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006126:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800612a:	d105      	bne.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800612c:	4b3b      	ldr	r3, [pc, #236]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	4a3a      	ldr	r2, [pc, #232]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006132:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006136:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006140:	2b00      	cmp	r3, #0
 8006142:	d015      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006144:	4b35      	ldr	r3, [pc, #212]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800614a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006152:	4932      	ldr	r1, [pc, #200]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006154:	4313      	orrs	r3, r2
 8006156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800615e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006162:	d105      	bne.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006164:	4b2d      	ldr	r3, [pc, #180]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	4a2c      	ldr	r2, [pc, #176]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800616a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800616e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d015      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800617c:	4b27      	ldr	r3, [pc, #156]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800617e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006182:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618a:	4924      	ldr	r1, [pc, #144]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800618c:	4313      	orrs	r3, r2
 800618e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006196:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800619a:	d105      	bne.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800619c:	4b1f      	ldr	r3, [pc, #124]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	4a1e      	ldr	r2, [pc, #120]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061a6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d015      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061b4:	4b19      	ldr	r3, [pc, #100]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c2:	4916      	ldr	r1, [pc, #88]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061d2:	d105      	bne.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061d4:	4b11      	ldr	r3, [pc, #68]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	4a10      	ldr	r2, [pc, #64]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061de:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d019      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80061ec:	4b0b      	ldr	r3, [pc, #44]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fa:	4908      	ldr	r1, [pc, #32]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006206:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800620a:	d109      	bne.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800620c:	4b03      	ldr	r3, [pc, #12]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	4a02      	ldr	r2, [pc, #8]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006216:	60d3      	str	r3, [r2, #12]
 8006218:	e002      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800621a:	bf00      	nop
 800621c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d015      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800622c:	4b29      	ldr	r3, [pc, #164]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800622e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006232:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800623a:	4926      	ldr	r1, [pc, #152]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800623c:	4313      	orrs	r3, r2
 800623e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006246:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800624a:	d105      	bne.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800624c:	4b21      	ldr	r3, [pc, #132]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	4a20      	ldr	r2, [pc, #128]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006256:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d015      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006264:	4b1b      	ldr	r3, [pc, #108]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800626a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006272:	4918      	ldr	r1, [pc, #96]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006274:	4313      	orrs	r3, r2
 8006276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800627e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006282:	d105      	bne.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006284:	4b13      	ldr	r3, [pc, #76]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	4a12      	ldr	r2, [pc, #72]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800628a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800628e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d015      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800629c:	4b0d      	ldr	r3, [pc, #52]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800629e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062aa:	490a      	ldr	r1, [pc, #40]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062ac:	4313      	orrs	r3, r2
 80062ae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062ba:	d105      	bne.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062bc:	4b05      	ldr	r3, [pc, #20]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	4a04      	ldr	r2, [pc, #16]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80062c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3718      	adds	r7, #24
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	40021000 	.word	0x40021000

080062d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e049      	b.n	800637e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d106      	bne.n	8006304 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f841 	bl	8006386 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2202      	movs	r2, #2
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	3304      	adds	r3, #4
 8006314:	4619      	mov	r1, r3
 8006316:	4610      	mov	r0, r2
 8006318:	f000 fd7a 	bl	8006e10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3708      	adds	r7, #8
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006386:	b480      	push	{r7}
 8006388:	b083      	sub	sp, #12
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800638e:	bf00      	nop
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
	...

0800639c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d001      	beq.n	80063b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e054      	b.n	800645e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2202      	movs	r2, #2
 80063b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68da      	ldr	r2, [r3, #12]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f042 0201 	orr.w	r2, r2, #1
 80063ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a26      	ldr	r2, [pc, #152]	; (800646c <HAL_TIM_Base_Start_IT+0xd0>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d022      	beq.n	800641c <HAL_TIM_Base_Start_IT+0x80>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063de:	d01d      	beq.n	800641c <HAL_TIM_Base_Start_IT+0x80>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a22      	ldr	r2, [pc, #136]	; (8006470 <HAL_TIM_Base_Start_IT+0xd4>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d018      	beq.n	800641c <HAL_TIM_Base_Start_IT+0x80>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a21      	ldr	r2, [pc, #132]	; (8006474 <HAL_TIM_Base_Start_IT+0xd8>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d013      	beq.n	800641c <HAL_TIM_Base_Start_IT+0x80>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a1f      	ldr	r2, [pc, #124]	; (8006478 <HAL_TIM_Base_Start_IT+0xdc>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d00e      	beq.n	800641c <HAL_TIM_Base_Start_IT+0x80>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a1e      	ldr	r2, [pc, #120]	; (800647c <HAL_TIM_Base_Start_IT+0xe0>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d009      	beq.n	800641c <HAL_TIM_Base_Start_IT+0x80>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a1c      	ldr	r2, [pc, #112]	; (8006480 <HAL_TIM_Base_Start_IT+0xe4>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d004      	beq.n	800641c <HAL_TIM_Base_Start_IT+0x80>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a1b      	ldr	r2, [pc, #108]	; (8006484 <HAL_TIM_Base_Start_IT+0xe8>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d115      	bne.n	8006448 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689a      	ldr	r2, [r3, #8]
 8006422:	4b19      	ldr	r3, [pc, #100]	; (8006488 <HAL_TIM_Base_Start_IT+0xec>)
 8006424:	4013      	ands	r3, r2
 8006426:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2b06      	cmp	r3, #6
 800642c:	d015      	beq.n	800645a <HAL_TIM_Base_Start_IT+0xbe>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006434:	d011      	beq.n	800645a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f042 0201 	orr.w	r2, r2, #1
 8006444:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006446:	e008      	b.n	800645a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f042 0201 	orr.w	r2, r2, #1
 8006456:	601a      	str	r2, [r3, #0]
 8006458:	e000      	b.n	800645c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800645a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	40012c00 	.word	0x40012c00
 8006470:	40000400 	.word	0x40000400
 8006474:	40000800 	.word	0x40000800
 8006478:	40000c00 	.word	0x40000c00
 800647c:	40013400 	.word	0x40013400
 8006480:	40014000 	.word	0x40014000
 8006484:	40015000 	.word	0x40015000
 8006488:	00010007 	.word	0x00010007

0800648c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e049      	b.n	8006532 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d106      	bne.n	80064b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7fb fbfe 	bl	8001cb4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	3304      	adds	r3, #4
 80064c8:	4619      	mov	r1, r3
 80064ca:	4610      	mov	r0, r2
 80064cc:	f000 fca0 	bl	8006e10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
	...

0800653c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d109      	bne.n	8006560 <HAL_TIM_PWM_Start+0x24>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006552:	b2db      	uxtb	r3, r3
 8006554:	2b01      	cmp	r3, #1
 8006556:	bf14      	ite	ne
 8006558:	2301      	movne	r3, #1
 800655a:	2300      	moveq	r3, #0
 800655c:	b2db      	uxtb	r3, r3
 800655e:	e03c      	b.n	80065da <HAL_TIM_PWM_Start+0x9e>
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	2b04      	cmp	r3, #4
 8006564:	d109      	bne.n	800657a <HAL_TIM_PWM_Start+0x3e>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800656c:	b2db      	uxtb	r3, r3
 800656e:	2b01      	cmp	r3, #1
 8006570:	bf14      	ite	ne
 8006572:	2301      	movne	r3, #1
 8006574:	2300      	moveq	r3, #0
 8006576:	b2db      	uxtb	r3, r3
 8006578:	e02f      	b.n	80065da <HAL_TIM_PWM_Start+0x9e>
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	2b08      	cmp	r3, #8
 800657e:	d109      	bne.n	8006594 <HAL_TIM_PWM_Start+0x58>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b01      	cmp	r3, #1
 800658a:	bf14      	ite	ne
 800658c:	2301      	movne	r3, #1
 800658e:	2300      	moveq	r3, #0
 8006590:	b2db      	uxtb	r3, r3
 8006592:	e022      	b.n	80065da <HAL_TIM_PWM_Start+0x9e>
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	2b0c      	cmp	r3, #12
 8006598:	d109      	bne.n	80065ae <HAL_TIM_PWM_Start+0x72>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	bf14      	ite	ne
 80065a6:	2301      	movne	r3, #1
 80065a8:	2300      	moveq	r3, #0
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	e015      	b.n	80065da <HAL_TIM_PWM_Start+0x9e>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b10      	cmp	r3, #16
 80065b2:	d109      	bne.n	80065c8 <HAL_TIM_PWM_Start+0x8c>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b01      	cmp	r3, #1
 80065be:	bf14      	ite	ne
 80065c0:	2301      	movne	r3, #1
 80065c2:	2300      	moveq	r3, #0
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	e008      	b.n	80065da <HAL_TIM_PWM_Start+0x9e>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	bf14      	ite	ne
 80065d4:	2301      	movne	r3, #1
 80065d6:	2300      	moveq	r3, #0
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e0a6      	b.n	8006730 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d104      	bne.n	80065f2 <HAL_TIM_PWM_Start+0xb6>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2202      	movs	r2, #2
 80065ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065f0:	e023      	b.n	800663a <HAL_TIM_PWM_Start+0xfe>
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	2b04      	cmp	r3, #4
 80065f6:	d104      	bne.n	8006602 <HAL_TIM_PWM_Start+0xc6>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2202      	movs	r2, #2
 80065fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006600:	e01b      	b.n	800663a <HAL_TIM_PWM_Start+0xfe>
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b08      	cmp	r3, #8
 8006606:	d104      	bne.n	8006612 <HAL_TIM_PWM_Start+0xd6>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2202      	movs	r2, #2
 800660c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006610:	e013      	b.n	800663a <HAL_TIM_PWM_Start+0xfe>
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	2b0c      	cmp	r3, #12
 8006616:	d104      	bne.n	8006622 <HAL_TIM_PWM_Start+0xe6>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2202      	movs	r2, #2
 800661c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006620:	e00b      	b.n	800663a <HAL_TIM_PWM_Start+0xfe>
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	2b10      	cmp	r3, #16
 8006626:	d104      	bne.n	8006632 <HAL_TIM_PWM_Start+0xf6>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2202      	movs	r2, #2
 800662c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006630:	e003      	b.n	800663a <HAL_TIM_PWM_Start+0xfe>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2202      	movs	r2, #2
 8006636:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2201      	movs	r2, #1
 8006640:	6839      	ldr	r1, [r7, #0]
 8006642:	4618      	mov	r0, r3
 8006644:	f001 f82a 	bl	800769c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a3a      	ldr	r2, [pc, #232]	; (8006738 <HAL_TIM_PWM_Start+0x1fc>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d018      	beq.n	8006684 <HAL_TIM_PWM_Start+0x148>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a39      	ldr	r2, [pc, #228]	; (800673c <HAL_TIM_PWM_Start+0x200>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d013      	beq.n	8006684 <HAL_TIM_PWM_Start+0x148>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a37      	ldr	r2, [pc, #220]	; (8006740 <HAL_TIM_PWM_Start+0x204>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d00e      	beq.n	8006684 <HAL_TIM_PWM_Start+0x148>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a36      	ldr	r2, [pc, #216]	; (8006744 <HAL_TIM_PWM_Start+0x208>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d009      	beq.n	8006684 <HAL_TIM_PWM_Start+0x148>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a34      	ldr	r2, [pc, #208]	; (8006748 <HAL_TIM_PWM_Start+0x20c>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d004      	beq.n	8006684 <HAL_TIM_PWM_Start+0x148>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a33      	ldr	r2, [pc, #204]	; (800674c <HAL_TIM_PWM_Start+0x210>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d101      	bne.n	8006688 <HAL_TIM_PWM_Start+0x14c>
 8006684:	2301      	movs	r3, #1
 8006686:	e000      	b.n	800668a <HAL_TIM_PWM_Start+0x14e>
 8006688:	2300      	movs	r3, #0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d007      	beq.n	800669e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800669c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a25      	ldr	r2, [pc, #148]	; (8006738 <HAL_TIM_PWM_Start+0x1fc>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d022      	beq.n	80066ee <HAL_TIM_PWM_Start+0x1b2>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066b0:	d01d      	beq.n	80066ee <HAL_TIM_PWM_Start+0x1b2>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a26      	ldr	r2, [pc, #152]	; (8006750 <HAL_TIM_PWM_Start+0x214>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d018      	beq.n	80066ee <HAL_TIM_PWM_Start+0x1b2>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a24      	ldr	r2, [pc, #144]	; (8006754 <HAL_TIM_PWM_Start+0x218>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d013      	beq.n	80066ee <HAL_TIM_PWM_Start+0x1b2>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a23      	ldr	r2, [pc, #140]	; (8006758 <HAL_TIM_PWM_Start+0x21c>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d00e      	beq.n	80066ee <HAL_TIM_PWM_Start+0x1b2>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a19      	ldr	r2, [pc, #100]	; (800673c <HAL_TIM_PWM_Start+0x200>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d009      	beq.n	80066ee <HAL_TIM_PWM_Start+0x1b2>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a18      	ldr	r2, [pc, #96]	; (8006740 <HAL_TIM_PWM_Start+0x204>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d004      	beq.n	80066ee <HAL_TIM_PWM_Start+0x1b2>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a18      	ldr	r2, [pc, #96]	; (800674c <HAL_TIM_PWM_Start+0x210>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d115      	bne.n	800671a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	689a      	ldr	r2, [r3, #8]
 80066f4:	4b19      	ldr	r3, [pc, #100]	; (800675c <HAL_TIM_PWM_Start+0x220>)
 80066f6:	4013      	ands	r3, r2
 80066f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2b06      	cmp	r3, #6
 80066fe:	d015      	beq.n	800672c <HAL_TIM_PWM_Start+0x1f0>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006706:	d011      	beq.n	800672c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f042 0201 	orr.w	r2, r2, #1
 8006716:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006718:	e008      	b.n	800672c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f042 0201 	orr.w	r2, r2, #1
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	e000      	b.n	800672e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800672c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	40012c00 	.word	0x40012c00
 800673c:	40013400 	.word	0x40013400
 8006740:	40014000 	.word	0x40014000
 8006744:	40014400 	.word	0x40014400
 8006748:	40014800 	.word	0x40014800
 800674c:	40015000 	.word	0x40015000
 8006750:	40000400 	.word	0x40000400
 8006754:	40000800 	.word	0x40000800
 8006758:	40000c00 	.word	0x40000c00
 800675c:	00010007 	.word	0x00010007

08006760 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2200      	movs	r2, #0
 8006770:	6839      	ldr	r1, [r7, #0]
 8006772:	4618      	mov	r0, r3
 8006774:	f000 ff92 	bl	800769c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a40      	ldr	r2, [pc, #256]	; (8006880 <HAL_TIM_PWM_Stop+0x120>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d018      	beq.n	80067b4 <HAL_TIM_PWM_Stop+0x54>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a3f      	ldr	r2, [pc, #252]	; (8006884 <HAL_TIM_PWM_Stop+0x124>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d013      	beq.n	80067b4 <HAL_TIM_PWM_Stop+0x54>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a3d      	ldr	r2, [pc, #244]	; (8006888 <HAL_TIM_PWM_Stop+0x128>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d00e      	beq.n	80067b4 <HAL_TIM_PWM_Stop+0x54>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a3c      	ldr	r2, [pc, #240]	; (800688c <HAL_TIM_PWM_Stop+0x12c>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d009      	beq.n	80067b4 <HAL_TIM_PWM_Stop+0x54>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a3a      	ldr	r2, [pc, #232]	; (8006890 <HAL_TIM_PWM_Stop+0x130>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d004      	beq.n	80067b4 <HAL_TIM_PWM_Stop+0x54>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a39      	ldr	r2, [pc, #228]	; (8006894 <HAL_TIM_PWM_Stop+0x134>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d101      	bne.n	80067b8 <HAL_TIM_PWM_Stop+0x58>
 80067b4:	2301      	movs	r3, #1
 80067b6:	e000      	b.n	80067ba <HAL_TIM_PWM_Stop+0x5a>
 80067b8:	2300      	movs	r3, #0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d017      	beq.n	80067ee <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6a1a      	ldr	r2, [r3, #32]
 80067c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80067c8:	4013      	ands	r3, r2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10f      	bne.n	80067ee <HAL_TIM_PWM_Stop+0x8e>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	6a1a      	ldr	r2, [r3, #32]
 80067d4:	f244 4344 	movw	r3, #17476	; 0x4444
 80067d8:	4013      	ands	r3, r2
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d107      	bne.n	80067ee <HAL_TIM_PWM_Stop+0x8e>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	6a1a      	ldr	r2, [r3, #32]
 80067f4:	f241 1311 	movw	r3, #4369	; 0x1111
 80067f8:	4013      	ands	r3, r2
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10f      	bne.n	800681e <HAL_TIM_PWM_Stop+0xbe>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	6a1a      	ldr	r2, [r3, #32]
 8006804:	f244 4344 	movw	r3, #17476	; 0x4444
 8006808:	4013      	ands	r3, r2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d107      	bne.n	800681e <HAL_TIM_PWM_Stop+0xbe>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f022 0201 	bic.w	r2, r2, #1
 800681c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d104      	bne.n	800682e <HAL_TIM_PWM_Stop+0xce>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800682c:	e023      	b.n	8006876 <HAL_TIM_PWM_Stop+0x116>
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	2b04      	cmp	r3, #4
 8006832:	d104      	bne.n	800683e <HAL_TIM_PWM_Stop+0xde>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800683c:	e01b      	b.n	8006876 <HAL_TIM_PWM_Stop+0x116>
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	2b08      	cmp	r3, #8
 8006842:	d104      	bne.n	800684e <HAL_TIM_PWM_Stop+0xee>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800684c:	e013      	b.n	8006876 <HAL_TIM_PWM_Stop+0x116>
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	2b0c      	cmp	r3, #12
 8006852:	d104      	bne.n	800685e <HAL_TIM_PWM_Stop+0xfe>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800685c:	e00b      	b.n	8006876 <HAL_TIM_PWM_Stop+0x116>
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2b10      	cmp	r3, #16
 8006862:	d104      	bne.n	800686e <HAL_TIM_PWM_Stop+0x10e>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800686c:	e003      	b.n	8006876 <HAL_TIM_PWM_Stop+0x116>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3708      	adds	r7, #8
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	40012c00 	.word	0x40012c00
 8006884:	40013400 	.word	0x40013400
 8006888:	40014000 	.word	0x40014000
 800688c:	40014400 	.word	0x40014400
 8006890:	40014800 	.word	0x40014800
 8006894:	40015000 	.word	0x40015000

08006898 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	f003 0302 	and.w	r3, r3, #2
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d122      	bne.n	80068f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	f003 0302 	and.w	r3, r3, #2
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d11b      	bne.n	80068f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f06f 0202 	mvn.w	r2, #2
 80068c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2201      	movs	r2, #1
 80068ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	f003 0303 	and.w	r3, r3, #3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d003      	beq.n	80068e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fa7a 	bl	8006dd4 <HAL_TIM_IC_CaptureCallback>
 80068e0:	e005      	b.n	80068ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fa6c 	bl	8006dc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fa7d 	bl	8006de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	f003 0304 	and.w	r3, r3, #4
 80068fe:	2b04      	cmp	r3, #4
 8006900:	d122      	bne.n	8006948 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f003 0304 	and.w	r3, r3, #4
 800690c:	2b04      	cmp	r3, #4
 800690e:	d11b      	bne.n	8006948 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f06f 0204 	mvn.w	r2, #4
 8006918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2202      	movs	r2, #2
 800691e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800692a:	2b00      	cmp	r3, #0
 800692c:	d003      	beq.n	8006936 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 fa50 	bl	8006dd4 <HAL_TIM_IC_CaptureCallback>
 8006934:	e005      	b.n	8006942 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fa42 	bl	8006dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fa53 	bl	8006de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	f003 0308 	and.w	r3, r3, #8
 8006952:	2b08      	cmp	r3, #8
 8006954:	d122      	bne.n	800699c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	f003 0308 	and.w	r3, r3, #8
 8006960:	2b08      	cmp	r3, #8
 8006962:	d11b      	bne.n	800699c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f06f 0208 	mvn.w	r2, #8
 800696c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2204      	movs	r2, #4
 8006972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	f003 0303 	and.w	r3, r3, #3
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fa26 	bl	8006dd4 <HAL_TIM_IC_CaptureCallback>
 8006988:	e005      	b.n	8006996 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fa18 	bl	8006dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fa29 	bl	8006de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	f003 0310 	and.w	r3, r3, #16
 80069a6:	2b10      	cmp	r3, #16
 80069a8:	d122      	bne.n	80069f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	f003 0310 	and.w	r3, r3, #16
 80069b4:	2b10      	cmp	r3, #16
 80069b6:	d11b      	bne.n	80069f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f06f 0210 	mvn.w	r2, #16
 80069c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2208      	movs	r2, #8
 80069c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	69db      	ldr	r3, [r3, #28]
 80069ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 f9fc 	bl	8006dd4 <HAL_TIM_IC_CaptureCallback>
 80069dc:	e005      	b.n	80069ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f9ee 	bl	8006dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 f9ff 	bl	8006de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d10e      	bne.n	8006a1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	f003 0301 	and.w	r3, r3, #1
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d107      	bne.n	8006a1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f06f 0201 	mvn.w	r2, #1
 8006a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7fa fe64 	bl	80016e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a26:	2b80      	cmp	r3, #128	; 0x80
 8006a28:	d10e      	bne.n	8006a48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a34:	2b80      	cmp	r3, #128	; 0x80
 8006a36:	d107      	bne.n	8006a48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f001 f970 	bl	8007d28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a56:	d10e      	bne.n	8006a76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a62:	2b80      	cmp	r3, #128	; 0x80
 8006a64:	d107      	bne.n	8006a76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f001 f963 	bl	8007d3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a80:	2b40      	cmp	r3, #64	; 0x40
 8006a82:	d10e      	bne.n	8006aa2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a8e:	2b40      	cmp	r3, #64	; 0x40
 8006a90:	d107      	bne.n	8006aa2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f9ad 	bl	8006dfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	f003 0320 	and.w	r3, r3, #32
 8006aac:	2b20      	cmp	r3, #32
 8006aae:	d10e      	bne.n	8006ace <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	f003 0320 	and.w	r3, r3, #32
 8006aba:	2b20      	cmp	r3, #32
 8006abc:	d107      	bne.n	8006ace <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f06f 0220 	mvn.w	r2, #32
 8006ac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f001 f923 	bl	8007d14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ad8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006adc:	d10f      	bne.n	8006afe <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ae8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006aec:	d107      	bne.n	8006afe <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f001 f929 	bl	8007d50 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b0c:	d10f      	bne.n	8006b2e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b1c:	d107      	bne.n	8006b2e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006b26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f001 f91b 	bl	8007d64 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b3c:	d10f      	bne.n	8006b5e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b4c:	d107      	bne.n	8006b5e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f001 f90d 	bl	8007d78 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b6c:	d10f      	bne.n	8006b8e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b7c:	d107      	bne.n	8006b8e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f001 f8ff 	bl	8007d8c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b8e:	bf00      	nop
 8006b90:	3708      	adds	r7, #8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
	...

08006b98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d101      	bne.n	8006bb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006bb2:	2302      	movs	r3, #2
 8006bb4:	e0ff      	b.n	8006db6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b14      	cmp	r3, #20
 8006bc2:	f200 80f0 	bhi.w	8006da6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006bc6:	a201      	add	r2, pc, #4	; (adr r2, 8006bcc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bcc:	08006c21 	.word	0x08006c21
 8006bd0:	08006da7 	.word	0x08006da7
 8006bd4:	08006da7 	.word	0x08006da7
 8006bd8:	08006da7 	.word	0x08006da7
 8006bdc:	08006c61 	.word	0x08006c61
 8006be0:	08006da7 	.word	0x08006da7
 8006be4:	08006da7 	.word	0x08006da7
 8006be8:	08006da7 	.word	0x08006da7
 8006bec:	08006ca3 	.word	0x08006ca3
 8006bf0:	08006da7 	.word	0x08006da7
 8006bf4:	08006da7 	.word	0x08006da7
 8006bf8:	08006da7 	.word	0x08006da7
 8006bfc:	08006ce3 	.word	0x08006ce3
 8006c00:	08006da7 	.word	0x08006da7
 8006c04:	08006da7 	.word	0x08006da7
 8006c08:	08006da7 	.word	0x08006da7
 8006c0c:	08006d25 	.word	0x08006d25
 8006c10:	08006da7 	.word	0x08006da7
 8006c14:	08006da7 	.word	0x08006da7
 8006c18:	08006da7 	.word	0x08006da7
 8006c1c:	08006d65 	.word	0x08006d65
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68b9      	ldr	r1, [r7, #8]
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 f99a 	bl	8006f60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	699a      	ldr	r2, [r3, #24]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f042 0208 	orr.w	r2, r2, #8
 8006c3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	699a      	ldr	r2, [r3, #24]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f022 0204 	bic.w	r2, r2, #4
 8006c4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6999      	ldr	r1, [r3, #24]
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	691a      	ldr	r2, [r3, #16]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	430a      	orrs	r2, r1
 8006c5c:	619a      	str	r2, [r3, #24]
      break;
 8006c5e:	e0a5      	b.n	8006dac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68b9      	ldr	r1, [r7, #8]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 fa14 	bl	8007094 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	699a      	ldr	r2, [r3, #24]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	699a      	ldr	r2, [r3, #24]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6999      	ldr	r1, [r3, #24]
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	021a      	lsls	r2, r3, #8
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	430a      	orrs	r2, r1
 8006c9e:	619a      	str	r2, [r3, #24]
      break;
 8006ca0:	e084      	b.n	8006dac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68b9      	ldr	r1, [r7, #8]
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f000 fa87 	bl	80071bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	69da      	ldr	r2, [r3, #28]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f042 0208 	orr.w	r2, r2, #8
 8006cbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	69da      	ldr	r2, [r3, #28]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f022 0204 	bic.w	r2, r2, #4
 8006ccc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	69d9      	ldr	r1, [r3, #28]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	691a      	ldr	r2, [r3, #16]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	430a      	orrs	r2, r1
 8006cde:	61da      	str	r2, [r3, #28]
      break;
 8006ce0:	e064      	b.n	8006dac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68b9      	ldr	r1, [r7, #8]
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f000 faf9 	bl	80072e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	69da      	ldr	r2, [r3, #28]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	69da      	ldr	r2, [r3, #28]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	69d9      	ldr	r1, [r3, #28]
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	021a      	lsls	r2, r3, #8
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	61da      	str	r2, [r3, #28]
      break;
 8006d22:	e043      	b.n	8006dac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68b9      	ldr	r1, [r7, #8]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 fb6c 	bl	8007408 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f042 0208 	orr.w	r2, r2, #8
 8006d3e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f022 0204 	bic.w	r2, r2, #4
 8006d4e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	691a      	ldr	r2, [r3, #16]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006d62:	e023      	b.n	8006dac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68b9      	ldr	r1, [r7, #8]
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f000 fbb6 	bl	80074dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d7e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d8e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	021a      	lsls	r2, r3, #8
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	430a      	orrs	r2, r1
 8006da2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006da4:	e002      	b.n	8006dac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	75fb      	strb	r3, [r7, #23]
      break;
 8006daa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3718      	adds	r7, #24
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop

08006dc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a46      	ldr	r2, [pc, #280]	; (8006f3c <TIM_Base_SetConfig+0x12c>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d017      	beq.n	8006e58 <TIM_Base_SetConfig+0x48>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e2e:	d013      	beq.n	8006e58 <TIM_Base_SetConfig+0x48>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a43      	ldr	r2, [pc, #268]	; (8006f40 <TIM_Base_SetConfig+0x130>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d00f      	beq.n	8006e58 <TIM_Base_SetConfig+0x48>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a42      	ldr	r2, [pc, #264]	; (8006f44 <TIM_Base_SetConfig+0x134>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d00b      	beq.n	8006e58 <TIM_Base_SetConfig+0x48>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a41      	ldr	r2, [pc, #260]	; (8006f48 <TIM_Base_SetConfig+0x138>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d007      	beq.n	8006e58 <TIM_Base_SetConfig+0x48>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a40      	ldr	r2, [pc, #256]	; (8006f4c <TIM_Base_SetConfig+0x13c>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d003      	beq.n	8006e58 <TIM_Base_SetConfig+0x48>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a3f      	ldr	r2, [pc, #252]	; (8006f50 <TIM_Base_SetConfig+0x140>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d108      	bne.n	8006e6a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a33      	ldr	r2, [pc, #204]	; (8006f3c <TIM_Base_SetConfig+0x12c>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d023      	beq.n	8006eba <TIM_Base_SetConfig+0xaa>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e78:	d01f      	beq.n	8006eba <TIM_Base_SetConfig+0xaa>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a30      	ldr	r2, [pc, #192]	; (8006f40 <TIM_Base_SetConfig+0x130>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d01b      	beq.n	8006eba <TIM_Base_SetConfig+0xaa>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a2f      	ldr	r2, [pc, #188]	; (8006f44 <TIM_Base_SetConfig+0x134>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d017      	beq.n	8006eba <TIM_Base_SetConfig+0xaa>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a2e      	ldr	r2, [pc, #184]	; (8006f48 <TIM_Base_SetConfig+0x138>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d013      	beq.n	8006eba <TIM_Base_SetConfig+0xaa>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a2d      	ldr	r2, [pc, #180]	; (8006f4c <TIM_Base_SetConfig+0x13c>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d00f      	beq.n	8006eba <TIM_Base_SetConfig+0xaa>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a2d      	ldr	r2, [pc, #180]	; (8006f54 <TIM_Base_SetConfig+0x144>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d00b      	beq.n	8006eba <TIM_Base_SetConfig+0xaa>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a2c      	ldr	r2, [pc, #176]	; (8006f58 <TIM_Base_SetConfig+0x148>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d007      	beq.n	8006eba <TIM_Base_SetConfig+0xaa>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a2b      	ldr	r2, [pc, #172]	; (8006f5c <TIM_Base_SetConfig+0x14c>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d003      	beq.n	8006eba <TIM_Base_SetConfig+0xaa>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a26      	ldr	r2, [pc, #152]	; (8006f50 <TIM_Base_SetConfig+0x140>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d108      	bne.n	8006ecc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	695b      	ldr	r3, [r3, #20]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	689a      	ldr	r2, [r3, #8]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a12      	ldr	r2, [pc, #72]	; (8006f3c <TIM_Base_SetConfig+0x12c>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d013      	beq.n	8006f20 <TIM_Base_SetConfig+0x110>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a14      	ldr	r2, [pc, #80]	; (8006f4c <TIM_Base_SetConfig+0x13c>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d00f      	beq.n	8006f20 <TIM_Base_SetConfig+0x110>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a14      	ldr	r2, [pc, #80]	; (8006f54 <TIM_Base_SetConfig+0x144>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d00b      	beq.n	8006f20 <TIM_Base_SetConfig+0x110>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a13      	ldr	r2, [pc, #76]	; (8006f58 <TIM_Base_SetConfig+0x148>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d007      	beq.n	8006f20 <TIM_Base_SetConfig+0x110>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a12      	ldr	r2, [pc, #72]	; (8006f5c <TIM_Base_SetConfig+0x14c>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d003      	beq.n	8006f20 <TIM_Base_SetConfig+0x110>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a0d      	ldr	r2, [pc, #52]	; (8006f50 <TIM_Base_SetConfig+0x140>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d103      	bne.n	8006f28 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	691a      	ldr	r2, [r3, #16]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	615a      	str	r2, [r3, #20]
}
 8006f2e:	bf00      	nop
 8006f30:	3714      	adds	r7, #20
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	40012c00 	.word	0x40012c00
 8006f40:	40000400 	.word	0x40000400
 8006f44:	40000800 	.word	0x40000800
 8006f48:	40000c00 	.word	0x40000c00
 8006f4c:	40013400 	.word	0x40013400
 8006f50:	40015000 	.word	0x40015000
 8006f54:	40014000 	.word	0x40014000
 8006f58:	40014400 	.word	0x40014400
 8006f5c:	40014800 	.word	0x40014800

08006f60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b087      	sub	sp, #28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	f023 0201 	bic.w	r2, r3, #1
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f023 0303 	bic.w	r3, r3, #3
 8006f9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	f023 0302 	bic.w	r3, r3, #2
 8006fac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	697a      	ldr	r2, [r7, #20]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a30      	ldr	r2, [pc, #192]	; (800707c <TIM_OC1_SetConfig+0x11c>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d013      	beq.n	8006fe8 <TIM_OC1_SetConfig+0x88>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a2f      	ldr	r2, [pc, #188]	; (8007080 <TIM_OC1_SetConfig+0x120>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d00f      	beq.n	8006fe8 <TIM_OC1_SetConfig+0x88>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a2e      	ldr	r2, [pc, #184]	; (8007084 <TIM_OC1_SetConfig+0x124>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d00b      	beq.n	8006fe8 <TIM_OC1_SetConfig+0x88>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a2d      	ldr	r2, [pc, #180]	; (8007088 <TIM_OC1_SetConfig+0x128>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d007      	beq.n	8006fe8 <TIM_OC1_SetConfig+0x88>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a2c      	ldr	r2, [pc, #176]	; (800708c <TIM_OC1_SetConfig+0x12c>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d003      	beq.n	8006fe8 <TIM_OC1_SetConfig+0x88>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a2b      	ldr	r2, [pc, #172]	; (8007090 <TIM_OC1_SetConfig+0x130>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d10c      	bne.n	8007002 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	f023 0308 	bic.w	r3, r3, #8
 8006fee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	f023 0304 	bic.w	r3, r3, #4
 8007000:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a1d      	ldr	r2, [pc, #116]	; (800707c <TIM_OC1_SetConfig+0x11c>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d013      	beq.n	8007032 <TIM_OC1_SetConfig+0xd2>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a1c      	ldr	r2, [pc, #112]	; (8007080 <TIM_OC1_SetConfig+0x120>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d00f      	beq.n	8007032 <TIM_OC1_SetConfig+0xd2>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a1b      	ldr	r2, [pc, #108]	; (8007084 <TIM_OC1_SetConfig+0x124>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d00b      	beq.n	8007032 <TIM_OC1_SetConfig+0xd2>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a1a      	ldr	r2, [pc, #104]	; (8007088 <TIM_OC1_SetConfig+0x128>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d007      	beq.n	8007032 <TIM_OC1_SetConfig+0xd2>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a19      	ldr	r2, [pc, #100]	; (800708c <TIM_OC1_SetConfig+0x12c>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d003      	beq.n	8007032 <TIM_OC1_SetConfig+0xd2>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a18      	ldr	r2, [pc, #96]	; (8007090 <TIM_OC1_SetConfig+0x130>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d111      	bne.n	8007056 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	4313      	orrs	r3, r2
 800704a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	4313      	orrs	r3, r2
 8007054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	697a      	ldr	r2, [r7, #20]
 800706e:	621a      	str	r2, [r3, #32]
}
 8007070:	bf00      	nop
 8007072:	371c      	adds	r7, #28
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr
 800707c:	40012c00 	.word	0x40012c00
 8007080:	40013400 	.word	0x40013400
 8007084:	40014000 	.word	0x40014000
 8007088:	40014400 	.word	0x40014400
 800708c:	40014800 	.word	0x40014800
 8007090:	40015000 	.word	0x40015000

08007094 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007094:	b480      	push	{r7}
 8007096:	b087      	sub	sp, #28
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	f023 0210 	bic.w	r2, r3, #16
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a1b      	ldr	r3, [r3, #32]
 80070ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	021b      	lsls	r3, r3, #8
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	4313      	orrs	r3, r2
 80070da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	f023 0320 	bic.w	r3, r3, #32
 80070e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	011b      	lsls	r3, r3, #4
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a2c      	ldr	r2, [pc, #176]	; (80071a4 <TIM_OC2_SetConfig+0x110>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d007      	beq.n	8007108 <TIM_OC2_SetConfig+0x74>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4a2b      	ldr	r2, [pc, #172]	; (80071a8 <TIM_OC2_SetConfig+0x114>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d003      	beq.n	8007108 <TIM_OC2_SetConfig+0x74>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a2a      	ldr	r2, [pc, #168]	; (80071ac <TIM_OC2_SetConfig+0x118>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d10d      	bne.n	8007124 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800710e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	011b      	lsls	r3, r3, #4
 8007116:	697a      	ldr	r2, [r7, #20]
 8007118:	4313      	orrs	r3, r2
 800711a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007122:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a1f      	ldr	r2, [pc, #124]	; (80071a4 <TIM_OC2_SetConfig+0x110>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d013      	beq.n	8007154 <TIM_OC2_SetConfig+0xc0>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a1e      	ldr	r2, [pc, #120]	; (80071a8 <TIM_OC2_SetConfig+0x114>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d00f      	beq.n	8007154 <TIM_OC2_SetConfig+0xc0>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a1e      	ldr	r2, [pc, #120]	; (80071b0 <TIM_OC2_SetConfig+0x11c>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d00b      	beq.n	8007154 <TIM_OC2_SetConfig+0xc0>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a1d      	ldr	r2, [pc, #116]	; (80071b4 <TIM_OC2_SetConfig+0x120>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d007      	beq.n	8007154 <TIM_OC2_SetConfig+0xc0>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a1c      	ldr	r2, [pc, #112]	; (80071b8 <TIM_OC2_SetConfig+0x124>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d003      	beq.n	8007154 <TIM_OC2_SetConfig+0xc0>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a17      	ldr	r2, [pc, #92]	; (80071ac <TIM_OC2_SetConfig+0x118>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d113      	bne.n	800717c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800715a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007162:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	4313      	orrs	r3, r2
 800716e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	4313      	orrs	r3, r2
 800717a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	621a      	str	r2, [r3, #32]
}
 8007196:	bf00      	nop
 8007198:	371c      	adds	r7, #28
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	40012c00 	.word	0x40012c00
 80071a8:	40013400 	.word	0x40013400
 80071ac:	40015000 	.word	0x40015000
 80071b0:	40014000 	.word	0x40014000
 80071b4:	40014400 	.word	0x40014400
 80071b8:	40014800 	.word	0x40014800

080071bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071bc:	b480      	push	{r7}
 80071be:	b087      	sub	sp, #28
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a1b      	ldr	r3, [r3, #32]
 80071d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	69db      	ldr	r3, [r3, #28]
 80071e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f023 0303 	bic.w	r3, r3, #3
 80071f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	4313      	orrs	r3, r2
 8007200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	021b      	lsls	r3, r3, #8
 8007210:	697a      	ldr	r2, [r7, #20]
 8007212:	4313      	orrs	r3, r2
 8007214:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a2b      	ldr	r2, [pc, #172]	; (80072c8 <TIM_OC3_SetConfig+0x10c>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d007      	beq.n	800722e <TIM_OC3_SetConfig+0x72>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a2a      	ldr	r2, [pc, #168]	; (80072cc <TIM_OC3_SetConfig+0x110>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d003      	beq.n	800722e <TIM_OC3_SetConfig+0x72>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a29      	ldr	r2, [pc, #164]	; (80072d0 <TIM_OC3_SetConfig+0x114>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d10d      	bne.n	800724a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007234:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	021b      	lsls	r3, r3, #8
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	4313      	orrs	r3, r2
 8007240:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007248:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a1e      	ldr	r2, [pc, #120]	; (80072c8 <TIM_OC3_SetConfig+0x10c>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d013      	beq.n	800727a <TIM_OC3_SetConfig+0xbe>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a1d      	ldr	r2, [pc, #116]	; (80072cc <TIM_OC3_SetConfig+0x110>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d00f      	beq.n	800727a <TIM_OC3_SetConfig+0xbe>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a1d      	ldr	r2, [pc, #116]	; (80072d4 <TIM_OC3_SetConfig+0x118>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d00b      	beq.n	800727a <TIM_OC3_SetConfig+0xbe>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a1c      	ldr	r2, [pc, #112]	; (80072d8 <TIM_OC3_SetConfig+0x11c>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d007      	beq.n	800727a <TIM_OC3_SetConfig+0xbe>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a1b      	ldr	r2, [pc, #108]	; (80072dc <TIM_OC3_SetConfig+0x120>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d003      	beq.n	800727a <TIM_OC3_SetConfig+0xbe>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a16      	ldr	r2, [pc, #88]	; (80072d0 <TIM_OC3_SetConfig+0x114>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d113      	bne.n	80072a2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	695b      	ldr	r3, [r3, #20]
 800728e:	011b      	lsls	r3, r3, #4
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	4313      	orrs	r3, r2
 8007294:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	011b      	lsls	r3, r3, #4
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	4313      	orrs	r3, r2
 80072a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	693a      	ldr	r2, [r7, #16]
 80072a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	685a      	ldr	r2, [r3, #4]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	621a      	str	r2, [r3, #32]
}
 80072bc:	bf00      	nop
 80072be:	371c      	adds	r7, #28
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr
 80072c8:	40012c00 	.word	0x40012c00
 80072cc:	40013400 	.word	0x40013400
 80072d0:	40015000 	.word	0x40015000
 80072d4:	40014000 	.word	0x40014000
 80072d8:	40014400 	.word	0x40014400
 80072dc:	40014800 	.word	0x40014800

080072e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b087      	sub	sp, #28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800730e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800731a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	021b      	lsls	r3, r3, #8
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	4313      	orrs	r3, r2
 8007326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800732e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	031b      	lsls	r3, r3, #12
 8007336:	697a      	ldr	r2, [r7, #20]
 8007338:	4313      	orrs	r3, r2
 800733a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a2c      	ldr	r2, [pc, #176]	; (80073f0 <TIM_OC4_SetConfig+0x110>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d007      	beq.n	8007354 <TIM_OC4_SetConfig+0x74>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4a2b      	ldr	r2, [pc, #172]	; (80073f4 <TIM_OC4_SetConfig+0x114>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d003      	beq.n	8007354 <TIM_OC4_SetConfig+0x74>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a2a      	ldr	r2, [pc, #168]	; (80073f8 <TIM_OC4_SetConfig+0x118>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d10d      	bne.n	8007370 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800735a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	031b      	lsls	r3, r3, #12
 8007362:	697a      	ldr	r2, [r7, #20]
 8007364:	4313      	orrs	r3, r2
 8007366:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800736e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a1f      	ldr	r2, [pc, #124]	; (80073f0 <TIM_OC4_SetConfig+0x110>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d013      	beq.n	80073a0 <TIM_OC4_SetConfig+0xc0>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a1e      	ldr	r2, [pc, #120]	; (80073f4 <TIM_OC4_SetConfig+0x114>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d00f      	beq.n	80073a0 <TIM_OC4_SetConfig+0xc0>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a1e      	ldr	r2, [pc, #120]	; (80073fc <TIM_OC4_SetConfig+0x11c>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d00b      	beq.n	80073a0 <TIM_OC4_SetConfig+0xc0>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a1d      	ldr	r2, [pc, #116]	; (8007400 <TIM_OC4_SetConfig+0x120>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d007      	beq.n	80073a0 <TIM_OC4_SetConfig+0xc0>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a1c      	ldr	r2, [pc, #112]	; (8007404 <TIM_OC4_SetConfig+0x124>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d003      	beq.n	80073a0 <TIM_OC4_SetConfig+0xc0>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a17      	ldr	r2, [pc, #92]	; (80073f8 <TIM_OC4_SetConfig+0x118>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d113      	bne.n	80073c8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073a6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80073ae:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	695b      	ldr	r3, [r3, #20]
 80073b4:	019b      	lsls	r3, r3, #6
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	019b      	lsls	r3, r3, #6
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	685a      	ldr	r2, [r3, #4]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	621a      	str	r2, [r3, #32]
}
 80073e2:	bf00      	nop
 80073e4:	371c      	adds	r7, #28
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	40012c00 	.word	0x40012c00
 80073f4:	40013400 	.word	0x40013400
 80073f8:	40015000 	.word	0x40015000
 80073fc:	40014000 	.word	0x40014000
 8007400:	40014400 	.word	0x40014400
 8007404:	40014800 	.word	0x40014800

08007408 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007408:	b480      	push	{r7}
 800740a:	b087      	sub	sp, #28
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a1b      	ldr	r3, [r3, #32]
 8007416:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a1b      	ldr	r3, [r3, #32]
 8007422:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800742e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800743a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	4313      	orrs	r3, r2
 8007444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800744c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	041b      	lsls	r3, r3, #16
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	4313      	orrs	r3, r2
 8007458:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a19      	ldr	r2, [pc, #100]	; (80074c4 <TIM_OC5_SetConfig+0xbc>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d013      	beq.n	800748a <TIM_OC5_SetConfig+0x82>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a18      	ldr	r2, [pc, #96]	; (80074c8 <TIM_OC5_SetConfig+0xc0>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d00f      	beq.n	800748a <TIM_OC5_SetConfig+0x82>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a17      	ldr	r2, [pc, #92]	; (80074cc <TIM_OC5_SetConfig+0xc4>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d00b      	beq.n	800748a <TIM_OC5_SetConfig+0x82>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a16      	ldr	r2, [pc, #88]	; (80074d0 <TIM_OC5_SetConfig+0xc8>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d007      	beq.n	800748a <TIM_OC5_SetConfig+0x82>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a15      	ldr	r2, [pc, #84]	; (80074d4 <TIM_OC5_SetConfig+0xcc>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d003      	beq.n	800748a <TIM_OC5_SetConfig+0x82>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a14      	ldr	r2, [pc, #80]	; (80074d8 <TIM_OC5_SetConfig+0xd0>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d109      	bne.n	800749e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007490:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	021b      	lsls	r3, r3, #8
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	4313      	orrs	r3, r2
 800749c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	693a      	ldr	r2, [r7, #16]
 80074b6:	621a      	str	r2, [r3, #32]
}
 80074b8:	bf00      	nop
 80074ba:	371c      	adds	r7, #28
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr
 80074c4:	40012c00 	.word	0x40012c00
 80074c8:	40013400 	.word	0x40013400
 80074cc:	40014000 	.word	0x40014000
 80074d0:	40014400 	.word	0x40014400
 80074d4:	40014800 	.word	0x40014800
 80074d8:	40015000 	.word	0x40015000

080074dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80074dc:	b480      	push	{r7}
 80074de:	b087      	sub	sp, #28
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a1b      	ldr	r3, [r3, #32]
 80074ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a1b      	ldr	r3, [r3, #32]
 80074f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800750a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800750e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	021b      	lsls	r3, r3, #8
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	4313      	orrs	r3, r2
 800751a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007522:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	051b      	lsls	r3, r3, #20
 800752a:	693a      	ldr	r2, [r7, #16]
 800752c:	4313      	orrs	r3, r2
 800752e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a1a      	ldr	r2, [pc, #104]	; (800759c <TIM_OC6_SetConfig+0xc0>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d013      	beq.n	8007560 <TIM_OC6_SetConfig+0x84>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a19      	ldr	r2, [pc, #100]	; (80075a0 <TIM_OC6_SetConfig+0xc4>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d00f      	beq.n	8007560 <TIM_OC6_SetConfig+0x84>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a18      	ldr	r2, [pc, #96]	; (80075a4 <TIM_OC6_SetConfig+0xc8>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d00b      	beq.n	8007560 <TIM_OC6_SetConfig+0x84>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a17      	ldr	r2, [pc, #92]	; (80075a8 <TIM_OC6_SetConfig+0xcc>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d007      	beq.n	8007560 <TIM_OC6_SetConfig+0x84>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a16      	ldr	r2, [pc, #88]	; (80075ac <TIM_OC6_SetConfig+0xd0>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d003      	beq.n	8007560 <TIM_OC6_SetConfig+0x84>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a15      	ldr	r2, [pc, #84]	; (80075b0 <TIM_OC6_SetConfig+0xd4>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d109      	bne.n	8007574 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007566:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	029b      	lsls	r3, r3, #10
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	4313      	orrs	r3, r2
 8007572:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	693a      	ldr	r2, [r7, #16]
 800758c:	621a      	str	r2, [r3, #32]
}
 800758e:	bf00      	nop
 8007590:	371c      	adds	r7, #28
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	40012c00 	.word	0x40012c00
 80075a0:	40013400 	.word	0x40013400
 80075a4:	40014000 	.word	0x40014000
 80075a8:	40014400 	.word	0x40014400
 80075ac:	40014800 	.word	0x40014800
 80075b0:	40015000 	.word	0x40015000

080075b4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b087      	sub	sp, #28
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]
 80075c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6a1b      	ldr	r3, [r3, #32]
 80075c6:	f023 0201 	bic.w	r2, r3, #1
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	699b      	ldr	r3, [r3, #24]
 80075d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6a1b      	ldr	r3, [r3, #32]
 80075d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	4a28      	ldr	r2, [pc, #160]	; (8007680 <TIM_TI1_SetConfig+0xcc>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d01b      	beq.n	800761a <TIM_TI1_SetConfig+0x66>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075e8:	d017      	beq.n	800761a <TIM_TI1_SetConfig+0x66>
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	4a25      	ldr	r2, [pc, #148]	; (8007684 <TIM_TI1_SetConfig+0xd0>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d013      	beq.n	800761a <TIM_TI1_SetConfig+0x66>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	4a24      	ldr	r2, [pc, #144]	; (8007688 <TIM_TI1_SetConfig+0xd4>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d00f      	beq.n	800761a <TIM_TI1_SetConfig+0x66>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	4a23      	ldr	r2, [pc, #140]	; (800768c <TIM_TI1_SetConfig+0xd8>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d00b      	beq.n	800761a <TIM_TI1_SetConfig+0x66>
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	4a22      	ldr	r2, [pc, #136]	; (8007690 <TIM_TI1_SetConfig+0xdc>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d007      	beq.n	800761a <TIM_TI1_SetConfig+0x66>
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	4a21      	ldr	r2, [pc, #132]	; (8007694 <TIM_TI1_SetConfig+0xe0>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d003      	beq.n	800761a <TIM_TI1_SetConfig+0x66>
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	4a20      	ldr	r2, [pc, #128]	; (8007698 <TIM_TI1_SetConfig+0xe4>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d101      	bne.n	800761e <TIM_TI1_SetConfig+0x6a>
 800761a:	2301      	movs	r3, #1
 800761c:	e000      	b.n	8007620 <TIM_TI1_SetConfig+0x6c>
 800761e:	2300      	movs	r3, #0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d008      	beq.n	8007636 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	f023 0303 	bic.w	r3, r3, #3
 800762a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800762c:	697a      	ldr	r2, [r7, #20]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4313      	orrs	r3, r2
 8007632:	617b      	str	r3, [r7, #20]
 8007634:	e003      	b.n	800763e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	f043 0301 	orr.w	r3, r3, #1
 800763c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007644:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	011b      	lsls	r3, r3, #4
 800764a:	b2db      	uxtb	r3, r3
 800764c:	697a      	ldr	r2, [r7, #20]
 800764e:	4313      	orrs	r3, r2
 8007650:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	f023 030a 	bic.w	r3, r3, #10
 8007658:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	f003 030a 	and.w	r3, r3, #10
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	4313      	orrs	r3, r2
 8007664:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	697a      	ldr	r2, [r7, #20]
 800766a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	621a      	str	r2, [r3, #32]
}
 8007672:	bf00      	nop
 8007674:	371c      	adds	r7, #28
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop
 8007680:	40012c00 	.word	0x40012c00
 8007684:	40000400 	.word	0x40000400
 8007688:	40000800 	.word	0x40000800
 800768c:	40000c00 	.word	0x40000c00
 8007690:	40013400 	.word	0x40013400
 8007694:	40014000 	.word	0x40014000
 8007698:	40015000 	.word	0x40015000

0800769c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800769c:	b480      	push	{r7}
 800769e:	b087      	sub	sp, #28
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	f003 031f 	and.w	r3, r3, #31
 80076ae:	2201      	movs	r2, #1
 80076b0:	fa02 f303 	lsl.w	r3, r2, r3
 80076b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6a1a      	ldr	r2, [r3, #32]
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	43db      	mvns	r3, r3
 80076be:	401a      	ands	r2, r3
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6a1a      	ldr	r2, [r3, #32]
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	f003 031f 	and.w	r3, r3, #31
 80076ce:	6879      	ldr	r1, [r7, #4]
 80076d0:	fa01 f303 	lsl.w	r3, r1, r3
 80076d4:	431a      	orrs	r2, r3
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	621a      	str	r2, [r3, #32]
}
 80076da:	bf00      	nop
 80076dc:	371c      	adds	r7, #28
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr

080076e6 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b08a      	sub	sp, #40	; 0x28
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
 80076ee:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d101      	bne.n	80076fa <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e0a0      	b.n	800783c <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b00      	cmp	r3, #0
 8007704:	d106      	bne.n	8007714 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f7fa faf0 	bl	8001cf4 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2202      	movs	r2, #2
 8007718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	3304      	adds	r3, #4
 8007724:	4619      	mov	r1, r3
 8007726:	4610      	mov	r0, r2
 8007728:	f7ff fb72 	bl	8006e10 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6818      	ldr	r0, [r3, #0]
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	6819      	ldr	r1, [r3, #0]
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	2203      	movs	r2, #3
 800773a:	f7ff ff3b 	bl	80075b4 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	699a      	ldr	r2, [r3, #24]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f022 020c 	bic.w	r2, r2, #12
 800774c:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	6999      	ldr	r1, [r3, #24]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	685a      	ldr	r2, [r3, #4]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	430a      	orrs	r2, r1
 800775e:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	685a      	ldr	r2, [r3, #4]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800776e:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	6812      	ldr	r2, [r2, #0]
 800777a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800777e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007782:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	689a      	ldr	r2, [r3, #8]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007792:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	6812      	ldr	r2, [r2, #0]
 800779e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077a2:	f023 0307 	bic.w	r3, r3, #7
 80077a6:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	689a      	ldr	r2, [r3, #8]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f042 0204 	orr.w	r2, r2, #4
 80077b6:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80077b8:	2300      	movs	r3, #0
 80077ba:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80077bc:	2300      	movs	r3, #0
 80077be:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80077c0:	2370      	movs	r3, #112	; 0x70
 80077c2:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80077c4:	2300      	movs	r3, #0
 80077c6:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80077c8:	2300      	movs	r3, #0
 80077ca:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80077cc:	2300      	movs	r3, #0
 80077ce:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f107 020c 	add.w	r2, r7, #12
 80077de:	4611      	mov	r1, r2
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7ff fc57 	bl	8007094 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	6812      	ldr	r2, [r2, #0]
 80077f0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80077f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077f8:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	685a      	ldr	r2, [r3, #4]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8007808:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2201      	movs	r2, #1
 800780e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2201      	movs	r2, #1
 800781e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2201      	movs	r2, #1
 8007826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2201      	movs	r2, #1
 800782e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2201      	movs	r2, #1
 8007836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	3728      	adds	r7, #40	; 0x28
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d109      	bne.n	8007868 <HAL_TIMEx_PWMN_Start+0x24>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800785a:	b2db      	uxtb	r3, r3
 800785c:	2b01      	cmp	r3, #1
 800785e:	bf14      	ite	ne
 8007860:	2301      	movne	r3, #1
 8007862:	2300      	moveq	r3, #0
 8007864:	b2db      	uxtb	r3, r3
 8007866:	e022      	b.n	80078ae <HAL_TIMEx_PWMN_Start+0x6a>
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	2b04      	cmp	r3, #4
 800786c:	d109      	bne.n	8007882 <HAL_TIMEx_PWMN_Start+0x3e>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b01      	cmp	r3, #1
 8007878:	bf14      	ite	ne
 800787a:	2301      	movne	r3, #1
 800787c:	2300      	moveq	r3, #0
 800787e:	b2db      	uxtb	r3, r3
 8007880:	e015      	b.n	80078ae <HAL_TIMEx_PWMN_Start+0x6a>
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	2b08      	cmp	r3, #8
 8007886:	d109      	bne.n	800789c <HAL_TIMEx_PWMN_Start+0x58>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800788e:	b2db      	uxtb	r3, r3
 8007890:	2b01      	cmp	r3, #1
 8007892:	bf14      	ite	ne
 8007894:	2301      	movne	r3, #1
 8007896:	2300      	moveq	r3, #0
 8007898:	b2db      	uxtb	r3, r3
 800789a:	e008      	b.n	80078ae <HAL_TIMEx_PWMN_Start+0x6a>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	bf14      	ite	ne
 80078a8:	2301      	movne	r3, #1
 80078aa:	2300      	moveq	r3, #0
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d001      	beq.n	80078b6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e073      	b.n	800799e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d104      	bne.n	80078c6 <HAL_TIMEx_PWMN_Start+0x82>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2202      	movs	r2, #2
 80078c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078c4:	e013      	b.n	80078ee <HAL_TIMEx_PWMN_Start+0xaa>
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	2b04      	cmp	r3, #4
 80078ca:	d104      	bne.n	80078d6 <HAL_TIMEx_PWMN_Start+0x92>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2202      	movs	r2, #2
 80078d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078d4:	e00b      	b.n	80078ee <HAL_TIMEx_PWMN_Start+0xaa>
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2b08      	cmp	r3, #8
 80078da:	d104      	bne.n	80078e6 <HAL_TIMEx_PWMN_Start+0xa2>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2202      	movs	r2, #2
 80078e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80078e4:	e003      	b.n	80078ee <HAL_TIMEx_PWMN_Start+0xaa>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2202      	movs	r2, #2
 80078ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2204      	movs	r2, #4
 80078f4:	6839      	ldr	r1, [r7, #0]
 80078f6:	4618      	mov	r0, r3
 80078f8:	f000 fa52 	bl	8007da0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800790a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a25      	ldr	r2, [pc, #148]	; (80079a8 <HAL_TIMEx_PWMN_Start+0x164>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d022      	beq.n	800795c <HAL_TIMEx_PWMN_Start+0x118>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800791e:	d01d      	beq.n	800795c <HAL_TIMEx_PWMN_Start+0x118>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a21      	ldr	r2, [pc, #132]	; (80079ac <HAL_TIMEx_PWMN_Start+0x168>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d018      	beq.n	800795c <HAL_TIMEx_PWMN_Start+0x118>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a20      	ldr	r2, [pc, #128]	; (80079b0 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d013      	beq.n	800795c <HAL_TIMEx_PWMN_Start+0x118>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a1e      	ldr	r2, [pc, #120]	; (80079b4 <HAL_TIMEx_PWMN_Start+0x170>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d00e      	beq.n	800795c <HAL_TIMEx_PWMN_Start+0x118>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a1d      	ldr	r2, [pc, #116]	; (80079b8 <HAL_TIMEx_PWMN_Start+0x174>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d009      	beq.n	800795c <HAL_TIMEx_PWMN_Start+0x118>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a1b      	ldr	r2, [pc, #108]	; (80079bc <HAL_TIMEx_PWMN_Start+0x178>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d004      	beq.n	800795c <HAL_TIMEx_PWMN_Start+0x118>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a1a      	ldr	r2, [pc, #104]	; (80079c0 <HAL_TIMEx_PWMN_Start+0x17c>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d115      	bne.n	8007988 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	689a      	ldr	r2, [r3, #8]
 8007962:	4b18      	ldr	r3, [pc, #96]	; (80079c4 <HAL_TIMEx_PWMN_Start+0x180>)
 8007964:	4013      	ands	r3, r2
 8007966:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2b06      	cmp	r3, #6
 800796c:	d015      	beq.n	800799a <HAL_TIMEx_PWMN_Start+0x156>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007974:	d011      	beq.n	800799a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f042 0201 	orr.w	r2, r2, #1
 8007984:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007986:	e008      	b.n	800799a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f042 0201 	orr.w	r2, r2, #1
 8007996:	601a      	str	r2, [r3, #0]
 8007998:	e000      	b.n	800799c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800799a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	40012c00 	.word	0x40012c00
 80079ac:	40000400 	.word	0x40000400
 80079b0:	40000800 	.word	0x40000800
 80079b4:	40000c00 	.word	0x40000c00
 80079b8:	40013400 	.word	0x40013400
 80079bc:	40014000 	.word	0x40014000
 80079c0:	40015000 	.word	0x40015000
 80079c4:	00010007 	.word	0x00010007

080079c8 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2200      	movs	r2, #0
 80079d8:	6839      	ldr	r1, [r7, #0]
 80079da:	4618      	mov	r0, r3
 80079dc:	f000 f9e0 	bl	8007da0 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	6a1a      	ldr	r2, [r3, #32]
 80079e6:	f241 1311 	movw	r3, #4369	; 0x1111
 80079ea:	4013      	ands	r3, r2
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d10f      	bne.n	8007a10 <HAL_TIMEx_PWMN_Stop+0x48>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6a1a      	ldr	r2, [r3, #32]
 80079f6:	f244 4344 	movw	r3, #17476	; 0x4444
 80079fa:	4013      	ands	r3, r2
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d107      	bne.n	8007a10 <HAL_TIMEx_PWMN_Stop+0x48>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a0e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	6a1a      	ldr	r2, [r3, #32]
 8007a16:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d10f      	bne.n	8007a40 <HAL_TIMEx_PWMN_Stop+0x78>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6a1a      	ldr	r2, [r3, #32]
 8007a26:	f244 4344 	movw	r3, #17476	; 0x4444
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d107      	bne.n	8007a40 <HAL_TIMEx_PWMN_Stop+0x78>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f022 0201 	bic.w	r2, r2, #1
 8007a3e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d104      	bne.n	8007a50 <HAL_TIMEx_PWMN_Stop+0x88>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a4e:	e013      	b.n	8007a78 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	2b04      	cmp	r3, #4
 8007a54:	d104      	bne.n	8007a60 <HAL_TIMEx_PWMN_Stop+0x98>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a5e:	e00b      	b.n	8007a78 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	2b08      	cmp	r3, #8
 8007a64:	d104      	bne.n	8007a70 <HAL_TIMEx_PWMN_Stop+0xa8>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a6e:	e003      	b.n	8007a78 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
	...

08007a84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d101      	bne.n	8007a9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a98:	2302      	movs	r3, #2
 8007a9a:	e074      	b.n	8007b86 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a34      	ldr	r2, [pc, #208]	; (8007b94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d009      	beq.n	8007ada <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a33      	ldr	r2, [pc, #204]	; (8007b98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d004      	beq.n	8007ada <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a31      	ldr	r2, [pc, #196]	; (8007b9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d108      	bne.n	8007aec <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007ae0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007af6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68fa      	ldr	r2, [r7, #12]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a21      	ldr	r2, [pc, #132]	; (8007b94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d022      	beq.n	8007b5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b1c:	d01d      	beq.n	8007b5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a1f      	ldr	r2, [pc, #124]	; (8007ba0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d018      	beq.n	8007b5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a1d      	ldr	r2, [pc, #116]	; (8007ba4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d013      	beq.n	8007b5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a1c      	ldr	r2, [pc, #112]	; (8007ba8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d00e      	beq.n	8007b5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a15      	ldr	r2, [pc, #84]	; (8007b98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d009      	beq.n	8007b5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a18      	ldr	r2, [pc, #96]	; (8007bac <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d004      	beq.n	8007b5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a11      	ldr	r2, [pc, #68]	; (8007b9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d10c      	bne.n	8007b74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	68ba      	ldr	r2, [r7, #8]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68ba      	ldr	r2, [r7, #8]
 8007b72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3714      	adds	r7, #20
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	40012c00 	.word	0x40012c00
 8007b98:	40013400 	.word	0x40013400
 8007b9c:	40015000 	.word	0x40015000
 8007ba0:	40000400 	.word	0x40000400
 8007ba4:	40000800 	.word	0x40000800
 8007ba8:	40000c00 	.word	0x40000c00
 8007bac:	40014000 	.word	0x40014000

08007bb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d101      	bne.n	8007bcc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007bc8:	2302      	movs	r3, #2
 8007bca:	e096      	b.n	8007cfa <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	695b      	ldr	r3, [r3, #20]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c32:	4313      	orrs	r3, r2
 8007c34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	699b      	ldr	r3, [r3, #24]
 8007c40:	041b      	lsls	r3, r3, #16
 8007c42:	4313      	orrs	r3, r2
 8007c44:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a2f      	ldr	r2, [pc, #188]	; (8007d08 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d009      	beq.n	8007c64 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a2d      	ldr	r2, [pc, #180]	; (8007d0c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d004      	beq.n	8007c64 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a2c      	ldr	r2, [pc, #176]	; (8007d10 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d106      	bne.n	8007c72 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	69db      	ldr	r3, [r3, #28]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a24      	ldr	r2, [pc, #144]	; (8007d08 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d009      	beq.n	8007c90 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a22      	ldr	r2, [pc, #136]	; (8007d0c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d004      	beq.n	8007c90 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a21      	ldr	r2, [pc, #132]	; (8007d10 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d12b      	bne.n	8007ce8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9a:	051b      	lsls	r3, r3, #20
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a11      	ldr	r2, [pc, #68]	; (8007d08 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d009      	beq.n	8007cda <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a10      	ldr	r2, [pc, #64]	; (8007d0c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d004      	beq.n	8007cda <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a0e      	ldr	r2, [pc, #56]	; (8007d10 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d106      	bne.n	8007ce8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3714      	adds	r7, #20
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	40012c00 	.word	0x40012c00
 8007d0c:	40013400 	.word	0x40013400
 8007d10:	40015000 	.word	0x40015000

08007d14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d1c:	bf00      	nop
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d44:	bf00      	nop
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007d58:	bf00      	nop
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b087      	sub	sp, #28
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	f003 031f 	and.w	r3, r3, #31
 8007db2:	2204      	movs	r2, #4
 8007db4:	fa02 f303 	lsl.w	r3, r2, r3
 8007db8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6a1a      	ldr	r2, [r3, #32]
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	43db      	mvns	r3, r3
 8007dc2:	401a      	ands	r2, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6a1a      	ldr	r2, [r3, #32]
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	f003 031f 	and.w	r3, r3, #31
 8007dd2:	6879      	ldr	r1, [r7, #4]
 8007dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8007dd8:	431a      	orrs	r2, r3
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	621a      	str	r2, [r3, #32]
}
 8007dde:	bf00      	nop
 8007de0:	371c      	adds	r7, #28
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b082      	sub	sp, #8
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d101      	bne.n	8007dfc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e042      	b.n	8007e82 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d106      	bne.n	8007e14 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f7fa f8d2 	bl	8001fb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2224      	movs	r2, #36	; 0x24
 8007e18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f022 0201 	bic.w	r2, r2, #1
 8007e2a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 fc51 	bl	80086d4 <UART_SetConfig>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d101      	bne.n	8007e3c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e022      	b.n	8007e82 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d002      	beq.n	8007e4a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 ff41 	bl	8008ccc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	685a      	ldr	r2, [r3, #4]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e58:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	689a      	ldr	r2, [r3, #8]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e68:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f042 0201 	orr.w	r2, r2, #1
 8007e78:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 ffc8 	bl	8008e10 <UART_CheckIdleState>
 8007e80:	4603      	mov	r3, r0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3708      	adds	r7, #8
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b08a      	sub	sp, #40	; 0x28
 8007e8e:	af02      	add	r7, sp, #8
 8007e90:	60f8      	str	r0, [r7, #12]
 8007e92:	60b9      	str	r1, [r7, #8]
 8007e94:	603b      	str	r3, [r7, #0]
 8007e96:	4613      	mov	r3, r2
 8007e98:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ea0:	2b20      	cmp	r3, #32
 8007ea2:	f040 8083 	bne.w	8007fac <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d002      	beq.n	8007eb2 <HAL_UART_Transmit+0x28>
 8007eac:	88fb      	ldrh	r3, [r7, #6]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d101      	bne.n	8007eb6 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e07b      	b.n	8007fae <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d101      	bne.n	8007ec4 <HAL_UART_Transmit+0x3a>
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	e074      	b.n	8007fae <HAL_UART_Transmit+0x124>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2221      	movs	r2, #33	; 0x21
 8007ed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007edc:	f7fa fbc4 	bl	8002668 <HAL_GetTick>
 8007ee0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	88fa      	ldrh	r2, [r7, #6]
 8007ee6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	88fa      	ldrh	r2, [r7, #6]
 8007eee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007efa:	d108      	bne.n	8007f0e <HAL_UART_Transmit+0x84>
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d104      	bne.n	8007f0e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007f04:	2300      	movs	r3, #0
 8007f06:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	61bb      	str	r3, [r7, #24]
 8007f0c:	e003      	b.n	8007f16 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f12:	2300      	movs	r3, #0
 8007f14:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007f1e:	e02c      	b.n	8007f7a <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	9300      	str	r3, [sp, #0]
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	2200      	movs	r2, #0
 8007f28:	2180      	movs	r1, #128	; 0x80
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	f000 ffbb 	bl	8008ea6 <UART_WaitOnFlagUntilTimeout>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d001      	beq.n	8007f3a <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007f36:	2303      	movs	r3, #3
 8007f38:	e039      	b.n	8007fae <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d10b      	bne.n	8007f58 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	881b      	ldrh	r3, [r3, #0]
 8007f44:	461a      	mov	r2, r3
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f4e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	3302      	adds	r3, #2
 8007f54:	61bb      	str	r3, [r7, #24]
 8007f56:	e007      	b.n	8007f68 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	781a      	ldrb	r2, [r3, #0]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	3301      	adds	r3, #1
 8007f66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	3b01      	subs	r3, #1
 8007f72:	b29a      	uxth	r2, r3
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1cc      	bne.n	8007f20 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	9300      	str	r3, [sp, #0]
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	2140      	movs	r1, #64	; 0x40
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f000 ff88 	bl	8008ea6 <UART_WaitOnFlagUntilTimeout>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d001      	beq.n	8007fa0 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	e006      	b.n	8007fae <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2220      	movs	r2, #32
 8007fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	e000      	b.n	8007fae <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007fac:	2302      	movs	r3, #2
  }
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3720      	adds	r7, #32
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
	...

08007fb8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b08a      	sub	sp, #40	; 0x28
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fcc:	2b20      	cmp	r3, #32
 8007fce:	d142      	bne.n	8008056 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d002      	beq.n	8007fdc <HAL_UART_Receive_IT+0x24>
 8007fd6:	88fb      	ldrh	r3, [r7, #6]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d101      	bne.n	8007fe0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e03b      	b.n	8008058 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d101      	bne.n	8007fee <HAL_UART_Receive_IT+0x36>
 8007fea:	2302      	movs	r3, #2
 8007fec:	e034      	b.n	8008058 <HAL_UART_Receive_IT+0xa0>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a17      	ldr	r2, [pc, #92]	; (8008060 <HAL_UART_Receive_IT+0xa8>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d01f      	beq.n	8008046 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008010:	2b00      	cmp	r3, #0
 8008012:	d018      	beq.n	8008046 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	e853 3f00 	ldrex	r3, [r3]
 8008020:	613b      	str	r3, [r7, #16]
   return(result);
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008028:	627b      	str	r3, [r7, #36]	; 0x24
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	461a      	mov	r2, r3
 8008030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008032:	623b      	str	r3, [r7, #32]
 8008034:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008036:	69f9      	ldr	r1, [r7, #28]
 8008038:	6a3a      	ldr	r2, [r7, #32]
 800803a:	e841 2300 	strex	r3, r2, [r1]
 800803e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d1e6      	bne.n	8008014 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008046:	88fb      	ldrh	r3, [r7, #6]
 8008048:	461a      	mov	r2, r3
 800804a:	68b9      	ldr	r1, [r7, #8]
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f000 fff3 	bl	8009038 <UART_Start_Receive_IT>
 8008052:	4603      	mov	r3, r0
 8008054:	e000      	b.n	8008058 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008056:	2302      	movs	r3, #2
  }
}
 8008058:	4618      	mov	r0, r3
 800805a:	3728      	adds	r7, #40	; 0x28
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	40008000 	.word	0x40008000

08008064 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b0ba      	sub	sp, #232	; 0xe8
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	69db      	ldr	r3, [r3, #28]
 8008072:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800808a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800808e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008092:	4013      	ands	r3, r2
 8008094:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008098:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800809c:	2b00      	cmp	r3, #0
 800809e:	d11b      	bne.n	80080d8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80080a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080a4:	f003 0320 	and.w	r3, r3, #32
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d015      	beq.n	80080d8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80080ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080b0:	f003 0320 	and.w	r3, r3, #32
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d105      	bne.n	80080c4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80080b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d009      	beq.n	80080d8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f000 82d6 	beq.w	800867a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	4798      	blx	r3
      }
      return;
 80080d6:	e2d0      	b.n	800867a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80080d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f000 811f 	beq.w	8008320 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80080e2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80080e6:	4b8b      	ldr	r3, [pc, #556]	; (8008314 <HAL_UART_IRQHandler+0x2b0>)
 80080e8:	4013      	ands	r3, r2
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d106      	bne.n	80080fc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80080ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80080f2:	4b89      	ldr	r3, [pc, #548]	; (8008318 <HAL_UART_IRQHandler+0x2b4>)
 80080f4:	4013      	ands	r3, r2
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f000 8112 	beq.w	8008320 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80080fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008100:	f003 0301 	and.w	r3, r3, #1
 8008104:	2b00      	cmp	r3, #0
 8008106:	d011      	beq.n	800812c <HAL_UART_IRQHandler+0xc8>
 8008108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800810c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00b      	beq.n	800812c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2201      	movs	r2, #1
 800811a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008122:	f043 0201 	orr.w	r2, r3, #1
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800812c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008130:	f003 0302 	and.w	r3, r3, #2
 8008134:	2b00      	cmp	r3, #0
 8008136:	d011      	beq.n	800815c <HAL_UART_IRQHandler+0xf8>
 8008138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800813c:	f003 0301 	and.w	r3, r3, #1
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00b      	beq.n	800815c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2202      	movs	r2, #2
 800814a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008152:	f043 0204 	orr.w	r2, r3, #4
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800815c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008160:	f003 0304 	and.w	r3, r3, #4
 8008164:	2b00      	cmp	r3, #0
 8008166:	d011      	beq.n	800818c <HAL_UART_IRQHandler+0x128>
 8008168:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800816c:	f003 0301 	and.w	r3, r3, #1
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00b      	beq.n	800818c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2204      	movs	r2, #4
 800817a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008182:	f043 0202 	orr.w	r2, r3, #2
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800818c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008190:	f003 0308 	and.w	r3, r3, #8
 8008194:	2b00      	cmp	r3, #0
 8008196:	d017      	beq.n	80081c8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800819c:	f003 0320 	and.w	r3, r3, #32
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d105      	bne.n	80081b0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80081a4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80081a8:	4b5a      	ldr	r3, [pc, #360]	; (8008314 <HAL_UART_IRQHandler+0x2b0>)
 80081aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00b      	beq.n	80081c8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2208      	movs	r2, #8
 80081b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081be:	f043 0208 	orr.w	r2, r3, #8
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80081c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d012      	beq.n	80081fa <HAL_UART_IRQHandler+0x196>
 80081d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00c      	beq.n	80081fa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081f0:	f043 0220 	orr.w	r2, r3, #32
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008200:	2b00      	cmp	r3, #0
 8008202:	f000 823c 	beq.w	800867e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800820a:	f003 0320 	and.w	r3, r3, #32
 800820e:	2b00      	cmp	r3, #0
 8008210:	d013      	beq.n	800823a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008212:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008216:	f003 0320 	and.w	r3, r3, #32
 800821a:	2b00      	cmp	r3, #0
 800821c:	d105      	bne.n	800822a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800821e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008226:	2b00      	cmp	r3, #0
 8008228:	d007      	beq.n	800823a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800822e:	2b00      	cmp	r3, #0
 8008230:	d003      	beq.n	800823a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008240:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800824e:	2b40      	cmp	r3, #64	; 0x40
 8008250:	d005      	beq.n	800825e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008252:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008256:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800825a:	2b00      	cmp	r3, #0
 800825c:	d04f      	beq.n	80082fe <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f001 f814 	bl	800928c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800826e:	2b40      	cmp	r3, #64	; 0x40
 8008270:	d141      	bne.n	80082f6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	3308      	adds	r3, #8
 8008278:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008280:	e853 3f00 	ldrex	r3, [r3]
 8008284:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008288:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800828c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008290:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	3308      	adds	r3, #8
 800829a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800829e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80082a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80082aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80082ae:	e841 2300 	strex	r3, r2, [r1]
 80082b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80082b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d1d9      	bne.n	8008272 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d013      	beq.n	80082ee <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082ca:	4a14      	ldr	r2, [pc, #80]	; (800831c <HAL_UART_IRQHandler+0x2b8>)
 80082cc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7fc fc24 	bl	8004b20 <HAL_DMA_Abort_IT>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d017      	beq.n	800830e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80082e8:	4610      	mov	r0, r2
 80082ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ec:	e00f      	b.n	800830e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 f9da 	bl	80086a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082f4:	e00b      	b.n	800830e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 f9d6 	bl	80086a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082fc:	e007      	b.n	800830e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f9d2 	bl	80086a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800830c:	e1b7      	b.n	800867e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800830e:	bf00      	nop
    return;
 8008310:	e1b5      	b.n	800867e <HAL_UART_IRQHandler+0x61a>
 8008312:	bf00      	nop
 8008314:	10000001 	.word	0x10000001
 8008318:	04000120 	.word	0x04000120
 800831c:	08009359 	.word	0x08009359

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008324:	2b01      	cmp	r3, #1
 8008326:	f040 814a 	bne.w	80085be <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800832a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800832e:	f003 0310 	and.w	r3, r3, #16
 8008332:	2b00      	cmp	r3, #0
 8008334:	f000 8143 	beq.w	80085be <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800833c:	f003 0310 	and.w	r3, r3, #16
 8008340:	2b00      	cmp	r3, #0
 8008342:	f000 813c 	beq.w	80085be <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2210      	movs	r2, #16
 800834c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008358:	2b40      	cmp	r3, #64	; 0x40
 800835a:	f040 80b5 	bne.w	80084c8 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800836a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800836e:	2b00      	cmp	r3, #0
 8008370:	f000 8187 	beq.w	8008682 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800837a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800837e:	429a      	cmp	r2, r3
 8008380:	f080 817f 	bcs.w	8008682 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800838a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f003 0320 	and.w	r3, r3, #32
 800839a:	2b00      	cmp	r3, #0
 800839c:	f040 8086 	bne.w	80084ac <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80083ac:	e853 3f00 	ldrex	r3, [r3]
 80083b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80083b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80083b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	461a      	mov	r2, r3
 80083c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80083ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80083d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80083da:	e841 2300 	strex	r3, r2, [r1]
 80083de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80083e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1da      	bne.n	80083a0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	3308      	adds	r3, #8
 80083f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083f4:	e853 3f00 	ldrex	r3, [r3]
 80083f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80083fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083fc:	f023 0301 	bic.w	r3, r3, #1
 8008400:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	3308      	adds	r3, #8
 800840a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800840e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008412:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008414:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008416:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800841a:	e841 2300 	strex	r3, r2, [r1]
 800841e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008420:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008422:	2b00      	cmp	r3, #0
 8008424:	d1e1      	bne.n	80083ea <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	3308      	adds	r3, #8
 800842c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008430:	e853 3f00 	ldrex	r3, [r3]
 8008434:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800843c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	3308      	adds	r3, #8
 8008446:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800844a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800844c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008450:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008452:	e841 2300 	strex	r3, r2, [r1]
 8008456:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008458:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800845a:	2b00      	cmp	r3, #0
 800845c:	d1e3      	bne.n	8008426 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2220      	movs	r2, #32
 8008462:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008474:	e853 3f00 	ldrex	r3, [r3]
 8008478:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800847a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800847c:	f023 0310 	bic.w	r3, r3, #16
 8008480:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	461a      	mov	r2, r3
 800848a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800848e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008490:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008492:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008494:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008496:	e841 2300 	strex	r3, r2, [r1]
 800849a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800849c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1e4      	bne.n	800846c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7fc fae1 	bl	8004a6e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	1ad3      	subs	r3, r2, r3
 80084bc:	b29b      	uxth	r3, r3
 80084be:	4619      	mov	r1, r3
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 f8fb 	bl	80086bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80084c6:	e0dc      	b.n	8008682 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	1ad3      	subs	r3, r2, r3
 80084d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f000 80ce 	beq.w	8008686 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80084ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	f000 80c9 	beq.w	8008686 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fc:	e853 3f00 	ldrex	r3, [r3]
 8008500:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008504:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008508:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	461a      	mov	r2, r3
 8008512:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008516:	647b      	str	r3, [r7, #68]	; 0x44
 8008518:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800851c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800851e:	e841 2300 	strex	r3, r2, [r1]
 8008522:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008526:	2b00      	cmp	r3, #0
 8008528:	d1e4      	bne.n	80084f4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	3308      	adds	r3, #8
 8008530:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008534:	e853 3f00 	ldrex	r3, [r3]
 8008538:	623b      	str	r3, [r7, #32]
   return(result);
 800853a:	6a3b      	ldr	r3, [r7, #32]
 800853c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008540:	f023 0301 	bic.w	r3, r3, #1
 8008544:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	3308      	adds	r3, #8
 800854e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008552:	633a      	str	r2, [r7, #48]	; 0x30
 8008554:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008556:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800855a:	e841 2300 	strex	r3, r2, [r1]
 800855e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1e1      	bne.n	800852a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2220      	movs	r2, #32
 800856a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	e853 3f00 	ldrex	r3, [r3]
 8008586:	60fb      	str	r3, [r7, #12]
   return(result);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f023 0310 	bic.w	r3, r3, #16
 800858e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	461a      	mov	r2, r3
 8008598:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800859c:	61fb      	str	r3, [r7, #28]
 800859e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a0:	69b9      	ldr	r1, [r7, #24]
 80085a2:	69fa      	ldr	r2, [r7, #28]
 80085a4:	e841 2300 	strex	r3, r2, [r1]
 80085a8:	617b      	str	r3, [r7, #20]
   return(result);
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d1e4      	bne.n	800857a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085b4:	4619      	mov	r1, r3
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f880 	bl	80086bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80085bc:	e063      	b.n	8008686 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80085be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00e      	beq.n	80085e8 <HAL_UART_IRQHandler+0x584>
 80085ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d008      	beq.n	80085e8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80085de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f001 fb57 	bl	8009c94 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085e6:	e051      	b.n	800868c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80085e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d014      	beq.n	800861e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80085f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d105      	bne.n	800860c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008604:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008608:	2b00      	cmp	r3, #0
 800860a:	d008      	beq.n	800861e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008610:	2b00      	cmp	r3, #0
 8008612:	d03a      	beq.n	800868a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	4798      	blx	r3
    }
    return;
 800861c:	e035      	b.n	800868a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800861e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008626:	2b00      	cmp	r3, #0
 8008628:	d009      	beq.n	800863e <HAL_UART_IRQHandler+0x5da>
 800862a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800862e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008632:	2b00      	cmp	r3, #0
 8008634:	d003      	beq.n	800863e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 fea4 	bl	8009384 <UART_EndTransmit_IT>
    return;
 800863c:	e026      	b.n	800868c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800863e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008642:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008646:	2b00      	cmp	r3, #0
 8008648:	d009      	beq.n	800865e <HAL_UART_IRQHandler+0x5fa>
 800864a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800864e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008652:	2b00      	cmp	r3, #0
 8008654:	d003      	beq.n	800865e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f001 fb30 	bl	8009cbc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800865c:	e016      	b.n	800868c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800865e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008662:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008666:	2b00      	cmp	r3, #0
 8008668:	d010      	beq.n	800868c <HAL_UART_IRQHandler+0x628>
 800866a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800866e:	2b00      	cmp	r3, #0
 8008670:	da0c      	bge.n	800868c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f001 fb18 	bl	8009ca8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008678:	e008      	b.n	800868c <HAL_UART_IRQHandler+0x628>
      return;
 800867a:	bf00      	nop
 800867c:	e006      	b.n	800868c <HAL_UART_IRQHandler+0x628>
    return;
 800867e:	bf00      	nop
 8008680:	e004      	b.n	800868c <HAL_UART_IRQHandler+0x628>
      return;
 8008682:	bf00      	nop
 8008684:	e002      	b.n	800868c <HAL_UART_IRQHandler+0x628>
      return;
 8008686:	bf00      	nop
 8008688:	e000      	b.n	800868c <HAL_UART_IRQHandler+0x628>
    return;
 800868a:	bf00      	nop
  }
}
 800868c:	37e8      	adds	r7, #232	; 0xe8
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop

08008694 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	460b      	mov	r3, r1
 80086c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80086c8:	bf00      	nop
 80086ca:	370c      	adds	r7, #12
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr

080086d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086d8:	b08c      	sub	sp, #48	; 0x30
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086de:	2300      	movs	r3, #0
 80086e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	689a      	ldr	r2, [r3, #8]
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	431a      	orrs	r2, r3
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	695b      	ldr	r3, [r3, #20]
 80086f2:	431a      	orrs	r2, r3
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	69db      	ldr	r3, [r3, #28]
 80086f8:	4313      	orrs	r3, r2
 80086fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	4baa      	ldr	r3, [pc, #680]	; (80089ac <UART_SetConfig+0x2d8>)
 8008704:	4013      	ands	r3, r2
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	6812      	ldr	r2, [r2, #0]
 800870a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800870c:	430b      	orrs	r3, r1
 800870e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	68da      	ldr	r2, [r3, #12]
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	430a      	orrs	r2, r1
 8008724:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	699b      	ldr	r3, [r3, #24]
 800872a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a9f      	ldr	r2, [pc, #636]	; (80089b0 <UART_SetConfig+0x2dc>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d004      	beq.n	8008740 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	6a1b      	ldr	r3, [r3, #32]
 800873a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800873c:	4313      	orrs	r3, r2
 800873e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800874a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800874e:	697a      	ldr	r2, [r7, #20]
 8008750:	6812      	ldr	r2, [r2, #0]
 8008752:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008754:	430b      	orrs	r3, r1
 8008756:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875e:	f023 010f 	bic.w	r1, r3, #15
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	430a      	orrs	r2, r1
 800876c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a90      	ldr	r2, [pc, #576]	; (80089b4 <UART_SetConfig+0x2e0>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d125      	bne.n	80087c4 <UART_SetConfig+0xf0>
 8008778:	4b8f      	ldr	r3, [pc, #572]	; (80089b8 <UART_SetConfig+0x2e4>)
 800877a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800877e:	f003 0303 	and.w	r3, r3, #3
 8008782:	2b03      	cmp	r3, #3
 8008784:	d81a      	bhi.n	80087bc <UART_SetConfig+0xe8>
 8008786:	a201      	add	r2, pc, #4	; (adr r2, 800878c <UART_SetConfig+0xb8>)
 8008788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878c:	0800879d 	.word	0x0800879d
 8008790:	080087ad 	.word	0x080087ad
 8008794:	080087a5 	.word	0x080087a5
 8008798:	080087b5 	.word	0x080087b5
 800879c:	2301      	movs	r3, #1
 800879e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087a2:	e116      	b.n	80089d2 <UART_SetConfig+0x2fe>
 80087a4:	2302      	movs	r3, #2
 80087a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087aa:	e112      	b.n	80089d2 <UART_SetConfig+0x2fe>
 80087ac:	2304      	movs	r3, #4
 80087ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087b2:	e10e      	b.n	80089d2 <UART_SetConfig+0x2fe>
 80087b4:	2308      	movs	r3, #8
 80087b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087ba:	e10a      	b.n	80089d2 <UART_SetConfig+0x2fe>
 80087bc:	2310      	movs	r3, #16
 80087be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087c2:	e106      	b.n	80089d2 <UART_SetConfig+0x2fe>
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a7c      	ldr	r2, [pc, #496]	; (80089bc <UART_SetConfig+0x2e8>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d138      	bne.n	8008840 <UART_SetConfig+0x16c>
 80087ce:	4b7a      	ldr	r3, [pc, #488]	; (80089b8 <UART_SetConfig+0x2e4>)
 80087d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087d4:	f003 030c 	and.w	r3, r3, #12
 80087d8:	2b0c      	cmp	r3, #12
 80087da:	d82d      	bhi.n	8008838 <UART_SetConfig+0x164>
 80087dc:	a201      	add	r2, pc, #4	; (adr r2, 80087e4 <UART_SetConfig+0x110>)
 80087de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e2:	bf00      	nop
 80087e4:	08008819 	.word	0x08008819
 80087e8:	08008839 	.word	0x08008839
 80087ec:	08008839 	.word	0x08008839
 80087f0:	08008839 	.word	0x08008839
 80087f4:	08008829 	.word	0x08008829
 80087f8:	08008839 	.word	0x08008839
 80087fc:	08008839 	.word	0x08008839
 8008800:	08008839 	.word	0x08008839
 8008804:	08008821 	.word	0x08008821
 8008808:	08008839 	.word	0x08008839
 800880c:	08008839 	.word	0x08008839
 8008810:	08008839 	.word	0x08008839
 8008814:	08008831 	.word	0x08008831
 8008818:	2300      	movs	r3, #0
 800881a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800881e:	e0d8      	b.n	80089d2 <UART_SetConfig+0x2fe>
 8008820:	2302      	movs	r3, #2
 8008822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008826:	e0d4      	b.n	80089d2 <UART_SetConfig+0x2fe>
 8008828:	2304      	movs	r3, #4
 800882a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800882e:	e0d0      	b.n	80089d2 <UART_SetConfig+0x2fe>
 8008830:	2308      	movs	r3, #8
 8008832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008836:	e0cc      	b.n	80089d2 <UART_SetConfig+0x2fe>
 8008838:	2310      	movs	r3, #16
 800883a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800883e:	e0c8      	b.n	80089d2 <UART_SetConfig+0x2fe>
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a5e      	ldr	r2, [pc, #376]	; (80089c0 <UART_SetConfig+0x2ec>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d125      	bne.n	8008896 <UART_SetConfig+0x1c2>
 800884a:	4b5b      	ldr	r3, [pc, #364]	; (80089b8 <UART_SetConfig+0x2e4>)
 800884c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008850:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008854:	2b30      	cmp	r3, #48	; 0x30
 8008856:	d016      	beq.n	8008886 <UART_SetConfig+0x1b2>
 8008858:	2b30      	cmp	r3, #48	; 0x30
 800885a:	d818      	bhi.n	800888e <UART_SetConfig+0x1ba>
 800885c:	2b20      	cmp	r3, #32
 800885e:	d00a      	beq.n	8008876 <UART_SetConfig+0x1a2>
 8008860:	2b20      	cmp	r3, #32
 8008862:	d814      	bhi.n	800888e <UART_SetConfig+0x1ba>
 8008864:	2b00      	cmp	r3, #0
 8008866:	d002      	beq.n	800886e <UART_SetConfig+0x19a>
 8008868:	2b10      	cmp	r3, #16
 800886a:	d008      	beq.n	800887e <UART_SetConfig+0x1aa>
 800886c:	e00f      	b.n	800888e <UART_SetConfig+0x1ba>
 800886e:	2300      	movs	r3, #0
 8008870:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008874:	e0ad      	b.n	80089d2 <UART_SetConfig+0x2fe>
 8008876:	2302      	movs	r3, #2
 8008878:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800887c:	e0a9      	b.n	80089d2 <UART_SetConfig+0x2fe>
 800887e:	2304      	movs	r3, #4
 8008880:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008884:	e0a5      	b.n	80089d2 <UART_SetConfig+0x2fe>
 8008886:	2308      	movs	r3, #8
 8008888:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800888c:	e0a1      	b.n	80089d2 <UART_SetConfig+0x2fe>
 800888e:	2310      	movs	r3, #16
 8008890:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008894:	e09d      	b.n	80089d2 <UART_SetConfig+0x2fe>
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a4a      	ldr	r2, [pc, #296]	; (80089c4 <UART_SetConfig+0x2f0>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d125      	bne.n	80088ec <UART_SetConfig+0x218>
 80088a0:	4b45      	ldr	r3, [pc, #276]	; (80089b8 <UART_SetConfig+0x2e4>)
 80088a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80088aa:	2bc0      	cmp	r3, #192	; 0xc0
 80088ac:	d016      	beq.n	80088dc <UART_SetConfig+0x208>
 80088ae:	2bc0      	cmp	r3, #192	; 0xc0
 80088b0:	d818      	bhi.n	80088e4 <UART_SetConfig+0x210>
 80088b2:	2b80      	cmp	r3, #128	; 0x80
 80088b4:	d00a      	beq.n	80088cc <UART_SetConfig+0x1f8>
 80088b6:	2b80      	cmp	r3, #128	; 0x80
 80088b8:	d814      	bhi.n	80088e4 <UART_SetConfig+0x210>
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d002      	beq.n	80088c4 <UART_SetConfig+0x1f0>
 80088be:	2b40      	cmp	r3, #64	; 0x40
 80088c0:	d008      	beq.n	80088d4 <UART_SetConfig+0x200>
 80088c2:	e00f      	b.n	80088e4 <UART_SetConfig+0x210>
 80088c4:	2300      	movs	r3, #0
 80088c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088ca:	e082      	b.n	80089d2 <UART_SetConfig+0x2fe>
 80088cc:	2302      	movs	r3, #2
 80088ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088d2:	e07e      	b.n	80089d2 <UART_SetConfig+0x2fe>
 80088d4:	2304      	movs	r3, #4
 80088d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088da:	e07a      	b.n	80089d2 <UART_SetConfig+0x2fe>
 80088dc:	2308      	movs	r3, #8
 80088de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088e2:	e076      	b.n	80089d2 <UART_SetConfig+0x2fe>
 80088e4:	2310      	movs	r3, #16
 80088e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088ea:	e072      	b.n	80089d2 <UART_SetConfig+0x2fe>
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a35      	ldr	r2, [pc, #212]	; (80089c8 <UART_SetConfig+0x2f4>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d12a      	bne.n	800894c <UART_SetConfig+0x278>
 80088f6:	4b30      	ldr	r3, [pc, #192]	; (80089b8 <UART_SetConfig+0x2e4>)
 80088f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008900:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008904:	d01a      	beq.n	800893c <UART_SetConfig+0x268>
 8008906:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800890a:	d81b      	bhi.n	8008944 <UART_SetConfig+0x270>
 800890c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008910:	d00c      	beq.n	800892c <UART_SetConfig+0x258>
 8008912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008916:	d815      	bhi.n	8008944 <UART_SetConfig+0x270>
 8008918:	2b00      	cmp	r3, #0
 800891a:	d003      	beq.n	8008924 <UART_SetConfig+0x250>
 800891c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008920:	d008      	beq.n	8008934 <UART_SetConfig+0x260>
 8008922:	e00f      	b.n	8008944 <UART_SetConfig+0x270>
 8008924:	2300      	movs	r3, #0
 8008926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800892a:	e052      	b.n	80089d2 <UART_SetConfig+0x2fe>
 800892c:	2302      	movs	r3, #2
 800892e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008932:	e04e      	b.n	80089d2 <UART_SetConfig+0x2fe>
 8008934:	2304      	movs	r3, #4
 8008936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800893a:	e04a      	b.n	80089d2 <UART_SetConfig+0x2fe>
 800893c:	2308      	movs	r3, #8
 800893e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008942:	e046      	b.n	80089d2 <UART_SetConfig+0x2fe>
 8008944:	2310      	movs	r3, #16
 8008946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800894a:	e042      	b.n	80089d2 <UART_SetConfig+0x2fe>
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a17      	ldr	r2, [pc, #92]	; (80089b0 <UART_SetConfig+0x2dc>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d13a      	bne.n	80089cc <UART_SetConfig+0x2f8>
 8008956:	4b18      	ldr	r3, [pc, #96]	; (80089b8 <UART_SetConfig+0x2e4>)
 8008958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800895c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008960:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008964:	d01a      	beq.n	800899c <UART_SetConfig+0x2c8>
 8008966:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800896a:	d81b      	bhi.n	80089a4 <UART_SetConfig+0x2d0>
 800896c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008970:	d00c      	beq.n	800898c <UART_SetConfig+0x2b8>
 8008972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008976:	d815      	bhi.n	80089a4 <UART_SetConfig+0x2d0>
 8008978:	2b00      	cmp	r3, #0
 800897a:	d003      	beq.n	8008984 <UART_SetConfig+0x2b0>
 800897c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008980:	d008      	beq.n	8008994 <UART_SetConfig+0x2c0>
 8008982:	e00f      	b.n	80089a4 <UART_SetConfig+0x2d0>
 8008984:	2300      	movs	r3, #0
 8008986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800898a:	e022      	b.n	80089d2 <UART_SetConfig+0x2fe>
 800898c:	2302      	movs	r3, #2
 800898e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008992:	e01e      	b.n	80089d2 <UART_SetConfig+0x2fe>
 8008994:	2304      	movs	r3, #4
 8008996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800899a:	e01a      	b.n	80089d2 <UART_SetConfig+0x2fe>
 800899c:	2308      	movs	r3, #8
 800899e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089a2:	e016      	b.n	80089d2 <UART_SetConfig+0x2fe>
 80089a4:	2310      	movs	r3, #16
 80089a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80089aa:	e012      	b.n	80089d2 <UART_SetConfig+0x2fe>
 80089ac:	cfff69f3 	.word	0xcfff69f3
 80089b0:	40008000 	.word	0x40008000
 80089b4:	40013800 	.word	0x40013800
 80089b8:	40021000 	.word	0x40021000
 80089bc:	40004400 	.word	0x40004400
 80089c0:	40004800 	.word	0x40004800
 80089c4:	40004c00 	.word	0x40004c00
 80089c8:	40005000 	.word	0x40005000
 80089cc:	2310      	movs	r3, #16
 80089ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4aae      	ldr	r2, [pc, #696]	; (8008c90 <UART_SetConfig+0x5bc>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	f040 8097 	bne.w	8008b0c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80089de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80089e2:	2b08      	cmp	r3, #8
 80089e4:	d823      	bhi.n	8008a2e <UART_SetConfig+0x35a>
 80089e6:	a201      	add	r2, pc, #4	; (adr r2, 80089ec <UART_SetConfig+0x318>)
 80089e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ec:	08008a11 	.word	0x08008a11
 80089f0:	08008a2f 	.word	0x08008a2f
 80089f4:	08008a19 	.word	0x08008a19
 80089f8:	08008a2f 	.word	0x08008a2f
 80089fc:	08008a1f 	.word	0x08008a1f
 8008a00:	08008a2f 	.word	0x08008a2f
 8008a04:	08008a2f 	.word	0x08008a2f
 8008a08:	08008a2f 	.word	0x08008a2f
 8008a0c:	08008a27 	.word	0x08008a27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a10:	f7fd f970 	bl	8005cf4 <HAL_RCC_GetPCLK1Freq>
 8008a14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a16:	e010      	b.n	8008a3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a18:	4b9e      	ldr	r3, [pc, #632]	; (8008c94 <UART_SetConfig+0x5c0>)
 8008a1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a1c:	e00d      	b.n	8008a3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a1e:	f7fd f8fb 	bl	8005c18 <HAL_RCC_GetSysClockFreq>
 8008a22:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a24:	e009      	b.n	8008a3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a2c:	e005      	b.n	8008a3a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008a38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f000 8130 	beq.w	8008ca2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a46:	4a94      	ldr	r2, [pc, #592]	; (8008c98 <UART_SetConfig+0x5c4>)
 8008a48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a50:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a54:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	685a      	ldr	r2, [r3, #4]
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	005b      	lsls	r3, r3, #1
 8008a5e:	4413      	add	r3, r2
 8008a60:	69ba      	ldr	r2, [r7, #24]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d305      	bcc.n	8008a72 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a6c:	69ba      	ldr	r2, [r7, #24]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d903      	bls.n	8008a7a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008a78:	e113      	b.n	8008ca2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	60bb      	str	r3, [r7, #8]
 8008a80:	60fa      	str	r2, [r7, #12]
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a86:	4a84      	ldr	r2, [pc, #528]	; (8008c98 <UART_SetConfig+0x5c4>)
 8008a88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	2200      	movs	r2, #0
 8008a90:	603b      	str	r3, [r7, #0]
 8008a92:	607a      	str	r2, [r7, #4]
 8008a94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008a9c:	f7f8 f90c 	bl	8000cb8 <__aeabi_uldivmod>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	4610      	mov	r0, r2
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	f04f 0200 	mov.w	r2, #0
 8008aac:	f04f 0300 	mov.w	r3, #0
 8008ab0:	020b      	lsls	r3, r1, #8
 8008ab2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008ab6:	0202      	lsls	r2, r0, #8
 8008ab8:	6979      	ldr	r1, [r7, #20]
 8008aba:	6849      	ldr	r1, [r1, #4]
 8008abc:	0849      	lsrs	r1, r1, #1
 8008abe:	2000      	movs	r0, #0
 8008ac0:	460c      	mov	r4, r1
 8008ac2:	4605      	mov	r5, r0
 8008ac4:	eb12 0804 	adds.w	r8, r2, r4
 8008ac8:	eb43 0905 	adc.w	r9, r3, r5
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	469a      	mov	sl, r3
 8008ad4:	4693      	mov	fp, r2
 8008ad6:	4652      	mov	r2, sl
 8008ad8:	465b      	mov	r3, fp
 8008ada:	4640      	mov	r0, r8
 8008adc:	4649      	mov	r1, r9
 8008ade:	f7f8 f8eb 	bl	8000cb8 <__aeabi_uldivmod>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008aea:	6a3b      	ldr	r3, [r7, #32]
 8008aec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008af0:	d308      	bcc.n	8008b04 <UART_SetConfig+0x430>
 8008af2:	6a3b      	ldr	r3, [r7, #32]
 8008af4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008af8:	d204      	bcs.n	8008b04 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	6a3a      	ldr	r2, [r7, #32]
 8008b00:	60da      	str	r2, [r3, #12]
 8008b02:	e0ce      	b.n	8008ca2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008b0a:	e0ca      	b.n	8008ca2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	69db      	ldr	r3, [r3, #28]
 8008b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b14:	d166      	bne.n	8008be4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008b16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008b1a:	2b08      	cmp	r3, #8
 8008b1c:	d827      	bhi.n	8008b6e <UART_SetConfig+0x49a>
 8008b1e:	a201      	add	r2, pc, #4	; (adr r2, 8008b24 <UART_SetConfig+0x450>)
 8008b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b24:	08008b49 	.word	0x08008b49
 8008b28:	08008b51 	.word	0x08008b51
 8008b2c:	08008b59 	.word	0x08008b59
 8008b30:	08008b6f 	.word	0x08008b6f
 8008b34:	08008b5f 	.word	0x08008b5f
 8008b38:	08008b6f 	.word	0x08008b6f
 8008b3c:	08008b6f 	.word	0x08008b6f
 8008b40:	08008b6f 	.word	0x08008b6f
 8008b44:	08008b67 	.word	0x08008b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b48:	f7fd f8d4 	bl	8005cf4 <HAL_RCC_GetPCLK1Freq>
 8008b4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b4e:	e014      	b.n	8008b7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b50:	f7fd f8e6 	bl	8005d20 <HAL_RCC_GetPCLK2Freq>
 8008b54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b56:	e010      	b.n	8008b7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b58:	4b4e      	ldr	r3, [pc, #312]	; (8008c94 <UART_SetConfig+0x5c0>)
 8008b5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b5c:	e00d      	b.n	8008b7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b5e:	f7fd f85b 	bl	8005c18 <HAL_RCC_GetSysClockFreq>
 8008b62:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b64:	e009      	b.n	8008b7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b6c:	e005      	b.n	8008b7a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008b78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f000 8090 	beq.w	8008ca2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b86:	4a44      	ldr	r2, [pc, #272]	; (8008c98 <UART_SetConfig+0x5c4>)
 8008b88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b90:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b94:	005a      	lsls	r2, r3, #1
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	085b      	lsrs	r3, r3, #1
 8008b9c:	441a      	add	r2, r3
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ba6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ba8:	6a3b      	ldr	r3, [r7, #32]
 8008baa:	2b0f      	cmp	r3, #15
 8008bac:	d916      	bls.n	8008bdc <UART_SetConfig+0x508>
 8008bae:	6a3b      	ldr	r3, [r7, #32]
 8008bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bb4:	d212      	bcs.n	8008bdc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008bb6:	6a3b      	ldr	r3, [r7, #32]
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	f023 030f 	bic.w	r3, r3, #15
 8008bbe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008bc0:	6a3b      	ldr	r3, [r7, #32]
 8008bc2:	085b      	lsrs	r3, r3, #1
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	f003 0307 	and.w	r3, r3, #7
 8008bca:	b29a      	uxth	r2, r3
 8008bcc:	8bfb      	ldrh	r3, [r7, #30]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	8bfa      	ldrh	r2, [r7, #30]
 8008bd8:	60da      	str	r2, [r3, #12]
 8008bda:	e062      	b.n	8008ca2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008be2:	e05e      	b.n	8008ca2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008be4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008be8:	2b08      	cmp	r3, #8
 8008bea:	d828      	bhi.n	8008c3e <UART_SetConfig+0x56a>
 8008bec:	a201      	add	r2, pc, #4	; (adr r2, 8008bf4 <UART_SetConfig+0x520>)
 8008bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf2:	bf00      	nop
 8008bf4:	08008c19 	.word	0x08008c19
 8008bf8:	08008c21 	.word	0x08008c21
 8008bfc:	08008c29 	.word	0x08008c29
 8008c00:	08008c3f 	.word	0x08008c3f
 8008c04:	08008c2f 	.word	0x08008c2f
 8008c08:	08008c3f 	.word	0x08008c3f
 8008c0c:	08008c3f 	.word	0x08008c3f
 8008c10:	08008c3f 	.word	0x08008c3f
 8008c14:	08008c37 	.word	0x08008c37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c18:	f7fd f86c 	bl	8005cf4 <HAL_RCC_GetPCLK1Freq>
 8008c1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c1e:	e014      	b.n	8008c4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c20:	f7fd f87e 	bl	8005d20 <HAL_RCC_GetPCLK2Freq>
 8008c24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c26:	e010      	b.n	8008c4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c28:	4b1a      	ldr	r3, [pc, #104]	; (8008c94 <UART_SetConfig+0x5c0>)
 8008c2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c2c:	e00d      	b.n	8008c4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c2e:	f7fc fff3 	bl	8005c18 <HAL_RCC_GetSysClockFreq>
 8008c32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c34:	e009      	b.n	8008c4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c3c:	e005      	b.n	8008c4a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008c48:	bf00      	nop
    }

    if (pclk != 0U)
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d028      	beq.n	8008ca2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c54:	4a10      	ldr	r2, [pc, #64]	; (8008c98 <UART_SetConfig+0x5c4>)
 8008c56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	085b      	lsrs	r3, r3, #1
 8008c68:	441a      	add	r2, r3
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c72:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c74:	6a3b      	ldr	r3, [r7, #32]
 8008c76:	2b0f      	cmp	r3, #15
 8008c78:	d910      	bls.n	8008c9c <UART_SetConfig+0x5c8>
 8008c7a:	6a3b      	ldr	r3, [r7, #32]
 8008c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c80:	d20c      	bcs.n	8008c9c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c82:	6a3b      	ldr	r3, [r7, #32]
 8008c84:	b29a      	uxth	r2, r3
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	60da      	str	r2, [r3, #12]
 8008c8c:	e009      	b.n	8008ca2 <UART_SetConfig+0x5ce>
 8008c8e:	bf00      	nop
 8008c90:	40008000 	.word	0x40008000
 8008c94:	00f42400 	.word	0x00f42400
 8008c98:	0800ceac 	.word	0x0800ceac
      }
      else
      {
        ret = HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	2201      	movs	r2, #1
 8008cae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008cbe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3730      	adds	r7, #48	; 0x30
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008ccc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd8:	f003 0301 	and.w	r3, r3, #1
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00a      	beq.n	8008cf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	430a      	orrs	r2, r1
 8008cf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cfa:	f003 0302 	and.w	r3, r3, #2
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00a      	beq.n	8008d18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	430a      	orrs	r2, r1
 8008d16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d1c:	f003 0304 	and.w	r3, r3, #4
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00a      	beq.n	8008d3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	430a      	orrs	r2, r1
 8008d38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d3e:	f003 0308 	and.w	r3, r3, #8
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00a      	beq.n	8008d5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	430a      	orrs	r2, r1
 8008d5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d60:	f003 0310 	and.w	r3, r3, #16
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00a      	beq.n	8008d7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	430a      	orrs	r2, r1
 8008d7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d82:	f003 0320 	and.w	r3, r3, #32
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00a      	beq.n	8008da0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	430a      	orrs	r2, r1
 8008d9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d01a      	beq.n	8008de2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	430a      	orrs	r2, r1
 8008dc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dca:	d10a      	bne.n	8008de2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	430a      	orrs	r2, r1
 8008de0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d00a      	beq.n	8008e04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	430a      	orrs	r2, r1
 8008e02:	605a      	str	r2, [r3, #4]
  }
}
 8008e04:	bf00      	nop
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b086      	sub	sp, #24
 8008e14:	af02      	add	r7, sp, #8
 8008e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e20:	f7f9 fc22 	bl	8002668 <HAL_GetTick>
 8008e24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f003 0308 	and.w	r3, r3, #8
 8008e30:	2b08      	cmp	r3, #8
 8008e32:	d10e      	bne.n	8008e52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e38:	9300      	str	r3, [sp, #0]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 f82f 	bl	8008ea6 <UART_WaitOnFlagUntilTimeout>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d001      	beq.n	8008e52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e4e:	2303      	movs	r3, #3
 8008e50:	e025      	b.n	8008e9e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f003 0304 	and.w	r3, r3, #4
 8008e5c:	2b04      	cmp	r3, #4
 8008e5e:	d10e      	bne.n	8008e7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e64:	9300      	str	r3, [sp, #0]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f819 	bl	8008ea6 <UART_WaitOnFlagUntilTimeout>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d001      	beq.n	8008e7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e7a:	2303      	movs	r3, #3
 8008e7c:	e00f      	b.n	8008e9e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2220      	movs	r2, #32
 8008e82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2220      	movs	r2, #32
 8008e8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b09c      	sub	sp, #112	; 0x70
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	60f8      	str	r0, [r7, #12]
 8008eae:	60b9      	str	r1, [r7, #8]
 8008eb0:	603b      	str	r3, [r7, #0]
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008eb6:	e0a9      	b.n	800900c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008eb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ebe:	f000 80a5 	beq.w	800900c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ec2:	f7f9 fbd1 	bl	8002668 <HAL_GetTick>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	1ad3      	subs	r3, r2, r3
 8008ecc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d302      	bcc.n	8008ed8 <UART_WaitOnFlagUntilTimeout+0x32>
 8008ed2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d140      	bne.n	8008f5a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ee0:	e853 3f00 	ldrex	r3, [r3]
 8008ee4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ee8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008eec:	667b      	str	r3, [r7, #100]	; 0x64
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ef6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ef8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008efa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008efc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008efe:	e841 2300 	strex	r3, r2, [r1]
 8008f02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008f04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1e6      	bne.n	8008ed8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	3308      	adds	r3, #8
 8008f10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f14:	e853 3f00 	ldrex	r3, [r3]
 8008f18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1c:	f023 0301 	bic.w	r3, r3, #1
 8008f20:	663b      	str	r3, [r7, #96]	; 0x60
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	3308      	adds	r3, #8
 8008f28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008f2a:	64ba      	str	r2, [r7, #72]	; 0x48
 8008f2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f32:	e841 2300 	strex	r3, r2, [r1]
 8008f36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1e5      	bne.n	8008f0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2220      	movs	r2, #32
 8008f42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2220      	movs	r2, #32
 8008f4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008f56:	2303      	movs	r3, #3
 8008f58:	e069      	b.n	800902e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f003 0304 	and.w	r3, r3, #4
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d051      	beq.n	800900c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	69db      	ldr	r3, [r3, #28]
 8008f6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f76:	d149      	bne.n	800900c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f80:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8a:	e853 3f00 	ldrex	r3, [r3]
 8008f8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8008fa2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008fa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fa8:	e841 2300 	strex	r3, r2, [r1]
 8008fac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d1e6      	bne.n	8008f82 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	3308      	adds	r3, #8
 8008fba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	e853 3f00 	ldrex	r3, [r3]
 8008fc2:	613b      	str	r3, [r7, #16]
   return(result);
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	f023 0301 	bic.w	r3, r3, #1
 8008fca:	66bb      	str	r3, [r7, #104]	; 0x68
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	3308      	adds	r3, #8
 8008fd2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008fd4:	623a      	str	r2, [r7, #32]
 8008fd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd8:	69f9      	ldr	r1, [r7, #28]
 8008fda:	6a3a      	ldr	r2, [r7, #32]
 8008fdc:	e841 2300 	strex	r3, r2, [r1]
 8008fe0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d1e5      	bne.n	8008fb4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2220      	movs	r2, #32
 8008fec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2220      	movs	r2, #32
 8008ff4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2220      	movs	r2, #32
 8008ffc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2200      	movs	r2, #0
 8009004:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009008:	2303      	movs	r3, #3
 800900a:	e010      	b.n	800902e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	69da      	ldr	r2, [r3, #28]
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	4013      	ands	r3, r2
 8009016:	68ba      	ldr	r2, [r7, #8]
 8009018:	429a      	cmp	r2, r3
 800901a:	bf0c      	ite	eq
 800901c:	2301      	moveq	r3, #1
 800901e:	2300      	movne	r3, #0
 8009020:	b2db      	uxtb	r3, r3
 8009022:	461a      	mov	r2, r3
 8009024:	79fb      	ldrb	r3, [r7, #7]
 8009026:	429a      	cmp	r2, r3
 8009028:	f43f af46 	beq.w	8008eb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3770      	adds	r7, #112	; 0x70
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
	...

08009038 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009038:	b480      	push	{r7}
 800903a:	b0a3      	sub	sp, #140	; 0x8c
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	4613      	mov	r3, r2
 8009044:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	68ba      	ldr	r2, [r7, #8]
 800904a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	88fa      	ldrh	r2, [r7, #6]
 8009050:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	88fa      	ldrh	r2, [r7, #6]
 8009058:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2200      	movs	r2, #0
 8009060:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800906a:	d10e      	bne.n	800908a <UART_Start_Receive_IT+0x52>
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	691b      	ldr	r3, [r3, #16]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d105      	bne.n	8009080 <UART_Start_Receive_IT+0x48>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f240 12ff 	movw	r2, #511	; 0x1ff
 800907a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800907e:	e02d      	b.n	80090dc <UART_Start_Receive_IT+0xa4>
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	22ff      	movs	r2, #255	; 0xff
 8009084:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009088:	e028      	b.n	80090dc <UART_Start_Receive_IT+0xa4>
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d10d      	bne.n	80090ae <UART_Start_Receive_IT+0x76>
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	691b      	ldr	r3, [r3, #16]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d104      	bne.n	80090a4 <UART_Start_Receive_IT+0x6c>
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	22ff      	movs	r2, #255	; 0xff
 800909e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090a2:	e01b      	b.n	80090dc <UART_Start_Receive_IT+0xa4>
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	227f      	movs	r2, #127	; 0x7f
 80090a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090ac:	e016      	b.n	80090dc <UART_Start_Receive_IT+0xa4>
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090b6:	d10d      	bne.n	80090d4 <UART_Start_Receive_IT+0x9c>
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d104      	bne.n	80090ca <UART_Start_Receive_IT+0x92>
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	227f      	movs	r2, #127	; 0x7f
 80090c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090c8:	e008      	b.n	80090dc <UART_Start_Receive_IT+0xa4>
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	223f      	movs	r2, #63	; 0x3f
 80090ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090d2:	e003      	b.n	80090dc <UART_Start_Receive_IT+0xa4>
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2200      	movs	r2, #0
 80090d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2200      	movs	r2, #0
 80090e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2222      	movs	r2, #34	; 0x22
 80090e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	3308      	adds	r3, #8
 80090f2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090f6:	e853 3f00 	ldrex	r3, [r3]
 80090fa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80090fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090fe:	f043 0301 	orr.w	r3, r3, #1
 8009102:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	3308      	adds	r3, #8
 800910c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009110:	673a      	str	r2, [r7, #112]	; 0x70
 8009112:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009114:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009116:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009118:	e841 2300 	strex	r3, r2, [r1]
 800911c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800911e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009120:	2b00      	cmp	r3, #0
 8009122:	d1e3      	bne.n	80090ec <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009128:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800912c:	d153      	bne.n	80091d6 <UART_Start_Receive_IT+0x19e>
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009134:	88fa      	ldrh	r2, [r7, #6]
 8009136:	429a      	cmp	r2, r3
 8009138:	d34d      	bcc.n	80091d6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009142:	d107      	bne.n	8009154 <UART_Start_Receive_IT+0x11c>
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	691b      	ldr	r3, [r3, #16]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d103      	bne.n	8009154 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	4a4b      	ldr	r2, [pc, #300]	; (800927c <UART_Start_Receive_IT+0x244>)
 8009150:	671a      	str	r2, [r3, #112]	; 0x70
 8009152:	e002      	b.n	800915a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	4a4a      	ldr	r2, [pc, #296]	; (8009280 <UART_Start_Receive_IT+0x248>)
 8009158:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2200      	movs	r2, #0
 800915e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	691b      	ldr	r3, [r3, #16]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d01a      	beq.n	80091a0 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009172:	e853 3f00 	ldrex	r3, [r3]
 8009176:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800917a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800917e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	461a      	mov	r2, r3
 8009188:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800918c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800918e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009190:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009192:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009194:	e841 2300 	strex	r3, r2, [r1]
 8009198:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800919a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800919c:	2b00      	cmp	r3, #0
 800919e:	d1e4      	bne.n	800916a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	3308      	adds	r3, #8
 80091a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091aa:	e853 3f00 	ldrex	r3, [r3]
 80091ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	3308      	adds	r3, #8
 80091be:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80091c0:	64ba      	str	r2, [r7, #72]	; 0x48
 80091c2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80091c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091c8:	e841 2300 	strex	r3, r2, [r1]
 80091cc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80091ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d1e5      	bne.n	80091a0 <UART_Start_Receive_IT+0x168>
 80091d4:	e04a      	b.n	800926c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	689b      	ldr	r3, [r3, #8]
 80091da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091de:	d107      	bne.n	80091f0 <UART_Start_Receive_IT+0x1b8>
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d103      	bne.n	80091f0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	4a26      	ldr	r2, [pc, #152]	; (8009284 <UART_Start_Receive_IT+0x24c>)
 80091ec:	671a      	str	r2, [r3, #112]	; 0x70
 80091ee:	e002      	b.n	80091f6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	4a25      	ldr	r2, [pc, #148]	; (8009288 <UART_Start_Receive_IT+0x250>)
 80091f4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d019      	beq.n	800923a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920e:	e853 3f00 	ldrex	r3, [r3]
 8009212:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009216:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800921a:	677b      	str	r3, [r7, #116]	; 0x74
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	461a      	mov	r2, r3
 8009222:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009224:	637b      	str	r3, [r7, #52]	; 0x34
 8009226:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009228:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800922a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800922c:	e841 2300 	strex	r3, r2, [r1]
 8009230:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009234:	2b00      	cmp	r3, #0
 8009236:	d1e6      	bne.n	8009206 <UART_Start_Receive_IT+0x1ce>
 8009238:	e018      	b.n	800926c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	e853 3f00 	ldrex	r3, [r3]
 8009246:	613b      	str	r3, [r7, #16]
   return(result);
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	f043 0320 	orr.w	r3, r3, #32
 800924e:	67bb      	str	r3, [r7, #120]	; 0x78
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	461a      	mov	r2, r3
 8009256:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009258:	623b      	str	r3, [r7, #32]
 800925a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925c:	69f9      	ldr	r1, [r7, #28]
 800925e:	6a3a      	ldr	r2, [r7, #32]
 8009260:	e841 2300 	strex	r3, r2, [r1]
 8009264:	61bb      	str	r3, [r7, #24]
   return(result);
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1e6      	bne.n	800923a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	378c      	adds	r7, #140	; 0x8c
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop
 800927c:	08009995 	.word	0x08009995
 8009280:	0800969d 	.word	0x0800969d
 8009284:	0800953b 	.word	0x0800953b
 8009288:	080093db 	.word	0x080093db

0800928c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800928c:	b480      	push	{r7}
 800928e:	b095      	sub	sp, #84	; 0x54
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800929c:	e853 3f00 	ldrex	r3, [r3]
 80092a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80092a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	461a      	mov	r2, r3
 80092b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092b2:	643b      	str	r3, [r7, #64]	; 0x40
 80092b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80092b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092ba:	e841 2300 	strex	r3, r2, [r1]
 80092be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d1e6      	bne.n	8009294 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	3308      	adds	r3, #8
 80092cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ce:	6a3b      	ldr	r3, [r7, #32]
 80092d0:	e853 3f00 	ldrex	r3, [r3]
 80092d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092dc:	f023 0301 	bic.w	r3, r3, #1
 80092e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	3308      	adds	r3, #8
 80092e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80092ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092f2:	e841 2300 	strex	r3, r2, [r1]
 80092f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d1e3      	bne.n	80092c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009302:	2b01      	cmp	r3, #1
 8009304:	d118      	bne.n	8009338 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	e853 3f00 	ldrex	r3, [r3]
 8009312:	60bb      	str	r3, [r7, #8]
   return(result);
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	f023 0310 	bic.w	r3, r3, #16
 800931a:	647b      	str	r3, [r7, #68]	; 0x44
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	461a      	mov	r2, r3
 8009322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009324:	61bb      	str	r3, [r7, #24]
 8009326:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009328:	6979      	ldr	r1, [r7, #20]
 800932a:	69ba      	ldr	r2, [r7, #24]
 800932c:	e841 2300 	strex	r3, r2, [r1]
 8009330:	613b      	str	r3, [r7, #16]
   return(result);
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d1e6      	bne.n	8009306 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2220      	movs	r2, #32
 800933c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2200      	movs	r2, #0
 8009344:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800934c:	bf00      	nop
 800934e:	3754      	adds	r7, #84	; 0x54
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009364:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2200      	movs	r2, #0
 800936a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2200      	movs	r2, #0
 8009372:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f7ff f996 	bl	80086a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800937c:	bf00      	nop
 800937e:	3710      	adds	r7, #16
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b088      	sub	sp, #32
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	e853 3f00 	ldrex	r3, [r3]
 8009398:	60bb      	str	r3, [r7, #8]
   return(result);
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093a0:	61fb      	str	r3, [r7, #28]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	461a      	mov	r2, r3
 80093a8:	69fb      	ldr	r3, [r7, #28]
 80093aa:	61bb      	str	r3, [r7, #24]
 80093ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ae:	6979      	ldr	r1, [r7, #20]
 80093b0:	69ba      	ldr	r2, [r7, #24]
 80093b2:	e841 2300 	strex	r3, r2, [r1]
 80093b6:	613b      	str	r3, [r7, #16]
   return(result);
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d1e6      	bne.n	800938c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2220      	movs	r2, #32
 80093c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f7ff f961 	bl	8008694 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093d2:	bf00      	nop
 80093d4:	3720      	adds	r7, #32
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b096      	sub	sp, #88	; 0x58
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80093e8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093f2:	2b22      	cmp	r3, #34	; 0x22
 80093f4:	f040 8095 	bne.w	8009522 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fe:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009402:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009406:	b2d9      	uxtb	r1, r3
 8009408:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800940c:	b2da      	uxtb	r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009412:	400a      	ands	r2, r1
 8009414:	b2d2      	uxtb	r2, r2
 8009416:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800941c:	1c5a      	adds	r2, r3, #1
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009428:	b29b      	uxth	r3, r3
 800942a:	3b01      	subs	r3, #1
 800942c:	b29a      	uxth	r2, r3
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800943a:	b29b      	uxth	r3, r3
 800943c:	2b00      	cmp	r3, #0
 800943e:	d178      	bne.n	8009532 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009448:	e853 3f00 	ldrex	r3, [r3]
 800944c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800944e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009450:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009454:	653b      	str	r3, [r7, #80]	; 0x50
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	461a      	mov	r2, r3
 800945c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800945e:	647b      	str	r3, [r7, #68]	; 0x44
 8009460:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009462:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009464:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009466:	e841 2300 	strex	r3, r2, [r1]
 800946a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800946c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1e6      	bne.n	8009440 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	3308      	adds	r3, #8
 8009478:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947c:	e853 3f00 	ldrex	r3, [r3]
 8009480:	623b      	str	r3, [r7, #32]
   return(result);
 8009482:	6a3b      	ldr	r3, [r7, #32]
 8009484:	f023 0301 	bic.w	r3, r3, #1
 8009488:	64fb      	str	r3, [r7, #76]	; 0x4c
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	3308      	adds	r3, #8
 8009490:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009492:	633a      	str	r2, [r7, #48]	; 0x30
 8009494:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009496:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800949a:	e841 2300 	strex	r3, r2, [r1]
 800949e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d1e5      	bne.n	8009472 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2220      	movs	r2, #32
 80094aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d12e      	bne.n	800951a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	e853 3f00 	ldrex	r3, [r3]
 80094ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f023 0310 	bic.w	r3, r3, #16
 80094d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	461a      	mov	r2, r3
 80094de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094e0:	61fb      	str	r3, [r7, #28]
 80094e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e4:	69b9      	ldr	r1, [r7, #24]
 80094e6:	69fa      	ldr	r2, [r7, #28]
 80094e8:	e841 2300 	strex	r3, r2, [r1]
 80094ec:	617b      	str	r3, [r7, #20]
   return(result);
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d1e6      	bne.n	80094c2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	69db      	ldr	r3, [r3, #28]
 80094fa:	f003 0310 	and.w	r3, r3, #16
 80094fe:	2b10      	cmp	r3, #16
 8009500:	d103      	bne.n	800950a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2210      	movs	r2, #16
 8009508:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009510:	4619      	mov	r1, r3
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f7ff f8d2 	bl	80086bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009518:	e00b      	b.n	8009532 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f7f9 f83a 	bl	8002594 <HAL_UART_RxCpltCallback>
}
 8009520:	e007      	b.n	8009532 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	699a      	ldr	r2, [r3, #24]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f042 0208 	orr.w	r2, r2, #8
 8009530:	619a      	str	r2, [r3, #24]
}
 8009532:	bf00      	nop
 8009534:	3758      	adds	r7, #88	; 0x58
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b096      	sub	sp, #88	; 0x58
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009548:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009552:	2b22      	cmp	r3, #34	; 0x22
 8009554:	f040 8095 	bne.w	8009682 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800955e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009566:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009568:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800956c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009570:	4013      	ands	r3, r2
 8009572:	b29a      	uxth	r2, r3
 8009574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009576:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800957c:	1c9a      	adds	r2, r3, #2
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009588:	b29b      	uxth	r3, r3
 800958a:	3b01      	subs	r3, #1
 800958c:	b29a      	uxth	r2, r3
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800959a:	b29b      	uxth	r3, r3
 800959c:	2b00      	cmp	r3, #0
 800959e:	d178      	bne.n	8009692 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a8:	e853 3f00 	ldrex	r3, [r3]
 80095ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80095ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80095b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	461a      	mov	r2, r3
 80095bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095be:	643b      	str	r3, [r7, #64]	; 0x40
 80095c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80095c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095c6:	e841 2300 	strex	r3, r2, [r1]
 80095ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80095cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d1e6      	bne.n	80095a0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	3308      	adds	r3, #8
 80095d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095da:	6a3b      	ldr	r3, [r7, #32]
 80095dc:	e853 3f00 	ldrex	r3, [r3]
 80095e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	f023 0301 	bic.w	r3, r3, #1
 80095e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	3308      	adds	r3, #8
 80095f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80095f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095fa:	e841 2300 	strex	r3, r2, [r1]
 80095fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1e5      	bne.n	80095d2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2220      	movs	r2, #32
 800960a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2200      	movs	r2, #0
 8009612:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009618:	2b01      	cmp	r3, #1
 800961a:	d12e      	bne.n	800967a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	e853 3f00 	ldrex	r3, [r3]
 800962e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	f023 0310 	bic.w	r3, r3, #16
 8009636:	647b      	str	r3, [r7, #68]	; 0x44
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	461a      	mov	r2, r3
 800963e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009640:	61bb      	str	r3, [r7, #24]
 8009642:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009644:	6979      	ldr	r1, [r7, #20]
 8009646:	69ba      	ldr	r2, [r7, #24]
 8009648:	e841 2300 	strex	r3, r2, [r1]
 800964c:	613b      	str	r3, [r7, #16]
   return(result);
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d1e6      	bne.n	8009622 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	69db      	ldr	r3, [r3, #28]
 800965a:	f003 0310 	and.w	r3, r3, #16
 800965e:	2b10      	cmp	r3, #16
 8009660:	d103      	bne.n	800966a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	2210      	movs	r2, #16
 8009668:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009670:	4619      	mov	r1, r3
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f7ff f822 	bl	80086bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009678:	e00b      	b.n	8009692 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f7f8 ff8a 	bl	8002594 <HAL_UART_RxCpltCallback>
}
 8009680:	e007      	b.n	8009692 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	699a      	ldr	r2, [r3, #24]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f042 0208 	orr.w	r2, r2, #8
 8009690:	619a      	str	r2, [r3, #24]
}
 8009692:	bf00      	nop
 8009694:	3758      	adds	r7, #88	; 0x58
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
	...

0800969c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b0a6      	sub	sp, #152	; 0x98
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80096aa:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	69db      	ldr	r3, [r3, #28]
 80096b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096d2:	2b22      	cmp	r3, #34	; 0x22
 80096d4:	f040 814f 	bne.w	8009976 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80096de:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80096e2:	e0f6      	b.n	80098d2 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ea:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80096ee:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80096f2:	b2d9      	uxtb	r1, r3
 80096f4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80096f8:	b2da      	uxtb	r2, r3
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096fe:	400a      	ands	r2, r1
 8009700:	b2d2      	uxtb	r2, r2
 8009702:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009708:	1c5a      	adds	r2, r3, #1
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009714:	b29b      	uxth	r3, r3
 8009716:	3b01      	subs	r3, #1
 8009718:	b29a      	uxth	r2, r3
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	69db      	ldr	r3, [r3, #28]
 8009726:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800972a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800972e:	f003 0307 	and.w	r3, r3, #7
 8009732:	2b00      	cmp	r3, #0
 8009734:	d053      	beq.n	80097de <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009736:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800973a:	f003 0301 	and.w	r3, r3, #1
 800973e:	2b00      	cmp	r3, #0
 8009740:	d011      	beq.n	8009766 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009742:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800974a:	2b00      	cmp	r3, #0
 800974c:	d00b      	beq.n	8009766 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2201      	movs	r2, #1
 8009754:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800975c:	f043 0201 	orr.w	r2, r3, #1
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009766:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800976a:	f003 0302 	and.w	r3, r3, #2
 800976e:	2b00      	cmp	r3, #0
 8009770:	d011      	beq.n	8009796 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009772:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009776:	f003 0301 	and.w	r3, r3, #1
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00b      	beq.n	8009796 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	2202      	movs	r2, #2
 8009784:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800978c:	f043 0204 	orr.w	r2, r3, #4
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009796:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800979a:	f003 0304 	and.w	r3, r3, #4
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d011      	beq.n	80097c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80097a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097a6:	f003 0301 	and.w	r3, r3, #1
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d00b      	beq.n	80097c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	2204      	movs	r2, #4
 80097b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097bc:	f043 0202 	orr.w	r2, r3, #2
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d006      	beq.n	80097de <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f7fe ff69 	bl	80086a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2200      	movs	r2, #0
 80097da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d173      	bne.n	80098d2 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097f2:	e853 3f00 	ldrex	r3, [r3]
 80097f6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80097f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80097fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	461a      	mov	r2, r3
 8009808:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800980c:	66bb      	str	r3, [r7, #104]	; 0x68
 800980e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009810:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009812:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009814:	e841 2300 	strex	r3, r2, [r1]
 8009818:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800981a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800981c:	2b00      	cmp	r3, #0
 800981e:	d1e4      	bne.n	80097ea <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	3308      	adds	r3, #8
 8009826:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009828:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800982a:	e853 3f00 	ldrex	r3, [r3]
 800982e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009836:	f023 0301 	bic.w	r3, r3, #1
 800983a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	3308      	adds	r3, #8
 8009842:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009844:	657a      	str	r2, [r7, #84]	; 0x54
 8009846:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009848:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800984a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800984c:	e841 2300 	strex	r3, r2, [r1]
 8009850:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009854:	2b00      	cmp	r3, #0
 8009856:	d1e3      	bne.n	8009820 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2220      	movs	r2, #32
 800985c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800986a:	2b01      	cmp	r3, #1
 800986c:	d12e      	bne.n	80098cc <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800987a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800987c:	e853 3f00 	ldrex	r3, [r3]
 8009880:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009884:	f023 0310 	bic.w	r3, r3, #16
 8009888:	67bb      	str	r3, [r7, #120]	; 0x78
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	461a      	mov	r2, r3
 8009890:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009892:	643b      	str	r3, [r7, #64]	; 0x40
 8009894:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009896:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009898:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800989a:	e841 2300 	strex	r3, r2, [r1]
 800989e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80098a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d1e6      	bne.n	8009874 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	69db      	ldr	r3, [r3, #28]
 80098ac:	f003 0310 	and.w	r3, r3, #16
 80098b0:	2b10      	cmp	r3, #16
 80098b2:	d103      	bne.n	80098bc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2210      	movs	r2, #16
 80098ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80098c2:	4619      	mov	r1, r3
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f7fe fef9 	bl	80086bc <HAL_UARTEx_RxEventCallback>
 80098ca:	e002      	b.n	80098d2 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f7f8 fe61 	bl	8002594 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80098d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d006      	beq.n	80098e8 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80098da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80098de:	f003 0320 	and.w	r3, r3, #32
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	f47f aefe 	bne.w	80096e4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098ee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80098f2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d045      	beq.n	8009986 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009900:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009904:	429a      	cmp	r2, r3
 8009906:	d23e      	bcs.n	8009986 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	3308      	adds	r3, #8
 800990e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009910:	6a3b      	ldr	r3, [r7, #32]
 8009912:	e853 3f00 	ldrex	r3, [r3]
 8009916:	61fb      	str	r3, [r7, #28]
   return(result);
 8009918:	69fb      	ldr	r3, [r7, #28]
 800991a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800991e:	673b      	str	r3, [r7, #112]	; 0x70
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	3308      	adds	r3, #8
 8009926:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009928:	62fa      	str	r2, [r7, #44]	; 0x2c
 800992a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800992e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009930:	e841 2300 	strex	r3, r2, [r1]
 8009934:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009938:	2b00      	cmp	r3, #0
 800993a:	d1e5      	bne.n	8009908 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4a14      	ldr	r2, [pc, #80]	; (8009990 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009940:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	e853 3f00 	ldrex	r3, [r3]
 800994e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	f043 0320 	orr.w	r3, r3, #32
 8009956:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	461a      	mov	r2, r3
 800995e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009960:	61bb      	str	r3, [r7, #24]
 8009962:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009964:	6979      	ldr	r1, [r7, #20]
 8009966:	69ba      	ldr	r2, [r7, #24]
 8009968:	e841 2300 	strex	r3, r2, [r1]
 800996c:	613b      	str	r3, [r7, #16]
   return(result);
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d1e6      	bne.n	8009942 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009974:	e007      	b.n	8009986 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	699a      	ldr	r2, [r3, #24]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f042 0208 	orr.w	r2, r2, #8
 8009984:	619a      	str	r2, [r3, #24]
}
 8009986:	bf00      	nop
 8009988:	3798      	adds	r7, #152	; 0x98
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	080093db 	.word	0x080093db

08009994 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b0a8      	sub	sp, #160	; 0xa0
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80099a2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	69db      	ldr	r3, [r3, #28]
 80099ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099ca:	2b22      	cmp	r3, #34	; 0x22
 80099cc:	f040 8153 	bne.w	8009c76 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80099d6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80099da:	e0fa      	b.n	8009bd2 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80099ee:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80099f2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80099f6:	4013      	ands	r3, r2
 80099f8:	b29a      	uxth	r2, r3
 80099fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80099fe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a04:	1c9a      	adds	r2, r3, #2
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	3b01      	subs	r3, #1
 8009a14:	b29a      	uxth	r2, r3
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	69db      	ldr	r3, [r3, #28]
 8009a22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009a26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a2a:	f003 0307 	and.w	r3, r3, #7
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d053      	beq.n	8009ada <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009a32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a36:	f003 0301 	and.w	r3, r3, #1
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d011      	beq.n	8009a62 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009a3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d00b      	beq.n	8009a62 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2201      	movs	r2, #1
 8009a50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a58:	f043 0201 	orr.w	r2, r3, #1
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a66:	f003 0302 	and.w	r3, r3, #2
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d011      	beq.n	8009a92 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009a6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a72:	f003 0301 	and.w	r3, r3, #1
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d00b      	beq.n	8009a92 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2202      	movs	r2, #2
 8009a80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a88:	f043 0204 	orr.w	r2, r3, #4
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a96:	f003 0304 	and.w	r3, r3, #4
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d011      	beq.n	8009ac2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009a9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009aa2:	f003 0301 	and.w	r3, r3, #1
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d00b      	beq.n	8009ac2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2204      	movs	r2, #4
 8009ab0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ab8:	f043 0202 	orr.w	r2, r3, #2
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d006      	beq.n	8009ada <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f7fe fdeb 	bl	80086a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d175      	bne.n	8009bd2 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009aee:	e853 3f00 	ldrex	r3, [r3]
 8009af2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009af6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009afa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	461a      	mov	r2, r3
 8009b04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009b08:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b0a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009b0e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009b10:	e841 2300 	strex	r3, r2, [r1]
 8009b14:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009b16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d1e4      	bne.n	8009ae6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	3308      	adds	r3, #8
 8009b22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b26:	e853 3f00 	ldrex	r3, [r3]
 8009b2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b32:	f023 0301 	bic.w	r3, r3, #1
 8009b36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	3308      	adds	r3, #8
 8009b40:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009b44:	65ba      	str	r2, [r7, #88]	; 0x58
 8009b46:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b4c:	e841 2300 	strex	r3, r2, [r1]
 8009b50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009b52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d1e1      	bne.n	8009b1c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2220      	movs	r2, #32
 8009b5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d12e      	bne.n	8009bcc <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b7c:	e853 3f00 	ldrex	r3, [r3]
 8009b80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b84:	f023 0310 	bic.w	r3, r3, #16
 8009b88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	461a      	mov	r2, r3
 8009b90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009b92:	647b      	str	r3, [r7, #68]	; 0x44
 8009b94:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b9a:	e841 2300 	strex	r3, r2, [r1]
 8009b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d1e6      	bne.n	8009b74 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	69db      	ldr	r3, [r3, #28]
 8009bac:	f003 0310 	and.w	r3, r3, #16
 8009bb0:	2b10      	cmp	r3, #16
 8009bb2:	d103      	bne.n	8009bbc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2210      	movs	r2, #16
 8009bba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f7fe fd79 	bl	80086bc <HAL_UARTEx_RxEventCallback>
 8009bca:	e002      	b.n	8009bd2 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f7f8 fce1 	bl	8002594 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009bd2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d006      	beq.n	8009be8 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009bda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009bde:	f003 0320 	and.w	r3, r3, #32
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	f47f aefa 	bne.w	80099dc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009bee:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009bf2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d045      	beq.n	8009c86 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009c00:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d23e      	bcs.n	8009c86 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	3308      	adds	r3, #8
 8009c0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c12:	e853 3f00 	ldrex	r3, [r3]
 8009c16:	623b      	str	r3, [r7, #32]
   return(result);
 8009c18:	6a3b      	ldr	r3, [r7, #32]
 8009c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c1e:	677b      	str	r3, [r7, #116]	; 0x74
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	3308      	adds	r3, #8
 8009c26:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009c28:	633a      	str	r2, [r7, #48]	; 0x30
 8009c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c30:	e841 2300 	strex	r3, r2, [r1]
 8009c34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d1e5      	bne.n	8009c08 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	4a14      	ldr	r2, [pc, #80]	; (8009c90 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009c40:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	e853 3f00 	ldrex	r3, [r3]
 8009c4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f043 0320 	orr.w	r3, r3, #32
 8009c56:	673b      	str	r3, [r7, #112]	; 0x70
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c60:	61fb      	str	r3, [r7, #28]
 8009c62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c64:	69b9      	ldr	r1, [r7, #24]
 8009c66:	69fa      	ldr	r2, [r7, #28]
 8009c68:	e841 2300 	strex	r3, r2, [r1]
 8009c6c:	617b      	str	r3, [r7, #20]
   return(result);
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d1e6      	bne.n	8009c42 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009c74:	e007      	b.n	8009c86 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	699a      	ldr	r2, [r3, #24]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f042 0208 	orr.w	r2, r2, #8
 8009c84:	619a      	str	r2, [r3, #24]
}
 8009c86:	bf00      	nop
 8009c88:	37a0      	adds	r7, #160	; 0xa0
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	0800953b 	.word	0x0800953b

08009c94 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b083      	sub	sp, #12
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009c9c:	bf00      	nop
 8009c9e:	370c      	adds	r7, #12
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr

08009ca8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b083      	sub	sp, #12
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009cb0:	bf00      	nop
 8009cb2:	370c      	adds	r7, #12
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b083      	sub	sp, #12
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009cc4:	bf00      	nop
 8009cc6:	370c      	adds	r7, #12
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b085      	sub	sp, #20
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d101      	bne.n	8009ce6 <HAL_UARTEx_DisableFifoMode+0x16>
 8009ce2:	2302      	movs	r3, #2
 8009ce4:	e027      	b.n	8009d36 <HAL_UARTEx_DisableFifoMode+0x66>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2201      	movs	r2, #1
 8009cea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2224      	movs	r2, #36	; 0x24
 8009cf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f022 0201 	bic.w	r2, r2, #1
 8009d0c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009d14:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	68fa      	ldr	r2, [r7, #12]
 8009d22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2220      	movs	r2, #32
 8009d28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3714      	adds	r7, #20
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr

08009d42 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b084      	sub	sp, #16
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
 8009d4a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d101      	bne.n	8009d5a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009d56:	2302      	movs	r3, #2
 8009d58:	e02d      	b.n	8009db6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2224      	movs	r2, #36	; 0x24
 8009d66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f022 0201 	bic.w	r2, r2, #1
 8009d80:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	683a      	ldr	r2, [r7, #0]
 8009d92:	430a      	orrs	r2, r1
 8009d94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 f850 	bl	8009e3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	68fa      	ldr	r2, [r7, #12]
 8009da2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2220      	movs	r2, #32
 8009da8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009db4:	2300      	movs	r3, #0
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3710      	adds	r7, #16
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}

08009dbe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009dbe:	b580      	push	{r7, lr}
 8009dc0:	b084      	sub	sp, #16
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6078      	str	r0, [r7, #4]
 8009dc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d101      	bne.n	8009dd6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009dd2:	2302      	movs	r3, #2
 8009dd4:	e02d      	b.n	8009e32 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2224      	movs	r2, #36	; 0x24
 8009de2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f022 0201 	bic.w	r2, r2, #1
 8009dfc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	689b      	ldr	r3, [r3, #8]
 8009e04:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	683a      	ldr	r2, [r7, #0]
 8009e0e:	430a      	orrs	r2, r1
 8009e10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 f812 	bl	8009e3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	68fa      	ldr	r2, [r7, #12]
 8009e1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2220      	movs	r2, #32
 8009e24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e30:	2300      	movs	r3, #0
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3710      	adds	r7, #16
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
	...

08009e3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b085      	sub	sp, #20
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d108      	bne.n	8009e5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2201      	movs	r2, #1
 8009e50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2201      	movs	r2, #1
 8009e58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009e5c:	e031      	b.n	8009ec2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009e5e:	2308      	movs	r3, #8
 8009e60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009e62:	2308      	movs	r3, #8
 8009e64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	689b      	ldr	r3, [r3, #8]
 8009e6c:	0e5b      	lsrs	r3, r3, #25
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	f003 0307 	and.w	r3, r3, #7
 8009e74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	689b      	ldr	r3, [r3, #8]
 8009e7c:	0f5b      	lsrs	r3, r3, #29
 8009e7e:	b2db      	uxtb	r3, r3
 8009e80:	f003 0307 	and.w	r3, r3, #7
 8009e84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e86:	7bbb      	ldrb	r3, [r7, #14]
 8009e88:	7b3a      	ldrb	r2, [r7, #12]
 8009e8a:	4911      	ldr	r1, [pc, #68]	; (8009ed0 <UARTEx_SetNbDataToProcess+0x94>)
 8009e8c:	5c8a      	ldrb	r2, [r1, r2]
 8009e8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009e92:	7b3a      	ldrb	r2, [r7, #12]
 8009e94:	490f      	ldr	r1, [pc, #60]	; (8009ed4 <UARTEx_SetNbDataToProcess+0x98>)
 8009e96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e98:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e9c:	b29a      	uxth	r2, r3
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ea4:	7bfb      	ldrb	r3, [r7, #15]
 8009ea6:	7b7a      	ldrb	r2, [r7, #13]
 8009ea8:	4909      	ldr	r1, [pc, #36]	; (8009ed0 <UARTEx_SetNbDataToProcess+0x94>)
 8009eaa:	5c8a      	ldrb	r2, [r1, r2]
 8009eac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009eb0:	7b7a      	ldrb	r2, [r7, #13]
 8009eb2:	4908      	ldr	r1, [pc, #32]	; (8009ed4 <UARTEx_SetNbDataToProcess+0x98>)
 8009eb4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009eb6:	fb93 f3f2 	sdiv	r3, r3, r2
 8009eba:	b29a      	uxth	r2, r3
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009ec2:	bf00      	nop
 8009ec4:	3714      	adds	r7, #20
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr
 8009ece:	bf00      	nop
 8009ed0:	0800cec4 	.word	0x0800cec4
 8009ed4:	0800cecc 	.word	0x0800cecc

08009ed8 <atoi>:
 8009ed8:	220a      	movs	r2, #10
 8009eda:	2100      	movs	r1, #0
 8009edc:	f000 b882 	b.w	8009fe4 <strtol>

08009ee0 <_strtol_l.constprop.0>:
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee6:	d001      	beq.n	8009eec <_strtol_l.constprop.0+0xc>
 8009ee8:	2b24      	cmp	r3, #36	; 0x24
 8009eea:	d906      	bls.n	8009efa <_strtol_l.constprop.0+0x1a>
 8009eec:	f000 fee0 	bl	800acb0 <__errno>
 8009ef0:	2316      	movs	r3, #22
 8009ef2:	6003      	str	r3, [r0, #0]
 8009ef4:	2000      	movs	r0, #0
 8009ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009efa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009fe0 <_strtol_l.constprop.0+0x100>
 8009efe:	460d      	mov	r5, r1
 8009f00:	462e      	mov	r6, r5
 8009f02:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f06:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009f0a:	f017 0708 	ands.w	r7, r7, #8
 8009f0e:	d1f7      	bne.n	8009f00 <_strtol_l.constprop.0+0x20>
 8009f10:	2c2d      	cmp	r4, #45	; 0x2d
 8009f12:	d132      	bne.n	8009f7a <_strtol_l.constprop.0+0x9a>
 8009f14:	782c      	ldrb	r4, [r5, #0]
 8009f16:	2701      	movs	r7, #1
 8009f18:	1cb5      	adds	r5, r6, #2
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d05b      	beq.n	8009fd6 <_strtol_l.constprop.0+0xf6>
 8009f1e:	2b10      	cmp	r3, #16
 8009f20:	d109      	bne.n	8009f36 <_strtol_l.constprop.0+0x56>
 8009f22:	2c30      	cmp	r4, #48	; 0x30
 8009f24:	d107      	bne.n	8009f36 <_strtol_l.constprop.0+0x56>
 8009f26:	782c      	ldrb	r4, [r5, #0]
 8009f28:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009f2c:	2c58      	cmp	r4, #88	; 0x58
 8009f2e:	d14d      	bne.n	8009fcc <_strtol_l.constprop.0+0xec>
 8009f30:	786c      	ldrb	r4, [r5, #1]
 8009f32:	2310      	movs	r3, #16
 8009f34:	3502      	adds	r5, #2
 8009f36:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009f3a:	f108 38ff 	add.w	r8, r8, #4294967295
 8009f3e:	f04f 0e00 	mov.w	lr, #0
 8009f42:	fbb8 f9f3 	udiv	r9, r8, r3
 8009f46:	4676      	mov	r6, lr
 8009f48:	fb03 8a19 	mls	sl, r3, r9, r8
 8009f4c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009f50:	f1bc 0f09 	cmp.w	ip, #9
 8009f54:	d816      	bhi.n	8009f84 <_strtol_l.constprop.0+0xa4>
 8009f56:	4664      	mov	r4, ip
 8009f58:	42a3      	cmp	r3, r4
 8009f5a:	dd24      	ble.n	8009fa6 <_strtol_l.constprop.0+0xc6>
 8009f5c:	f1be 3fff 	cmp.w	lr, #4294967295
 8009f60:	d008      	beq.n	8009f74 <_strtol_l.constprop.0+0x94>
 8009f62:	45b1      	cmp	r9, r6
 8009f64:	d31c      	bcc.n	8009fa0 <_strtol_l.constprop.0+0xc0>
 8009f66:	d101      	bne.n	8009f6c <_strtol_l.constprop.0+0x8c>
 8009f68:	45a2      	cmp	sl, r4
 8009f6a:	db19      	blt.n	8009fa0 <_strtol_l.constprop.0+0xc0>
 8009f6c:	fb06 4603 	mla	r6, r6, r3, r4
 8009f70:	f04f 0e01 	mov.w	lr, #1
 8009f74:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f78:	e7e8      	b.n	8009f4c <_strtol_l.constprop.0+0x6c>
 8009f7a:	2c2b      	cmp	r4, #43	; 0x2b
 8009f7c:	bf04      	itt	eq
 8009f7e:	782c      	ldrbeq	r4, [r5, #0]
 8009f80:	1cb5      	addeq	r5, r6, #2
 8009f82:	e7ca      	b.n	8009f1a <_strtol_l.constprop.0+0x3a>
 8009f84:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009f88:	f1bc 0f19 	cmp.w	ip, #25
 8009f8c:	d801      	bhi.n	8009f92 <_strtol_l.constprop.0+0xb2>
 8009f8e:	3c37      	subs	r4, #55	; 0x37
 8009f90:	e7e2      	b.n	8009f58 <_strtol_l.constprop.0+0x78>
 8009f92:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009f96:	f1bc 0f19 	cmp.w	ip, #25
 8009f9a:	d804      	bhi.n	8009fa6 <_strtol_l.constprop.0+0xc6>
 8009f9c:	3c57      	subs	r4, #87	; 0x57
 8009f9e:	e7db      	b.n	8009f58 <_strtol_l.constprop.0+0x78>
 8009fa0:	f04f 3eff 	mov.w	lr, #4294967295
 8009fa4:	e7e6      	b.n	8009f74 <_strtol_l.constprop.0+0x94>
 8009fa6:	f1be 3fff 	cmp.w	lr, #4294967295
 8009faa:	d105      	bne.n	8009fb8 <_strtol_l.constprop.0+0xd8>
 8009fac:	2322      	movs	r3, #34	; 0x22
 8009fae:	6003      	str	r3, [r0, #0]
 8009fb0:	4646      	mov	r6, r8
 8009fb2:	b942      	cbnz	r2, 8009fc6 <_strtol_l.constprop.0+0xe6>
 8009fb4:	4630      	mov	r0, r6
 8009fb6:	e79e      	b.n	8009ef6 <_strtol_l.constprop.0+0x16>
 8009fb8:	b107      	cbz	r7, 8009fbc <_strtol_l.constprop.0+0xdc>
 8009fba:	4276      	negs	r6, r6
 8009fbc:	2a00      	cmp	r2, #0
 8009fbe:	d0f9      	beq.n	8009fb4 <_strtol_l.constprop.0+0xd4>
 8009fc0:	f1be 0f00 	cmp.w	lr, #0
 8009fc4:	d000      	beq.n	8009fc8 <_strtol_l.constprop.0+0xe8>
 8009fc6:	1e69      	subs	r1, r5, #1
 8009fc8:	6011      	str	r1, [r2, #0]
 8009fca:	e7f3      	b.n	8009fb4 <_strtol_l.constprop.0+0xd4>
 8009fcc:	2430      	movs	r4, #48	; 0x30
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d1b1      	bne.n	8009f36 <_strtol_l.constprop.0+0x56>
 8009fd2:	2308      	movs	r3, #8
 8009fd4:	e7af      	b.n	8009f36 <_strtol_l.constprop.0+0x56>
 8009fd6:	2c30      	cmp	r4, #48	; 0x30
 8009fd8:	d0a5      	beq.n	8009f26 <_strtol_l.constprop.0+0x46>
 8009fda:	230a      	movs	r3, #10
 8009fdc:	e7ab      	b.n	8009f36 <_strtol_l.constprop.0+0x56>
 8009fde:	bf00      	nop
 8009fe0:	0800ced5 	.word	0x0800ced5

08009fe4 <strtol>:
 8009fe4:	4613      	mov	r3, r2
 8009fe6:	460a      	mov	r2, r1
 8009fe8:	4601      	mov	r1, r0
 8009fea:	4802      	ldr	r0, [pc, #8]	; (8009ff4 <strtol+0x10>)
 8009fec:	6800      	ldr	r0, [r0, #0]
 8009fee:	f7ff bf77 	b.w	8009ee0 <_strtol_l.constprop.0>
 8009ff2:	bf00      	nop
 8009ff4:	20000120 	.word	0x20000120

08009ff8 <__cvt>:
 8009ff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ffc:	ec55 4b10 	vmov	r4, r5, d0
 800a000:	2d00      	cmp	r5, #0
 800a002:	460e      	mov	r6, r1
 800a004:	4619      	mov	r1, r3
 800a006:	462b      	mov	r3, r5
 800a008:	bfbb      	ittet	lt
 800a00a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a00e:	461d      	movlt	r5, r3
 800a010:	2300      	movge	r3, #0
 800a012:	232d      	movlt	r3, #45	; 0x2d
 800a014:	700b      	strb	r3, [r1, #0]
 800a016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a018:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a01c:	4691      	mov	r9, r2
 800a01e:	f023 0820 	bic.w	r8, r3, #32
 800a022:	bfbc      	itt	lt
 800a024:	4622      	movlt	r2, r4
 800a026:	4614      	movlt	r4, r2
 800a028:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a02c:	d005      	beq.n	800a03a <__cvt+0x42>
 800a02e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a032:	d100      	bne.n	800a036 <__cvt+0x3e>
 800a034:	3601      	adds	r6, #1
 800a036:	2102      	movs	r1, #2
 800a038:	e000      	b.n	800a03c <__cvt+0x44>
 800a03a:	2103      	movs	r1, #3
 800a03c:	ab03      	add	r3, sp, #12
 800a03e:	9301      	str	r3, [sp, #4]
 800a040:	ab02      	add	r3, sp, #8
 800a042:	9300      	str	r3, [sp, #0]
 800a044:	ec45 4b10 	vmov	d0, r4, r5
 800a048:	4653      	mov	r3, sl
 800a04a:	4632      	mov	r2, r6
 800a04c:	f000 ff04 	bl	800ae58 <_dtoa_r>
 800a050:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a054:	4607      	mov	r7, r0
 800a056:	d102      	bne.n	800a05e <__cvt+0x66>
 800a058:	f019 0f01 	tst.w	r9, #1
 800a05c:	d022      	beq.n	800a0a4 <__cvt+0xac>
 800a05e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a062:	eb07 0906 	add.w	r9, r7, r6
 800a066:	d110      	bne.n	800a08a <__cvt+0x92>
 800a068:	783b      	ldrb	r3, [r7, #0]
 800a06a:	2b30      	cmp	r3, #48	; 0x30
 800a06c:	d10a      	bne.n	800a084 <__cvt+0x8c>
 800a06e:	2200      	movs	r2, #0
 800a070:	2300      	movs	r3, #0
 800a072:	4620      	mov	r0, r4
 800a074:	4629      	mov	r1, r5
 800a076:	f7f6 fd5f 	bl	8000b38 <__aeabi_dcmpeq>
 800a07a:	b918      	cbnz	r0, 800a084 <__cvt+0x8c>
 800a07c:	f1c6 0601 	rsb	r6, r6, #1
 800a080:	f8ca 6000 	str.w	r6, [sl]
 800a084:	f8da 3000 	ldr.w	r3, [sl]
 800a088:	4499      	add	r9, r3
 800a08a:	2200      	movs	r2, #0
 800a08c:	2300      	movs	r3, #0
 800a08e:	4620      	mov	r0, r4
 800a090:	4629      	mov	r1, r5
 800a092:	f7f6 fd51 	bl	8000b38 <__aeabi_dcmpeq>
 800a096:	b108      	cbz	r0, 800a09c <__cvt+0xa4>
 800a098:	f8cd 900c 	str.w	r9, [sp, #12]
 800a09c:	2230      	movs	r2, #48	; 0x30
 800a09e:	9b03      	ldr	r3, [sp, #12]
 800a0a0:	454b      	cmp	r3, r9
 800a0a2:	d307      	bcc.n	800a0b4 <__cvt+0xbc>
 800a0a4:	9b03      	ldr	r3, [sp, #12]
 800a0a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0a8:	1bdb      	subs	r3, r3, r7
 800a0aa:	4638      	mov	r0, r7
 800a0ac:	6013      	str	r3, [r2, #0]
 800a0ae:	b004      	add	sp, #16
 800a0b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0b4:	1c59      	adds	r1, r3, #1
 800a0b6:	9103      	str	r1, [sp, #12]
 800a0b8:	701a      	strb	r2, [r3, #0]
 800a0ba:	e7f0      	b.n	800a09e <__cvt+0xa6>

0800a0bc <__exponent>:
 800a0bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0be:	4603      	mov	r3, r0
 800a0c0:	2900      	cmp	r1, #0
 800a0c2:	bfb8      	it	lt
 800a0c4:	4249      	neglt	r1, r1
 800a0c6:	f803 2b02 	strb.w	r2, [r3], #2
 800a0ca:	bfb4      	ite	lt
 800a0cc:	222d      	movlt	r2, #45	; 0x2d
 800a0ce:	222b      	movge	r2, #43	; 0x2b
 800a0d0:	2909      	cmp	r1, #9
 800a0d2:	7042      	strb	r2, [r0, #1]
 800a0d4:	dd2a      	ble.n	800a12c <__exponent+0x70>
 800a0d6:	f10d 0207 	add.w	r2, sp, #7
 800a0da:	4617      	mov	r7, r2
 800a0dc:	260a      	movs	r6, #10
 800a0de:	4694      	mov	ip, r2
 800a0e0:	fb91 f5f6 	sdiv	r5, r1, r6
 800a0e4:	fb06 1415 	mls	r4, r6, r5, r1
 800a0e8:	3430      	adds	r4, #48	; 0x30
 800a0ea:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a0ee:	460c      	mov	r4, r1
 800a0f0:	2c63      	cmp	r4, #99	; 0x63
 800a0f2:	f102 32ff 	add.w	r2, r2, #4294967295
 800a0f6:	4629      	mov	r1, r5
 800a0f8:	dcf1      	bgt.n	800a0de <__exponent+0x22>
 800a0fa:	3130      	adds	r1, #48	; 0x30
 800a0fc:	f1ac 0402 	sub.w	r4, ip, #2
 800a100:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a104:	1c41      	adds	r1, r0, #1
 800a106:	4622      	mov	r2, r4
 800a108:	42ba      	cmp	r2, r7
 800a10a:	d30a      	bcc.n	800a122 <__exponent+0x66>
 800a10c:	f10d 0209 	add.w	r2, sp, #9
 800a110:	eba2 020c 	sub.w	r2, r2, ip
 800a114:	42bc      	cmp	r4, r7
 800a116:	bf88      	it	hi
 800a118:	2200      	movhi	r2, #0
 800a11a:	4413      	add	r3, r2
 800a11c:	1a18      	subs	r0, r3, r0
 800a11e:	b003      	add	sp, #12
 800a120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a122:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a126:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a12a:	e7ed      	b.n	800a108 <__exponent+0x4c>
 800a12c:	2330      	movs	r3, #48	; 0x30
 800a12e:	3130      	adds	r1, #48	; 0x30
 800a130:	7083      	strb	r3, [r0, #2]
 800a132:	70c1      	strb	r1, [r0, #3]
 800a134:	1d03      	adds	r3, r0, #4
 800a136:	e7f1      	b.n	800a11c <__exponent+0x60>

0800a138 <_printf_float>:
 800a138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a13c:	ed2d 8b02 	vpush	{d8}
 800a140:	b08d      	sub	sp, #52	; 0x34
 800a142:	460c      	mov	r4, r1
 800a144:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a148:	4616      	mov	r6, r2
 800a14a:	461f      	mov	r7, r3
 800a14c:	4605      	mov	r5, r0
 800a14e:	f000 fd65 	bl	800ac1c <_localeconv_r>
 800a152:	f8d0 a000 	ldr.w	sl, [r0]
 800a156:	4650      	mov	r0, sl
 800a158:	f7f6 f8c2 	bl	80002e0 <strlen>
 800a15c:	2300      	movs	r3, #0
 800a15e:	930a      	str	r3, [sp, #40]	; 0x28
 800a160:	6823      	ldr	r3, [r4, #0]
 800a162:	9305      	str	r3, [sp, #20]
 800a164:	f8d8 3000 	ldr.w	r3, [r8]
 800a168:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a16c:	3307      	adds	r3, #7
 800a16e:	f023 0307 	bic.w	r3, r3, #7
 800a172:	f103 0208 	add.w	r2, r3, #8
 800a176:	f8c8 2000 	str.w	r2, [r8]
 800a17a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a17e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a182:	9307      	str	r3, [sp, #28]
 800a184:	f8cd 8018 	str.w	r8, [sp, #24]
 800a188:	ee08 0a10 	vmov	s16, r0
 800a18c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a190:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a194:	4b9e      	ldr	r3, [pc, #632]	; (800a410 <_printf_float+0x2d8>)
 800a196:	f04f 32ff 	mov.w	r2, #4294967295
 800a19a:	f7f6 fcff 	bl	8000b9c <__aeabi_dcmpun>
 800a19e:	bb88      	cbnz	r0, 800a204 <_printf_float+0xcc>
 800a1a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1a4:	4b9a      	ldr	r3, [pc, #616]	; (800a410 <_printf_float+0x2d8>)
 800a1a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a1aa:	f7f6 fcd9 	bl	8000b60 <__aeabi_dcmple>
 800a1ae:	bb48      	cbnz	r0, 800a204 <_printf_float+0xcc>
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	4640      	mov	r0, r8
 800a1b6:	4649      	mov	r1, r9
 800a1b8:	f7f6 fcc8 	bl	8000b4c <__aeabi_dcmplt>
 800a1bc:	b110      	cbz	r0, 800a1c4 <_printf_float+0x8c>
 800a1be:	232d      	movs	r3, #45	; 0x2d
 800a1c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1c4:	4a93      	ldr	r2, [pc, #588]	; (800a414 <_printf_float+0x2dc>)
 800a1c6:	4b94      	ldr	r3, [pc, #592]	; (800a418 <_printf_float+0x2e0>)
 800a1c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a1cc:	bf94      	ite	ls
 800a1ce:	4690      	movls	r8, r2
 800a1d0:	4698      	movhi	r8, r3
 800a1d2:	2303      	movs	r3, #3
 800a1d4:	6123      	str	r3, [r4, #16]
 800a1d6:	9b05      	ldr	r3, [sp, #20]
 800a1d8:	f023 0304 	bic.w	r3, r3, #4
 800a1dc:	6023      	str	r3, [r4, #0]
 800a1de:	f04f 0900 	mov.w	r9, #0
 800a1e2:	9700      	str	r7, [sp, #0]
 800a1e4:	4633      	mov	r3, r6
 800a1e6:	aa0b      	add	r2, sp, #44	; 0x2c
 800a1e8:	4621      	mov	r1, r4
 800a1ea:	4628      	mov	r0, r5
 800a1ec:	f000 f9da 	bl	800a5a4 <_printf_common>
 800a1f0:	3001      	adds	r0, #1
 800a1f2:	f040 8090 	bne.w	800a316 <_printf_float+0x1de>
 800a1f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a1fa:	b00d      	add	sp, #52	; 0x34
 800a1fc:	ecbd 8b02 	vpop	{d8}
 800a200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a204:	4642      	mov	r2, r8
 800a206:	464b      	mov	r3, r9
 800a208:	4640      	mov	r0, r8
 800a20a:	4649      	mov	r1, r9
 800a20c:	f7f6 fcc6 	bl	8000b9c <__aeabi_dcmpun>
 800a210:	b140      	cbz	r0, 800a224 <_printf_float+0xec>
 800a212:	464b      	mov	r3, r9
 800a214:	2b00      	cmp	r3, #0
 800a216:	bfbc      	itt	lt
 800a218:	232d      	movlt	r3, #45	; 0x2d
 800a21a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a21e:	4a7f      	ldr	r2, [pc, #508]	; (800a41c <_printf_float+0x2e4>)
 800a220:	4b7f      	ldr	r3, [pc, #508]	; (800a420 <_printf_float+0x2e8>)
 800a222:	e7d1      	b.n	800a1c8 <_printf_float+0x90>
 800a224:	6863      	ldr	r3, [r4, #4]
 800a226:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a22a:	9206      	str	r2, [sp, #24]
 800a22c:	1c5a      	adds	r2, r3, #1
 800a22e:	d13f      	bne.n	800a2b0 <_printf_float+0x178>
 800a230:	2306      	movs	r3, #6
 800a232:	6063      	str	r3, [r4, #4]
 800a234:	9b05      	ldr	r3, [sp, #20]
 800a236:	6861      	ldr	r1, [r4, #4]
 800a238:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a23c:	2300      	movs	r3, #0
 800a23e:	9303      	str	r3, [sp, #12]
 800a240:	ab0a      	add	r3, sp, #40	; 0x28
 800a242:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a246:	ab09      	add	r3, sp, #36	; 0x24
 800a248:	ec49 8b10 	vmov	d0, r8, r9
 800a24c:	9300      	str	r3, [sp, #0]
 800a24e:	6022      	str	r2, [r4, #0]
 800a250:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a254:	4628      	mov	r0, r5
 800a256:	f7ff fecf 	bl	8009ff8 <__cvt>
 800a25a:	9b06      	ldr	r3, [sp, #24]
 800a25c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a25e:	2b47      	cmp	r3, #71	; 0x47
 800a260:	4680      	mov	r8, r0
 800a262:	d108      	bne.n	800a276 <_printf_float+0x13e>
 800a264:	1cc8      	adds	r0, r1, #3
 800a266:	db02      	blt.n	800a26e <_printf_float+0x136>
 800a268:	6863      	ldr	r3, [r4, #4]
 800a26a:	4299      	cmp	r1, r3
 800a26c:	dd41      	ble.n	800a2f2 <_printf_float+0x1ba>
 800a26e:	f1ab 0302 	sub.w	r3, fp, #2
 800a272:	fa5f fb83 	uxtb.w	fp, r3
 800a276:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a27a:	d820      	bhi.n	800a2be <_printf_float+0x186>
 800a27c:	3901      	subs	r1, #1
 800a27e:	465a      	mov	r2, fp
 800a280:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a284:	9109      	str	r1, [sp, #36]	; 0x24
 800a286:	f7ff ff19 	bl	800a0bc <__exponent>
 800a28a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a28c:	1813      	adds	r3, r2, r0
 800a28e:	2a01      	cmp	r2, #1
 800a290:	4681      	mov	r9, r0
 800a292:	6123      	str	r3, [r4, #16]
 800a294:	dc02      	bgt.n	800a29c <_printf_float+0x164>
 800a296:	6822      	ldr	r2, [r4, #0]
 800a298:	07d2      	lsls	r2, r2, #31
 800a29a:	d501      	bpl.n	800a2a0 <_printf_float+0x168>
 800a29c:	3301      	adds	r3, #1
 800a29e:	6123      	str	r3, [r4, #16]
 800a2a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d09c      	beq.n	800a1e2 <_printf_float+0xaa>
 800a2a8:	232d      	movs	r3, #45	; 0x2d
 800a2aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2ae:	e798      	b.n	800a1e2 <_printf_float+0xaa>
 800a2b0:	9a06      	ldr	r2, [sp, #24]
 800a2b2:	2a47      	cmp	r2, #71	; 0x47
 800a2b4:	d1be      	bne.n	800a234 <_printf_float+0xfc>
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d1bc      	bne.n	800a234 <_printf_float+0xfc>
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	e7b9      	b.n	800a232 <_printf_float+0xfa>
 800a2be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a2c2:	d118      	bne.n	800a2f6 <_printf_float+0x1be>
 800a2c4:	2900      	cmp	r1, #0
 800a2c6:	6863      	ldr	r3, [r4, #4]
 800a2c8:	dd0b      	ble.n	800a2e2 <_printf_float+0x1aa>
 800a2ca:	6121      	str	r1, [r4, #16]
 800a2cc:	b913      	cbnz	r3, 800a2d4 <_printf_float+0x19c>
 800a2ce:	6822      	ldr	r2, [r4, #0]
 800a2d0:	07d0      	lsls	r0, r2, #31
 800a2d2:	d502      	bpl.n	800a2da <_printf_float+0x1a2>
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	440b      	add	r3, r1
 800a2d8:	6123      	str	r3, [r4, #16]
 800a2da:	65a1      	str	r1, [r4, #88]	; 0x58
 800a2dc:	f04f 0900 	mov.w	r9, #0
 800a2e0:	e7de      	b.n	800a2a0 <_printf_float+0x168>
 800a2e2:	b913      	cbnz	r3, 800a2ea <_printf_float+0x1b2>
 800a2e4:	6822      	ldr	r2, [r4, #0]
 800a2e6:	07d2      	lsls	r2, r2, #31
 800a2e8:	d501      	bpl.n	800a2ee <_printf_float+0x1b6>
 800a2ea:	3302      	adds	r3, #2
 800a2ec:	e7f4      	b.n	800a2d8 <_printf_float+0x1a0>
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	e7f2      	b.n	800a2d8 <_printf_float+0x1a0>
 800a2f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a2f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2f8:	4299      	cmp	r1, r3
 800a2fa:	db05      	blt.n	800a308 <_printf_float+0x1d0>
 800a2fc:	6823      	ldr	r3, [r4, #0]
 800a2fe:	6121      	str	r1, [r4, #16]
 800a300:	07d8      	lsls	r0, r3, #31
 800a302:	d5ea      	bpl.n	800a2da <_printf_float+0x1a2>
 800a304:	1c4b      	adds	r3, r1, #1
 800a306:	e7e7      	b.n	800a2d8 <_printf_float+0x1a0>
 800a308:	2900      	cmp	r1, #0
 800a30a:	bfd4      	ite	le
 800a30c:	f1c1 0202 	rsble	r2, r1, #2
 800a310:	2201      	movgt	r2, #1
 800a312:	4413      	add	r3, r2
 800a314:	e7e0      	b.n	800a2d8 <_printf_float+0x1a0>
 800a316:	6823      	ldr	r3, [r4, #0]
 800a318:	055a      	lsls	r2, r3, #21
 800a31a:	d407      	bmi.n	800a32c <_printf_float+0x1f4>
 800a31c:	6923      	ldr	r3, [r4, #16]
 800a31e:	4642      	mov	r2, r8
 800a320:	4631      	mov	r1, r6
 800a322:	4628      	mov	r0, r5
 800a324:	47b8      	blx	r7
 800a326:	3001      	adds	r0, #1
 800a328:	d12c      	bne.n	800a384 <_printf_float+0x24c>
 800a32a:	e764      	b.n	800a1f6 <_printf_float+0xbe>
 800a32c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a330:	f240 80e0 	bls.w	800a4f4 <_printf_float+0x3bc>
 800a334:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a338:	2200      	movs	r2, #0
 800a33a:	2300      	movs	r3, #0
 800a33c:	f7f6 fbfc 	bl	8000b38 <__aeabi_dcmpeq>
 800a340:	2800      	cmp	r0, #0
 800a342:	d034      	beq.n	800a3ae <_printf_float+0x276>
 800a344:	4a37      	ldr	r2, [pc, #220]	; (800a424 <_printf_float+0x2ec>)
 800a346:	2301      	movs	r3, #1
 800a348:	4631      	mov	r1, r6
 800a34a:	4628      	mov	r0, r5
 800a34c:	47b8      	blx	r7
 800a34e:	3001      	adds	r0, #1
 800a350:	f43f af51 	beq.w	800a1f6 <_printf_float+0xbe>
 800a354:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a358:	429a      	cmp	r2, r3
 800a35a:	db02      	blt.n	800a362 <_printf_float+0x22a>
 800a35c:	6823      	ldr	r3, [r4, #0]
 800a35e:	07d8      	lsls	r0, r3, #31
 800a360:	d510      	bpl.n	800a384 <_printf_float+0x24c>
 800a362:	ee18 3a10 	vmov	r3, s16
 800a366:	4652      	mov	r2, sl
 800a368:	4631      	mov	r1, r6
 800a36a:	4628      	mov	r0, r5
 800a36c:	47b8      	blx	r7
 800a36e:	3001      	adds	r0, #1
 800a370:	f43f af41 	beq.w	800a1f6 <_printf_float+0xbe>
 800a374:	f04f 0800 	mov.w	r8, #0
 800a378:	f104 091a 	add.w	r9, r4, #26
 800a37c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a37e:	3b01      	subs	r3, #1
 800a380:	4543      	cmp	r3, r8
 800a382:	dc09      	bgt.n	800a398 <_printf_float+0x260>
 800a384:	6823      	ldr	r3, [r4, #0]
 800a386:	079b      	lsls	r3, r3, #30
 800a388:	f100 8107 	bmi.w	800a59a <_printf_float+0x462>
 800a38c:	68e0      	ldr	r0, [r4, #12]
 800a38e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a390:	4298      	cmp	r0, r3
 800a392:	bfb8      	it	lt
 800a394:	4618      	movlt	r0, r3
 800a396:	e730      	b.n	800a1fa <_printf_float+0xc2>
 800a398:	2301      	movs	r3, #1
 800a39a:	464a      	mov	r2, r9
 800a39c:	4631      	mov	r1, r6
 800a39e:	4628      	mov	r0, r5
 800a3a0:	47b8      	blx	r7
 800a3a2:	3001      	adds	r0, #1
 800a3a4:	f43f af27 	beq.w	800a1f6 <_printf_float+0xbe>
 800a3a8:	f108 0801 	add.w	r8, r8, #1
 800a3ac:	e7e6      	b.n	800a37c <_printf_float+0x244>
 800a3ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	dc39      	bgt.n	800a428 <_printf_float+0x2f0>
 800a3b4:	4a1b      	ldr	r2, [pc, #108]	; (800a424 <_printf_float+0x2ec>)
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	4631      	mov	r1, r6
 800a3ba:	4628      	mov	r0, r5
 800a3bc:	47b8      	blx	r7
 800a3be:	3001      	adds	r0, #1
 800a3c0:	f43f af19 	beq.w	800a1f6 <_printf_float+0xbe>
 800a3c4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	d102      	bne.n	800a3d2 <_printf_float+0x29a>
 800a3cc:	6823      	ldr	r3, [r4, #0]
 800a3ce:	07d9      	lsls	r1, r3, #31
 800a3d0:	d5d8      	bpl.n	800a384 <_printf_float+0x24c>
 800a3d2:	ee18 3a10 	vmov	r3, s16
 800a3d6:	4652      	mov	r2, sl
 800a3d8:	4631      	mov	r1, r6
 800a3da:	4628      	mov	r0, r5
 800a3dc:	47b8      	blx	r7
 800a3de:	3001      	adds	r0, #1
 800a3e0:	f43f af09 	beq.w	800a1f6 <_printf_float+0xbe>
 800a3e4:	f04f 0900 	mov.w	r9, #0
 800a3e8:	f104 0a1a 	add.w	sl, r4, #26
 800a3ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3ee:	425b      	negs	r3, r3
 800a3f0:	454b      	cmp	r3, r9
 800a3f2:	dc01      	bgt.n	800a3f8 <_printf_float+0x2c0>
 800a3f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3f6:	e792      	b.n	800a31e <_printf_float+0x1e6>
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	4652      	mov	r2, sl
 800a3fc:	4631      	mov	r1, r6
 800a3fe:	4628      	mov	r0, r5
 800a400:	47b8      	blx	r7
 800a402:	3001      	adds	r0, #1
 800a404:	f43f aef7 	beq.w	800a1f6 <_printf_float+0xbe>
 800a408:	f109 0901 	add.w	r9, r9, #1
 800a40c:	e7ee      	b.n	800a3ec <_printf_float+0x2b4>
 800a40e:	bf00      	nop
 800a410:	7fefffff 	.word	0x7fefffff
 800a414:	0800cfd5 	.word	0x0800cfd5
 800a418:	0800cfd9 	.word	0x0800cfd9
 800a41c:	0800cfdd 	.word	0x0800cfdd
 800a420:	0800cfe1 	.word	0x0800cfe1
 800a424:	0800cfe5 	.word	0x0800cfe5
 800a428:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a42a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a42c:	429a      	cmp	r2, r3
 800a42e:	bfa8      	it	ge
 800a430:	461a      	movge	r2, r3
 800a432:	2a00      	cmp	r2, #0
 800a434:	4691      	mov	r9, r2
 800a436:	dc37      	bgt.n	800a4a8 <_printf_float+0x370>
 800a438:	f04f 0b00 	mov.w	fp, #0
 800a43c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a440:	f104 021a 	add.w	r2, r4, #26
 800a444:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a446:	9305      	str	r3, [sp, #20]
 800a448:	eba3 0309 	sub.w	r3, r3, r9
 800a44c:	455b      	cmp	r3, fp
 800a44e:	dc33      	bgt.n	800a4b8 <_printf_float+0x380>
 800a450:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a454:	429a      	cmp	r2, r3
 800a456:	db3b      	blt.n	800a4d0 <_printf_float+0x398>
 800a458:	6823      	ldr	r3, [r4, #0]
 800a45a:	07da      	lsls	r2, r3, #31
 800a45c:	d438      	bmi.n	800a4d0 <_printf_float+0x398>
 800a45e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a462:	eba2 0903 	sub.w	r9, r2, r3
 800a466:	9b05      	ldr	r3, [sp, #20]
 800a468:	1ad2      	subs	r2, r2, r3
 800a46a:	4591      	cmp	r9, r2
 800a46c:	bfa8      	it	ge
 800a46e:	4691      	movge	r9, r2
 800a470:	f1b9 0f00 	cmp.w	r9, #0
 800a474:	dc35      	bgt.n	800a4e2 <_printf_float+0x3aa>
 800a476:	f04f 0800 	mov.w	r8, #0
 800a47a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a47e:	f104 0a1a 	add.w	sl, r4, #26
 800a482:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a486:	1a9b      	subs	r3, r3, r2
 800a488:	eba3 0309 	sub.w	r3, r3, r9
 800a48c:	4543      	cmp	r3, r8
 800a48e:	f77f af79 	ble.w	800a384 <_printf_float+0x24c>
 800a492:	2301      	movs	r3, #1
 800a494:	4652      	mov	r2, sl
 800a496:	4631      	mov	r1, r6
 800a498:	4628      	mov	r0, r5
 800a49a:	47b8      	blx	r7
 800a49c:	3001      	adds	r0, #1
 800a49e:	f43f aeaa 	beq.w	800a1f6 <_printf_float+0xbe>
 800a4a2:	f108 0801 	add.w	r8, r8, #1
 800a4a6:	e7ec      	b.n	800a482 <_printf_float+0x34a>
 800a4a8:	4613      	mov	r3, r2
 800a4aa:	4631      	mov	r1, r6
 800a4ac:	4642      	mov	r2, r8
 800a4ae:	4628      	mov	r0, r5
 800a4b0:	47b8      	blx	r7
 800a4b2:	3001      	adds	r0, #1
 800a4b4:	d1c0      	bne.n	800a438 <_printf_float+0x300>
 800a4b6:	e69e      	b.n	800a1f6 <_printf_float+0xbe>
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	4631      	mov	r1, r6
 800a4bc:	4628      	mov	r0, r5
 800a4be:	9205      	str	r2, [sp, #20]
 800a4c0:	47b8      	blx	r7
 800a4c2:	3001      	adds	r0, #1
 800a4c4:	f43f ae97 	beq.w	800a1f6 <_printf_float+0xbe>
 800a4c8:	9a05      	ldr	r2, [sp, #20]
 800a4ca:	f10b 0b01 	add.w	fp, fp, #1
 800a4ce:	e7b9      	b.n	800a444 <_printf_float+0x30c>
 800a4d0:	ee18 3a10 	vmov	r3, s16
 800a4d4:	4652      	mov	r2, sl
 800a4d6:	4631      	mov	r1, r6
 800a4d8:	4628      	mov	r0, r5
 800a4da:	47b8      	blx	r7
 800a4dc:	3001      	adds	r0, #1
 800a4de:	d1be      	bne.n	800a45e <_printf_float+0x326>
 800a4e0:	e689      	b.n	800a1f6 <_printf_float+0xbe>
 800a4e2:	9a05      	ldr	r2, [sp, #20]
 800a4e4:	464b      	mov	r3, r9
 800a4e6:	4442      	add	r2, r8
 800a4e8:	4631      	mov	r1, r6
 800a4ea:	4628      	mov	r0, r5
 800a4ec:	47b8      	blx	r7
 800a4ee:	3001      	adds	r0, #1
 800a4f0:	d1c1      	bne.n	800a476 <_printf_float+0x33e>
 800a4f2:	e680      	b.n	800a1f6 <_printf_float+0xbe>
 800a4f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4f6:	2a01      	cmp	r2, #1
 800a4f8:	dc01      	bgt.n	800a4fe <_printf_float+0x3c6>
 800a4fa:	07db      	lsls	r3, r3, #31
 800a4fc:	d53a      	bpl.n	800a574 <_printf_float+0x43c>
 800a4fe:	2301      	movs	r3, #1
 800a500:	4642      	mov	r2, r8
 800a502:	4631      	mov	r1, r6
 800a504:	4628      	mov	r0, r5
 800a506:	47b8      	blx	r7
 800a508:	3001      	adds	r0, #1
 800a50a:	f43f ae74 	beq.w	800a1f6 <_printf_float+0xbe>
 800a50e:	ee18 3a10 	vmov	r3, s16
 800a512:	4652      	mov	r2, sl
 800a514:	4631      	mov	r1, r6
 800a516:	4628      	mov	r0, r5
 800a518:	47b8      	blx	r7
 800a51a:	3001      	adds	r0, #1
 800a51c:	f43f ae6b 	beq.w	800a1f6 <_printf_float+0xbe>
 800a520:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a524:	2200      	movs	r2, #0
 800a526:	2300      	movs	r3, #0
 800a528:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a52c:	f7f6 fb04 	bl	8000b38 <__aeabi_dcmpeq>
 800a530:	b9d8      	cbnz	r0, 800a56a <_printf_float+0x432>
 800a532:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a536:	f108 0201 	add.w	r2, r8, #1
 800a53a:	4631      	mov	r1, r6
 800a53c:	4628      	mov	r0, r5
 800a53e:	47b8      	blx	r7
 800a540:	3001      	adds	r0, #1
 800a542:	d10e      	bne.n	800a562 <_printf_float+0x42a>
 800a544:	e657      	b.n	800a1f6 <_printf_float+0xbe>
 800a546:	2301      	movs	r3, #1
 800a548:	4652      	mov	r2, sl
 800a54a:	4631      	mov	r1, r6
 800a54c:	4628      	mov	r0, r5
 800a54e:	47b8      	blx	r7
 800a550:	3001      	adds	r0, #1
 800a552:	f43f ae50 	beq.w	800a1f6 <_printf_float+0xbe>
 800a556:	f108 0801 	add.w	r8, r8, #1
 800a55a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a55c:	3b01      	subs	r3, #1
 800a55e:	4543      	cmp	r3, r8
 800a560:	dcf1      	bgt.n	800a546 <_printf_float+0x40e>
 800a562:	464b      	mov	r3, r9
 800a564:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a568:	e6da      	b.n	800a320 <_printf_float+0x1e8>
 800a56a:	f04f 0800 	mov.w	r8, #0
 800a56e:	f104 0a1a 	add.w	sl, r4, #26
 800a572:	e7f2      	b.n	800a55a <_printf_float+0x422>
 800a574:	2301      	movs	r3, #1
 800a576:	4642      	mov	r2, r8
 800a578:	e7df      	b.n	800a53a <_printf_float+0x402>
 800a57a:	2301      	movs	r3, #1
 800a57c:	464a      	mov	r2, r9
 800a57e:	4631      	mov	r1, r6
 800a580:	4628      	mov	r0, r5
 800a582:	47b8      	blx	r7
 800a584:	3001      	adds	r0, #1
 800a586:	f43f ae36 	beq.w	800a1f6 <_printf_float+0xbe>
 800a58a:	f108 0801 	add.w	r8, r8, #1
 800a58e:	68e3      	ldr	r3, [r4, #12]
 800a590:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a592:	1a5b      	subs	r3, r3, r1
 800a594:	4543      	cmp	r3, r8
 800a596:	dcf0      	bgt.n	800a57a <_printf_float+0x442>
 800a598:	e6f8      	b.n	800a38c <_printf_float+0x254>
 800a59a:	f04f 0800 	mov.w	r8, #0
 800a59e:	f104 0919 	add.w	r9, r4, #25
 800a5a2:	e7f4      	b.n	800a58e <_printf_float+0x456>

0800a5a4 <_printf_common>:
 800a5a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5a8:	4616      	mov	r6, r2
 800a5aa:	4699      	mov	r9, r3
 800a5ac:	688a      	ldr	r2, [r1, #8]
 800a5ae:	690b      	ldr	r3, [r1, #16]
 800a5b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	bfb8      	it	lt
 800a5b8:	4613      	movlt	r3, r2
 800a5ba:	6033      	str	r3, [r6, #0]
 800a5bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a5c0:	4607      	mov	r7, r0
 800a5c2:	460c      	mov	r4, r1
 800a5c4:	b10a      	cbz	r2, 800a5ca <_printf_common+0x26>
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	6033      	str	r3, [r6, #0]
 800a5ca:	6823      	ldr	r3, [r4, #0]
 800a5cc:	0699      	lsls	r1, r3, #26
 800a5ce:	bf42      	ittt	mi
 800a5d0:	6833      	ldrmi	r3, [r6, #0]
 800a5d2:	3302      	addmi	r3, #2
 800a5d4:	6033      	strmi	r3, [r6, #0]
 800a5d6:	6825      	ldr	r5, [r4, #0]
 800a5d8:	f015 0506 	ands.w	r5, r5, #6
 800a5dc:	d106      	bne.n	800a5ec <_printf_common+0x48>
 800a5de:	f104 0a19 	add.w	sl, r4, #25
 800a5e2:	68e3      	ldr	r3, [r4, #12]
 800a5e4:	6832      	ldr	r2, [r6, #0]
 800a5e6:	1a9b      	subs	r3, r3, r2
 800a5e8:	42ab      	cmp	r3, r5
 800a5ea:	dc26      	bgt.n	800a63a <_printf_common+0x96>
 800a5ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a5f0:	1e13      	subs	r3, r2, #0
 800a5f2:	6822      	ldr	r2, [r4, #0]
 800a5f4:	bf18      	it	ne
 800a5f6:	2301      	movne	r3, #1
 800a5f8:	0692      	lsls	r2, r2, #26
 800a5fa:	d42b      	bmi.n	800a654 <_printf_common+0xb0>
 800a5fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a600:	4649      	mov	r1, r9
 800a602:	4638      	mov	r0, r7
 800a604:	47c0      	blx	r8
 800a606:	3001      	adds	r0, #1
 800a608:	d01e      	beq.n	800a648 <_printf_common+0xa4>
 800a60a:	6823      	ldr	r3, [r4, #0]
 800a60c:	6922      	ldr	r2, [r4, #16]
 800a60e:	f003 0306 	and.w	r3, r3, #6
 800a612:	2b04      	cmp	r3, #4
 800a614:	bf02      	ittt	eq
 800a616:	68e5      	ldreq	r5, [r4, #12]
 800a618:	6833      	ldreq	r3, [r6, #0]
 800a61a:	1aed      	subeq	r5, r5, r3
 800a61c:	68a3      	ldr	r3, [r4, #8]
 800a61e:	bf0c      	ite	eq
 800a620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a624:	2500      	movne	r5, #0
 800a626:	4293      	cmp	r3, r2
 800a628:	bfc4      	itt	gt
 800a62a:	1a9b      	subgt	r3, r3, r2
 800a62c:	18ed      	addgt	r5, r5, r3
 800a62e:	2600      	movs	r6, #0
 800a630:	341a      	adds	r4, #26
 800a632:	42b5      	cmp	r5, r6
 800a634:	d11a      	bne.n	800a66c <_printf_common+0xc8>
 800a636:	2000      	movs	r0, #0
 800a638:	e008      	b.n	800a64c <_printf_common+0xa8>
 800a63a:	2301      	movs	r3, #1
 800a63c:	4652      	mov	r2, sl
 800a63e:	4649      	mov	r1, r9
 800a640:	4638      	mov	r0, r7
 800a642:	47c0      	blx	r8
 800a644:	3001      	adds	r0, #1
 800a646:	d103      	bne.n	800a650 <_printf_common+0xac>
 800a648:	f04f 30ff 	mov.w	r0, #4294967295
 800a64c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a650:	3501      	adds	r5, #1
 800a652:	e7c6      	b.n	800a5e2 <_printf_common+0x3e>
 800a654:	18e1      	adds	r1, r4, r3
 800a656:	1c5a      	adds	r2, r3, #1
 800a658:	2030      	movs	r0, #48	; 0x30
 800a65a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a65e:	4422      	add	r2, r4
 800a660:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a664:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a668:	3302      	adds	r3, #2
 800a66a:	e7c7      	b.n	800a5fc <_printf_common+0x58>
 800a66c:	2301      	movs	r3, #1
 800a66e:	4622      	mov	r2, r4
 800a670:	4649      	mov	r1, r9
 800a672:	4638      	mov	r0, r7
 800a674:	47c0      	blx	r8
 800a676:	3001      	adds	r0, #1
 800a678:	d0e6      	beq.n	800a648 <_printf_common+0xa4>
 800a67a:	3601      	adds	r6, #1
 800a67c:	e7d9      	b.n	800a632 <_printf_common+0x8e>
	...

0800a680 <_printf_i>:
 800a680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a684:	7e0f      	ldrb	r7, [r1, #24]
 800a686:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a688:	2f78      	cmp	r7, #120	; 0x78
 800a68a:	4691      	mov	r9, r2
 800a68c:	4680      	mov	r8, r0
 800a68e:	460c      	mov	r4, r1
 800a690:	469a      	mov	sl, r3
 800a692:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a696:	d807      	bhi.n	800a6a8 <_printf_i+0x28>
 800a698:	2f62      	cmp	r7, #98	; 0x62
 800a69a:	d80a      	bhi.n	800a6b2 <_printf_i+0x32>
 800a69c:	2f00      	cmp	r7, #0
 800a69e:	f000 80d4 	beq.w	800a84a <_printf_i+0x1ca>
 800a6a2:	2f58      	cmp	r7, #88	; 0x58
 800a6a4:	f000 80c0 	beq.w	800a828 <_printf_i+0x1a8>
 800a6a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a6b0:	e03a      	b.n	800a728 <_printf_i+0xa8>
 800a6b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a6b6:	2b15      	cmp	r3, #21
 800a6b8:	d8f6      	bhi.n	800a6a8 <_printf_i+0x28>
 800a6ba:	a101      	add	r1, pc, #4	; (adr r1, 800a6c0 <_printf_i+0x40>)
 800a6bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6c0:	0800a719 	.word	0x0800a719
 800a6c4:	0800a72d 	.word	0x0800a72d
 800a6c8:	0800a6a9 	.word	0x0800a6a9
 800a6cc:	0800a6a9 	.word	0x0800a6a9
 800a6d0:	0800a6a9 	.word	0x0800a6a9
 800a6d4:	0800a6a9 	.word	0x0800a6a9
 800a6d8:	0800a72d 	.word	0x0800a72d
 800a6dc:	0800a6a9 	.word	0x0800a6a9
 800a6e0:	0800a6a9 	.word	0x0800a6a9
 800a6e4:	0800a6a9 	.word	0x0800a6a9
 800a6e8:	0800a6a9 	.word	0x0800a6a9
 800a6ec:	0800a831 	.word	0x0800a831
 800a6f0:	0800a759 	.word	0x0800a759
 800a6f4:	0800a7eb 	.word	0x0800a7eb
 800a6f8:	0800a6a9 	.word	0x0800a6a9
 800a6fc:	0800a6a9 	.word	0x0800a6a9
 800a700:	0800a853 	.word	0x0800a853
 800a704:	0800a6a9 	.word	0x0800a6a9
 800a708:	0800a759 	.word	0x0800a759
 800a70c:	0800a6a9 	.word	0x0800a6a9
 800a710:	0800a6a9 	.word	0x0800a6a9
 800a714:	0800a7f3 	.word	0x0800a7f3
 800a718:	682b      	ldr	r3, [r5, #0]
 800a71a:	1d1a      	adds	r2, r3, #4
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	602a      	str	r2, [r5, #0]
 800a720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a724:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a728:	2301      	movs	r3, #1
 800a72a:	e09f      	b.n	800a86c <_printf_i+0x1ec>
 800a72c:	6820      	ldr	r0, [r4, #0]
 800a72e:	682b      	ldr	r3, [r5, #0]
 800a730:	0607      	lsls	r7, r0, #24
 800a732:	f103 0104 	add.w	r1, r3, #4
 800a736:	6029      	str	r1, [r5, #0]
 800a738:	d501      	bpl.n	800a73e <_printf_i+0xbe>
 800a73a:	681e      	ldr	r6, [r3, #0]
 800a73c:	e003      	b.n	800a746 <_printf_i+0xc6>
 800a73e:	0646      	lsls	r6, r0, #25
 800a740:	d5fb      	bpl.n	800a73a <_printf_i+0xba>
 800a742:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a746:	2e00      	cmp	r6, #0
 800a748:	da03      	bge.n	800a752 <_printf_i+0xd2>
 800a74a:	232d      	movs	r3, #45	; 0x2d
 800a74c:	4276      	negs	r6, r6
 800a74e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a752:	485a      	ldr	r0, [pc, #360]	; (800a8bc <_printf_i+0x23c>)
 800a754:	230a      	movs	r3, #10
 800a756:	e012      	b.n	800a77e <_printf_i+0xfe>
 800a758:	682b      	ldr	r3, [r5, #0]
 800a75a:	6820      	ldr	r0, [r4, #0]
 800a75c:	1d19      	adds	r1, r3, #4
 800a75e:	6029      	str	r1, [r5, #0]
 800a760:	0605      	lsls	r5, r0, #24
 800a762:	d501      	bpl.n	800a768 <_printf_i+0xe8>
 800a764:	681e      	ldr	r6, [r3, #0]
 800a766:	e002      	b.n	800a76e <_printf_i+0xee>
 800a768:	0641      	lsls	r1, r0, #25
 800a76a:	d5fb      	bpl.n	800a764 <_printf_i+0xe4>
 800a76c:	881e      	ldrh	r6, [r3, #0]
 800a76e:	4853      	ldr	r0, [pc, #332]	; (800a8bc <_printf_i+0x23c>)
 800a770:	2f6f      	cmp	r7, #111	; 0x6f
 800a772:	bf0c      	ite	eq
 800a774:	2308      	moveq	r3, #8
 800a776:	230a      	movne	r3, #10
 800a778:	2100      	movs	r1, #0
 800a77a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a77e:	6865      	ldr	r5, [r4, #4]
 800a780:	60a5      	str	r5, [r4, #8]
 800a782:	2d00      	cmp	r5, #0
 800a784:	bfa2      	ittt	ge
 800a786:	6821      	ldrge	r1, [r4, #0]
 800a788:	f021 0104 	bicge.w	r1, r1, #4
 800a78c:	6021      	strge	r1, [r4, #0]
 800a78e:	b90e      	cbnz	r6, 800a794 <_printf_i+0x114>
 800a790:	2d00      	cmp	r5, #0
 800a792:	d04b      	beq.n	800a82c <_printf_i+0x1ac>
 800a794:	4615      	mov	r5, r2
 800a796:	fbb6 f1f3 	udiv	r1, r6, r3
 800a79a:	fb03 6711 	mls	r7, r3, r1, r6
 800a79e:	5dc7      	ldrb	r7, [r0, r7]
 800a7a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a7a4:	4637      	mov	r7, r6
 800a7a6:	42bb      	cmp	r3, r7
 800a7a8:	460e      	mov	r6, r1
 800a7aa:	d9f4      	bls.n	800a796 <_printf_i+0x116>
 800a7ac:	2b08      	cmp	r3, #8
 800a7ae:	d10b      	bne.n	800a7c8 <_printf_i+0x148>
 800a7b0:	6823      	ldr	r3, [r4, #0]
 800a7b2:	07de      	lsls	r6, r3, #31
 800a7b4:	d508      	bpl.n	800a7c8 <_printf_i+0x148>
 800a7b6:	6923      	ldr	r3, [r4, #16]
 800a7b8:	6861      	ldr	r1, [r4, #4]
 800a7ba:	4299      	cmp	r1, r3
 800a7bc:	bfde      	ittt	le
 800a7be:	2330      	movle	r3, #48	; 0x30
 800a7c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a7c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a7c8:	1b52      	subs	r2, r2, r5
 800a7ca:	6122      	str	r2, [r4, #16]
 800a7cc:	f8cd a000 	str.w	sl, [sp]
 800a7d0:	464b      	mov	r3, r9
 800a7d2:	aa03      	add	r2, sp, #12
 800a7d4:	4621      	mov	r1, r4
 800a7d6:	4640      	mov	r0, r8
 800a7d8:	f7ff fee4 	bl	800a5a4 <_printf_common>
 800a7dc:	3001      	adds	r0, #1
 800a7de:	d14a      	bne.n	800a876 <_printf_i+0x1f6>
 800a7e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a7e4:	b004      	add	sp, #16
 800a7e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ea:	6823      	ldr	r3, [r4, #0]
 800a7ec:	f043 0320 	orr.w	r3, r3, #32
 800a7f0:	6023      	str	r3, [r4, #0]
 800a7f2:	4833      	ldr	r0, [pc, #204]	; (800a8c0 <_printf_i+0x240>)
 800a7f4:	2778      	movs	r7, #120	; 0x78
 800a7f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a7fa:	6823      	ldr	r3, [r4, #0]
 800a7fc:	6829      	ldr	r1, [r5, #0]
 800a7fe:	061f      	lsls	r7, r3, #24
 800a800:	f851 6b04 	ldr.w	r6, [r1], #4
 800a804:	d402      	bmi.n	800a80c <_printf_i+0x18c>
 800a806:	065f      	lsls	r7, r3, #25
 800a808:	bf48      	it	mi
 800a80a:	b2b6      	uxthmi	r6, r6
 800a80c:	07df      	lsls	r7, r3, #31
 800a80e:	bf48      	it	mi
 800a810:	f043 0320 	orrmi.w	r3, r3, #32
 800a814:	6029      	str	r1, [r5, #0]
 800a816:	bf48      	it	mi
 800a818:	6023      	strmi	r3, [r4, #0]
 800a81a:	b91e      	cbnz	r6, 800a824 <_printf_i+0x1a4>
 800a81c:	6823      	ldr	r3, [r4, #0]
 800a81e:	f023 0320 	bic.w	r3, r3, #32
 800a822:	6023      	str	r3, [r4, #0]
 800a824:	2310      	movs	r3, #16
 800a826:	e7a7      	b.n	800a778 <_printf_i+0xf8>
 800a828:	4824      	ldr	r0, [pc, #144]	; (800a8bc <_printf_i+0x23c>)
 800a82a:	e7e4      	b.n	800a7f6 <_printf_i+0x176>
 800a82c:	4615      	mov	r5, r2
 800a82e:	e7bd      	b.n	800a7ac <_printf_i+0x12c>
 800a830:	682b      	ldr	r3, [r5, #0]
 800a832:	6826      	ldr	r6, [r4, #0]
 800a834:	6961      	ldr	r1, [r4, #20]
 800a836:	1d18      	adds	r0, r3, #4
 800a838:	6028      	str	r0, [r5, #0]
 800a83a:	0635      	lsls	r5, r6, #24
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	d501      	bpl.n	800a844 <_printf_i+0x1c4>
 800a840:	6019      	str	r1, [r3, #0]
 800a842:	e002      	b.n	800a84a <_printf_i+0x1ca>
 800a844:	0670      	lsls	r0, r6, #25
 800a846:	d5fb      	bpl.n	800a840 <_printf_i+0x1c0>
 800a848:	8019      	strh	r1, [r3, #0]
 800a84a:	2300      	movs	r3, #0
 800a84c:	6123      	str	r3, [r4, #16]
 800a84e:	4615      	mov	r5, r2
 800a850:	e7bc      	b.n	800a7cc <_printf_i+0x14c>
 800a852:	682b      	ldr	r3, [r5, #0]
 800a854:	1d1a      	adds	r2, r3, #4
 800a856:	602a      	str	r2, [r5, #0]
 800a858:	681d      	ldr	r5, [r3, #0]
 800a85a:	6862      	ldr	r2, [r4, #4]
 800a85c:	2100      	movs	r1, #0
 800a85e:	4628      	mov	r0, r5
 800a860:	f7f5 fcee 	bl	8000240 <memchr>
 800a864:	b108      	cbz	r0, 800a86a <_printf_i+0x1ea>
 800a866:	1b40      	subs	r0, r0, r5
 800a868:	6060      	str	r0, [r4, #4]
 800a86a:	6863      	ldr	r3, [r4, #4]
 800a86c:	6123      	str	r3, [r4, #16]
 800a86e:	2300      	movs	r3, #0
 800a870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a874:	e7aa      	b.n	800a7cc <_printf_i+0x14c>
 800a876:	6923      	ldr	r3, [r4, #16]
 800a878:	462a      	mov	r2, r5
 800a87a:	4649      	mov	r1, r9
 800a87c:	4640      	mov	r0, r8
 800a87e:	47d0      	blx	sl
 800a880:	3001      	adds	r0, #1
 800a882:	d0ad      	beq.n	800a7e0 <_printf_i+0x160>
 800a884:	6823      	ldr	r3, [r4, #0]
 800a886:	079b      	lsls	r3, r3, #30
 800a888:	d413      	bmi.n	800a8b2 <_printf_i+0x232>
 800a88a:	68e0      	ldr	r0, [r4, #12]
 800a88c:	9b03      	ldr	r3, [sp, #12]
 800a88e:	4298      	cmp	r0, r3
 800a890:	bfb8      	it	lt
 800a892:	4618      	movlt	r0, r3
 800a894:	e7a6      	b.n	800a7e4 <_printf_i+0x164>
 800a896:	2301      	movs	r3, #1
 800a898:	4632      	mov	r2, r6
 800a89a:	4649      	mov	r1, r9
 800a89c:	4640      	mov	r0, r8
 800a89e:	47d0      	blx	sl
 800a8a0:	3001      	adds	r0, #1
 800a8a2:	d09d      	beq.n	800a7e0 <_printf_i+0x160>
 800a8a4:	3501      	adds	r5, #1
 800a8a6:	68e3      	ldr	r3, [r4, #12]
 800a8a8:	9903      	ldr	r1, [sp, #12]
 800a8aa:	1a5b      	subs	r3, r3, r1
 800a8ac:	42ab      	cmp	r3, r5
 800a8ae:	dcf2      	bgt.n	800a896 <_printf_i+0x216>
 800a8b0:	e7eb      	b.n	800a88a <_printf_i+0x20a>
 800a8b2:	2500      	movs	r5, #0
 800a8b4:	f104 0619 	add.w	r6, r4, #25
 800a8b8:	e7f5      	b.n	800a8a6 <_printf_i+0x226>
 800a8ba:	bf00      	nop
 800a8bc:	0800cfe7 	.word	0x0800cfe7
 800a8c0:	0800cff8 	.word	0x0800cff8

0800a8c4 <std>:
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	b510      	push	{r4, lr}
 800a8c8:	4604      	mov	r4, r0
 800a8ca:	e9c0 3300 	strd	r3, r3, [r0]
 800a8ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a8d2:	6083      	str	r3, [r0, #8]
 800a8d4:	8181      	strh	r1, [r0, #12]
 800a8d6:	6643      	str	r3, [r0, #100]	; 0x64
 800a8d8:	81c2      	strh	r2, [r0, #14]
 800a8da:	6183      	str	r3, [r0, #24]
 800a8dc:	4619      	mov	r1, r3
 800a8de:	2208      	movs	r2, #8
 800a8e0:	305c      	adds	r0, #92	; 0x5c
 800a8e2:	f000 f936 	bl	800ab52 <memset>
 800a8e6:	4b05      	ldr	r3, [pc, #20]	; (800a8fc <std+0x38>)
 800a8e8:	6263      	str	r3, [r4, #36]	; 0x24
 800a8ea:	4b05      	ldr	r3, [pc, #20]	; (800a900 <std+0x3c>)
 800a8ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800a8ee:	4b05      	ldr	r3, [pc, #20]	; (800a904 <std+0x40>)
 800a8f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a8f2:	4b05      	ldr	r3, [pc, #20]	; (800a908 <std+0x44>)
 800a8f4:	6224      	str	r4, [r4, #32]
 800a8f6:	6323      	str	r3, [r4, #48]	; 0x30
 800a8f8:	bd10      	pop	{r4, pc}
 800a8fa:	bf00      	nop
 800a8fc:	0800aacd 	.word	0x0800aacd
 800a900:	0800aaef 	.word	0x0800aaef
 800a904:	0800ab27 	.word	0x0800ab27
 800a908:	0800ab4b 	.word	0x0800ab4b

0800a90c <stdio_exit_handler>:
 800a90c:	4a02      	ldr	r2, [pc, #8]	; (800a918 <stdio_exit_handler+0xc>)
 800a90e:	4903      	ldr	r1, [pc, #12]	; (800a91c <stdio_exit_handler+0x10>)
 800a910:	4803      	ldr	r0, [pc, #12]	; (800a920 <stdio_exit_handler+0x14>)
 800a912:	f000 b869 	b.w	800a9e8 <_fwalk_sglue>
 800a916:	bf00      	nop
 800a918:	200000c8 	.word	0x200000c8
 800a91c:	0800c6f1 	.word	0x0800c6f1
 800a920:	200000d4 	.word	0x200000d4

0800a924 <cleanup_stdio>:
 800a924:	6841      	ldr	r1, [r0, #4]
 800a926:	4b0c      	ldr	r3, [pc, #48]	; (800a958 <cleanup_stdio+0x34>)
 800a928:	4299      	cmp	r1, r3
 800a92a:	b510      	push	{r4, lr}
 800a92c:	4604      	mov	r4, r0
 800a92e:	d001      	beq.n	800a934 <cleanup_stdio+0x10>
 800a930:	f001 fede 	bl	800c6f0 <_fflush_r>
 800a934:	68a1      	ldr	r1, [r4, #8]
 800a936:	4b09      	ldr	r3, [pc, #36]	; (800a95c <cleanup_stdio+0x38>)
 800a938:	4299      	cmp	r1, r3
 800a93a:	d002      	beq.n	800a942 <cleanup_stdio+0x1e>
 800a93c:	4620      	mov	r0, r4
 800a93e:	f001 fed7 	bl	800c6f0 <_fflush_r>
 800a942:	68e1      	ldr	r1, [r4, #12]
 800a944:	4b06      	ldr	r3, [pc, #24]	; (800a960 <cleanup_stdio+0x3c>)
 800a946:	4299      	cmp	r1, r3
 800a948:	d004      	beq.n	800a954 <cleanup_stdio+0x30>
 800a94a:	4620      	mov	r0, r4
 800a94c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a950:	f001 bece 	b.w	800c6f0 <_fflush_r>
 800a954:	bd10      	pop	{r4, pc}
 800a956:	bf00      	nop
 800a958:	200006b8 	.word	0x200006b8
 800a95c:	20000720 	.word	0x20000720
 800a960:	20000788 	.word	0x20000788

0800a964 <global_stdio_init.part.0>:
 800a964:	b510      	push	{r4, lr}
 800a966:	4b0b      	ldr	r3, [pc, #44]	; (800a994 <global_stdio_init.part.0+0x30>)
 800a968:	4c0b      	ldr	r4, [pc, #44]	; (800a998 <global_stdio_init.part.0+0x34>)
 800a96a:	4a0c      	ldr	r2, [pc, #48]	; (800a99c <global_stdio_init.part.0+0x38>)
 800a96c:	601a      	str	r2, [r3, #0]
 800a96e:	4620      	mov	r0, r4
 800a970:	2200      	movs	r2, #0
 800a972:	2104      	movs	r1, #4
 800a974:	f7ff ffa6 	bl	800a8c4 <std>
 800a978:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a97c:	2201      	movs	r2, #1
 800a97e:	2109      	movs	r1, #9
 800a980:	f7ff ffa0 	bl	800a8c4 <std>
 800a984:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a988:	2202      	movs	r2, #2
 800a98a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a98e:	2112      	movs	r1, #18
 800a990:	f7ff bf98 	b.w	800a8c4 <std>
 800a994:	200007f0 	.word	0x200007f0
 800a998:	200006b8 	.word	0x200006b8
 800a99c:	0800a90d 	.word	0x0800a90d

0800a9a0 <__sfp_lock_acquire>:
 800a9a0:	4801      	ldr	r0, [pc, #4]	; (800a9a8 <__sfp_lock_acquire+0x8>)
 800a9a2:	f000 b9af 	b.w	800ad04 <__retarget_lock_acquire_recursive>
 800a9a6:	bf00      	nop
 800a9a8:	200007f9 	.word	0x200007f9

0800a9ac <__sfp_lock_release>:
 800a9ac:	4801      	ldr	r0, [pc, #4]	; (800a9b4 <__sfp_lock_release+0x8>)
 800a9ae:	f000 b9aa 	b.w	800ad06 <__retarget_lock_release_recursive>
 800a9b2:	bf00      	nop
 800a9b4:	200007f9 	.word	0x200007f9

0800a9b8 <__sinit>:
 800a9b8:	b510      	push	{r4, lr}
 800a9ba:	4604      	mov	r4, r0
 800a9bc:	f7ff fff0 	bl	800a9a0 <__sfp_lock_acquire>
 800a9c0:	6a23      	ldr	r3, [r4, #32]
 800a9c2:	b11b      	cbz	r3, 800a9cc <__sinit+0x14>
 800a9c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9c8:	f7ff bff0 	b.w	800a9ac <__sfp_lock_release>
 800a9cc:	4b04      	ldr	r3, [pc, #16]	; (800a9e0 <__sinit+0x28>)
 800a9ce:	6223      	str	r3, [r4, #32]
 800a9d0:	4b04      	ldr	r3, [pc, #16]	; (800a9e4 <__sinit+0x2c>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d1f5      	bne.n	800a9c4 <__sinit+0xc>
 800a9d8:	f7ff ffc4 	bl	800a964 <global_stdio_init.part.0>
 800a9dc:	e7f2      	b.n	800a9c4 <__sinit+0xc>
 800a9de:	bf00      	nop
 800a9e0:	0800a925 	.word	0x0800a925
 800a9e4:	200007f0 	.word	0x200007f0

0800a9e8 <_fwalk_sglue>:
 800a9e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9ec:	4607      	mov	r7, r0
 800a9ee:	4688      	mov	r8, r1
 800a9f0:	4614      	mov	r4, r2
 800a9f2:	2600      	movs	r6, #0
 800a9f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a9f8:	f1b9 0901 	subs.w	r9, r9, #1
 800a9fc:	d505      	bpl.n	800aa0a <_fwalk_sglue+0x22>
 800a9fe:	6824      	ldr	r4, [r4, #0]
 800aa00:	2c00      	cmp	r4, #0
 800aa02:	d1f7      	bne.n	800a9f4 <_fwalk_sglue+0xc>
 800aa04:	4630      	mov	r0, r6
 800aa06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa0a:	89ab      	ldrh	r3, [r5, #12]
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d907      	bls.n	800aa20 <_fwalk_sglue+0x38>
 800aa10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa14:	3301      	adds	r3, #1
 800aa16:	d003      	beq.n	800aa20 <_fwalk_sglue+0x38>
 800aa18:	4629      	mov	r1, r5
 800aa1a:	4638      	mov	r0, r7
 800aa1c:	47c0      	blx	r8
 800aa1e:	4306      	orrs	r6, r0
 800aa20:	3568      	adds	r5, #104	; 0x68
 800aa22:	e7e9      	b.n	800a9f8 <_fwalk_sglue+0x10>

0800aa24 <sniprintf>:
 800aa24:	b40c      	push	{r2, r3}
 800aa26:	b530      	push	{r4, r5, lr}
 800aa28:	4b17      	ldr	r3, [pc, #92]	; (800aa88 <sniprintf+0x64>)
 800aa2a:	1e0c      	subs	r4, r1, #0
 800aa2c:	681d      	ldr	r5, [r3, #0]
 800aa2e:	b09d      	sub	sp, #116	; 0x74
 800aa30:	da08      	bge.n	800aa44 <sniprintf+0x20>
 800aa32:	238b      	movs	r3, #139	; 0x8b
 800aa34:	602b      	str	r3, [r5, #0]
 800aa36:	f04f 30ff 	mov.w	r0, #4294967295
 800aa3a:	b01d      	add	sp, #116	; 0x74
 800aa3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa40:	b002      	add	sp, #8
 800aa42:	4770      	bx	lr
 800aa44:	f44f 7302 	mov.w	r3, #520	; 0x208
 800aa48:	f8ad 3014 	strh.w	r3, [sp, #20]
 800aa4c:	bf14      	ite	ne
 800aa4e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800aa52:	4623      	moveq	r3, r4
 800aa54:	9304      	str	r3, [sp, #16]
 800aa56:	9307      	str	r3, [sp, #28]
 800aa58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa5c:	9002      	str	r0, [sp, #8]
 800aa5e:	9006      	str	r0, [sp, #24]
 800aa60:	f8ad 3016 	strh.w	r3, [sp, #22]
 800aa64:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800aa66:	ab21      	add	r3, sp, #132	; 0x84
 800aa68:	a902      	add	r1, sp, #8
 800aa6a:	4628      	mov	r0, r5
 800aa6c:	9301      	str	r3, [sp, #4]
 800aa6e:	f001 fcbb 	bl	800c3e8 <_svfiprintf_r>
 800aa72:	1c43      	adds	r3, r0, #1
 800aa74:	bfbc      	itt	lt
 800aa76:	238b      	movlt	r3, #139	; 0x8b
 800aa78:	602b      	strlt	r3, [r5, #0]
 800aa7a:	2c00      	cmp	r4, #0
 800aa7c:	d0dd      	beq.n	800aa3a <sniprintf+0x16>
 800aa7e:	9b02      	ldr	r3, [sp, #8]
 800aa80:	2200      	movs	r2, #0
 800aa82:	701a      	strb	r2, [r3, #0]
 800aa84:	e7d9      	b.n	800aa3a <sniprintf+0x16>
 800aa86:	bf00      	nop
 800aa88:	20000120 	.word	0x20000120

0800aa8c <siprintf>:
 800aa8c:	b40e      	push	{r1, r2, r3}
 800aa8e:	b500      	push	{lr}
 800aa90:	b09c      	sub	sp, #112	; 0x70
 800aa92:	ab1d      	add	r3, sp, #116	; 0x74
 800aa94:	9002      	str	r0, [sp, #8]
 800aa96:	9006      	str	r0, [sp, #24]
 800aa98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aa9c:	4809      	ldr	r0, [pc, #36]	; (800aac4 <siprintf+0x38>)
 800aa9e:	9107      	str	r1, [sp, #28]
 800aaa0:	9104      	str	r1, [sp, #16]
 800aaa2:	4909      	ldr	r1, [pc, #36]	; (800aac8 <siprintf+0x3c>)
 800aaa4:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaa8:	9105      	str	r1, [sp, #20]
 800aaaa:	6800      	ldr	r0, [r0, #0]
 800aaac:	9301      	str	r3, [sp, #4]
 800aaae:	a902      	add	r1, sp, #8
 800aab0:	f001 fc9a 	bl	800c3e8 <_svfiprintf_r>
 800aab4:	9b02      	ldr	r3, [sp, #8]
 800aab6:	2200      	movs	r2, #0
 800aab8:	701a      	strb	r2, [r3, #0]
 800aaba:	b01c      	add	sp, #112	; 0x70
 800aabc:	f85d eb04 	ldr.w	lr, [sp], #4
 800aac0:	b003      	add	sp, #12
 800aac2:	4770      	bx	lr
 800aac4:	20000120 	.word	0x20000120
 800aac8:	ffff0208 	.word	0xffff0208

0800aacc <__sread>:
 800aacc:	b510      	push	{r4, lr}
 800aace:	460c      	mov	r4, r1
 800aad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aad4:	f000 f8c8 	bl	800ac68 <_read_r>
 800aad8:	2800      	cmp	r0, #0
 800aada:	bfab      	itete	ge
 800aadc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aade:	89a3      	ldrhlt	r3, [r4, #12]
 800aae0:	181b      	addge	r3, r3, r0
 800aae2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aae6:	bfac      	ite	ge
 800aae8:	6563      	strge	r3, [r4, #84]	; 0x54
 800aaea:	81a3      	strhlt	r3, [r4, #12]
 800aaec:	bd10      	pop	{r4, pc}

0800aaee <__swrite>:
 800aaee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaf2:	461f      	mov	r7, r3
 800aaf4:	898b      	ldrh	r3, [r1, #12]
 800aaf6:	05db      	lsls	r3, r3, #23
 800aaf8:	4605      	mov	r5, r0
 800aafa:	460c      	mov	r4, r1
 800aafc:	4616      	mov	r6, r2
 800aafe:	d505      	bpl.n	800ab0c <__swrite+0x1e>
 800ab00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab04:	2302      	movs	r3, #2
 800ab06:	2200      	movs	r2, #0
 800ab08:	f000 f89c 	bl	800ac44 <_lseek_r>
 800ab0c:	89a3      	ldrh	r3, [r4, #12]
 800ab0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab16:	81a3      	strh	r3, [r4, #12]
 800ab18:	4632      	mov	r2, r6
 800ab1a:	463b      	mov	r3, r7
 800ab1c:	4628      	mov	r0, r5
 800ab1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab22:	f000 b8b3 	b.w	800ac8c <_write_r>

0800ab26 <__sseek>:
 800ab26:	b510      	push	{r4, lr}
 800ab28:	460c      	mov	r4, r1
 800ab2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab2e:	f000 f889 	bl	800ac44 <_lseek_r>
 800ab32:	1c43      	adds	r3, r0, #1
 800ab34:	89a3      	ldrh	r3, [r4, #12]
 800ab36:	bf15      	itete	ne
 800ab38:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab42:	81a3      	strheq	r3, [r4, #12]
 800ab44:	bf18      	it	ne
 800ab46:	81a3      	strhne	r3, [r4, #12]
 800ab48:	bd10      	pop	{r4, pc}

0800ab4a <__sclose>:
 800ab4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab4e:	f000 b869 	b.w	800ac24 <_close_r>

0800ab52 <memset>:
 800ab52:	4402      	add	r2, r0
 800ab54:	4603      	mov	r3, r0
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d100      	bne.n	800ab5c <memset+0xa>
 800ab5a:	4770      	bx	lr
 800ab5c:	f803 1b01 	strb.w	r1, [r3], #1
 800ab60:	e7f9      	b.n	800ab56 <memset+0x4>
	...

0800ab64 <strtok>:
 800ab64:	4b16      	ldr	r3, [pc, #88]	; (800abc0 <strtok+0x5c>)
 800ab66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab68:	681e      	ldr	r6, [r3, #0]
 800ab6a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800ab6c:	4605      	mov	r5, r0
 800ab6e:	b9fc      	cbnz	r4, 800abb0 <strtok+0x4c>
 800ab70:	2050      	movs	r0, #80	; 0x50
 800ab72:	9101      	str	r1, [sp, #4]
 800ab74:	f000 ffae 	bl	800bad4 <malloc>
 800ab78:	9901      	ldr	r1, [sp, #4]
 800ab7a:	6470      	str	r0, [r6, #68]	; 0x44
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	b920      	cbnz	r0, 800ab8a <strtok+0x26>
 800ab80:	4b10      	ldr	r3, [pc, #64]	; (800abc4 <strtok+0x60>)
 800ab82:	4811      	ldr	r0, [pc, #68]	; (800abc8 <strtok+0x64>)
 800ab84:	215b      	movs	r1, #91	; 0x5b
 800ab86:	f000 f8bf 	bl	800ad08 <__assert_func>
 800ab8a:	e9c0 4400 	strd	r4, r4, [r0]
 800ab8e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ab92:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ab96:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ab9a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ab9e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800aba2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800aba6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800abaa:	6184      	str	r4, [r0, #24]
 800abac:	7704      	strb	r4, [r0, #28]
 800abae:	6244      	str	r4, [r0, #36]	; 0x24
 800abb0:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800abb2:	2301      	movs	r3, #1
 800abb4:	4628      	mov	r0, r5
 800abb6:	b002      	add	sp, #8
 800abb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800abbc:	f000 b806 	b.w	800abcc <__strtok_r>
 800abc0:	20000120 	.word	0x20000120
 800abc4:	0800d009 	.word	0x0800d009
 800abc8:	0800d020 	.word	0x0800d020

0800abcc <__strtok_r>:
 800abcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abce:	b908      	cbnz	r0, 800abd4 <__strtok_r+0x8>
 800abd0:	6810      	ldr	r0, [r2, #0]
 800abd2:	b188      	cbz	r0, 800abf8 <__strtok_r+0x2c>
 800abd4:	4604      	mov	r4, r0
 800abd6:	4620      	mov	r0, r4
 800abd8:	f814 5b01 	ldrb.w	r5, [r4], #1
 800abdc:	460f      	mov	r7, r1
 800abde:	f817 6b01 	ldrb.w	r6, [r7], #1
 800abe2:	b91e      	cbnz	r6, 800abec <__strtok_r+0x20>
 800abe4:	b965      	cbnz	r5, 800ac00 <__strtok_r+0x34>
 800abe6:	6015      	str	r5, [r2, #0]
 800abe8:	4628      	mov	r0, r5
 800abea:	e005      	b.n	800abf8 <__strtok_r+0x2c>
 800abec:	42b5      	cmp	r5, r6
 800abee:	d1f6      	bne.n	800abde <__strtok_r+0x12>
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d1f0      	bne.n	800abd6 <__strtok_r+0xa>
 800abf4:	6014      	str	r4, [r2, #0]
 800abf6:	7003      	strb	r3, [r0, #0]
 800abf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abfa:	461c      	mov	r4, r3
 800abfc:	e00c      	b.n	800ac18 <__strtok_r+0x4c>
 800abfe:	b915      	cbnz	r5, 800ac06 <__strtok_r+0x3a>
 800ac00:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ac04:	460e      	mov	r6, r1
 800ac06:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ac0a:	42ab      	cmp	r3, r5
 800ac0c:	d1f7      	bne.n	800abfe <__strtok_r+0x32>
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d0f3      	beq.n	800abfa <__strtok_r+0x2e>
 800ac12:	2300      	movs	r3, #0
 800ac14:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ac18:	6014      	str	r4, [r2, #0]
 800ac1a:	e7ed      	b.n	800abf8 <__strtok_r+0x2c>

0800ac1c <_localeconv_r>:
 800ac1c:	4800      	ldr	r0, [pc, #0]	; (800ac20 <_localeconv_r+0x4>)
 800ac1e:	4770      	bx	lr
 800ac20:	20000214 	.word	0x20000214

0800ac24 <_close_r>:
 800ac24:	b538      	push	{r3, r4, r5, lr}
 800ac26:	4d06      	ldr	r5, [pc, #24]	; (800ac40 <_close_r+0x1c>)
 800ac28:	2300      	movs	r3, #0
 800ac2a:	4604      	mov	r4, r0
 800ac2c:	4608      	mov	r0, r1
 800ac2e:	602b      	str	r3, [r5, #0]
 800ac30:	f7f6 fec5 	bl	80019be <_close>
 800ac34:	1c43      	adds	r3, r0, #1
 800ac36:	d102      	bne.n	800ac3e <_close_r+0x1a>
 800ac38:	682b      	ldr	r3, [r5, #0]
 800ac3a:	b103      	cbz	r3, 800ac3e <_close_r+0x1a>
 800ac3c:	6023      	str	r3, [r4, #0]
 800ac3e:	bd38      	pop	{r3, r4, r5, pc}
 800ac40:	200007f4 	.word	0x200007f4

0800ac44 <_lseek_r>:
 800ac44:	b538      	push	{r3, r4, r5, lr}
 800ac46:	4d07      	ldr	r5, [pc, #28]	; (800ac64 <_lseek_r+0x20>)
 800ac48:	4604      	mov	r4, r0
 800ac4a:	4608      	mov	r0, r1
 800ac4c:	4611      	mov	r1, r2
 800ac4e:	2200      	movs	r2, #0
 800ac50:	602a      	str	r2, [r5, #0]
 800ac52:	461a      	mov	r2, r3
 800ac54:	f7f6 feda 	bl	8001a0c <_lseek>
 800ac58:	1c43      	adds	r3, r0, #1
 800ac5a:	d102      	bne.n	800ac62 <_lseek_r+0x1e>
 800ac5c:	682b      	ldr	r3, [r5, #0]
 800ac5e:	b103      	cbz	r3, 800ac62 <_lseek_r+0x1e>
 800ac60:	6023      	str	r3, [r4, #0]
 800ac62:	bd38      	pop	{r3, r4, r5, pc}
 800ac64:	200007f4 	.word	0x200007f4

0800ac68 <_read_r>:
 800ac68:	b538      	push	{r3, r4, r5, lr}
 800ac6a:	4d07      	ldr	r5, [pc, #28]	; (800ac88 <_read_r+0x20>)
 800ac6c:	4604      	mov	r4, r0
 800ac6e:	4608      	mov	r0, r1
 800ac70:	4611      	mov	r1, r2
 800ac72:	2200      	movs	r2, #0
 800ac74:	602a      	str	r2, [r5, #0]
 800ac76:	461a      	mov	r2, r3
 800ac78:	f7f6 fe68 	bl	800194c <_read>
 800ac7c:	1c43      	adds	r3, r0, #1
 800ac7e:	d102      	bne.n	800ac86 <_read_r+0x1e>
 800ac80:	682b      	ldr	r3, [r5, #0]
 800ac82:	b103      	cbz	r3, 800ac86 <_read_r+0x1e>
 800ac84:	6023      	str	r3, [r4, #0]
 800ac86:	bd38      	pop	{r3, r4, r5, pc}
 800ac88:	200007f4 	.word	0x200007f4

0800ac8c <_write_r>:
 800ac8c:	b538      	push	{r3, r4, r5, lr}
 800ac8e:	4d07      	ldr	r5, [pc, #28]	; (800acac <_write_r+0x20>)
 800ac90:	4604      	mov	r4, r0
 800ac92:	4608      	mov	r0, r1
 800ac94:	4611      	mov	r1, r2
 800ac96:	2200      	movs	r2, #0
 800ac98:	602a      	str	r2, [r5, #0]
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	f7f6 fe73 	bl	8001986 <_write>
 800aca0:	1c43      	adds	r3, r0, #1
 800aca2:	d102      	bne.n	800acaa <_write_r+0x1e>
 800aca4:	682b      	ldr	r3, [r5, #0]
 800aca6:	b103      	cbz	r3, 800acaa <_write_r+0x1e>
 800aca8:	6023      	str	r3, [r4, #0]
 800acaa:	bd38      	pop	{r3, r4, r5, pc}
 800acac:	200007f4 	.word	0x200007f4

0800acb0 <__errno>:
 800acb0:	4b01      	ldr	r3, [pc, #4]	; (800acb8 <__errno+0x8>)
 800acb2:	6818      	ldr	r0, [r3, #0]
 800acb4:	4770      	bx	lr
 800acb6:	bf00      	nop
 800acb8:	20000120 	.word	0x20000120

0800acbc <__libc_init_array>:
 800acbc:	b570      	push	{r4, r5, r6, lr}
 800acbe:	4d0d      	ldr	r5, [pc, #52]	; (800acf4 <__libc_init_array+0x38>)
 800acc0:	4c0d      	ldr	r4, [pc, #52]	; (800acf8 <__libc_init_array+0x3c>)
 800acc2:	1b64      	subs	r4, r4, r5
 800acc4:	10a4      	asrs	r4, r4, #2
 800acc6:	2600      	movs	r6, #0
 800acc8:	42a6      	cmp	r6, r4
 800acca:	d109      	bne.n	800ace0 <__libc_init_array+0x24>
 800accc:	4d0b      	ldr	r5, [pc, #44]	; (800acfc <__libc_init_array+0x40>)
 800acce:	4c0c      	ldr	r4, [pc, #48]	; (800ad00 <__libc_init_array+0x44>)
 800acd0:	f002 f894 	bl	800cdfc <_init>
 800acd4:	1b64      	subs	r4, r4, r5
 800acd6:	10a4      	asrs	r4, r4, #2
 800acd8:	2600      	movs	r6, #0
 800acda:	42a6      	cmp	r6, r4
 800acdc:	d105      	bne.n	800acea <__libc_init_array+0x2e>
 800acde:	bd70      	pop	{r4, r5, r6, pc}
 800ace0:	f855 3b04 	ldr.w	r3, [r5], #4
 800ace4:	4798      	blx	r3
 800ace6:	3601      	adds	r6, #1
 800ace8:	e7ee      	b.n	800acc8 <__libc_init_array+0xc>
 800acea:	f855 3b04 	ldr.w	r3, [r5], #4
 800acee:	4798      	blx	r3
 800acf0:	3601      	adds	r6, #1
 800acf2:	e7f2      	b.n	800acda <__libc_init_array+0x1e>
 800acf4:	0800d2a8 	.word	0x0800d2a8
 800acf8:	0800d2a8 	.word	0x0800d2a8
 800acfc:	0800d2a8 	.word	0x0800d2a8
 800ad00:	0800d2ac 	.word	0x0800d2ac

0800ad04 <__retarget_lock_acquire_recursive>:
 800ad04:	4770      	bx	lr

0800ad06 <__retarget_lock_release_recursive>:
 800ad06:	4770      	bx	lr

0800ad08 <__assert_func>:
 800ad08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad0a:	4614      	mov	r4, r2
 800ad0c:	461a      	mov	r2, r3
 800ad0e:	4b09      	ldr	r3, [pc, #36]	; (800ad34 <__assert_func+0x2c>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	4605      	mov	r5, r0
 800ad14:	68d8      	ldr	r0, [r3, #12]
 800ad16:	b14c      	cbz	r4, 800ad2c <__assert_func+0x24>
 800ad18:	4b07      	ldr	r3, [pc, #28]	; (800ad38 <__assert_func+0x30>)
 800ad1a:	9100      	str	r1, [sp, #0]
 800ad1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad20:	4906      	ldr	r1, [pc, #24]	; (800ad3c <__assert_func+0x34>)
 800ad22:	462b      	mov	r3, r5
 800ad24:	f001 fd0c 	bl	800c740 <fiprintf>
 800ad28:	f001 fd54 	bl	800c7d4 <abort>
 800ad2c:	4b04      	ldr	r3, [pc, #16]	; (800ad40 <__assert_func+0x38>)
 800ad2e:	461c      	mov	r4, r3
 800ad30:	e7f3      	b.n	800ad1a <__assert_func+0x12>
 800ad32:	bf00      	nop
 800ad34:	20000120 	.word	0x20000120
 800ad38:	0800d07a 	.word	0x0800d07a
 800ad3c:	0800d087 	.word	0x0800d087
 800ad40:	0800d0b5 	.word	0x0800d0b5

0800ad44 <quorem>:
 800ad44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad48:	6903      	ldr	r3, [r0, #16]
 800ad4a:	690c      	ldr	r4, [r1, #16]
 800ad4c:	42a3      	cmp	r3, r4
 800ad4e:	4607      	mov	r7, r0
 800ad50:	db7e      	blt.n	800ae50 <quorem+0x10c>
 800ad52:	3c01      	subs	r4, #1
 800ad54:	f101 0814 	add.w	r8, r1, #20
 800ad58:	f100 0514 	add.w	r5, r0, #20
 800ad5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad60:	9301      	str	r3, [sp, #4]
 800ad62:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ad66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	429a      	cmp	r2, r3
 800ad6e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ad72:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ad76:	fbb2 f6f3 	udiv	r6, r2, r3
 800ad7a:	d331      	bcc.n	800ade0 <quorem+0x9c>
 800ad7c:	f04f 0e00 	mov.w	lr, #0
 800ad80:	4640      	mov	r0, r8
 800ad82:	46ac      	mov	ip, r5
 800ad84:	46f2      	mov	sl, lr
 800ad86:	f850 2b04 	ldr.w	r2, [r0], #4
 800ad8a:	b293      	uxth	r3, r2
 800ad8c:	fb06 e303 	mla	r3, r6, r3, lr
 800ad90:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ad94:	0c1a      	lsrs	r2, r3, #16
 800ad96:	b29b      	uxth	r3, r3
 800ad98:	ebaa 0303 	sub.w	r3, sl, r3
 800ad9c:	f8dc a000 	ldr.w	sl, [ip]
 800ada0:	fa13 f38a 	uxtah	r3, r3, sl
 800ada4:	fb06 220e 	mla	r2, r6, lr, r2
 800ada8:	9300      	str	r3, [sp, #0]
 800adaa:	9b00      	ldr	r3, [sp, #0]
 800adac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800adb0:	b292      	uxth	r2, r2
 800adb2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800adb6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800adba:	f8bd 3000 	ldrh.w	r3, [sp]
 800adbe:	4581      	cmp	r9, r0
 800adc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800adc4:	f84c 3b04 	str.w	r3, [ip], #4
 800adc8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800adcc:	d2db      	bcs.n	800ad86 <quorem+0x42>
 800adce:	f855 300b 	ldr.w	r3, [r5, fp]
 800add2:	b92b      	cbnz	r3, 800ade0 <quorem+0x9c>
 800add4:	9b01      	ldr	r3, [sp, #4]
 800add6:	3b04      	subs	r3, #4
 800add8:	429d      	cmp	r5, r3
 800adda:	461a      	mov	r2, r3
 800addc:	d32c      	bcc.n	800ae38 <quorem+0xf4>
 800adde:	613c      	str	r4, [r7, #16]
 800ade0:	4638      	mov	r0, r7
 800ade2:	f001 f9a7 	bl	800c134 <__mcmp>
 800ade6:	2800      	cmp	r0, #0
 800ade8:	db22      	blt.n	800ae30 <quorem+0xec>
 800adea:	3601      	adds	r6, #1
 800adec:	4629      	mov	r1, r5
 800adee:	2000      	movs	r0, #0
 800adf0:	f858 2b04 	ldr.w	r2, [r8], #4
 800adf4:	f8d1 c000 	ldr.w	ip, [r1]
 800adf8:	b293      	uxth	r3, r2
 800adfa:	1ac3      	subs	r3, r0, r3
 800adfc:	0c12      	lsrs	r2, r2, #16
 800adfe:	fa13 f38c 	uxtah	r3, r3, ip
 800ae02:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ae06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae10:	45c1      	cmp	r9, r8
 800ae12:	f841 3b04 	str.w	r3, [r1], #4
 800ae16:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ae1a:	d2e9      	bcs.n	800adf0 <quorem+0xac>
 800ae1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae24:	b922      	cbnz	r2, 800ae30 <quorem+0xec>
 800ae26:	3b04      	subs	r3, #4
 800ae28:	429d      	cmp	r5, r3
 800ae2a:	461a      	mov	r2, r3
 800ae2c:	d30a      	bcc.n	800ae44 <quorem+0x100>
 800ae2e:	613c      	str	r4, [r7, #16]
 800ae30:	4630      	mov	r0, r6
 800ae32:	b003      	add	sp, #12
 800ae34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae38:	6812      	ldr	r2, [r2, #0]
 800ae3a:	3b04      	subs	r3, #4
 800ae3c:	2a00      	cmp	r2, #0
 800ae3e:	d1ce      	bne.n	800adde <quorem+0x9a>
 800ae40:	3c01      	subs	r4, #1
 800ae42:	e7c9      	b.n	800add8 <quorem+0x94>
 800ae44:	6812      	ldr	r2, [r2, #0]
 800ae46:	3b04      	subs	r3, #4
 800ae48:	2a00      	cmp	r2, #0
 800ae4a:	d1f0      	bne.n	800ae2e <quorem+0xea>
 800ae4c:	3c01      	subs	r4, #1
 800ae4e:	e7eb      	b.n	800ae28 <quorem+0xe4>
 800ae50:	2000      	movs	r0, #0
 800ae52:	e7ee      	b.n	800ae32 <quorem+0xee>
 800ae54:	0000      	movs	r0, r0
	...

0800ae58 <_dtoa_r>:
 800ae58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae5c:	ed2d 8b04 	vpush	{d8-d9}
 800ae60:	69c5      	ldr	r5, [r0, #28]
 800ae62:	b093      	sub	sp, #76	; 0x4c
 800ae64:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ae68:	ec57 6b10 	vmov	r6, r7, d0
 800ae6c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ae70:	9107      	str	r1, [sp, #28]
 800ae72:	4604      	mov	r4, r0
 800ae74:	920a      	str	r2, [sp, #40]	; 0x28
 800ae76:	930d      	str	r3, [sp, #52]	; 0x34
 800ae78:	b975      	cbnz	r5, 800ae98 <_dtoa_r+0x40>
 800ae7a:	2010      	movs	r0, #16
 800ae7c:	f000 fe2a 	bl	800bad4 <malloc>
 800ae80:	4602      	mov	r2, r0
 800ae82:	61e0      	str	r0, [r4, #28]
 800ae84:	b920      	cbnz	r0, 800ae90 <_dtoa_r+0x38>
 800ae86:	4bae      	ldr	r3, [pc, #696]	; (800b140 <_dtoa_r+0x2e8>)
 800ae88:	21ef      	movs	r1, #239	; 0xef
 800ae8a:	48ae      	ldr	r0, [pc, #696]	; (800b144 <_dtoa_r+0x2ec>)
 800ae8c:	f7ff ff3c 	bl	800ad08 <__assert_func>
 800ae90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ae94:	6005      	str	r5, [r0, #0]
 800ae96:	60c5      	str	r5, [r0, #12]
 800ae98:	69e3      	ldr	r3, [r4, #28]
 800ae9a:	6819      	ldr	r1, [r3, #0]
 800ae9c:	b151      	cbz	r1, 800aeb4 <_dtoa_r+0x5c>
 800ae9e:	685a      	ldr	r2, [r3, #4]
 800aea0:	604a      	str	r2, [r1, #4]
 800aea2:	2301      	movs	r3, #1
 800aea4:	4093      	lsls	r3, r2
 800aea6:	608b      	str	r3, [r1, #8]
 800aea8:	4620      	mov	r0, r4
 800aeaa:	f000 ff07 	bl	800bcbc <_Bfree>
 800aeae:	69e3      	ldr	r3, [r4, #28]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	601a      	str	r2, [r3, #0]
 800aeb4:	1e3b      	subs	r3, r7, #0
 800aeb6:	bfbb      	ittet	lt
 800aeb8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aebc:	9303      	strlt	r3, [sp, #12]
 800aebe:	2300      	movge	r3, #0
 800aec0:	2201      	movlt	r2, #1
 800aec2:	bfac      	ite	ge
 800aec4:	f8c8 3000 	strge.w	r3, [r8]
 800aec8:	f8c8 2000 	strlt.w	r2, [r8]
 800aecc:	4b9e      	ldr	r3, [pc, #632]	; (800b148 <_dtoa_r+0x2f0>)
 800aece:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800aed2:	ea33 0308 	bics.w	r3, r3, r8
 800aed6:	d11b      	bne.n	800af10 <_dtoa_r+0xb8>
 800aed8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aeda:	f242 730f 	movw	r3, #9999	; 0x270f
 800aede:	6013      	str	r3, [r2, #0]
 800aee0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800aee4:	4333      	orrs	r3, r6
 800aee6:	f000 8593 	beq.w	800ba10 <_dtoa_r+0xbb8>
 800aeea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aeec:	b963      	cbnz	r3, 800af08 <_dtoa_r+0xb0>
 800aeee:	4b97      	ldr	r3, [pc, #604]	; (800b14c <_dtoa_r+0x2f4>)
 800aef0:	e027      	b.n	800af42 <_dtoa_r+0xea>
 800aef2:	4b97      	ldr	r3, [pc, #604]	; (800b150 <_dtoa_r+0x2f8>)
 800aef4:	9300      	str	r3, [sp, #0]
 800aef6:	3308      	adds	r3, #8
 800aef8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aefa:	6013      	str	r3, [r2, #0]
 800aefc:	9800      	ldr	r0, [sp, #0]
 800aefe:	b013      	add	sp, #76	; 0x4c
 800af00:	ecbd 8b04 	vpop	{d8-d9}
 800af04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af08:	4b90      	ldr	r3, [pc, #576]	; (800b14c <_dtoa_r+0x2f4>)
 800af0a:	9300      	str	r3, [sp, #0]
 800af0c:	3303      	adds	r3, #3
 800af0e:	e7f3      	b.n	800aef8 <_dtoa_r+0xa0>
 800af10:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af14:	2200      	movs	r2, #0
 800af16:	ec51 0b17 	vmov	r0, r1, d7
 800af1a:	eeb0 8a47 	vmov.f32	s16, s14
 800af1e:	eef0 8a67 	vmov.f32	s17, s15
 800af22:	2300      	movs	r3, #0
 800af24:	f7f5 fe08 	bl	8000b38 <__aeabi_dcmpeq>
 800af28:	4681      	mov	r9, r0
 800af2a:	b160      	cbz	r0, 800af46 <_dtoa_r+0xee>
 800af2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af2e:	2301      	movs	r3, #1
 800af30:	6013      	str	r3, [r2, #0]
 800af32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af34:	2b00      	cmp	r3, #0
 800af36:	f000 8568 	beq.w	800ba0a <_dtoa_r+0xbb2>
 800af3a:	4b86      	ldr	r3, [pc, #536]	; (800b154 <_dtoa_r+0x2fc>)
 800af3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800af3e:	6013      	str	r3, [r2, #0]
 800af40:	3b01      	subs	r3, #1
 800af42:	9300      	str	r3, [sp, #0]
 800af44:	e7da      	b.n	800aefc <_dtoa_r+0xa4>
 800af46:	aa10      	add	r2, sp, #64	; 0x40
 800af48:	a911      	add	r1, sp, #68	; 0x44
 800af4a:	4620      	mov	r0, r4
 800af4c:	eeb0 0a48 	vmov.f32	s0, s16
 800af50:	eef0 0a68 	vmov.f32	s1, s17
 800af54:	f001 f994 	bl	800c280 <__d2b>
 800af58:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800af5c:	4682      	mov	sl, r0
 800af5e:	2d00      	cmp	r5, #0
 800af60:	d07f      	beq.n	800b062 <_dtoa_r+0x20a>
 800af62:	ee18 3a90 	vmov	r3, s17
 800af66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af6a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800af6e:	ec51 0b18 	vmov	r0, r1, d8
 800af72:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800af76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800af7a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800af7e:	4619      	mov	r1, r3
 800af80:	2200      	movs	r2, #0
 800af82:	4b75      	ldr	r3, [pc, #468]	; (800b158 <_dtoa_r+0x300>)
 800af84:	f7f5 f9b8 	bl	80002f8 <__aeabi_dsub>
 800af88:	a367      	add	r3, pc, #412	; (adr r3, 800b128 <_dtoa_r+0x2d0>)
 800af8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8e:	f7f5 fb6b 	bl	8000668 <__aeabi_dmul>
 800af92:	a367      	add	r3, pc, #412	; (adr r3, 800b130 <_dtoa_r+0x2d8>)
 800af94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af98:	f7f5 f9b0 	bl	80002fc <__adddf3>
 800af9c:	4606      	mov	r6, r0
 800af9e:	4628      	mov	r0, r5
 800afa0:	460f      	mov	r7, r1
 800afa2:	f7f5 faf7 	bl	8000594 <__aeabi_i2d>
 800afa6:	a364      	add	r3, pc, #400	; (adr r3, 800b138 <_dtoa_r+0x2e0>)
 800afa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afac:	f7f5 fb5c 	bl	8000668 <__aeabi_dmul>
 800afb0:	4602      	mov	r2, r0
 800afb2:	460b      	mov	r3, r1
 800afb4:	4630      	mov	r0, r6
 800afb6:	4639      	mov	r1, r7
 800afb8:	f7f5 f9a0 	bl	80002fc <__adddf3>
 800afbc:	4606      	mov	r6, r0
 800afbe:	460f      	mov	r7, r1
 800afc0:	f7f5 fe02 	bl	8000bc8 <__aeabi_d2iz>
 800afc4:	2200      	movs	r2, #0
 800afc6:	4683      	mov	fp, r0
 800afc8:	2300      	movs	r3, #0
 800afca:	4630      	mov	r0, r6
 800afcc:	4639      	mov	r1, r7
 800afce:	f7f5 fdbd 	bl	8000b4c <__aeabi_dcmplt>
 800afd2:	b148      	cbz	r0, 800afe8 <_dtoa_r+0x190>
 800afd4:	4658      	mov	r0, fp
 800afd6:	f7f5 fadd 	bl	8000594 <__aeabi_i2d>
 800afda:	4632      	mov	r2, r6
 800afdc:	463b      	mov	r3, r7
 800afde:	f7f5 fdab 	bl	8000b38 <__aeabi_dcmpeq>
 800afe2:	b908      	cbnz	r0, 800afe8 <_dtoa_r+0x190>
 800afe4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800afe8:	f1bb 0f16 	cmp.w	fp, #22
 800afec:	d857      	bhi.n	800b09e <_dtoa_r+0x246>
 800afee:	4b5b      	ldr	r3, [pc, #364]	; (800b15c <_dtoa_r+0x304>)
 800aff0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800aff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff8:	ec51 0b18 	vmov	r0, r1, d8
 800affc:	f7f5 fda6 	bl	8000b4c <__aeabi_dcmplt>
 800b000:	2800      	cmp	r0, #0
 800b002:	d04e      	beq.n	800b0a2 <_dtoa_r+0x24a>
 800b004:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b008:	2300      	movs	r3, #0
 800b00a:	930c      	str	r3, [sp, #48]	; 0x30
 800b00c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b00e:	1b5b      	subs	r3, r3, r5
 800b010:	1e5a      	subs	r2, r3, #1
 800b012:	bf45      	ittet	mi
 800b014:	f1c3 0301 	rsbmi	r3, r3, #1
 800b018:	9305      	strmi	r3, [sp, #20]
 800b01a:	2300      	movpl	r3, #0
 800b01c:	2300      	movmi	r3, #0
 800b01e:	9206      	str	r2, [sp, #24]
 800b020:	bf54      	ite	pl
 800b022:	9305      	strpl	r3, [sp, #20]
 800b024:	9306      	strmi	r3, [sp, #24]
 800b026:	f1bb 0f00 	cmp.w	fp, #0
 800b02a:	db3c      	blt.n	800b0a6 <_dtoa_r+0x24e>
 800b02c:	9b06      	ldr	r3, [sp, #24]
 800b02e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b032:	445b      	add	r3, fp
 800b034:	9306      	str	r3, [sp, #24]
 800b036:	2300      	movs	r3, #0
 800b038:	9308      	str	r3, [sp, #32]
 800b03a:	9b07      	ldr	r3, [sp, #28]
 800b03c:	2b09      	cmp	r3, #9
 800b03e:	d868      	bhi.n	800b112 <_dtoa_r+0x2ba>
 800b040:	2b05      	cmp	r3, #5
 800b042:	bfc4      	itt	gt
 800b044:	3b04      	subgt	r3, #4
 800b046:	9307      	strgt	r3, [sp, #28]
 800b048:	9b07      	ldr	r3, [sp, #28]
 800b04a:	f1a3 0302 	sub.w	r3, r3, #2
 800b04e:	bfcc      	ite	gt
 800b050:	2500      	movgt	r5, #0
 800b052:	2501      	movle	r5, #1
 800b054:	2b03      	cmp	r3, #3
 800b056:	f200 8085 	bhi.w	800b164 <_dtoa_r+0x30c>
 800b05a:	e8df f003 	tbb	[pc, r3]
 800b05e:	3b2e      	.short	0x3b2e
 800b060:	5839      	.short	0x5839
 800b062:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b066:	441d      	add	r5, r3
 800b068:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b06c:	2b20      	cmp	r3, #32
 800b06e:	bfc1      	itttt	gt
 800b070:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b074:	fa08 f803 	lslgt.w	r8, r8, r3
 800b078:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b07c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b080:	bfd6      	itet	le
 800b082:	f1c3 0320 	rsble	r3, r3, #32
 800b086:	ea48 0003 	orrgt.w	r0, r8, r3
 800b08a:	fa06 f003 	lslle.w	r0, r6, r3
 800b08e:	f7f5 fa71 	bl	8000574 <__aeabi_ui2d>
 800b092:	2201      	movs	r2, #1
 800b094:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b098:	3d01      	subs	r5, #1
 800b09a:	920e      	str	r2, [sp, #56]	; 0x38
 800b09c:	e76f      	b.n	800af7e <_dtoa_r+0x126>
 800b09e:	2301      	movs	r3, #1
 800b0a0:	e7b3      	b.n	800b00a <_dtoa_r+0x1b2>
 800b0a2:	900c      	str	r0, [sp, #48]	; 0x30
 800b0a4:	e7b2      	b.n	800b00c <_dtoa_r+0x1b4>
 800b0a6:	9b05      	ldr	r3, [sp, #20]
 800b0a8:	eba3 030b 	sub.w	r3, r3, fp
 800b0ac:	9305      	str	r3, [sp, #20]
 800b0ae:	f1cb 0300 	rsb	r3, fp, #0
 800b0b2:	9308      	str	r3, [sp, #32]
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b0b8:	e7bf      	b.n	800b03a <_dtoa_r+0x1e2>
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	9309      	str	r3, [sp, #36]	; 0x24
 800b0be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	dc52      	bgt.n	800b16a <_dtoa_r+0x312>
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	9301      	str	r3, [sp, #4]
 800b0c8:	9304      	str	r3, [sp, #16]
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	920a      	str	r2, [sp, #40]	; 0x28
 800b0ce:	e00b      	b.n	800b0e8 <_dtoa_r+0x290>
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	e7f3      	b.n	800b0bc <_dtoa_r+0x264>
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	9309      	str	r3, [sp, #36]	; 0x24
 800b0d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0da:	445b      	add	r3, fp
 800b0dc:	9301      	str	r3, [sp, #4]
 800b0de:	3301      	adds	r3, #1
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	9304      	str	r3, [sp, #16]
 800b0e4:	bfb8      	it	lt
 800b0e6:	2301      	movlt	r3, #1
 800b0e8:	69e0      	ldr	r0, [r4, #28]
 800b0ea:	2100      	movs	r1, #0
 800b0ec:	2204      	movs	r2, #4
 800b0ee:	f102 0614 	add.w	r6, r2, #20
 800b0f2:	429e      	cmp	r6, r3
 800b0f4:	d93d      	bls.n	800b172 <_dtoa_r+0x31a>
 800b0f6:	6041      	str	r1, [r0, #4]
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	f000 fd9f 	bl	800bc3c <_Balloc>
 800b0fe:	9000      	str	r0, [sp, #0]
 800b100:	2800      	cmp	r0, #0
 800b102:	d139      	bne.n	800b178 <_dtoa_r+0x320>
 800b104:	4b16      	ldr	r3, [pc, #88]	; (800b160 <_dtoa_r+0x308>)
 800b106:	4602      	mov	r2, r0
 800b108:	f240 11af 	movw	r1, #431	; 0x1af
 800b10c:	e6bd      	b.n	800ae8a <_dtoa_r+0x32>
 800b10e:	2301      	movs	r3, #1
 800b110:	e7e1      	b.n	800b0d6 <_dtoa_r+0x27e>
 800b112:	2501      	movs	r5, #1
 800b114:	2300      	movs	r3, #0
 800b116:	9307      	str	r3, [sp, #28]
 800b118:	9509      	str	r5, [sp, #36]	; 0x24
 800b11a:	f04f 33ff 	mov.w	r3, #4294967295
 800b11e:	9301      	str	r3, [sp, #4]
 800b120:	9304      	str	r3, [sp, #16]
 800b122:	2200      	movs	r2, #0
 800b124:	2312      	movs	r3, #18
 800b126:	e7d1      	b.n	800b0cc <_dtoa_r+0x274>
 800b128:	636f4361 	.word	0x636f4361
 800b12c:	3fd287a7 	.word	0x3fd287a7
 800b130:	8b60c8b3 	.word	0x8b60c8b3
 800b134:	3fc68a28 	.word	0x3fc68a28
 800b138:	509f79fb 	.word	0x509f79fb
 800b13c:	3fd34413 	.word	0x3fd34413
 800b140:	0800d009 	.word	0x0800d009
 800b144:	0800d0c3 	.word	0x0800d0c3
 800b148:	7ff00000 	.word	0x7ff00000
 800b14c:	0800d0bf 	.word	0x0800d0bf
 800b150:	0800d0b6 	.word	0x0800d0b6
 800b154:	0800cfe6 	.word	0x0800cfe6
 800b158:	3ff80000 	.word	0x3ff80000
 800b15c:	0800d1b0 	.word	0x0800d1b0
 800b160:	0800d11b 	.word	0x0800d11b
 800b164:	2301      	movs	r3, #1
 800b166:	9309      	str	r3, [sp, #36]	; 0x24
 800b168:	e7d7      	b.n	800b11a <_dtoa_r+0x2c2>
 800b16a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b16c:	9301      	str	r3, [sp, #4]
 800b16e:	9304      	str	r3, [sp, #16]
 800b170:	e7ba      	b.n	800b0e8 <_dtoa_r+0x290>
 800b172:	3101      	adds	r1, #1
 800b174:	0052      	lsls	r2, r2, #1
 800b176:	e7ba      	b.n	800b0ee <_dtoa_r+0x296>
 800b178:	69e3      	ldr	r3, [r4, #28]
 800b17a:	9a00      	ldr	r2, [sp, #0]
 800b17c:	601a      	str	r2, [r3, #0]
 800b17e:	9b04      	ldr	r3, [sp, #16]
 800b180:	2b0e      	cmp	r3, #14
 800b182:	f200 80a8 	bhi.w	800b2d6 <_dtoa_r+0x47e>
 800b186:	2d00      	cmp	r5, #0
 800b188:	f000 80a5 	beq.w	800b2d6 <_dtoa_r+0x47e>
 800b18c:	f1bb 0f00 	cmp.w	fp, #0
 800b190:	dd38      	ble.n	800b204 <_dtoa_r+0x3ac>
 800b192:	4bc0      	ldr	r3, [pc, #768]	; (800b494 <_dtoa_r+0x63c>)
 800b194:	f00b 020f 	and.w	r2, fp, #15
 800b198:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b19c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b1a0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b1a4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b1a8:	d019      	beq.n	800b1de <_dtoa_r+0x386>
 800b1aa:	4bbb      	ldr	r3, [pc, #748]	; (800b498 <_dtoa_r+0x640>)
 800b1ac:	ec51 0b18 	vmov	r0, r1, d8
 800b1b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b1b4:	f7f5 fb82 	bl	80008bc <__aeabi_ddiv>
 800b1b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1bc:	f008 080f 	and.w	r8, r8, #15
 800b1c0:	2503      	movs	r5, #3
 800b1c2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b498 <_dtoa_r+0x640>
 800b1c6:	f1b8 0f00 	cmp.w	r8, #0
 800b1ca:	d10a      	bne.n	800b1e2 <_dtoa_r+0x38a>
 800b1cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1d0:	4632      	mov	r2, r6
 800b1d2:	463b      	mov	r3, r7
 800b1d4:	f7f5 fb72 	bl	80008bc <__aeabi_ddiv>
 800b1d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1dc:	e02b      	b.n	800b236 <_dtoa_r+0x3de>
 800b1de:	2502      	movs	r5, #2
 800b1e0:	e7ef      	b.n	800b1c2 <_dtoa_r+0x36a>
 800b1e2:	f018 0f01 	tst.w	r8, #1
 800b1e6:	d008      	beq.n	800b1fa <_dtoa_r+0x3a2>
 800b1e8:	4630      	mov	r0, r6
 800b1ea:	4639      	mov	r1, r7
 800b1ec:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b1f0:	f7f5 fa3a 	bl	8000668 <__aeabi_dmul>
 800b1f4:	3501      	adds	r5, #1
 800b1f6:	4606      	mov	r6, r0
 800b1f8:	460f      	mov	r7, r1
 800b1fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b1fe:	f109 0908 	add.w	r9, r9, #8
 800b202:	e7e0      	b.n	800b1c6 <_dtoa_r+0x36e>
 800b204:	f000 809f 	beq.w	800b346 <_dtoa_r+0x4ee>
 800b208:	f1cb 0600 	rsb	r6, fp, #0
 800b20c:	4ba1      	ldr	r3, [pc, #644]	; (800b494 <_dtoa_r+0x63c>)
 800b20e:	4fa2      	ldr	r7, [pc, #648]	; (800b498 <_dtoa_r+0x640>)
 800b210:	f006 020f 	and.w	r2, r6, #15
 800b214:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b21c:	ec51 0b18 	vmov	r0, r1, d8
 800b220:	f7f5 fa22 	bl	8000668 <__aeabi_dmul>
 800b224:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b228:	1136      	asrs	r6, r6, #4
 800b22a:	2300      	movs	r3, #0
 800b22c:	2502      	movs	r5, #2
 800b22e:	2e00      	cmp	r6, #0
 800b230:	d17e      	bne.n	800b330 <_dtoa_r+0x4d8>
 800b232:	2b00      	cmp	r3, #0
 800b234:	d1d0      	bne.n	800b1d8 <_dtoa_r+0x380>
 800b236:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b238:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	f000 8084 	beq.w	800b34a <_dtoa_r+0x4f2>
 800b242:	4b96      	ldr	r3, [pc, #600]	; (800b49c <_dtoa_r+0x644>)
 800b244:	2200      	movs	r2, #0
 800b246:	4640      	mov	r0, r8
 800b248:	4649      	mov	r1, r9
 800b24a:	f7f5 fc7f 	bl	8000b4c <__aeabi_dcmplt>
 800b24e:	2800      	cmp	r0, #0
 800b250:	d07b      	beq.n	800b34a <_dtoa_r+0x4f2>
 800b252:	9b04      	ldr	r3, [sp, #16]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d078      	beq.n	800b34a <_dtoa_r+0x4f2>
 800b258:	9b01      	ldr	r3, [sp, #4]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	dd39      	ble.n	800b2d2 <_dtoa_r+0x47a>
 800b25e:	4b90      	ldr	r3, [pc, #576]	; (800b4a0 <_dtoa_r+0x648>)
 800b260:	2200      	movs	r2, #0
 800b262:	4640      	mov	r0, r8
 800b264:	4649      	mov	r1, r9
 800b266:	f7f5 f9ff 	bl	8000668 <__aeabi_dmul>
 800b26a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b26e:	9e01      	ldr	r6, [sp, #4]
 800b270:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b274:	3501      	adds	r5, #1
 800b276:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b27a:	4628      	mov	r0, r5
 800b27c:	f7f5 f98a 	bl	8000594 <__aeabi_i2d>
 800b280:	4642      	mov	r2, r8
 800b282:	464b      	mov	r3, r9
 800b284:	f7f5 f9f0 	bl	8000668 <__aeabi_dmul>
 800b288:	4b86      	ldr	r3, [pc, #536]	; (800b4a4 <_dtoa_r+0x64c>)
 800b28a:	2200      	movs	r2, #0
 800b28c:	f7f5 f836 	bl	80002fc <__adddf3>
 800b290:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b294:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b298:	9303      	str	r3, [sp, #12]
 800b29a:	2e00      	cmp	r6, #0
 800b29c:	d158      	bne.n	800b350 <_dtoa_r+0x4f8>
 800b29e:	4b82      	ldr	r3, [pc, #520]	; (800b4a8 <_dtoa_r+0x650>)
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	4640      	mov	r0, r8
 800b2a4:	4649      	mov	r1, r9
 800b2a6:	f7f5 f827 	bl	80002f8 <__aeabi_dsub>
 800b2aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b2ae:	4680      	mov	r8, r0
 800b2b0:	4689      	mov	r9, r1
 800b2b2:	f7f5 fc69 	bl	8000b88 <__aeabi_dcmpgt>
 800b2b6:	2800      	cmp	r0, #0
 800b2b8:	f040 8296 	bne.w	800b7e8 <_dtoa_r+0x990>
 800b2bc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b2c0:	4640      	mov	r0, r8
 800b2c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b2c6:	4649      	mov	r1, r9
 800b2c8:	f7f5 fc40 	bl	8000b4c <__aeabi_dcmplt>
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	f040 8289 	bne.w	800b7e4 <_dtoa_r+0x98c>
 800b2d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b2d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	f2c0 814e 	blt.w	800b57a <_dtoa_r+0x722>
 800b2de:	f1bb 0f0e 	cmp.w	fp, #14
 800b2e2:	f300 814a 	bgt.w	800b57a <_dtoa_r+0x722>
 800b2e6:	4b6b      	ldr	r3, [pc, #428]	; (800b494 <_dtoa_r+0x63c>)
 800b2e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b2ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b2f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	f280 80dc 	bge.w	800b4b0 <_dtoa_r+0x658>
 800b2f8:	9b04      	ldr	r3, [sp, #16]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	f300 80d8 	bgt.w	800b4b0 <_dtoa_r+0x658>
 800b300:	f040 826f 	bne.w	800b7e2 <_dtoa_r+0x98a>
 800b304:	4b68      	ldr	r3, [pc, #416]	; (800b4a8 <_dtoa_r+0x650>)
 800b306:	2200      	movs	r2, #0
 800b308:	4640      	mov	r0, r8
 800b30a:	4649      	mov	r1, r9
 800b30c:	f7f5 f9ac 	bl	8000668 <__aeabi_dmul>
 800b310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b314:	f7f5 fc2e 	bl	8000b74 <__aeabi_dcmpge>
 800b318:	9e04      	ldr	r6, [sp, #16]
 800b31a:	4637      	mov	r7, r6
 800b31c:	2800      	cmp	r0, #0
 800b31e:	f040 8245 	bne.w	800b7ac <_dtoa_r+0x954>
 800b322:	9d00      	ldr	r5, [sp, #0]
 800b324:	2331      	movs	r3, #49	; 0x31
 800b326:	f805 3b01 	strb.w	r3, [r5], #1
 800b32a:	f10b 0b01 	add.w	fp, fp, #1
 800b32e:	e241      	b.n	800b7b4 <_dtoa_r+0x95c>
 800b330:	07f2      	lsls	r2, r6, #31
 800b332:	d505      	bpl.n	800b340 <_dtoa_r+0x4e8>
 800b334:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b338:	f7f5 f996 	bl	8000668 <__aeabi_dmul>
 800b33c:	3501      	adds	r5, #1
 800b33e:	2301      	movs	r3, #1
 800b340:	1076      	asrs	r6, r6, #1
 800b342:	3708      	adds	r7, #8
 800b344:	e773      	b.n	800b22e <_dtoa_r+0x3d6>
 800b346:	2502      	movs	r5, #2
 800b348:	e775      	b.n	800b236 <_dtoa_r+0x3de>
 800b34a:	9e04      	ldr	r6, [sp, #16]
 800b34c:	465f      	mov	r7, fp
 800b34e:	e792      	b.n	800b276 <_dtoa_r+0x41e>
 800b350:	9900      	ldr	r1, [sp, #0]
 800b352:	4b50      	ldr	r3, [pc, #320]	; (800b494 <_dtoa_r+0x63c>)
 800b354:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b358:	4431      	add	r1, r6
 800b35a:	9102      	str	r1, [sp, #8]
 800b35c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b35e:	eeb0 9a47 	vmov.f32	s18, s14
 800b362:	eef0 9a67 	vmov.f32	s19, s15
 800b366:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b36a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b36e:	2900      	cmp	r1, #0
 800b370:	d044      	beq.n	800b3fc <_dtoa_r+0x5a4>
 800b372:	494e      	ldr	r1, [pc, #312]	; (800b4ac <_dtoa_r+0x654>)
 800b374:	2000      	movs	r0, #0
 800b376:	f7f5 faa1 	bl	80008bc <__aeabi_ddiv>
 800b37a:	ec53 2b19 	vmov	r2, r3, d9
 800b37e:	f7f4 ffbb 	bl	80002f8 <__aeabi_dsub>
 800b382:	9d00      	ldr	r5, [sp, #0]
 800b384:	ec41 0b19 	vmov	d9, r0, r1
 800b388:	4649      	mov	r1, r9
 800b38a:	4640      	mov	r0, r8
 800b38c:	f7f5 fc1c 	bl	8000bc8 <__aeabi_d2iz>
 800b390:	4606      	mov	r6, r0
 800b392:	f7f5 f8ff 	bl	8000594 <__aeabi_i2d>
 800b396:	4602      	mov	r2, r0
 800b398:	460b      	mov	r3, r1
 800b39a:	4640      	mov	r0, r8
 800b39c:	4649      	mov	r1, r9
 800b39e:	f7f4 ffab 	bl	80002f8 <__aeabi_dsub>
 800b3a2:	3630      	adds	r6, #48	; 0x30
 800b3a4:	f805 6b01 	strb.w	r6, [r5], #1
 800b3a8:	ec53 2b19 	vmov	r2, r3, d9
 800b3ac:	4680      	mov	r8, r0
 800b3ae:	4689      	mov	r9, r1
 800b3b0:	f7f5 fbcc 	bl	8000b4c <__aeabi_dcmplt>
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	d164      	bne.n	800b482 <_dtoa_r+0x62a>
 800b3b8:	4642      	mov	r2, r8
 800b3ba:	464b      	mov	r3, r9
 800b3bc:	4937      	ldr	r1, [pc, #220]	; (800b49c <_dtoa_r+0x644>)
 800b3be:	2000      	movs	r0, #0
 800b3c0:	f7f4 ff9a 	bl	80002f8 <__aeabi_dsub>
 800b3c4:	ec53 2b19 	vmov	r2, r3, d9
 800b3c8:	f7f5 fbc0 	bl	8000b4c <__aeabi_dcmplt>
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	f040 80b6 	bne.w	800b53e <_dtoa_r+0x6e6>
 800b3d2:	9b02      	ldr	r3, [sp, #8]
 800b3d4:	429d      	cmp	r5, r3
 800b3d6:	f43f af7c 	beq.w	800b2d2 <_dtoa_r+0x47a>
 800b3da:	4b31      	ldr	r3, [pc, #196]	; (800b4a0 <_dtoa_r+0x648>)
 800b3dc:	ec51 0b19 	vmov	r0, r1, d9
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	f7f5 f941 	bl	8000668 <__aeabi_dmul>
 800b3e6:	4b2e      	ldr	r3, [pc, #184]	; (800b4a0 <_dtoa_r+0x648>)
 800b3e8:	ec41 0b19 	vmov	d9, r0, r1
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	4640      	mov	r0, r8
 800b3f0:	4649      	mov	r1, r9
 800b3f2:	f7f5 f939 	bl	8000668 <__aeabi_dmul>
 800b3f6:	4680      	mov	r8, r0
 800b3f8:	4689      	mov	r9, r1
 800b3fa:	e7c5      	b.n	800b388 <_dtoa_r+0x530>
 800b3fc:	ec51 0b17 	vmov	r0, r1, d7
 800b400:	f7f5 f932 	bl	8000668 <__aeabi_dmul>
 800b404:	9b02      	ldr	r3, [sp, #8]
 800b406:	9d00      	ldr	r5, [sp, #0]
 800b408:	930f      	str	r3, [sp, #60]	; 0x3c
 800b40a:	ec41 0b19 	vmov	d9, r0, r1
 800b40e:	4649      	mov	r1, r9
 800b410:	4640      	mov	r0, r8
 800b412:	f7f5 fbd9 	bl	8000bc8 <__aeabi_d2iz>
 800b416:	4606      	mov	r6, r0
 800b418:	f7f5 f8bc 	bl	8000594 <__aeabi_i2d>
 800b41c:	3630      	adds	r6, #48	; 0x30
 800b41e:	4602      	mov	r2, r0
 800b420:	460b      	mov	r3, r1
 800b422:	4640      	mov	r0, r8
 800b424:	4649      	mov	r1, r9
 800b426:	f7f4 ff67 	bl	80002f8 <__aeabi_dsub>
 800b42a:	f805 6b01 	strb.w	r6, [r5], #1
 800b42e:	9b02      	ldr	r3, [sp, #8]
 800b430:	429d      	cmp	r5, r3
 800b432:	4680      	mov	r8, r0
 800b434:	4689      	mov	r9, r1
 800b436:	f04f 0200 	mov.w	r2, #0
 800b43a:	d124      	bne.n	800b486 <_dtoa_r+0x62e>
 800b43c:	4b1b      	ldr	r3, [pc, #108]	; (800b4ac <_dtoa_r+0x654>)
 800b43e:	ec51 0b19 	vmov	r0, r1, d9
 800b442:	f7f4 ff5b 	bl	80002fc <__adddf3>
 800b446:	4602      	mov	r2, r0
 800b448:	460b      	mov	r3, r1
 800b44a:	4640      	mov	r0, r8
 800b44c:	4649      	mov	r1, r9
 800b44e:	f7f5 fb9b 	bl	8000b88 <__aeabi_dcmpgt>
 800b452:	2800      	cmp	r0, #0
 800b454:	d173      	bne.n	800b53e <_dtoa_r+0x6e6>
 800b456:	ec53 2b19 	vmov	r2, r3, d9
 800b45a:	4914      	ldr	r1, [pc, #80]	; (800b4ac <_dtoa_r+0x654>)
 800b45c:	2000      	movs	r0, #0
 800b45e:	f7f4 ff4b 	bl	80002f8 <__aeabi_dsub>
 800b462:	4602      	mov	r2, r0
 800b464:	460b      	mov	r3, r1
 800b466:	4640      	mov	r0, r8
 800b468:	4649      	mov	r1, r9
 800b46a:	f7f5 fb6f 	bl	8000b4c <__aeabi_dcmplt>
 800b46e:	2800      	cmp	r0, #0
 800b470:	f43f af2f 	beq.w	800b2d2 <_dtoa_r+0x47a>
 800b474:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b476:	1e6b      	subs	r3, r5, #1
 800b478:	930f      	str	r3, [sp, #60]	; 0x3c
 800b47a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b47e:	2b30      	cmp	r3, #48	; 0x30
 800b480:	d0f8      	beq.n	800b474 <_dtoa_r+0x61c>
 800b482:	46bb      	mov	fp, r7
 800b484:	e04a      	b.n	800b51c <_dtoa_r+0x6c4>
 800b486:	4b06      	ldr	r3, [pc, #24]	; (800b4a0 <_dtoa_r+0x648>)
 800b488:	f7f5 f8ee 	bl	8000668 <__aeabi_dmul>
 800b48c:	4680      	mov	r8, r0
 800b48e:	4689      	mov	r9, r1
 800b490:	e7bd      	b.n	800b40e <_dtoa_r+0x5b6>
 800b492:	bf00      	nop
 800b494:	0800d1b0 	.word	0x0800d1b0
 800b498:	0800d188 	.word	0x0800d188
 800b49c:	3ff00000 	.word	0x3ff00000
 800b4a0:	40240000 	.word	0x40240000
 800b4a4:	401c0000 	.word	0x401c0000
 800b4a8:	40140000 	.word	0x40140000
 800b4ac:	3fe00000 	.word	0x3fe00000
 800b4b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b4b4:	9d00      	ldr	r5, [sp, #0]
 800b4b6:	4642      	mov	r2, r8
 800b4b8:	464b      	mov	r3, r9
 800b4ba:	4630      	mov	r0, r6
 800b4bc:	4639      	mov	r1, r7
 800b4be:	f7f5 f9fd 	bl	80008bc <__aeabi_ddiv>
 800b4c2:	f7f5 fb81 	bl	8000bc8 <__aeabi_d2iz>
 800b4c6:	9001      	str	r0, [sp, #4]
 800b4c8:	f7f5 f864 	bl	8000594 <__aeabi_i2d>
 800b4cc:	4642      	mov	r2, r8
 800b4ce:	464b      	mov	r3, r9
 800b4d0:	f7f5 f8ca 	bl	8000668 <__aeabi_dmul>
 800b4d4:	4602      	mov	r2, r0
 800b4d6:	460b      	mov	r3, r1
 800b4d8:	4630      	mov	r0, r6
 800b4da:	4639      	mov	r1, r7
 800b4dc:	f7f4 ff0c 	bl	80002f8 <__aeabi_dsub>
 800b4e0:	9e01      	ldr	r6, [sp, #4]
 800b4e2:	9f04      	ldr	r7, [sp, #16]
 800b4e4:	3630      	adds	r6, #48	; 0x30
 800b4e6:	f805 6b01 	strb.w	r6, [r5], #1
 800b4ea:	9e00      	ldr	r6, [sp, #0]
 800b4ec:	1bae      	subs	r6, r5, r6
 800b4ee:	42b7      	cmp	r7, r6
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	d134      	bne.n	800b560 <_dtoa_r+0x708>
 800b4f6:	f7f4 ff01 	bl	80002fc <__adddf3>
 800b4fa:	4642      	mov	r2, r8
 800b4fc:	464b      	mov	r3, r9
 800b4fe:	4606      	mov	r6, r0
 800b500:	460f      	mov	r7, r1
 800b502:	f7f5 fb41 	bl	8000b88 <__aeabi_dcmpgt>
 800b506:	b9c8      	cbnz	r0, 800b53c <_dtoa_r+0x6e4>
 800b508:	4642      	mov	r2, r8
 800b50a:	464b      	mov	r3, r9
 800b50c:	4630      	mov	r0, r6
 800b50e:	4639      	mov	r1, r7
 800b510:	f7f5 fb12 	bl	8000b38 <__aeabi_dcmpeq>
 800b514:	b110      	cbz	r0, 800b51c <_dtoa_r+0x6c4>
 800b516:	9b01      	ldr	r3, [sp, #4]
 800b518:	07db      	lsls	r3, r3, #31
 800b51a:	d40f      	bmi.n	800b53c <_dtoa_r+0x6e4>
 800b51c:	4651      	mov	r1, sl
 800b51e:	4620      	mov	r0, r4
 800b520:	f000 fbcc 	bl	800bcbc <_Bfree>
 800b524:	2300      	movs	r3, #0
 800b526:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b528:	702b      	strb	r3, [r5, #0]
 800b52a:	f10b 0301 	add.w	r3, fp, #1
 800b52e:	6013      	str	r3, [r2, #0]
 800b530:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b532:	2b00      	cmp	r3, #0
 800b534:	f43f ace2 	beq.w	800aefc <_dtoa_r+0xa4>
 800b538:	601d      	str	r5, [r3, #0]
 800b53a:	e4df      	b.n	800aefc <_dtoa_r+0xa4>
 800b53c:	465f      	mov	r7, fp
 800b53e:	462b      	mov	r3, r5
 800b540:	461d      	mov	r5, r3
 800b542:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b546:	2a39      	cmp	r2, #57	; 0x39
 800b548:	d106      	bne.n	800b558 <_dtoa_r+0x700>
 800b54a:	9a00      	ldr	r2, [sp, #0]
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d1f7      	bne.n	800b540 <_dtoa_r+0x6e8>
 800b550:	9900      	ldr	r1, [sp, #0]
 800b552:	2230      	movs	r2, #48	; 0x30
 800b554:	3701      	adds	r7, #1
 800b556:	700a      	strb	r2, [r1, #0]
 800b558:	781a      	ldrb	r2, [r3, #0]
 800b55a:	3201      	adds	r2, #1
 800b55c:	701a      	strb	r2, [r3, #0]
 800b55e:	e790      	b.n	800b482 <_dtoa_r+0x62a>
 800b560:	4ba3      	ldr	r3, [pc, #652]	; (800b7f0 <_dtoa_r+0x998>)
 800b562:	2200      	movs	r2, #0
 800b564:	f7f5 f880 	bl	8000668 <__aeabi_dmul>
 800b568:	2200      	movs	r2, #0
 800b56a:	2300      	movs	r3, #0
 800b56c:	4606      	mov	r6, r0
 800b56e:	460f      	mov	r7, r1
 800b570:	f7f5 fae2 	bl	8000b38 <__aeabi_dcmpeq>
 800b574:	2800      	cmp	r0, #0
 800b576:	d09e      	beq.n	800b4b6 <_dtoa_r+0x65e>
 800b578:	e7d0      	b.n	800b51c <_dtoa_r+0x6c4>
 800b57a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b57c:	2a00      	cmp	r2, #0
 800b57e:	f000 80ca 	beq.w	800b716 <_dtoa_r+0x8be>
 800b582:	9a07      	ldr	r2, [sp, #28]
 800b584:	2a01      	cmp	r2, #1
 800b586:	f300 80ad 	bgt.w	800b6e4 <_dtoa_r+0x88c>
 800b58a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b58c:	2a00      	cmp	r2, #0
 800b58e:	f000 80a5 	beq.w	800b6dc <_dtoa_r+0x884>
 800b592:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b596:	9e08      	ldr	r6, [sp, #32]
 800b598:	9d05      	ldr	r5, [sp, #20]
 800b59a:	9a05      	ldr	r2, [sp, #20]
 800b59c:	441a      	add	r2, r3
 800b59e:	9205      	str	r2, [sp, #20]
 800b5a0:	9a06      	ldr	r2, [sp, #24]
 800b5a2:	2101      	movs	r1, #1
 800b5a4:	441a      	add	r2, r3
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	9206      	str	r2, [sp, #24]
 800b5aa:	f000 fc3d 	bl	800be28 <__i2b>
 800b5ae:	4607      	mov	r7, r0
 800b5b0:	b165      	cbz	r5, 800b5cc <_dtoa_r+0x774>
 800b5b2:	9b06      	ldr	r3, [sp, #24]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	dd09      	ble.n	800b5cc <_dtoa_r+0x774>
 800b5b8:	42ab      	cmp	r3, r5
 800b5ba:	9a05      	ldr	r2, [sp, #20]
 800b5bc:	bfa8      	it	ge
 800b5be:	462b      	movge	r3, r5
 800b5c0:	1ad2      	subs	r2, r2, r3
 800b5c2:	9205      	str	r2, [sp, #20]
 800b5c4:	9a06      	ldr	r2, [sp, #24]
 800b5c6:	1aed      	subs	r5, r5, r3
 800b5c8:	1ad3      	subs	r3, r2, r3
 800b5ca:	9306      	str	r3, [sp, #24]
 800b5cc:	9b08      	ldr	r3, [sp, #32]
 800b5ce:	b1f3      	cbz	r3, 800b60e <_dtoa_r+0x7b6>
 800b5d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	f000 80a3 	beq.w	800b71e <_dtoa_r+0x8c6>
 800b5d8:	2e00      	cmp	r6, #0
 800b5da:	dd10      	ble.n	800b5fe <_dtoa_r+0x7a6>
 800b5dc:	4639      	mov	r1, r7
 800b5de:	4632      	mov	r2, r6
 800b5e0:	4620      	mov	r0, r4
 800b5e2:	f000 fce1 	bl	800bfa8 <__pow5mult>
 800b5e6:	4652      	mov	r2, sl
 800b5e8:	4601      	mov	r1, r0
 800b5ea:	4607      	mov	r7, r0
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	f000 fc31 	bl	800be54 <__multiply>
 800b5f2:	4651      	mov	r1, sl
 800b5f4:	4680      	mov	r8, r0
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	f000 fb60 	bl	800bcbc <_Bfree>
 800b5fc:	46c2      	mov	sl, r8
 800b5fe:	9b08      	ldr	r3, [sp, #32]
 800b600:	1b9a      	subs	r2, r3, r6
 800b602:	d004      	beq.n	800b60e <_dtoa_r+0x7b6>
 800b604:	4651      	mov	r1, sl
 800b606:	4620      	mov	r0, r4
 800b608:	f000 fcce 	bl	800bfa8 <__pow5mult>
 800b60c:	4682      	mov	sl, r0
 800b60e:	2101      	movs	r1, #1
 800b610:	4620      	mov	r0, r4
 800b612:	f000 fc09 	bl	800be28 <__i2b>
 800b616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b618:	2b00      	cmp	r3, #0
 800b61a:	4606      	mov	r6, r0
 800b61c:	f340 8081 	ble.w	800b722 <_dtoa_r+0x8ca>
 800b620:	461a      	mov	r2, r3
 800b622:	4601      	mov	r1, r0
 800b624:	4620      	mov	r0, r4
 800b626:	f000 fcbf 	bl	800bfa8 <__pow5mult>
 800b62a:	9b07      	ldr	r3, [sp, #28]
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	4606      	mov	r6, r0
 800b630:	dd7a      	ble.n	800b728 <_dtoa_r+0x8d0>
 800b632:	f04f 0800 	mov.w	r8, #0
 800b636:	6933      	ldr	r3, [r6, #16]
 800b638:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b63c:	6918      	ldr	r0, [r3, #16]
 800b63e:	f000 fba5 	bl	800bd8c <__hi0bits>
 800b642:	f1c0 0020 	rsb	r0, r0, #32
 800b646:	9b06      	ldr	r3, [sp, #24]
 800b648:	4418      	add	r0, r3
 800b64a:	f010 001f 	ands.w	r0, r0, #31
 800b64e:	f000 8094 	beq.w	800b77a <_dtoa_r+0x922>
 800b652:	f1c0 0320 	rsb	r3, r0, #32
 800b656:	2b04      	cmp	r3, #4
 800b658:	f340 8085 	ble.w	800b766 <_dtoa_r+0x90e>
 800b65c:	9b05      	ldr	r3, [sp, #20]
 800b65e:	f1c0 001c 	rsb	r0, r0, #28
 800b662:	4403      	add	r3, r0
 800b664:	9305      	str	r3, [sp, #20]
 800b666:	9b06      	ldr	r3, [sp, #24]
 800b668:	4403      	add	r3, r0
 800b66a:	4405      	add	r5, r0
 800b66c:	9306      	str	r3, [sp, #24]
 800b66e:	9b05      	ldr	r3, [sp, #20]
 800b670:	2b00      	cmp	r3, #0
 800b672:	dd05      	ble.n	800b680 <_dtoa_r+0x828>
 800b674:	4651      	mov	r1, sl
 800b676:	461a      	mov	r2, r3
 800b678:	4620      	mov	r0, r4
 800b67a:	f000 fcef 	bl	800c05c <__lshift>
 800b67e:	4682      	mov	sl, r0
 800b680:	9b06      	ldr	r3, [sp, #24]
 800b682:	2b00      	cmp	r3, #0
 800b684:	dd05      	ble.n	800b692 <_dtoa_r+0x83a>
 800b686:	4631      	mov	r1, r6
 800b688:	461a      	mov	r2, r3
 800b68a:	4620      	mov	r0, r4
 800b68c:	f000 fce6 	bl	800c05c <__lshift>
 800b690:	4606      	mov	r6, r0
 800b692:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b694:	2b00      	cmp	r3, #0
 800b696:	d072      	beq.n	800b77e <_dtoa_r+0x926>
 800b698:	4631      	mov	r1, r6
 800b69a:	4650      	mov	r0, sl
 800b69c:	f000 fd4a 	bl	800c134 <__mcmp>
 800b6a0:	2800      	cmp	r0, #0
 800b6a2:	da6c      	bge.n	800b77e <_dtoa_r+0x926>
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	4651      	mov	r1, sl
 800b6a8:	220a      	movs	r2, #10
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	f000 fb28 	bl	800bd00 <__multadd>
 800b6b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b6b6:	4682      	mov	sl, r0
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	f000 81b0 	beq.w	800ba1e <_dtoa_r+0xbc6>
 800b6be:	2300      	movs	r3, #0
 800b6c0:	4639      	mov	r1, r7
 800b6c2:	220a      	movs	r2, #10
 800b6c4:	4620      	mov	r0, r4
 800b6c6:	f000 fb1b 	bl	800bd00 <__multadd>
 800b6ca:	9b01      	ldr	r3, [sp, #4]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	4607      	mov	r7, r0
 800b6d0:	f300 8096 	bgt.w	800b800 <_dtoa_r+0x9a8>
 800b6d4:	9b07      	ldr	r3, [sp, #28]
 800b6d6:	2b02      	cmp	r3, #2
 800b6d8:	dc59      	bgt.n	800b78e <_dtoa_r+0x936>
 800b6da:	e091      	b.n	800b800 <_dtoa_r+0x9a8>
 800b6dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b6de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b6e2:	e758      	b.n	800b596 <_dtoa_r+0x73e>
 800b6e4:	9b04      	ldr	r3, [sp, #16]
 800b6e6:	1e5e      	subs	r6, r3, #1
 800b6e8:	9b08      	ldr	r3, [sp, #32]
 800b6ea:	42b3      	cmp	r3, r6
 800b6ec:	bfbf      	itttt	lt
 800b6ee:	9b08      	ldrlt	r3, [sp, #32]
 800b6f0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b6f2:	9608      	strlt	r6, [sp, #32]
 800b6f4:	1af3      	sublt	r3, r6, r3
 800b6f6:	bfb4      	ite	lt
 800b6f8:	18d2      	addlt	r2, r2, r3
 800b6fa:	1b9e      	subge	r6, r3, r6
 800b6fc:	9b04      	ldr	r3, [sp, #16]
 800b6fe:	bfbc      	itt	lt
 800b700:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b702:	2600      	movlt	r6, #0
 800b704:	2b00      	cmp	r3, #0
 800b706:	bfb7      	itett	lt
 800b708:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b70c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b710:	1a9d      	sublt	r5, r3, r2
 800b712:	2300      	movlt	r3, #0
 800b714:	e741      	b.n	800b59a <_dtoa_r+0x742>
 800b716:	9e08      	ldr	r6, [sp, #32]
 800b718:	9d05      	ldr	r5, [sp, #20]
 800b71a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b71c:	e748      	b.n	800b5b0 <_dtoa_r+0x758>
 800b71e:	9a08      	ldr	r2, [sp, #32]
 800b720:	e770      	b.n	800b604 <_dtoa_r+0x7ac>
 800b722:	9b07      	ldr	r3, [sp, #28]
 800b724:	2b01      	cmp	r3, #1
 800b726:	dc19      	bgt.n	800b75c <_dtoa_r+0x904>
 800b728:	9b02      	ldr	r3, [sp, #8]
 800b72a:	b9bb      	cbnz	r3, 800b75c <_dtoa_r+0x904>
 800b72c:	9b03      	ldr	r3, [sp, #12]
 800b72e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b732:	b99b      	cbnz	r3, 800b75c <_dtoa_r+0x904>
 800b734:	9b03      	ldr	r3, [sp, #12]
 800b736:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b73a:	0d1b      	lsrs	r3, r3, #20
 800b73c:	051b      	lsls	r3, r3, #20
 800b73e:	b183      	cbz	r3, 800b762 <_dtoa_r+0x90a>
 800b740:	9b05      	ldr	r3, [sp, #20]
 800b742:	3301      	adds	r3, #1
 800b744:	9305      	str	r3, [sp, #20]
 800b746:	9b06      	ldr	r3, [sp, #24]
 800b748:	3301      	adds	r3, #1
 800b74a:	9306      	str	r3, [sp, #24]
 800b74c:	f04f 0801 	mov.w	r8, #1
 800b750:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b752:	2b00      	cmp	r3, #0
 800b754:	f47f af6f 	bne.w	800b636 <_dtoa_r+0x7de>
 800b758:	2001      	movs	r0, #1
 800b75a:	e774      	b.n	800b646 <_dtoa_r+0x7ee>
 800b75c:	f04f 0800 	mov.w	r8, #0
 800b760:	e7f6      	b.n	800b750 <_dtoa_r+0x8f8>
 800b762:	4698      	mov	r8, r3
 800b764:	e7f4      	b.n	800b750 <_dtoa_r+0x8f8>
 800b766:	d082      	beq.n	800b66e <_dtoa_r+0x816>
 800b768:	9a05      	ldr	r2, [sp, #20]
 800b76a:	331c      	adds	r3, #28
 800b76c:	441a      	add	r2, r3
 800b76e:	9205      	str	r2, [sp, #20]
 800b770:	9a06      	ldr	r2, [sp, #24]
 800b772:	441a      	add	r2, r3
 800b774:	441d      	add	r5, r3
 800b776:	9206      	str	r2, [sp, #24]
 800b778:	e779      	b.n	800b66e <_dtoa_r+0x816>
 800b77a:	4603      	mov	r3, r0
 800b77c:	e7f4      	b.n	800b768 <_dtoa_r+0x910>
 800b77e:	9b04      	ldr	r3, [sp, #16]
 800b780:	2b00      	cmp	r3, #0
 800b782:	dc37      	bgt.n	800b7f4 <_dtoa_r+0x99c>
 800b784:	9b07      	ldr	r3, [sp, #28]
 800b786:	2b02      	cmp	r3, #2
 800b788:	dd34      	ble.n	800b7f4 <_dtoa_r+0x99c>
 800b78a:	9b04      	ldr	r3, [sp, #16]
 800b78c:	9301      	str	r3, [sp, #4]
 800b78e:	9b01      	ldr	r3, [sp, #4]
 800b790:	b963      	cbnz	r3, 800b7ac <_dtoa_r+0x954>
 800b792:	4631      	mov	r1, r6
 800b794:	2205      	movs	r2, #5
 800b796:	4620      	mov	r0, r4
 800b798:	f000 fab2 	bl	800bd00 <__multadd>
 800b79c:	4601      	mov	r1, r0
 800b79e:	4606      	mov	r6, r0
 800b7a0:	4650      	mov	r0, sl
 800b7a2:	f000 fcc7 	bl	800c134 <__mcmp>
 800b7a6:	2800      	cmp	r0, #0
 800b7a8:	f73f adbb 	bgt.w	800b322 <_dtoa_r+0x4ca>
 800b7ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7ae:	9d00      	ldr	r5, [sp, #0]
 800b7b0:	ea6f 0b03 	mvn.w	fp, r3
 800b7b4:	f04f 0800 	mov.w	r8, #0
 800b7b8:	4631      	mov	r1, r6
 800b7ba:	4620      	mov	r0, r4
 800b7bc:	f000 fa7e 	bl	800bcbc <_Bfree>
 800b7c0:	2f00      	cmp	r7, #0
 800b7c2:	f43f aeab 	beq.w	800b51c <_dtoa_r+0x6c4>
 800b7c6:	f1b8 0f00 	cmp.w	r8, #0
 800b7ca:	d005      	beq.n	800b7d8 <_dtoa_r+0x980>
 800b7cc:	45b8      	cmp	r8, r7
 800b7ce:	d003      	beq.n	800b7d8 <_dtoa_r+0x980>
 800b7d0:	4641      	mov	r1, r8
 800b7d2:	4620      	mov	r0, r4
 800b7d4:	f000 fa72 	bl	800bcbc <_Bfree>
 800b7d8:	4639      	mov	r1, r7
 800b7da:	4620      	mov	r0, r4
 800b7dc:	f000 fa6e 	bl	800bcbc <_Bfree>
 800b7e0:	e69c      	b.n	800b51c <_dtoa_r+0x6c4>
 800b7e2:	2600      	movs	r6, #0
 800b7e4:	4637      	mov	r7, r6
 800b7e6:	e7e1      	b.n	800b7ac <_dtoa_r+0x954>
 800b7e8:	46bb      	mov	fp, r7
 800b7ea:	4637      	mov	r7, r6
 800b7ec:	e599      	b.n	800b322 <_dtoa_r+0x4ca>
 800b7ee:	bf00      	nop
 800b7f0:	40240000 	.word	0x40240000
 800b7f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	f000 80c8 	beq.w	800b98c <_dtoa_r+0xb34>
 800b7fc:	9b04      	ldr	r3, [sp, #16]
 800b7fe:	9301      	str	r3, [sp, #4]
 800b800:	2d00      	cmp	r5, #0
 800b802:	dd05      	ble.n	800b810 <_dtoa_r+0x9b8>
 800b804:	4639      	mov	r1, r7
 800b806:	462a      	mov	r2, r5
 800b808:	4620      	mov	r0, r4
 800b80a:	f000 fc27 	bl	800c05c <__lshift>
 800b80e:	4607      	mov	r7, r0
 800b810:	f1b8 0f00 	cmp.w	r8, #0
 800b814:	d05b      	beq.n	800b8ce <_dtoa_r+0xa76>
 800b816:	6879      	ldr	r1, [r7, #4]
 800b818:	4620      	mov	r0, r4
 800b81a:	f000 fa0f 	bl	800bc3c <_Balloc>
 800b81e:	4605      	mov	r5, r0
 800b820:	b928      	cbnz	r0, 800b82e <_dtoa_r+0x9d6>
 800b822:	4b83      	ldr	r3, [pc, #524]	; (800ba30 <_dtoa_r+0xbd8>)
 800b824:	4602      	mov	r2, r0
 800b826:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b82a:	f7ff bb2e 	b.w	800ae8a <_dtoa_r+0x32>
 800b82e:	693a      	ldr	r2, [r7, #16]
 800b830:	3202      	adds	r2, #2
 800b832:	0092      	lsls	r2, r2, #2
 800b834:	f107 010c 	add.w	r1, r7, #12
 800b838:	300c      	adds	r0, #12
 800b83a:	f000 ffbd 	bl	800c7b8 <memcpy>
 800b83e:	2201      	movs	r2, #1
 800b840:	4629      	mov	r1, r5
 800b842:	4620      	mov	r0, r4
 800b844:	f000 fc0a 	bl	800c05c <__lshift>
 800b848:	9b00      	ldr	r3, [sp, #0]
 800b84a:	3301      	adds	r3, #1
 800b84c:	9304      	str	r3, [sp, #16]
 800b84e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b852:	4413      	add	r3, r2
 800b854:	9308      	str	r3, [sp, #32]
 800b856:	9b02      	ldr	r3, [sp, #8]
 800b858:	f003 0301 	and.w	r3, r3, #1
 800b85c:	46b8      	mov	r8, r7
 800b85e:	9306      	str	r3, [sp, #24]
 800b860:	4607      	mov	r7, r0
 800b862:	9b04      	ldr	r3, [sp, #16]
 800b864:	4631      	mov	r1, r6
 800b866:	3b01      	subs	r3, #1
 800b868:	4650      	mov	r0, sl
 800b86a:	9301      	str	r3, [sp, #4]
 800b86c:	f7ff fa6a 	bl	800ad44 <quorem>
 800b870:	4641      	mov	r1, r8
 800b872:	9002      	str	r0, [sp, #8]
 800b874:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b878:	4650      	mov	r0, sl
 800b87a:	f000 fc5b 	bl	800c134 <__mcmp>
 800b87e:	463a      	mov	r2, r7
 800b880:	9005      	str	r0, [sp, #20]
 800b882:	4631      	mov	r1, r6
 800b884:	4620      	mov	r0, r4
 800b886:	f000 fc71 	bl	800c16c <__mdiff>
 800b88a:	68c2      	ldr	r2, [r0, #12]
 800b88c:	4605      	mov	r5, r0
 800b88e:	bb02      	cbnz	r2, 800b8d2 <_dtoa_r+0xa7a>
 800b890:	4601      	mov	r1, r0
 800b892:	4650      	mov	r0, sl
 800b894:	f000 fc4e 	bl	800c134 <__mcmp>
 800b898:	4602      	mov	r2, r0
 800b89a:	4629      	mov	r1, r5
 800b89c:	4620      	mov	r0, r4
 800b89e:	9209      	str	r2, [sp, #36]	; 0x24
 800b8a0:	f000 fa0c 	bl	800bcbc <_Bfree>
 800b8a4:	9b07      	ldr	r3, [sp, #28]
 800b8a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8a8:	9d04      	ldr	r5, [sp, #16]
 800b8aa:	ea43 0102 	orr.w	r1, r3, r2
 800b8ae:	9b06      	ldr	r3, [sp, #24]
 800b8b0:	4319      	orrs	r1, r3
 800b8b2:	d110      	bne.n	800b8d6 <_dtoa_r+0xa7e>
 800b8b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b8b8:	d029      	beq.n	800b90e <_dtoa_r+0xab6>
 800b8ba:	9b05      	ldr	r3, [sp, #20]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	dd02      	ble.n	800b8c6 <_dtoa_r+0xa6e>
 800b8c0:	9b02      	ldr	r3, [sp, #8]
 800b8c2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b8c6:	9b01      	ldr	r3, [sp, #4]
 800b8c8:	f883 9000 	strb.w	r9, [r3]
 800b8cc:	e774      	b.n	800b7b8 <_dtoa_r+0x960>
 800b8ce:	4638      	mov	r0, r7
 800b8d0:	e7ba      	b.n	800b848 <_dtoa_r+0x9f0>
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	e7e1      	b.n	800b89a <_dtoa_r+0xa42>
 800b8d6:	9b05      	ldr	r3, [sp, #20]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	db04      	blt.n	800b8e6 <_dtoa_r+0xa8e>
 800b8dc:	9907      	ldr	r1, [sp, #28]
 800b8de:	430b      	orrs	r3, r1
 800b8e0:	9906      	ldr	r1, [sp, #24]
 800b8e2:	430b      	orrs	r3, r1
 800b8e4:	d120      	bne.n	800b928 <_dtoa_r+0xad0>
 800b8e6:	2a00      	cmp	r2, #0
 800b8e8:	dded      	ble.n	800b8c6 <_dtoa_r+0xa6e>
 800b8ea:	4651      	mov	r1, sl
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	4620      	mov	r0, r4
 800b8f0:	f000 fbb4 	bl	800c05c <__lshift>
 800b8f4:	4631      	mov	r1, r6
 800b8f6:	4682      	mov	sl, r0
 800b8f8:	f000 fc1c 	bl	800c134 <__mcmp>
 800b8fc:	2800      	cmp	r0, #0
 800b8fe:	dc03      	bgt.n	800b908 <_dtoa_r+0xab0>
 800b900:	d1e1      	bne.n	800b8c6 <_dtoa_r+0xa6e>
 800b902:	f019 0f01 	tst.w	r9, #1
 800b906:	d0de      	beq.n	800b8c6 <_dtoa_r+0xa6e>
 800b908:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b90c:	d1d8      	bne.n	800b8c0 <_dtoa_r+0xa68>
 800b90e:	9a01      	ldr	r2, [sp, #4]
 800b910:	2339      	movs	r3, #57	; 0x39
 800b912:	7013      	strb	r3, [r2, #0]
 800b914:	462b      	mov	r3, r5
 800b916:	461d      	mov	r5, r3
 800b918:	3b01      	subs	r3, #1
 800b91a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b91e:	2a39      	cmp	r2, #57	; 0x39
 800b920:	d06c      	beq.n	800b9fc <_dtoa_r+0xba4>
 800b922:	3201      	adds	r2, #1
 800b924:	701a      	strb	r2, [r3, #0]
 800b926:	e747      	b.n	800b7b8 <_dtoa_r+0x960>
 800b928:	2a00      	cmp	r2, #0
 800b92a:	dd07      	ble.n	800b93c <_dtoa_r+0xae4>
 800b92c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b930:	d0ed      	beq.n	800b90e <_dtoa_r+0xab6>
 800b932:	9a01      	ldr	r2, [sp, #4]
 800b934:	f109 0301 	add.w	r3, r9, #1
 800b938:	7013      	strb	r3, [r2, #0]
 800b93a:	e73d      	b.n	800b7b8 <_dtoa_r+0x960>
 800b93c:	9b04      	ldr	r3, [sp, #16]
 800b93e:	9a08      	ldr	r2, [sp, #32]
 800b940:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b944:	4293      	cmp	r3, r2
 800b946:	d043      	beq.n	800b9d0 <_dtoa_r+0xb78>
 800b948:	4651      	mov	r1, sl
 800b94a:	2300      	movs	r3, #0
 800b94c:	220a      	movs	r2, #10
 800b94e:	4620      	mov	r0, r4
 800b950:	f000 f9d6 	bl	800bd00 <__multadd>
 800b954:	45b8      	cmp	r8, r7
 800b956:	4682      	mov	sl, r0
 800b958:	f04f 0300 	mov.w	r3, #0
 800b95c:	f04f 020a 	mov.w	r2, #10
 800b960:	4641      	mov	r1, r8
 800b962:	4620      	mov	r0, r4
 800b964:	d107      	bne.n	800b976 <_dtoa_r+0xb1e>
 800b966:	f000 f9cb 	bl	800bd00 <__multadd>
 800b96a:	4680      	mov	r8, r0
 800b96c:	4607      	mov	r7, r0
 800b96e:	9b04      	ldr	r3, [sp, #16]
 800b970:	3301      	adds	r3, #1
 800b972:	9304      	str	r3, [sp, #16]
 800b974:	e775      	b.n	800b862 <_dtoa_r+0xa0a>
 800b976:	f000 f9c3 	bl	800bd00 <__multadd>
 800b97a:	4639      	mov	r1, r7
 800b97c:	4680      	mov	r8, r0
 800b97e:	2300      	movs	r3, #0
 800b980:	220a      	movs	r2, #10
 800b982:	4620      	mov	r0, r4
 800b984:	f000 f9bc 	bl	800bd00 <__multadd>
 800b988:	4607      	mov	r7, r0
 800b98a:	e7f0      	b.n	800b96e <_dtoa_r+0xb16>
 800b98c:	9b04      	ldr	r3, [sp, #16]
 800b98e:	9301      	str	r3, [sp, #4]
 800b990:	9d00      	ldr	r5, [sp, #0]
 800b992:	4631      	mov	r1, r6
 800b994:	4650      	mov	r0, sl
 800b996:	f7ff f9d5 	bl	800ad44 <quorem>
 800b99a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b99e:	9b00      	ldr	r3, [sp, #0]
 800b9a0:	f805 9b01 	strb.w	r9, [r5], #1
 800b9a4:	1aea      	subs	r2, r5, r3
 800b9a6:	9b01      	ldr	r3, [sp, #4]
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	dd07      	ble.n	800b9bc <_dtoa_r+0xb64>
 800b9ac:	4651      	mov	r1, sl
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	220a      	movs	r2, #10
 800b9b2:	4620      	mov	r0, r4
 800b9b4:	f000 f9a4 	bl	800bd00 <__multadd>
 800b9b8:	4682      	mov	sl, r0
 800b9ba:	e7ea      	b.n	800b992 <_dtoa_r+0xb3a>
 800b9bc:	9b01      	ldr	r3, [sp, #4]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	bfc8      	it	gt
 800b9c2:	461d      	movgt	r5, r3
 800b9c4:	9b00      	ldr	r3, [sp, #0]
 800b9c6:	bfd8      	it	le
 800b9c8:	2501      	movle	r5, #1
 800b9ca:	441d      	add	r5, r3
 800b9cc:	f04f 0800 	mov.w	r8, #0
 800b9d0:	4651      	mov	r1, sl
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	4620      	mov	r0, r4
 800b9d6:	f000 fb41 	bl	800c05c <__lshift>
 800b9da:	4631      	mov	r1, r6
 800b9dc:	4682      	mov	sl, r0
 800b9de:	f000 fba9 	bl	800c134 <__mcmp>
 800b9e2:	2800      	cmp	r0, #0
 800b9e4:	dc96      	bgt.n	800b914 <_dtoa_r+0xabc>
 800b9e6:	d102      	bne.n	800b9ee <_dtoa_r+0xb96>
 800b9e8:	f019 0f01 	tst.w	r9, #1
 800b9ec:	d192      	bne.n	800b914 <_dtoa_r+0xabc>
 800b9ee:	462b      	mov	r3, r5
 800b9f0:	461d      	mov	r5, r3
 800b9f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9f6:	2a30      	cmp	r2, #48	; 0x30
 800b9f8:	d0fa      	beq.n	800b9f0 <_dtoa_r+0xb98>
 800b9fa:	e6dd      	b.n	800b7b8 <_dtoa_r+0x960>
 800b9fc:	9a00      	ldr	r2, [sp, #0]
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d189      	bne.n	800b916 <_dtoa_r+0xabe>
 800ba02:	f10b 0b01 	add.w	fp, fp, #1
 800ba06:	2331      	movs	r3, #49	; 0x31
 800ba08:	e796      	b.n	800b938 <_dtoa_r+0xae0>
 800ba0a:	4b0a      	ldr	r3, [pc, #40]	; (800ba34 <_dtoa_r+0xbdc>)
 800ba0c:	f7ff ba99 	b.w	800af42 <_dtoa_r+0xea>
 800ba10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	f47f aa6d 	bne.w	800aef2 <_dtoa_r+0x9a>
 800ba18:	4b07      	ldr	r3, [pc, #28]	; (800ba38 <_dtoa_r+0xbe0>)
 800ba1a:	f7ff ba92 	b.w	800af42 <_dtoa_r+0xea>
 800ba1e:	9b01      	ldr	r3, [sp, #4]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	dcb5      	bgt.n	800b990 <_dtoa_r+0xb38>
 800ba24:	9b07      	ldr	r3, [sp, #28]
 800ba26:	2b02      	cmp	r3, #2
 800ba28:	f73f aeb1 	bgt.w	800b78e <_dtoa_r+0x936>
 800ba2c:	e7b0      	b.n	800b990 <_dtoa_r+0xb38>
 800ba2e:	bf00      	nop
 800ba30:	0800d11b 	.word	0x0800d11b
 800ba34:	0800cfe5 	.word	0x0800cfe5
 800ba38:	0800d0b6 	.word	0x0800d0b6

0800ba3c <_free_r>:
 800ba3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba3e:	2900      	cmp	r1, #0
 800ba40:	d044      	beq.n	800bacc <_free_r+0x90>
 800ba42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba46:	9001      	str	r0, [sp, #4]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	f1a1 0404 	sub.w	r4, r1, #4
 800ba4e:	bfb8      	it	lt
 800ba50:	18e4      	addlt	r4, r4, r3
 800ba52:	f000 f8e7 	bl	800bc24 <__malloc_lock>
 800ba56:	4a1e      	ldr	r2, [pc, #120]	; (800bad0 <_free_r+0x94>)
 800ba58:	9801      	ldr	r0, [sp, #4]
 800ba5a:	6813      	ldr	r3, [r2, #0]
 800ba5c:	b933      	cbnz	r3, 800ba6c <_free_r+0x30>
 800ba5e:	6063      	str	r3, [r4, #4]
 800ba60:	6014      	str	r4, [r2, #0]
 800ba62:	b003      	add	sp, #12
 800ba64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba68:	f000 b8e2 	b.w	800bc30 <__malloc_unlock>
 800ba6c:	42a3      	cmp	r3, r4
 800ba6e:	d908      	bls.n	800ba82 <_free_r+0x46>
 800ba70:	6825      	ldr	r5, [r4, #0]
 800ba72:	1961      	adds	r1, r4, r5
 800ba74:	428b      	cmp	r3, r1
 800ba76:	bf01      	itttt	eq
 800ba78:	6819      	ldreq	r1, [r3, #0]
 800ba7a:	685b      	ldreq	r3, [r3, #4]
 800ba7c:	1949      	addeq	r1, r1, r5
 800ba7e:	6021      	streq	r1, [r4, #0]
 800ba80:	e7ed      	b.n	800ba5e <_free_r+0x22>
 800ba82:	461a      	mov	r2, r3
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	b10b      	cbz	r3, 800ba8c <_free_r+0x50>
 800ba88:	42a3      	cmp	r3, r4
 800ba8a:	d9fa      	bls.n	800ba82 <_free_r+0x46>
 800ba8c:	6811      	ldr	r1, [r2, #0]
 800ba8e:	1855      	adds	r5, r2, r1
 800ba90:	42a5      	cmp	r5, r4
 800ba92:	d10b      	bne.n	800baac <_free_r+0x70>
 800ba94:	6824      	ldr	r4, [r4, #0]
 800ba96:	4421      	add	r1, r4
 800ba98:	1854      	adds	r4, r2, r1
 800ba9a:	42a3      	cmp	r3, r4
 800ba9c:	6011      	str	r1, [r2, #0]
 800ba9e:	d1e0      	bne.n	800ba62 <_free_r+0x26>
 800baa0:	681c      	ldr	r4, [r3, #0]
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	6053      	str	r3, [r2, #4]
 800baa6:	440c      	add	r4, r1
 800baa8:	6014      	str	r4, [r2, #0]
 800baaa:	e7da      	b.n	800ba62 <_free_r+0x26>
 800baac:	d902      	bls.n	800bab4 <_free_r+0x78>
 800baae:	230c      	movs	r3, #12
 800bab0:	6003      	str	r3, [r0, #0]
 800bab2:	e7d6      	b.n	800ba62 <_free_r+0x26>
 800bab4:	6825      	ldr	r5, [r4, #0]
 800bab6:	1961      	adds	r1, r4, r5
 800bab8:	428b      	cmp	r3, r1
 800baba:	bf04      	itt	eq
 800babc:	6819      	ldreq	r1, [r3, #0]
 800babe:	685b      	ldreq	r3, [r3, #4]
 800bac0:	6063      	str	r3, [r4, #4]
 800bac2:	bf04      	itt	eq
 800bac4:	1949      	addeq	r1, r1, r5
 800bac6:	6021      	streq	r1, [r4, #0]
 800bac8:	6054      	str	r4, [r2, #4]
 800baca:	e7ca      	b.n	800ba62 <_free_r+0x26>
 800bacc:	b003      	add	sp, #12
 800bace:	bd30      	pop	{r4, r5, pc}
 800bad0:	200007fc 	.word	0x200007fc

0800bad4 <malloc>:
 800bad4:	4b02      	ldr	r3, [pc, #8]	; (800bae0 <malloc+0xc>)
 800bad6:	4601      	mov	r1, r0
 800bad8:	6818      	ldr	r0, [r3, #0]
 800bada:	f000 b823 	b.w	800bb24 <_malloc_r>
 800bade:	bf00      	nop
 800bae0:	20000120 	.word	0x20000120

0800bae4 <sbrk_aligned>:
 800bae4:	b570      	push	{r4, r5, r6, lr}
 800bae6:	4e0e      	ldr	r6, [pc, #56]	; (800bb20 <sbrk_aligned+0x3c>)
 800bae8:	460c      	mov	r4, r1
 800baea:	6831      	ldr	r1, [r6, #0]
 800baec:	4605      	mov	r5, r0
 800baee:	b911      	cbnz	r1, 800baf6 <sbrk_aligned+0x12>
 800baf0:	f000 fe52 	bl	800c798 <_sbrk_r>
 800baf4:	6030      	str	r0, [r6, #0]
 800baf6:	4621      	mov	r1, r4
 800baf8:	4628      	mov	r0, r5
 800bafa:	f000 fe4d 	bl	800c798 <_sbrk_r>
 800bafe:	1c43      	adds	r3, r0, #1
 800bb00:	d00a      	beq.n	800bb18 <sbrk_aligned+0x34>
 800bb02:	1cc4      	adds	r4, r0, #3
 800bb04:	f024 0403 	bic.w	r4, r4, #3
 800bb08:	42a0      	cmp	r0, r4
 800bb0a:	d007      	beq.n	800bb1c <sbrk_aligned+0x38>
 800bb0c:	1a21      	subs	r1, r4, r0
 800bb0e:	4628      	mov	r0, r5
 800bb10:	f000 fe42 	bl	800c798 <_sbrk_r>
 800bb14:	3001      	adds	r0, #1
 800bb16:	d101      	bne.n	800bb1c <sbrk_aligned+0x38>
 800bb18:	f04f 34ff 	mov.w	r4, #4294967295
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	bd70      	pop	{r4, r5, r6, pc}
 800bb20:	20000800 	.word	0x20000800

0800bb24 <_malloc_r>:
 800bb24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb28:	1ccd      	adds	r5, r1, #3
 800bb2a:	f025 0503 	bic.w	r5, r5, #3
 800bb2e:	3508      	adds	r5, #8
 800bb30:	2d0c      	cmp	r5, #12
 800bb32:	bf38      	it	cc
 800bb34:	250c      	movcc	r5, #12
 800bb36:	2d00      	cmp	r5, #0
 800bb38:	4607      	mov	r7, r0
 800bb3a:	db01      	blt.n	800bb40 <_malloc_r+0x1c>
 800bb3c:	42a9      	cmp	r1, r5
 800bb3e:	d905      	bls.n	800bb4c <_malloc_r+0x28>
 800bb40:	230c      	movs	r3, #12
 800bb42:	603b      	str	r3, [r7, #0]
 800bb44:	2600      	movs	r6, #0
 800bb46:	4630      	mov	r0, r6
 800bb48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bc20 <_malloc_r+0xfc>
 800bb50:	f000 f868 	bl	800bc24 <__malloc_lock>
 800bb54:	f8d8 3000 	ldr.w	r3, [r8]
 800bb58:	461c      	mov	r4, r3
 800bb5a:	bb5c      	cbnz	r4, 800bbb4 <_malloc_r+0x90>
 800bb5c:	4629      	mov	r1, r5
 800bb5e:	4638      	mov	r0, r7
 800bb60:	f7ff ffc0 	bl	800bae4 <sbrk_aligned>
 800bb64:	1c43      	adds	r3, r0, #1
 800bb66:	4604      	mov	r4, r0
 800bb68:	d155      	bne.n	800bc16 <_malloc_r+0xf2>
 800bb6a:	f8d8 4000 	ldr.w	r4, [r8]
 800bb6e:	4626      	mov	r6, r4
 800bb70:	2e00      	cmp	r6, #0
 800bb72:	d145      	bne.n	800bc00 <_malloc_r+0xdc>
 800bb74:	2c00      	cmp	r4, #0
 800bb76:	d048      	beq.n	800bc0a <_malloc_r+0xe6>
 800bb78:	6823      	ldr	r3, [r4, #0]
 800bb7a:	4631      	mov	r1, r6
 800bb7c:	4638      	mov	r0, r7
 800bb7e:	eb04 0903 	add.w	r9, r4, r3
 800bb82:	f000 fe09 	bl	800c798 <_sbrk_r>
 800bb86:	4581      	cmp	r9, r0
 800bb88:	d13f      	bne.n	800bc0a <_malloc_r+0xe6>
 800bb8a:	6821      	ldr	r1, [r4, #0]
 800bb8c:	1a6d      	subs	r5, r5, r1
 800bb8e:	4629      	mov	r1, r5
 800bb90:	4638      	mov	r0, r7
 800bb92:	f7ff ffa7 	bl	800bae4 <sbrk_aligned>
 800bb96:	3001      	adds	r0, #1
 800bb98:	d037      	beq.n	800bc0a <_malloc_r+0xe6>
 800bb9a:	6823      	ldr	r3, [r4, #0]
 800bb9c:	442b      	add	r3, r5
 800bb9e:	6023      	str	r3, [r4, #0]
 800bba0:	f8d8 3000 	ldr.w	r3, [r8]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d038      	beq.n	800bc1a <_malloc_r+0xf6>
 800bba8:	685a      	ldr	r2, [r3, #4]
 800bbaa:	42a2      	cmp	r2, r4
 800bbac:	d12b      	bne.n	800bc06 <_malloc_r+0xe2>
 800bbae:	2200      	movs	r2, #0
 800bbb0:	605a      	str	r2, [r3, #4]
 800bbb2:	e00f      	b.n	800bbd4 <_malloc_r+0xb0>
 800bbb4:	6822      	ldr	r2, [r4, #0]
 800bbb6:	1b52      	subs	r2, r2, r5
 800bbb8:	d41f      	bmi.n	800bbfa <_malloc_r+0xd6>
 800bbba:	2a0b      	cmp	r2, #11
 800bbbc:	d917      	bls.n	800bbee <_malloc_r+0xca>
 800bbbe:	1961      	adds	r1, r4, r5
 800bbc0:	42a3      	cmp	r3, r4
 800bbc2:	6025      	str	r5, [r4, #0]
 800bbc4:	bf18      	it	ne
 800bbc6:	6059      	strne	r1, [r3, #4]
 800bbc8:	6863      	ldr	r3, [r4, #4]
 800bbca:	bf08      	it	eq
 800bbcc:	f8c8 1000 	streq.w	r1, [r8]
 800bbd0:	5162      	str	r2, [r4, r5]
 800bbd2:	604b      	str	r3, [r1, #4]
 800bbd4:	4638      	mov	r0, r7
 800bbd6:	f104 060b 	add.w	r6, r4, #11
 800bbda:	f000 f829 	bl	800bc30 <__malloc_unlock>
 800bbde:	f026 0607 	bic.w	r6, r6, #7
 800bbe2:	1d23      	adds	r3, r4, #4
 800bbe4:	1af2      	subs	r2, r6, r3
 800bbe6:	d0ae      	beq.n	800bb46 <_malloc_r+0x22>
 800bbe8:	1b9b      	subs	r3, r3, r6
 800bbea:	50a3      	str	r3, [r4, r2]
 800bbec:	e7ab      	b.n	800bb46 <_malloc_r+0x22>
 800bbee:	42a3      	cmp	r3, r4
 800bbf0:	6862      	ldr	r2, [r4, #4]
 800bbf2:	d1dd      	bne.n	800bbb0 <_malloc_r+0x8c>
 800bbf4:	f8c8 2000 	str.w	r2, [r8]
 800bbf8:	e7ec      	b.n	800bbd4 <_malloc_r+0xb0>
 800bbfa:	4623      	mov	r3, r4
 800bbfc:	6864      	ldr	r4, [r4, #4]
 800bbfe:	e7ac      	b.n	800bb5a <_malloc_r+0x36>
 800bc00:	4634      	mov	r4, r6
 800bc02:	6876      	ldr	r6, [r6, #4]
 800bc04:	e7b4      	b.n	800bb70 <_malloc_r+0x4c>
 800bc06:	4613      	mov	r3, r2
 800bc08:	e7cc      	b.n	800bba4 <_malloc_r+0x80>
 800bc0a:	230c      	movs	r3, #12
 800bc0c:	603b      	str	r3, [r7, #0]
 800bc0e:	4638      	mov	r0, r7
 800bc10:	f000 f80e 	bl	800bc30 <__malloc_unlock>
 800bc14:	e797      	b.n	800bb46 <_malloc_r+0x22>
 800bc16:	6025      	str	r5, [r4, #0]
 800bc18:	e7dc      	b.n	800bbd4 <_malloc_r+0xb0>
 800bc1a:	605b      	str	r3, [r3, #4]
 800bc1c:	deff      	udf	#255	; 0xff
 800bc1e:	bf00      	nop
 800bc20:	200007fc 	.word	0x200007fc

0800bc24 <__malloc_lock>:
 800bc24:	4801      	ldr	r0, [pc, #4]	; (800bc2c <__malloc_lock+0x8>)
 800bc26:	f7ff b86d 	b.w	800ad04 <__retarget_lock_acquire_recursive>
 800bc2a:	bf00      	nop
 800bc2c:	200007f8 	.word	0x200007f8

0800bc30 <__malloc_unlock>:
 800bc30:	4801      	ldr	r0, [pc, #4]	; (800bc38 <__malloc_unlock+0x8>)
 800bc32:	f7ff b868 	b.w	800ad06 <__retarget_lock_release_recursive>
 800bc36:	bf00      	nop
 800bc38:	200007f8 	.word	0x200007f8

0800bc3c <_Balloc>:
 800bc3c:	b570      	push	{r4, r5, r6, lr}
 800bc3e:	69c6      	ldr	r6, [r0, #28]
 800bc40:	4604      	mov	r4, r0
 800bc42:	460d      	mov	r5, r1
 800bc44:	b976      	cbnz	r6, 800bc64 <_Balloc+0x28>
 800bc46:	2010      	movs	r0, #16
 800bc48:	f7ff ff44 	bl	800bad4 <malloc>
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	61e0      	str	r0, [r4, #28]
 800bc50:	b920      	cbnz	r0, 800bc5c <_Balloc+0x20>
 800bc52:	4b18      	ldr	r3, [pc, #96]	; (800bcb4 <_Balloc+0x78>)
 800bc54:	4818      	ldr	r0, [pc, #96]	; (800bcb8 <_Balloc+0x7c>)
 800bc56:	216b      	movs	r1, #107	; 0x6b
 800bc58:	f7ff f856 	bl	800ad08 <__assert_func>
 800bc5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc60:	6006      	str	r6, [r0, #0]
 800bc62:	60c6      	str	r6, [r0, #12]
 800bc64:	69e6      	ldr	r6, [r4, #28]
 800bc66:	68f3      	ldr	r3, [r6, #12]
 800bc68:	b183      	cbz	r3, 800bc8c <_Balloc+0x50>
 800bc6a:	69e3      	ldr	r3, [r4, #28]
 800bc6c:	68db      	ldr	r3, [r3, #12]
 800bc6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bc72:	b9b8      	cbnz	r0, 800bca4 <_Balloc+0x68>
 800bc74:	2101      	movs	r1, #1
 800bc76:	fa01 f605 	lsl.w	r6, r1, r5
 800bc7a:	1d72      	adds	r2, r6, #5
 800bc7c:	0092      	lsls	r2, r2, #2
 800bc7e:	4620      	mov	r0, r4
 800bc80:	f000 fdaf 	bl	800c7e2 <_calloc_r>
 800bc84:	b160      	cbz	r0, 800bca0 <_Balloc+0x64>
 800bc86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bc8a:	e00e      	b.n	800bcaa <_Balloc+0x6e>
 800bc8c:	2221      	movs	r2, #33	; 0x21
 800bc8e:	2104      	movs	r1, #4
 800bc90:	4620      	mov	r0, r4
 800bc92:	f000 fda6 	bl	800c7e2 <_calloc_r>
 800bc96:	69e3      	ldr	r3, [r4, #28]
 800bc98:	60f0      	str	r0, [r6, #12]
 800bc9a:	68db      	ldr	r3, [r3, #12]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d1e4      	bne.n	800bc6a <_Balloc+0x2e>
 800bca0:	2000      	movs	r0, #0
 800bca2:	bd70      	pop	{r4, r5, r6, pc}
 800bca4:	6802      	ldr	r2, [r0, #0]
 800bca6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bcaa:	2300      	movs	r3, #0
 800bcac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bcb0:	e7f7      	b.n	800bca2 <_Balloc+0x66>
 800bcb2:	bf00      	nop
 800bcb4:	0800d009 	.word	0x0800d009
 800bcb8:	0800d12c 	.word	0x0800d12c

0800bcbc <_Bfree>:
 800bcbc:	b570      	push	{r4, r5, r6, lr}
 800bcbe:	69c6      	ldr	r6, [r0, #28]
 800bcc0:	4605      	mov	r5, r0
 800bcc2:	460c      	mov	r4, r1
 800bcc4:	b976      	cbnz	r6, 800bce4 <_Bfree+0x28>
 800bcc6:	2010      	movs	r0, #16
 800bcc8:	f7ff ff04 	bl	800bad4 <malloc>
 800bccc:	4602      	mov	r2, r0
 800bcce:	61e8      	str	r0, [r5, #28]
 800bcd0:	b920      	cbnz	r0, 800bcdc <_Bfree+0x20>
 800bcd2:	4b09      	ldr	r3, [pc, #36]	; (800bcf8 <_Bfree+0x3c>)
 800bcd4:	4809      	ldr	r0, [pc, #36]	; (800bcfc <_Bfree+0x40>)
 800bcd6:	218f      	movs	r1, #143	; 0x8f
 800bcd8:	f7ff f816 	bl	800ad08 <__assert_func>
 800bcdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bce0:	6006      	str	r6, [r0, #0]
 800bce2:	60c6      	str	r6, [r0, #12]
 800bce4:	b13c      	cbz	r4, 800bcf6 <_Bfree+0x3a>
 800bce6:	69eb      	ldr	r3, [r5, #28]
 800bce8:	6862      	ldr	r2, [r4, #4]
 800bcea:	68db      	ldr	r3, [r3, #12]
 800bcec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bcf0:	6021      	str	r1, [r4, #0]
 800bcf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bcf6:	bd70      	pop	{r4, r5, r6, pc}
 800bcf8:	0800d009 	.word	0x0800d009
 800bcfc:	0800d12c 	.word	0x0800d12c

0800bd00 <__multadd>:
 800bd00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd04:	690d      	ldr	r5, [r1, #16]
 800bd06:	4607      	mov	r7, r0
 800bd08:	460c      	mov	r4, r1
 800bd0a:	461e      	mov	r6, r3
 800bd0c:	f101 0c14 	add.w	ip, r1, #20
 800bd10:	2000      	movs	r0, #0
 800bd12:	f8dc 3000 	ldr.w	r3, [ip]
 800bd16:	b299      	uxth	r1, r3
 800bd18:	fb02 6101 	mla	r1, r2, r1, r6
 800bd1c:	0c1e      	lsrs	r6, r3, #16
 800bd1e:	0c0b      	lsrs	r3, r1, #16
 800bd20:	fb02 3306 	mla	r3, r2, r6, r3
 800bd24:	b289      	uxth	r1, r1
 800bd26:	3001      	adds	r0, #1
 800bd28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bd2c:	4285      	cmp	r5, r0
 800bd2e:	f84c 1b04 	str.w	r1, [ip], #4
 800bd32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bd36:	dcec      	bgt.n	800bd12 <__multadd+0x12>
 800bd38:	b30e      	cbz	r6, 800bd7e <__multadd+0x7e>
 800bd3a:	68a3      	ldr	r3, [r4, #8]
 800bd3c:	42ab      	cmp	r3, r5
 800bd3e:	dc19      	bgt.n	800bd74 <__multadd+0x74>
 800bd40:	6861      	ldr	r1, [r4, #4]
 800bd42:	4638      	mov	r0, r7
 800bd44:	3101      	adds	r1, #1
 800bd46:	f7ff ff79 	bl	800bc3c <_Balloc>
 800bd4a:	4680      	mov	r8, r0
 800bd4c:	b928      	cbnz	r0, 800bd5a <__multadd+0x5a>
 800bd4e:	4602      	mov	r2, r0
 800bd50:	4b0c      	ldr	r3, [pc, #48]	; (800bd84 <__multadd+0x84>)
 800bd52:	480d      	ldr	r0, [pc, #52]	; (800bd88 <__multadd+0x88>)
 800bd54:	21ba      	movs	r1, #186	; 0xba
 800bd56:	f7fe ffd7 	bl	800ad08 <__assert_func>
 800bd5a:	6922      	ldr	r2, [r4, #16]
 800bd5c:	3202      	adds	r2, #2
 800bd5e:	f104 010c 	add.w	r1, r4, #12
 800bd62:	0092      	lsls	r2, r2, #2
 800bd64:	300c      	adds	r0, #12
 800bd66:	f000 fd27 	bl	800c7b8 <memcpy>
 800bd6a:	4621      	mov	r1, r4
 800bd6c:	4638      	mov	r0, r7
 800bd6e:	f7ff ffa5 	bl	800bcbc <_Bfree>
 800bd72:	4644      	mov	r4, r8
 800bd74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bd78:	3501      	adds	r5, #1
 800bd7a:	615e      	str	r6, [r3, #20]
 800bd7c:	6125      	str	r5, [r4, #16]
 800bd7e:	4620      	mov	r0, r4
 800bd80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd84:	0800d11b 	.word	0x0800d11b
 800bd88:	0800d12c 	.word	0x0800d12c

0800bd8c <__hi0bits>:
 800bd8c:	0c03      	lsrs	r3, r0, #16
 800bd8e:	041b      	lsls	r3, r3, #16
 800bd90:	b9d3      	cbnz	r3, 800bdc8 <__hi0bits+0x3c>
 800bd92:	0400      	lsls	r0, r0, #16
 800bd94:	2310      	movs	r3, #16
 800bd96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bd9a:	bf04      	itt	eq
 800bd9c:	0200      	lsleq	r0, r0, #8
 800bd9e:	3308      	addeq	r3, #8
 800bda0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bda4:	bf04      	itt	eq
 800bda6:	0100      	lsleq	r0, r0, #4
 800bda8:	3304      	addeq	r3, #4
 800bdaa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bdae:	bf04      	itt	eq
 800bdb0:	0080      	lsleq	r0, r0, #2
 800bdb2:	3302      	addeq	r3, #2
 800bdb4:	2800      	cmp	r0, #0
 800bdb6:	db05      	blt.n	800bdc4 <__hi0bits+0x38>
 800bdb8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bdbc:	f103 0301 	add.w	r3, r3, #1
 800bdc0:	bf08      	it	eq
 800bdc2:	2320      	moveq	r3, #32
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	4770      	bx	lr
 800bdc8:	2300      	movs	r3, #0
 800bdca:	e7e4      	b.n	800bd96 <__hi0bits+0xa>

0800bdcc <__lo0bits>:
 800bdcc:	6803      	ldr	r3, [r0, #0]
 800bdce:	f013 0207 	ands.w	r2, r3, #7
 800bdd2:	d00c      	beq.n	800bdee <__lo0bits+0x22>
 800bdd4:	07d9      	lsls	r1, r3, #31
 800bdd6:	d422      	bmi.n	800be1e <__lo0bits+0x52>
 800bdd8:	079a      	lsls	r2, r3, #30
 800bdda:	bf49      	itett	mi
 800bddc:	085b      	lsrmi	r3, r3, #1
 800bdde:	089b      	lsrpl	r3, r3, #2
 800bde0:	6003      	strmi	r3, [r0, #0]
 800bde2:	2201      	movmi	r2, #1
 800bde4:	bf5c      	itt	pl
 800bde6:	6003      	strpl	r3, [r0, #0]
 800bde8:	2202      	movpl	r2, #2
 800bdea:	4610      	mov	r0, r2
 800bdec:	4770      	bx	lr
 800bdee:	b299      	uxth	r1, r3
 800bdf0:	b909      	cbnz	r1, 800bdf6 <__lo0bits+0x2a>
 800bdf2:	0c1b      	lsrs	r3, r3, #16
 800bdf4:	2210      	movs	r2, #16
 800bdf6:	b2d9      	uxtb	r1, r3
 800bdf8:	b909      	cbnz	r1, 800bdfe <__lo0bits+0x32>
 800bdfa:	3208      	adds	r2, #8
 800bdfc:	0a1b      	lsrs	r3, r3, #8
 800bdfe:	0719      	lsls	r1, r3, #28
 800be00:	bf04      	itt	eq
 800be02:	091b      	lsreq	r3, r3, #4
 800be04:	3204      	addeq	r2, #4
 800be06:	0799      	lsls	r1, r3, #30
 800be08:	bf04      	itt	eq
 800be0a:	089b      	lsreq	r3, r3, #2
 800be0c:	3202      	addeq	r2, #2
 800be0e:	07d9      	lsls	r1, r3, #31
 800be10:	d403      	bmi.n	800be1a <__lo0bits+0x4e>
 800be12:	085b      	lsrs	r3, r3, #1
 800be14:	f102 0201 	add.w	r2, r2, #1
 800be18:	d003      	beq.n	800be22 <__lo0bits+0x56>
 800be1a:	6003      	str	r3, [r0, #0]
 800be1c:	e7e5      	b.n	800bdea <__lo0bits+0x1e>
 800be1e:	2200      	movs	r2, #0
 800be20:	e7e3      	b.n	800bdea <__lo0bits+0x1e>
 800be22:	2220      	movs	r2, #32
 800be24:	e7e1      	b.n	800bdea <__lo0bits+0x1e>
	...

0800be28 <__i2b>:
 800be28:	b510      	push	{r4, lr}
 800be2a:	460c      	mov	r4, r1
 800be2c:	2101      	movs	r1, #1
 800be2e:	f7ff ff05 	bl	800bc3c <_Balloc>
 800be32:	4602      	mov	r2, r0
 800be34:	b928      	cbnz	r0, 800be42 <__i2b+0x1a>
 800be36:	4b05      	ldr	r3, [pc, #20]	; (800be4c <__i2b+0x24>)
 800be38:	4805      	ldr	r0, [pc, #20]	; (800be50 <__i2b+0x28>)
 800be3a:	f240 1145 	movw	r1, #325	; 0x145
 800be3e:	f7fe ff63 	bl	800ad08 <__assert_func>
 800be42:	2301      	movs	r3, #1
 800be44:	6144      	str	r4, [r0, #20]
 800be46:	6103      	str	r3, [r0, #16]
 800be48:	bd10      	pop	{r4, pc}
 800be4a:	bf00      	nop
 800be4c:	0800d11b 	.word	0x0800d11b
 800be50:	0800d12c 	.word	0x0800d12c

0800be54 <__multiply>:
 800be54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be58:	4691      	mov	r9, r2
 800be5a:	690a      	ldr	r2, [r1, #16]
 800be5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800be60:	429a      	cmp	r2, r3
 800be62:	bfb8      	it	lt
 800be64:	460b      	movlt	r3, r1
 800be66:	460c      	mov	r4, r1
 800be68:	bfbc      	itt	lt
 800be6a:	464c      	movlt	r4, r9
 800be6c:	4699      	movlt	r9, r3
 800be6e:	6927      	ldr	r7, [r4, #16]
 800be70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800be74:	68a3      	ldr	r3, [r4, #8]
 800be76:	6861      	ldr	r1, [r4, #4]
 800be78:	eb07 060a 	add.w	r6, r7, sl
 800be7c:	42b3      	cmp	r3, r6
 800be7e:	b085      	sub	sp, #20
 800be80:	bfb8      	it	lt
 800be82:	3101      	addlt	r1, #1
 800be84:	f7ff feda 	bl	800bc3c <_Balloc>
 800be88:	b930      	cbnz	r0, 800be98 <__multiply+0x44>
 800be8a:	4602      	mov	r2, r0
 800be8c:	4b44      	ldr	r3, [pc, #272]	; (800bfa0 <__multiply+0x14c>)
 800be8e:	4845      	ldr	r0, [pc, #276]	; (800bfa4 <__multiply+0x150>)
 800be90:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800be94:	f7fe ff38 	bl	800ad08 <__assert_func>
 800be98:	f100 0514 	add.w	r5, r0, #20
 800be9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bea0:	462b      	mov	r3, r5
 800bea2:	2200      	movs	r2, #0
 800bea4:	4543      	cmp	r3, r8
 800bea6:	d321      	bcc.n	800beec <__multiply+0x98>
 800bea8:	f104 0314 	add.w	r3, r4, #20
 800beac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800beb0:	f109 0314 	add.w	r3, r9, #20
 800beb4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800beb8:	9202      	str	r2, [sp, #8]
 800beba:	1b3a      	subs	r2, r7, r4
 800bebc:	3a15      	subs	r2, #21
 800bebe:	f022 0203 	bic.w	r2, r2, #3
 800bec2:	3204      	adds	r2, #4
 800bec4:	f104 0115 	add.w	r1, r4, #21
 800bec8:	428f      	cmp	r7, r1
 800beca:	bf38      	it	cc
 800becc:	2204      	movcc	r2, #4
 800bece:	9201      	str	r2, [sp, #4]
 800bed0:	9a02      	ldr	r2, [sp, #8]
 800bed2:	9303      	str	r3, [sp, #12]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d80c      	bhi.n	800bef2 <__multiply+0x9e>
 800bed8:	2e00      	cmp	r6, #0
 800beda:	dd03      	ble.n	800bee4 <__multiply+0x90>
 800bedc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d05b      	beq.n	800bf9c <__multiply+0x148>
 800bee4:	6106      	str	r6, [r0, #16]
 800bee6:	b005      	add	sp, #20
 800bee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beec:	f843 2b04 	str.w	r2, [r3], #4
 800bef0:	e7d8      	b.n	800bea4 <__multiply+0x50>
 800bef2:	f8b3 a000 	ldrh.w	sl, [r3]
 800bef6:	f1ba 0f00 	cmp.w	sl, #0
 800befa:	d024      	beq.n	800bf46 <__multiply+0xf2>
 800befc:	f104 0e14 	add.w	lr, r4, #20
 800bf00:	46a9      	mov	r9, r5
 800bf02:	f04f 0c00 	mov.w	ip, #0
 800bf06:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bf0a:	f8d9 1000 	ldr.w	r1, [r9]
 800bf0e:	fa1f fb82 	uxth.w	fp, r2
 800bf12:	b289      	uxth	r1, r1
 800bf14:	fb0a 110b 	mla	r1, sl, fp, r1
 800bf18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bf1c:	f8d9 2000 	ldr.w	r2, [r9]
 800bf20:	4461      	add	r1, ip
 800bf22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bf26:	fb0a c20b 	mla	r2, sl, fp, ip
 800bf2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bf2e:	b289      	uxth	r1, r1
 800bf30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bf34:	4577      	cmp	r7, lr
 800bf36:	f849 1b04 	str.w	r1, [r9], #4
 800bf3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bf3e:	d8e2      	bhi.n	800bf06 <__multiply+0xb2>
 800bf40:	9a01      	ldr	r2, [sp, #4]
 800bf42:	f845 c002 	str.w	ip, [r5, r2]
 800bf46:	9a03      	ldr	r2, [sp, #12]
 800bf48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bf4c:	3304      	adds	r3, #4
 800bf4e:	f1b9 0f00 	cmp.w	r9, #0
 800bf52:	d021      	beq.n	800bf98 <__multiply+0x144>
 800bf54:	6829      	ldr	r1, [r5, #0]
 800bf56:	f104 0c14 	add.w	ip, r4, #20
 800bf5a:	46ae      	mov	lr, r5
 800bf5c:	f04f 0a00 	mov.w	sl, #0
 800bf60:	f8bc b000 	ldrh.w	fp, [ip]
 800bf64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bf68:	fb09 220b 	mla	r2, r9, fp, r2
 800bf6c:	4452      	add	r2, sl
 800bf6e:	b289      	uxth	r1, r1
 800bf70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bf74:	f84e 1b04 	str.w	r1, [lr], #4
 800bf78:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bf7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bf80:	f8be 1000 	ldrh.w	r1, [lr]
 800bf84:	fb09 110a 	mla	r1, r9, sl, r1
 800bf88:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bf8c:	4567      	cmp	r7, ip
 800bf8e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bf92:	d8e5      	bhi.n	800bf60 <__multiply+0x10c>
 800bf94:	9a01      	ldr	r2, [sp, #4]
 800bf96:	50a9      	str	r1, [r5, r2]
 800bf98:	3504      	adds	r5, #4
 800bf9a:	e799      	b.n	800bed0 <__multiply+0x7c>
 800bf9c:	3e01      	subs	r6, #1
 800bf9e:	e79b      	b.n	800bed8 <__multiply+0x84>
 800bfa0:	0800d11b 	.word	0x0800d11b
 800bfa4:	0800d12c 	.word	0x0800d12c

0800bfa8 <__pow5mult>:
 800bfa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfac:	4615      	mov	r5, r2
 800bfae:	f012 0203 	ands.w	r2, r2, #3
 800bfb2:	4606      	mov	r6, r0
 800bfb4:	460f      	mov	r7, r1
 800bfb6:	d007      	beq.n	800bfc8 <__pow5mult+0x20>
 800bfb8:	4c25      	ldr	r4, [pc, #148]	; (800c050 <__pow5mult+0xa8>)
 800bfba:	3a01      	subs	r2, #1
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bfc2:	f7ff fe9d 	bl	800bd00 <__multadd>
 800bfc6:	4607      	mov	r7, r0
 800bfc8:	10ad      	asrs	r5, r5, #2
 800bfca:	d03d      	beq.n	800c048 <__pow5mult+0xa0>
 800bfcc:	69f4      	ldr	r4, [r6, #28]
 800bfce:	b97c      	cbnz	r4, 800bff0 <__pow5mult+0x48>
 800bfd0:	2010      	movs	r0, #16
 800bfd2:	f7ff fd7f 	bl	800bad4 <malloc>
 800bfd6:	4602      	mov	r2, r0
 800bfd8:	61f0      	str	r0, [r6, #28]
 800bfda:	b928      	cbnz	r0, 800bfe8 <__pow5mult+0x40>
 800bfdc:	4b1d      	ldr	r3, [pc, #116]	; (800c054 <__pow5mult+0xac>)
 800bfde:	481e      	ldr	r0, [pc, #120]	; (800c058 <__pow5mult+0xb0>)
 800bfe0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bfe4:	f7fe fe90 	bl	800ad08 <__assert_func>
 800bfe8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bfec:	6004      	str	r4, [r0, #0]
 800bfee:	60c4      	str	r4, [r0, #12]
 800bff0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bff4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bff8:	b94c      	cbnz	r4, 800c00e <__pow5mult+0x66>
 800bffa:	f240 2171 	movw	r1, #625	; 0x271
 800bffe:	4630      	mov	r0, r6
 800c000:	f7ff ff12 	bl	800be28 <__i2b>
 800c004:	2300      	movs	r3, #0
 800c006:	f8c8 0008 	str.w	r0, [r8, #8]
 800c00a:	4604      	mov	r4, r0
 800c00c:	6003      	str	r3, [r0, #0]
 800c00e:	f04f 0900 	mov.w	r9, #0
 800c012:	07eb      	lsls	r3, r5, #31
 800c014:	d50a      	bpl.n	800c02c <__pow5mult+0x84>
 800c016:	4639      	mov	r1, r7
 800c018:	4622      	mov	r2, r4
 800c01a:	4630      	mov	r0, r6
 800c01c:	f7ff ff1a 	bl	800be54 <__multiply>
 800c020:	4639      	mov	r1, r7
 800c022:	4680      	mov	r8, r0
 800c024:	4630      	mov	r0, r6
 800c026:	f7ff fe49 	bl	800bcbc <_Bfree>
 800c02a:	4647      	mov	r7, r8
 800c02c:	106d      	asrs	r5, r5, #1
 800c02e:	d00b      	beq.n	800c048 <__pow5mult+0xa0>
 800c030:	6820      	ldr	r0, [r4, #0]
 800c032:	b938      	cbnz	r0, 800c044 <__pow5mult+0x9c>
 800c034:	4622      	mov	r2, r4
 800c036:	4621      	mov	r1, r4
 800c038:	4630      	mov	r0, r6
 800c03a:	f7ff ff0b 	bl	800be54 <__multiply>
 800c03e:	6020      	str	r0, [r4, #0]
 800c040:	f8c0 9000 	str.w	r9, [r0]
 800c044:	4604      	mov	r4, r0
 800c046:	e7e4      	b.n	800c012 <__pow5mult+0x6a>
 800c048:	4638      	mov	r0, r7
 800c04a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c04e:	bf00      	nop
 800c050:	0800d278 	.word	0x0800d278
 800c054:	0800d009 	.word	0x0800d009
 800c058:	0800d12c 	.word	0x0800d12c

0800c05c <__lshift>:
 800c05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c060:	460c      	mov	r4, r1
 800c062:	6849      	ldr	r1, [r1, #4]
 800c064:	6923      	ldr	r3, [r4, #16]
 800c066:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c06a:	68a3      	ldr	r3, [r4, #8]
 800c06c:	4607      	mov	r7, r0
 800c06e:	4691      	mov	r9, r2
 800c070:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c074:	f108 0601 	add.w	r6, r8, #1
 800c078:	42b3      	cmp	r3, r6
 800c07a:	db0b      	blt.n	800c094 <__lshift+0x38>
 800c07c:	4638      	mov	r0, r7
 800c07e:	f7ff fddd 	bl	800bc3c <_Balloc>
 800c082:	4605      	mov	r5, r0
 800c084:	b948      	cbnz	r0, 800c09a <__lshift+0x3e>
 800c086:	4602      	mov	r2, r0
 800c088:	4b28      	ldr	r3, [pc, #160]	; (800c12c <__lshift+0xd0>)
 800c08a:	4829      	ldr	r0, [pc, #164]	; (800c130 <__lshift+0xd4>)
 800c08c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c090:	f7fe fe3a 	bl	800ad08 <__assert_func>
 800c094:	3101      	adds	r1, #1
 800c096:	005b      	lsls	r3, r3, #1
 800c098:	e7ee      	b.n	800c078 <__lshift+0x1c>
 800c09a:	2300      	movs	r3, #0
 800c09c:	f100 0114 	add.w	r1, r0, #20
 800c0a0:	f100 0210 	add.w	r2, r0, #16
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	4553      	cmp	r3, sl
 800c0a8:	db33      	blt.n	800c112 <__lshift+0xb6>
 800c0aa:	6920      	ldr	r0, [r4, #16]
 800c0ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c0b0:	f104 0314 	add.w	r3, r4, #20
 800c0b4:	f019 091f 	ands.w	r9, r9, #31
 800c0b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c0bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c0c0:	d02b      	beq.n	800c11a <__lshift+0xbe>
 800c0c2:	f1c9 0e20 	rsb	lr, r9, #32
 800c0c6:	468a      	mov	sl, r1
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	6818      	ldr	r0, [r3, #0]
 800c0cc:	fa00 f009 	lsl.w	r0, r0, r9
 800c0d0:	4310      	orrs	r0, r2
 800c0d2:	f84a 0b04 	str.w	r0, [sl], #4
 800c0d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0da:	459c      	cmp	ip, r3
 800c0dc:	fa22 f20e 	lsr.w	r2, r2, lr
 800c0e0:	d8f3      	bhi.n	800c0ca <__lshift+0x6e>
 800c0e2:	ebac 0304 	sub.w	r3, ip, r4
 800c0e6:	3b15      	subs	r3, #21
 800c0e8:	f023 0303 	bic.w	r3, r3, #3
 800c0ec:	3304      	adds	r3, #4
 800c0ee:	f104 0015 	add.w	r0, r4, #21
 800c0f2:	4584      	cmp	ip, r0
 800c0f4:	bf38      	it	cc
 800c0f6:	2304      	movcc	r3, #4
 800c0f8:	50ca      	str	r2, [r1, r3]
 800c0fa:	b10a      	cbz	r2, 800c100 <__lshift+0xa4>
 800c0fc:	f108 0602 	add.w	r6, r8, #2
 800c100:	3e01      	subs	r6, #1
 800c102:	4638      	mov	r0, r7
 800c104:	612e      	str	r6, [r5, #16]
 800c106:	4621      	mov	r1, r4
 800c108:	f7ff fdd8 	bl	800bcbc <_Bfree>
 800c10c:	4628      	mov	r0, r5
 800c10e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c112:	f842 0f04 	str.w	r0, [r2, #4]!
 800c116:	3301      	adds	r3, #1
 800c118:	e7c5      	b.n	800c0a6 <__lshift+0x4a>
 800c11a:	3904      	subs	r1, #4
 800c11c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c120:	f841 2f04 	str.w	r2, [r1, #4]!
 800c124:	459c      	cmp	ip, r3
 800c126:	d8f9      	bhi.n	800c11c <__lshift+0xc0>
 800c128:	e7ea      	b.n	800c100 <__lshift+0xa4>
 800c12a:	bf00      	nop
 800c12c:	0800d11b 	.word	0x0800d11b
 800c130:	0800d12c 	.word	0x0800d12c

0800c134 <__mcmp>:
 800c134:	b530      	push	{r4, r5, lr}
 800c136:	6902      	ldr	r2, [r0, #16]
 800c138:	690c      	ldr	r4, [r1, #16]
 800c13a:	1b12      	subs	r2, r2, r4
 800c13c:	d10e      	bne.n	800c15c <__mcmp+0x28>
 800c13e:	f100 0314 	add.w	r3, r0, #20
 800c142:	3114      	adds	r1, #20
 800c144:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c148:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c14c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c150:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c154:	42a5      	cmp	r5, r4
 800c156:	d003      	beq.n	800c160 <__mcmp+0x2c>
 800c158:	d305      	bcc.n	800c166 <__mcmp+0x32>
 800c15a:	2201      	movs	r2, #1
 800c15c:	4610      	mov	r0, r2
 800c15e:	bd30      	pop	{r4, r5, pc}
 800c160:	4283      	cmp	r3, r0
 800c162:	d3f3      	bcc.n	800c14c <__mcmp+0x18>
 800c164:	e7fa      	b.n	800c15c <__mcmp+0x28>
 800c166:	f04f 32ff 	mov.w	r2, #4294967295
 800c16a:	e7f7      	b.n	800c15c <__mcmp+0x28>

0800c16c <__mdiff>:
 800c16c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c170:	460c      	mov	r4, r1
 800c172:	4606      	mov	r6, r0
 800c174:	4611      	mov	r1, r2
 800c176:	4620      	mov	r0, r4
 800c178:	4690      	mov	r8, r2
 800c17a:	f7ff ffdb 	bl	800c134 <__mcmp>
 800c17e:	1e05      	subs	r5, r0, #0
 800c180:	d110      	bne.n	800c1a4 <__mdiff+0x38>
 800c182:	4629      	mov	r1, r5
 800c184:	4630      	mov	r0, r6
 800c186:	f7ff fd59 	bl	800bc3c <_Balloc>
 800c18a:	b930      	cbnz	r0, 800c19a <__mdiff+0x2e>
 800c18c:	4b3a      	ldr	r3, [pc, #232]	; (800c278 <__mdiff+0x10c>)
 800c18e:	4602      	mov	r2, r0
 800c190:	f240 2137 	movw	r1, #567	; 0x237
 800c194:	4839      	ldr	r0, [pc, #228]	; (800c27c <__mdiff+0x110>)
 800c196:	f7fe fdb7 	bl	800ad08 <__assert_func>
 800c19a:	2301      	movs	r3, #1
 800c19c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c1a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1a4:	bfa4      	itt	ge
 800c1a6:	4643      	movge	r3, r8
 800c1a8:	46a0      	movge	r8, r4
 800c1aa:	4630      	mov	r0, r6
 800c1ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c1b0:	bfa6      	itte	ge
 800c1b2:	461c      	movge	r4, r3
 800c1b4:	2500      	movge	r5, #0
 800c1b6:	2501      	movlt	r5, #1
 800c1b8:	f7ff fd40 	bl	800bc3c <_Balloc>
 800c1bc:	b920      	cbnz	r0, 800c1c8 <__mdiff+0x5c>
 800c1be:	4b2e      	ldr	r3, [pc, #184]	; (800c278 <__mdiff+0x10c>)
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	f240 2145 	movw	r1, #581	; 0x245
 800c1c6:	e7e5      	b.n	800c194 <__mdiff+0x28>
 800c1c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c1cc:	6926      	ldr	r6, [r4, #16]
 800c1ce:	60c5      	str	r5, [r0, #12]
 800c1d0:	f104 0914 	add.w	r9, r4, #20
 800c1d4:	f108 0514 	add.w	r5, r8, #20
 800c1d8:	f100 0e14 	add.w	lr, r0, #20
 800c1dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c1e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c1e4:	f108 0210 	add.w	r2, r8, #16
 800c1e8:	46f2      	mov	sl, lr
 800c1ea:	2100      	movs	r1, #0
 800c1ec:	f859 3b04 	ldr.w	r3, [r9], #4
 800c1f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c1f4:	fa11 f88b 	uxtah	r8, r1, fp
 800c1f8:	b299      	uxth	r1, r3
 800c1fa:	0c1b      	lsrs	r3, r3, #16
 800c1fc:	eba8 0801 	sub.w	r8, r8, r1
 800c200:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c204:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c208:	fa1f f888 	uxth.w	r8, r8
 800c20c:	1419      	asrs	r1, r3, #16
 800c20e:	454e      	cmp	r6, r9
 800c210:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c214:	f84a 3b04 	str.w	r3, [sl], #4
 800c218:	d8e8      	bhi.n	800c1ec <__mdiff+0x80>
 800c21a:	1b33      	subs	r3, r6, r4
 800c21c:	3b15      	subs	r3, #21
 800c21e:	f023 0303 	bic.w	r3, r3, #3
 800c222:	3304      	adds	r3, #4
 800c224:	3415      	adds	r4, #21
 800c226:	42a6      	cmp	r6, r4
 800c228:	bf38      	it	cc
 800c22a:	2304      	movcc	r3, #4
 800c22c:	441d      	add	r5, r3
 800c22e:	4473      	add	r3, lr
 800c230:	469e      	mov	lr, r3
 800c232:	462e      	mov	r6, r5
 800c234:	4566      	cmp	r6, ip
 800c236:	d30e      	bcc.n	800c256 <__mdiff+0xea>
 800c238:	f10c 0203 	add.w	r2, ip, #3
 800c23c:	1b52      	subs	r2, r2, r5
 800c23e:	f022 0203 	bic.w	r2, r2, #3
 800c242:	3d03      	subs	r5, #3
 800c244:	45ac      	cmp	ip, r5
 800c246:	bf38      	it	cc
 800c248:	2200      	movcc	r2, #0
 800c24a:	4413      	add	r3, r2
 800c24c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c250:	b17a      	cbz	r2, 800c272 <__mdiff+0x106>
 800c252:	6107      	str	r7, [r0, #16]
 800c254:	e7a4      	b.n	800c1a0 <__mdiff+0x34>
 800c256:	f856 8b04 	ldr.w	r8, [r6], #4
 800c25a:	fa11 f288 	uxtah	r2, r1, r8
 800c25e:	1414      	asrs	r4, r2, #16
 800c260:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c264:	b292      	uxth	r2, r2
 800c266:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c26a:	f84e 2b04 	str.w	r2, [lr], #4
 800c26e:	1421      	asrs	r1, r4, #16
 800c270:	e7e0      	b.n	800c234 <__mdiff+0xc8>
 800c272:	3f01      	subs	r7, #1
 800c274:	e7ea      	b.n	800c24c <__mdiff+0xe0>
 800c276:	bf00      	nop
 800c278:	0800d11b 	.word	0x0800d11b
 800c27c:	0800d12c 	.word	0x0800d12c

0800c280 <__d2b>:
 800c280:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c284:	460f      	mov	r7, r1
 800c286:	2101      	movs	r1, #1
 800c288:	ec59 8b10 	vmov	r8, r9, d0
 800c28c:	4616      	mov	r6, r2
 800c28e:	f7ff fcd5 	bl	800bc3c <_Balloc>
 800c292:	4604      	mov	r4, r0
 800c294:	b930      	cbnz	r0, 800c2a4 <__d2b+0x24>
 800c296:	4602      	mov	r2, r0
 800c298:	4b24      	ldr	r3, [pc, #144]	; (800c32c <__d2b+0xac>)
 800c29a:	4825      	ldr	r0, [pc, #148]	; (800c330 <__d2b+0xb0>)
 800c29c:	f240 310f 	movw	r1, #783	; 0x30f
 800c2a0:	f7fe fd32 	bl	800ad08 <__assert_func>
 800c2a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c2a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c2ac:	bb2d      	cbnz	r5, 800c2fa <__d2b+0x7a>
 800c2ae:	9301      	str	r3, [sp, #4]
 800c2b0:	f1b8 0300 	subs.w	r3, r8, #0
 800c2b4:	d026      	beq.n	800c304 <__d2b+0x84>
 800c2b6:	4668      	mov	r0, sp
 800c2b8:	9300      	str	r3, [sp, #0]
 800c2ba:	f7ff fd87 	bl	800bdcc <__lo0bits>
 800c2be:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c2c2:	b1e8      	cbz	r0, 800c300 <__d2b+0x80>
 800c2c4:	f1c0 0320 	rsb	r3, r0, #32
 800c2c8:	fa02 f303 	lsl.w	r3, r2, r3
 800c2cc:	430b      	orrs	r3, r1
 800c2ce:	40c2      	lsrs	r2, r0
 800c2d0:	6163      	str	r3, [r4, #20]
 800c2d2:	9201      	str	r2, [sp, #4]
 800c2d4:	9b01      	ldr	r3, [sp, #4]
 800c2d6:	61a3      	str	r3, [r4, #24]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	bf14      	ite	ne
 800c2dc:	2202      	movne	r2, #2
 800c2de:	2201      	moveq	r2, #1
 800c2e0:	6122      	str	r2, [r4, #16]
 800c2e2:	b1bd      	cbz	r5, 800c314 <__d2b+0x94>
 800c2e4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c2e8:	4405      	add	r5, r0
 800c2ea:	603d      	str	r5, [r7, #0]
 800c2ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c2f0:	6030      	str	r0, [r6, #0]
 800c2f2:	4620      	mov	r0, r4
 800c2f4:	b003      	add	sp, #12
 800c2f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c2fe:	e7d6      	b.n	800c2ae <__d2b+0x2e>
 800c300:	6161      	str	r1, [r4, #20]
 800c302:	e7e7      	b.n	800c2d4 <__d2b+0x54>
 800c304:	a801      	add	r0, sp, #4
 800c306:	f7ff fd61 	bl	800bdcc <__lo0bits>
 800c30a:	9b01      	ldr	r3, [sp, #4]
 800c30c:	6163      	str	r3, [r4, #20]
 800c30e:	3020      	adds	r0, #32
 800c310:	2201      	movs	r2, #1
 800c312:	e7e5      	b.n	800c2e0 <__d2b+0x60>
 800c314:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c318:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c31c:	6038      	str	r0, [r7, #0]
 800c31e:	6918      	ldr	r0, [r3, #16]
 800c320:	f7ff fd34 	bl	800bd8c <__hi0bits>
 800c324:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c328:	e7e2      	b.n	800c2f0 <__d2b+0x70>
 800c32a:	bf00      	nop
 800c32c:	0800d11b 	.word	0x0800d11b
 800c330:	0800d12c 	.word	0x0800d12c

0800c334 <__ssputs_r>:
 800c334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c338:	688e      	ldr	r6, [r1, #8]
 800c33a:	461f      	mov	r7, r3
 800c33c:	42be      	cmp	r6, r7
 800c33e:	680b      	ldr	r3, [r1, #0]
 800c340:	4682      	mov	sl, r0
 800c342:	460c      	mov	r4, r1
 800c344:	4690      	mov	r8, r2
 800c346:	d82c      	bhi.n	800c3a2 <__ssputs_r+0x6e>
 800c348:	898a      	ldrh	r2, [r1, #12]
 800c34a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c34e:	d026      	beq.n	800c39e <__ssputs_r+0x6a>
 800c350:	6965      	ldr	r5, [r4, #20]
 800c352:	6909      	ldr	r1, [r1, #16]
 800c354:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c358:	eba3 0901 	sub.w	r9, r3, r1
 800c35c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c360:	1c7b      	adds	r3, r7, #1
 800c362:	444b      	add	r3, r9
 800c364:	106d      	asrs	r5, r5, #1
 800c366:	429d      	cmp	r5, r3
 800c368:	bf38      	it	cc
 800c36a:	461d      	movcc	r5, r3
 800c36c:	0553      	lsls	r3, r2, #21
 800c36e:	d527      	bpl.n	800c3c0 <__ssputs_r+0x8c>
 800c370:	4629      	mov	r1, r5
 800c372:	f7ff fbd7 	bl	800bb24 <_malloc_r>
 800c376:	4606      	mov	r6, r0
 800c378:	b360      	cbz	r0, 800c3d4 <__ssputs_r+0xa0>
 800c37a:	6921      	ldr	r1, [r4, #16]
 800c37c:	464a      	mov	r2, r9
 800c37e:	f000 fa1b 	bl	800c7b8 <memcpy>
 800c382:	89a3      	ldrh	r3, [r4, #12]
 800c384:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c38c:	81a3      	strh	r3, [r4, #12]
 800c38e:	6126      	str	r6, [r4, #16]
 800c390:	6165      	str	r5, [r4, #20]
 800c392:	444e      	add	r6, r9
 800c394:	eba5 0509 	sub.w	r5, r5, r9
 800c398:	6026      	str	r6, [r4, #0]
 800c39a:	60a5      	str	r5, [r4, #8]
 800c39c:	463e      	mov	r6, r7
 800c39e:	42be      	cmp	r6, r7
 800c3a0:	d900      	bls.n	800c3a4 <__ssputs_r+0x70>
 800c3a2:	463e      	mov	r6, r7
 800c3a4:	6820      	ldr	r0, [r4, #0]
 800c3a6:	4632      	mov	r2, r6
 800c3a8:	4641      	mov	r1, r8
 800c3aa:	f000 f9db 	bl	800c764 <memmove>
 800c3ae:	68a3      	ldr	r3, [r4, #8]
 800c3b0:	1b9b      	subs	r3, r3, r6
 800c3b2:	60a3      	str	r3, [r4, #8]
 800c3b4:	6823      	ldr	r3, [r4, #0]
 800c3b6:	4433      	add	r3, r6
 800c3b8:	6023      	str	r3, [r4, #0]
 800c3ba:	2000      	movs	r0, #0
 800c3bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3c0:	462a      	mov	r2, r5
 800c3c2:	f000 fa36 	bl	800c832 <_realloc_r>
 800c3c6:	4606      	mov	r6, r0
 800c3c8:	2800      	cmp	r0, #0
 800c3ca:	d1e0      	bne.n	800c38e <__ssputs_r+0x5a>
 800c3cc:	6921      	ldr	r1, [r4, #16]
 800c3ce:	4650      	mov	r0, sl
 800c3d0:	f7ff fb34 	bl	800ba3c <_free_r>
 800c3d4:	230c      	movs	r3, #12
 800c3d6:	f8ca 3000 	str.w	r3, [sl]
 800c3da:	89a3      	ldrh	r3, [r4, #12]
 800c3dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3e0:	81a3      	strh	r3, [r4, #12]
 800c3e2:	f04f 30ff 	mov.w	r0, #4294967295
 800c3e6:	e7e9      	b.n	800c3bc <__ssputs_r+0x88>

0800c3e8 <_svfiprintf_r>:
 800c3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ec:	4698      	mov	r8, r3
 800c3ee:	898b      	ldrh	r3, [r1, #12]
 800c3f0:	061b      	lsls	r3, r3, #24
 800c3f2:	b09d      	sub	sp, #116	; 0x74
 800c3f4:	4607      	mov	r7, r0
 800c3f6:	460d      	mov	r5, r1
 800c3f8:	4614      	mov	r4, r2
 800c3fa:	d50e      	bpl.n	800c41a <_svfiprintf_r+0x32>
 800c3fc:	690b      	ldr	r3, [r1, #16]
 800c3fe:	b963      	cbnz	r3, 800c41a <_svfiprintf_r+0x32>
 800c400:	2140      	movs	r1, #64	; 0x40
 800c402:	f7ff fb8f 	bl	800bb24 <_malloc_r>
 800c406:	6028      	str	r0, [r5, #0]
 800c408:	6128      	str	r0, [r5, #16]
 800c40a:	b920      	cbnz	r0, 800c416 <_svfiprintf_r+0x2e>
 800c40c:	230c      	movs	r3, #12
 800c40e:	603b      	str	r3, [r7, #0]
 800c410:	f04f 30ff 	mov.w	r0, #4294967295
 800c414:	e0d0      	b.n	800c5b8 <_svfiprintf_r+0x1d0>
 800c416:	2340      	movs	r3, #64	; 0x40
 800c418:	616b      	str	r3, [r5, #20]
 800c41a:	2300      	movs	r3, #0
 800c41c:	9309      	str	r3, [sp, #36]	; 0x24
 800c41e:	2320      	movs	r3, #32
 800c420:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c424:	f8cd 800c 	str.w	r8, [sp, #12]
 800c428:	2330      	movs	r3, #48	; 0x30
 800c42a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c5d0 <_svfiprintf_r+0x1e8>
 800c42e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c432:	f04f 0901 	mov.w	r9, #1
 800c436:	4623      	mov	r3, r4
 800c438:	469a      	mov	sl, r3
 800c43a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c43e:	b10a      	cbz	r2, 800c444 <_svfiprintf_r+0x5c>
 800c440:	2a25      	cmp	r2, #37	; 0x25
 800c442:	d1f9      	bne.n	800c438 <_svfiprintf_r+0x50>
 800c444:	ebba 0b04 	subs.w	fp, sl, r4
 800c448:	d00b      	beq.n	800c462 <_svfiprintf_r+0x7a>
 800c44a:	465b      	mov	r3, fp
 800c44c:	4622      	mov	r2, r4
 800c44e:	4629      	mov	r1, r5
 800c450:	4638      	mov	r0, r7
 800c452:	f7ff ff6f 	bl	800c334 <__ssputs_r>
 800c456:	3001      	adds	r0, #1
 800c458:	f000 80a9 	beq.w	800c5ae <_svfiprintf_r+0x1c6>
 800c45c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c45e:	445a      	add	r2, fp
 800c460:	9209      	str	r2, [sp, #36]	; 0x24
 800c462:	f89a 3000 	ldrb.w	r3, [sl]
 800c466:	2b00      	cmp	r3, #0
 800c468:	f000 80a1 	beq.w	800c5ae <_svfiprintf_r+0x1c6>
 800c46c:	2300      	movs	r3, #0
 800c46e:	f04f 32ff 	mov.w	r2, #4294967295
 800c472:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c476:	f10a 0a01 	add.w	sl, sl, #1
 800c47a:	9304      	str	r3, [sp, #16]
 800c47c:	9307      	str	r3, [sp, #28]
 800c47e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c482:	931a      	str	r3, [sp, #104]	; 0x68
 800c484:	4654      	mov	r4, sl
 800c486:	2205      	movs	r2, #5
 800c488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c48c:	4850      	ldr	r0, [pc, #320]	; (800c5d0 <_svfiprintf_r+0x1e8>)
 800c48e:	f7f3 fed7 	bl	8000240 <memchr>
 800c492:	9a04      	ldr	r2, [sp, #16]
 800c494:	b9d8      	cbnz	r0, 800c4ce <_svfiprintf_r+0xe6>
 800c496:	06d0      	lsls	r0, r2, #27
 800c498:	bf44      	itt	mi
 800c49a:	2320      	movmi	r3, #32
 800c49c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4a0:	0711      	lsls	r1, r2, #28
 800c4a2:	bf44      	itt	mi
 800c4a4:	232b      	movmi	r3, #43	; 0x2b
 800c4a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4aa:	f89a 3000 	ldrb.w	r3, [sl]
 800c4ae:	2b2a      	cmp	r3, #42	; 0x2a
 800c4b0:	d015      	beq.n	800c4de <_svfiprintf_r+0xf6>
 800c4b2:	9a07      	ldr	r2, [sp, #28]
 800c4b4:	4654      	mov	r4, sl
 800c4b6:	2000      	movs	r0, #0
 800c4b8:	f04f 0c0a 	mov.w	ip, #10
 800c4bc:	4621      	mov	r1, r4
 800c4be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4c2:	3b30      	subs	r3, #48	; 0x30
 800c4c4:	2b09      	cmp	r3, #9
 800c4c6:	d94d      	bls.n	800c564 <_svfiprintf_r+0x17c>
 800c4c8:	b1b0      	cbz	r0, 800c4f8 <_svfiprintf_r+0x110>
 800c4ca:	9207      	str	r2, [sp, #28]
 800c4cc:	e014      	b.n	800c4f8 <_svfiprintf_r+0x110>
 800c4ce:	eba0 0308 	sub.w	r3, r0, r8
 800c4d2:	fa09 f303 	lsl.w	r3, r9, r3
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	9304      	str	r3, [sp, #16]
 800c4da:	46a2      	mov	sl, r4
 800c4dc:	e7d2      	b.n	800c484 <_svfiprintf_r+0x9c>
 800c4de:	9b03      	ldr	r3, [sp, #12]
 800c4e0:	1d19      	adds	r1, r3, #4
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	9103      	str	r1, [sp, #12]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	bfbb      	ittet	lt
 800c4ea:	425b      	neglt	r3, r3
 800c4ec:	f042 0202 	orrlt.w	r2, r2, #2
 800c4f0:	9307      	strge	r3, [sp, #28]
 800c4f2:	9307      	strlt	r3, [sp, #28]
 800c4f4:	bfb8      	it	lt
 800c4f6:	9204      	strlt	r2, [sp, #16]
 800c4f8:	7823      	ldrb	r3, [r4, #0]
 800c4fa:	2b2e      	cmp	r3, #46	; 0x2e
 800c4fc:	d10c      	bne.n	800c518 <_svfiprintf_r+0x130>
 800c4fe:	7863      	ldrb	r3, [r4, #1]
 800c500:	2b2a      	cmp	r3, #42	; 0x2a
 800c502:	d134      	bne.n	800c56e <_svfiprintf_r+0x186>
 800c504:	9b03      	ldr	r3, [sp, #12]
 800c506:	1d1a      	adds	r2, r3, #4
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	9203      	str	r2, [sp, #12]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	bfb8      	it	lt
 800c510:	f04f 33ff 	movlt.w	r3, #4294967295
 800c514:	3402      	adds	r4, #2
 800c516:	9305      	str	r3, [sp, #20]
 800c518:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c5e0 <_svfiprintf_r+0x1f8>
 800c51c:	7821      	ldrb	r1, [r4, #0]
 800c51e:	2203      	movs	r2, #3
 800c520:	4650      	mov	r0, sl
 800c522:	f7f3 fe8d 	bl	8000240 <memchr>
 800c526:	b138      	cbz	r0, 800c538 <_svfiprintf_r+0x150>
 800c528:	9b04      	ldr	r3, [sp, #16]
 800c52a:	eba0 000a 	sub.w	r0, r0, sl
 800c52e:	2240      	movs	r2, #64	; 0x40
 800c530:	4082      	lsls	r2, r0
 800c532:	4313      	orrs	r3, r2
 800c534:	3401      	adds	r4, #1
 800c536:	9304      	str	r3, [sp, #16]
 800c538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c53c:	4825      	ldr	r0, [pc, #148]	; (800c5d4 <_svfiprintf_r+0x1ec>)
 800c53e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c542:	2206      	movs	r2, #6
 800c544:	f7f3 fe7c 	bl	8000240 <memchr>
 800c548:	2800      	cmp	r0, #0
 800c54a:	d038      	beq.n	800c5be <_svfiprintf_r+0x1d6>
 800c54c:	4b22      	ldr	r3, [pc, #136]	; (800c5d8 <_svfiprintf_r+0x1f0>)
 800c54e:	bb1b      	cbnz	r3, 800c598 <_svfiprintf_r+0x1b0>
 800c550:	9b03      	ldr	r3, [sp, #12]
 800c552:	3307      	adds	r3, #7
 800c554:	f023 0307 	bic.w	r3, r3, #7
 800c558:	3308      	adds	r3, #8
 800c55a:	9303      	str	r3, [sp, #12]
 800c55c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c55e:	4433      	add	r3, r6
 800c560:	9309      	str	r3, [sp, #36]	; 0x24
 800c562:	e768      	b.n	800c436 <_svfiprintf_r+0x4e>
 800c564:	fb0c 3202 	mla	r2, ip, r2, r3
 800c568:	460c      	mov	r4, r1
 800c56a:	2001      	movs	r0, #1
 800c56c:	e7a6      	b.n	800c4bc <_svfiprintf_r+0xd4>
 800c56e:	2300      	movs	r3, #0
 800c570:	3401      	adds	r4, #1
 800c572:	9305      	str	r3, [sp, #20]
 800c574:	4619      	mov	r1, r3
 800c576:	f04f 0c0a 	mov.w	ip, #10
 800c57a:	4620      	mov	r0, r4
 800c57c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c580:	3a30      	subs	r2, #48	; 0x30
 800c582:	2a09      	cmp	r2, #9
 800c584:	d903      	bls.n	800c58e <_svfiprintf_r+0x1a6>
 800c586:	2b00      	cmp	r3, #0
 800c588:	d0c6      	beq.n	800c518 <_svfiprintf_r+0x130>
 800c58a:	9105      	str	r1, [sp, #20]
 800c58c:	e7c4      	b.n	800c518 <_svfiprintf_r+0x130>
 800c58e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c592:	4604      	mov	r4, r0
 800c594:	2301      	movs	r3, #1
 800c596:	e7f0      	b.n	800c57a <_svfiprintf_r+0x192>
 800c598:	ab03      	add	r3, sp, #12
 800c59a:	9300      	str	r3, [sp, #0]
 800c59c:	462a      	mov	r2, r5
 800c59e:	4b0f      	ldr	r3, [pc, #60]	; (800c5dc <_svfiprintf_r+0x1f4>)
 800c5a0:	a904      	add	r1, sp, #16
 800c5a2:	4638      	mov	r0, r7
 800c5a4:	f7fd fdc8 	bl	800a138 <_printf_float>
 800c5a8:	1c42      	adds	r2, r0, #1
 800c5aa:	4606      	mov	r6, r0
 800c5ac:	d1d6      	bne.n	800c55c <_svfiprintf_r+0x174>
 800c5ae:	89ab      	ldrh	r3, [r5, #12]
 800c5b0:	065b      	lsls	r3, r3, #25
 800c5b2:	f53f af2d 	bmi.w	800c410 <_svfiprintf_r+0x28>
 800c5b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5b8:	b01d      	add	sp, #116	; 0x74
 800c5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5be:	ab03      	add	r3, sp, #12
 800c5c0:	9300      	str	r3, [sp, #0]
 800c5c2:	462a      	mov	r2, r5
 800c5c4:	4b05      	ldr	r3, [pc, #20]	; (800c5dc <_svfiprintf_r+0x1f4>)
 800c5c6:	a904      	add	r1, sp, #16
 800c5c8:	4638      	mov	r0, r7
 800c5ca:	f7fe f859 	bl	800a680 <_printf_i>
 800c5ce:	e7eb      	b.n	800c5a8 <_svfiprintf_r+0x1c0>
 800c5d0:	0800d284 	.word	0x0800d284
 800c5d4:	0800d28e 	.word	0x0800d28e
 800c5d8:	0800a139 	.word	0x0800a139
 800c5dc:	0800c335 	.word	0x0800c335
 800c5e0:	0800d28a 	.word	0x0800d28a

0800c5e4 <__sflush_r>:
 800c5e4:	898a      	ldrh	r2, [r1, #12]
 800c5e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5ea:	4605      	mov	r5, r0
 800c5ec:	0710      	lsls	r0, r2, #28
 800c5ee:	460c      	mov	r4, r1
 800c5f0:	d458      	bmi.n	800c6a4 <__sflush_r+0xc0>
 800c5f2:	684b      	ldr	r3, [r1, #4]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	dc05      	bgt.n	800c604 <__sflush_r+0x20>
 800c5f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	dc02      	bgt.n	800c604 <__sflush_r+0x20>
 800c5fe:	2000      	movs	r0, #0
 800c600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c604:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c606:	2e00      	cmp	r6, #0
 800c608:	d0f9      	beq.n	800c5fe <__sflush_r+0x1a>
 800c60a:	2300      	movs	r3, #0
 800c60c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c610:	682f      	ldr	r7, [r5, #0]
 800c612:	6a21      	ldr	r1, [r4, #32]
 800c614:	602b      	str	r3, [r5, #0]
 800c616:	d032      	beq.n	800c67e <__sflush_r+0x9a>
 800c618:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c61a:	89a3      	ldrh	r3, [r4, #12]
 800c61c:	075a      	lsls	r2, r3, #29
 800c61e:	d505      	bpl.n	800c62c <__sflush_r+0x48>
 800c620:	6863      	ldr	r3, [r4, #4]
 800c622:	1ac0      	subs	r0, r0, r3
 800c624:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c626:	b10b      	cbz	r3, 800c62c <__sflush_r+0x48>
 800c628:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c62a:	1ac0      	subs	r0, r0, r3
 800c62c:	2300      	movs	r3, #0
 800c62e:	4602      	mov	r2, r0
 800c630:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c632:	6a21      	ldr	r1, [r4, #32]
 800c634:	4628      	mov	r0, r5
 800c636:	47b0      	blx	r6
 800c638:	1c43      	adds	r3, r0, #1
 800c63a:	89a3      	ldrh	r3, [r4, #12]
 800c63c:	d106      	bne.n	800c64c <__sflush_r+0x68>
 800c63e:	6829      	ldr	r1, [r5, #0]
 800c640:	291d      	cmp	r1, #29
 800c642:	d82b      	bhi.n	800c69c <__sflush_r+0xb8>
 800c644:	4a29      	ldr	r2, [pc, #164]	; (800c6ec <__sflush_r+0x108>)
 800c646:	410a      	asrs	r2, r1
 800c648:	07d6      	lsls	r6, r2, #31
 800c64a:	d427      	bmi.n	800c69c <__sflush_r+0xb8>
 800c64c:	2200      	movs	r2, #0
 800c64e:	6062      	str	r2, [r4, #4]
 800c650:	04d9      	lsls	r1, r3, #19
 800c652:	6922      	ldr	r2, [r4, #16]
 800c654:	6022      	str	r2, [r4, #0]
 800c656:	d504      	bpl.n	800c662 <__sflush_r+0x7e>
 800c658:	1c42      	adds	r2, r0, #1
 800c65a:	d101      	bne.n	800c660 <__sflush_r+0x7c>
 800c65c:	682b      	ldr	r3, [r5, #0]
 800c65e:	b903      	cbnz	r3, 800c662 <__sflush_r+0x7e>
 800c660:	6560      	str	r0, [r4, #84]	; 0x54
 800c662:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c664:	602f      	str	r7, [r5, #0]
 800c666:	2900      	cmp	r1, #0
 800c668:	d0c9      	beq.n	800c5fe <__sflush_r+0x1a>
 800c66a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c66e:	4299      	cmp	r1, r3
 800c670:	d002      	beq.n	800c678 <__sflush_r+0x94>
 800c672:	4628      	mov	r0, r5
 800c674:	f7ff f9e2 	bl	800ba3c <_free_r>
 800c678:	2000      	movs	r0, #0
 800c67a:	6360      	str	r0, [r4, #52]	; 0x34
 800c67c:	e7c0      	b.n	800c600 <__sflush_r+0x1c>
 800c67e:	2301      	movs	r3, #1
 800c680:	4628      	mov	r0, r5
 800c682:	47b0      	blx	r6
 800c684:	1c41      	adds	r1, r0, #1
 800c686:	d1c8      	bne.n	800c61a <__sflush_r+0x36>
 800c688:	682b      	ldr	r3, [r5, #0]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d0c5      	beq.n	800c61a <__sflush_r+0x36>
 800c68e:	2b1d      	cmp	r3, #29
 800c690:	d001      	beq.n	800c696 <__sflush_r+0xb2>
 800c692:	2b16      	cmp	r3, #22
 800c694:	d101      	bne.n	800c69a <__sflush_r+0xb6>
 800c696:	602f      	str	r7, [r5, #0]
 800c698:	e7b1      	b.n	800c5fe <__sflush_r+0x1a>
 800c69a:	89a3      	ldrh	r3, [r4, #12]
 800c69c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6a0:	81a3      	strh	r3, [r4, #12]
 800c6a2:	e7ad      	b.n	800c600 <__sflush_r+0x1c>
 800c6a4:	690f      	ldr	r7, [r1, #16]
 800c6a6:	2f00      	cmp	r7, #0
 800c6a8:	d0a9      	beq.n	800c5fe <__sflush_r+0x1a>
 800c6aa:	0793      	lsls	r3, r2, #30
 800c6ac:	680e      	ldr	r6, [r1, #0]
 800c6ae:	bf08      	it	eq
 800c6b0:	694b      	ldreq	r3, [r1, #20]
 800c6b2:	600f      	str	r7, [r1, #0]
 800c6b4:	bf18      	it	ne
 800c6b6:	2300      	movne	r3, #0
 800c6b8:	eba6 0807 	sub.w	r8, r6, r7
 800c6bc:	608b      	str	r3, [r1, #8]
 800c6be:	f1b8 0f00 	cmp.w	r8, #0
 800c6c2:	dd9c      	ble.n	800c5fe <__sflush_r+0x1a>
 800c6c4:	6a21      	ldr	r1, [r4, #32]
 800c6c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c6c8:	4643      	mov	r3, r8
 800c6ca:	463a      	mov	r2, r7
 800c6cc:	4628      	mov	r0, r5
 800c6ce:	47b0      	blx	r6
 800c6d0:	2800      	cmp	r0, #0
 800c6d2:	dc06      	bgt.n	800c6e2 <__sflush_r+0xfe>
 800c6d4:	89a3      	ldrh	r3, [r4, #12]
 800c6d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6da:	81a3      	strh	r3, [r4, #12]
 800c6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c6e0:	e78e      	b.n	800c600 <__sflush_r+0x1c>
 800c6e2:	4407      	add	r7, r0
 800c6e4:	eba8 0800 	sub.w	r8, r8, r0
 800c6e8:	e7e9      	b.n	800c6be <__sflush_r+0xda>
 800c6ea:	bf00      	nop
 800c6ec:	dfbffffe 	.word	0xdfbffffe

0800c6f0 <_fflush_r>:
 800c6f0:	b538      	push	{r3, r4, r5, lr}
 800c6f2:	690b      	ldr	r3, [r1, #16]
 800c6f4:	4605      	mov	r5, r0
 800c6f6:	460c      	mov	r4, r1
 800c6f8:	b913      	cbnz	r3, 800c700 <_fflush_r+0x10>
 800c6fa:	2500      	movs	r5, #0
 800c6fc:	4628      	mov	r0, r5
 800c6fe:	bd38      	pop	{r3, r4, r5, pc}
 800c700:	b118      	cbz	r0, 800c70a <_fflush_r+0x1a>
 800c702:	6a03      	ldr	r3, [r0, #32]
 800c704:	b90b      	cbnz	r3, 800c70a <_fflush_r+0x1a>
 800c706:	f7fe f957 	bl	800a9b8 <__sinit>
 800c70a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d0f3      	beq.n	800c6fa <_fflush_r+0xa>
 800c712:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c714:	07d0      	lsls	r0, r2, #31
 800c716:	d404      	bmi.n	800c722 <_fflush_r+0x32>
 800c718:	0599      	lsls	r1, r3, #22
 800c71a:	d402      	bmi.n	800c722 <_fflush_r+0x32>
 800c71c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c71e:	f7fe faf1 	bl	800ad04 <__retarget_lock_acquire_recursive>
 800c722:	4628      	mov	r0, r5
 800c724:	4621      	mov	r1, r4
 800c726:	f7ff ff5d 	bl	800c5e4 <__sflush_r>
 800c72a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c72c:	07da      	lsls	r2, r3, #31
 800c72e:	4605      	mov	r5, r0
 800c730:	d4e4      	bmi.n	800c6fc <_fflush_r+0xc>
 800c732:	89a3      	ldrh	r3, [r4, #12]
 800c734:	059b      	lsls	r3, r3, #22
 800c736:	d4e1      	bmi.n	800c6fc <_fflush_r+0xc>
 800c738:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c73a:	f7fe fae4 	bl	800ad06 <__retarget_lock_release_recursive>
 800c73e:	e7dd      	b.n	800c6fc <_fflush_r+0xc>

0800c740 <fiprintf>:
 800c740:	b40e      	push	{r1, r2, r3}
 800c742:	b503      	push	{r0, r1, lr}
 800c744:	4601      	mov	r1, r0
 800c746:	ab03      	add	r3, sp, #12
 800c748:	4805      	ldr	r0, [pc, #20]	; (800c760 <fiprintf+0x20>)
 800c74a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c74e:	6800      	ldr	r0, [r0, #0]
 800c750:	9301      	str	r3, [sp, #4]
 800c752:	f000 f8d3 	bl	800c8fc <_vfiprintf_r>
 800c756:	b002      	add	sp, #8
 800c758:	f85d eb04 	ldr.w	lr, [sp], #4
 800c75c:	b003      	add	sp, #12
 800c75e:	4770      	bx	lr
 800c760:	20000120 	.word	0x20000120

0800c764 <memmove>:
 800c764:	4288      	cmp	r0, r1
 800c766:	b510      	push	{r4, lr}
 800c768:	eb01 0402 	add.w	r4, r1, r2
 800c76c:	d902      	bls.n	800c774 <memmove+0x10>
 800c76e:	4284      	cmp	r4, r0
 800c770:	4623      	mov	r3, r4
 800c772:	d807      	bhi.n	800c784 <memmove+0x20>
 800c774:	1e43      	subs	r3, r0, #1
 800c776:	42a1      	cmp	r1, r4
 800c778:	d008      	beq.n	800c78c <memmove+0x28>
 800c77a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c77e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c782:	e7f8      	b.n	800c776 <memmove+0x12>
 800c784:	4402      	add	r2, r0
 800c786:	4601      	mov	r1, r0
 800c788:	428a      	cmp	r2, r1
 800c78a:	d100      	bne.n	800c78e <memmove+0x2a>
 800c78c:	bd10      	pop	{r4, pc}
 800c78e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c792:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c796:	e7f7      	b.n	800c788 <memmove+0x24>

0800c798 <_sbrk_r>:
 800c798:	b538      	push	{r3, r4, r5, lr}
 800c79a:	4d06      	ldr	r5, [pc, #24]	; (800c7b4 <_sbrk_r+0x1c>)
 800c79c:	2300      	movs	r3, #0
 800c79e:	4604      	mov	r4, r0
 800c7a0:	4608      	mov	r0, r1
 800c7a2:	602b      	str	r3, [r5, #0]
 800c7a4:	f7f5 f940 	bl	8001a28 <_sbrk>
 800c7a8:	1c43      	adds	r3, r0, #1
 800c7aa:	d102      	bne.n	800c7b2 <_sbrk_r+0x1a>
 800c7ac:	682b      	ldr	r3, [r5, #0]
 800c7ae:	b103      	cbz	r3, 800c7b2 <_sbrk_r+0x1a>
 800c7b0:	6023      	str	r3, [r4, #0]
 800c7b2:	bd38      	pop	{r3, r4, r5, pc}
 800c7b4:	200007f4 	.word	0x200007f4

0800c7b8 <memcpy>:
 800c7b8:	440a      	add	r2, r1
 800c7ba:	4291      	cmp	r1, r2
 800c7bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c7c0:	d100      	bne.n	800c7c4 <memcpy+0xc>
 800c7c2:	4770      	bx	lr
 800c7c4:	b510      	push	{r4, lr}
 800c7c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7ce:	4291      	cmp	r1, r2
 800c7d0:	d1f9      	bne.n	800c7c6 <memcpy+0xe>
 800c7d2:	bd10      	pop	{r4, pc}

0800c7d4 <abort>:
 800c7d4:	b508      	push	{r3, lr}
 800c7d6:	2006      	movs	r0, #6
 800c7d8:	f000 fa68 	bl	800ccac <raise>
 800c7dc:	2001      	movs	r0, #1
 800c7de:	f7f5 f8ab 	bl	8001938 <_exit>

0800c7e2 <_calloc_r>:
 800c7e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c7e4:	fba1 2402 	umull	r2, r4, r1, r2
 800c7e8:	b94c      	cbnz	r4, 800c7fe <_calloc_r+0x1c>
 800c7ea:	4611      	mov	r1, r2
 800c7ec:	9201      	str	r2, [sp, #4]
 800c7ee:	f7ff f999 	bl	800bb24 <_malloc_r>
 800c7f2:	9a01      	ldr	r2, [sp, #4]
 800c7f4:	4605      	mov	r5, r0
 800c7f6:	b930      	cbnz	r0, 800c806 <_calloc_r+0x24>
 800c7f8:	4628      	mov	r0, r5
 800c7fa:	b003      	add	sp, #12
 800c7fc:	bd30      	pop	{r4, r5, pc}
 800c7fe:	220c      	movs	r2, #12
 800c800:	6002      	str	r2, [r0, #0]
 800c802:	2500      	movs	r5, #0
 800c804:	e7f8      	b.n	800c7f8 <_calloc_r+0x16>
 800c806:	4621      	mov	r1, r4
 800c808:	f7fe f9a3 	bl	800ab52 <memset>
 800c80c:	e7f4      	b.n	800c7f8 <_calloc_r+0x16>

0800c80e <__ascii_mbtowc>:
 800c80e:	b082      	sub	sp, #8
 800c810:	b901      	cbnz	r1, 800c814 <__ascii_mbtowc+0x6>
 800c812:	a901      	add	r1, sp, #4
 800c814:	b142      	cbz	r2, 800c828 <__ascii_mbtowc+0x1a>
 800c816:	b14b      	cbz	r3, 800c82c <__ascii_mbtowc+0x1e>
 800c818:	7813      	ldrb	r3, [r2, #0]
 800c81a:	600b      	str	r3, [r1, #0]
 800c81c:	7812      	ldrb	r2, [r2, #0]
 800c81e:	1e10      	subs	r0, r2, #0
 800c820:	bf18      	it	ne
 800c822:	2001      	movne	r0, #1
 800c824:	b002      	add	sp, #8
 800c826:	4770      	bx	lr
 800c828:	4610      	mov	r0, r2
 800c82a:	e7fb      	b.n	800c824 <__ascii_mbtowc+0x16>
 800c82c:	f06f 0001 	mvn.w	r0, #1
 800c830:	e7f8      	b.n	800c824 <__ascii_mbtowc+0x16>

0800c832 <_realloc_r>:
 800c832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c836:	4680      	mov	r8, r0
 800c838:	4614      	mov	r4, r2
 800c83a:	460e      	mov	r6, r1
 800c83c:	b921      	cbnz	r1, 800c848 <_realloc_r+0x16>
 800c83e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c842:	4611      	mov	r1, r2
 800c844:	f7ff b96e 	b.w	800bb24 <_malloc_r>
 800c848:	b92a      	cbnz	r2, 800c856 <_realloc_r+0x24>
 800c84a:	f7ff f8f7 	bl	800ba3c <_free_r>
 800c84e:	4625      	mov	r5, r4
 800c850:	4628      	mov	r0, r5
 800c852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c856:	f000 fa45 	bl	800cce4 <_malloc_usable_size_r>
 800c85a:	4284      	cmp	r4, r0
 800c85c:	4607      	mov	r7, r0
 800c85e:	d802      	bhi.n	800c866 <_realloc_r+0x34>
 800c860:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c864:	d812      	bhi.n	800c88c <_realloc_r+0x5a>
 800c866:	4621      	mov	r1, r4
 800c868:	4640      	mov	r0, r8
 800c86a:	f7ff f95b 	bl	800bb24 <_malloc_r>
 800c86e:	4605      	mov	r5, r0
 800c870:	2800      	cmp	r0, #0
 800c872:	d0ed      	beq.n	800c850 <_realloc_r+0x1e>
 800c874:	42bc      	cmp	r4, r7
 800c876:	4622      	mov	r2, r4
 800c878:	4631      	mov	r1, r6
 800c87a:	bf28      	it	cs
 800c87c:	463a      	movcs	r2, r7
 800c87e:	f7ff ff9b 	bl	800c7b8 <memcpy>
 800c882:	4631      	mov	r1, r6
 800c884:	4640      	mov	r0, r8
 800c886:	f7ff f8d9 	bl	800ba3c <_free_r>
 800c88a:	e7e1      	b.n	800c850 <_realloc_r+0x1e>
 800c88c:	4635      	mov	r5, r6
 800c88e:	e7df      	b.n	800c850 <_realloc_r+0x1e>

0800c890 <__ascii_wctomb>:
 800c890:	b149      	cbz	r1, 800c8a6 <__ascii_wctomb+0x16>
 800c892:	2aff      	cmp	r2, #255	; 0xff
 800c894:	bf85      	ittet	hi
 800c896:	238a      	movhi	r3, #138	; 0x8a
 800c898:	6003      	strhi	r3, [r0, #0]
 800c89a:	700a      	strbls	r2, [r1, #0]
 800c89c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c8a0:	bf98      	it	ls
 800c8a2:	2001      	movls	r0, #1
 800c8a4:	4770      	bx	lr
 800c8a6:	4608      	mov	r0, r1
 800c8a8:	4770      	bx	lr

0800c8aa <__sfputc_r>:
 800c8aa:	6893      	ldr	r3, [r2, #8]
 800c8ac:	3b01      	subs	r3, #1
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	b410      	push	{r4}
 800c8b2:	6093      	str	r3, [r2, #8]
 800c8b4:	da08      	bge.n	800c8c8 <__sfputc_r+0x1e>
 800c8b6:	6994      	ldr	r4, [r2, #24]
 800c8b8:	42a3      	cmp	r3, r4
 800c8ba:	db01      	blt.n	800c8c0 <__sfputc_r+0x16>
 800c8bc:	290a      	cmp	r1, #10
 800c8be:	d103      	bne.n	800c8c8 <__sfputc_r+0x1e>
 800c8c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8c4:	f000 b934 	b.w	800cb30 <__swbuf_r>
 800c8c8:	6813      	ldr	r3, [r2, #0]
 800c8ca:	1c58      	adds	r0, r3, #1
 800c8cc:	6010      	str	r0, [r2, #0]
 800c8ce:	7019      	strb	r1, [r3, #0]
 800c8d0:	4608      	mov	r0, r1
 800c8d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8d6:	4770      	bx	lr

0800c8d8 <__sfputs_r>:
 800c8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8da:	4606      	mov	r6, r0
 800c8dc:	460f      	mov	r7, r1
 800c8de:	4614      	mov	r4, r2
 800c8e0:	18d5      	adds	r5, r2, r3
 800c8e2:	42ac      	cmp	r4, r5
 800c8e4:	d101      	bne.n	800c8ea <__sfputs_r+0x12>
 800c8e6:	2000      	movs	r0, #0
 800c8e8:	e007      	b.n	800c8fa <__sfputs_r+0x22>
 800c8ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8ee:	463a      	mov	r2, r7
 800c8f0:	4630      	mov	r0, r6
 800c8f2:	f7ff ffda 	bl	800c8aa <__sfputc_r>
 800c8f6:	1c43      	adds	r3, r0, #1
 800c8f8:	d1f3      	bne.n	800c8e2 <__sfputs_r+0xa>
 800c8fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c8fc <_vfiprintf_r>:
 800c8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c900:	460d      	mov	r5, r1
 800c902:	b09d      	sub	sp, #116	; 0x74
 800c904:	4614      	mov	r4, r2
 800c906:	4698      	mov	r8, r3
 800c908:	4606      	mov	r6, r0
 800c90a:	b118      	cbz	r0, 800c914 <_vfiprintf_r+0x18>
 800c90c:	6a03      	ldr	r3, [r0, #32]
 800c90e:	b90b      	cbnz	r3, 800c914 <_vfiprintf_r+0x18>
 800c910:	f7fe f852 	bl	800a9b8 <__sinit>
 800c914:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c916:	07d9      	lsls	r1, r3, #31
 800c918:	d405      	bmi.n	800c926 <_vfiprintf_r+0x2a>
 800c91a:	89ab      	ldrh	r3, [r5, #12]
 800c91c:	059a      	lsls	r2, r3, #22
 800c91e:	d402      	bmi.n	800c926 <_vfiprintf_r+0x2a>
 800c920:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c922:	f7fe f9ef 	bl	800ad04 <__retarget_lock_acquire_recursive>
 800c926:	89ab      	ldrh	r3, [r5, #12]
 800c928:	071b      	lsls	r3, r3, #28
 800c92a:	d501      	bpl.n	800c930 <_vfiprintf_r+0x34>
 800c92c:	692b      	ldr	r3, [r5, #16]
 800c92e:	b99b      	cbnz	r3, 800c958 <_vfiprintf_r+0x5c>
 800c930:	4629      	mov	r1, r5
 800c932:	4630      	mov	r0, r6
 800c934:	f000 f93a 	bl	800cbac <__swsetup_r>
 800c938:	b170      	cbz	r0, 800c958 <_vfiprintf_r+0x5c>
 800c93a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c93c:	07dc      	lsls	r4, r3, #31
 800c93e:	d504      	bpl.n	800c94a <_vfiprintf_r+0x4e>
 800c940:	f04f 30ff 	mov.w	r0, #4294967295
 800c944:	b01d      	add	sp, #116	; 0x74
 800c946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c94a:	89ab      	ldrh	r3, [r5, #12]
 800c94c:	0598      	lsls	r0, r3, #22
 800c94e:	d4f7      	bmi.n	800c940 <_vfiprintf_r+0x44>
 800c950:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c952:	f7fe f9d8 	bl	800ad06 <__retarget_lock_release_recursive>
 800c956:	e7f3      	b.n	800c940 <_vfiprintf_r+0x44>
 800c958:	2300      	movs	r3, #0
 800c95a:	9309      	str	r3, [sp, #36]	; 0x24
 800c95c:	2320      	movs	r3, #32
 800c95e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c962:	f8cd 800c 	str.w	r8, [sp, #12]
 800c966:	2330      	movs	r3, #48	; 0x30
 800c968:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cb1c <_vfiprintf_r+0x220>
 800c96c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c970:	f04f 0901 	mov.w	r9, #1
 800c974:	4623      	mov	r3, r4
 800c976:	469a      	mov	sl, r3
 800c978:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c97c:	b10a      	cbz	r2, 800c982 <_vfiprintf_r+0x86>
 800c97e:	2a25      	cmp	r2, #37	; 0x25
 800c980:	d1f9      	bne.n	800c976 <_vfiprintf_r+0x7a>
 800c982:	ebba 0b04 	subs.w	fp, sl, r4
 800c986:	d00b      	beq.n	800c9a0 <_vfiprintf_r+0xa4>
 800c988:	465b      	mov	r3, fp
 800c98a:	4622      	mov	r2, r4
 800c98c:	4629      	mov	r1, r5
 800c98e:	4630      	mov	r0, r6
 800c990:	f7ff ffa2 	bl	800c8d8 <__sfputs_r>
 800c994:	3001      	adds	r0, #1
 800c996:	f000 80a9 	beq.w	800caec <_vfiprintf_r+0x1f0>
 800c99a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c99c:	445a      	add	r2, fp
 800c99e:	9209      	str	r2, [sp, #36]	; 0x24
 800c9a0:	f89a 3000 	ldrb.w	r3, [sl]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	f000 80a1 	beq.w	800caec <_vfiprintf_r+0x1f0>
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	f04f 32ff 	mov.w	r2, #4294967295
 800c9b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9b4:	f10a 0a01 	add.w	sl, sl, #1
 800c9b8:	9304      	str	r3, [sp, #16]
 800c9ba:	9307      	str	r3, [sp, #28]
 800c9bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9c0:	931a      	str	r3, [sp, #104]	; 0x68
 800c9c2:	4654      	mov	r4, sl
 800c9c4:	2205      	movs	r2, #5
 800c9c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9ca:	4854      	ldr	r0, [pc, #336]	; (800cb1c <_vfiprintf_r+0x220>)
 800c9cc:	f7f3 fc38 	bl	8000240 <memchr>
 800c9d0:	9a04      	ldr	r2, [sp, #16]
 800c9d2:	b9d8      	cbnz	r0, 800ca0c <_vfiprintf_r+0x110>
 800c9d4:	06d1      	lsls	r1, r2, #27
 800c9d6:	bf44      	itt	mi
 800c9d8:	2320      	movmi	r3, #32
 800c9da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9de:	0713      	lsls	r3, r2, #28
 800c9e0:	bf44      	itt	mi
 800c9e2:	232b      	movmi	r3, #43	; 0x2b
 800c9e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9e8:	f89a 3000 	ldrb.w	r3, [sl]
 800c9ec:	2b2a      	cmp	r3, #42	; 0x2a
 800c9ee:	d015      	beq.n	800ca1c <_vfiprintf_r+0x120>
 800c9f0:	9a07      	ldr	r2, [sp, #28]
 800c9f2:	4654      	mov	r4, sl
 800c9f4:	2000      	movs	r0, #0
 800c9f6:	f04f 0c0a 	mov.w	ip, #10
 800c9fa:	4621      	mov	r1, r4
 800c9fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca00:	3b30      	subs	r3, #48	; 0x30
 800ca02:	2b09      	cmp	r3, #9
 800ca04:	d94d      	bls.n	800caa2 <_vfiprintf_r+0x1a6>
 800ca06:	b1b0      	cbz	r0, 800ca36 <_vfiprintf_r+0x13a>
 800ca08:	9207      	str	r2, [sp, #28]
 800ca0a:	e014      	b.n	800ca36 <_vfiprintf_r+0x13a>
 800ca0c:	eba0 0308 	sub.w	r3, r0, r8
 800ca10:	fa09 f303 	lsl.w	r3, r9, r3
 800ca14:	4313      	orrs	r3, r2
 800ca16:	9304      	str	r3, [sp, #16]
 800ca18:	46a2      	mov	sl, r4
 800ca1a:	e7d2      	b.n	800c9c2 <_vfiprintf_r+0xc6>
 800ca1c:	9b03      	ldr	r3, [sp, #12]
 800ca1e:	1d19      	adds	r1, r3, #4
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	9103      	str	r1, [sp, #12]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	bfbb      	ittet	lt
 800ca28:	425b      	neglt	r3, r3
 800ca2a:	f042 0202 	orrlt.w	r2, r2, #2
 800ca2e:	9307      	strge	r3, [sp, #28]
 800ca30:	9307      	strlt	r3, [sp, #28]
 800ca32:	bfb8      	it	lt
 800ca34:	9204      	strlt	r2, [sp, #16]
 800ca36:	7823      	ldrb	r3, [r4, #0]
 800ca38:	2b2e      	cmp	r3, #46	; 0x2e
 800ca3a:	d10c      	bne.n	800ca56 <_vfiprintf_r+0x15a>
 800ca3c:	7863      	ldrb	r3, [r4, #1]
 800ca3e:	2b2a      	cmp	r3, #42	; 0x2a
 800ca40:	d134      	bne.n	800caac <_vfiprintf_r+0x1b0>
 800ca42:	9b03      	ldr	r3, [sp, #12]
 800ca44:	1d1a      	adds	r2, r3, #4
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	9203      	str	r2, [sp, #12]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	bfb8      	it	lt
 800ca4e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca52:	3402      	adds	r4, #2
 800ca54:	9305      	str	r3, [sp, #20]
 800ca56:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cb2c <_vfiprintf_r+0x230>
 800ca5a:	7821      	ldrb	r1, [r4, #0]
 800ca5c:	2203      	movs	r2, #3
 800ca5e:	4650      	mov	r0, sl
 800ca60:	f7f3 fbee 	bl	8000240 <memchr>
 800ca64:	b138      	cbz	r0, 800ca76 <_vfiprintf_r+0x17a>
 800ca66:	9b04      	ldr	r3, [sp, #16]
 800ca68:	eba0 000a 	sub.w	r0, r0, sl
 800ca6c:	2240      	movs	r2, #64	; 0x40
 800ca6e:	4082      	lsls	r2, r0
 800ca70:	4313      	orrs	r3, r2
 800ca72:	3401      	adds	r4, #1
 800ca74:	9304      	str	r3, [sp, #16]
 800ca76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca7a:	4829      	ldr	r0, [pc, #164]	; (800cb20 <_vfiprintf_r+0x224>)
 800ca7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca80:	2206      	movs	r2, #6
 800ca82:	f7f3 fbdd 	bl	8000240 <memchr>
 800ca86:	2800      	cmp	r0, #0
 800ca88:	d03f      	beq.n	800cb0a <_vfiprintf_r+0x20e>
 800ca8a:	4b26      	ldr	r3, [pc, #152]	; (800cb24 <_vfiprintf_r+0x228>)
 800ca8c:	bb1b      	cbnz	r3, 800cad6 <_vfiprintf_r+0x1da>
 800ca8e:	9b03      	ldr	r3, [sp, #12]
 800ca90:	3307      	adds	r3, #7
 800ca92:	f023 0307 	bic.w	r3, r3, #7
 800ca96:	3308      	adds	r3, #8
 800ca98:	9303      	str	r3, [sp, #12]
 800ca9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca9c:	443b      	add	r3, r7
 800ca9e:	9309      	str	r3, [sp, #36]	; 0x24
 800caa0:	e768      	b.n	800c974 <_vfiprintf_r+0x78>
 800caa2:	fb0c 3202 	mla	r2, ip, r2, r3
 800caa6:	460c      	mov	r4, r1
 800caa8:	2001      	movs	r0, #1
 800caaa:	e7a6      	b.n	800c9fa <_vfiprintf_r+0xfe>
 800caac:	2300      	movs	r3, #0
 800caae:	3401      	adds	r4, #1
 800cab0:	9305      	str	r3, [sp, #20]
 800cab2:	4619      	mov	r1, r3
 800cab4:	f04f 0c0a 	mov.w	ip, #10
 800cab8:	4620      	mov	r0, r4
 800caba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cabe:	3a30      	subs	r2, #48	; 0x30
 800cac0:	2a09      	cmp	r2, #9
 800cac2:	d903      	bls.n	800cacc <_vfiprintf_r+0x1d0>
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d0c6      	beq.n	800ca56 <_vfiprintf_r+0x15a>
 800cac8:	9105      	str	r1, [sp, #20]
 800caca:	e7c4      	b.n	800ca56 <_vfiprintf_r+0x15a>
 800cacc:	fb0c 2101 	mla	r1, ip, r1, r2
 800cad0:	4604      	mov	r4, r0
 800cad2:	2301      	movs	r3, #1
 800cad4:	e7f0      	b.n	800cab8 <_vfiprintf_r+0x1bc>
 800cad6:	ab03      	add	r3, sp, #12
 800cad8:	9300      	str	r3, [sp, #0]
 800cada:	462a      	mov	r2, r5
 800cadc:	4b12      	ldr	r3, [pc, #72]	; (800cb28 <_vfiprintf_r+0x22c>)
 800cade:	a904      	add	r1, sp, #16
 800cae0:	4630      	mov	r0, r6
 800cae2:	f7fd fb29 	bl	800a138 <_printf_float>
 800cae6:	4607      	mov	r7, r0
 800cae8:	1c78      	adds	r0, r7, #1
 800caea:	d1d6      	bne.n	800ca9a <_vfiprintf_r+0x19e>
 800caec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800caee:	07d9      	lsls	r1, r3, #31
 800caf0:	d405      	bmi.n	800cafe <_vfiprintf_r+0x202>
 800caf2:	89ab      	ldrh	r3, [r5, #12]
 800caf4:	059a      	lsls	r2, r3, #22
 800caf6:	d402      	bmi.n	800cafe <_vfiprintf_r+0x202>
 800caf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cafa:	f7fe f904 	bl	800ad06 <__retarget_lock_release_recursive>
 800cafe:	89ab      	ldrh	r3, [r5, #12]
 800cb00:	065b      	lsls	r3, r3, #25
 800cb02:	f53f af1d 	bmi.w	800c940 <_vfiprintf_r+0x44>
 800cb06:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb08:	e71c      	b.n	800c944 <_vfiprintf_r+0x48>
 800cb0a:	ab03      	add	r3, sp, #12
 800cb0c:	9300      	str	r3, [sp, #0]
 800cb0e:	462a      	mov	r2, r5
 800cb10:	4b05      	ldr	r3, [pc, #20]	; (800cb28 <_vfiprintf_r+0x22c>)
 800cb12:	a904      	add	r1, sp, #16
 800cb14:	4630      	mov	r0, r6
 800cb16:	f7fd fdb3 	bl	800a680 <_printf_i>
 800cb1a:	e7e4      	b.n	800cae6 <_vfiprintf_r+0x1ea>
 800cb1c:	0800d284 	.word	0x0800d284
 800cb20:	0800d28e 	.word	0x0800d28e
 800cb24:	0800a139 	.word	0x0800a139
 800cb28:	0800c8d9 	.word	0x0800c8d9
 800cb2c:	0800d28a 	.word	0x0800d28a

0800cb30 <__swbuf_r>:
 800cb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb32:	460e      	mov	r6, r1
 800cb34:	4614      	mov	r4, r2
 800cb36:	4605      	mov	r5, r0
 800cb38:	b118      	cbz	r0, 800cb42 <__swbuf_r+0x12>
 800cb3a:	6a03      	ldr	r3, [r0, #32]
 800cb3c:	b90b      	cbnz	r3, 800cb42 <__swbuf_r+0x12>
 800cb3e:	f7fd ff3b 	bl	800a9b8 <__sinit>
 800cb42:	69a3      	ldr	r3, [r4, #24]
 800cb44:	60a3      	str	r3, [r4, #8]
 800cb46:	89a3      	ldrh	r3, [r4, #12]
 800cb48:	071a      	lsls	r2, r3, #28
 800cb4a:	d525      	bpl.n	800cb98 <__swbuf_r+0x68>
 800cb4c:	6923      	ldr	r3, [r4, #16]
 800cb4e:	b31b      	cbz	r3, 800cb98 <__swbuf_r+0x68>
 800cb50:	6823      	ldr	r3, [r4, #0]
 800cb52:	6922      	ldr	r2, [r4, #16]
 800cb54:	1a98      	subs	r0, r3, r2
 800cb56:	6963      	ldr	r3, [r4, #20]
 800cb58:	b2f6      	uxtb	r6, r6
 800cb5a:	4283      	cmp	r3, r0
 800cb5c:	4637      	mov	r7, r6
 800cb5e:	dc04      	bgt.n	800cb6a <__swbuf_r+0x3a>
 800cb60:	4621      	mov	r1, r4
 800cb62:	4628      	mov	r0, r5
 800cb64:	f7ff fdc4 	bl	800c6f0 <_fflush_r>
 800cb68:	b9e0      	cbnz	r0, 800cba4 <__swbuf_r+0x74>
 800cb6a:	68a3      	ldr	r3, [r4, #8]
 800cb6c:	3b01      	subs	r3, #1
 800cb6e:	60a3      	str	r3, [r4, #8]
 800cb70:	6823      	ldr	r3, [r4, #0]
 800cb72:	1c5a      	adds	r2, r3, #1
 800cb74:	6022      	str	r2, [r4, #0]
 800cb76:	701e      	strb	r6, [r3, #0]
 800cb78:	6962      	ldr	r2, [r4, #20]
 800cb7a:	1c43      	adds	r3, r0, #1
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d004      	beq.n	800cb8a <__swbuf_r+0x5a>
 800cb80:	89a3      	ldrh	r3, [r4, #12]
 800cb82:	07db      	lsls	r3, r3, #31
 800cb84:	d506      	bpl.n	800cb94 <__swbuf_r+0x64>
 800cb86:	2e0a      	cmp	r6, #10
 800cb88:	d104      	bne.n	800cb94 <__swbuf_r+0x64>
 800cb8a:	4621      	mov	r1, r4
 800cb8c:	4628      	mov	r0, r5
 800cb8e:	f7ff fdaf 	bl	800c6f0 <_fflush_r>
 800cb92:	b938      	cbnz	r0, 800cba4 <__swbuf_r+0x74>
 800cb94:	4638      	mov	r0, r7
 800cb96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb98:	4621      	mov	r1, r4
 800cb9a:	4628      	mov	r0, r5
 800cb9c:	f000 f806 	bl	800cbac <__swsetup_r>
 800cba0:	2800      	cmp	r0, #0
 800cba2:	d0d5      	beq.n	800cb50 <__swbuf_r+0x20>
 800cba4:	f04f 37ff 	mov.w	r7, #4294967295
 800cba8:	e7f4      	b.n	800cb94 <__swbuf_r+0x64>
	...

0800cbac <__swsetup_r>:
 800cbac:	b538      	push	{r3, r4, r5, lr}
 800cbae:	4b2a      	ldr	r3, [pc, #168]	; (800cc58 <__swsetup_r+0xac>)
 800cbb0:	4605      	mov	r5, r0
 800cbb2:	6818      	ldr	r0, [r3, #0]
 800cbb4:	460c      	mov	r4, r1
 800cbb6:	b118      	cbz	r0, 800cbc0 <__swsetup_r+0x14>
 800cbb8:	6a03      	ldr	r3, [r0, #32]
 800cbba:	b90b      	cbnz	r3, 800cbc0 <__swsetup_r+0x14>
 800cbbc:	f7fd fefc 	bl	800a9b8 <__sinit>
 800cbc0:	89a3      	ldrh	r3, [r4, #12]
 800cbc2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cbc6:	0718      	lsls	r0, r3, #28
 800cbc8:	d422      	bmi.n	800cc10 <__swsetup_r+0x64>
 800cbca:	06d9      	lsls	r1, r3, #27
 800cbcc:	d407      	bmi.n	800cbde <__swsetup_r+0x32>
 800cbce:	2309      	movs	r3, #9
 800cbd0:	602b      	str	r3, [r5, #0]
 800cbd2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cbd6:	81a3      	strh	r3, [r4, #12]
 800cbd8:	f04f 30ff 	mov.w	r0, #4294967295
 800cbdc:	e034      	b.n	800cc48 <__swsetup_r+0x9c>
 800cbde:	0758      	lsls	r0, r3, #29
 800cbe0:	d512      	bpl.n	800cc08 <__swsetup_r+0x5c>
 800cbe2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbe4:	b141      	cbz	r1, 800cbf8 <__swsetup_r+0x4c>
 800cbe6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbea:	4299      	cmp	r1, r3
 800cbec:	d002      	beq.n	800cbf4 <__swsetup_r+0x48>
 800cbee:	4628      	mov	r0, r5
 800cbf0:	f7fe ff24 	bl	800ba3c <_free_r>
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	6363      	str	r3, [r4, #52]	; 0x34
 800cbf8:	89a3      	ldrh	r3, [r4, #12]
 800cbfa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cbfe:	81a3      	strh	r3, [r4, #12]
 800cc00:	2300      	movs	r3, #0
 800cc02:	6063      	str	r3, [r4, #4]
 800cc04:	6923      	ldr	r3, [r4, #16]
 800cc06:	6023      	str	r3, [r4, #0]
 800cc08:	89a3      	ldrh	r3, [r4, #12]
 800cc0a:	f043 0308 	orr.w	r3, r3, #8
 800cc0e:	81a3      	strh	r3, [r4, #12]
 800cc10:	6923      	ldr	r3, [r4, #16]
 800cc12:	b94b      	cbnz	r3, 800cc28 <__swsetup_r+0x7c>
 800cc14:	89a3      	ldrh	r3, [r4, #12]
 800cc16:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cc1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc1e:	d003      	beq.n	800cc28 <__swsetup_r+0x7c>
 800cc20:	4621      	mov	r1, r4
 800cc22:	4628      	mov	r0, r5
 800cc24:	f000 f88c 	bl	800cd40 <__smakebuf_r>
 800cc28:	89a0      	ldrh	r0, [r4, #12]
 800cc2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc2e:	f010 0301 	ands.w	r3, r0, #1
 800cc32:	d00a      	beq.n	800cc4a <__swsetup_r+0x9e>
 800cc34:	2300      	movs	r3, #0
 800cc36:	60a3      	str	r3, [r4, #8]
 800cc38:	6963      	ldr	r3, [r4, #20]
 800cc3a:	425b      	negs	r3, r3
 800cc3c:	61a3      	str	r3, [r4, #24]
 800cc3e:	6923      	ldr	r3, [r4, #16]
 800cc40:	b943      	cbnz	r3, 800cc54 <__swsetup_r+0xa8>
 800cc42:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cc46:	d1c4      	bne.n	800cbd2 <__swsetup_r+0x26>
 800cc48:	bd38      	pop	{r3, r4, r5, pc}
 800cc4a:	0781      	lsls	r1, r0, #30
 800cc4c:	bf58      	it	pl
 800cc4e:	6963      	ldrpl	r3, [r4, #20]
 800cc50:	60a3      	str	r3, [r4, #8]
 800cc52:	e7f4      	b.n	800cc3e <__swsetup_r+0x92>
 800cc54:	2000      	movs	r0, #0
 800cc56:	e7f7      	b.n	800cc48 <__swsetup_r+0x9c>
 800cc58:	20000120 	.word	0x20000120

0800cc5c <_raise_r>:
 800cc5c:	291f      	cmp	r1, #31
 800cc5e:	b538      	push	{r3, r4, r5, lr}
 800cc60:	4604      	mov	r4, r0
 800cc62:	460d      	mov	r5, r1
 800cc64:	d904      	bls.n	800cc70 <_raise_r+0x14>
 800cc66:	2316      	movs	r3, #22
 800cc68:	6003      	str	r3, [r0, #0]
 800cc6a:	f04f 30ff 	mov.w	r0, #4294967295
 800cc6e:	bd38      	pop	{r3, r4, r5, pc}
 800cc70:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cc72:	b112      	cbz	r2, 800cc7a <_raise_r+0x1e>
 800cc74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cc78:	b94b      	cbnz	r3, 800cc8e <_raise_r+0x32>
 800cc7a:	4620      	mov	r0, r4
 800cc7c:	f000 f830 	bl	800cce0 <_getpid_r>
 800cc80:	462a      	mov	r2, r5
 800cc82:	4601      	mov	r1, r0
 800cc84:	4620      	mov	r0, r4
 800cc86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc8a:	f000 b817 	b.w	800ccbc <_kill_r>
 800cc8e:	2b01      	cmp	r3, #1
 800cc90:	d00a      	beq.n	800cca8 <_raise_r+0x4c>
 800cc92:	1c59      	adds	r1, r3, #1
 800cc94:	d103      	bne.n	800cc9e <_raise_r+0x42>
 800cc96:	2316      	movs	r3, #22
 800cc98:	6003      	str	r3, [r0, #0]
 800cc9a:	2001      	movs	r0, #1
 800cc9c:	e7e7      	b.n	800cc6e <_raise_r+0x12>
 800cc9e:	2400      	movs	r4, #0
 800cca0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cca4:	4628      	mov	r0, r5
 800cca6:	4798      	blx	r3
 800cca8:	2000      	movs	r0, #0
 800ccaa:	e7e0      	b.n	800cc6e <_raise_r+0x12>

0800ccac <raise>:
 800ccac:	4b02      	ldr	r3, [pc, #8]	; (800ccb8 <raise+0xc>)
 800ccae:	4601      	mov	r1, r0
 800ccb0:	6818      	ldr	r0, [r3, #0]
 800ccb2:	f7ff bfd3 	b.w	800cc5c <_raise_r>
 800ccb6:	bf00      	nop
 800ccb8:	20000120 	.word	0x20000120

0800ccbc <_kill_r>:
 800ccbc:	b538      	push	{r3, r4, r5, lr}
 800ccbe:	4d07      	ldr	r5, [pc, #28]	; (800ccdc <_kill_r+0x20>)
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	4604      	mov	r4, r0
 800ccc4:	4608      	mov	r0, r1
 800ccc6:	4611      	mov	r1, r2
 800ccc8:	602b      	str	r3, [r5, #0]
 800ccca:	f7f4 fe25 	bl	8001918 <_kill>
 800ccce:	1c43      	adds	r3, r0, #1
 800ccd0:	d102      	bne.n	800ccd8 <_kill_r+0x1c>
 800ccd2:	682b      	ldr	r3, [r5, #0]
 800ccd4:	b103      	cbz	r3, 800ccd8 <_kill_r+0x1c>
 800ccd6:	6023      	str	r3, [r4, #0]
 800ccd8:	bd38      	pop	{r3, r4, r5, pc}
 800ccda:	bf00      	nop
 800ccdc:	200007f4 	.word	0x200007f4

0800cce0 <_getpid_r>:
 800cce0:	f7f4 be12 	b.w	8001908 <_getpid>

0800cce4 <_malloc_usable_size_r>:
 800cce4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cce8:	1f18      	subs	r0, r3, #4
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	bfbc      	itt	lt
 800ccee:	580b      	ldrlt	r3, [r1, r0]
 800ccf0:	18c0      	addlt	r0, r0, r3
 800ccf2:	4770      	bx	lr

0800ccf4 <__swhatbuf_r>:
 800ccf4:	b570      	push	{r4, r5, r6, lr}
 800ccf6:	460c      	mov	r4, r1
 800ccf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccfc:	2900      	cmp	r1, #0
 800ccfe:	b096      	sub	sp, #88	; 0x58
 800cd00:	4615      	mov	r5, r2
 800cd02:	461e      	mov	r6, r3
 800cd04:	da0d      	bge.n	800cd22 <__swhatbuf_r+0x2e>
 800cd06:	89a3      	ldrh	r3, [r4, #12]
 800cd08:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cd0c:	f04f 0100 	mov.w	r1, #0
 800cd10:	bf0c      	ite	eq
 800cd12:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cd16:	2340      	movne	r3, #64	; 0x40
 800cd18:	2000      	movs	r0, #0
 800cd1a:	6031      	str	r1, [r6, #0]
 800cd1c:	602b      	str	r3, [r5, #0]
 800cd1e:	b016      	add	sp, #88	; 0x58
 800cd20:	bd70      	pop	{r4, r5, r6, pc}
 800cd22:	466a      	mov	r2, sp
 800cd24:	f000 f848 	bl	800cdb8 <_fstat_r>
 800cd28:	2800      	cmp	r0, #0
 800cd2a:	dbec      	blt.n	800cd06 <__swhatbuf_r+0x12>
 800cd2c:	9901      	ldr	r1, [sp, #4]
 800cd2e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cd32:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cd36:	4259      	negs	r1, r3
 800cd38:	4159      	adcs	r1, r3
 800cd3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd3e:	e7eb      	b.n	800cd18 <__swhatbuf_r+0x24>

0800cd40 <__smakebuf_r>:
 800cd40:	898b      	ldrh	r3, [r1, #12]
 800cd42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd44:	079d      	lsls	r5, r3, #30
 800cd46:	4606      	mov	r6, r0
 800cd48:	460c      	mov	r4, r1
 800cd4a:	d507      	bpl.n	800cd5c <__smakebuf_r+0x1c>
 800cd4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd50:	6023      	str	r3, [r4, #0]
 800cd52:	6123      	str	r3, [r4, #16]
 800cd54:	2301      	movs	r3, #1
 800cd56:	6163      	str	r3, [r4, #20]
 800cd58:	b002      	add	sp, #8
 800cd5a:	bd70      	pop	{r4, r5, r6, pc}
 800cd5c:	ab01      	add	r3, sp, #4
 800cd5e:	466a      	mov	r2, sp
 800cd60:	f7ff ffc8 	bl	800ccf4 <__swhatbuf_r>
 800cd64:	9900      	ldr	r1, [sp, #0]
 800cd66:	4605      	mov	r5, r0
 800cd68:	4630      	mov	r0, r6
 800cd6a:	f7fe fedb 	bl	800bb24 <_malloc_r>
 800cd6e:	b948      	cbnz	r0, 800cd84 <__smakebuf_r+0x44>
 800cd70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd74:	059a      	lsls	r2, r3, #22
 800cd76:	d4ef      	bmi.n	800cd58 <__smakebuf_r+0x18>
 800cd78:	f023 0303 	bic.w	r3, r3, #3
 800cd7c:	f043 0302 	orr.w	r3, r3, #2
 800cd80:	81a3      	strh	r3, [r4, #12]
 800cd82:	e7e3      	b.n	800cd4c <__smakebuf_r+0xc>
 800cd84:	89a3      	ldrh	r3, [r4, #12]
 800cd86:	6020      	str	r0, [r4, #0]
 800cd88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd8c:	81a3      	strh	r3, [r4, #12]
 800cd8e:	9b00      	ldr	r3, [sp, #0]
 800cd90:	6163      	str	r3, [r4, #20]
 800cd92:	9b01      	ldr	r3, [sp, #4]
 800cd94:	6120      	str	r0, [r4, #16]
 800cd96:	b15b      	cbz	r3, 800cdb0 <__smakebuf_r+0x70>
 800cd98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd9c:	4630      	mov	r0, r6
 800cd9e:	f000 f81d 	bl	800cddc <_isatty_r>
 800cda2:	b128      	cbz	r0, 800cdb0 <__smakebuf_r+0x70>
 800cda4:	89a3      	ldrh	r3, [r4, #12]
 800cda6:	f023 0303 	bic.w	r3, r3, #3
 800cdaa:	f043 0301 	orr.w	r3, r3, #1
 800cdae:	81a3      	strh	r3, [r4, #12]
 800cdb0:	89a3      	ldrh	r3, [r4, #12]
 800cdb2:	431d      	orrs	r5, r3
 800cdb4:	81a5      	strh	r5, [r4, #12]
 800cdb6:	e7cf      	b.n	800cd58 <__smakebuf_r+0x18>

0800cdb8 <_fstat_r>:
 800cdb8:	b538      	push	{r3, r4, r5, lr}
 800cdba:	4d07      	ldr	r5, [pc, #28]	; (800cdd8 <_fstat_r+0x20>)
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	4604      	mov	r4, r0
 800cdc0:	4608      	mov	r0, r1
 800cdc2:	4611      	mov	r1, r2
 800cdc4:	602b      	str	r3, [r5, #0]
 800cdc6:	f7f4 fe06 	bl	80019d6 <_fstat>
 800cdca:	1c43      	adds	r3, r0, #1
 800cdcc:	d102      	bne.n	800cdd4 <_fstat_r+0x1c>
 800cdce:	682b      	ldr	r3, [r5, #0]
 800cdd0:	b103      	cbz	r3, 800cdd4 <_fstat_r+0x1c>
 800cdd2:	6023      	str	r3, [r4, #0]
 800cdd4:	bd38      	pop	{r3, r4, r5, pc}
 800cdd6:	bf00      	nop
 800cdd8:	200007f4 	.word	0x200007f4

0800cddc <_isatty_r>:
 800cddc:	b538      	push	{r3, r4, r5, lr}
 800cdde:	4d06      	ldr	r5, [pc, #24]	; (800cdf8 <_isatty_r+0x1c>)
 800cde0:	2300      	movs	r3, #0
 800cde2:	4604      	mov	r4, r0
 800cde4:	4608      	mov	r0, r1
 800cde6:	602b      	str	r3, [r5, #0]
 800cde8:	f7f4 fe05 	bl	80019f6 <_isatty>
 800cdec:	1c43      	adds	r3, r0, #1
 800cdee:	d102      	bne.n	800cdf6 <_isatty_r+0x1a>
 800cdf0:	682b      	ldr	r3, [r5, #0]
 800cdf2:	b103      	cbz	r3, 800cdf6 <_isatty_r+0x1a>
 800cdf4:	6023      	str	r3, [r4, #0]
 800cdf6:	bd38      	pop	{r3, r4, r5, pc}
 800cdf8:	200007f4 	.word	0x200007f4

0800cdfc <_init>:
 800cdfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdfe:	bf00      	nop
 800ce00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce02:	bc08      	pop	{r3}
 800ce04:	469e      	mov	lr, r3
 800ce06:	4770      	bx	lr

0800ce08 <_fini>:
 800ce08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce0a:	bf00      	nop
 800ce0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce0e:	bc08      	pop	{r3}
 800ce10:	469e      	mov	lr, r3
 800ce12:	4770      	bx	lr
