
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4a4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  0800d688  0800d688  0001d688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db38  0800db38  00020290  2**0
                  CONTENTS
  4 .ARM          00000008  0800db38  0800db38  0001db38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db40  0800db40  00020290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db40  0800db40  0001db40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db44  0800db44  0001db44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  0800db48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d0  20000290  0800ddd8  00020290  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000960  0800ddd8  00020960  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c2e1  00000000  00000000  00020303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003857  00000000  00000000  0003c5e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001668  00000000  00000000  0003fe40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000114f  00000000  00000000  000414a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a464  00000000  00000000  000425f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bc2c  00000000  00000000  0006ca5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00114722  00000000  00000000  00088687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000071b4  00000000  00000000  0019cdac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001a3f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000290 	.word	0x20000290
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d66c 	.word	0x0800d66c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000294 	.word	0x20000294
 800021c:	0800d66c 	.word	0x0800d66c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b970 	b.w	8000fb0 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	460d      	mov	r5, r1
 8000cf0:	4604      	mov	r4, r0
 8000cf2:	460f      	mov	r7, r1
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d14a      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf8:	428a      	cmp	r2, r1
 8000cfa:	4694      	mov	ip, r2
 8000cfc:	d965      	bls.n	8000dca <__udivmoddi4+0xe2>
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	b143      	cbz	r3, 8000d16 <__udivmoddi4+0x2e>
 8000d04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d08:	f1c3 0220 	rsb	r2, r3, #32
 8000d0c:	409f      	lsls	r7, r3
 8000d0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d12:	4317      	orrs	r7, r2
 8000d14:	409c      	lsls	r4, r3
 8000d16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d1a:	fa1f f58c 	uxth.w	r5, ip
 8000d1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d22:	0c22      	lsrs	r2, r4, #16
 8000d24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d2c:	fb01 f005 	mul.w	r0, r1, r5
 8000d30:	4290      	cmp	r0, r2
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x62>
 8000d34:	eb1c 0202 	adds.w	r2, ip, r2
 8000d38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d3c:	f080 811c 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d40:	4290      	cmp	r0, r2
 8000d42:	f240 8119 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d46:	3902      	subs	r1, #2
 8000d48:	4462      	add	r2, ip
 8000d4a:	1a12      	subs	r2, r2, r0
 8000d4c:	b2a4      	uxth	r4, r4
 8000d4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5a:	fb00 f505 	mul.w	r5, r0, r5
 8000d5e:	42a5      	cmp	r5, r4
 8000d60:	d90a      	bls.n	8000d78 <__udivmoddi4+0x90>
 8000d62:	eb1c 0404 	adds.w	r4, ip, r4
 8000d66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6a:	f080 8107 	bcs.w	8000f7c <__udivmoddi4+0x294>
 8000d6e:	42a5      	cmp	r5, r4
 8000d70:	f240 8104 	bls.w	8000f7c <__udivmoddi4+0x294>
 8000d74:	4464      	add	r4, ip
 8000d76:	3802      	subs	r0, #2
 8000d78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d7c:	1b64      	subs	r4, r4, r5
 8000d7e:	2100      	movs	r1, #0
 8000d80:	b11e      	cbz	r6, 8000d8a <__udivmoddi4+0xa2>
 8000d82:	40dc      	lsrs	r4, r3
 8000d84:	2300      	movs	r3, #0
 8000d86:	e9c6 4300 	strd	r4, r3, [r6]
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0xbc>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80ed 	beq.w	8000f72 <__udivmoddi4+0x28a>
 8000d98:	2100      	movs	r1, #0
 8000d9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da4:	fab3 f183 	clz	r1, r3
 8000da8:	2900      	cmp	r1, #0
 8000daa:	d149      	bne.n	8000e40 <__udivmoddi4+0x158>
 8000dac:	42ab      	cmp	r3, r5
 8000dae:	d302      	bcc.n	8000db6 <__udivmoddi4+0xce>
 8000db0:	4282      	cmp	r2, r0
 8000db2:	f200 80f8 	bhi.w	8000fa6 <__udivmoddi4+0x2be>
 8000db6:	1a84      	subs	r4, r0, r2
 8000db8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	4617      	mov	r7, r2
 8000dc0:	2e00      	cmp	r6, #0
 8000dc2:	d0e2      	beq.n	8000d8a <__udivmoddi4+0xa2>
 8000dc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000dc8:	e7df      	b.n	8000d8a <__udivmoddi4+0xa2>
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xe6>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f382 	clz	r3, r2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f040 8090 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dd8:	1a8a      	subs	r2, r1, r2
 8000dda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dde:	fa1f fe8c 	uxth.w	lr, ip
 8000de2:	2101      	movs	r1, #1
 8000de4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000de8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dec:	0c22      	lsrs	r2, r4, #16
 8000dee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000df2:	fb0e f005 	mul.w	r0, lr, r5
 8000df6:	4290      	cmp	r0, r2
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4290      	cmp	r0, r2
 8000e06:	f200 80cb 	bhi.w	8000fa0 <__udivmoddi4+0x2b8>
 8000e0a:	4645      	mov	r5, r8
 8000e0c:	1a12      	subs	r2, r2, r0
 8000e0e:	b2a4      	uxth	r4, r4
 8000e10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e14:	fb07 2210 	mls	r2, r7, r0, r2
 8000e18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e20:	45a6      	cmp	lr, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x14e>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e2c:	d202      	bcs.n	8000e34 <__udivmoddi4+0x14c>
 8000e2e:	45a6      	cmp	lr, r4
 8000e30:	f200 80bb 	bhi.w	8000faa <__udivmoddi4+0x2c2>
 8000e34:	4610      	mov	r0, r2
 8000e36:	eba4 040e 	sub.w	r4, r4, lr
 8000e3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e3e:	e79f      	b.n	8000d80 <__udivmoddi4+0x98>
 8000e40:	f1c1 0720 	rsb	r7, r1, #32
 8000e44:	408b      	lsls	r3, r1
 8000e46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e52:	fa20 f307 	lsr.w	r3, r0, r7
 8000e56:	40fd      	lsrs	r5, r7
 8000e58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e5c:	4323      	orrs	r3, r4
 8000e5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	fb09 5518 	mls	r5, r9, r8, r5
 8000e6a:	0c1c      	lsrs	r4, r3, #16
 8000e6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e70:	fb08 f50e 	mul.w	r5, r8, lr
 8000e74:	42a5      	cmp	r5, r4
 8000e76:	fa02 f201 	lsl.w	r2, r2, r1
 8000e7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e88:	f080 8088 	bcs.w	8000f9c <__udivmoddi4+0x2b4>
 8000e8c:	42a5      	cmp	r5, r4
 8000e8e:	f240 8085 	bls.w	8000f9c <__udivmoddi4+0x2b4>
 8000e92:	f1a8 0802 	sub.w	r8, r8, #2
 8000e96:	4464      	add	r4, ip
 8000e98:	1b64      	subs	r4, r4, r5
 8000e9a:	b29d      	uxth	r5, r3
 8000e9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ea0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ea4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ea8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000eb8:	d26c      	bcs.n	8000f94 <__udivmoddi4+0x2ac>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	d96a      	bls.n	8000f94 <__udivmoddi4+0x2ac>
 8000ebe:	3b02      	subs	r3, #2
 8000ec0:	4464      	add	r4, ip
 8000ec2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ec6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	42ac      	cmp	r4, r5
 8000ed0:	46c8      	mov	r8, r9
 8000ed2:	46ae      	mov	lr, r5
 8000ed4:	d356      	bcc.n	8000f84 <__udivmoddi4+0x29c>
 8000ed6:	d053      	beq.n	8000f80 <__udivmoddi4+0x298>
 8000ed8:	b156      	cbz	r6, 8000ef0 <__udivmoddi4+0x208>
 8000eda:	ebb0 0208 	subs.w	r2, r0, r8
 8000ede:	eb64 040e 	sbc.w	r4, r4, lr
 8000ee2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ee6:	40ca      	lsrs	r2, r1
 8000ee8:	40cc      	lsrs	r4, r1
 8000eea:	4317      	orrs	r7, r2
 8000eec:	e9c6 7400 	strd	r7, r4, [r6]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef8:	f1c3 0120 	rsb	r1, r3, #32
 8000efc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f00:	fa20 f201 	lsr.w	r2, r0, r1
 8000f04:	fa25 f101 	lsr.w	r1, r5, r1
 8000f08:	409d      	lsls	r5, r3
 8000f0a:	432a      	orrs	r2, r5
 8000f0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f10:	fa1f fe8c 	uxth.w	lr, ip
 8000f14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f18:	fb07 1510 	mls	r5, r7, r0, r1
 8000f1c:	0c11      	lsrs	r1, r2, #16
 8000f1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f22:	fb00 f50e 	mul.w	r5, r0, lr
 8000f26:	428d      	cmp	r5, r1
 8000f28:	fa04 f403 	lsl.w	r4, r4, r3
 8000f2c:	d908      	bls.n	8000f40 <__udivmoddi4+0x258>
 8000f2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f36:	d22f      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f38:	428d      	cmp	r5, r1
 8000f3a:	d92d      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	4461      	add	r1, ip
 8000f40:	1b49      	subs	r1, r1, r5
 8000f42:	b292      	uxth	r2, r2
 8000f44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f48:	fb07 1115 	mls	r1, r7, r5, r1
 8000f4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f50:	fb05 f10e 	mul.w	r1, r5, lr
 8000f54:	4291      	cmp	r1, r2
 8000f56:	d908      	bls.n	8000f6a <__udivmoddi4+0x282>
 8000f58:	eb1c 0202 	adds.w	r2, ip, r2
 8000f5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f60:	d216      	bcs.n	8000f90 <__udivmoddi4+0x2a8>
 8000f62:	4291      	cmp	r1, r2
 8000f64:	d914      	bls.n	8000f90 <__udivmoddi4+0x2a8>
 8000f66:	3d02      	subs	r5, #2
 8000f68:	4462      	add	r2, ip
 8000f6a:	1a52      	subs	r2, r2, r1
 8000f6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f70:	e738      	b.n	8000de4 <__udivmoddi4+0xfc>
 8000f72:	4631      	mov	r1, r6
 8000f74:	4630      	mov	r0, r6
 8000f76:	e708      	b.n	8000d8a <__udivmoddi4+0xa2>
 8000f78:	4639      	mov	r1, r7
 8000f7a:	e6e6      	b.n	8000d4a <__udivmoddi4+0x62>
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	e6fb      	b.n	8000d78 <__udivmoddi4+0x90>
 8000f80:	4548      	cmp	r0, r9
 8000f82:	d2a9      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f84:	ebb9 0802 	subs.w	r8, r9, r2
 8000f88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	e7a3      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f90:	4645      	mov	r5, r8
 8000f92:	e7ea      	b.n	8000f6a <__udivmoddi4+0x282>
 8000f94:	462b      	mov	r3, r5
 8000f96:	e794      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f98:	4640      	mov	r0, r8
 8000f9a:	e7d1      	b.n	8000f40 <__udivmoddi4+0x258>
 8000f9c:	46d0      	mov	r8, sl
 8000f9e:	e77b      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000fa0:	3d02      	subs	r5, #2
 8000fa2:	4462      	add	r2, ip
 8000fa4:	e732      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e70a      	b.n	8000dc0 <__udivmoddi4+0xd8>
 8000faa:	4464      	add	r4, ip
 8000fac:	3802      	subs	r0, #2
 8000fae:	e742      	b.n	8000e36 <__udivmoddi4+0x14e>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08c      	sub	sp, #48	; 0x30
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	2220      	movs	r2, #32
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f00a f9f8 	bl	800b3c2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fd2:	4b33      	ldr	r3, [pc, #204]	; (80010a0 <MX_ADC1_Init+0xec>)
 8000fd4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fd8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fda:	4b31      	ldr	r3, [pc, #196]	; (80010a0 <MX_ADC1_Init+0xec>)
 8000fdc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fe0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fe2:	4b2f      	ldr	r3, [pc, #188]	; (80010a0 <MX_ADC1_Init+0xec>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fe8:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <MX_ADC1_Init+0xec>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000fee:	4b2c      	ldr	r3, [pc, #176]	; (80010a0 <MX_ADC1_Init+0xec>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ff4:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <MX_ADC1_Init+0xec>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ffa:	4b29      	ldr	r3, [pc, #164]	; (80010a0 <MX_ADC1_Init+0xec>)
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001000:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <MX_ADC1_Init+0xec>)
 8001002:	2200      	movs	r2, #0
 8001004:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001006:	4b26      	ldr	r3, [pc, #152]	; (80010a0 <MX_ADC1_Init+0xec>)
 8001008:	2200      	movs	r2, #0
 800100a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800100c:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <MX_ADC1_Init+0xec>)
 800100e:	2201      	movs	r2, #1
 8001010:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001012:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <MX_ADC1_Init+0xec>)
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800101a:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <MX_ADC1_Init+0xec>)
 800101c:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8001020:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001022:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <MX_ADC1_Init+0xec>)
 8001024:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001028:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <MX_ADC1_Init+0xec>)
 800102c:	2201      	movs	r2, #1
 800102e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001032:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <MX_ADC1_Init+0xec>)
 8001034:	2200      	movs	r2, #0
 8001036:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001038:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <MX_ADC1_Init+0xec>)
 800103a:	2200      	movs	r2, #0
 800103c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001040:	4817      	ldr	r0, [pc, #92]	; (80010a0 <MX_ADC1_Init+0xec>)
 8001042:	f001 fee3 	bl	8002e0c <HAL_ADC_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 800104c:	f000 fb60 	bl	8001710 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001058:	4619      	mov	r1, r3
 800105a:	4811      	ldr	r0, [pc, #68]	; (80010a0 <MX_ADC1_Init+0xec>)
 800105c:	f003 fb58 	bl	8004710 <HAL_ADCEx_MultiModeConfigChannel>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001066:	f000 fb53 	bl	8001710 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MX_ADC1_Init+0xf0>)
 800106c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800106e:	2306      	movs	r3, #6
 8001070:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001072:	2302      	movs	r3, #2
 8001074:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001076:	237f      	movs	r3, #127	; 0x7f
 8001078:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800107a:	2304      	movs	r3, #4
 800107c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	4619      	mov	r1, r3
 8001086:	4806      	ldr	r0, [pc, #24]	; (80010a0 <MX_ADC1_Init+0xec>)
 8001088:	f002 fcc6 	bl	8003a18 <HAL_ADC_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001092:	f000 fb3d 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001096:	bf00      	nop
 8001098:	3730      	adds	r7, #48	; 0x30
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200002ac 	.word	0x200002ac
 80010a4:	08600004 	.word	0x08600004

080010a8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ae:	463b      	mov	r3, r7
 80010b0:	2220      	movs	r2, #32
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f00a f984 	bl	800b3c2 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80010ba:	4b2b      	ldr	r3, [pc, #172]	; (8001168 <MX_ADC2_Init+0xc0>)
 80010bc:	4a2b      	ldr	r2, [pc, #172]	; (800116c <MX_ADC2_Init+0xc4>)
 80010be:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010c0:	4b29      	ldr	r3, [pc, #164]	; (8001168 <MX_ADC2_Init+0xc0>)
 80010c2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010c6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010c8:	4b27      	ldr	r3, [pc, #156]	; (8001168 <MX_ADC2_Init+0xc0>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ce:	4b26      	ldr	r3, [pc, #152]	; (8001168 <MX_ADC2_Init+0xc0>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80010d4:	4b24      	ldr	r3, [pc, #144]	; (8001168 <MX_ADC2_Init+0xc0>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010da:	4b23      	ldr	r3, [pc, #140]	; (8001168 <MX_ADC2_Init+0xc0>)
 80010dc:	2200      	movs	r2, #0
 80010de:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010e0:	4b21      	ldr	r3, [pc, #132]	; (8001168 <MX_ADC2_Init+0xc0>)
 80010e2:	2204      	movs	r2, #4
 80010e4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80010e6:	4b20      	ldr	r3, [pc, #128]	; (8001168 <MX_ADC2_Init+0xc0>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010ec:	4b1e      	ldr	r3, [pc, #120]	; (8001168 <MX_ADC2_Init+0xc0>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80010f2:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <MX_ADC2_Init+0xc0>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010f8:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <MX_ADC2_Init+0xc0>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001100:	4b19      	ldr	r3, [pc, #100]	; (8001168 <MX_ADC2_Init+0xc0>)
 8001102:	2200      	movs	r2, #0
 8001104:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001106:	4b18      	ldr	r3, [pc, #96]	; (8001168 <MX_ADC2_Init+0xc0>)
 8001108:	2200      	movs	r2, #0
 800110a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800110c:	4b16      	ldr	r3, [pc, #88]	; (8001168 <MX_ADC2_Init+0xc0>)
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_ADC2_Init+0xc0>)
 8001116:	2200      	movs	r2, #0
 8001118:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800111a:	4b13      	ldr	r3, [pc, #76]	; (8001168 <MX_ADC2_Init+0xc0>)
 800111c:	2200      	movs	r2, #0
 800111e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001122:	4811      	ldr	r0, [pc, #68]	; (8001168 <MX_ADC2_Init+0xc0>)
 8001124:	f001 fe72 	bl	8002e0c <HAL_ADC_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800112e:	f000 faef 	bl	8001710 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <MX_ADC2_Init+0xc8>)
 8001134:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001136:	2306      	movs	r3, #6
 8001138:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800113e:	237f      	movs	r3, #127	; 0x7f
 8001140:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001142:	2304      	movs	r3, #4
 8001144:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800114a:	463b      	mov	r3, r7
 800114c:	4619      	mov	r1, r3
 800114e:	4806      	ldr	r0, [pc, #24]	; (8001168 <MX_ADC2_Init+0xc0>)
 8001150:	f002 fc62 	bl	8003a18 <HAL_ADC_ConfigChannel>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800115a:	f000 fad9 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	3720      	adds	r7, #32
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000318 	.word	0x20000318
 800116c:	50000100 	.word	0x50000100
 8001170:	19200040 	.word	0x19200040

08001174 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b0a4      	sub	sp, #144	; 0x90
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800118c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001190:	2254      	movs	r2, #84	; 0x54
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f00a f914 	bl	800b3c2 <memset>
  if(adcHandle->Instance==ADC1)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011a2:	f040 80a8 	bne.w	80012f6 <HAL_ADC_MspInit+0x182>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011ac:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80011b0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011b6:	4618      	mov	r0, r3
 80011b8:	f004 ff9c 	bl	80060f4 <HAL_RCCEx_PeriphCLKConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80011c2:	f000 faa5 	bl	8001710 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80011c6:	4b81      	ldr	r3, [pc, #516]	; (80013cc <HAL_ADC_MspInit+0x258>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	3301      	adds	r3, #1
 80011cc:	4a7f      	ldr	r2, [pc, #508]	; (80013cc <HAL_ADC_MspInit+0x258>)
 80011ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80011d0:	4b7e      	ldr	r3, [pc, #504]	; (80013cc <HAL_ADC_MspInit+0x258>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d10b      	bne.n	80011f0 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80011d8:	4b7d      	ldr	r3, [pc, #500]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 80011da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011dc:	4a7c      	ldr	r2, [pc, #496]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 80011de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e4:	4b7a      	ldr	r3, [pc, #488]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 80011e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f0:	4b77      	ldr	r3, [pc, #476]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f4:	4a76      	ldr	r2, [pc, #472]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 80011f6:	f043 0304 	orr.w	r3, r3, #4
 80011fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fc:	4b74      	ldr	r3, [pc, #464]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 80011fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	623b      	str	r3, [r7, #32]
 8001206:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001208:	4b71      	ldr	r3, [pc, #452]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 800120a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120c:	4a70      	ldr	r2, [pc, #448]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001214:	4b6e      	ldr	r3, [pc, #440]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 8001216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	61fb      	str	r3, [r7, #28]
 800121e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001220:	4b6b      	ldr	r3, [pc, #428]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 8001222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001224:	4a6a      	ldr	r2, [pc, #424]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 8001226:	f043 0302 	orr.w	r3, r3, #2
 800122a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122c:	4b68      	ldr	r3, [pc, #416]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 800122e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	61bb      	str	r3, [r7, #24]
 8001236:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8001238:	2304      	movs	r3, #4
 800123a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800123c:	2303      	movs	r3, #3
 800123e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 8001248:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800124c:	4619      	mov	r1, r3
 800124e:	4861      	ldr	r0, [pc, #388]	; (80013d4 <HAL_ADC_MspInit+0x260>)
 8001250:	f003 ff78 	bl	8005144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8001254:	2302      	movs	r3, #2
 8001256:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001258:	2303      	movs	r3, #3
 800125a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8001264:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001268:	4619      	mov	r1, r3
 800126a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126e:	f003 ff69 	bl	8005144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001272:	2303      	movs	r3, #3
 8001274:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001276:	2303      	movs	r3, #3
 8001278:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001282:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001286:	4619      	mov	r1, r3
 8001288:	4853      	ldr	r0, [pc, #332]	; (80013d8 <HAL_ADC_MspInit+0x264>)
 800128a:	f003 ff5b 	bl	8005144 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 800128e:	4b53      	ldr	r3, [pc, #332]	; (80013dc <HAL_ADC_MspInit+0x268>)
 8001290:	4a53      	ldr	r2, [pc, #332]	; (80013e0 <HAL_ADC_MspInit+0x26c>)
 8001292:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001294:	4b51      	ldr	r3, [pc, #324]	; (80013dc <HAL_ADC_MspInit+0x268>)
 8001296:	2205      	movs	r2, #5
 8001298:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800129a:	4b50      	ldr	r3, [pc, #320]	; (80013dc <HAL_ADC_MspInit+0x268>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a0:	4b4e      	ldr	r3, [pc, #312]	; (80013dc <HAL_ADC_MspInit+0x268>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012a6:	4b4d      	ldr	r3, [pc, #308]	; (80013dc <HAL_ADC_MspInit+0x268>)
 80012a8:	2280      	movs	r2, #128	; 0x80
 80012aa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012ac:	4b4b      	ldr	r3, [pc, #300]	; (80013dc <HAL_ADC_MspInit+0x268>)
 80012ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012b2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012b4:	4b49      	ldr	r3, [pc, #292]	; (80013dc <HAL_ADC_MspInit+0x268>)
 80012b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ba:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80012bc:	4b47      	ldr	r3, [pc, #284]	; (80013dc <HAL_ADC_MspInit+0x268>)
 80012be:	2200      	movs	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012c2:	4b46      	ldr	r3, [pc, #280]	; (80013dc <HAL_ADC_MspInit+0x268>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012c8:	4844      	ldr	r0, [pc, #272]	; (80013dc <HAL_ADC_MspInit+0x268>)
 80012ca:	f003 fc09 	bl	8004ae0 <HAL_DMA_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 80012d4:	f000 fa1c 	bl	8001710 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a40      	ldr	r2, [pc, #256]	; (80013dc <HAL_ADC_MspInit+0x268>)
 80012dc:	655a      	str	r2, [r3, #84]	; 0x54
 80012de:	4a3f      	ldr	r2, [pc, #252]	; (80013dc <HAL_ADC_MspInit+0x268>)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2100      	movs	r1, #0
 80012e8:	2012      	movs	r0, #18
 80012ea:	f003 fbd1 	bl	8004a90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80012ee:	2012      	movs	r0, #18
 80012f0:	f003 fbe8 	bl	8004ac4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80012f4:	e066      	b.n	80013c4 <HAL_ADC_MspInit+0x250>
  else if(adcHandle->Instance==ADC2)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a3a      	ldr	r2, [pc, #232]	; (80013e4 <HAL_ADC_MspInit+0x270>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d161      	bne.n	80013c4 <HAL_ADC_MspInit+0x250>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001300:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001306:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800130a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800130c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001310:	4618      	mov	r0, r3
 8001312:	f004 feef 	bl	80060f4 <HAL_RCCEx_PeriphCLKConfig>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <HAL_ADC_MspInit+0x1ac>
      Error_Handler();
 800131c:	f000 f9f8 	bl	8001710 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001320:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <HAL_ADC_MspInit+0x258>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	3301      	adds	r3, #1
 8001326:	4a29      	ldr	r2, [pc, #164]	; (80013cc <HAL_ADC_MspInit+0x258>)
 8001328:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800132a:	4b28      	ldr	r3, [pc, #160]	; (80013cc <HAL_ADC_MspInit+0x258>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d10b      	bne.n	800134a <HAL_ADC_MspInit+0x1d6>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001332:	4b27      	ldr	r3, [pc, #156]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	4a26      	ldr	r2, [pc, #152]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 8001338:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800133c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800133e:	4b24      	ldr	r3, [pc, #144]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001342:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	4a20      	ldr	r2, [pc, #128]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001356:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	4a1a      	ldr	r2, [pc, #104]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 800137a:	230b      	movs	r3, #11
 800137c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800137e:	2303      	movs	r3, #3
 8001380:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800138e:	4619      	mov	r1, r3
 8001390:	4810      	ldr	r0, [pc, #64]	; (80013d4 <HAL_ADC_MspInit+0x260>)
 8001392:	f003 fed7 	bl	8005144 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8001396:	2301      	movs	r3, #1
 8001398:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800139a:	2303      	movs	r3, #3
 800139c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 80013a6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013aa:	4619      	mov	r1, r3
 80013ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b0:	f003 fec8 	bl	8005144 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2100      	movs	r1, #0
 80013b8:	2012      	movs	r0, #18
 80013ba:	f003 fb69 	bl	8004a90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80013be:	2012      	movs	r0, #18
 80013c0:	f003 fb80 	bl	8004ac4 <HAL_NVIC_EnableIRQ>
}
 80013c4:	bf00      	nop
 80013c6:	3790      	adds	r7, #144	; 0x90
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200003e4 	.word	0x200003e4
 80013d0:	40021000 	.word	0x40021000
 80013d4:	48000800 	.word	0x48000800
 80013d8:	48000400 	.word	0x48000400
 80013dc:	20000384 	.word	0x20000384
 80013e0:	4002001c 	.word	0x4002001c
 80013e4:	50000100 	.word	0x50000100

080013e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80013ee:	4b12      	ldr	r3, [pc, #72]	; (8001438 <MX_DMA_Init+0x50>)
 80013f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f2:	4a11      	ldr	r2, [pc, #68]	; (8001438 <MX_DMA_Init+0x50>)
 80013f4:	f043 0304 	orr.w	r3, r3, #4
 80013f8:	6493      	str	r3, [r2, #72]	; 0x48
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <MX_DMA_Init+0x50>)
 80013fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <MX_DMA_Init+0x50>)
 8001408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800140a:	4a0b      	ldr	r2, [pc, #44]	; (8001438 <MX_DMA_Init+0x50>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6493      	str	r3, [r2, #72]	; 0x48
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <MX_DMA_Init+0x50>)
 8001414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2100      	movs	r1, #0
 8001422:	200c      	movs	r0, #12
 8001424:	f003 fb34 	bl	8004a90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001428:	200c      	movs	r0, #12
 800142a:	f003 fb4b 	bl	8004ac4 <HAL_NVIC_EnableIRQ>

}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40021000 	.word	0x40021000

0800143c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	; 0x28
 8001440:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
 8001450:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001452:	4b3f      	ldr	r3, [pc, #252]	; (8001550 <MX_GPIO_Init+0x114>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	4a3e      	ldr	r2, [pc, #248]	; (8001550 <MX_GPIO_Init+0x114>)
 8001458:	f043 0304 	orr.w	r3, r3, #4
 800145c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145e:	4b3c      	ldr	r3, [pc, #240]	; (8001550 <MX_GPIO_Init+0x114>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800146a:	4b39      	ldr	r3, [pc, #228]	; (8001550 <MX_GPIO_Init+0x114>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	4a38      	ldr	r2, [pc, #224]	; (8001550 <MX_GPIO_Init+0x114>)
 8001470:	f043 0320 	orr.w	r3, r3, #32
 8001474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001476:	4b36      	ldr	r3, [pc, #216]	; (8001550 <MX_GPIO_Init+0x114>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	f003 0320 	and.w	r3, r3, #32
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	4b33      	ldr	r3, [pc, #204]	; (8001550 <MX_GPIO_Init+0x114>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	4a32      	ldr	r2, [pc, #200]	; (8001550 <MX_GPIO_Init+0x114>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148e:	4b30      	ldr	r3, [pc, #192]	; (8001550 <MX_GPIO_Init+0x114>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	4b2d      	ldr	r3, [pc, #180]	; (8001550 <MX_GPIO_Init+0x114>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	4a2c      	ldr	r2, [pc, #176]	; (8001550 <MX_GPIO_Init+0x114>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a6:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <MX_GPIO_Init+0x114>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b2:	4b27      	ldr	r3, [pc, #156]	; (8001550 <MX_GPIO_Init+0x114>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	4a26      	ldr	r2, [pc, #152]	; (8001550 <MX_GPIO_Init+0x114>)
 80014b8:	f043 0308 	orr.w	r3, r3, #8
 80014bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014be:	4b24      	ldr	r3, [pc, #144]	; (8001550 <MX_GPIO_Init+0x114>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2120      	movs	r1, #32
 80014ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d2:	f003 ffb9 	bl	8005448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2104      	movs	r1, #4
 80014da:	481e      	ldr	r0, [pc, #120]	; (8001554 <MX_GPIO_Init+0x118>)
 80014dc:	f003 ffb4 	bl	8005448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 80014e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	4619      	mov	r1, r3
 80014f6:	4818      	ldr	r0, [pc, #96]	; (8001558 <MX_GPIO_Init+0x11c>)
 80014f8:	f003 fe24 	bl	8005144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 80014fc:	2320      	movs	r3, #32
 80014fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001500:	2301      	movs	r3, #1
 8001502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4619      	mov	r1, r3
 8001512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001516:	f003 fe15 	bl	8005144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 800151a:	2304      	movs	r3, #4
 800151c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151e:	2301      	movs	r3, #1
 8001520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	4808      	ldr	r0, [pc, #32]	; (8001554 <MX_GPIO_Init+0x118>)
 8001532:	f003 fe07 	bl	8005144 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2100      	movs	r1, #0
 800153a:	2028      	movs	r0, #40	; 0x28
 800153c:	f003 faa8 	bl	8004a90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001540:	2028      	movs	r0, #40	; 0x28
 8001542:	f003 fabf 	bl	8004ac4 <HAL_NVIC_EnableIRQ>

}
 8001546:	bf00      	nop
 8001548:	3728      	adds	r7, #40	; 0x28
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40021000 	.word	0x40021000
 8001554:	48000c00 	.word	0x48000c00
 8001558:	48000800 	.word	0x48000800

0800155c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001560:	f001 f9b3 	bl	80028ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001564:	f000 f826 	bl	80015b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001568:	f7ff ff68 	bl	800143c <MX_GPIO_Init>
  MX_DMA_Init();
 800156c:	f7ff ff3c 	bl	80013e8 <MX_DMA_Init>
  MX_ADC2_Init();
 8001570:	f7ff fd9a 	bl	80010a8 <MX_ADC2_Init>
  MX_ADC1_Init();
 8001574:	f7ff fd1e 	bl	8000fb4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001578:	f000 fac0 	bl	8001afc <MX_TIM1_Init>
  MX_TIM3_Init();
 800157c:	f000 fb70 	bl	8001c60 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001580:	f000 fdb4 	bl	80020ec <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001584:	f000 fdfe 	bl	8002184 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8001588:	f000 fbb6 	bl	8001cf8 <MX_TIM4_Init>
  MX_TIM5_Init();
 800158c:	f000 fc0a 	bl	8001da4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
	Shell_Init();
 8001590:	f000 feec 	bl	800236c <Shell_Init>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001594:	217f      	movs	r1, #127	; 0x7f
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <main+0x50>)
 8001598:	f003 f826 	bl	80045e8 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1,ADC_Buffer, ADC_BUF_SIZE);
 800159c:	2201      	movs	r2, #1
 800159e:	4904      	ldr	r1, [pc, #16]	; (80015b0 <main+0x54>)
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <main+0x50>)
 80015a2:	f001 fed9 	bl	8003358 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 80015a6:	f000 ff23 	bl	80023f0 <Shell_Loop>
	{
 80015aa:	e7fc      	b.n	80015a6 <main+0x4a>
 80015ac:	200002ac 	.word	0x200002ac
 80015b0:	200003f0 	.word	0x200003f0

080015b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b094      	sub	sp, #80	; 0x50
 80015b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ba:	f107 0318 	add.w	r3, r7, #24
 80015be:	2238      	movs	r2, #56	; 0x38
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f009 fefd 	bl	800b3c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80015d6:	2000      	movs	r0, #0
 80015d8:	f003 ff72 	bl	80054c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015dc:	2301      	movs	r3, #1
 80015de:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015e4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015e6:	2302      	movs	r3, #2
 80015e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ea:	2303      	movs	r3, #3
 80015ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80015ee:	2306      	movs	r3, #6
 80015f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80015f2:	2355      	movs	r3, #85	; 0x55
 80015f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015f6:	2302      	movs	r3, #2
 80015f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015fa:	2302      	movs	r3, #2
 80015fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015fe:	2302      	movs	r3, #2
 8001600:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001602:	f107 0318 	add.w	r3, r7, #24
 8001606:	4618      	mov	r0, r3
 8001608:	f004 f80e 	bl	8005628 <HAL_RCC_OscConfig>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001612:	f000 f87d 	bl	8001710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001616:	230f      	movs	r3, #15
 8001618:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800161a:	2303      	movs	r3, #3
 800161c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	2104      	movs	r1, #4
 800162e:	4618      	mov	r0, r3
 8001630:	f004 fb12 	bl	8005c58 <HAL_RCC_ClockConfig>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800163a:	f000 f869 	bl	8001710 <Error_Handler>
  }
}
 800163e:	bf00      	nop
 8001640:	3750      	adds	r7, #80	; 0x50
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	float u_Vf;
	uint16_t valf = ADC_Buffer[0];
 8001650:	4b23      	ldr	r3, [pc, #140]	; (80016e0 <HAL_ADC_ConvCpltCallback+0x98>)
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	81fb      	strh	r3, [r7, #14]
	u_Vf = (valf / 4096.0) * 3.3;
 8001656:	89fb      	ldrh	r3, [r7, #14]
 8001658:	4618      	mov	r0, r3
 800165a:	f7fe ff9b 	bl	8000594 <__aeabi_i2d>
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001664:	f7ff f92a 	bl	80008bc <__aeabi_ddiv>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4610      	mov	r0, r2
 800166e:	4619      	mov	r1, r3
 8001670:	a315      	add	r3, pc, #84	; (adr r3, 80016c8 <HAL_ADC_ConvCpltCallback+0x80>)
 8001672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001676:	f7fe fff7 	bl	8000668 <__aeabi_dmul>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4610      	mov	r0, r2
 8001680:	4619      	mov	r1, r3
 8001682:	f7ff fac9 	bl	8000c18 <__aeabi_d2f>
 8001686:	4603      	mov	r3, r0
 8001688:	60bb      	str	r3, [r7, #8]
	Imesf =(u_Vf - 1.65) / 0.05;
 800168a:	68b8      	ldr	r0, [r7, #8]
 800168c:	f7fe ff94 	bl	80005b8 <__aeabi_f2d>
 8001690:	a30f      	add	r3, pc, #60	; (adr r3, 80016d0 <HAL_ADC_ConvCpltCallback+0x88>)
 8001692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001696:	f7fe fe2f 	bl	80002f8 <__aeabi_dsub>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	a30d      	add	r3, pc, #52	; (adr r3, 80016d8 <HAL_ADC_ConvCpltCallback+0x90>)
 80016a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a8:	f7ff f908 	bl	80008bc <__aeabi_ddiv>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4610      	mov	r0, r2
 80016b2:	4619      	mov	r1, r3
 80016b4:	f7ff fab0 	bl	8000c18 <__aeabi_d2f>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4a0b      	ldr	r2, [pc, #44]	; (80016e8 <HAL_ADC_ConvCpltCallback+0xa0>)
 80016bc:	6013      	str	r3, [r2, #0]

}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	66666666 	.word	0x66666666
 80016cc:	400a6666 	.word	0x400a6666
 80016d0:	66666666 	.word	0x66666666
 80016d4:	3ffa6666 	.word	0x3ffa6666
 80016d8:	9999999a 	.word	0x9999999a
 80016dc:	3fa99999 	.word	0x3fa99999
 80016e0:	200003f0 	.word	0x200003f0
 80016e4:	40b00000 	.word	0x40b00000
 80016e8:	200003e8 	.word	0x200003e8

080016ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d101      	bne.n	8001702 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016fe:	f001 f8fd 	bl	80028fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40001000 	.word	0x40001000

08001710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001714:	b672      	cpsid	i
}
 8001716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001718:	e7fe      	b.n	8001718 <Error_Handler+0x8>
	...

0800171c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001722:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <HAL_MspInit+0x44>)
 8001724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001726:	4a0e      	ldr	r2, [pc, #56]	; (8001760 <HAL_MspInit+0x44>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6613      	str	r3, [r2, #96]	; 0x60
 800172e:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <HAL_MspInit+0x44>)
 8001730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800173a:	4b09      	ldr	r3, [pc, #36]	; (8001760 <HAL_MspInit+0x44>)
 800173c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173e:	4a08      	ldr	r2, [pc, #32]	; (8001760 <HAL_MspInit+0x44>)
 8001740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001744:	6593      	str	r3, [r2, #88]	; 0x58
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_MspInit+0x44>)
 8001748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174e:	603b      	str	r3, [r7, #0]
 8001750:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001752:	f003 ff59 	bl	8005608 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40021000 	.word	0x40021000

08001764 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08c      	sub	sp, #48	; 0x30
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001774:	4b2c      	ldr	r3, [pc, #176]	; (8001828 <HAL_InitTick+0xc4>)
 8001776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001778:	4a2b      	ldr	r2, [pc, #172]	; (8001828 <HAL_InitTick+0xc4>)
 800177a:	f043 0310 	orr.w	r3, r3, #16
 800177e:	6593      	str	r3, [r2, #88]	; 0x58
 8001780:	4b29      	ldr	r3, [pc, #164]	; (8001828 <HAL_InitTick+0xc4>)
 8001782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001784:	f003 0310 	and.w	r3, r3, #16
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800178c:	f107 020c 	add.w	r2, r7, #12
 8001790:	f107 0310 	add.w	r3, r7, #16
 8001794:	4611      	mov	r1, r2
 8001796:	4618      	mov	r0, r3
 8001798:	f004 fc34 	bl	8006004 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800179c:	f004 fc06 	bl	8005fac <HAL_RCC_GetPCLK1Freq>
 80017a0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a4:	4a21      	ldr	r2, [pc, #132]	; (800182c <HAL_InitTick+0xc8>)
 80017a6:	fba2 2303 	umull	r2, r3, r2, r3
 80017aa:	0c9b      	lsrs	r3, r3, #18
 80017ac:	3b01      	subs	r3, #1
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017b0:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <HAL_InitTick+0xcc>)
 80017b2:	4a20      	ldr	r2, [pc, #128]	; (8001834 <HAL_InitTick+0xd0>)
 80017b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017b6:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <HAL_InitTick+0xcc>)
 80017b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017bc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017be:	4a1c      	ldr	r2, [pc, #112]	; (8001830 <HAL_InitTick+0xcc>)
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <HAL_InitTick+0xcc>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ca:	4b19      	ldr	r3, [pc, #100]	; (8001830 <HAL_InitTick+0xcc>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80017d0:	4817      	ldr	r0, [pc, #92]	; (8001830 <HAL_InitTick+0xcc>)
 80017d2:	f004 fedd 	bl	8006590 <HAL_TIM_Base_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80017dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d11b      	bne.n	800181c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80017e4:	4812      	ldr	r0, [pc, #72]	; (8001830 <HAL_InitTick+0xcc>)
 80017e6:	f004 ff2b 	bl	8006640 <HAL_TIM_Base_Start_IT>
 80017ea:	4603      	mov	r3, r0
 80017ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80017f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d111      	bne.n	800181c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017f8:	2036      	movs	r0, #54	; 0x36
 80017fa:	f003 f963 	bl	8004ac4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b0f      	cmp	r3, #15
 8001802:	d808      	bhi.n	8001816 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001804:	2200      	movs	r2, #0
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	2036      	movs	r0, #54	; 0x36
 800180a:	f003 f941 	bl	8004a90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800180e:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <HAL_InitTick+0xd4>)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	e002      	b.n	800181c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800181c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001820:	4618      	mov	r0, r3
 8001822:	3730      	adds	r7, #48	; 0x30
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40021000 	.word	0x40021000
 800182c:	431bde83 	.word	0x431bde83
 8001830:	200003f4 	.word	0x200003f4
 8001834:	40001000 	.word	0x40001000
 8001838:	200000c0 	.word	0x200000c0

0800183c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001840:	e7fe      	b.n	8001840 <NMI_Handler+0x4>

08001842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001846:	e7fe      	b.n	8001846 <HardFault_Handler+0x4>

08001848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800184c:	e7fe      	b.n	800184c <MemManage_Handler+0x4>

0800184e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001852:	e7fe      	b.n	8001852 <BusFault_Handler+0x4>

08001854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <UsageFault_Handler+0x4>

0800185a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001898:	4802      	ldr	r0, [pc, #8]	; (80018a4 <DMA1_Channel2_IRQHandler+0x10>)
 800189a:	f003 fb04 	bl	8004ea6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000384 	.word	0x20000384

080018a8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80018ac:	4803      	ldr	r0, [pc, #12]	; (80018bc <ADC1_2_IRQHandler+0x14>)
 80018ae:	f001 fe35 	bl	800351c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80018b2:	4803      	ldr	r0, [pc, #12]	; (80018c0 <ADC1_2_IRQHandler+0x18>)
 80018b4:	f001 fe32 	bl	800351c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	200002ac 	.word	0x200002ac
 80018c0:	20000318 	.word	0x20000318

080018c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <USART2_IRQHandler+0x10>)
 80018ca:	f007 f803 	bl	80088d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000574 	.word	0x20000574

080018d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018dc:	4802      	ldr	r0, [pc, #8]	; (80018e8 <USART3_IRQHandler+0x10>)
 80018de:	f006 fff9 	bl	80088d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000604 	.word	0x20000604

080018ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 80018f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018f4:	f003 fdc0 	bl	8005478 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}

080018fc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	encoder_speed = TIM4->CNT*ENCODER_FREQUENCY/ENCODER_RESOLUTION;
 8001900:	4b0a      	ldr	r3, [pc, #40]	; (800192c <TIM5_IRQHandler+0x30>)
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	2264      	movs	r2, #100	; 0x64
 8001906:	fb02 f303 	mul.w	r3, r2, r3
 800190a:	0b1b      	lsrs	r3, r3, #12
 800190c:	ee07 3a90 	vmov	s15, r3
 8001910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <TIM5_IRQHandler+0x34>)
 8001916:	edc3 7a00 	vstr	s15, [r3]
	TIM4->CNT = 0;
 800191a:	4b04      	ldr	r3, [pc, #16]	; (800192c <TIM5_IRQHandler+0x30>)
 800191c:	2200      	movs	r2, #0
 800191e:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001920:	4804      	ldr	r0, [pc, #16]	; (8001934 <TIM5_IRQHandler+0x38>)
 8001922:	f005 fa3f 	bl	8006da4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40000800 	.word	0x40000800
 8001930:	200003ec 	.word	0x200003ec
 8001934:	20000528 	.word	0x20000528

08001938 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800193c:	4802      	ldr	r0, [pc, #8]	; (8001948 <TIM6_DAC_IRQHandler+0x10>)
 800193e:	f005 fa31 	bl	8006da4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200003f4 	.word	0x200003f4

0800194c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return 1;
 8001950:	2301      	movs	r3, #1
}
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <_kill>:

int _kill(int pid, int sig)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001966:	f009 fddb 	bl	800b520 <__errno>
 800196a:	4603      	mov	r3, r0
 800196c:	2216      	movs	r2, #22
 800196e:	601a      	str	r2, [r3, #0]
  return -1;
 8001970:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <_exit>:

void _exit (int status)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001984:	f04f 31ff 	mov.w	r1, #4294967295
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff ffe7 	bl	800195c <_kill>
  while (1) {}    /* Make sure we hang here */
 800198e:	e7fe      	b.n	800198e <_exit+0x12>

08001990 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	e00a      	b.n	80019b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019a2:	f3af 8000 	nop.w
 80019a6:	4601      	mov	r1, r0
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	1c5a      	adds	r2, r3, #1
 80019ac:	60ba      	str	r2, [r7, #8]
 80019ae:	b2ca      	uxtb	r2, r1
 80019b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	3301      	adds	r3, #1
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	429a      	cmp	r2, r3
 80019be:	dbf0      	blt.n	80019a2 <_read+0x12>
  }

  return len;
 80019c0:	687b      	ldr	r3, [r7, #4]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b086      	sub	sp, #24
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	60f8      	str	r0, [r7, #12]
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	e009      	b.n	80019f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	1c5a      	adds	r2, r3, #1
 80019e0:	60ba      	str	r2, [r7, #8]
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	3301      	adds	r3, #1
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	dbf1      	blt.n	80019dc <_write+0x12>
  }
  return len;
 80019f8:	687b      	ldr	r3, [r7, #4]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <_close>:

int _close(int file)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a2a:	605a      	str	r2, [r3, #4]
  return 0;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <_isatty>:

int _isatty(int file)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a42:	2301      	movs	r3, #1
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
	...

08001a6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a74:	4a14      	ldr	r2, [pc, #80]	; (8001ac8 <_sbrk+0x5c>)
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <_sbrk+0x60>)
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a80:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <_sbrk+0x64>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d102      	bne.n	8001a8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a88:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <_sbrk+0x64>)
 8001a8a:	4a12      	ldr	r2, [pc, #72]	; (8001ad4 <_sbrk+0x68>)
 8001a8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <_sbrk+0x64>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d207      	bcs.n	8001aac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a9c:	f009 fd40 	bl	800b520 <__errno>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aaa:	e009      	b.n	8001ac0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <_sbrk+0x64>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ab2:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <_sbrk+0x64>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	4a05      	ldr	r2, [pc, #20]	; (8001ad0 <_sbrk+0x64>)
 8001abc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001abe:	68fb      	ldr	r3, [r7, #12]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20020000 	.word	0x20020000
 8001acc:	00000400 	.word	0x00000400
 8001ad0:	20000440 	.word	0x20000440
 8001ad4:	20000960 	.word	0x20000960

08001ad8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <SystemInit+0x20>)
 8001ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ae2:	4a05      	ldr	r2, [pc, #20]	; (8001af8 <SystemInit+0x20>)
 8001ae4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ae8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b098      	sub	sp, #96	; 0x60
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b02:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b0e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
 8001b1c:	611a      	str	r2, [r3, #16]
 8001b1e:	615a      	str	r2, [r3, #20]
 8001b20:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	2234      	movs	r2, #52	; 0x34
 8001b26:	2100      	movs	r1, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f009 fc4a 	bl	800b3c2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b2e:	4b4a      	ldr	r3, [pc, #296]	; (8001c58 <MX_TIM1_Init+0x15c>)
 8001b30:	4a4a      	ldr	r2, [pc, #296]	; (8001c5c <MX_TIM1_Init+0x160>)
 8001b32:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b34:	4b48      	ldr	r3, [pc, #288]	; (8001c58 <MX_TIM1_Init+0x15c>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001b3a:	4b47      	ldr	r3, [pc, #284]	; (8001c58 <MX_TIM1_Init+0x15c>)
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4250;
 8001b40:	4b45      	ldr	r3, [pc, #276]	; (8001c58 <MX_TIM1_Init+0x15c>)
 8001b42:	f241 029a 	movw	r2, #4250	; 0x109a
 8001b46:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b48:	4b43      	ldr	r3, [pc, #268]	; (8001c58 <MX_TIM1_Init+0x15c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b4e:	4b42      	ldr	r3, [pc, #264]	; (8001c58 <MX_TIM1_Init+0x15c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b54:	4b40      	ldr	r3, [pc, #256]	; (8001c58 <MX_TIM1_Init+0x15c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b5a:	483f      	ldr	r0, [pc, #252]	; (8001c58 <MX_TIM1_Init+0x15c>)
 8001b5c:	f004 fde8 	bl	8006730 <HAL_TIM_PWM_Init>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001b66:	f7ff fdd3 	bl	8001710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b6a:	2320      	movs	r3, #32
 8001b6c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4836      	ldr	r0, [pc, #216]	; (8001c58 <MX_TIM1_Init+0x15c>)
 8001b7e:	f006 fbb9 	bl	80082f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001b88:	f7ff fdc2 	bl	8001710 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b8c:	2360      	movs	r3, #96	; 0x60
 8001b8e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 2550;
 8001b90:	f640 13f6 	movw	r3, #2550	; 0x9f6
 8001b94:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b96:	2300      	movs	r3, #0
 8001b98:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001baa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bae:	2200      	movs	r2, #0
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4829      	ldr	r0, [pc, #164]	; (8001c58 <MX_TIM1_Init+0x15c>)
 8001bb4:	f005 fa76 	bl	80070a4 <HAL_TIM_PWM_ConfigChannel>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001bbe:	f7ff fda7 	bl	8001710 <Error_Handler>
  }
  sConfigOC.Pulse = 1700;
 8001bc2:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8001bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bc8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bcc:	2204      	movs	r2, #4
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4821      	ldr	r0, [pc, #132]	; (8001c58 <MX_TIM1_Init+0x15c>)
 8001bd2:	f005 fa67 	bl	80070a4 <HAL_TIM_PWM_ConfigChannel>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8001bdc:	f7ff fd98 	bl	8001710 <Error_Handler>
  }
  sConfigOC.Pulse = 637;
 8001be0:	f240 237d 	movw	r3, #637	; 0x27d
 8001be4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001be6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bea:	2208      	movs	r2, #8
 8001bec:	4619      	mov	r1, r3
 8001bee:	481a      	ldr	r0, [pc, #104]	; (8001c58 <MX_TIM1_Init+0x15c>)
 8001bf0:	f005 fa58 	bl	80070a4 <HAL_TIM_PWM_ConfigChannel>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8001bfa:	f7ff fd89 	bl	8001710 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 34;
 8001c0a:	2322      	movs	r3, #34	; 0x22
 8001c0c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c16:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c28:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4807      	ldr	r0, [pc, #28]	; (8001c58 <MX_TIM1_Init+0x15c>)
 8001c3c:	f006 fbf0 	bl	8008420 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8001c46:	f7ff fd63 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c4a:	4803      	ldr	r0, [pc, #12]	; (8001c58 <MX_TIM1_Init+0x15c>)
 8001c4c:	f000 f9e6 	bl	800201c <HAL_TIM_MspPostInit>

}
 8001c50:	bf00      	nop
 8001c52:	3760      	adds	r7, #96	; 0x60
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000444 	.word	0x20000444
 8001c5c:	40012c00 	.word	0x40012c00

08001c60 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001c66:	f107 0310 	add.w	r3, r7, #16
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]
 8001c7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c7e:	4b1c      	ldr	r3, [pc, #112]	; (8001cf0 <MX_TIM3_Init+0x90>)
 8001c80:	4a1c      	ldr	r2, [pc, #112]	; (8001cf4 <MX_TIM3_Init+0x94>)
 8001c82:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c84:	4b1a      	ldr	r3, [pc, #104]	; (8001cf0 <MX_TIM3_Init+0x90>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8a:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <MX_TIM3_Init+0x90>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c90:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <MX_TIM3_Init+0x90>)
 8001c92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c96:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c98:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <MX_TIM3_Init+0x90>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c9e:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <MX_TIM3_Init+0x90>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001cb4:	f107 0310 	add.w	r3, r7, #16
 8001cb8:	4619      	mov	r1, r3
 8001cba:	480d      	ldr	r0, [pc, #52]	; (8001cf0 <MX_TIM3_Init+0x90>)
 8001cbc:	f006 f94b 	bl	8007f56 <HAL_TIMEx_HallSensor_Init>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001cc6:	f7ff fd23 	bl	8001710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001cca:	2350      	movs	r3, #80	; 0x50
 8001ccc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4806      	ldr	r0, [pc, #24]	; (8001cf0 <MX_TIM3_Init+0x90>)
 8001cd8:	f006 fb0c 	bl	80082f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001ce2:	f7ff fd15 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ce6:	bf00      	nop
 8001ce8:	3720      	adds	r7, #32
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000490 	.word	0x20000490
 8001cf4:	40000400 	.word	0x40000400

08001cf8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08c      	sub	sp, #48	; 0x30
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cfe:	f107 030c 	add.w	r3, r7, #12
 8001d02:	2224      	movs	r2, #36	; 0x24
 8001d04:	2100      	movs	r1, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f009 fb5b 	bl	800b3c2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d0c:	463b      	mov	r3, r7
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d16:	4b21      	ldr	r3, [pc, #132]	; (8001d9c <MX_TIM4_Init+0xa4>)
 8001d18:	4a21      	ldr	r2, [pc, #132]	; (8001da0 <MX_TIM4_Init+0xa8>)
 8001d1a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d1c:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <MX_TIM4_Init+0xa4>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d22:	4b1e      	ldr	r3, [pc, #120]	; (8001d9c <MX_TIM4_Init+0xa4>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d28:	4b1c      	ldr	r3, [pc, #112]	; (8001d9c <MX_TIM4_Init+0xa4>)
 8001d2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d2e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d30:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <MX_TIM4_Init+0xa4>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d36:	4b19      	ldr	r3, [pc, #100]	; (8001d9c <MX_TIM4_Init+0xa4>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d40:	2300      	movs	r3, #0
 8001d42:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d44:	2301      	movs	r3, #1
 8001d46:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d50:	2300      	movs	r3, #0
 8001d52:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d54:	2301      	movs	r3, #1
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001d60:	f107 030c 	add.w	r3, r7, #12
 8001d64:	4619      	mov	r1, r3
 8001d66:	480d      	ldr	r0, [pc, #52]	; (8001d9c <MX_TIM4_Init+0xa4>)
 8001d68:	f004 fee8 	bl	8006b3c <HAL_TIM_Encoder_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001d72:	f7ff fccd 	bl	8001710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d7e:	463b      	mov	r3, r7
 8001d80:	4619      	mov	r1, r3
 8001d82:	4806      	ldr	r0, [pc, #24]	; (8001d9c <MX_TIM4_Init+0xa4>)
 8001d84:	f006 fab6 	bl	80082f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001d8e:	f7ff fcbf 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d92:	bf00      	nop
 8001d94:	3730      	adds	r7, #48	; 0x30
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200004dc 	.word	0x200004dc
 8001da0:	40000800 	.word	0x40000800

08001da4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001daa:	f107 0310 	add.w	r3, r7, #16
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db8:	1d3b      	adds	r3, r7, #4
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001dc2:	4b1e      	ldr	r3, [pc, #120]	; (8001e3c <MX_TIM5_Init+0x98>)
 8001dc4:	4a1e      	ldr	r2, [pc, #120]	; (8001e40 <MX_TIM5_Init+0x9c>)
 8001dc6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1699;
 8001dc8:	4b1c      	ldr	r3, [pc, #112]	; (8001e3c <MX_TIM5_Init+0x98>)
 8001dca:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8001dce:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd0:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <MX_TIM5_Init+0x98>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001dd6:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <MX_TIM5_Init+0x98>)
 8001dd8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ddc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dde:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <MX_TIM5_Init+0x98>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de4:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <MX_TIM5_Init+0x98>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001dea:	4814      	ldr	r0, [pc, #80]	; (8001e3c <MX_TIM5_Init+0x98>)
 8001dec:	f004 fbd0 	bl	8006590 <HAL_TIM_Base_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001df6:	f7ff fc8b 	bl	8001710 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dfe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001e00:	f107 0310 	add.w	r3, r7, #16
 8001e04:	4619      	mov	r1, r3
 8001e06:	480d      	ldr	r0, [pc, #52]	; (8001e3c <MX_TIM5_Init+0x98>)
 8001e08:	f005 fa60 	bl	80072cc <HAL_TIM_ConfigClockSource>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001e12:	f7ff fc7d 	bl	8001710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e16:	2300      	movs	r3, #0
 8001e18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e1e:	1d3b      	adds	r3, r7, #4
 8001e20:	4619      	mov	r1, r3
 8001e22:	4806      	ldr	r0, [pc, #24]	; (8001e3c <MX_TIM5_Init+0x98>)
 8001e24:	f006 fa66 	bl	80082f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001e2e:	f7ff fc6f 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001e32:	bf00      	nop
 8001e34:	3720      	adds	r7, #32
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000528 	.word	0x20000528
 8001e40:	40000c00 	.word	0x40000c00

08001e44 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <HAL_TIM_PWM_MspInit+0x38>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d10b      	bne.n	8001e6e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e56:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e5a:	4a09      	ldr	r2, [pc, #36]	; (8001e80 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e60:	6613      	str	r3, [r2, #96]	; 0x60
 8001e62:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001e6e:	bf00      	nop
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40012c00 	.word	0x40012c00
 8001e80:	40021000 	.word	0x40021000

08001e84 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08a      	sub	sp, #40	; 0x28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a26      	ldr	r2, [pc, #152]	; (8001f3c <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d145      	bne.n	8001f32 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ea6:	4b26      	ldr	r3, [pc, #152]	; (8001f40 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eaa:	4a25      	ldr	r2, [pc, #148]	; (8001f40 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	6593      	str	r3, [r2, #88]	; 0x58
 8001eb2:	4b23      	ldr	r3, [pc, #140]	; (8001f40 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebe:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec2:	4a1f      	ldr	r2, [pc, #124]	; (8001f40 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eca:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed6:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eda:	4a19      	ldr	r2, [pc, #100]	; (8001f40 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001edc:	f043 0304 	orr.w	r3, r3, #4
 8001ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ee2:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001eee:	2350      	movs	r3, #80	; 0x50
 8001ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efa:	2300      	movs	r3, #0
 8001efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001efe:	2302      	movs	r3, #2
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f02:	f107 0314 	add.w	r3, r7, #20
 8001f06:	4619      	mov	r1, r3
 8001f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f0c:	f003 f91a 	bl	8005144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f22:	2302      	movs	r3, #2
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f26:	f107 0314 	add.w	r3, r7, #20
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4805      	ldr	r0, [pc, #20]	; (8001f44 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 8001f2e:	f003 f909 	bl	8005144 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001f32:	bf00      	nop
 8001f34:	3728      	adds	r7, #40	; 0x28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40000400 	.word	0x40000400
 8001f40:	40021000 	.word	0x40021000
 8001f44:	48000800 	.word	0x48000800

08001f48 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08a      	sub	sp, #40	; 0x28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a18      	ldr	r2, [pc, #96]	; (8001fc8 <HAL_TIM_Encoder_MspInit+0x80>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d129      	bne.n	8001fbe <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f6a:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <HAL_TIM_Encoder_MspInit+0x84>)
 8001f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6e:	4a17      	ldr	r2, [pc, #92]	; (8001fcc <HAL_TIM_Encoder_MspInit+0x84>)
 8001f70:	f043 0304 	orr.w	r3, r3, #4
 8001f74:	6593      	str	r3, [r2, #88]	; 0x58
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <HAL_TIM_Encoder_MspInit+0x84>)
 8001f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f82:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <HAL_TIM_Encoder_MspInit+0x84>)
 8001f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f86:	4a11      	ldr	r2, [pc, #68]	; (8001fcc <HAL_TIM_Encoder_MspInit+0x84>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f8e:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <HAL_TIM_Encoder_MspInit+0x84>)
 8001f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f9a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001fac:	230a      	movs	r3, #10
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fba:	f003 f8c3 	bl	8005144 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	3728      	adds	r7, #40	; 0x28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40000800 	.word	0x40000800
 8001fcc:	40021000 	.word	0x40021000

08001fd0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0d      	ldr	r2, [pc, #52]	; (8002014 <HAL_TIM_Base_MspInit+0x44>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d113      	bne.n	800200a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001fe2:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <HAL_TIM_Base_MspInit+0x48>)
 8001fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe6:	4a0c      	ldr	r2, [pc, #48]	; (8002018 <HAL_TIM_Base_MspInit+0x48>)
 8001fe8:	f043 0308 	orr.w	r3, r3, #8
 8001fec:	6593      	str	r3, [r2, #88]	; 0x58
 8001fee:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <HAL_TIM_Base_MspInit+0x48>)
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	2032      	movs	r0, #50	; 0x32
 8002000:	f002 fd46 	bl	8004a90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002004:	2032      	movs	r0, #50	; 0x32
 8002006:	f002 fd5d 	bl	8004ac4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800200a:	bf00      	nop
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40000c00 	.word	0x40000c00
 8002018:	40021000 	.word	0x40021000

0800201c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	; 0x28
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a29      	ldr	r2, [pc, #164]	; (80020e0 <HAL_TIM_MspPostInit+0xc4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d14b      	bne.n	80020d6 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203e:	4b29      	ldr	r3, [pc, #164]	; (80020e4 <HAL_TIM_MspPostInit+0xc8>)
 8002040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002042:	4a28      	ldr	r2, [pc, #160]	; (80020e4 <HAL_TIM_MspPostInit+0xc8>)
 8002044:	f043 0302 	orr.w	r3, r3, #2
 8002048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800204a:	4b26      	ldr	r3, [pc, #152]	; (80020e4 <HAL_TIM_MspPostInit+0xc8>)
 800204c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	613b      	str	r3, [r7, #16]
 8002054:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002056:	4b23      	ldr	r3, [pc, #140]	; (80020e4 <HAL_TIM_MspPostInit+0xc8>)
 8002058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205a:	4a22      	ldr	r2, [pc, #136]	; (80020e4 <HAL_TIM_MspPostInit+0xc8>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002062:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <HAL_TIM_MspPostInit+0xc8>)
 8002064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 800206e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002074:	2302      	movs	r3, #2
 8002076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207c:	2300      	movs	r3, #0
 800207e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002080:	2306      	movs	r3, #6
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	4619      	mov	r1, r3
 800208a:	4817      	ldr	r0, [pc, #92]	; (80020e8 <HAL_TIM_MspPostInit+0xcc>)
 800208c:	f003 f85a 	bl	8005144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8002090:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002096:	2302      	movs	r3, #2
 8002098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209e:	2300      	movs	r3, #0
 80020a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80020a2:	2304      	movs	r3, #4
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 80020a6:	f107 0314 	add.w	r3, r7, #20
 80020aa:	4619      	mov	r1, r3
 80020ac:	480e      	ldr	r0, [pc, #56]	; (80020e8 <HAL_TIM_MspPostInit+0xcc>)
 80020ae:	f003 f849 	bl	8005144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 80020b2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80020b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b8:	2302      	movs	r3, #2
 80020ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c0:	2300      	movs	r3, #0
 80020c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80020c4:	2306      	movs	r3, #6
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	4619      	mov	r1, r3
 80020ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d2:	f003 f837 	bl	8005144 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80020d6:	bf00      	nop
 80020d8:	3728      	adds	r7, #40	; 0x28
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40012c00 	.word	0x40012c00
 80020e4:	40021000 	.word	0x40021000
 80020e8:	48000400 	.word	0x48000400

080020ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020f0:	4b22      	ldr	r3, [pc, #136]	; (800217c <MX_USART2_UART_Init+0x90>)
 80020f2:	4a23      	ldr	r2, [pc, #140]	; (8002180 <MX_USART2_UART_Init+0x94>)
 80020f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020f6:	4b21      	ldr	r3, [pc, #132]	; (800217c <MX_USART2_UART_Init+0x90>)
 80020f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020fe:	4b1f      	ldr	r3, [pc, #124]	; (800217c <MX_USART2_UART_Init+0x90>)
 8002100:	2200      	movs	r2, #0
 8002102:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002104:	4b1d      	ldr	r3, [pc, #116]	; (800217c <MX_USART2_UART_Init+0x90>)
 8002106:	2200      	movs	r2, #0
 8002108:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800210a:	4b1c      	ldr	r3, [pc, #112]	; (800217c <MX_USART2_UART_Init+0x90>)
 800210c:	2200      	movs	r2, #0
 800210e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002110:	4b1a      	ldr	r3, [pc, #104]	; (800217c <MX_USART2_UART_Init+0x90>)
 8002112:	220c      	movs	r2, #12
 8002114:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002116:	4b19      	ldr	r3, [pc, #100]	; (800217c <MX_USART2_UART_Init+0x90>)
 8002118:	2200      	movs	r2, #0
 800211a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800211c:	4b17      	ldr	r3, [pc, #92]	; (800217c <MX_USART2_UART_Init+0x90>)
 800211e:	2200      	movs	r2, #0
 8002120:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002122:	4b16      	ldr	r3, [pc, #88]	; (800217c <MX_USART2_UART_Init+0x90>)
 8002124:	2200      	movs	r2, #0
 8002126:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002128:	4b14      	ldr	r3, [pc, #80]	; (800217c <MX_USART2_UART_Init+0x90>)
 800212a:	2200      	movs	r2, #0
 800212c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800212e:	4b13      	ldr	r3, [pc, #76]	; (800217c <MX_USART2_UART_Init+0x90>)
 8002130:	2200      	movs	r2, #0
 8002132:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002134:	4811      	ldr	r0, [pc, #68]	; (800217c <MX_USART2_UART_Init+0x90>)
 8002136:	f006 fa90 	bl	800865a <HAL_UART_Init>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002140:	f7ff fae6 	bl	8001710 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002144:	2100      	movs	r1, #0
 8002146:	480d      	ldr	r0, [pc, #52]	; (800217c <MX_USART2_UART_Init+0x90>)
 8002148:	f008 fa33 	bl	800a5b2 <HAL_UARTEx_SetTxFifoThreshold>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002152:	f7ff fadd 	bl	8001710 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002156:	2100      	movs	r1, #0
 8002158:	4808      	ldr	r0, [pc, #32]	; (800217c <MX_USART2_UART_Init+0x90>)
 800215a:	f008 fa68 	bl	800a62e <HAL_UARTEx_SetRxFifoThreshold>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002164:	f7ff fad4 	bl	8001710 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002168:	4804      	ldr	r0, [pc, #16]	; (800217c <MX_USART2_UART_Init+0x90>)
 800216a:	f008 f9e9 	bl	800a540 <HAL_UARTEx_DisableFifoMode>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002174:	f7ff facc 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20000574 	.word	0x20000574
 8002180:	40004400 	.word	0x40004400

08002184 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002188:	4b22      	ldr	r3, [pc, #136]	; (8002214 <MX_USART3_UART_Init+0x90>)
 800218a:	4a23      	ldr	r2, [pc, #140]	; (8002218 <MX_USART3_UART_Init+0x94>)
 800218c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800218e:	4b21      	ldr	r3, [pc, #132]	; (8002214 <MX_USART3_UART_Init+0x90>)
 8002190:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002194:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002196:	4b1f      	ldr	r3, [pc, #124]	; (8002214 <MX_USART3_UART_Init+0x90>)
 8002198:	2200      	movs	r2, #0
 800219a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800219c:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <MX_USART3_UART_Init+0x90>)
 800219e:	2200      	movs	r2, #0
 80021a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021a2:	4b1c      	ldr	r3, [pc, #112]	; (8002214 <MX_USART3_UART_Init+0x90>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021a8:	4b1a      	ldr	r3, [pc, #104]	; (8002214 <MX_USART3_UART_Init+0x90>)
 80021aa:	220c      	movs	r2, #12
 80021ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ae:	4b19      	ldr	r3, [pc, #100]	; (8002214 <MX_USART3_UART_Init+0x90>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b4:	4b17      	ldr	r3, [pc, #92]	; (8002214 <MX_USART3_UART_Init+0x90>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021ba:	4b16      	ldr	r3, [pc, #88]	; (8002214 <MX_USART3_UART_Init+0x90>)
 80021bc:	2200      	movs	r2, #0
 80021be:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021c0:	4b14      	ldr	r3, [pc, #80]	; (8002214 <MX_USART3_UART_Init+0x90>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021c6:	4b13      	ldr	r3, [pc, #76]	; (8002214 <MX_USART3_UART_Init+0x90>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021cc:	4811      	ldr	r0, [pc, #68]	; (8002214 <MX_USART3_UART_Init+0x90>)
 80021ce:	f006 fa44 	bl	800865a <HAL_UART_Init>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80021d8:	f7ff fa9a 	bl	8001710 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021dc:	2100      	movs	r1, #0
 80021de:	480d      	ldr	r0, [pc, #52]	; (8002214 <MX_USART3_UART_Init+0x90>)
 80021e0:	f008 f9e7 	bl	800a5b2 <HAL_UARTEx_SetTxFifoThreshold>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80021ea:	f7ff fa91 	bl	8001710 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021ee:	2100      	movs	r1, #0
 80021f0:	4808      	ldr	r0, [pc, #32]	; (8002214 <MX_USART3_UART_Init+0x90>)
 80021f2:	f008 fa1c 	bl	800a62e <HAL_UARTEx_SetRxFifoThreshold>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80021fc:	f7ff fa88 	bl	8001710 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002200:	4804      	ldr	r0, [pc, #16]	; (8002214 <MX_USART3_UART_Init+0x90>)
 8002202:	f008 f99d 	bl	800a540 <HAL_UARTEx_DisableFifoMode>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800220c:	f7ff fa80 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002210:	bf00      	nop
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000604 	.word	0x20000604
 8002218:	40004800 	.word	0x40004800

0800221c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b0a0      	sub	sp, #128	; 0x80
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002224:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002234:	f107 0318 	add.w	r3, r7, #24
 8002238:	2254      	movs	r2, #84	; 0x54
 800223a:	2100      	movs	r1, #0
 800223c:	4618      	mov	r0, r3
 800223e:	f009 f8c0 	bl	800b3c2 <memset>
  if(uartHandle->Instance==USART2)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a45      	ldr	r2, [pc, #276]	; (800235c <HAL_UART_MspInit+0x140>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d13f      	bne.n	80022cc <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800224c:	2302      	movs	r3, #2
 800224e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002250:	2300      	movs	r3, #0
 8002252:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002254:	f107 0318 	add.w	r3, r7, #24
 8002258:	4618      	mov	r0, r3
 800225a:	f003 ff4b 	bl	80060f4 <HAL_RCCEx_PeriphCLKConfig>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002264:	f7ff fa54 	bl	8001710 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002268:	4b3d      	ldr	r3, [pc, #244]	; (8002360 <HAL_UART_MspInit+0x144>)
 800226a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226c:	4a3c      	ldr	r2, [pc, #240]	; (8002360 <HAL_UART_MspInit+0x144>)
 800226e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002272:	6593      	str	r3, [r2, #88]	; 0x58
 8002274:	4b3a      	ldr	r3, [pc, #232]	; (8002360 <HAL_UART_MspInit+0x144>)
 8002276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002280:	4b37      	ldr	r3, [pc, #220]	; (8002360 <HAL_UART_MspInit+0x144>)
 8002282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002284:	4a36      	ldr	r2, [pc, #216]	; (8002360 <HAL_UART_MspInit+0x144>)
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800228c:	4b34      	ldr	r3, [pc, #208]	; (8002360 <HAL_UART_MspInit+0x144>)
 800228e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002298:	230c      	movs	r3, #12
 800229a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229c:	2302      	movs	r3, #2
 800229e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a4:	2300      	movs	r3, #0
 80022a6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022a8:	2307      	movs	r3, #7
 80022aa:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022b0:	4619      	mov	r1, r3
 80022b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022b6:	f002 ff45 	bl	8005144 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2100      	movs	r1, #0
 80022be:	2026      	movs	r0, #38	; 0x26
 80022c0:	f002 fbe6 	bl	8004a90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022c4:	2026      	movs	r0, #38	; 0x26
 80022c6:	f002 fbfd 	bl	8004ac4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80022ca:	e043      	b.n	8002354 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a24      	ldr	r2, [pc, #144]	; (8002364 <HAL_UART_MspInit+0x148>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d13e      	bne.n	8002354 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80022d6:	2304      	movs	r3, #4
 80022d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80022da:	2300      	movs	r3, #0
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022de:	f107 0318 	add.w	r3, r7, #24
 80022e2:	4618      	mov	r0, r3
 80022e4:	f003 ff06 	bl	80060f4 <HAL_RCCEx_PeriphCLKConfig>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 80022ee:	f7ff fa0f 	bl	8001710 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80022f2:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <HAL_UART_MspInit+0x144>)
 80022f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f6:	4a1a      	ldr	r2, [pc, #104]	; (8002360 <HAL_UART_MspInit+0x144>)
 80022f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022fc:	6593      	str	r3, [r2, #88]	; 0x58
 80022fe:	4b18      	ldr	r3, [pc, #96]	; (8002360 <HAL_UART_MspInit+0x144>)
 8002300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002302:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800230a:	4b15      	ldr	r3, [pc, #84]	; (8002360 <HAL_UART_MspInit+0x144>)
 800230c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230e:	4a14      	ldr	r2, [pc, #80]	; (8002360 <HAL_UART_MspInit+0x144>)
 8002310:	f043 0304 	orr.w	r3, r3, #4
 8002314:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002316:	4b12      	ldr	r3, [pc, #72]	; (8002360 <HAL_UART_MspInit+0x144>)
 8002318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002322:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002326:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002328:	2302      	movs	r3, #2
 800232a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002330:	2300      	movs	r3, #0
 8002332:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002334:	2307      	movs	r3, #7
 8002336:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002338:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800233c:	4619      	mov	r1, r3
 800233e:	480a      	ldr	r0, [pc, #40]	; (8002368 <HAL_UART_MspInit+0x14c>)
 8002340:	f002 ff00 	bl	8005144 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002344:	2200      	movs	r2, #0
 8002346:	2100      	movs	r1, #0
 8002348:	2027      	movs	r0, #39	; 0x27
 800234a:	f002 fba1 	bl	8004a90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800234e:	2027      	movs	r0, #39	; 0x27
 8002350:	f002 fbb8 	bl	8004ac4 <HAL_NVIC_EnableIRQ>
}
 8002354:	bf00      	nop
 8002356:	3780      	adds	r7, #128	; 0x80
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40004400 	.word	0x40004400
 8002360:	40021000 	.word	0x40021000
 8002364:	40004800 	.word	0x40004800
 8002368:	48000800 	.word	0x48000800

0800236c <Shell_Init>:
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;
extern float Imesf;
extern float encoder_speed;
void Shell_Init(void){
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 8002370:	2224      	movs	r2, #36	; 0x24
 8002372:	2100      	movs	r1, #0
 8002374:	4816      	ldr	r0, [pc, #88]	; (80023d0 <Shell_Init+0x64>)
 8002376:	f009 f824 	bl	800b3c2 <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 800237a:	2240      	movs	r2, #64	; 0x40
 800237c:	2100      	movs	r1, #0
 800237e:	4815      	ldr	r0, [pc, #84]	; (80023d4 <Shell_Init+0x68>)
 8002380:	f009 f81f 	bl	800b3c2 <memset>
 8002384:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <Shell_Init+0x6c>)
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 800238a:	2240      	movs	r2, #64	; 0x40
 800238c:	2100      	movs	r1, #0
 800238e:	4813      	ldr	r0, [pc, #76]	; (80023dc <Shell_Init+0x70>)
 8002390:	f009 f817 	bl	800b3c2 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002394:	2201      	movs	r2, #1
 8002396:	4910      	ldr	r1, [pc, #64]	; (80023d8 <Shell_Init+0x6c>)
 8002398:	4811      	ldr	r0, [pc, #68]	; (80023e0 <Shell_Init+0x74>)
 800239a:	f006 fa45 	bl	8008828 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 800239e:	4811      	ldr	r0, [pc, #68]	; (80023e4 <Shell_Init+0x78>)
 80023a0:	f7fd ff9e 	bl	80002e0 <strlen>
 80023a4:	4603      	mov	r3, r0
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	f04f 33ff 	mov.w	r3, #4294967295
 80023ac:	490d      	ldr	r1, [pc, #52]	; (80023e4 <Shell_Init+0x78>)
 80023ae:	480c      	ldr	r0, [pc, #48]	; (80023e0 <Shell_Init+0x74>)
 80023b0:	f006 f9a3 	bl	80086fa <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 80023b4:	480c      	ldr	r0, [pc, #48]	; (80023e8 <Shell_Init+0x7c>)
 80023b6:	f7fd ff93 	bl	80002e0 <strlen>
 80023ba:	4603      	mov	r3, r0
 80023bc:	b29a      	uxth	r2, r3
 80023be:	f04f 33ff 	mov.w	r3, #4294967295
 80023c2:	4909      	ldr	r1, [pc, #36]	; (80023e8 <Shell_Init+0x7c>)
 80023c4:	4806      	ldr	r0, [pc, #24]	; (80023e0 <Shell_Init+0x74>)
 80023c6:	f006 f998 	bl	80086fa <HAL_UART_Transmit>
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	200007e0 	.word	0x200007e0
 80023d4:	2000079c 	.word	0x2000079c
 80023d8:	20000698 	.word	0x20000698
 80023dc:	2000069c 	.word	0x2000069c
 80023e0:	20000574 	.word	0x20000574
 80023e4:	20000020 	.word	0x20000020
 80023e8:	20000004 	.word	0x20000004
 80023ec:	00000000 	.word	0x00000000

080023f0 <Shell_Loop>:

void Shell_Loop(void){
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
	if(uartRxReceived){
 80023f6:	4b8e      	ldr	r3, [pc, #568]	; (8002630 <Shell_Loop+0x240>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d05b      	beq.n	80024b6 <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 80023fe:	4b8d      	ldr	r3, [pc, #564]	; (8002634 <Shell_Loop+0x244>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b08      	cmp	r3, #8
 8002404:	d034      	beq.n	8002470 <Shell_Loop+0x80>
 8002406:	2b0d      	cmp	r3, #13
 8002408:	d142      	bne.n	8002490 <Shell_Loop+0xa0>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 800240a:	f04f 33ff 	mov.w	r3, #4294967295
 800240e:	2203      	movs	r2, #3
 8002410:	4989      	ldr	r1, [pc, #548]	; (8002638 <Shell_Loop+0x248>)
 8002412:	488a      	ldr	r0, [pc, #552]	; (800263c <Shell_Loop+0x24c>)
 8002414:	f006 f971 	bl	80086fa <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 8002418:	4b89      	ldr	r3, [pc, #548]	; (8002640 <Shell_Loop+0x250>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a89      	ldr	r2, [pc, #548]	; (8002644 <Shell_Loop+0x254>)
 800241e:	2100      	movs	r1, #0
 8002420:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 8002422:	4b89      	ldr	r3, [pc, #548]	; (8002648 <Shell_Loop+0x258>)
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 8002428:	4988      	ldr	r1, [pc, #544]	; (800264c <Shell_Loop+0x25c>)
 800242a:	4886      	ldr	r0, [pc, #536]	; (8002644 <Shell_Loop+0x254>)
 800242c:	f008 ffd2 	bl	800b3d4 <strtok>
 8002430:	4603      	mov	r3, r0
 8002432:	4a87      	ldr	r2, [pc, #540]	; (8002650 <Shell_Loop+0x260>)
 8002434:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8002436:	e010      	b.n	800245a <Shell_Loop+0x6a>
				argv[argc++] = token;
 8002438:	4b83      	ldr	r3, [pc, #524]	; (8002648 <Shell_Loop+0x258>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	1c5a      	adds	r2, r3, #1
 800243e:	4982      	ldr	r1, [pc, #520]	; (8002648 <Shell_Loop+0x258>)
 8002440:	600a      	str	r2, [r1, #0]
 8002442:	4a83      	ldr	r2, [pc, #524]	; (8002650 <Shell_Loop+0x260>)
 8002444:	6812      	ldr	r2, [r2, #0]
 8002446:	4983      	ldr	r1, [pc, #524]	; (8002654 <Shell_Loop+0x264>)
 8002448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 800244c:	497f      	ldr	r1, [pc, #508]	; (800264c <Shell_Loop+0x25c>)
 800244e:	2000      	movs	r0, #0
 8002450:	f008 ffc0 	bl	800b3d4 <strtok>
 8002454:	4603      	mov	r3, r0
 8002456:	4a7e      	ldr	r2, [pc, #504]	; (8002650 <Shell_Loop+0x260>)
 8002458:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 800245a:	4b7d      	ldr	r3, [pc, #500]	; (8002650 <Shell_Loop+0x260>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1ea      	bne.n	8002438 <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 8002462:	4b77      	ldr	r3, [pc, #476]	; (8002640 <Shell_Loop+0x250>)
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 8002468:	4b7b      	ldr	r3, [pc, #492]	; (8002658 <Shell_Loop+0x268>)
 800246a:	2201      	movs	r2, #1
 800246c:	601a      	str	r2, [r3, #0]
			break;
 800246e:	e01f      	b.n	80024b0 <Shell_Loop+0xc0>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 8002470:	4b73      	ldr	r3, [pc, #460]	; (8002640 <Shell_Loop+0x250>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	1e5a      	subs	r2, r3, #1
 8002476:	4972      	ldr	r1, [pc, #456]	; (8002640 <Shell_Loop+0x250>)
 8002478:	600a      	str	r2, [r1, #0]
 800247a:	4a72      	ldr	r2, [pc, #456]	; (8002644 <Shell_Loop+0x254>)
 800247c:	2100      	movs	r1, #0
 800247e:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 8002480:	f04f 33ff 	mov.w	r3, #4294967295
 8002484:	2204      	movs	r2, #4
 8002486:	4975      	ldr	r1, [pc, #468]	; (800265c <Shell_Loop+0x26c>)
 8002488:	486c      	ldr	r0, [pc, #432]	; (800263c <Shell_Loop+0x24c>)
 800248a:	f006 f936 	bl	80086fa <HAL_UART_Transmit>
			break;
 800248e:	e00f      	b.n	80024b0 <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8002490:	4b6b      	ldr	r3, [pc, #428]	; (8002640 <Shell_Loop+0x250>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	496a      	ldr	r1, [pc, #424]	; (8002640 <Shell_Loop+0x250>)
 8002498:	600a      	str	r2, [r1, #0]
 800249a:	4a66      	ldr	r2, [pc, #408]	; (8002634 <Shell_Loop+0x244>)
 800249c:	7811      	ldrb	r1, [r2, #0]
 800249e:	4a69      	ldr	r2, [pc, #420]	; (8002644 <Shell_Loop+0x254>)
 80024a0:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80024a2:	f04f 33ff 	mov.w	r3, #4294967295
 80024a6:	2201      	movs	r2, #1
 80024a8:	4962      	ldr	r1, [pc, #392]	; (8002634 <Shell_Loop+0x244>)
 80024aa:	4864      	ldr	r0, [pc, #400]	; (800263c <Shell_Loop+0x24c>)
 80024ac:	f006 f925 	bl	80086fa <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 80024b0:	4b5f      	ldr	r3, [pc, #380]	; (8002630 <Shell_Loop+0x240>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 80024b6:	4b68      	ldr	r3, [pc, #416]	; (8002658 <Shell_Loop+0x268>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 8194 	beq.w	80027e8 <Shell_Loop+0x3f8>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 80024c0:	4b64      	ldr	r3, [pc, #400]	; (8002654 <Shell_Loop+0x264>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4966      	ldr	r1, [pc, #408]	; (8002660 <Shell_Loop+0x270>)
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fd feaa 	bl	8000220 <strcmp>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d107      	bne.n	80024e2 <Shell_Loop+0xf2>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 80024d2:	f04f 33ff 	mov.w	r3, #4294967295
 80024d6:	221a      	movs	r2, #26
 80024d8:	4962      	ldr	r1, [pc, #392]	; (8002664 <Shell_Loop+0x274>)
 80024da:	4858      	ldr	r0, [pc, #352]	; (800263c <Shell_Loop+0x24c>)
 80024dc:	f006 f90d 	bl	80086fa <HAL_UART_Transmit>
 80024e0:	e178      	b.n	80027d4 <Shell_Loop+0x3e4>
		}
		else if(strcmp(argv[0],"help")==0){
 80024e2:	4b5c      	ldr	r3, [pc, #368]	; (8002654 <Shell_Loop+0x264>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4960      	ldr	r1, [pc, #384]	; (8002668 <Shell_Loop+0x278>)
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fd fe99 	bl	8000220 <strcmp>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10e      	bne.n	8002512 <Shell_Loop+0x122>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE,
 80024f4:	4a5d      	ldr	r2, [pc, #372]	; (800266c <Shell_Loop+0x27c>)
 80024f6:	2140      	movs	r1, #64	; 0x40
 80024f8:	485d      	ldr	r0, [pc, #372]	; (8002670 <Shell_Loop+0x280>)
 80024fa:	f008 fecb 	bl	800b294 <sniprintf>
 80024fe:	6078      	str	r0, [r7, #4]
					"\r\n start"
					"\r\n stop"
					"\r\n adc"
					"\r\n adc_dma"
					"\r\n encoder");
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	b29a      	uxth	r2, r3
 8002504:	f04f 33ff 	mov.w	r3, #4294967295
 8002508:	4959      	ldr	r1, [pc, #356]	; (8002670 <Shell_Loop+0x280>)
 800250a:	484c      	ldr	r0, [pc, #304]	; (800263c <Shell_Loop+0x24c>)
 800250c:	f006 f8f5 	bl	80086fa <HAL_UART_Transmit>
 8002510:	e160      	b.n	80027d4 <Shell_Loop+0x3e4>
		}
		else if(strcmp(argv[0],"speed")==0){
 8002512:	4b50      	ldr	r3, [pc, #320]	; (8002654 <Shell_Loop+0x264>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4957      	ldr	r1, [pc, #348]	; (8002674 <Shell_Loop+0x284>)
 8002518:	4618      	mov	r0, r3
 800251a:	f7fd fe81 	bl	8000220 <strcmp>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d142      	bne.n	80025aa <Shell_Loop+0x1ba>
			float speedVal=atoi(argv[1]);
 8002524:	4b4b      	ldr	r3, [pc, #300]	; (8002654 <Shell_Loop+0x264>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	4618      	mov	r0, r3
 800252a:	f008 f90d 	bl	800a748 <atoi>
 800252e:	ee07 0a90 	vmov	s15, r0
 8002532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002536:	edc7 7a05 	vstr	s15, [r7, #20]
			if (speedVal> PWM_MAX){
 800253a:	edd7 7a05 	vldr	s15, [r7, #20]
 800253e:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8002678 <Shell_Loop+0x288>
 8002542:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254a:	dd01      	ble.n	8002550 <Shell_Loop+0x160>
				speedVal=PWM_MAX;
 800254c:	4b4b      	ldr	r3, [pc, #300]	; (800267c <Shell_Loop+0x28c>)
 800254e:	617b      	str	r3, [r7, #20]
			}
			if (speedVal< PWM_MIN){
 8002550:	edd7 7a05 	vldr	s15, [r7, #20]
 8002554:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255c:	d502      	bpl.n	8002564 <Shell_Loop+0x174>
				speedVal=PWM_MIN;
 800255e:	f04f 0300 	mov.w	r3, #0
 8002562:	617b      	str	r3, [r7, #20]
			}

			speedVal=(DUTY_MAX*speedVal)/100; //PWM en pourcentage
 8002564:	edd7 7a05 	vldr	s15, [r7, #20]
 8002568:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8002680 <Shell_Loop+0x290>
 800256c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002570:	eddf 6a41 	vldr	s13, [pc, #260]	; 8002678 <Shell_Loop+0x288>
 8002574:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002578:	edc7 7a05 	vstr	s15, [r7, #20]
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,speedVal);
 800257c:	4b41      	ldr	r3, [pc, #260]	; (8002684 <Shell_Loop+0x294>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	edd7 7a05 	vldr	s15, [r7, #20]
 8002584:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002588:	ee17 2a90 	vmov	r2, s15
 800258c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,DUTY_MAX - speedVal);
 800258e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002680 <Shell_Loop+0x290>
 8002592:	edd7 7a05 	vldr	s15, [r7, #20]
 8002596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800259a:	4b3a      	ldr	r3, [pc, #232]	; (8002684 <Shell_Loop+0x294>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025a2:	ee17 2a90 	vmov	r2, s15
 80025a6:	639a      	str	r2, [r3, #56]	; 0x38
 80025a8:	e114      	b.n	80027d4 <Shell_Loop+0x3e4>
		/*
		 * start -> Activation des PWM avec un rapport cyclique de 50%
		 * stop  -> Désactivation des PWM
		 * adc   -> On affiche la mesure du courant
		 */
		else if(strcmp(argv[0],"start")==0){
 80025aa:	4b2a      	ldr	r3, [pc, #168]	; (8002654 <Shell_Loop+0x264>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4936      	ldr	r1, [pc, #216]	; (8002688 <Shell_Loop+0x298>)
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fd fe35 	bl	8000220 <strcmp>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d11e      	bne.n	80025fa <Shell_Loop+0x20a>

			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,0.5*DUTY_MAX);
 80025bc:	4b31      	ldr	r3, [pc, #196]	; (8002684 <Shell_Loop+0x294>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f640 024d 	movw	r2, #2125	; 0x84d
 80025c4:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,0.5*DUTY_MAX);
 80025c6:	4b2f      	ldr	r3, [pc, #188]	; (8002684 <Shell_Loop+0x294>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f640 024d 	movw	r2, #2125	; 0x84d
 80025ce:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80025d0:	2100      	movs	r1, #0
 80025d2:	482c      	ldr	r0, [pc, #176]	; (8002684 <Shell_Loop+0x294>)
 80025d4:	f004 f904 	bl	80067e0 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80025d8:	2100      	movs	r1, #0
 80025da:	482a      	ldr	r0, [pc, #168]	; (8002684 <Shell_Loop+0x294>)
 80025dc:	f005 fd6a 	bl	80080b4 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80025e0:	2104      	movs	r1, #4
 80025e2:	4828      	ldr	r0, [pc, #160]	; (8002684 <Shell_Loop+0x294>)
 80025e4:	f004 f8fc 	bl	80067e0 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80025e8:	2104      	movs	r1, #4
 80025ea:	4826      	ldr	r0, [pc, #152]	; (8002684 <Shell_Loop+0x294>)
 80025ec:	f005 fd62 	bl	80080b4 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80025f0:	213c      	movs	r1, #60	; 0x3c
 80025f2:	4826      	ldr	r0, [pc, #152]	; (800268c <Shell_Loop+0x29c>)
 80025f4:	f004 fb48 	bl	8006c88 <HAL_TIM_Encoder_Start>
 80025f8:	e0ec      	b.n	80027d4 <Shell_Loop+0x3e4>

		}
		else if(strcmp(argv[0],"stop")==0){
 80025fa:	4b16      	ldr	r3, [pc, #88]	; (8002654 <Shell_Loop+0x264>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4924      	ldr	r1, [pc, #144]	; (8002690 <Shell_Loop+0x2a0>)
 8002600:	4618      	mov	r0, r3
 8002602:	f7fd fe0d 	bl	8000220 <strcmp>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d143      	bne.n	8002694 <Shell_Loop+0x2a4>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800260c:	2100      	movs	r1, #0
 800260e:	481d      	ldr	r0, [pc, #116]	; (8002684 <Shell_Loop+0x294>)
 8002610:	f004 f9f8 	bl	8006a04 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8002614:	2100      	movs	r1, #0
 8002616:	481b      	ldr	r0, [pc, #108]	; (8002684 <Shell_Loop+0x294>)
 8002618:	f005 fe0e 	bl	8008238 <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800261c:	2104      	movs	r1, #4
 800261e:	4819      	ldr	r0, [pc, #100]	; (8002684 <Shell_Loop+0x294>)
 8002620:	f004 f9f0 	bl	8006a04 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8002624:	2104      	movs	r1, #4
 8002626:	4817      	ldr	r0, [pc, #92]	; (8002684 <Shell_Loop+0x294>)
 8002628:	f005 fe06 	bl	8008238 <HAL_TIMEx_PWMN_Stop>
 800262c:	e0d2      	b.n	80027d4 <Shell_Loop+0x3e4>
 800262e:	bf00      	nop
 8002630:	20000694 	.word	0x20000694
 8002634:	20000698 	.word	0x20000698
 8002638:	20000088 	.word	0x20000088
 800263c:	20000574 	.word	0x20000574
 8002640:	200007dc 	.word	0x200007dc
 8002644:	2000079c 	.word	0x2000079c
 8002648:	20000804 	.word	0x20000804
 800264c:	0800d688 	.word	0x0800d688
 8002650:	20000808 	.word	0x20000808
 8002654:	200007e0 	.word	0x200007e0
 8002658:	2000080c 	.word	0x2000080c
 800265c:	2000008c 	.word	0x2000008c
 8002660:	0800d68c 	.word	0x0800d68c
 8002664:	200000a4 	.word	0x200000a4
 8002668:	0800d69c 	.word	0x0800d69c
 800266c:	0800d6a4 	.word	0x0800d6a4
 8002670:	2000069c 	.word	0x2000069c
 8002674:	0800d6d4 	.word	0x0800d6d4
 8002678:	42c80000 	.word	0x42c80000
 800267c:	42c80000 	.word	0x42c80000
 8002680:	4584d000 	.word	0x4584d000
 8002684:	20000444 	.word	0x20000444
 8002688:	0800d6dc 	.word	0x0800d6dc
 800268c:	200004dc 	.word	0x200004dc
 8002690:	0800d6e4 	.word	0x0800d6e4
		 * Nouvelle commande shell "adc" qui permet de mesurer le courant en pooling
		 * valueADC est la valeur qu'on récupère de l'ADC
		 * I_mes -> Variable qui correspond à la valeur du courant
		 *
		 */
		else if(strcmp(argv[0],"adc")==0){
 8002694:	4b5c      	ldr	r3, [pc, #368]	; (8002808 <Shell_Loop+0x418>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	495c      	ldr	r1, [pc, #368]	; (800280c <Shell_Loop+0x41c>)
 800269a:	4618      	mov	r0, r3
 800269c:	f7fd fdc0 	bl	8000220 <strcmp>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d14f      	bne.n	8002746 <Shell_Loop+0x356>
			// METHODE POOLING
			// ADCP -> ADC POOLING
			HAL_ADC_Start(&hadc1);
 80026a6:	485a      	ldr	r0, [pc, #360]	; (8002810 <Shell_Loop+0x420>)
 80026a8:	f000 fd72 	bl	8003190 <HAL_ADC_Start>
			uint16_t valueADC;
			valueADC= HAL_ADC_GetValue(&hadc1);
 80026ac:	4858      	ldr	r0, [pc, #352]	; (8002810 <Shell_Loop+0x420>)
 80026ae:	f000 ff27 	bl	8003500 <HAL_ADC_GetValue>
 80026b2:	4603      	mov	r3, r0
 80026b4:	827b      	strh	r3, [r7, #18]
			float us_ADC, valueCurrent ;
			us_ADC = (valueADC/4096.0)*3.3;
 80026b6:	8a7b      	ldrh	r3, [r7, #18]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fd ff6b 	bl	8000594 <__aeabi_i2d>
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	4b54      	ldr	r3, [pc, #336]	; (8002814 <Shell_Loop+0x424>)
 80026c4:	f7fe f8fa 	bl	80008bc <__aeabi_ddiv>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	4610      	mov	r0, r2
 80026ce:	4619      	mov	r1, r3
 80026d0:	a347      	add	r3, pc, #284	; (adr r3, 80027f0 <Shell_Loop+0x400>)
 80026d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d6:	f7fd ffc7 	bl	8000668 <__aeabi_dmul>
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	4610      	mov	r0, r2
 80026e0:	4619      	mov	r1, r3
 80026e2:	f7fe fa99 	bl	8000c18 <__aeabi_d2f>
 80026e6:	4603      	mov	r3, r0
 80026e8:	60fb      	str	r3, [r7, #12]
			valueCurrent = (us_ADC-1.65)/0.05;
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f7fd ff64 	bl	80005b8 <__aeabi_f2d>
 80026f0:	a341      	add	r3, pc, #260	; (adr r3, 80027f8 <Shell_Loop+0x408>)
 80026f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f6:	f7fd fdff 	bl	80002f8 <__aeabi_dsub>
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	4610      	mov	r0, r2
 8002700:	4619      	mov	r1, r3
 8002702:	a33f      	add	r3, pc, #252	; (adr r3, 8002800 <Shell_Loop+0x410>)
 8002704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002708:	f7fe f8d8 	bl	80008bc <__aeabi_ddiv>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4610      	mov	r0, r2
 8002712:	4619      	mov	r1, r3
 8002714:	f7fe fa80 	bl	8000c18 <__aeabi_d2f>
 8002718:	4603      	mov	r3, r0
 800271a:	60bb      	str	r3, [r7, #8]
			sprintf(adc, "Courant : %f A\r\n", valueCurrent);
 800271c:	68b8      	ldr	r0, [r7, #8]
 800271e:	f7fd ff4b 	bl	80005b8 <__aeabi_f2d>
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	493c      	ldr	r1, [pc, #240]	; (8002818 <Shell_Loop+0x428>)
 8002728:	483c      	ldr	r0, [pc, #240]	; (800281c <Shell_Loop+0x42c>)
 800272a:	f008 fde7 	bl	800b2fc <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)adc,strlen(adc),HAL_MAX_DELAY);
 800272e:	483b      	ldr	r0, [pc, #236]	; (800281c <Shell_Loop+0x42c>)
 8002730:	f7fd fdd6 	bl	80002e0 <strlen>
 8002734:	4603      	mov	r3, r0
 8002736:	b29a      	uxth	r2, r3
 8002738:	f04f 33ff 	mov.w	r3, #4294967295
 800273c:	4937      	ldr	r1, [pc, #220]	; (800281c <Shell_Loop+0x42c>)
 800273e:	4838      	ldr	r0, [pc, #224]	; (8002820 <Shell_Loop+0x430>)
 8002740:	f005 ffdb 	bl	80086fa <HAL_UART_Transmit>
 8002744:	e046      	b.n	80027d4 <Shell_Loop+0x3e4>
		}
		else if(strcmp(argv[0],"adc_dma")==0){
 8002746:	4b30      	ldr	r3, [pc, #192]	; (8002808 <Shell_Loop+0x418>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4936      	ldr	r1, [pc, #216]	; (8002824 <Shell_Loop+0x434>)
 800274c:	4618      	mov	r0, r3
 800274e:	f7fd fd67 	bl	8000220 <strcmp>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d116      	bne.n	8002786 <Shell_Loop+0x396>

			sprintf(adc_dma, "Courant : %f A\r\n", Imesf);
 8002758:	4b33      	ldr	r3, [pc, #204]	; (8002828 <Shell_Loop+0x438>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f7fd ff2b 	bl	80005b8 <__aeabi_f2d>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	492c      	ldr	r1, [pc, #176]	; (8002818 <Shell_Loop+0x428>)
 8002768:	4830      	ldr	r0, [pc, #192]	; (800282c <Shell_Loop+0x43c>)
 800276a:	f008 fdc7 	bl	800b2fc <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)adc_dma,strlen(adc_dma),HAL_MAX_DELAY);
 800276e:	482f      	ldr	r0, [pc, #188]	; (800282c <Shell_Loop+0x43c>)
 8002770:	f7fd fdb6 	bl	80002e0 <strlen>
 8002774:	4603      	mov	r3, r0
 8002776:	b29a      	uxth	r2, r3
 8002778:	f04f 33ff 	mov.w	r3, #4294967295
 800277c:	492b      	ldr	r1, [pc, #172]	; (800282c <Shell_Loop+0x43c>)
 800277e:	4828      	ldr	r0, [pc, #160]	; (8002820 <Shell_Loop+0x430>)
 8002780:	f005 ffbb 	bl	80086fa <HAL_UART_Transmit>
 8002784:	e026      	b.n	80027d4 <Shell_Loop+0x3e4>
		}
		else if(strcmp(argv[0],"encoder")==0){
 8002786:	4b20      	ldr	r3, [pc, #128]	; (8002808 <Shell_Loop+0x418>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4929      	ldr	r1, [pc, #164]	; (8002830 <Shell_Loop+0x440>)
 800278c:	4618      	mov	r0, r3
 800278e:	f7fd fd47 	bl	8000220 <strcmp>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d116      	bne.n	80027c6 <Shell_Loop+0x3d6>

			sprintf(encoder, "Vitesse : %f tr/s\r\n", encoder_speed);
 8002798:	4b26      	ldr	r3, [pc, #152]	; (8002834 <Shell_Loop+0x444>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f7fd ff0b 	bl	80005b8 <__aeabi_f2d>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	4924      	ldr	r1, [pc, #144]	; (8002838 <Shell_Loop+0x448>)
 80027a8:	4824      	ldr	r0, [pc, #144]	; (800283c <Shell_Loop+0x44c>)
 80027aa:	f008 fda7 	bl	800b2fc <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)encoder,strlen(encoder),HAL_MAX_DELAY);
 80027ae:	4823      	ldr	r0, [pc, #140]	; (800283c <Shell_Loop+0x44c>)
 80027b0:	f7fd fd96 	bl	80002e0 <strlen>
 80027b4:	4603      	mov	r3, r0
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	f04f 33ff 	mov.w	r3, #4294967295
 80027bc:	491f      	ldr	r1, [pc, #124]	; (800283c <Shell_Loop+0x44c>)
 80027be:	4818      	ldr	r0, [pc, #96]	; (8002820 <Shell_Loop+0x430>)
 80027c0:	f005 ff9b 	bl	80086fa <HAL_UART_Transmit>
 80027c4:	e006      	b.n	80027d4 <Shell_Loop+0x3e4>
		}

		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80027c6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ca:	2214      	movs	r2, #20
 80027cc:	491c      	ldr	r1, [pc, #112]	; (8002840 <Shell_Loop+0x450>)
 80027ce:	4814      	ldr	r0, [pc, #80]	; (8002820 <Shell_Loop+0x430>)
 80027d0:	f005 ff93 	bl	80086fa <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80027d4:	f04f 33ff 	mov.w	r3, #4294967295
 80027d8:	221c      	movs	r2, #28
 80027da:	491a      	ldr	r1, [pc, #104]	; (8002844 <Shell_Loop+0x454>)
 80027dc:	4810      	ldr	r0, [pc, #64]	; (8002820 <Shell_Loop+0x430>)
 80027de:	f005 ff8c 	bl	80086fa <HAL_UART_Transmit>
		newCmdReady = 0;
 80027e2:	4b19      	ldr	r3, [pc, #100]	; (8002848 <Shell_Loop+0x458>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
	}
}
 80027e8:	bf00      	nop
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	66666666 	.word	0x66666666
 80027f4:	400a6666 	.word	0x400a6666
 80027f8:	66666666 	.word	0x66666666
 80027fc:	3ffa6666 	.word	0x3ffa6666
 8002800:	9999999a 	.word	0x9999999a
 8002804:	3fa99999 	.word	0x3fa99999
 8002808:	200007e0 	.word	0x200007e0
 800280c:	0800d6ec 	.word	0x0800d6ec
 8002810:	200002ac 	.word	0x200002ac
 8002814:	40b00000 	.word	0x40b00000
 8002818:	0800d6f0 	.word	0x0800d6f0
 800281c:	200006dc 	.word	0x200006dc
 8002820:	20000574 	.word	0x20000574
 8002824:	0800d704 	.word	0x0800d704
 8002828:	200003e8 	.word	0x200003e8
 800282c:	2000071c 	.word	0x2000071c
 8002830:	0800d70c 	.word	0x0800d70c
 8002834:	200003ec 	.word	0x200003ec
 8002838:	0800d714 	.word	0x0800d714
 800283c:	2000075c 	.word	0x2000075c
 8002840:	20000090 	.word	0x20000090
 8002844:	20000004 	.word	0x20000004
 8002848:	2000080c 	.word	0x2000080c

0800284c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <HAL_UART_RxCpltCallback+0x20>)
 8002856:	2201      	movs	r2, #1
 8002858:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800285a:	2201      	movs	r2, #1
 800285c:	4904      	ldr	r1, [pc, #16]	; (8002870 <HAL_UART_RxCpltCallback+0x24>)
 800285e:	4805      	ldr	r0, [pc, #20]	; (8002874 <HAL_UART_RxCpltCallback+0x28>)
 8002860:	f005 ffe2 	bl	8008828 <HAL_UART_Receive_IT>
}
 8002864:	bf00      	nop
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	20000694 	.word	0x20000694
 8002870:	20000698 	.word	0x20000698
 8002874:	20000574 	.word	0x20000574

08002878 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002878:	480d      	ldr	r0, [pc, #52]	; (80028b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800287a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800287c:	480d      	ldr	r0, [pc, #52]	; (80028b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800287e:	490e      	ldr	r1, [pc, #56]	; (80028b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002880:	4a0e      	ldr	r2, [pc, #56]	; (80028bc <LoopForever+0xe>)
  movs r3, #0
 8002882:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002884:	e002      	b.n	800288c <LoopCopyDataInit>

08002886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800288a:	3304      	adds	r3, #4

0800288c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800288c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800288e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002890:	d3f9      	bcc.n	8002886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002892:	4a0b      	ldr	r2, [pc, #44]	; (80028c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002894:	4c0b      	ldr	r4, [pc, #44]	; (80028c4 <LoopForever+0x16>)
  movs r3, #0
 8002896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002898:	e001      	b.n	800289e <LoopFillZerobss>

0800289a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800289a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800289c:	3204      	adds	r2, #4

0800289e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800289e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028a0:	d3fb      	bcc.n	800289a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80028a2:	f7ff f919 	bl	8001ad8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028a6:	f008 fe41 	bl	800b52c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028aa:	f7fe fe57 	bl	800155c <main>

080028ae <LoopForever>:

LoopForever:
    b LoopForever
 80028ae:	e7fe      	b.n	80028ae <LoopForever>
  ldr   r0, =_estack
 80028b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028b8:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 80028bc:	0800db48 	.word	0x0800db48
  ldr r2, =_sbss
 80028c0:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 80028c4:	20000960 	.word	0x20000960

080028c8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028c8:	e7fe      	b.n	80028c8 <ADC3_IRQHandler>

080028ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028d0:	2300      	movs	r3, #0
 80028d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028d4:	2003      	movs	r0, #3
 80028d6:	f002 f8d0 	bl	8004a7a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028da:	200f      	movs	r0, #15
 80028dc:	f7fe ff42 	bl	8001764 <HAL_InitTick>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d002      	beq.n	80028ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	71fb      	strb	r3, [r7, #7]
 80028ea:	e001      	b.n	80028f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028ec:	f7fe ff16 	bl	800171c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028f0:	79fb      	ldrb	r3, [r7, #7]

}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
	...

080028fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <HAL_IncTick+0x1c>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4b05      	ldr	r3, [pc, #20]	; (800291c <HAL_IncTick+0x20>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4413      	add	r3, r2
 800290a:	4a03      	ldr	r2, [pc, #12]	; (8002918 <HAL_IncTick+0x1c>)
 800290c:	6013      	str	r3, [r2, #0]
}
 800290e:	bf00      	nop
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	20000810 	.word	0x20000810
 800291c:	200000c4 	.word	0x200000c4

08002920 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  return uwTick;
 8002924:	4b03      	ldr	r3, [pc, #12]	; (8002934 <HAL_GetTick+0x14>)
 8002926:	681b      	ldr	r3, [r3, #0]
}
 8002928:	4618      	mov	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	20000810 	.word	0x20000810

08002938 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	431a      	orrs	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	609a      	str	r2, [r3, #8]
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
 8002966:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	609a      	str	r2, [r3, #8]
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
 80029ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	3360      	adds	r3, #96	; 0x60
 80029b2:	461a      	mov	r2, r3
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <LL_ADC_SetOffset+0x44>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	4313      	orrs	r3, r2
 80029d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80029d8:	bf00      	nop
 80029da:	371c      	adds	r7, #28
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	03fff000 	.word	0x03fff000

080029e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	3360      	adds	r3, #96	; 0x60
 80029f6:	461a      	mov	r2, r3
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b087      	sub	sp, #28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	3360      	adds	r3, #96	; 0x60
 8002a24:	461a      	mov	r2, r3
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002a3e:	bf00      	nop
 8002a40:	371c      	adds	r7, #28
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b087      	sub	sp, #28
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	3360      	adds	r3, #96	; 0x60
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002a74:	bf00      	nop
 8002a76:	371c      	adds	r7, #28
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	3360      	adds	r3, #96	; 0x60
 8002a90:	461a      	mov	r2, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002aaa:	bf00      	nop
 8002aac:	371c      	adds	r7, #28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	615a      	str	r2, [r3, #20]
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002af0:	2301      	movs	r3, #1
 8002af2:	e000      	b.n	8002af6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b087      	sub	sp, #28
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	60f8      	str	r0, [r7, #12]
 8002b0a:	60b9      	str	r1, [r7, #8]
 8002b0c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	3330      	adds	r3, #48	; 0x30
 8002b12:	461a      	mov	r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	0a1b      	lsrs	r3, r3, #8
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	f003 030c 	and.w	r3, r3, #12
 8002b1e:	4413      	add	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	211f      	movs	r1, #31
 8002b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	401a      	ands	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	0e9b      	lsrs	r3, r3, #26
 8002b3a:	f003 011f 	and.w	r1, r3, #31
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	f003 031f 	and.w	r3, r3, #31
 8002b44:	fa01 f303 	lsl.w	r3, r1, r3
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b4e:	bf00      	nop
 8002b50:	371c      	adds	r7, #28
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b66:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	3314      	adds	r3, #20
 8002b90:	461a      	mov	r2, r3
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	0e5b      	lsrs	r3, r3, #25
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	4413      	add	r3, r2
 8002b9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	0d1b      	lsrs	r3, r3, #20
 8002ba8:	f003 031f 	and.w	r3, r3, #31
 8002bac:	2107      	movs	r1, #7
 8002bae:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	401a      	ands	r2, r3
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	0d1b      	lsrs	r3, r3, #20
 8002bba:	f003 031f 	and.w	r3, r3, #31
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002bca:	bf00      	nop
 8002bcc:	371c      	adds	r7, #28
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
	...

08002bd8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a0f      	ldr	r2, [pc, #60]	; (8002c24 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d10a      	bne.n	8002c02 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002c00:	e00a      	b.n	8002c18 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	401a      	ands	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002c18:	bf00      	nop
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	407f0000 	.word	0x407f0000

08002c28 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 031f 	and.w	r3, r3, #31
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002c70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6093      	str	r3, [r2, #8]
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c98:	d101      	bne.n	8002c9e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002cbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cc0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ce8:	d101      	bne.n	8002cee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d10:	f043 0201 	orr.w	r2, r3, #1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d38:	f043 0202 	orr.w	r2, r3, #2
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <LL_ADC_IsEnabled+0x18>
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <LL_ADC_IsEnabled+0x1a>
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d101      	bne.n	8002d8a <LL_ADC_IsDisableOngoing+0x18>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <LL_ADC_IsDisableOngoing+0x1a>
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002da8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002dac:	f043 0204 	orr.w	r2, r3, #4
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b04      	cmp	r3, #4
 8002dd2:	d101      	bne.n	8002dd8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e000      	b.n	8002dda <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d101      	bne.n	8002dfe <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e0c:	b590      	push	{r4, r7, lr}
 8002e0e:	b089      	sub	sp, #36	; 0x24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e14:	2300      	movs	r3, #0
 8002e16:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e1af      	b.n	8003186 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d109      	bne.n	8002e48 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7fe f99d 	bl	8001174 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff ff19 	bl	8002c84 <LL_ADC_IsDeepPowerDownEnabled>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d004      	beq.n	8002e62 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff feff 	bl	8002c60 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff ff34 	bl	8002cd4 <LL_ADC_IsInternalRegulatorEnabled>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d115      	bne.n	8002e9e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff ff18 	bl	8002cac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e7c:	4b9f      	ldr	r3, [pc, #636]	; (80030fc <HAL_ADC_Init+0x2f0>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	099b      	lsrs	r3, r3, #6
 8002e82:	4a9f      	ldr	r2, [pc, #636]	; (8003100 <HAL_ADC_Init+0x2f4>)
 8002e84:	fba2 2303 	umull	r2, r3, r2, r3
 8002e88:	099b      	lsrs	r3, r3, #6
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e90:	e002      	b.n	8002e98 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	3b01      	subs	r3, #1
 8002e96:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f9      	bne.n	8002e92 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff ff16 	bl	8002cd4 <LL_ADC_IsInternalRegulatorEnabled>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10d      	bne.n	8002eca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb2:	f043 0210 	orr.w	r2, r3, #16
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ebe:	f043 0201 	orr.w	r2, r3, #1
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff ff76 	bl	8002dc0 <LL_ADC_REG_IsConversionOngoing>
 8002ed4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eda:	f003 0310 	and.w	r3, r3, #16
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f040 8148 	bne.w	8003174 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f040 8144 	bne.w	8003174 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002ef4:	f043 0202 	orr.w	r2, r3, #2
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff ff23 	bl	8002d4c <LL_ADC_IsEnabled>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d141      	bne.n	8002f90 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f14:	d004      	beq.n	8002f20 <HAL_ADC_Init+0x114>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a7a      	ldr	r2, [pc, #488]	; (8003104 <HAL_ADC_Init+0x2f8>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d10f      	bne.n	8002f40 <HAL_ADC_Init+0x134>
 8002f20:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002f24:	f7ff ff12 	bl	8002d4c <LL_ADC_IsEnabled>
 8002f28:	4604      	mov	r4, r0
 8002f2a:	4876      	ldr	r0, [pc, #472]	; (8003104 <HAL_ADC_Init+0x2f8>)
 8002f2c:	f7ff ff0e 	bl	8002d4c <LL_ADC_IsEnabled>
 8002f30:	4603      	mov	r3, r0
 8002f32:	4323      	orrs	r3, r4
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	bf0c      	ite	eq
 8002f38:	2301      	moveq	r3, #1
 8002f3a:	2300      	movne	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	e012      	b.n	8002f66 <HAL_ADC_Init+0x15a>
 8002f40:	4871      	ldr	r0, [pc, #452]	; (8003108 <HAL_ADC_Init+0x2fc>)
 8002f42:	f7ff ff03 	bl	8002d4c <LL_ADC_IsEnabled>
 8002f46:	4604      	mov	r4, r0
 8002f48:	4870      	ldr	r0, [pc, #448]	; (800310c <HAL_ADC_Init+0x300>)
 8002f4a:	f7ff feff 	bl	8002d4c <LL_ADC_IsEnabled>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	431c      	orrs	r4, r3
 8002f52:	486f      	ldr	r0, [pc, #444]	; (8003110 <HAL_ADC_Init+0x304>)
 8002f54:	f7ff fefa 	bl	8002d4c <LL_ADC_IsEnabled>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	4323      	orrs	r3, r4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	bf0c      	ite	eq
 8002f60:	2301      	moveq	r3, #1
 8002f62:	2300      	movne	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d012      	beq.n	8002f90 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f72:	d004      	beq.n	8002f7e <HAL_ADC_Init+0x172>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a62      	ldr	r2, [pc, #392]	; (8003104 <HAL_ADC_Init+0x2f8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d101      	bne.n	8002f82 <HAL_ADC_Init+0x176>
 8002f7e:	4a65      	ldr	r2, [pc, #404]	; (8003114 <HAL_ADC_Init+0x308>)
 8002f80:	e000      	b.n	8002f84 <HAL_ADC_Init+0x178>
 8002f82:	4a65      	ldr	r2, [pc, #404]	; (8003118 <HAL_ADC_Init+0x30c>)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	f7ff fcd4 	bl	8002938 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	7f5b      	ldrb	r3, [r3, #29]
 8002f94:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f9a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002fa0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002fa6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fae:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d106      	bne.n	8002fcc <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	045b      	lsls	r3, r3, #17
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d009      	beq.n	8002fe8 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68da      	ldr	r2, [r3, #12]
 8002fee:	4b4b      	ldr	r3, [pc, #300]	; (800311c <HAL_ADC_Init+0x310>)
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6812      	ldr	r2, [r2, #0]
 8002ff6:	69b9      	ldr	r1, [r7, #24]
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff fed2 	bl	8002dc0 <LL_ADC_REG_IsConversionOngoing>
 800301c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff fedf 	bl	8002de6 <LL_ADC_INJ_IsConversionOngoing>
 8003028:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d17f      	bne.n	8003130 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d17c      	bne.n	8003130 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800303a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003042:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003044:	4313      	orrs	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003052:	f023 0302 	bic.w	r3, r3, #2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6812      	ldr	r2, [r2, #0]
 800305a:	69b9      	ldr	r1, [r7, #24]
 800305c:	430b      	orrs	r3, r1
 800305e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d017      	beq.n	8003098 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691a      	ldr	r2, [r3, #16]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003076:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003080:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003084:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6911      	ldr	r1, [r2, #16]
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6812      	ldr	r2, [r2, #0]
 8003090:	430b      	orrs	r3, r1
 8003092:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003096:	e013      	b.n	80030c0 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691a      	ldr	r2, [r3, #16]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80030a6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80030b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030bc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d12a      	bne.n	8003120 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80030d4:	f023 0304 	bic.w	r3, r3, #4
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80030e0:	4311      	orrs	r1, r2
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80030e6:	4311      	orrs	r1, r2
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80030ec:	430a      	orrs	r2, r1
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f042 0201 	orr.w	r2, r2, #1
 80030f8:	611a      	str	r2, [r3, #16]
 80030fa:	e019      	b.n	8003130 <HAL_ADC_Init+0x324>
 80030fc:	20000000 	.word	0x20000000
 8003100:	053e2d63 	.word	0x053e2d63
 8003104:	50000100 	.word	0x50000100
 8003108:	50000400 	.word	0x50000400
 800310c:	50000500 	.word	0x50000500
 8003110:	50000600 	.word	0x50000600
 8003114:	50000300 	.word	0x50000300
 8003118:	50000700 	.word	0x50000700
 800311c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691a      	ldr	r2, [r3, #16]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0201 	bic.w	r2, r2, #1
 800312e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d10c      	bne.n	8003152 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	f023 010f 	bic.w	r1, r3, #15
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	1e5a      	subs	r2, r3, #1
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	631a      	str	r2, [r3, #48]	; 0x30
 8003150:	e007      	b.n	8003162 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 020f 	bic.w	r2, r2, #15
 8003160:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003166:	f023 0303 	bic.w	r3, r3, #3
 800316a:	f043 0201 	orr.w	r2, r3, #1
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	65da      	str	r2, [r3, #92]	; 0x5c
 8003172:	e007      	b.n	8003184 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003178:	f043 0210 	orr.w	r2, r3, #16
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003184:	7ffb      	ldrb	r3, [r7, #31]
}
 8003186:	4618      	mov	r0, r3
 8003188:	3724      	adds	r7, #36	; 0x24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd90      	pop	{r4, r7, pc}
 800318e:	bf00      	nop

08003190 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031a0:	d004      	beq.n	80031ac <HAL_ADC_Start+0x1c>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a67      	ldr	r2, [pc, #412]	; (8003344 <HAL_ADC_Start+0x1b4>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d101      	bne.n	80031b0 <HAL_ADC_Start+0x20>
 80031ac:	4b66      	ldr	r3, [pc, #408]	; (8003348 <HAL_ADC_Start+0x1b8>)
 80031ae:	e000      	b.n	80031b2 <HAL_ADC_Start+0x22>
 80031b0:	4b66      	ldr	r3, [pc, #408]	; (800334c <HAL_ADC_Start+0x1bc>)
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff fd38 	bl	8002c28 <LL_ADC_GetMultimode>
 80031b8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff fdfe 	bl	8002dc0 <LL_ADC_REG_IsConversionOngoing>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f040 80b4 	bne.w	8003334 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d101      	bne.n	80031da <HAL_ADC_Start+0x4a>
 80031d6:	2302      	movs	r3, #2
 80031d8:	e0af      	b.n	800333a <HAL_ADC_Start+0x1aa>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f001 f858 	bl	8004298 <ADC_Enable>
 80031e8:	4603      	mov	r3, r0
 80031ea:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80031ec:	7dfb      	ldrb	r3, [r7, #23]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f040 809b 	bne.w	800332a <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031fc:	f023 0301 	bic.w	r3, r3, #1
 8003200:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a4d      	ldr	r2, [pc, #308]	; (8003344 <HAL_ADC_Start+0x1b4>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d009      	beq.n	8003226 <HAL_ADC_Start+0x96>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a4e      	ldr	r2, [pc, #312]	; (8003350 <HAL_ADC_Start+0x1c0>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d002      	beq.n	8003222 <HAL_ADC_Start+0x92>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	e003      	b.n	800322a <HAL_ADC_Start+0x9a>
 8003222:	4b4c      	ldr	r3, [pc, #304]	; (8003354 <HAL_ADC_Start+0x1c4>)
 8003224:	e001      	b.n	800322a <HAL_ADC_Start+0x9a>
 8003226:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6812      	ldr	r2, [r2, #0]
 800322e:	4293      	cmp	r3, r2
 8003230:	d002      	beq.n	8003238 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d105      	bne.n	8003244 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003248:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800324c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003250:	d106      	bne.n	8003260 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003256:	f023 0206 	bic.w	r2, r3, #6
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	661a      	str	r2, [r3, #96]	; 0x60
 800325e:	e002      	b.n	8003266 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	221c      	movs	r2, #28
 800326c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a32      	ldr	r2, [pc, #200]	; (8003344 <HAL_ADC_Start+0x1b4>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d009      	beq.n	8003294 <HAL_ADC_Start+0x104>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a32      	ldr	r2, [pc, #200]	; (8003350 <HAL_ADC_Start+0x1c0>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d002      	beq.n	8003290 <HAL_ADC_Start+0x100>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	e003      	b.n	8003298 <HAL_ADC_Start+0x108>
 8003290:	4b30      	ldr	r3, [pc, #192]	; (8003354 <HAL_ADC_Start+0x1c4>)
 8003292:	e001      	b.n	8003298 <HAL_ADC_Start+0x108>
 8003294:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6812      	ldr	r2, [r2, #0]
 800329c:	4293      	cmp	r3, r2
 800329e:	d008      	beq.n	80032b2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d005      	beq.n	80032b2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	2b05      	cmp	r3, #5
 80032aa:	d002      	beq.n	80032b2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	2b09      	cmp	r3, #9
 80032b0:	d114      	bne.n	80032dc <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d007      	beq.n	80032d0 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff fd5f 	bl	8002d98 <LL_ADC_REG_StartConversion>
 80032da:	e02d      	b.n	8003338 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a15      	ldr	r2, [pc, #84]	; (8003344 <HAL_ADC_Start+0x1b4>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d009      	beq.n	8003306 <HAL_ADC_Start+0x176>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a16      	ldr	r2, [pc, #88]	; (8003350 <HAL_ADC_Start+0x1c0>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d002      	beq.n	8003302 <HAL_ADC_Start+0x172>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	e003      	b.n	800330a <HAL_ADC_Start+0x17a>
 8003302:	4b14      	ldr	r3, [pc, #80]	; (8003354 <HAL_ADC_Start+0x1c4>)
 8003304:	e001      	b.n	800330a <HAL_ADC_Start+0x17a>
 8003306:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800330a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00f      	beq.n	8003338 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003320:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	65da      	str	r2, [r3, #92]	; 0x5c
 8003328:	e006      	b.n	8003338 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003332:	e001      	b.n	8003338 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003334:	2302      	movs	r3, #2
 8003336:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003338:	7dfb      	ldrb	r3, [r7, #23]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	50000100 	.word	0x50000100
 8003348:	50000300 	.word	0x50000300
 800334c:	50000700 	.word	0x50000700
 8003350:	50000500 	.word	0x50000500
 8003354:	50000400 	.word	0x50000400

08003358 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800336c:	d004      	beq.n	8003378 <HAL_ADC_Start_DMA+0x20>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a5a      	ldr	r2, [pc, #360]	; (80034dc <HAL_ADC_Start_DMA+0x184>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d101      	bne.n	800337c <HAL_ADC_Start_DMA+0x24>
 8003378:	4b59      	ldr	r3, [pc, #356]	; (80034e0 <HAL_ADC_Start_DMA+0x188>)
 800337a:	e000      	b.n	800337e <HAL_ADC_Start_DMA+0x26>
 800337c:	4b59      	ldr	r3, [pc, #356]	; (80034e4 <HAL_ADC_Start_DMA+0x18c>)
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff fc52 	bl	8002c28 <LL_ADC_GetMultimode>
 8003384:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff fd18 	bl	8002dc0 <LL_ADC_REG_IsConversionOngoing>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	f040 809b 	bne.w	80034ce <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <HAL_ADC_Start_DMA+0x4e>
 80033a2:	2302      	movs	r3, #2
 80033a4:	e096      	b.n	80034d4 <HAL_ADC_Start_DMA+0x17c>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a4d      	ldr	r2, [pc, #308]	; (80034e8 <HAL_ADC_Start_DMA+0x190>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d008      	beq.n	80033ca <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d005      	beq.n	80033ca <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	2b05      	cmp	r3, #5
 80033c2:	d002      	beq.n	80033ca <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	2b09      	cmp	r3, #9
 80033c8:	d17a      	bne.n	80034c0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 ff64 	bl	8004298 <ADC_Enable>
 80033d0:	4603      	mov	r3, r0
 80033d2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80033d4:	7dfb      	ldrb	r3, [r7, #23]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d16d      	bne.n	80034b6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80033e2:	f023 0301 	bic.w	r3, r3, #1
 80033e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a3a      	ldr	r2, [pc, #232]	; (80034dc <HAL_ADC_Start_DMA+0x184>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d009      	beq.n	800340c <HAL_ADC_Start_DMA+0xb4>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a3b      	ldr	r2, [pc, #236]	; (80034ec <HAL_ADC_Start_DMA+0x194>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d002      	beq.n	8003408 <HAL_ADC_Start_DMA+0xb0>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	e003      	b.n	8003410 <HAL_ADC_Start_DMA+0xb8>
 8003408:	4b39      	ldr	r3, [pc, #228]	; (80034f0 <HAL_ADC_Start_DMA+0x198>)
 800340a:	e001      	b.n	8003410 <HAL_ADC_Start_DMA+0xb8>
 800340c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	6812      	ldr	r2, [r2, #0]
 8003414:	4293      	cmp	r3, r2
 8003416:	d002      	beq.n	800341e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d105      	bne.n	800342a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003422:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d006      	beq.n	8003444 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800343a:	f023 0206 	bic.w	r2, r3, #6
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	661a      	str	r2, [r3, #96]	; 0x60
 8003442:	e002      	b.n	800344a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344e:	4a29      	ldr	r2, [pc, #164]	; (80034f4 <HAL_ADC_Start_DMA+0x19c>)
 8003450:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003456:	4a28      	ldr	r2, [pc, #160]	; (80034f8 <HAL_ADC_Start_DMA+0x1a0>)
 8003458:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345e:	4a27      	ldr	r2, [pc, #156]	; (80034fc <HAL_ADC_Start_DMA+0x1a4>)
 8003460:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	221c      	movs	r2, #28
 8003468:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f042 0210 	orr.w	r2, r2, #16
 8003480:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0201 	orr.w	r2, r2, #1
 8003490:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	3340      	adds	r3, #64	; 0x40
 800349c:	4619      	mov	r1, r3
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f001 fbc5 	bl	8004c30 <HAL_DMA_Start_IT>
 80034a6:	4603      	mov	r3, r0
 80034a8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff fc72 	bl	8002d98 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80034b4:	e00d      	b.n	80034d2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80034be:	e008      	b.n	80034d2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80034cc:	e001      	b.n	80034d2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80034ce:	2302      	movs	r3, #2
 80034d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80034d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	50000100 	.word	0x50000100
 80034e0:	50000300 	.word	0x50000300
 80034e4:	50000700 	.word	0x50000700
 80034e8:	50000600 	.word	0x50000600
 80034ec:	50000500 	.word	0x50000500
 80034f0:	50000400 	.word	0x50000400
 80034f4:	0800441b 	.word	0x0800441b
 80034f8:	080044f3 	.word	0x080044f3
 80034fc:	0800450f 	.word	0x0800450f

08003500 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800350e:	4618      	mov	r0, r3
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
	...

0800351c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08a      	sub	sp, #40	; 0x28
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003524:	2300      	movs	r3, #0
 8003526:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003540:	d004      	beq.n	800354c <HAL_ADC_IRQHandler+0x30>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a8e      	ldr	r2, [pc, #568]	; (8003780 <HAL_ADC_IRQHandler+0x264>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d101      	bne.n	8003550 <HAL_ADC_IRQHandler+0x34>
 800354c:	4b8d      	ldr	r3, [pc, #564]	; (8003784 <HAL_ADC_IRQHandler+0x268>)
 800354e:	e000      	b.n	8003552 <HAL_ADC_IRQHandler+0x36>
 8003550:	4b8d      	ldr	r3, [pc, #564]	; (8003788 <HAL_ADC_IRQHandler+0x26c>)
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff fb68 	bl	8002c28 <LL_ADC_GetMultimode>
 8003558:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d017      	beq.n	8003594 <HAL_ADC_IRQHandler+0x78>
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d012      	beq.n	8003594 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003572:	f003 0310 	and.w	r3, r3, #16
 8003576:	2b00      	cmp	r3, #0
 8003578:	d105      	bne.n	8003586 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f001 f8b8 	bl	80046fc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2202      	movs	r2, #2
 8003592:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	f003 0304 	and.w	r3, r3, #4
 800359a:	2b00      	cmp	r3, #0
 800359c:	d004      	beq.n	80035a8 <HAL_ADC_IRQHandler+0x8c>
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10b      	bne.n	80035c0 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 8094 	beq.w	80036dc <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 808e 	beq.w	80036dc <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c4:	f003 0310 	and.w	r3, r3, #16
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d105      	bne.n	80035d8 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fa7d 	bl	8002adc <LL_ADC_REG_IsTriggerSourceSWStart>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d072      	beq.n	80036ce <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a64      	ldr	r2, [pc, #400]	; (8003780 <HAL_ADC_IRQHandler+0x264>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d009      	beq.n	8003606 <HAL_ADC_IRQHandler+0xea>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a65      	ldr	r2, [pc, #404]	; (800378c <HAL_ADC_IRQHandler+0x270>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d002      	beq.n	8003602 <HAL_ADC_IRQHandler+0xe6>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	e003      	b.n	800360a <HAL_ADC_IRQHandler+0xee>
 8003602:	4b63      	ldr	r3, [pc, #396]	; (8003790 <HAL_ADC_IRQHandler+0x274>)
 8003604:	e001      	b.n	800360a <HAL_ADC_IRQHandler+0xee>
 8003606:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6812      	ldr	r2, [r2, #0]
 800360e:	4293      	cmp	r3, r2
 8003610:	d008      	beq.n	8003624 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	2b05      	cmp	r3, #5
 800361c:	d002      	beq.n	8003624 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2b09      	cmp	r3, #9
 8003622:	d104      	bne.n	800362e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	623b      	str	r3, [r7, #32]
 800362c:	e014      	b.n	8003658 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a53      	ldr	r2, [pc, #332]	; (8003780 <HAL_ADC_IRQHandler+0x264>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d009      	beq.n	800364c <HAL_ADC_IRQHandler+0x130>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a53      	ldr	r2, [pc, #332]	; (800378c <HAL_ADC_IRQHandler+0x270>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d002      	beq.n	8003648 <HAL_ADC_IRQHandler+0x12c>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	e003      	b.n	8003650 <HAL_ADC_IRQHandler+0x134>
 8003648:	4b51      	ldr	r3, [pc, #324]	; (8003790 <HAL_ADC_IRQHandler+0x274>)
 800364a:	e001      	b.n	8003650 <HAL_ADC_IRQHandler+0x134>
 800364c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003650:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003658:	6a3b      	ldr	r3, [r7, #32]
 800365a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d135      	bne.n	80036ce <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0308 	and.w	r3, r3, #8
 800366c:	2b08      	cmp	r3, #8
 800366e:	d12e      	bne.n	80036ce <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff fba3 	bl	8002dc0 <LL_ADC_REG_IsConversionOngoing>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d11a      	bne.n	80036b6 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 020c 	bic.w	r2, r2, #12
 800368e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003694:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d112      	bne.n	80036ce <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ac:	f043 0201 	orr.w	r2, r3, #1
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80036b4:	e00b      	b.n	80036ce <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ba:	f043 0210 	orr.w	r2, r3, #16
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c6:	f043 0201 	orr.w	r2, r3, #1
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7fd ffba 	bl	8001648 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	220c      	movs	r2, #12
 80036da:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f003 0320 	and.w	r3, r3, #32
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d004      	beq.n	80036f0 <HAL_ADC_IRQHandler+0x1d4>
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	f003 0320 	and.w	r3, r3, #32
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10b      	bne.n	8003708 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 80b3 	beq.w	8003862 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 80ad 	beq.w	8003862 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370c:	f003 0310 	and.w	r3, r3, #16
 8003710:	2b00      	cmp	r3, #0
 8003712:	d105      	bne.n	8003720 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003718:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff fa18 	bl	8002b5a <LL_ADC_INJ_IsTriggerSourceSWStart>
 800372a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff f9d3 	bl	8002adc <LL_ADC_REG_IsTriggerSourceSWStart>
 8003736:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a10      	ldr	r2, [pc, #64]	; (8003780 <HAL_ADC_IRQHandler+0x264>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d009      	beq.n	8003756 <HAL_ADC_IRQHandler+0x23a>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a11      	ldr	r2, [pc, #68]	; (800378c <HAL_ADC_IRQHandler+0x270>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d002      	beq.n	8003752 <HAL_ADC_IRQHandler+0x236>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	e003      	b.n	800375a <HAL_ADC_IRQHandler+0x23e>
 8003752:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <HAL_ADC_IRQHandler+0x274>)
 8003754:	e001      	b.n	800375a <HAL_ADC_IRQHandler+0x23e>
 8003756:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6812      	ldr	r2, [r2, #0]
 800375e:	4293      	cmp	r3, r2
 8003760:	d008      	beq.n	8003774 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d005      	beq.n	8003774 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	2b06      	cmp	r3, #6
 800376c:	d002      	beq.n	8003774 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2b07      	cmp	r3, #7
 8003772:	d10f      	bne.n	8003794 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	623b      	str	r3, [r7, #32]
 800377c:	e01f      	b.n	80037be <HAL_ADC_IRQHandler+0x2a2>
 800377e:	bf00      	nop
 8003780:	50000100 	.word	0x50000100
 8003784:	50000300 	.word	0x50000300
 8003788:	50000700 	.word	0x50000700
 800378c:	50000500 	.word	0x50000500
 8003790:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a8b      	ldr	r2, [pc, #556]	; (80039c8 <HAL_ADC_IRQHandler+0x4ac>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d009      	beq.n	80037b2 <HAL_ADC_IRQHandler+0x296>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a8a      	ldr	r2, [pc, #552]	; (80039cc <HAL_ADC_IRQHandler+0x4b0>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d002      	beq.n	80037ae <HAL_ADC_IRQHandler+0x292>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	e003      	b.n	80037b6 <HAL_ADC_IRQHandler+0x29a>
 80037ae:	4b88      	ldr	r3, [pc, #544]	; (80039d0 <HAL_ADC_IRQHandler+0x4b4>)
 80037b0:	e001      	b.n	80037b6 <HAL_ADC_IRQHandler+0x29a>
 80037b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80037b6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d047      	beq.n	8003854 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d007      	beq.n	80037de <HAL_ADC_IRQHandler+0x2c2>
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d03f      	beq.n	8003854 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d13a      	bne.n	8003854 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e8:	2b40      	cmp	r3, #64	; 0x40
 80037ea:	d133      	bne.n	8003854 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d12e      	bne.n	8003854 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff faf3 	bl	8002de6 <LL_ADC_INJ_IsConversionOngoing>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d11a      	bne.n	800383c <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003814:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382a:	2b00      	cmp	r3, #0
 800382c:	d112      	bne.n	8003854 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003832:	f043 0201 	orr.w	r2, r3, #1
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	65da      	str	r2, [r3, #92]	; 0x5c
 800383a:	e00b      	b.n	8003854 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003840:	f043 0210 	orr.w	r2, r3, #16
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800384c:	f043 0201 	orr.w	r2, r3, #1
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 ff29 	bl	80046ac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2260      	movs	r2, #96	; 0x60
 8003860:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003868:	2b00      	cmp	r3, #0
 800386a:	d011      	beq.n	8003890 <HAL_ADC_IRQHandler+0x374>
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00c      	beq.n	8003890 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f8b4 	bl	80039f0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2280      	movs	r2, #128	; 0x80
 800388e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003896:	2b00      	cmp	r3, #0
 8003898:	d012      	beq.n	80038c0 <HAL_ADC_IRQHandler+0x3a4>
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00d      	beq.n	80038c0 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 ff0f 	bl	80046d4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038be:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d012      	beq.n	80038f0 <HAL_ADC_IRQHandler+0x3d4>
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00d      	beq.n	80038f0 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 ff01 	bl	80046e8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038ee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f003 0310 	and.w	r3, r3, #16
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d043      	beq.n	8003982 <HAL_ADC_IRQHandler+0x466>
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	f003 0310 	and.w	r3, r3, #16
 8003900:	2b00      	cmp	r3, #0
 8003902:	d03e      	beq.n	8003982 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003908:	2b00      	cmp	r3, #0
 800390a:	d102      	bne.n	8003912 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 800390c:	2301      	movs	r3, #1
 800390e:	627b      	str	r3, [r7, #36]	; 0x24
 8003910:	e021      	b.n	8003956 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d015      	beq.n	8003944 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003920:	d004      	beq.n	800392c <HAL_ADC_IRQHandler+0x410>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a28      	ldr	r2, [pc, #160]	; (80039c8 <HAL_ADC_IRQHandler+0x4ac>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d101      	bne.n	8003930 <HAL_ADC_IRQHandler+0x414>
 800392c:	4b29      	ldr	r3, [pc, #164]	; (80039d4 <HAL_ADC_IRQHandler+0x4b8>)
 800392e:	e000      	b.n	8003932 <HAL_ADC_IRQHandler+0x416>
 8003930:	4b29      	ldr	r3, [pc, #164]	; (80039d8 <HAL_ADC_IRQHandler+0x4bc>)
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff f986 	bl	8002c44 <LL_ADC_GetMultiDMATransfer>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00b      	beq.n	8003956 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800393e:	2301      	movs	r3, #1
 8003940:	627b      	str	r3, [r7, #36]	; 0x24
 8003942:	e008      	b.n	8003956 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003952:	2301      	movs	r3, #1
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	2b01      	cmp	r3, #1
 800395a:	d10e      	bne.n	800397a <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003960:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800396c:	f043 0202 	orr.w	r2, r3, #2
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f845 	bl	8003a04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2210      	movs	r2, #16
 8003980:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003988:	2b00      	cmp	r3, #0
 800398a:	d018      	beq.n	80039be <HAL_ADC_IRQHandler+0x4a2>
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003992:	2b00      	cmp	r3, #0
 8003994:	d013      	beq.n	80039be <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039a6:	f043 0208 	orr.w	r2, r3, #8
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039b6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 fe81 	bl	80046c0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80039be:	bf00      	nop
 80039c0:	3728      	adds	r7, #40	; 0x28
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	50000100 	.word	0x50000100
 80039cc:	50000500 	.word	0x50000500
 80039d0:	50000400 	.word	0x50000400
 80039d4:	50000300 	.word	0x50000300
 80039d8:	50000700 	.word	0x50000700

080039dc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b0b6      	sub	sp, #216	; 0xd8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d102      	bne.n	8003a3c <HAL_ADC_ConfigChannel+0x24>
 8003a36:	2302      	movs	r3, #2
 8003a38:	f000 bc13 	b.w	8004262 <HAL_ADC_ConfigChannel+0x84a>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff f9b9 	bl	8002dc0 <LL_ADC_REG_IsConversionOngoing>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f040 83f3 	bne.w	800423c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6818      	ldr	r0, [r3, #0]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	6859      	ldr	r1, [r3, #4]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	461a      	mov	r2, r3
 8003a64:	f7ff f84d 	bl	8002b02 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff f9a7 	bl	8002dc0 <LL_ADC_REG_IsConversionOngoing>
 8003a72:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff f9b3 	bl	8002de6 <LL_ADC_INJ_IsConversionOngoing>
 8003a80:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a84:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f040 81d9 	bne.w	8003e40 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f040 81d4 	bne.w	8003e40 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003aa0:	d10f      	bne.n	8003ac2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	4619      	mov	r1, r3
 8003aae:	f7ff f867 	bl	8002b80 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fe fffb 	bl	8002ab6 <LL_ADC_SetSamplingTimeCommonConfig>
 8003ac0:	e00e      	b.n	8003ae0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6818      	ldr	r0, [r3, #0]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	6819      	ldr	r1, [r3, #0]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f7ff f856 	bl	8002b80 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2100      	movs	r1, #0
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fe ffeb 	bl	8002ab6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	695a      	ldr	r2, [r3, #20]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	08db      	lsrs	r3, r3, #3
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d022      	beq.n	8003b48 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6818      	ldr	r0, [r3, #0]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	6919      	ldr	r1, [r3, #16]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003b12:	f7fe ff45 	bl	80029a0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6818      	ldr	r0, [r3, #0]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	6919      	ldr	r1, [r3, #16]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	461a      	mov	r2, r3
 8003b24:	f7fe ff91 	bl	8002a4a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6818      	ldr	r0, [r3, #0]
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	6919      	ldr	r1, [r3, #16]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	7f1b      	ldrb	r3, [r3, #28]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d102      	bne.n	8003b3e <HAL_ADC_ConfigChannel+0x126>
 8003b38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b3c:	e000      	b.n	8003b40 <HAL_ADC_ConfigChannel+0x128>
 8003b3e:	2300      	movs	r3, #0
 8003b40:	461a      	mov	r2, r3
 8003b42:	f7fe ff9d 	bl	8002a80 <LL_ADC_SetOffsetSaturation>
 8003b46:	e17b      	b.n	8003e40 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fe ff4a 	bl	80029e8 <LL_ADC_GetOffsetChannel>
 8003b54:	4603      	mov	r3, r0
 8003b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10a      	bne.n	8003b74 <HAL_ADC_ConfigChannel+0x15c>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2100      	movs	r1, #0
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fe ff3f 	bl	80029e8 <LL_ADC_GetOffsetChannel>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	0e9b      	lsrs	r3, r3, #26
 8003b6e:	f003 021f 	and.w	r2, r3, #31
 8003b72:	e01e      	b.n	8003bb2 <HAL_ADC_ConfigChannel+0x19a>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2100      	movs	r1, #0
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fe ff34 	bl	80029e8 <LL_ADC_GetOffsetChannel>
 8003b80:	4603      	mov	r3, r0
 8003b82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b8a:	fa93 f3a3 	rbit	r3, r3
 8003b8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003ba2:	2320      	movs	r3, #32
 8003ba4:	e004      	b.n	8003bb0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003ba6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003baa:	fab3 f383 	clz	r3, r3
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d105      	bne.n	8003bca <HAL_ADC_ConfigChannel+0x1b2>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	0e9b      	lsrs	r3, r3, #26
 8003bc4:	f003 031f 	and.w	r3, r3, #31
 8003bc8:	e018      	b.n	8003bfc <HAL_ADC_ConfigChannel+0x1e4>
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003bd6:	fa93 f3a3 	rbit	r3, r3
 8003bda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003bde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003be2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003be6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003bee:	2320      	movs	r3, #32
 8003bf0:	e004      	b.n	8003bfc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003bf2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003bf6:	fab3 f383 	clz	r3, r3
 8003bfa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d106      	bne.n	8003c0e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2200      	movs	r2, #0
 8003c06:	2100      	movs	r1, #0
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fe ff03 	bl	8002a14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2101      	movs	r1, #1
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7fe fee7 	bl	80029e8 <LL_ADC_GetOffsetChannel>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10a      	bne.n	8003c3a <HAL_ADC_ConfigChannel+0x222>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2101      	movs	r1, #1
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fe fedc 	bl	80029e8 <LL_ADC_GetOffsetChannel>
 8003c30:	4603      	mov	r3, r0
 8003c32:	0e9b      	lsrs	r3, r3, #26
 8003c34:	f003 021f 	and.w	r2, r3, #31
 8003c38:	e01e      	b.n	8003c78 <HAL_ADC_ConfigChannel+0x260>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2101      	movs	r1, #1
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fe fed1 	bl	80029e8 <LL_ADC_GetOffsetChannel>
 8003c46:	4603      	mov	r3, r0
 8003c48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c50:	fa93 f3a3 	rbit	r3, r3
 8003c54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003c58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003c60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003c68:	2320      	movs	r3, #32
 8003c6a:	e004      	b.n	8003c76 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003c6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c70:	fab3 f383 	clz	r3, r3
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d105      	bne.n	8003c90 <HAL_ADC_ConfigChannel+0x278>
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	0e9b      	lsrs	r3, r3, #26
 8003c8a:	f003 031f 	and.w	r3, r3, #31
 8003c8e:	e018      	b.n	8003cc2 <HAL_ADC_ConfigChannel+0x2aa>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c9c:	fa93 f3a3 	rbit	r3, r3
 8003ca0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003ca4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003ca8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003cac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003cb4:	2320      	movs	r3, #32
 8003cb6:	e004      	b.n	8003cc2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003cb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cbc:	fab3 f383 	clz	r3, r3
 8003cc0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d106      	bne.n	8003cd4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	2101      	movs	r1, #1
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fe fea0 	bl	8002a14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2102      	movs	r1, #2
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fe fe84 	bl	80029e8 <LL_ADC_GetOffsetChannel>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10a      	bne.n	8003d00 <HAL_ADC_ConfigChannel+0x2e8>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2102      	movs	r1, #2
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7fe fe79 	bl	80029e8 <LL_ADC_GetOffsetChannel>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	0e9b      	lsrs	r3, r3, #26
 8003cfa:	f003 021f 	and.w	r2, r3, #31
 8003cfe:	e01e      	b.n	8003d3e <HAL_ADC_ConfigChannel+0x326>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2102      	movs	r1, #2
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fe fe6e 	bl	80029e8 <LL_ADC_GetOffsetChannel>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d16:	fa93 f3a3 	rbit	r3, r3
 8003d1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003d1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003d26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003d2e:	2320      	movs	r3, #32
 8003d30:	e004      	b.n	8003d3c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003d32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d36:	fab3 f383 	clz	r3, r3
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d105      	bne.n	8003d56 <HAL_ADC_ConfigChannel+0x33e>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	0e9b      	lsrs	r3, r3, #26
 8003d50:	f003 031f 	and.w	r3, r3, #31
 8003d54:	e016      	b.n	8003d84 <HAL_ADC_ConfigChannel+0x36c>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d62:	fa93 f3a3 	rbit	r3, r3
 8003d66:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003d68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003d6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003d76:	2320      	movs	r3, #32
 8003d78:	e004      	b.n	8003d84 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003d7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d7e:	fab3 f383 	clz	r3, r3
 8003d82:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d106      	bne.n	8003d96 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	2102      	movs	r1, #2
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7fe fe3f 	bl	8002a14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2103      	movs	r1, #3
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7fe fe23 	bl	80029e8 <LL_ADC_GetOffsetChannel>
 8003da2:	4603      	mov	r3, r0
 8003da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10a      	bne.n	8003dc2 <HAL_ADC_ConfigChannel+0x3aa>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2103      	movs	r1, #3
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fe fe18 	bl	80029e8 <LL_ADC_GetOffsetChannel>
 8003db8:	4603      	mov	r3, r0
 8003dba:	0e9b      	lsrs	r3, r3, #26
 8003dbc:	f003 021f 	and.w	r2, r3, #31
 8003dc0:	e017      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x3da>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2103      	movs	r1, #3
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7fe fe0d 	bl	80029e8 <LL_ADC_GetOffsetChannel>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dd4:	fa93 f3a3 	rbit	r3, r3
 8003dd8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003dda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ddc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003dde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003de4:	2320      	movs	r3, #32
 8003de6:	e003      	b.n	8003df0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003de8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dea:	fab3 f383 	clz	r3, r3
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d105      	bne.n	8003e0a <HAL_ADC_ConfigChannel+0x3f2>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	0e9b      	lsrs	r3, r3, #26
 8003e04:	f003 031f 	and.w	r3, r3, #31
 8003e08:	e011      	b.n	8003e2e <HAL_ADC_ConfigChannel+0x416>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e12:	fa93 f3a3 	rbit	r3, r3
 8003e16:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003e18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e1a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003e22:	2320      	movs	r3, #32
 8003e24:	e003      	b.n	8003e2e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e28:	fab3 f383 	clz	r3, r3
 8003e2c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d106      	bne.n	8003e40 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2200      	movs	r2, #0
 8003e38:	2103      	movs	r1, #3
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fe fdea 	bl	8002a14 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7fe ff81 	bl	8002d4c <LL_ADC_IsEnabled>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f040 813d 	bne.w	80040cc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6818      	ldr	r0, [r3, #0]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	6819      	ldr	r1, [r3, #0]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	f7fe feba 	bl	8002bd8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	4aa2      	ldr	r2, [pc, #648]	; (80040f4 <HAL_ADC_ConfigChannel+0x6dc>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	f040 812e 	bne.w	80040cc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10b      	bne.n	8003e98 <HAL_ADC_ConfigChannel+0x480>
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	0e9b      	lsrs	r3, r3, #26
 8003e86:	3301      	adds	r3, #1
 8003e88:	f003 031f 	and.w	r3, r3, #31
 8003e8c:	2b09      	cmp	r3, #9
 8003e8e:	bf94      	ite	ls
 8003e90:	2301      	movls	r3, #1
 8003e92:	2300      	movhi	r3, #0
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	e019      	b.n	8003ecc <HAL_ADC_ConfigChannel+0x4b4>
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ea0:	fa93 f3a3 	rbit	r3, r3
 8003ea4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003ea6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ea8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003eaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003eb0:	2320      	movs	r3, #32
 8003eb2:	e003      	b.n	8003ebc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003eb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003eb6:	fab3 f383 	clz	r3, r3
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	f003 031f 	and.w	r3, r3, #31
 8003ec2:	2b09      	cmp	r3, #9
 8003ec4:	bf94      	ite	ls
 8003ec6:	2301      	movls	r3, #1
 8003ec8:	2300      	movhi	r3, #0
 8003eca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d079      	beq.n	8003fc4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d107      	bne.n	8003eec <HAL_ADC_ConfigChannel+0x4d4>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	0e9b      	lsrs	r3, r3, #26
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	069b      	lsls	r3, r3, #26
 8003ee6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003eea:	e015      	b.n	8003f18 <HAL_ADC_ConfigChannel+0x500>
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ef4:	fa93 f3a3 	rbit	r3, r3
 8003ef8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003efc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003f04:	2320      	movs	r3, #32
 8003f06:	e003      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f0a:	fab3 f383 	clz	r3, r3
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	3301      	adds	r3, #1
 8003f12:	069b      	lsls	r3, r3, #26
 8003f14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d109      	bne.n	8003f38 <HAL_ADC_ConfigChannel+0x520>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	0e9b      	lsrs	r3, r3, #26
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	f003 031f 	and.w	r3, r3, #31
 8003f30:	2101      	movs	r1, #1
 8003f32:	fa01 f303 	lsl.w	r3, r1, r3
 8003f36:	e017      	b.n	8003f68 <HAL_ADC_ConfigChannel+0x550>
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f40:	fa93 f3a3 	rbit	r3, r3
 8003f44:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f48:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003f50:	2320      	movs	r3, #32
 8003f52:	e003      	b.n	8003f5c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f56:	fab3 f383 	clz	r3, r3
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	f003 031f 	and.w	r3, r3, #31
 8003f62:	2101      	movs	r1, #1
 8003f64:	fa01 f303 	lsl.w	r3, r1, r3
 8003f68:	ea42 0103 	orr.w	r1, r2, r3
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10a      	bne.n	8003f8e <HAL_ADC_ConfigChannel+0x576>
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	0e9b      	lsrs	r3, r3, #26
 8003f7e:	3301      	adds	r3, #1
 8003f80:	f003 021f 	and.w	r2, r3, #31
 8003f84:	4613      	mov	r3, r2
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	4413      	add	r3, r2
 8003f8a:	051b      	lsls	r3, r3, #20
 8003f8c:	e018      	b.n	8003fc0 <HAL_ADC_ConfigChannel+0x5a8>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f96:	fa93 f3a3 	rbit	r3, r3
 8003f9a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003fa6:	2320      	movs	r3, #32
 8003fa8:	e003      	b.n	8003fb2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fac:	fab3 f383 	clz	r3, r3
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	f003 021f 	and.w	r2, r3, #31
 8003fb8:	4613      	mov	r3, r2
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	4413      	add	r3, r2
 8003fbe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	e07e      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d107      	bne.n	8003fe0 <HAL_ADC_ConfigChannel+0x5c8>
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	0e9b      	lsrs	r3, r3, #26
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	069b      	lsls	r3, r3, #26
 8003fda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fde:	e015      	b.n	800400c <HAL_ADC_ConfigChannel+0x5f4>
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe8:	fa93 f3a3 	rbit	r3, r3
 8003fec:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003ff8:	2320      	movs	r3, #32
 8003ffa:	e003      	b.n	8004004 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffe:	fab3 f383 	clz	r3, r3
 8004002:	b2db      	uxtb	r3, r3
 8004004:	3301      	adds	r3, #1
 8004006:	069b      	lsls	r3, r3, #26
 8004008:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004014:	2b00      	cmp	r3, #0
 8004016:	d109      	bne.n	800402c <HAL_ADC_ConfigChannel+0x614>
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	0e9b      	lsrs	r3, r3, #26
 800401e:	3301      	adds	r3, #1
 8004020:	f003 031f 	and.w	r3, r3, #31
 8004024:	2101      	movs	r1, #1
 8004026:	fa01 f303 	lsl.w	r3, r1, r3
 800402a:	e017      	b.n	800405c <HAL_ADC_ConfigChannel+0x644>
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	fa93 f3a3 	rbit	r3, r3
 8004038:	61fb      	str	r3, [r7, #28]
  return result;
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004044:	2320      	movs	r3, #32
 8004046:	e003      	b.n	8004050 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	fab3 f383 	clz	r3, r3
 800404e:	b2db      	uxtb	r3, r3
 8004050:	3301      	adds	r3, #1
 8004052:	f003 031f 	and.w	r3, r3, #31
 8004056:	2101      	movs	r1, #1
 8004058:	fa01 f303 	lsl.w	r3, r1, r3
 800405c:	ea42 0103 	orr.w	r1, r2, r3
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10d      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x670>
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	0e9b      	lsrs	r3, r3, #26
 8004072:	3301      	adds	r3, #1
 8004074:	f003 021f 	and.w	r2, r3, #31
 8004078:	4613      	mov	r3, r2
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	4413      	add	r3, r2
 800407e:	3b1e      	subs	r3, #30
 8004080:	051b      	lsls	r3, r3, #20
 8004082:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004086:	e01b      	b.n	80040c0 <HAL_ADC_ConfigChannel+0x6a8>
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	fa93 f3a3 	rbit	r3, r3
 8004094:	613b      	str	r3, [r7, #16]
  return result;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80040a0:	2320      	movs	r3, #32
 80040a2:	e003      	b.n	80040ac <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	fab3 f383 	clz	r3, r3
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	3301      	adds	r3, #1
 80040ae:	f003 021f 	and.w	r2, r3, #31
 80040b2:	4613      	mov	r3, r2
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	4413      	add	r3, r2
 80040b8:	3b1e      	subs	r3, #30
 80040ba:	051b      	lsls	r3, r3, #20
 80040bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040c0:	430b      	orrs	r3, r1
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	6892      	ldr	r2, [r2, #8]
 80040c6:	4619      	mov	r1, r3
 80040c8:	f7fe fd5a 	bl	8002b80 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	4b09      	ldr	r3, [pc, #36]	; (80040f8 <HAL_ADC_ConfigChannel+0x6e0>)
 80040d2:	4013      	ands	r3, r2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 80be 	beq.w	8004256 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040e2:	d004      	beq.n	80040ee <HAL_ADC_ConfigChannel+0x6d6>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a04      	ldr	r2, [pc, #16]	; (80040fc <HAL_ADC_ConfigChannel+0x6e4>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d10a      	bne.n	8004104 <HAL_ADC_ConfigChannel+0x6ec>
 80040ee:	4b04      	ldr	r3, [pc, #16]	; (8004100 <HAL_ADC_ConfigChannel+0x6e8>)
 80040f0:	e009      	b.n	8004106 <HAL_ADC_ConfigChannel+0x6ee>
 80040f2:	bf00      	nop
 80040f4:	407f0000 	.word	0x407f0000
 80040f8:	80080000 	.word	0x80080000
 80040fc:	50000100 	.word	0x50000100
 8004100:	50000300 	.word	0x50000300
 8004104:	4b59      	ldr	r3, [pc, #356]	; (800426c <HAL_ADC_ConfigChannel+0x854>)
 8004106:	4618      	mov	r0, r3
 8004108:	f7fe fc3c 	bl	8002984 <LL_ADC_GetCommonPathInternalCh>
 800410c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a56      	ldr	r2, [pc, #344]	; (8004270 <HAL_ADC_ConfigChannel+0x858>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d004      	beq.n	8004124 <HAL_ADC_ConfigChannel+0x70c>
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a55      	ldr	r2, [pc, #340]	; (8004274 <HAL_ADC_ConfigChannel+0x85c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d13a      	bne.n	800419a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004124:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004128:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d134      	bne.n	800419a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004138:	d005      	beq.n	8004146 <HAL_ADC_ConfigChannel+0x72e>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a4e      	ldr	r2, [pc, #312]	; (8004278 <HAL_ADC_ConfigChannel+0x860>)
 8004140:	4293      	cmp	r3, r2
 8004142:	f040 8085 	bne.w	8004250 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800414e:	d004      	beq.n	800415a <HAL_ADC_ConfigChannel+0x742>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a49      	ldr	r2, [pc, #292]	; (800427c <HAL_ADC_ConfigChannel+0x864>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d101      	bne.n	800415e <HAL_ADC_ConfigChannel+0x746>
 800415a:	4a49      	ldr	r2, [pc, #292]	; (8004280 <HAL_ADC_ConfigChannel+0x868>)
 800415c:	e000      	b.n	8004160 <HAL_ADC_ConfigChannel+0x748>
 800415e:	4a43      	ldr	r2, [pc, #268]	; (800426c <HAL_ADC_ConfigChannel+0x854>)
 8004160:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004164:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004168:	4619      	mov	r1, r3
 800416a:	4610      	mov	r0, r2
 800416c:	f7fe fbf7 	bl	800295e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004170:	4b44      	ldr	r3, [pc, #272]	; (8004284 <HAL_ADC_ConfigChannel+0x86c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	099b      	lsrs	r3, r3, #6
 8004176:	4a44      	ldr	r2, [pc, #272]	; (8004288 <HAL_ADC_ConfigChannel+0x870>)
 8004178:	fba2 2303 	umull	r2, r3, r2, r3
 800417c:	099b      	lsrs	r3, r3, #6
 800417e:	1c5a      	adds	r2, r3, #1
 8004180:	4613      	mov	r3, r2
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	4413      	add	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800418a:	e002      	b.n	8004192 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	3b01      	subs	r3, #1
 8004190:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1f9      	bne.n	800418c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004198:	e05a      	b.n	8004250 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a3b      	ldr	r2, [pc, #236]	; (800428c <HAL_ADC_ConfigChannel+0x874>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d125      	bne.n	80041f0 <HAL_ADC_ConfigChannel+0x7d8>
 80041a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d11f      	bne.n	80041f0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a31      	ldr	r2, [pc, #196]	; (800427c <HAL_ADC_ConfigChannel+0x864>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d104      	bne.n	80041c4 <HAL_ADC_ConfigChannel+0x7ac>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a34      	ldr	r2, [pc, #208]	; (8004290 <HAL_ADC_ConfigChannel+0x878>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d047      	beq.n	8004254 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041cc:	d004      	beq.n	80041d8 <HAL_ADC_ConfigChannel+0x7c0>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a2a      	ldr	r2, [pc, #168]	; (800427c <HAL_ADC_ConfigChannel+0x864>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d101      	bne.n	80041dc <HAL_ADC_ConfigChannel+0x7c4>
 80041d8:	4a29      	ldr	r2, [pc, #164]	; (8004280 <HAL_ADC_ConfigChannel+0x868>)
 80041da:	e000      	b.n	80041de <HAL_ADC_ConfigChannel+0x7c6>
 80041dc:	4a23      	ldr	r2, [pc, #140]	; (800426c <HAL_ADC_ConfigChannel+0x854>)
 80041de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041e6:	4619      	mov	r1, r3
 80041e8:	4610      	mov	r0, r2
 80041ea:	f7fe fbb8 	bl	800295e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041ee:	e031      	b.n	8004254 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a27      	ldr	r2, [pc, #156]	; (8004294 <HAL_ADC_ConfigChannel+0x87c>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d12d      	bne.n	8004256 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80041fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d127      	bne.n	8004256 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a1c      	ldr	r2, [pc, #112]	; (800427c <HAL_ADC_ConfigChannel+0x864>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d022      	beq.n	8004256 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004218:	d004      	beq.n	8004224 <HAL_ADC_ConfigChannel+0x80c>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a17      	ldr	r2, [pc, #92]	; (800427c <HAL_ADC_ConfigChannel+0x864>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d101      	bne.n	8004228 <HAL_ADC_ConfigChannel+0x810>
 8004224:	4a16      	ldr	r2, [pc, #88]	; (8004280 <HAL_ADC_ConfigChannel+0x868>)
 8004226:	e000      	b.n	800422a <HAL_ADC_ConfigChannel+0x812>
 8004228:	4a10      	ldr	r2, [pc, #64]	; (800426c <HAL_ADC_ConfigChannel+0x854>)
 800422a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800422e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004232:	4619      	mov	r1, r3
 8004234:	4610      	mov	r0, r2
 8004236:	f7fe fb92 	bl	800295e <LL_ADC_SetCommonPathInternalCh>
 800423a:	e00c      	b.n	8004256 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004240:	f043 0220 	orr.w	r2, r3, #32
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800424e:	e002      	b.n	8004256 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004250:	bf00      	nop
 8004252:	e000      	b.n	8004256 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004254:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800425e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004262:	4618      	mov	r0, r3
 8004264:	37d8      	adds	r7, #216	; 0xd8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	50000700 	.word	0x50000700
 8004270:	c3210000 	.word	0xc3210000
 8004274:	90c00010 	.word	0x90c00010
 8004278:	50000600 	.word	0x50000600
 800427c:	50000100 	.word	0x50000100
 8004280:	50000300 	.word	0x50000300
 8004284:	20000000 	.word	0x20000000
 8004288:	053e2d63 	.word	0x053e2d63
 800428c:	c7520000 	.word	0xc7520000
 8004290:	50000500 	.word	0x50000500
 8004294:	cb840000 	.word	0xcb840000

08004298 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7fe fd51 	bl	8002d4c <LL_ADC_IsEnabled>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d14d      	bne.n	800434c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	4b28      	ldr	r3, [pc, #160]	; (8004358 <ADC_Enable+0xc0>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00d      	beq.n	80042da <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c2:	f043 0210 	orr.w	r2, r3, #16
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ce:	f043 0201 	orr.w	r2, r3, #1
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e039      	b.n	800434e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fe fd0c 	bl	8002cfc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80042e4:	f7fe fb1c 	bl	8002920 <HAL_GetTick>
 80042e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042ea:	e028      	b.n	800433e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7fe fd2b 	bl	8002d4c <LL_ADC_IsEnabled>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d104      	bne.n	8004306 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f7fe fcfb 	bl	8002cfc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004306:	f7fe fb0b 	bl	8002920 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d914      	bls.n	800433e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b01      	cmp	r3, #1
 8004320:	d00d      	beq.n	800433e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004326:	f043 0210 	orr.w	r2, r3, #16
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004332:	f043 0201 	orr.w	r2, r3, #1
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e007      	b.n	800434e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b01      	cmp	r3, #1
 800434a:	d1cf      	bne.n	80042ec <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	8000003f 	.word	0x8000003f

0800435c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4618      	mov	r0, r3
 800436a:	f7fe fd02 	bl	8002d72 <LL_ADC_IsDisableOngoing>
 800436e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4618      	mov	r0, r3
 8004376:	f7fe fce9 	bl	8002d4c <LL_ADC_IsEnabled>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d047      	beq.n	8004410 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d144      	bne.n	8004410 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f003 030d 	and.w	r3, r3, #13
 8004390:	2b01      	cmp	r3, #1
 8004392:	d10c      	bne.n	80043ae <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4618      	mov	r0, r3
 800439a:	f7fe fcc3 	bl	8002d24 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2203      	movs	r2, #3
 80043a4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80043a6:	f7fe fabb 	bl	8002920 <HAL_GetTick>
 80043aa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80043ac:	e029      	b.n	8004402 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b2:	f043 0210 	orr.w	r2, r3, #16
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043be:	f043 0201 	orr.w	r2, r3, #1
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e023      	b.n	8004412 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80043ca:	f7fe faa9 	bl	8002920 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d914      	bls.n	8004402 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00d      	beq.n	8004402 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ea:	f043 0210 	orr.w	r2, r3, #16
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043f6:	f043 0201 	orr.w	r2, r3, #1
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e007      	b.n	8004412 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1dc      	bne.n	80043ca <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b084      	sub	sp, #16
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004426:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800442c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004430:	2b00      	cmp	r3, #0
 8004432:	d14b      	bne.n	80044cc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004438:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0308 	and.w	r3, r3, #8
 800444a:	2b00      	cmp	r3, #0
 800444c:	d021      	beq.n	8004492 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4618      	mov	r0, r3
 8004454:	f7fe fb42 	bl	8002adc <LL_ADC_REG_IsTriggerSourceSWStart>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d032      	beq.n	80044c4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d12b      	bne.n	80044c4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004470:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800447c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d11f      	bne.n	80044c4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004488:	f043 0201 	orr.w	r2, r3, #1
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004490:	e018      	b.n	80044c4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d111      	bne.n	80044c4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d105      	bne.n	80044c4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044bc:	f043 0201 	orr.w	r2, r3, #1
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f7fd f8bf 	bl	8001648 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80044ca:	e00e      	b.n	80044ea <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d0:	f003 0310 	and.w	r3, r3, #16
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f7ff fa93 	bl	8003a04 <HAL_ADC_ErrorCallback>
}
 80044de:	e004      	b.n	80044ea <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	4798      	blx	r3
}
 80044ea:	bf00      	nop
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b084      	sub	sp, #16
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fe:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f7ff fa6b 	bl	80039dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004506:	bf00      	nop
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b084      	sub	sp, #16
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004520:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800452c:	f043 0204 	orr.w	r2, r3, #4
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f7ff fa65 	bl	8003a04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800453a:	bf00      	nop
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <LL_ADC_IsEnabled>:
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b01      	cmp	r3, #1
 8004554:	d101      	bne.n	800455a <LL_ADC_IsEnabled+0x18>
 8004556:	2301      	movs	r3, #1
 8004558:	e000      	b.n	800455c <LL_ADC_IsEnabled+0x1a>
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <LL_ADC_StartCalibration>:
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800457a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004584:	4313      	orrs	r3, r2
 8004586:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	609a      	str	r2, [r3, #8]
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <LL_ADC_IsCalibrationOnGoing>:
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045ae:	d101      	bne.n	80045b4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80045b0:	2301      	movs	r3, #1
 80045b2:	e000      	b.n	80045b6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <LL_ADC_REG_IsConversionOngoing>:
{
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 0304 	and.w	r3, r3, #4
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	d101      	bne.n	80045da <LL_ADC_REG_IsConversionOngoing+0x18>
 80045d6:	2301      	movs	r3, #1
 80045d8:	e000      	b.n	80045dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80045f2:	2300      	movs	r3, #0
 80045f4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d101      	bne.n	8004604 <HAL_ADCEx_Calibration_Start+0x1c>
 8004600:	2302      	movs	r3, #2
 8004602:	e04d      	b.n	80046a0 <HAL_ADCEx_Calibration_Start+0xb8>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7ff fea5 	bl	800435c <ADC_Disable>
 8004612:	4603      	mov	r3, r0
 8004614:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004616:	7bfb      	ldrb	r3, [r7, #15]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d136      	bne.n	800468a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004620:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004624:	f023 0302 	bic.w	r3, r3, #2
 8004628:	f043 0202 	orr.w	r2, r3, #2
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6839      	ldr	r1, [r7, #0]
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff ff96 	bl	8004568 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800463c:	e014      	b.n	8004668 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	3301      	adds	r3, #1
 8004642:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	4a18      	ldr	r2, [pc, #96]	; (80046a8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d90d      	bls.n	8004668 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004650:	f023 0312 	bic.w	r3, r3, #18
 8004654:	f043 0210 	orr.w	r2, r3, #16
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e01b      	b.n	80046a0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff ff94 	bl	800459a <LL_ADC_IsCalibrationOnGoing>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1e2      	bne.n	800463e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800467c:	f023 0303 	bic.w	r3, r3, #3
 8004680:	f043 0201 	orr.w	r2, r3, #1
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	65da      	str	r2, [r3, #92]	; 0x5c
 8004688:	e005      	b.n	8004696 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468e:	f043 0210 	orr.w	r2, r3, #16
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800469e:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	0004de01 	.word	0x0004de01

080046ac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004710:	b590      	push	{r4, r7, lr}
 8004712:	b0a1      	sub	sp, #132	; 0x84
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800471a:	2300      	movs	r3, #0
 800471c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004726:	2b01      	cmp	r3, #1
 8004728:	d101      	bne.n	800472e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800472a:	2302      	movs	r3, #2
 800472c:	e0e7      	b.n	80048fe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004736:	2300      	movs	r3, #0
 8004738:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800473a:	2300      	movs	r3, #0
 800473c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004746:	d102      	bne.n	800474e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004748:	4b6f      	ldr	r3, [pc, #444]	; (8004908 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800474a:	60bb      	str	r3, [r7, #8]
 800474c:	e009      	b.n	8004762 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a6e      	ldr	r2, [pc, #440]	; (800490c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d102      	bne.n	800475e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004758:	4b6d      	ldr	r3, [pc, #436]	; (8004910 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800475a:	60bb      	str	r3, [r7, #8]
 800475c:	e001      	b.n	8004762 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800475e:	2300      	movs	r3, #0
 8004760:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10b      	bne.n	8004780 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800476c:	f043 0220 	orr.w	r2, r3, #32
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e0be      	b.n	80048fe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	4618      	mov	r0, r3
 8004784:	f7ff ff1d 	bl	80045c2 <LL_ADC_REG_IsConversionOngoing>
 8004788:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff ff17 	bl	80045c2 <LL_ADC_REG_IsConversionOngoing>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	f040 80a0 	bne.w	80048dc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800479c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f040 809c 	bne.w	80048dc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047ac:	d004      	beq.n	80047b8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a55      	ldr	r2, [pc, #340]	; (8004908 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d101      	bne.n	80047bc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80047b8:	4b56      	ldr	r3, [pc, #344]	; (8004914 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80047ba:	e000      	b.n	80047be <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80047bc:	4b56      	ldr	r3, [pc, #344]	; (8004918 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80047be:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d04b      	beq.n	8004860 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80047c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	6859      	ldr	r1, [r3, #4]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047da:	035b      	lsls	r3, r3, #13
 80047dc:	430b      	orrs	r3, r1
 80047de:	431a      	orrs	r2, r3
 80047e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047e2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047ec:	d004      	beq.n	80047f8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a45      	ldr	r2, [pc, #276]	; (8004908 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d10f      	bne.n	8004818 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80047f8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80047fc:	f7ff fea1 	bl	8004542 <LL_ADC_IsEnabled>
 8004800:	4604      	mov	r4, r0
 8004802:	4841      	ldr	r0, [pc, #260]	; (8004908 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004804:	f7ff fe9d 	bl	8004542 <LL_ADC_IsEnabled>
 8004808:	4603      	mov	r3, r0
 800480a:	4323      	orrs	r3, r4
 800480c:	2b00      	cmp	r3, #0
 800480e:	bf0c      	ite	eq
 8004810:	2301      	moveq	r3, #1
 8004812:	2300      	movne	r3, #0
 8004814:	b2db      	uxtb	r3, r3
 8004816:	e012      	b.n	800483e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004818:	483c      	ldr	r0, [pc, #240]	; (800490c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800481a:	f7ff fe92 	bl	8004542 <LL_ADC_IsEnabled>
 800481e:	4604      	mov	r4, r0
 8004820:	483b      	ldr	r0, [pc, #236]	; (8004910 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004822:	f7ff fe8e 	bl	8004542 <LL_ADC_IsEnabled>
 8004826:	4603      	mov	r3, r0
 8004828:	431c      	orrs	r4, r3
 800482a:	483c      	ldr	r0, [pc, #240]	; (800491c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800482c:	f7ff fe89 	bl	8004542 <LL_ADC_IsEnabled>
 8004830:	4603      	mov	r3, r0
 8004832:	4323      	orrs	r3, r4
 8004834:	2b00      	cmp	r3, #0
 8004836:	bf0c      	ite	eq
 8004838:	2301      	moveq	r3, #1
 800483a:	2300      	movne	r3, #0
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d056      	beq.n	80048f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004842:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800484a:	f023 030f 	bic.w	r3, r3, #15
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	6811      	ldr	r1, [r2, #0]
 8004852:	683a      	ldr	r2, [r7, #0]
 8004854:	6892      	ldr	r2, [r2, #8]
 8004856:	430a      	orrs	r2, r1
 8004858:	431a      	orrs	r2, r3
 800485a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800485c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800485e:	e047      	b.n	80048f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004860:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004868:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800486a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004874:	d004      	beq.n	8004880 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a23      	ldr	r2, [pc, #140]	; (8004908 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d10f      	bne.n	80048a0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004880:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004884:	f7ff fe5d 	bl	8004542 <LL_ADC_IsEnabled>
 8004888:	4604      	mov	r4, r0
 800488a:	481f      	ldr	r0, [pc, #124]	; (8004908 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800488c:	f7ff fe59 	bl	8004542 <LL_ADC_IsEnabled>
 8004890:	4603      	mov	r3, r0
 8004892:	4323      	orrs	r3, r4
 8004894:	2b00      	cmp	r3, #0
 8004896:	bf0c      	ite	eq
 8004898:	2301      	moveq	r3, #1
 800489a:	2300      	movne	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	e012      	b.n	80048c6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80048a0:	481a      	ldr	r0, [pc, #104]	; (800490c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80048a2:	f7ff fe4e 	bl	8004542 <LL_ADC_IsEnabled>
 80048a6:	4604      	mov	r4, r0
 80048a8:	4819      	ldr	r0, [pc, #100]	; (8004910 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80048aa:	f7ff fe4a 	bl	8004542 <LL_ADC_IsEnabled>
 80048ae:	4603      	mov	r3, r0
 80048b0:	431c      	orrs	r4, r3
 80048b2:	481a      	ldr	r0, [pc, #104]	; (800491c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80048b4:	f7ff fe45 	bl	8004542 <LL_ADC_IsEnabled>
 80048b8:	4603      	mov	r3, r0
 80048ba:	4323      	orrs	r3, r4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	bf0c      	ite	eq
 80048c0:	2301      	moveq	r3, #1
 80048c2:	2300      	movne	r3, #0
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d012      	beq.n	80048f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80048ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80048d2:	f023 030f 	bic.w	r3, r3, #15
 80048d6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80048d8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048da:	e009      	b.n	80048f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e0:	f043 0220 	orr.w	r2, r3, #32
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80048ee:	e000      	b.n	80048f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80048fa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3784      	adds	r7, #132	; 0x84
 8004902:	46bd      	mov	sp, r7
 8004904:	bd90      	pop	{r4, r7, pc}
 8004906:	bf00      	nop
 8004908:	50000100 	.word	0x50000100
 800490c:	50000400 	.word	0x50000400
 8004910:	50000500 	.word	0x50000500
 8004914:	50000300 	.word	0x50000300
 8004918:	50000700 	.word	0x50000700
 800491c:	50000600 	.word	0x50000600

08004920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f003 0307 	and.w	r3, r3, #7
 800492e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004930:	4b0c      	ldr	r3, [pc, #48]	; (8004964 <__NVIC_SetPriorityGrouping+0x44>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800493c:	4013      	ands	r3, r2
 800493e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800494c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004952:	4a04      	ldr	r2, [pc, #16]	; (8004964 <__NVIC_SetPriorityGrouping+0x44>)
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	60d3      	str	r3, [r2, #12]
}
 8004958:	bf00      	nop
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	e000ed00 	.word	0xe000ed00

08004968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004968:	b480      	push	{r7}
 800496a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800496c:	4b04      	ldr	r3, [pc, #16]	; (8004980 <__NVIC_GetPriorityGrouping+0x18>)
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	0a1b      	lsrs	r3, r3, #8
 8004972:	f003 0307 	and.w	r3, r3, #7
}
 8004976:	4618      	mov	r0, r3
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	e000ed00 	.word	0xe000ed00

08004984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	4603      	mov	r3, r0
 800498c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800498e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004992:	2b00      	cmp	r3, #0
 8004994:	db0b      	blt.n	80049ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004996:	79fb      	ldrb	r3, [r7, #7]
 8004998:	f003 021f 	and.w	r2, r3, #31
 800499c:	4907      	ldr	r1, [pc, #28]	; (80049bc <__NVIC_EnableIRQ+0x38>)
 800499e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049a2:	095b      	lsrs	r3, r3, #5
 80049a4:	2001      	movs	r0, #1
 80049a6:	fa00 f202 	lsl.w	r2, r0, r2
 80049aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	e000e100 	.word	0xe000e100

080049c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	4603      	mov	r3, r0
 80049c8:	6039      	str	r1, [r7, #0]
 80049ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	db0a      	blt.n	80049ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	490c      	ldr	r1, [pc, #48]	; (8004a0c <__NVIC_SetPriority+0x4c>)
 80049da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049de:	0112      	lsls	r2, r2, #4
 80049e0:	b2d2      	uxtb	r2, r2
 80049e2:	440b      	add	r3, r1
 80049e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049e8:	e00a      	b.n	8004a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	4908      	ldr	r1, [pc, #32]	; (8004a10 <__NVIC_SetPriority+0x50>)
 80049f0:	79fb      	ldrb	r3, [r7, #7]
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	3b04      	subs	r3, #4
 80049f8:	0112      	lsls	r2, r2, #4
 80049fa:	b2d2      	uxtb	r2, r2
 80049fc:	440b      	add	r3, r1
 80049fe:	761a      	strb	r2, [r3, #24]
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	e000e100 	.word	0xe000e100
 8004a10:	e000ed00 	.word	0xe000ed00

08004a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b089      	sub	sp, #36	; 0x24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f003 0307 	and.w	r3, r3, #7
 8004a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	f1c3 0307 	rsb	r3, r3, #7
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	bf28      	it	cs
 8004a32:	2304      	movcs	r3, #4
 8004a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	3304      	adds	r3, #4
 8004a3a:	2b06      	cmp	r3, #6
 8004a3c:	d902      	bls.n	8004a44 <NVIC_EncodePriority+0x30>
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	3b03      	subs	r3, #3
 8004a42:	e000      	b.n	8004a46 <NVIC_EncodePriority+0x32>
 8004a44:	2300      	movs	r3, #0
 8004a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a48:	f04f 32ff 	mov.w	r2, #4294967295
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a52:	43da      	mvns	r2, r3
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	401a      	ands	r2, r3
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	fa01 f303 	lsl.w	r3, r1, r3
 8004a66:	43d9      	mvns	r1, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a6c:	4313      	orrs	r3, r2
         );
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3724      	adds	r7, #36	; 0x24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b082      	sub	sp, #8
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7ff ff4c 	bl	8004920 <__NVIC_SetPriorityGrouping>
}
 8004a88:	bf00      	nop
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	4603      	mov	r3, r0
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
 8004a9c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a9e:	f7ff ff63 	bl	8004968 <__NVIC_GetPriorityGrouping>
 8004aa2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	68b9      	ldr	r1, [r7, #8]
 8004aa8:	6978      	ldr	r0, [r7, #20]
 8004aaa:	f7ff ffb3 	bl	8004a14 <NVIC_EncodePriority>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ab4:	4611      	mov	r1, r2
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7ff ff82 	bl	80049c0 <__NVIC_SetPriority>
}
 8004abc:	bf00      	nop
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	4603      	mov	r3, r0
 8004acc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7ff ff56 	bl	8004984 <__NVIC_EnableIRQ>
}
 8004ad8:	bf00      	nop
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e08d      	b.n	8004c0e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	461a      	mov	r2, r3
 8004af8:	4b47      	ldr	r3, [pc, #284]	; (8004c18 <HAL_DMA_Init+0x138>)
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d80f      	bhi.n	8004b1e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	461a      	mov	r2, r3
 8004b04:	4b45      	ldr	r3, [pc, #276]	; (8004c1c <HAL_DMA_Init+0x13c>)
 8004b06:	4413      	add	r3, r2
 8004b08:	4a45      	ldr	r2, [pc, #276]	; (8004c20 <HAL_DMA_Init+0x140>)
 8004b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0e:	091b      	lsrs	r3, r3, #4
 8004b10:	009a      	lsls	r2, r3, #2
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a42      	ldr	r2, [pc, #264]	; (8004c24 <HAL_DMA_Init+0x144>)
 8004b1a:	641a      	str	r2, [r3, #64]	; 0x40
 8004b1c:	e00e      	b.n	8004b3c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	461a      	mov	r2, r3
 8004b24:	4b40      	ldr	r3, [pc, #256]	; (8004c28 <HAL_DMA_Init+0x148>)
 8004b26:	4413      	add	r3, r2
 8004b28:	4a3d      	ldr	r2, [pc, #244]	; (8004c20 <HAL_DMA_Init+0x140>)
 8004b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2e:	091b      	lsrs	r3, r3, #4
 8004b30:	009a      	lsls	r2, r3, #2
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a3c      	ldr	r2, [pc, #240]	; (8004c2c <HAL_DMA_Init+0x14c>)
 8004b3a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b56:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004b60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 fa76 	bl	8005080 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b9c:	d102      	bne.n	8004ba4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bac:	b2d2      	uxtb	r2, r2
 8004bae:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004bb8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d010      	beq.n	8004be4 <HAL_DMA_Init+0x104>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d80c      	bhi.n	8004be4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fa96 	bl	80050fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004be0:	605a      	str	r2, [r3, #4]
 8004be2:	e008      	b.n	8004bf6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	40020407 	.word	0x40020407
 8004c1c:	bffdfff8 	.word	0xbffdfff8
 8004c20:	cccccccd 	.word	0xcccccccd
 8004c24:	40020000 	.word	0x40020000
 8004c28:	bffdfbf8 	.word	0xbffdfbf8
 8004c2c:	40020400 	.word	0x40020400

08004c30 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
 8004c3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d101      	bne.n	8004c50 <HAL_DMA_Start_IT+0x20>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e066      	b.n	8004d1e <HAL_DMA_Start_IT+0xee>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d155      	bne.n	8004d10 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0201 	bic.w	r2, r2, #1
 8004c80:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	68b9      	ldr	r1, [r7, #8]
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f000 f9bb 	bl	8005004 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d008      	beq.n	8004ca8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f042 020e 	orr.w	r2, r2, #14
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	e00f      	b.n	8004cc8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 0204 	bic.w	r2, r2, #4
 8004cb6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 020a 	orr.w	r2, r2, #10
 8004cc6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d007      	beq.n	8004ce6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ce4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d007      	beq.n	8004cfe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cfc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f042 0201 	orr.w	r2, r2, #1
 8004d0c:	601a      	str	r2, [r3, #0]
 8004d0e:	e005      	b.n	8004d1c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004d18:	2302      	movs	r3, #2
 8004d1a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3718      	adds	r7, #24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b085      	sub	sp, #20
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d005      	beq.n	8004d4a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2204      	movs	r2, #4
 8004d42:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	73fb      	strb	r3, [r7, #15]
 8004d48:	e037      	b.n	8004dba <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 020e 	bic.w	r2, r2, #14
 8004d58:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d68:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f022 0201 	bic.w	r2, r2, #1
 8004d78:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7e:	f003 021f 	and.w	r2, r3, #31
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	2101      	movs	r1, #1
 8004d88:	fa01 f202 	lsl.w	r2, r1, r2
 8004d8c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004d96:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00c      	beq.n	8004dba <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004daa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dae:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004db8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004de0:	2300      	movs	r3, #0
 8004de2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d00d      	beq.n	8004e0c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2204      	movs	r2, #4
 8004df4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	73fb      	strb	r3, [r7, #15]
 8004e0a:	e047      	b.n	8004e9c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 020e 	bic.w	r2, r2, #14
 8004e1a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 0201 	bic.w	r2, r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e40:	f003 021f 	and.w	r2, r3, #31
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e48:	2101      	movs	r1, #1
 8004e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8004e4e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004e58:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00c      	beq.n	8004e7c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e70:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004e7a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d003      	beq.n	8004e9c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	4798      	blx	r3
    }
  }
  return status;
 8004e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b084      	sub	sp, #16
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec2:	f003 031f 	and.w	r3, r3, #31
 8004ec6:	2204      	movs	r2, #4
 8004ec8:	409a      	lsls	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d026      	beq.n	8004f20 <HAL_DMA_IRQHandler+0x7a>
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d021      	beq.n	8004f20 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0320 	and.w	r3, r3, #32
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d107      	bne.n	8004efa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 0204 	bic.w	r2, r2, #4
 8004ef8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efe:	f003 021f 	and.w	r2, r3, #31
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	2104      	movs	r1, #4
 8004f08:	fa01 f202 	lsl.w	r2, r1, r2
 8004f0c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d071      	beq.n	8004ffa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004f1e:	e06c      	b.n	8004ffa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f24:	f003 031f 	and.w	r3, r3, #31
 8004f28:	2202      	movs	r2, #2
 8004f2a:	409a      	lsls	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d02e      	beq.n	8004f92 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d029      	beq.n	8004f92 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0320 	and.w	r3, r3, #32
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10b      	bne.n	8004f64 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 020a 	bic.w	r2, r2, #10
 8004f5a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f68:	f003 021f 	and.w	r2, r3, #31
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f70:	2102      	movs	r1, #2
 8004f72:	fa01 f202 	lsl.w	r2, r1, r2
 8004f76:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d038      	beq.n	8004ffa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004f90:	e033      	b.n	8004ffa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f96:	f003 031f 	and.w	r3, r3, #31
 8004f9a:	2208      	movs	r2, #8
 8004f9c:	409a      	lsls	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d02a      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	f003 0308 	and.w	r3, r3, #8
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d025      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 020e 	bic.w	r2, r2, #14
 8004fbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc4:	f003 021f 	and.w	r2, r3, #31
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fcc:	2101      	movs	r1, #1
 8004fce:	fa01 f202 	lsl.w	r2, r1, r2
 8004fd2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d004      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004ffa:	bf00      	nop
 8004ffc:	bf00      	nop
}
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
 8005010:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800501a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005020:	2b00      	cmp	r3, #0
 8005022:	d004      	beq.n	800502e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800502c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005032:	f003 021f 	and.w	r2, r3, #31
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	2101      	movs	r1, #1
 800503c:	fa01 f202 	lsl.w	r2, r1, r2
 8005040:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	2b10      	cmp	r3, #16
 8005050:	d108      	bne.n	8005064 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005062:	e007      	b.n	8005074 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	60da      	str	r2, [r3, #12]
}
 8005074:	bf00      	nop
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	461a      	mov	r2, r3
 800508e:	4b16      	ldr	r3, [pc, #88]	; (80050e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005090:	429a      	cmp	r2, r3
 8005092:	d802      	bhi.n	800509a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005094:	4b15      	ldr	r3, [pc, #84]	; (80050ec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005096:	617b      	str	r3, [r7, #20]
 8005098:	e001      	b.n	800509e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800509a:	4b15      	ldr	r3, [pc, #84]	; (80050f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800509c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	3b08      	subs	r3, #8
 80050aa:	4a12      	ldr	r2, [pc, #72]	; (80050f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80050ac:	fba2 2303 	umull	r2, r3, r2, r3
 80050b0:	091b      	lsrs	r3, r3, #4
 80050b2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b8:	089b      	lsrs	r3, r3, #2
 80050ba:	009a      	lsls	r2, r3, #2
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	4413      	add	r3, r2
 80050c0:	461a      	mov	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a0b      	ldr	r2, [pc, #44]	; (80050f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80050ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f003 031f 	and.w	r3, r3, #31
 80050d2:	2201      	movs	r2, #1
 80050d4:	409a      	lsls	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80050da:	bf00      	nop
 80050dc:	371c      	adds	r7, #28
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	40020407 	.word	0x40020407
 80050ec:	40020800 	.word	0x40020800
 80050f0:	40020820 	.word	0x40020820
 80050f4:	cccccccd 	.word	0xcccccccd
 80050f8:	40020880 	.word	0x40020880

080050fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	b2db      	uxtb	r3, r3
 800510a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	4b0b      	ldr	r3, [pc, #44]	; (800513c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005110:	4413      	add	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	461a      	mov	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a08      	ldr	r2, [pc, #32]	; (8005140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800511e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	3b01      	subs	r3, #1
 8005124:	f003 031f 	and.w	r3, r3, #31
 8005128:	2201      	movs	r2, #1
 800512a:	409a      	lsls	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005130:	bf00      	nop
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	1000823f 	.word	0x1000823f
 8005140:	40020940 	.word	0x40020940

08005144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005144:	b480      	push	{r7}
 8005146:	b087      	sub	sp, #28
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800514e:	2300      	movs	r3, #0
 8005150:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005152:	e15a      	b.n	800540a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	2101      	movs	r1, #1
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	fa01 f303 	lsl.w	r3, r1, r3
 8005160:	4013      	ands	r3, r2
 8005162:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2b00      	cmp	r3, #0
 8005168:	f000 814c 	beq.w	8005404 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f003 0303 	and.w	r3, r3, #3
 8005174:	2b01      	cmp	r3, #1
 8005176:	d005      	beq.n	8005184 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005180:	2b02      	cmp	r3, #2
 8005182:	d130      	bne.n	80051e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	2203      	movs	r2, #3
 8005190:	fa02 f303 	lsl.w	r3, r2, r3
 8005194:	43db      	mvns	r3, r3
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	4013      	ands	r3, r2
 800519a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	68da      	ldr	r2, [r3, #12]
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	005b      	lsls	r3, r3, #1
 80051a4:	fa02 f303 	lsl.w	r3, r2, r3
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80051ba:	2201      	movs	r2, #1
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	fa02 f303 	lsl.w	r3, r2, r3
 80051c2:	43db      	mvns	r3, r3
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	4013      	ands	r3, r2
 80051c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	091b      	lsrs	r3, r3, #4
 80051d0:	f003 0201 	and.w	r2, r3, #1
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	fa02 f303 	lsl.w	r3, r2, r3
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	4313      	orrs	r3, r2
 80051de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f003 0303 	and.w	r3, r3, #3
 80051ee:	2b03      	cmp	r3, #3
 80051f0:	d017      	beq.n	8005222 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	2203      	movs	r2, #3
 80051fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005202:	43db      	mvns	r3, r3
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	4013      	ands	r3, r2
 8005208:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	689a      	ldr	r2, [r3, #8]
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	005b      	lsls	r3, r3, #1
 8005212:	fa02 f303 	lsl.w	r3, r2, r3
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	4313      	orrs	r3, r2
 800521a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f003 0303 	and.w	r3, r3, #3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d123      	bne.n	8005276 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	08da      	lsrs	r2, r3, #3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	3208      	adds	r2, #8
 8005236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800523a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f003 0307 	and.w	r3, r3, #7
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	220f      	movs	r2, #15
 8005246:	fa02 f303 	lsl.w	r3, r2, r3
 800524a:	43db      	mvns	r3, r3
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	4013      	ands	r3, r2
 8005250:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	691a      	ldr	r2, [r3, #16]
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f003 0307 	and.w	r3, r3, #7
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	fa02 f303 	lsl.w	r3, r2, r3
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	4313      	orrs	r3, r2
 8005266:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	08da      	lsrs	r2, r3, #3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3208      	adds	r2, #8
 8005270:	6939      	ldr	r1, [r7, #16]
 8005272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	2203      	movs	r2, #3
 8005282:	fa02 f303 	lsl.w	r3, r2, r3
 8005286:	43db      	mvns	r3, r3
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	4013      	ands	r3, r2
 800528c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f003 0203 	and.w	r2, r3, #3
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	fa02 f303 	lsl.w	r3, r2, r3
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f000 80a6 	beq.w	8005404 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052b8:	4b5b      	ldr	r3, [pc, #364]	; (8005428 <HAL_GPIO_Init+0x2e4>)
 80052ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052bc:	4a5a      	ldr	r2, [pc, #360]	; (8005428 <HAL_GPIO_Init+0x2e4>)
 80052be:	f043 0301 	orr.w	r3, r3, #1
 80052c2:	6613      	str	r3, [r2, #96]	; 0x60
 80052c4:	4b58      	ldr	r3, [pc, #352]	; (8005428 <HAL_GPIO_Init+0x2e4>)
 80052c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	60bb      	str	r3, [r7, #8]
 80052ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052d0:	4a56      	ldr	r2, [pc, #344]	; (800542c <HAL_GPIO_Init+0x2e8>)
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	089b      	lsrs	r3, r3, #2
 80052d6:	3302      	adds	r3, #2
 80052d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f003 0303 	and.w	r3, r3, #3
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	220f      	movs	r2, #15
 80052e8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ec:	43db      	mvns	r3, r3
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	4013      	ands	r3, r2
 80052f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80052fa:	d01f      	beq.n	800533c <HAL_GPIO_Init+0x1f8>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a4c      	ldr	r2, [pc, #304]	; (8005430 <HAL_GPIO_Init+0x2ec>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d019      	beq.n	8005338 <HAL_GPIO_Init+0x1f4>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a4b      	ldr	r2, [pc, #300]	; (8005434 <HAL_GPIO_Init+0x2f0>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d013      	beq.n	8005334 <HAL_GPIO_Init+0x1f0>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a4a      	ldr	r2, [pc, #296]	; (8005438 <HAL_GPIO_Init+0x2f4>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d00d      	beq.n	8005330 <HAL_GPIO_Init+0x1ec>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a49      	ldr	r2, [pc, #292]	; (800543c <HAL_GPIO_Init+0x2f8>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d007      	beq.n	800532c <HAL_GPIO_Init+0x1e8>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a48      	ldr	r2, [pc, #288]	; (8005440 <HAL_GPIO_Init+0x2fc>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d101      	bne.n	8005328 <HAL_GPIO_Init+0x1e4>
 8005324:	2305      	movs	r3, #5
 8005326:	e00a      	b.n	800533e <HAL_GPIO_Init+0x1fa>
 8005328:	2306      	movs	r3, #6
 800532a:	e008      	b.n	800533e <HAL_GPIO_Init+0x1fa>
 800532c:	2304      	movs	r3, #4
 800532e:	e006      	b.n	800533e <HAL_GPIO_Init+0x1fa>
 8005330:	2303      	movs	r3, #3
 8005332:	e004      	b.n	800533e <HAL_GPIO_Init+0x1fa>
 8005334:	2302      	movs	r3, #2
 8005336:	e002      	b.n	800533e <HAL_GPIO_Init+0x1fa>
 8005338:	2301      	movs	r3, #1
 800533a:	e000      	b.n	800533e <HAL_GPIO_Init+0x1fa>
 800533c:	2300      	movs	r3, #0
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	f002 0203 	and.w	r2, r2, #3
 8005344:	0092      	lsls	r2, r2, #2
 8005346:	4093      	lsls	r3, r2
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	4313      	orrs	r3, r2
 800534c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800534e:	4937      	ldr	r1, [pc, #220]	; (800542c <HAL_GPIO_Init+0x2e8>)
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	089b      	lsrs	r3, r3, #2
 8005354:	3302      	adds	r3, #2
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800535c:	4b39      	ldr	r3, [pc, #228]	; (8005444 <HAL_GPIO_Init+0x300>)
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	43db      	mvns	r3, r3
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	4013      	ands	r3, r2
 800536a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	4313      	orrs	r3, r2
 800537e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005380:	4a30      	ldr	r2, [pc, #192]	; (8005444 <HAL_GPIO_Init+0x300>)
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005386:	4b2f      	ldr	r3, [pc, #188]	; (8005444 <HAL_GPIO_Init+0x300>)
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	43db      	mvns	r3, r3
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	4013      	ands	r3, r2
 8005394:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80053aa:	4a26      	ldr	r2, [pc, #152]	; (8005444 <HAL_GPIO_Init+0x300>)
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80053b0:	4b24      	ldr	r3, [pc, #144]	; (8005444 <HAL_GPIO_Init+0x300>)
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	43db      	mvns	r3, r3
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	4013      	ands	r3, r2
 80053be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d003      	beq.n	80053d4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80053d4:	4a1b      	ldr	r2, [pc, #108]	; (8005444 <HAL_GPIO_Init+0x300>)
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80053da:	4b1a      	ldr	r3, [pc, #104]	; (8005444 <HAL_GPIO_Init+0x300>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	43db      	mvns	r3, r3
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	4013      	ands	r3, r2
 80053e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80053fe:	4a11      	ldr	r2, [pc, #68]	; (8005444 <HAL_GPIO_Init+0x300>)
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	3301      	adds	r3, #1
 8005408:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	fa22 f303 	lsr.w	r3, r2, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	f47f ae9d 	bne.w	8005154 <HAL_GPIO_Init+0x10>
  }
}
 800541a:	bf00      	nop
 800541c:	bf00      	nop
 800541e:	371c      	adds	r7, #28
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	40021000 	.word	0x40021000
 800542c:	40010000 	.word	0x40010000
 8005430:	48000400 	.word	0x48000400
 8005434:	48000800 	.word	0x48000800
 8005438:	48000c00 	.word	0x48000c00
 800543c:	48001000 	.word	0x48001000
 8005440:	48001400 	.word	0x48001400
 8005444:	40010400 	.word	0x40010400

08005448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	460b      	mov	r3, r1
 8005452:	807b      	strh	r3, [r7, #2]
 8005454:	4613      	mov	r3, r2
 8005456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005458:	787b      	ldrb	r3, [r7, #1]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800545e:	887a      	ldrh	r2, [r7, #2]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005464:	e002      	b.n	800546c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005466:	887a      	ldrh	r2, [r7, #2]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	4603      	mov	r3, r0
 8005480:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005482:	4b08      	ldr	r3, [pc, #32]	; (80054a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005484:	695a      	ldr	r2, [r3, #20]
 8005486:	88fb      	ldrh	r3, [r7, #6]
 8005488:	4013      	ands	r3, r2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d006      	beq.n	800549c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800548e:	4a05      	ldr	r2, [pc, #20]	; (80054a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005490:	88fb      	ldrh	r3, [r7, #6]
 8005492:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005494:	88fb      	ldrh	r3, [r7, #6]
 8005496:	4618      	mov	r0, r3
 8005498:	f000 f806 	bl	80054a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800549c:	bf00      	nop
 800549e:	3708      	adds	r7, #8
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	40010400 	.word	0x40010400

080054a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	4603      	mov	r3, r0
 80054b0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
	...

080054c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d141      	bne.n	8005552 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80054ce:	4b4b      	ldr	r3, [pc, #300]	; (80055fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80054d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054da:	d131      	bne.n	8005540 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054dc:	4b47      	ldr	r3, [pc, #284]	; (80055fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054e2:	4a46      	ldr	r2, [pc, #280]	; (80055fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80054ec:	4b43      	ldr	r3, [pc, #268]	; (80055fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80054f4:	4a41      	ldr	r2, [pc, #260]	; (80055fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80054fc:	4b40      	ldr	r3, [pc, #256]	; (8005600 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2232      	movs	r2, #50	; 0x32
 8005502:	fb02 f303 	mul.w	r3, r2, r3
 8005506:	4a3f      	ldr	r2, [pc, #252]	; (8005604 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005508:	fba2 2303 	umull	r2, r3, r2, r3
 800550c:	0c9b      	lsrs	r3, r3, #18
 800550e:	3301      	adds	r3, #1
 8005510:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005512:	e002      	b.n	800551a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	3b01      	subs	r3, #1
 8005518:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800551a:	4b38      	ldr	r3, [pc, #224]	; (80055fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005526:	d102      	bne.n	800552e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1f2      	bne.n	8005514 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800552e:	4b33      	ldr	r3, [pc, #204]	; (80055fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800553a:	d158      	bne.n	80055ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e057      	b.n	80055f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005540:	4b2e      	ldr	r3, [pc, #184]	; (80055fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005546:	4a2d      	ldr	r2, [pc, #180]	; (80055fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800554c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005550:	e04d      	b.n	80055ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005558:	d141      	bne.n	80055de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800555a:	4b28      	ldr	r3, [pc, #160]	; (80055fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005566:	d131      	bne.n	80055cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005568:	4b24      	ldr	r3, [pc, #144]	; (80055fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800556a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800556e:	4a23      	ldr	r2, [pc, #140]	; (80055fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005574:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005578:	4b20      	ldr	r3, [pc, #128]	; (80055fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005580:	4a1e      	ldr	r2, [pc, #120]	; (80055fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005582:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005586:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005588:	4b1d      	ldr	r3, [pc, #116]	; (8005600 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2232      	movs	r2, #50	; 0x32
 800558e:	fb02 f303 	mul.w	r3, r2, r3
 8005592:	4a1c      	ldr	r2, [pc, #112]	; (8005604 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005594:	fba2 2303 	umull	r2, r3, r2, r3
 8005598:	0c9b      	lsrs	r3, r3, #18
 800559a:	3301      	adds	r3, #1
 800559c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800559e:	e002      	b.n	80055a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	3b01      	subs	r3, #1
 80055a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055a6:	4b15      	ldr	r3, [pc, #84]	; (80055fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055b2:	d102      	bne.n	80055ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1f2      	bne.n	80055a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80055ba:	4b10      	ldr	r3, [pc, #64]	; (80055fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055c6:	d112      	bne.n	80055ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e011      	b.n	80055f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055cc:	4b0b      	ldr	r3, [pc, #44]	; (80055fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055d2:	4a0a      	ldr	r2, [pc, #40]	; (80055fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80055dc:	e007      	b.n	80055ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80055de:	4b07      	ldr	r3, [pc, #28]	; (80055fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80055e6:	4a05      	ldr	r2, [pc, #20]	; (80055fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055ec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	40007000 	.word	0x40007000
 8005600:	20000000 	.word	0x20000000
 8005604:	431bde83 	.word	0x431bde83

08005608 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005608:	b480      	push	{r7}
 800560a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800560c:	4b05      	ldr	r3, [pc, #20]	; (8005624 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	4a04      	ldr	r2, [pc, #16]	; (8005624 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005612:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005616:	6093      	str	r3, [r2, #8]
}
 8005618:	bf00      	nop
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	40007000 	.word	0x40007000

08005628 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b088      	sub	sp, #32
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e306      	b.n	8005c48 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b00      	cmp	r3, #0
 8005644:	d075      	beq.n	8005732 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005646:	4b97      	ldr	r3, [pc, #604]	; (80058a4 <HAL_RCC_OscConfig+0x27c>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f003 030c 	and.w	r3, r3, #12
 800564e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005650:	4b94      	ldr	r3, [pc, #592]	; (80058a4 <HAL_RCC_OscConfig+0x27c>)
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f003 0303 	and.w	r3, r3, #3
 8005658:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	2b0c      	cmp	r3, #12
 800565e:	d102      	bne.n	8005666 <HAL_RCC_OscConfig+0x3e>
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	2b03      	cmp	r3, #3
 8005664:	d002      	beq.n	800566c <HAL_RCC_OscConfig+0x44>
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	2b08      	cmp	r3, #8
 800566a:	d10b      	bne.n	8005684 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800566c:	4b8d      	ldr	r3, [pc, #564]	; (80058a4 <HAL_RCC_OscConfig+0x27c>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d05b      	beq.n	8005730 <HAL_RCC_OscConfig+0x108>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d157      	bne.n	8005730 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e2e1      	b.n	8005c48 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800568c:	d106      	bne.n	800569c <HAL_RCC_OscConfig+0x74>
 800568e:	4b85      	ldr	r3, [pc, #532]	; (80058a4 <HAL_RCC_OscConfig+0x27c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a84      	ldr	r2, [pc, #528]	; (80058a4 <HAL_RCC_OscConfig+0x27c>)
 8005694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005698:	6013      	str	r3, [r2, #0]
 800569a:	e01d      	b.n	80056d8 <HAL_RCC_OscConfig+0xb0>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056a4:	d10c      	bne.n	80056c0 <HAL_RCC_OscConfig+0x98>
 80056a6:	4b7f      	ldr	r3, [pc, #508]	; (80058a4 <HAL_RCC_OscConfig+0x27c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a7e      	ldr	r2, [pc, #504]	; (80058a4 <HAL_RCC_OscConfig+0x27c>)
 80056ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056b0:	6013      	str	r3, [r2, #0]
 80056b2:	4b7c      	ldr	r3, [pc, #496]	; (80058a4 <HAL_RCC_OscConfig+0x27c>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a7b      	ldr	r2, [pc, #492]	; (80058a4 <HAL_RCC_OscConfig+0x27c>)
 80056b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056bc:	6013      	str	r3, [r2, #0]
 80056be:	e00b      	b.n	80056d8 <HAL_RCC_OscConfig+0xb0>
 80056c0:	4b78      	ldr	r3, [pc, #480]	; (80058a4 <HAL_RCC_OscConfig+0x27c>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a77      	ldr	r2, [pc, #476]	; (80058a4 <HAL_RCC_OscConfig+0x27c>)
 80056c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056ca:	6013      	str	r3, [r2, #0]
 80056cc:	4b75      	ldr	r3, [pc, #468]	; (80058a4 <HAL_RCC_OscConfig+0x27c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a74      	ldr	r2, [pc, #464]	; (80058a4 <HAL_RCC_OscConfig+0x27c>)
 80056d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d013      	beq.n	8005708 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e0:	f7fd f91e 	bl	8002920 <HAL_GetTick>
 80056e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056e6:	e008      	b.n	80056fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056e8:	f7fd f91a 	bl	8002920 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b64      	cmp	r3, #100	; 0x64
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e2a6      	b.n	8005c48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056fa:	4b6a      	ldr	r3, [pc, #424]	; (80058a4 <HAL_RCC_OscConfig+0x27c>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d0f0      	beq.n	80056e8 <HAL_RCC_OscConfig+0xc0>
 8005706:	e014      	b.n	8005732 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005708:	f7fd f90a 	bl	8002920 <HAL_GetTick>
 800570c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800570e:	e008      	b.n	8005722 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005710:	f7fd f906 	bl	8002920 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	2b64      	cmp	r3, #100	; 0x64
 800571c:	d901      	bls.n	8005722 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e292      	b.n	8005c48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005722:	4b60      	ldr	r3, [pc, #384]	; (80058a4 <HAL_RCC_OscConfig+0x27c>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1f0      	bne.n	8005710 <HAL_RCC_OscConfig+0xe8>
 800572e:	e000      	b.n	8005732 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	2b00      	cmp	r3, #0
 800573c:	d075      	beq.n	800582a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800573e:	4b59      	ldr	r3, [pc, #356]	; (80058a4 <HAL_RCC_OscConfig+0x27c>)
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f003 030c 	and.w	r3, r3, #12
 8005746:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005748:	4b56      	ldr	r3, [pc, #344]	; (80058a4 <HAL_RCC_OscConfig+0x27c>)
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f003 0303 	and.w	r3, r3, #3
 8005750:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	2b0c      	cmp	r3, #12
 8005756:	d102      	bne.n	800575e <HAL_RCC_OscConfig+0x136>
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	2b02      	cmp	r3, #2
 800575c:	d002      	beq.n	8005764 <HAL_RCC_OscConfig+0x13c>
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	2b04      	cmp	r3, #4
 8005762:	d11f      	bne.n	80057a4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005764:	4b4f      	ldr	r3, [pc, #316]	; (80058a4 <HAL_RCC_OscConfig+0x27c>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800576c:	2b00      	cmp	r3, #0
 800576e:	d005      	beq.n	800577c <HAL_RCC_OscConfig+0x154>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d101      	bne.n	800577c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e265      	b.n	8005c48 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800577c:	4b49      	ldr	r3, [pc, #292]	; (80058a4 <HAL_RCC_OscConfig+0x27c>)
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	061b      	lsls	r3, r3, #24
 800578a:	4946      	ldr	r1, [pc, #280]	; (80058a4 <HAL_RCC_OscConfig+0x27c>)
 800578c:	4313      	orrs	r3, r2
 800578e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005790:	4b45      	ldr	r3, [pc, #276]	; (80058a8 <HAL_RCC_OscConfig+0x280>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4618      	mov	r0, r3
 8005796:	f7fb ffe5 	bl	8001764 <HAL_InitTick>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d043      	beq.n	8005828 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e251      	b.n	8005c48 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d023      	beq.n	80057f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057ac:	4b3d      	ldr	r3, [pc, #244]	; (80058a4 <HAL_RCC_OscConfig+0x27c>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a3c      	ldr	r2, [pc, #240]	; (80058a4 <HAL_RCC_OscConfig+0x27c>)
 80057b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b8:	f7fd f8b2 	bl	8002920 <HAL_GetTick>
 80057bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057be:	e008      	b.n	80057d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057c0:	f7fd f8ae 	bl	8002920 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d901      	bls.n	80057d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e23a      	b.n	8005c48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057d2:	4b34      	ldr	r3, [pc, #208]	; (80058a4 <HAL_RCC_OscConfig+0x27c>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d0f0      	beq.n	80057c0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057de:	4b31      	ldr	r3, [pc, #196]	; (80058a4 <HAL_RCC_OscConfig+0x27c>)
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	061b      	lsls	r3, r3, #24
 80057ec:	492d      	ldr	r1, [pc, #180]	; (80058a4 <HAL_RCC_OscConfig+0x27c>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	604b      	str	r3, [r1, #4]
 80057f2:	e01a      	b.n	800582a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057f4:	4b2b      	ldr	r3, [pc, #172]	; (80058a4 <HAL_RCC_OscConfig+0x27c>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a2a      	ldr	r2, [pc, #168]	; (80058a4 <HAL_RCC_OscConfig+0x27c>)
 80057fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005800:	f7fd f88e 	bl	8002920 <HAL_GetTick>
 8005804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005806:	e008      	b.n	800581a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005808:	f7fd f88a 	bl	8002920 <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	2b02      	cmp	r3, #2
 8005814:	d901      	bls.n	800581a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e216      	b.n	8005c48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800581a:	4b22      	ldr	r3, [pc, #136]	; (80058a4 <HAL_RCC_OscConfig+0x27c>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1f0      	bne.n	8005808 <HAL_RCC_OscConfig+0x1e0>
 8005826:	e000      	b.n	800582a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005828:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0308 	and.w	r3, r3, #8
 8005832:	2b00      	cmp	r3, #0
 8005834:	d041      	beq.n	80058ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d01c      	beq.n	8005878 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800583e:	4b19      	ldr	r3, [pc, #100]	; (80058a4 <HAL_RCC_OscConfig+0x27c>)
 8005840:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005844:	4a17      	ldr	r2, [pc, #92]	; (80058a4 <HAL_RCC_OscConfig+0x27c>)
 8005846:	f043 0301 	orr.w	r3, r3, #1
 800584a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800584e:	f7fd f867 	bl	8002920 <HAL_GetTick>
 8005852:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005854:	e008      	b.n	8005868 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005856:	f7fd f863 	bl	8002920 <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	2b02      	cmp	r3, #2
 8005862:	d901      	bls.n	8005868 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e1ef      	b.n	8005c48 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005868:	4b0e      	ldr	r3, [pc, #56]	; (80058a4 <HAL_RCC_OscConfig+0x27c>)
 800586a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d0ef      	beq.n	8005856 <HAL_RCC_OscConfig+0x22e>
 8005876:	e020      	b.n	80058ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005878:	4b0a      	ldr	r3, [pc, #40]	; (80058a4 <HAL_RCC_OscConfig+0x27c>)
 800587a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800587e:	4a09      	ldr	r2, [pc, #36]	; (80058a4 <HAL_RCC_OscConfig+0x27c>)
 8005880:	f023 0301 	bic.w	r3, r3, #1
 8005884:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005888:	f7fd f84a 	bl	8002920 <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800588e:	e00d      	b.n	80058ac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005890:	f7fd f846 	bl	8002920 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d906      	bls.n	80058ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e1d2      	b.n	8005c48 <HAL_RCC_OscConfig+0x620>
 80058a2:	bf00      	nop
 80058a4:	40021000 	.word	0x40021000
 80058a8:	200000c0 	.word	0x200000c0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058ac:	4b8c      	ldr	r3, [pc, #560]	; (8005ae0 <HAL_RCC_OscConfig+0x4b8>)
 80058ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1ea      	bne.n	8005890 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0304 	and.w	r3, r3, #4
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 80a6 	beq.w	8005a14 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058c8:	2300      	movs	r3, #0
 80058ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80058cc:	4b84      	ldr	r3, [pc, #528]	; (8005ae0 <HAL_RCC_OscConfig+0x4b8>)
 80058ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <HAL_RCC_OscConfig+0x2b4>
 80058d8:	2301      	movs	r3, #1
 80058da:	e000      	b.n	80058de <HAL_RCC_OscConfig+0x2b6>
 80058dc:	2300      	movs	r3, #0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00d      	beq.n	80058fe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058e2:	4b7f      	ldr	r3, [pc, #508]	; (8005ae0 <HAL_RCC_OscConfig+0x4b8>)
 80058e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e6:	4a7e      	ldr	r2, [pc, #504]	; (8005ae0 <HAL_RCC_OscConfig+0x4b8>)
 80058e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ec:	6593      	str	r3, [r2, #88]	; 0x58
 80058ee:	4b7c      	ldr	r3, [pc, #496]	; (8005ae0 <HAL_RCC_OscConfig+0x4b8>)
 80058f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80058fa:	2301      	movs	r3, #1
 80058fc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058fe:	4b79      	ldr	r3, [pc, #484]	; (8005ae4 <HAL_RCC_OscConfig+0x4bc>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005906:	2b00      	cmp	r3, #0
 8005908:	d118      	bne.n	800593c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800590a:	4b76      	ldr	r3, [pc, #472]	; (8005ae4 <HAL_RCC_OscConfig+0x4bc>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a75      	ldr	r2, [pc, #468]	; (8005ae4 <HAL_RCC_OscConfig+0x4bc>)
 8005910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005914:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005916:	f7fd f803 	bl	8002920 <HAL_GetTick>
 800591a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800591c:	e008      	b.n	8005930 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800591e:	f7fc ffff 	bl	8002920 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	2b02      	cmp	r3, #2
 800592a:	d901      	bls.n	8005930 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e18b      	b.n	8005c48 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005930:	4b6c      	ldr	r3, [pc, #432]	; (8005ae4 <HAL_RCC_OscConfig+0x4bc>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005938:	2b00      	cmp	r3, #0
 800593a:	d0f0      	beq.n	800591e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d108      	bne.n	8005956 <HAL_RCC_OscConfig+0x32e>
 8005944:	4b66      	ldr	r3, [pc, #408]	; (8005ae0 <HAL_RCC_OscConfig+0x4b8>)
 8005946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800594a:	4a65      	ldr	r2, [pc, #404]	; (8005ae0 <HAL_RCC_OscConfig+0x4b8>)
 800594c:	f043 0301 	orr.w	r3, r3, #1
 8005950:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005954:	e024      	b.n	80059a0 <HAL_RCC_OscConfig+0x378>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	2b05      	cmp	r3, #5
 800595c:	d110      	bne.n	8005980 <HAL_RCC_OscConfig+0x358>
 800595e:	4b60      	ldr	r3, [pc, #384]	; (8005ae0 <HAL_RCC_OscConfig+0x4b8>)
 8005960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005964:	4a5e      	ldr	r2, [pc, #376]	; (8005ae0 <HAL_RCC_OscConfig+0x4b8>)
 8005966:	f043 0304 	orr.w	r3, r3, #4
 800596a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800596e:	4b5c      	ldr	r3, [pc, #368]	; (8005ae0 <HAL_RCC_OscConfig+0x4b8>)
 8005970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005974:	4a5a      	ldr	r2, [pc, #360]	; (8005ae0 <HAL_RCC_OscConfig+0x4b8>)
 8005976:	f043 0301 	orr.w	r3, r3, #1
 800597a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800597e:	e00f      	b.n	80059a0 <HAL_RCC_OscConfig+0x378>
 8005980:	4b57      	ldr	r3, [pc, #348]	; (8005ae0 <HAL_RCC_OscConfig+0x4b8>)
 8005982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005986:	4a56      	ldr	r2, [pc, #344]	; (8005ae0 <HAL_RCC_OscConfig+0x4b8>)
 8005988:	f023 0301 	bic.w	r3, r3, #1
 800598c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005990:	4b53      	ldr	r3, [pc, #332]	; (8005ae0 <HAL_RCC_OscConfig+0x4b8>)
 8005992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005996:	4a52      	ldr	r2, [pc, #328]	; (8005ae0 <HAL_RCC_OscConfig+0x4b8>)
 8005998:	f023 0304 	bic.w	r3, r3, #4
 800599c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d016      	beq.n	80059d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a8:	f7fc ffba 	bl	8002920 <HAL_GetTick>
 80059ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059ae:	e00a      	b.n	80059c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059b0:	f7fc ffb6 	bl	8002920 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80059be:	4293      	cmp	r3, r2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e140      	b.n	8005c48 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059c6:	4b46      	ldr	r3, [pc, #280]	; (8005ae0 <HAL_RCC_OscConfig+0x4b8>)
 80059c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d0ed      	beq.n	80059b0 <HAL_RCC_OscConfig+0x388>
 80059d4:	e015      	b.n	8005a02 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059d6:	f7fc ffa3 	bl	8002920 <HAL_GetTick>
 80059da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059dc:	e00a      	b.n	80059f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059de:	f7fc ff9f 	bl	8002920 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d901      	bls.n	80059f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e129      	b.n	8005c48 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059f4:	4b3a      	ldr	r3, [pc, #232]	; (8005ae0 <HAL_RCC_OscConfig+0x4b8>)
 80059f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059fa:	f003 0302 	and.w	r3, r3, #2
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1ed      	bne.n	80059de <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a02:	7ffb      	ldrb	r3, [r7, #31]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d105      	bne.n	8005a14 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a08:	4b35      	ldr	r3, [pc, #212]	; (8005ae0 <HAL_RCC_OscConfig+0x4b8>)
 8005a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a0c:	4a34      	ldr	r2, [pc, #208]	; (8005ae0 <HAL_RCC_OscConfig+0x4b8>)
 8005a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a12:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0320 	and.w	r3, r3, #32
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d03c      	beq.n	8005a9a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d01c      	beq.n	8005a62 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a28:	4b2d      	ldr	r3, [pc, #180]	; (8005ae0 <HAL_RCC_OscConfig+0x4b8>)
 8005a2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a2e:	4a2c      	ldr	r2, [pc, #176]	; (8005ae0 <HAL_RCC_OscConfig+0x4b8>)
 8005a30:	f043 0301 	orr.w	r3, r3, #1
 8005a34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a38:	f7fc ff72 	bl	8002920 <HAL_GetTick>
 8005a3c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a3e:	e008      	b.n	8005a52 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a40:	f7fc ff6e 	bl	8002920 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e0fa      	b.n	8005c48 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a52:	4b23      	ldr	r3, [pc, #140]	; (8005ae0 <HAL_RCC_OscConfig+0x4b8>)
 8005a54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a58:	f003 0302 	and.w	r3, r3, #2
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d0ef      	beq.n	8005a40 <HAL_RCC_OscConfig+0x418>
 8005a60:	e01b      	b.n	8005a9a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a62:	4b1f      	ldr	r3, [pc, #124]	; (8005ae0 <HAL_RCC_OscConfig+0x4b8>)
 8005a64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a68:	4a1d      	ldr	r2, [pc, #116]	; (8005ae0 <HAL_RCC_OscConfig+0x4b8>)
 8005a6a:	f023 0301 	bic.w	r3, r3, #1
 8005a6e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a72:	f7fc ff55 	bl	8002920 <HAL_GetTick>
 8005a76:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a78:	e008      	b.n	8005a8c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a7a:	f7fc ff51 	bl	8002920 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d901      	bls.n	8005a8c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e0dd      	b.n	8005c48 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a8c:	4b14      	ldr	r3, [pc, #80]	; (8005ae0 <HAL_RCC_OscConfig+0x4b8>)
 8005a8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1ef      	bne.n	8005a7a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f000 80d1 	beq.w	8005c46 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005aa4:	4b0e      	ldr	r3, [pc, #56]	; (8005ae0 <HAL_RCC_OscConfig+0x4b8>)
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f003 030c 	and.w	r3, r3, #12
 8005aac:	2b0c      	cmp	r3, #12
 8005aae:	f000 808b 	beq.w	8005bc8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	69db      	ldr	r3, [r3, #28]
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d15e      	bne.n	8005b78 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aba:	4b09      	ldr	r3, [pc, #36]	; (8005ae0 <HAL_RCC_OscConfig+0x4b8>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a08      	ldr	r2, [pc, #32]	; (8005ae0 <HAL_RCC_OscConfig+0x4b8>)
 8005ac0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ac4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac6:	f7fc ff2b 	bl	8002920 <HAL_GetTick>
 8005aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005acc:	e00c      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ace:	f7fc ff27 	bl	8002920 <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d905      	bls.n	8005ae8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e0b3      	b.n	8005c48 <HAL_RCC_OscConfig+0x620>
 8005ae0:	40021000 	.word	0x40021000
 8005ae4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ae8:	4b59      	ldr	r3, [pc, #356]	; (8005c50 <HAL_RCC_OscConfig+0x628>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1ec      	bne.n	8005ace <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005af4:	4b56      	ldr	r3, [pc, #344]	; (8005c50 <HAL_RCC_OscConfig+0x628>)
 8005af6:	68da      	ldr	r2, [r3, #12]
 8005af8:	4b56      	ldr	r3, [pc, #344]	; (8005c54 <HAL_RCC_OscConfig+0x62c>)
 8005afa:	4013      	ands	r3, r2
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	6a11      	ldr	r1, [r2, #32]
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b04:	3a01      	subs	r2, #1
 8005b06:	0112      	lsls	r2, r2, #4
 8005b08:	4311      	orrs	r1, r2
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005b0e:	0212      	lsls	r2, r2, #8
 8005b10:	4311      	orrs	r1, r2
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005b16:	0852      	lsrs	r2, r2, #1
 8005b18:	3a01      	subs	r2, #1
 8005b1a:	0552      	lsls	r2, r2, #21
 8005b1c:	4311      	orrs	r1, r2
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b22:	0852      	lsrs	r2, r2, #1
 8005b24:	3a01      	subs	r2, #1
 8005b26:	0652      	lsls	r2, r2, #25
 8005b28:	4311      	orrs	r1, r2
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005b2e:	06d2      	lsls	r2, r2, #27
 8005b30:	430a      	orrs	r2, r1
 8005b32:	4947      	ldr	r1, [pc, #284]	; (8005c50 <HAL_RCC_OscConfig+0x628>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b38:	4b45      	ldr	r3, [pc, #276]	; (8005c50 <HAL_RCC_OscConfig+0x628>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a44      	ldr	r2, [pc, #272]	; (8005c50 <HAL_RCC_OscConfig+0x628>)
 8005b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b42:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b44:	4b42      	ldr	r3, [pc, #264]	; (8005c50 <HAL_RCC_OscConfig+0x628>)
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	4a41      	ldr	r2, [pc, #260]	; (8005c50 <HAL_RCC_OscConfig+0x628>)
 8005b4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b4e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b50:	f7fc fee6 	bl	8002920 <HAL_GetTick>
 8005b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b56:	e008      	b.n	8005b6a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b58:	f7fc fee2 	bl	8002920 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d901      	bls.n	8005b6a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e06e      	b.n	8005c48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b6a:	4b39      	ldr	r3, [pc, #228]	; (8005c50 <HAL_RCC_OscConfig+0x628>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d0f0      	beq.n	8005b58 <HAL_RCC_OscConfig+0x530>
 8005b76:	e066      	b.n	8005c46 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b78:	4b35      	ldr	r3, [pc, #212]	; (8005c50 <HAL_RCC_OscConfig+0x628>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a34      	ldr	r2, [pc, #208]	; (8005c50 <HAL_RCC_OscConfig+0x628>)
 8005b7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b82:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005b84:	4b32      	ldr	r3, [pc, #200]	; (8005c50 <HAL_RCC_OscConfig+0x628>)
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	4a31      	ldr	r2, [pc, #196]	; (8005c50 <HAL_RCC_OscConfig+0x628>)
 8005b8a:	f023 0303 	bic.w	r3, r3, #3
 8005b8e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005b90:	4b2f      	ldr	r3, [pc, #188]	; (8005c50 <HAL_RCC_OscConfig+0x628>)
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	4a2e      	ldr	r2, [pc, #184]	; (8005c50 <HAL_RCC_OscConfig+0x628>)
 8005b96:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b9e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba0:	f7fc febe 	bl	8002920 <HAL_GetTick>
 8005ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ba6:	e008      	b.n	8005bba <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ba8:	f7fc feba 	bl	8002920 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d901      	bls.n	8005bba <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e046      	b.n	8005c48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bba:	4b25      	ldr	r3, [pc, #148]	; (8005c50 <HAL_RCC_OscConfig+0x628>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1f0      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x580>
 8005bc6:	e03e      	b.n	8005c46 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	69db      	ldr	r3, [r3, #28]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d101      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e039      	b.n	8005c48 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005bd4:	4b1e      	ldr	r3, [pc, #120]	; (8005c50 <HAL_RCC_OscConfig+0x628>)
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f003 0203 	and.w	r2, r3, #3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d12c      	bne.n	8005c42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d123      	bne.n	8005c42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c04:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d11b      	bne.n	8005c42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c14:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d113      	bne.n	8005c42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c24:	085b      	lsrs	r3, r3, #1
 8005c26:	3b01      	subs	r3, #1
 8005c28:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d109      	bne.n	8005c42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c38:	085b      	lsrs	r3, r3, #1
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d001      	beq.n	8005c46 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e000      	b.n	8005c48 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3720      	adds	r7, #32
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	40021000 	.word	0x40021000
 8005c54:	019f800c 	.word	0x019f800c

08005c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005c62:	2300      	movs	r3, #0
 8005c64:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d101      	bne.n	8005c70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e11e      	b.n	8005eae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c70:	4b91      	ldr	r3, [pc, #580]	; (8005eb8 <HAL_RCC_ClockConfig+0x260>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 030f 	and.w	r3, r3, #15
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d910      	bls.n	8005ca0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c7e:	4b8e      	ldr	r3, [pc, #568]	; (8005eb8 <HAL_RCC_ClockConfig+0x260>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f023 020f 	bic.w	r2, r3, #15
 8005c86:	498c      	ldr	r1, [pc, #560]	; (8005eb8 <HAL_RCC_ClockConfig+0x260>)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c8e:	4b8a      	ldr	r3, [pc, #552]	; (8005eb8 <HAL_RCC_ClockConfig+0x260>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 030f 	and.w	r3, r3, #15
 8005c96:	683a      	ldr	r2, [r7, #0]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d001      	beq.n	8005ca0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e106      	b.n	8005eae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d073      	beq.n	8005d94 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	2b03      	cmp	r3, #3
 8005cb2:	d129      	bne.n	8005d08 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cb4:	4b81      	ldr	r3, [pc, #516]	; (8005ebc <HAL_RCC_ClockConfig+0x264>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e0f4      	b.n	8005eae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005cc4:	f000 f9d0 	bl	8006068 <RCC_GetSysClockFreqFromPLLSource>
 8005cc8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	4a7c      	ldr	r2, [pc, #496]	; (8005ec0 <HAL_RCC_ClockConfig+0x268>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d93f      	bls.n	8005d52 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005cd2:	4b7a      	ldr	r3, [pc, #488]	; (8005ebc <HAL_RCC_ClockConfig+0x264>)
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d009      	beq.n	8005cf2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d033      	beq.n	8005d52 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d12f      	bne.n	8005d52 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005cf2:	4b72      	ldr	r3, [pc, #456]	; (8005ebc <HAL_RCC_ClockConfig+0x264>)
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cfa:	4a70      	ldr	r2, [pc, #448]	; (8005ebc <HAL_RCC_ClockConfig+0x264>)
 8005cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005d02:	2380      	movs	r3, #128	; 0x80
 8005d04:	617b      	str	r3, [r7, #20]
 8005d06:	e024      	b.n	8005d52 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d107      	bne.n	8005d20 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d10:	4b6a      	ldr	r3, [pc, #424]	; (8005ebc <HAL_RCC_ClockConfig+0x264>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d109      	bne.n	8005d30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e0c6      	b.n	8005eae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d20:	4b66      	ldr	r3, [pc, #408]	; (8005ebc <HAL_RCC_ClockConfig+0x264>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e0be      	b.n	8005eae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005d30:	f000 f8ce 	bl	8005ed0 <HAL_RCC_GetSysClockFreq>
 8005d34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	4a61      	ldr	r2, [pc, #388]	; (8005ec0 <HAL_RCC_ClockConfig+0x268>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d909      	bls.n	8005d52 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005d3e:	4b5f      	ldr	r3, [pc, #380]	; (8005ebc <HAL_RCC_ClockConfig+0x264>)
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d46:	4a5d      	ldr	r2, [pc, #372]	; (8005ebc <HAL_RCC_ClockConfig+0x264>)
 8005d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d4c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005d4e:	2380      	movs	r3, #128	; 0x80
 8005d50:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d52:	4b5a      	ldr	r3, [pc, #360]	; (8005ebc <HAL_RCC_ClockConfig+0x264>)
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f023 0203 	bic.w	r2, r3, #3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	4957      	ldr	r1, [pc, #348]	; (8005ebc <HAL_RCC_ClockConfig+0x264>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d64:	f7fc fddc 	bl	8002920 <HAL_GetTick>
 8005d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d6a:	e00a      	b.n	8005d82 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d6c:	f7fc fdd8 	bl	8002920 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e095      	b.n	8005eae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d82:	4b4e      	ldr	r3, [pc, #312]	; (8005ebc <HAL_RCC_ClockConfig+0x264>)
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f003 020c 	and.w	r2, r3, #12
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d1eb      	bne.n	8005d6c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0302 	and.w	r3, r3, #2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d023      	beq.n	8005de8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0304 	and.w	r3, r3, #4
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d005      	beq.n	8005db8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005dac:	4b43      	ldr	r3, [pc, #268]	; (8005ebc <HAL_RCC_ClockConfig+0x264>)
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	4a42      	ldr	r2, [pc, #264]	; (8005ebc <HAL_RCC_ClockConfig+0x264>)
 8005db2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005db6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0308 	and.w	r3, r3, #8
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d007      	beq.n	8005dd4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005dc4:	4b3d      	ldr	r3, [pc, #244]	; (8005ebc <HAL_RCC_ClockConfig+0x264>)
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005dcc:	4a3b      	ldr	r2, [pc, #236]	; (8005ebc <HAL_RCC_ClockConfig+0x264>)
 8005dce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005dd2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dd4:	4b39      	ldr	r3, [pc, #228]	; (8005ebc <HAL_RCC_ClockConfig+0x264>)
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	4936      	ldr	r1, [pc, #216]	; (8005ebc <HAL_RCC_ClockConfig+0x264>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	608b      	str	r3, [r1, #8]
 8005de6:	e008      	b.n	8005dfa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	2b80      	cmp	r3, #128	; 0x80
 8005dec:	d105      	bne.n	8005dfa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005dee:	4b33      	ldr	r3, [pc, #204]	; (8005ebc <HAL_RCC_ClockConfig+0x264>)
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	4a32      	ldr	r2, [pc, #200]	; (8005ebc <HAL_RCC_ClockConfig+0x264>)
 8005df4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005df8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005dfa:	4b2f      	ldr	r3, [pc, #188]	; (8005eb8 <HAL_RCC_ClockConfig+0x260>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 030f 	and.w	r3, r3, #15
 8005e02:	683a      	ldr	r2, [r7, #0]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d21d      	bcs.n	8005e44 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e08:	4b2b      	ldr	r3, [pc, #172]	; (8005eb8 <HAL_RCC_ClockConfig+0x260>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f023 020f 	bic.w	r2, r3, #15
 8005e10:	4929      	ldr	r1, [pc, #164]	; (8005eb8 <HAL_RCC_ClockConfig+0x260>)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005e18:	f7fc fd82 	bl	8002920 <HAL_GetTick>
 8005e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e1e:	e00a      	b.n	8005e36 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e20:	f7fc fd7e 	bl	8002920 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d901      	bls.n	8005e36 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e03b      	b.n	8005eae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e36:	4b20      	ldr	r3, [pc, #128]	; (8005eb8 <HAL_RCC_ClockConfig+0x260>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 030f 	and.w	r3, r3, #15
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d1ed      	bne.n	8005e20 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0304 	and.w	r3, r3, #4
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d008      	beq.n	8005e62 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e50:	4b1a      	ldr	r3, [pc, #104]	; (8005ebc <HAL_RCC_ClockConfig+0x264>)
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	4917      	ldr	r1, [pc, #92]	; (8005ebc <HAL_RCC_ClockConfig+0x264>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0308 	and.w	r3, r3, #8
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d009      	beq.n	8005e82 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e6e:	4b13      	ldr	r3, [pc, #76]	; (8005ebc <HAL_RCC_ClockConfig+0x264>)
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	00db      	lsls	r3, r3, #3
 8005e7c:	490f      	ldr	r1, [pc, #60]	; (8005ebc <HAL_RCC_ClockConfig+0x264>)
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e82:	f000 f825 	bl	8005ed0 <HAL_RCC_GetSysClockFreq>
 8005e86:	4602      	mov	r2, r0
 8005e88:	4b0c      	ldr	r3, [pc, #48]	; (8005ebc <HAL_RCC_ClockConfig+0x264>)
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	091b      	lsrs	r3, r3, #4
 8005e8e:	f003 030f 	and.w	r3, r3, #15
 8005e92:	490c      	ldr	r1, [pc, #48]	; (8005ec4 <HAL_RCC_ClockConfig+0x26c>)
 8005e94:	5ccb      	ldrb	r3, [r1, r3]
 8005e96:	f003 031f 	and.w	r3, r3, #31
 8005e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e9e:	4a0a      	ldr	r2, [pc, #40]	; (8005ec8 <HAL_RCC_ClockConfig+0x270>)
 8005ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005ea2:	4b0a      	ldr	r3, [pc, #40]	; (8005ecc <HAL_RCC_ClockConfig+0x274>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fb fc5c 	bl	8001764 <HAL_InitTick>
 8005eac:	4603      	mov	r3, r0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	40022000 	.word	0x40022000
 8005ebc:	40021000 	.word	0x40021000
 8005ec0:	04c4b400 	.word	0x04c4b400
 8005ec4:	0800d728 	.word	0x0800d728
 8005ec8:	20000000 	.word	0x20000000
 8005ecc:	200000c0 	.word	0x200000c0

08005ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b087      	sub	sp, #28
 8005ed4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005ed6:	4b2c      	ldr	r3, [pc, #176]	; (8005f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f003 030c 	and.w	r3, r3, #12
 8005ede:	2b04      	cmp	r3, #4
 8005ee0:	d102      	bne.n	8005ee8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ee2:	4b2a      	ldr	r3, [pc, #168]	; (8005f8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ee4:	613b      	str	r3, [r7, #16]
 8005ee6:	e047      	b.n	8005f78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005ee8:	4b27      	ldr	r3, [pc, #156]	; (8005f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f003 030c 	and.w	r3, r3, #12
 8005ef0:	2b08      	cmp	r3, #8
 8005ef2:	d102      	bne.n	8005efa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ef4:	4b26      	ldr	r3, [pc, #152]	; (8005f90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ef6:	613b      	str	r3, [r7, #16]
 8005ef8:	e03e      	b.n	8005f78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005efa:	4b23      	ldr	r3, [pc, #140]	; (8005f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f003 030c 	and.w	r3, r3, #12
 8005f02:	2b0c      	cmp	r3, #12
 8005f04:	d136      	bne.n	8005f74 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f06:	4b20      	ldr	r3, [pc, #128]	; (8005f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	f003 0303 	and.w	r3, r3, #3
 8005f0e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f10:	4b1d      	ldr	r3, [pc, #116]	; (8005f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	091b      	lsrs	r3, r3, #4
 8005f16:	f003 030f 	and.w	r3, r3, #15
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	d10c      	bne.n	8005f3e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f24:	4a1a      	ldr	r2, [pc, #104]	; (8005f90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2c:	4a16      	ldr	r2, [pc, #88]	; (8005f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f2e:	68d2      	ldr	r2, [r2, #12]
 8005f30:	0a12      	lsrs	r2, r2, #8
 8005f32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f36:	fb02 f303 	mul.w	r3, r2, r3
 8005f3a:	617b      	str	r3, [r7, #20]
      break;
 8005f3c:	e00c      	b.n	8005f58 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f3e:	4a13      	ldr	r2, [pc, #76]	; (8005f8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f46:	4a10      	ldr	r2, [pc, #64]	; (8005f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f48:	68d2      	ldr	r2, [r2, #12]
 8005f4a:	0a12      	lsrs	r2, r2, #8
 8005f4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f50:	fb02 f303 	mul.w	r3, r2, r3
 8005f54:	617b      	str	r3, [r7, #20]
      break;
 8005f56:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f58:	4b0b      	ldr	r3, [pc, #44]	; (8005f88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	0e5b      	lsrs	r3, r3, #25
 8005f5e:	f003 0303 	and.w	r3, r3, #3
 8005f62:	3301      	adds	r3, #1
 8005f64:	005b      	lsls	r3, r3, #1
 8005f66:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f70:	613b      	str	r3, [r7, #16]
 8005f72:	e001      	b.n	8005f78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005f74:	2300      	movs	r3, #0
 8005f76:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005f78:	693b      	ldr	r3, [r7, #16]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	371c      	adds	r7, #28
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	40021000 	.word	0x40021000
 8005f8c:	00f42400 	.word	0x00f42400
 8005f90:	016e3600 	.word	0x016e3600

08005f94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f94:	b480      	push	{r7}
 8005f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f98:	4b03      	ldr	r3, [pc, #12]	; (8005fa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	20000000 	.word	0x20000000

08005fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005fb0:	f7ff fff0 	bl	8005f94 <HAL_RCC_GetHCLKFreq>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	4b06      	ldr	r3, [pc, #24]	; (8005fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	0a1b      	lsrs	r3, r3, #8
 8005fbc:	f003 0307 	and.w	r3, r3, #7
 8005fc0:	4904      	ldr	r1, [pc, #16]	; (8005fd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005fc2:	5ccb      	ldrb	r3, [r1, r3]
 8005fc4:	f003 031f 	and.w	r3, r3, #31
 8005fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	40021000 	.word	0x40021000
 8005fd4:	0800d738 	.word	0x0800d738

08005fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005fdc:	f7ff ffda 	bl	8005f94 <HAL_RCC_GetHCLKFreq>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	4b06      	ldr	r3, [pc, #24]	; (8005ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	0adb      	lsrs	r3, r3, #11
 8005fe8:	f003 0307 	and.w	r3, r3, #7
 8005fec:	4904      	ldr	r1, [pc, #16]	; (8006000 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005fee:	5ccb      	ldrb	r3, [r1, r3]
 8005ff0:	f003 031f 	and.w	r3, r3, #31
 8005ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	40021000 	.word	0x40021000
 8006000:	0800d738 	.word	0x0800d738

08006004 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	220f      	movs	r2, #15
 8006012:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006014:	4b12      	ldr	r3, [pc, #72]	; (8006060 <HAL_RCC_GetClockConfig+0x5c>)
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f003 0203 	and.w	r2, r3, #3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006020:	4b0f      	ldr	r3, [pc, #60]	; (8006060 <HAL_RCC_GetClockConfig+0x5c>)
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800602c:	4b0c      	ldr	r3, [pc, #48]	; (8006060 <HAL_RCC_GetClockConfig+0x5c>)
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006038:	4b09      	ldr	r3, [pc, #36]	; (8006060 <HAL_RCC_GetClockConfig+0x5c>)
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	08db      	lsrs	r3, r3, #3
 800603e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006046:	4b07      	ldr	r3, [pc, #28]	; (8006064 <HAL_RCC_GetClockConfig+0x60>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 020f 	and.w	r2, r3, #15
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	601a      	str	r2, [r3, #0]
}
 8006052:	bf00      	nop
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	40021000 	.word	0x40021000
 8006064:	40022000 	.word	0x40022000

08006068 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006068:	b480      	push	{r7}
 800606a:	b087      	sub	sp, #28
 800606c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800606e:	4b1e      	ldr	r3, [pc, #120]	; (80060e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	f003 0303 	and.w	r3, r3, #3
 8006076:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006078:	4b1b      	ldr	r3, [pc, #108]	; (80060e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	091b      	lsrs	r3, r3, #4
 800607e:	f003 030f 	and.w	r3, r3, #15
 8006082:	3301      	adds	r3, #1
 8006084:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	2b03      	cmp	r3, #3
 800608a:	d10c      	bne.n	80060a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800608c:	4a17      	ldr	r2, [pc, #92]	; (80060ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	fbb2 f3f3 	udiv	r3, r2, r3
 8006094:	4a14      	ldr	r2, [pc, #80]	; (80060e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006096:	68d2      	ldr	r2, [r2, #12]
 8006098:	0a12      	lsrs	r2, r2, #8
 800609a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800609e:	fb02 f303 	mul.w	r3, r2, r3
 80060a2:	617b      	str	r3, [r7, #20]
    break;
 80060a4:	e00c      	b.n	80060c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060a6:	4a12      	ldr	r2, [pc, #72]	; (80060f0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ae:	4a0e      	ldr	r2, [pc, #56]	; (80060e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060b0:	68d2      	ldr	r2, [r2, #12]
 80060b2:	0a12      	lsrs	r2, r2, #8
 80060b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80060b8:	fb02 f303 	mul.w	r3, r2, r3
 80060bc:	617b      	str	r3, [r7, #20]
    break;
 80060be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80060c0:	4b09      	ldr	r3, [pc, #36]	; (80060e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	0e5b      	lsrs	r3, r3, #25
 80060c6:	f003 0303 	and.w	r3, r3, #3
 80060ca:	3301      	adds	r3, #1
 80060cc:	005b      	lsls	r3, r3, #1
 80060ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80060da:	687b      	ldr	r3, [r7, #4]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	371c      	adds	r7, #28
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	40021000 	.word	0x40021000
 80060ec:	016e3600 	.word	0x016e3600
 80060f0:	00f42400 	.word	0x00f42400

080060f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80060fc:	2300      	movs	r3, #0
 80060fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006100:	2300      	movs	r3, #0
 8006102:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 8098 	beq.w	8006242 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006112:	2300      	movs	r3, #0
 8006114:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006116:	4b43      	ldr	r3, [pc, #268]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800611a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10d      	bne.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006122:	4b40      	ldr	r3, [pc, #256]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006126:	4a3f      	ldr	r2, [pc, #252]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800612c:	6593      	str	r3, [r2, #88]	; 0x58
 800612e:	4b3d      	ldr	r3, [pc, #244]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006136:	60bb      	str	r3, [r7, #8]
 8006138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800613a:	2301      	movs	r3, #1
 800613c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800613e:	4b3a      	ldr	r3, [pc, #232]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a39      	ldr	r2, [pc, #228]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006148:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800614a:	f7fc fbe9 	bl	8002920 <HAL_GetTick>
 800614e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006150:	e009      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006152:	f7fc fbe5 	bl	8002920 <HAL_GetTick>
 8006156:	4602      	mov	r2, r0
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	2b02      	cmp	r3, #2
 800615e:	d902      	bls.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	74fb      	strb	r3, [r7, #19]
        break;
 8006164:	e005      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006166:	4b30      	ldr	r3, [pc, #192]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800616e:	2b00      	cmp	r3, #0
 8006170:	d0ef      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006172:	7cfb      	ldrb	r3, [r7, #19]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d159      	bne.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006178:	4b2a      	ldr	r3, [pc, #168]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800617a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800617e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006182:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d01e      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	429a      	cmp	r2, r3
 8006192:	d019      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006194:	4b23      	ldr	r3, [pc, #140]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800619a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800619e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061a0:	4b20      	ldr	r3, [pc, #128]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a6:	4a1f      	ldr	r2, [pc, #124]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061b0:	4b1c      	ldr	r3, [pc, #112]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061b6:	4a1b      	ldr	r2, [pc, #108]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80061c0:	4a18      	ldr	r2, [pc, #96]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d016      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d2:	f7fc fba5 	bl	8002920 <HAL_GetTick>
 80061d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061d8:	e00b      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061da:	f7fc fba1 	bl	8002920 <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d902      	bls.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	74fb      	strb	r3, [r7, #19]
            break;
 80061f0:	e006      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061f2:	4b0c      	ldr	r3, [pc, #48]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d0ec      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006200:	7cfb      	ldrb	r3, [r7, #19]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10b      	bne.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006206:	4b07      	ldr	r3, [pc, #28]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800620c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006214:	4903      	ldr	r1, [pc, #12]	; (8006224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006216:	4313      	orrs	r3, r2
 8006218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800621c:	e008      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800621e:	7cfb      	ldrb	r3, [r7, #19]
 8006220:	74bb      	strb	r3, [r7, #18]
 8006222:	e005      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006224:	40021000 	.word	0x40021000
 8006228:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800622c:	7cfb      	ldrb	r3, [r7, #19]
 800622e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006230:	7c7b      	ldrb	r3, [r7, #17]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d105      	bne.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006236:	4ba7      	ldr	r3, [pc, #668]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800623a:	4aa6      	ldr	r2, [pc, #664]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800623c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006240:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00a      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800624e:	4ba1      	ldr	r3, [pc, #644]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006254:	f023 0203 	bic.w	r2, r3, #3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	499d      	ldr	r1, [pc, #628]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800625e:	4313      	orrs	r3, r2
 8006260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0302 	and.w	r3, r3, #2
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00a      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006270:	4b98      	ldr	r3, [pc, #608]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006276:	f023 020c 	bic.w	r2, r3, #12
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	4995      	ldr	r1, [pc, #596]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006280:	4313      	orrs	r3, r2
 8006282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0304 	and.w	r3, r3, #4
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00a      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006292:	4b90      	ldr	r3, [pc, #576]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006298:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	498c      	ldr	r1, [pc, #560]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0308 	and.w	r3, r3, #8
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00a      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80062b4:	4b87      	ldr	r3, [pc, #540]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	4984      	ldr	r1, [pc, #528]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0310 	and.w	r3, r3, #16
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00a      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80062d6:	4b7f      	ldr	r3, [pc, #508]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	695b      	ldr	r3, [r3, #20]
 80062e4:	497b      	ldr	r1, [pc, #492]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0320 	and.w	r3, r3, #32
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00a      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062f8:	4b76      	ldr	r3, [pc, #472]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	4973      	ldr	r1, [pc, #460]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006308:	4313      	orrs	r3, r2
 800630a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00a      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800631a:	4b6e      	ldr	r3, [pc, #440]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800631c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006320:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	496a      	ldr	r1, [pc, #424]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800632a:	4313      	orrs	r3, r2
 800632c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00a      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800633c:	4b65      	ldr	r3, [pc, #404]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800633e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006342:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	4962      	ldr	r1, [pc, #392]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800634c:	4313      	orrs	r3, r2
 800634e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00a      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800635e:	4b5d      	ldr	r3, [pc, #372]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006364:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636c:	4959      	ldr	r1, [pc, #356]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800636e:	4313      	orrs	r3, r2
 8006370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00a      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006380:	4b54      	ldr	r3, [pc, #336]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006382:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006386:	f023 0203 	bic.w	r2, r3, #3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638e:	4951      	ldr	r1, [pc, #324]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006390:	4313      	orrs	r3, r2
 8006392:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00a      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063a2:	4b4c      	ldr	r3, [pc, #304]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b0:	4948      	ldr	r1, [pc, #288]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d015      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063c4:	4b43      	ldr	r3, [pc, #268]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d2:	4940      	ldr	r1, [pc, #256]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063e2:	d105      	bne.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063e4:	4b3b      	ldr	r3, [pc, #236]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	4a3a      	ldr	r2, [pc, #232]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d015      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80063fc:	4b35      	ldr	r3, [pc, #212]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006402:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800640a:	4932      	ldr	r1, [pc, #200]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800640c:	4313      	orrs	r3, r2
 800640e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006416:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800641a:	d105      	bne.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800641c:	4b2d      	ldr	r3, [pc, #180]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	4a2c      	ldr	r2, [pc, #176]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006422:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006426:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d015      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006434:	4b27      	ldr	r3, [pc, #156]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800643a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006442:	4924      	ldr	r1, [pc, #144]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006444:	4313      	orrs	r3, r2
 8006446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006452:	d105      	bne.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006454:	4b1f      	ldr	r3, [pc, #124]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	4a1e      	ldr	r2, [pc, #120]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800645a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800645e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d015      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800646c:	4b19      	ldr	r3, [pc, #100]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800646e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006472:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647a:	4916      	ldr	r1, [pc, #88]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800647c:	4313      	orrs	r3, r2
 800647e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006486:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800648a:	d105      	bne.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800648c:	4b11      	ldr	r3, [pc, #68]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	4a10      	ldr	r2, [pc, #64]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006492:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006496:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d019      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064a4:	4b0b      	ldr	r3, [pc, #44]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	4908      	ldr	r1, [pc, #32]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064c2:	d109      	bne.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064c4:	4b03      	ldr	r3, [pc, #12]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	4a02      	ldr	r2, [pc, #8]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064ce:	60d3      	str	r3, [r2, #12]
 80064d0:	e002      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80064d2:	bf00      	nop
 80064d4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d015      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80064e4:	4b29      	ldr	r3, [pc, #164]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80064e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f2:	4926      	ldr	r1, [pc, #152]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80064f4:	4313      	orrs	r3, r2
 80064f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006502:	d105      	bne.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006504:	4b21      	ldr	r3, [pc, #132]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	4a20      	ldr	r2, [pc, #128]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800650a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800650e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d015      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800651c:	4b1b      	ldr	r3, [pc, #108]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800651e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006522:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800652a:	4918      	ldr	r1, [pc, #96]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800652c:	4313      	orrs	r3, r2
 800652e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800653a:	d105      	bne.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800653c:	4b13      	ldr	r3, [pc, #76]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	4a12      	ldr	r2, [pc, #72]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006546:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d015      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006554:	4b0d      	ldr	r3, [pc, #52]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006556:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800655a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006562:	490a      	ldr	r1, [pc, #40]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006564:	4313      	orrs	r3, r2
 8006566:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800656e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006572:	d105      	bne.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006574:	4b05      	ldr	r3, [pc, #20]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	4a04      	ldr	r2, [pc, #16]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800657a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800657e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006580:	7cbb      	ldrb	r3, [r7, #18]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3718      	adds	r7, #24
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	40021000 	.word	0x40021000

08006590 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e049      	b.n	8006636 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d106      	bne.n	80065bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7fb fd0a 	bl	8001fd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2202      	movs	r2, #2
 80065c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	3304      	adds	r3, #4
 80065cc:	4619      	mov	r1, r3
 80065ce:	4610      	mov	r0, r2
 80065d0:	f000 ffba 	bl	8007548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3708      	adds	r7, #8
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
	...

08006640 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b01      	cmp	r3, #1
 8006652:	d001      	beq.n	8006658 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e054      	b.n	8006702 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2202      	movs	r2, #2
 800665c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68da      	ldr	r2, [r3, #12]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f042 0201 	orr.w	r2, r2, #1
 800666e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a26      	ldr	r2, [pc, #152]	; (8006710 <HAL_TIM_Base_Start_IT+0xd0>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d022      	beq.n	80066c0 <HAL_TIM_Base_Start_IT+0x80>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006682:	d01d      	beq.n	80066c0 <HAL_TIM_Base_Start_IT+0x80>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a22      	ldr	r2, [pc, #136]	; (8006714 <HAL_TIM_Base_Start_IT+0xd4>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d018      	beq.n	80066c0 <HAL_TIM_Base_Start_IT+0x80>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a21      	ldr	r2, [pc, #132]	; (8006718 <HAL_TIM_Base_Start_IT+0xd8>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d013      	beq.n	80066c0 <HAL_TIM_Base_Start_IT+0x80>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a1f      	ldr	r2, [pc, #124]	; (800671c <HAL_TIM_Base_Start_IT+0xdc>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d00e      	beq.n	80066c0 <HAL_TIM_Base_Start_IT+0x80>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a1e      	ldr	r2, [pc, #120]	; (8006720 <HAL_TIM_Base_Start_IT+0xe0>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d009      	beq.n	80066c0 <HAL_TIM_Base_Start_IT+0x80>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a1c      	ldr	r2, [pc, #112]	; (8006724 <HAL_TIM_Base_Start_IT+0xe4>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d004      	beq.n	80066c0 <HAL_TIM_Base_Start_IT+0x80>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a1b      	ldr	r2, [pc, #108]	; (8006728 <HAL_TIM_Base_Start_IT+0xe8>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d115      	bne.n	80066ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689a      	ldr	r2, [r3, #8]
 80066c6:	4b19      	ldr	r3, [pc, #100]	; (800672c <HAL_TIM_Base_Start_IT+0xec>)
 80066c8:	4013      	ands	r3, r2
 80066ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2b06      	cmp	r3, #6
 80066d0:	d015      	beq.n	80066fe <HAL_TIM_Base_Start_IT+0xbe>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066d8:	d011      	beq.n	80066fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f042 0201 	orr.w	r2, r2, #1
 80066e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ea:	e008      	b.n	80066fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f042 0201 	orr.w	r2, r2, #1
 80066fa:	601a      	str	r2, [r3, #0]
 80066fc:	e000      	b.n	8006700 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	40012c00 	.word	0x40012c00
 8006714:	40000400 	.word	0x40000400
 8006718:	40000800 	.word	0x40000800
 800671c:	40000c00 	.word	0x40000c00
 8006720:	40013400 	.word	0x40013400
 8006724:	40014000 	.word	0x40014000
 8006728:	40015000 	.word	0x40015000
 800672c:	00010007 	.word	0x00010007

08006730 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e049      	b.n	80067d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b00      	cmp	r3, #0
 800674c:	d106      	bne.n	800675c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f7fb fb74 	bl	8001e44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2202      	movs	r2, #2
 8006760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	3304      	adds	r3, #4
 800676c:	4619      	mov	r1, r3
 800676e:	4610      	mov	r0, r2
 8006770:	f000 feea 	bl	8007548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
	...

080067e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d109      	bne.n	8006804 <HAL_TIM_PWM_Start+0x24>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	bf14      	ite	ne
 80067fc:	2301      	movne	r3, #1
 80067fe:	2300      	moveq	r3, #0
 8006800:	b2db      	uxtb	r3, r3
 8006802:	e03c      	b.n	800687e <HAL_TIM_PWM_Start+0x9e>
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	2b04      	cmp	r3, #4
 8006808:	d109      	bne.n	800681e <HAL_TIM_PWM_Start+0x3e>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b01      	cmp	r3, #1
 8006814:	bf14      	ite	ne
 8006816:	2301      	movne	r3, #1
 8006818:	2300      	moveq	r3, #0
 800681a:	b2db      	uxtb	r3, r3
 800681c:	e02f      	b.n	800687e <HAL_TIM_PWM_Start+0x9e>
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	2b08      	cmp	r3, #8
 8006822:	d109      	bne.n	8006838 <HAL_TIM_PWM_Start+0x58>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b01      	cmp	r3, #1
 800682e:	bf14      	ite	ne
 8006830:	2301      	movne	r3, #1
 8006832:	2300      	moveq	r3, #0
 8006834:	b2db      	uxtb	r3, r3
 8006836:	e022      	b.n	800687e <HAL_TIM_PWM_Start+0x9e>
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	2b0c      	cmp	r3, #12
 800683c:	d109      	bne.n	8006852 <HAL_TIM_PWM_Start+0x72>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b01      	cmp	r3, #1
 8006848:	bf14      	ite	ne
 800684a:	2301      	movne	r3, #1
 800684c:	2300      	moveq	r3, #0
 800684e:	b2db      	uxtb	r3, r3
 8006850:	e015      	b.n	800687e <HAL_TIM_PWM_Start+0x9e>
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2b10      	cmp	r3, #16
 8006856:	d109      	bne.n	800686c <HAL_TIM_PWM_Start+0x8c>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800685e:	b2db      	uxtb	r3, r3
 8006860:	2b01      	cmp	r3, #1
 8006862:	bf14      	ite	ne
 8006864:	2301      	movne	r3, #1
 8006866:	2300      	moveq	r3, #0
 8006868:	b2db      	uxtb	r3, r3
 800686a:	e008      	b.n	800687e <HAL_TIM_PWM_Start+0x9e>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006872:	b2db      	uxtb	r3, r3
 8006874:	2b01      	cmp	r3, #1
 8006876:	bf14      	ite	ne
 8006878:	2301      	movne	r3, #1
 800687a:	2300      	moveq	r3, #0
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e0a6      	b.n	80069d4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d104      	bne.n	8006896 <HAL_TIM_PWM_Start+0xb6>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2202      	movs	r2, #2
 8006890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006894:	e023      	b.n	80068de <HAL_TIM_PWM_Start+0xfe>
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	2b04      	cmp	r3, #4
 800689a:	d104      	bne.n	80068a6 <HAL_TIM_PWM_Start+0xc6>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068a4:	e01b      	b.n	80068de <HAL_TIM_PWM_Start+0xfe>
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b08      	cmp	r3, #8
 80068aa:	d104      	bne.n	80068b6 <HAL_TIM_PWM_Start+0xd6>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2202      	movs	r2, #2
 80068b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068b4:	e013      	b.n	80068de <HAL_TIM_PWM_Start+0xfe>
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	2b0c      	cmp	r3, #12
 80068ba:	d104      	bne.n	80068c6 <HAL_TIM_PWM_Start+0xe6>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2202      	movs	r2, #2
 80068c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068c4:	e00b      	b.n	80068de <HAL_TIM_PWM_Start+0xfe>
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	2b10      	cmp	r3, #16
 80068ca:	d104      	bne.n	80068d6 <HAL_TIM_PWM_Start+0xf6>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2202      	movs	r2, #2
 80068d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068d4:	e003      	b.n	80068de <HAL_TIM_PWM_Start+0xfe>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2202      	movs	r2, #2
 80068da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2201      	movs	r2, #1
 80068e4:	6839      	ldr	r1, [r7, #0]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f001 fb10 	bl	8007f0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a3a      	ldr	r2, [pc, #232]	; (80069dc <HAL_TIM_PWM_Start+0x1fc>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d018      	beq.n	8006928 <HAL_TIM_PWM_Start+0x148>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a39      	ldr	r2, [pc, #228]	; (80069e0 <HAL_TIM_PWM_Start+0x200>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d013      	beq.n	8006928 <HAL_TIM_PWM_Start+0x148>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a37      	ldr	r2, [pc, #220]	; (80069e4 <HAL_TIM_PWM_Start+0x204>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d00e      	beq.n	8006928 <HAL_TIM_PWM_Start+0x148>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a36      	ldr	r2, [pc, #216]	; (80069e8 <HAL_TIM_PWM_Start+0x208>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d009      	beq.n	8006928 <HAL_TIM_PWM_Start+0x148>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a34      	ldr	r2, [pc, #208]	; (80069ec <HAL_TIM_PWM_Start+0x20c>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d004      	beq.n	8006928 <HAL_TIM_PWM_Start+0x148>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a33      	ldr	r2, [pc, #204]	; (80069f0 <HAL_TIM_PWM_Start+0x210>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d101      	bne.n	800692c <HAL_TIM_PWM_Start+0x14c>
 8006928:	2301      	movs	r3, #1
 800692a:	e000      	b.n	800692e <HAL_TIM_PWM_Start+0x14e>
 800692c:	2300      	movs	r3, #0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d007      	beq.n	8006942 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006940:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a25      	ldr	r2, [pc, #148]	; (80069dc <HAL_TIM_PWM_Start+0x1fc>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d022      	beq.n	8006992 <HAL_TIM_PWM_Start+0x1b2>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006954:	d01d      	beq.n	8006992 <HAL_TIM_PWM_Start+0x1b2>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a26      	ldr	r2, [pc, #152]	; (80069f4 <HAL_TIM_PWM_Start+0x214>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d018      	beq.n	8006992 <HAL_TIM_PWM_Start+0x1b2>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a24      	ldr	r2, [pc, #144]	; (80069f8 <HAL_TIM_PWM_Start+0x218>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d013      	beq.n	8006992 <HAL_TIM_PWM_Start+0x1b2>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a23      	ldr	r2, [pc, #140]	; (80069fc <HAL_TIM_PWM_Start+0x21c>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d00e      	beq.n	8006992 <HAL_TIM_PWM_Start+0x1b2>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a19      	ldr	r2, [pc, #100]	; (80069e0 <HAL_TIM_PWM_Start+0x200>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d009      	beq.n	8006992 <HAL_TIM_PWM_Start+0x1b2>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a18      	ldr	r2, [pc, #96]	; (80069e4 <HAL_TIM_PWM_Start+0x204>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d004      	beq.n	8006992 <HAL_TIM_PWM_Start+0x1b2>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a18      	ldr	r2, [pc, #96]	; (80069f0 <HAL_TIM_PWM_Start+0x210>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d115      	bne.n	80069be <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	689a      	ldr	r2, [r3, #8]
 8006998:	4b19      	ldr	r3, [pc, #100]	; (8006a00 <HAL_TIM_PWM_Start+0x220>)
 800699a:	4013      	ands	r3, r2
 800699c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2b06      	cmp	r3, #6
 80069a2:	d015      	beq.n	80069d0 <HAL_TIM_PWM_Start+0x1f0>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069aa:	d011      	beq.n	80069d0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f042 0201 	orr.w	r2, r2, #1
 80069ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069bc:	e008      	b.n	80069d0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f042 0201 	orr.w	r2, r2, #1
 80069cc:	601a      	str	r2, [r3, #0]
 80069ce:	e000      	b.n	80069d2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	40012c00 	.word	0x40012c00
 80069e0:	40013400 	.word	0x40013400
 80069e4:	40014000 	.word	0x40014000
 80069e8:	40014400 	.word	0x40014400
 80069ec:	40014800 	.word	0x40014800
 80069f0:	40015000 	.word	0x40015000
 80069f4:	40000400 	.word	0x40000400
 80069f8:	40000800 	.word	0x40000800
 80069fc:	40000c00 	.word	0x40000c00
 8006a00:	00010007 	.word	0x00010007

08006a04 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2200      	movs	r2, #0
 8006a14:	6839      	ldr	r1, [r7, #0]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f001 fa78 	bl	8007f0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a40      	ldr	r2, [pc, #256]	; (8006b24 <HAL_TIM_PWM_Stop+0x120>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d018      	beq.n	8006a58 <HAL_TIM_PWM_Stop+0x54>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a3f      	ldr	r2, [pc, #252]	; (8006b28 <HAL_TIM_PWM_Stop+0x124>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d013      	beq.n	8006a58 <HAL_TIM_PWM_Stop+0x54>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a3d      	ldr	r2, [pc, #244]	; (8006b2c <HAL_TIM_PWM_Stop+0x128>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d00e      	beq.n	8006a58 <HAL_TIM_PWM_Stop+0x54>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a3c      	ldr	r2, [pc, #240]	; (8006b30 <HAL_TIM_PWM_Stop+0x12c>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d009      	beq.n	8006a58 <HAL_TIM_PWM_Stop+0x54>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a3a      	ldr	r2, [pc, #232]	; (8006b34 <HAL_TIM_PWM_Stop+0x130>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d004      	beq.n	8006a58 <HAL_TIM_PWM_Stop+0x54>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a39      	ldr	r2, [pc, #228]	; (8006b38 <HAL_TIM_PWM_Stop+0x134>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d101      	bne.n	8006a5c <HAL_TIM_PWM_Stop+0x58>
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e000      	b.n	8006a5e <HAL_TIM_PWM_Stop+0x5a>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d017      	beq.n	8006a92 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6a1a      	ldr	r2, [r3, #32]
 8006a68:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10f      	bne.n	8006a92 <HAL_TIM_PWM_Stop+0x8e>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6a1a      	ldr	r2, [r3, #32]
 8006a78:	f244 4344 	movw	r3, #17476	; 0x4444
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d107      	bne.n	8006a92 <HAL_TIM_PWM_Stop+0x8e>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6a1a      	ldr	r2, [r3, #32]
 8006a98:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10f      	bne.n	8006ac2 <HAL_TIM_PWM_Stop+0xbe>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6a1a      	ldr	r2, [r3, #32]
 8006aa8:	f244 4344 	movw	r3, #17476	; 0x4444
 8006aac:	4013      	ands	r3, r2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d107      	bne.n	8006ac2 <HAL_TIM_PWM_Stop+0xbe>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f022 0201 	bic.w	r2, r2, #1
 8006ac0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d104      	bne.n	8006ad2 <HAL_TIM_PWM_Stop+0xce>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ad0:	e023      	b.n	8006b1a <HAL_TIM_PWM_Stop+0x116>
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	2b04      	cmp	r3, #4
 8006ad6:	d104      	bne.n	8006ae2 <HAL_TIM_PWM_Stop+0xde>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ae0:	e01b      	b.n	8006b1a <HAL_TIM_PWM_Stop+0x116>
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b08      	cmp	r3, #8
 8006ae6:	d104      	bne.n	8006af2 <HAL_TIM_PWM_Stop+0xee>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006af0:	e013      	b.n	8006b1a <HAL_TIM_PWM_Stop+0x116>
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	2b0c      	cmp	r3, #12
 8006af6:	d104      	bne.n	8006b02 <HAL_TIM_PWM_Stop+0xfe>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b00:	e00b      	b.n	8006b1a <HAL_TIM_PWM_Stop+0x116>
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	2b10      	cmp	r3, #16
 8006b06:	d104      	bne.n	8006b12 <HAL_TIM_PWM_Stop+0x10e>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b10:	e003      	b.n	8006b1a <HAL_TIM_PWM_Stop+0x116>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	40012c00 	.word	0x40012c00
 8006b28:	40013400 	.word	0x40013400
 8006b2c:	40014000 	.word	0x40014000
 8006b30:	40014400 	.word	0x40014400
 8006b34:	40014800 	.word	0x40014800
 8006b38:	40015000 	.word	0x40015000

08006b3c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d101      	bne.n	8006b50 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e097      	b.n	8006c80 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d106      	bne.n	8006b6a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f7fb f9ef 	bl	8001f48 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2202      	movs	r2, #2
 8006b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	6812      	ldr	r2, [r2, #0]
 8006b7c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006b80:	f023 0307 	bic.w	r3, r3, #7
 8006b84:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	3304      	adds	r3, #4
 8006b8e:	4619      	mov	r1, r3
 8006b90:	4610      	mov	r0, r2
 8006b92:	f000 fcd9 	bl	8007548 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bbe:	f023 0303 	bic.w	r3, r3, #3
 8006bc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	689a      	ldr	r2, [r3, #8]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	021b      	lsls	r3, r3, #8
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006bdc:	f023 030c 	bic.w	r3, r3, #12
 8006be0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006be8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	68da      	ldr	r2, [r3, #12]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	021b      	lsls	r3, r3, #8
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	011a      	lsls	r2, r3, #4
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	031b      	lsls	r3, r3, #12
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006c1a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006c22:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	011b      	lsls	r3, r3, #4
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3718      	adds	r7, #24
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c98:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ca0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ca8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cb0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d110      	bne.n	8006cda <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d102      	bne.n	8006cc4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006cbe:	7b7b      	ldrb	r3, [r7, #13]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d001      	beq.n	8006cc8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e069      	b.n	8006d9c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2202      	movs	r2, #2
 8006ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cd8:	e031      	b.n	8006d3e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2b04      	cmp	r3, #4
 8006cde:	d110      	bne.n	8006d02 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ce0:	7bbb      	ldrb	r3, [r7, #14]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d102      	bne.n	8006cec <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ce6:	7b3b      	ldrb	r3, [r7, #12]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d001      	beq.n	8006cf0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e055      	b.n	8006d9c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2202      	movs	r2, #2
 8006cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d00:	e01d      	b.n	8006d3e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d02:	7bfb      	ldrb	r3, [r7, #15]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d108      	bne.n	8006d1a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d08:	7bbb      	ldrb	r3, [r7, #14]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d105      	bne.n	8006d1a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d0e:	7b7b      	ldrb	r3, [r7, #13]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d102      	bne.n	8006d1a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d14:	7b3b      	ldrb	r3, [r7, #12]
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d001      	beq.n	8006d1e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e03e      	b.n	8006d9c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2202      	movs	r2, #2
 8006d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2202      	movs	r2, #2
 8006d2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2202      	movs	r2, #2
 8006d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2202      	movs	r2, #2
 8006d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d003      	beq.n	8006d4c <HAL_TIM_Encoder_Start+0xc4>
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	2b04      	cmp	r3, #4
 8006d48:	d008      	beq.n	8006d5c <HAL_TIM_Encoder_Start+0xd4>
 8006d4a:	e00f      	b.n	8006d6c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2201      	movs	r2, #1
 8006d52:	2100      	movs	r1, #0
 8006d54:	4618      	mov	r0, r3
 8006d56:	f001 f8d9 	bl	8007f0c <TIM_CCxChannelCmd>
      break;
 8006d5a:	e016      	b.n	8006d8a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2201      	movs	r2, #1
 8006d62:	2104      	movs	r1, #4
 8006d64:	4618      	mov	r0, r3
 8006d66:	f001 f8d1 	bl	8007f0c <TIM_CCxChannelCmd>
      break;
 8006d6a:	e00e      	b.n	8006d8a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2201      	movs	r2, #1
 8006d72:	2100      	movs	r1, #0
 8006d74:	4618      	mov	r0, r3
 8006d76:	f001 f8c9 	bl	8007f0c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	2104      	movs	r1, #4
 8006d82:	4618      	mov	r0, r3
 8006d84:	f001 f8c2 	bl	8007f0c <TIM_CCxChannelCmd>
      break;
 8006d88:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f042 0201 	orr.w	r2, r2, #1
 8006d98:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	f003 0302 	and.w	r3, r3, #2
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d122      	bne.n	8006e00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	f003 0302 	and.w	r3, r3, #2
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d11b      	bne.n	8006e00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f06f 0202 	mvn.w	r2, #2
 8006dd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	f003 0303 	and.w	r3, r3, #3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d003      	beq.n	8006dee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fb90 	bl	800750c <HAL_TIM_IC_CaptureCallback>
 8006dec:	e005      	b.n	8006dfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fb82 	bl	80074f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 fb93 	bl	8007520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	f003 0304 	and.w	r3, r3, #4
 8006e0a:	2b04      	cmp	r3, #4
 8006e0c:	d122      	bne.n	8006e54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	f003 0304 	and.w	r3, r3, #4
 8006e18:	2b04      	cmp	r3, #4
 8006e1a:	d11b      	bne.n	8006e54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f06f 0204 	mvn.w	r2, #4
 8006e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2202      	movs	r2, #2
 8006e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d003      	beq.n	8006e42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 fb66 	bl	800750c <HAL_TIM_IC_CaptureCallback>
 8006e40:	e005      	b.n	8006e4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fb58 	bl	80074f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 fb69 	bl	8007520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	f003 0308 	and.w	r3, r3, #8
 8006e5e:	2b08      	cmp	r3, #8
 8006e60:	d122      	bne.n	8006ea8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	f003 0308 	and.w	r3, r3, #8
 8006e6c:	2b08      	cmp	r3, #8
 8006e6e:	d11b      	bne.n	8006ea8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f06f 0208 	mvn.w	r2, #8
 8006e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2204      	movs	r2, #4
 8006e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	69db      	ldr	r3, [r3, #28]
 8006e86:	f003 0303 	and.w	r3, r3, #3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d003      	beq.n	8006e96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fb3c 	bl	800750c <HAL_TIM_IC_CaptureCallback>
 8006e94:	e005      	b.n	8006ea2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fb2e 	bl	80074f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fb3f 	bl	8007520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	f003 0310 	and.w	r3, r3, #16
 8006eb2:	2b10      	cmp	r3, #16
 8006eb4:	d122      	bne.n	8006efc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	f003 0310 	and.w	r3, r3, #16
 8006ec0:	2b10      	cmp	r3, #16
 8006ec2:	d11b      	bne.n	8006efc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f06f 0210 	mvn.w	r2, #16
 8006ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2208      	movs	r2, #8
 8006ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	69db      	ldr	r3, [r3, #28]
 8006eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d003      	beq.n	8006eea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fb12 	bl	800750c <HAL_TIM_IC_CaptureCallback>
 8006ee8:	e005      	b.n	8006ef6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 fb04 	bl	80074f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 fb15 	bl	8007520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	f003 0301 	and.w	r3, r3, #1
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d10e      	bne.n	8006f28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	f003 0301 	and.w	r3, r3, #1
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d107      	bne.n	8006f28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f06f 0201 	mvn.w	r2, #1
 8006f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f7fa fbe2 	bl	80016ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f32:	2b80      	cmp	r3, #128	; 0x80
 8006f34:	d10e      	bne.n	8006f54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f40:	2b80      	cmp	r3, #128	; 0x80
 8006f42:	d107      	bne.n	8006f54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f001 fb22 	bl	8008598 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f62:	d10e      	bne.n	8006f82 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f6e:	2b80      	cmp	r3, #128	; 0x80
 8006f70:	d107      	bne.n	8006f82 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f001 fb15 	bl	80085ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f8c:	2b40      	cmp	r3, #64	; 0x40
 8006f8e:	d10e      	bne.n	8006fae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f9a:	2b40      	cmp	r3, #64	; 0x40
 8006f9c:	d107      	bne.n	8006fae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006fa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fac3 	bl	8007534 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	f003 0320 	and.w	r3, r3, #32
 8006fb8:	2b20      	cmp	r3, #32
 8006fba:	d10e      	bne.n	8006fda <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	f003 0320 	and.w	r3, r3, #32
 8006fc6:	2b20      	cmp	r3, #32
 8006fc8:	d107      	bne.n	8006fda <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f06f 0220 	mvn.w	r2, #32
 8006fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f001 fad5 	bl	8008584 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fe4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fe8:	d10f      	bne.n	800700a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ff4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ff8:	d107      	bne.n	800700a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f001 fadb 	bl	80085c0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007014:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007018:	d10f      	bne.n	800703a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007024:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007028:	d107      	bne.n	800703a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f001 facd 	bl	80085d4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007044:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007048:	d10f      	bne.n	800706a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007054:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007058:	d107      	bne.n	800706a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f001 fabf 	bl	80085e8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007074:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007078:	d10f      	bne.n	800709a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007084:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007088:	d107      	bne.n	800709a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f001 fab1 	bl	80085fc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800709a:	bf00      	nop
 800709c:	3708      	adds	r7, #8
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
	...

080070a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b086      	sub	sp, #24
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070b0:	2300      	movs	r3, #0
 80070b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d101      	bne.n	80070c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80070be:	2302      	movs	r3, #2
 80070c0:	e0ff      	b.n	80072c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b14      	cmp	r3, #20
 80070ce:	f200 80f0 	bhi.w	80072b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80070d2:	a201      	add	r2, pc, #4	; (adr r2, 80070d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80070d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d8:	0800712d 	.word	0x0800712d
 80070dc:	080072b3 	.word	0x080072b3
 80070e0:	080072b3 	.word	0x080072b3
 80070e4:	080072b3 	.word	0x080072b3
 80070e8:	0800716d 	.word	0x0800716d
 80070ec:	080072b3 	.word	0x080072b3
 80070f0:	080072b3 	.word	0x080072b3
 80070f4:	080072b3 	.word	0x080072b3
 80070f8:	080071af 	.word	0x080071af
 80070fc:	080072b3 	.word	0x080072b3
 8007100:	080072b3 	.word	0x080072b3
 8007104:	080072b3 	.word	0x080072b3
 8007108:	080071ef 	.word	0x080071ef
 800710c:	080072b3 	.word	0x080072b3
 8007110:	080072b3 	.word	0x080072b3
 8007114:	080072b3 	.word	0x080072b3
 8007118:	08007231 	.word	0x08007231
 800711c:	080072b3 	.word	0x080072b3
 8007120:	080072b3 	.word	0x080072b3
 8007124:	080072b3 	.word	0x080072b3
 8007128:	08007271 	.word	0x08007271
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68b9      	ldr	r1, [r7, #8]
 8007132:	4618      	mov	r0, r3
 8007134:	f000 fab0 	bl	8007698 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	699a      	ldr	r2, [r3, #24]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f042 0208 	orr.w	r2, r2, #8
 8007146:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	699a      	ldr	r2, [r3, #24]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f022 0204 	bic.w	r2, r2, #4
 8007156:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	6999      	ldr	r1, [r3, #24]
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	691a      	ldr	r2, [r3, #16]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	430a      	orrs	r2, r1
 8007168:	619a      	str	r2, [r3, #24]
      break;
 800716a:	e0a5      	b.n	80072b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68b9      	ldr	r1, [r7, #8]
 8007172:	4618      	mov	r0, r3
 8007174:	f000 fb2a 	bl	80077cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	699a      	ldr	r2, [r3, #24]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007186:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	699a      	ldr	r2, [r3, #24]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007196:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	6999      	ldr	r1, [r3, #24]
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	021a      	lsls	r2, r3, #8
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	430a      	orrs	r2, r1
 80071aa:	619a      	str	r2, [r3, #24]
      break;
 80071ac:	e084      	b.n	80072b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68b9      	ldr	r1, [r7, #8]
 80071b4:	4618      	mov	r0, r3
 80071b6:	f000 fb9d 	bl	80078f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	69da      	ldr	r2, [r3, #28]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f042 0208 	orr.w	r2, r2, #8
 80071c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	69da      	ldr	r2, [r3, #28]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f022 0204 	bic.w	r2, r2, #4
 80071d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	69d9      	ldr	r1, [r3, #28]
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	691a      	ldr	r2, [r3, #16]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	430a      	orrs	r2, r1
 80071ea:	61da      	str	r2, [r3, #28]
      break;
 80071ec:	e064      	b.n	80072b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68b9      	ldr	r1, [r7, #8]
 80071f4:	4618      	mov	r0, r3
 80071f6:	f000 fc0f 	bl	8007a18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	69da      	ldr	r2, [r3, #28]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007208:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	69da      	ldr	r2, [r3, #28]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007218:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	69d9      	ldr	r1, [r3, #28]
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	021a      	lsls	r2, r3, #8
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	430a      	orrs	r2, r1
 800722c:	61da      	str	r2, [r3, #28]
      break;
 800722e:	e043      	b.n	80072b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68b9      	ldr	r1, [r7, #8]
 8007236:	4618      	mov	r0, r3
 8007238:	f000 fc82 	bl	8007b40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f042 0208 	orr.w	r2, r2, #8
 800724a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f022 0204 	bic.w	r2, r2, #4
 800725a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	691a      	ldr	r2, [r3, #16]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	430a      	orrs	r2, r1
 800726c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800726e:	e023      	b.n	80072b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68b9      	ldr	r1, [r7, #8]
 8007276:	4618      	mov	r0, r3
 8007278:	f000 fccc 	bl	8007c14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800728a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800729a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	021a      	lsls	r2, r3, #8
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	430a      	orrs	r2, r1
 80072ae:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80072b0:	e002      	b.n	80072b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	75fb      	strb	r3, [r7, #23]
      break;
 80072b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3718      	adds	r7, #24
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop

080072cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072d6:	2300      	movs	r3, #0
 80072d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d101      	bne.n	80072e8 <HAL_TIM_ConfigClockSource+0x1c>
 80072e4:	2302      	movs	r3, #2
 80072e6:	e0f6      	b.n	80074d6 <HAL_TIM_ConfigClockSource+0x20a>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2202      	movs	r2, #2
 80072f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007306:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800730a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007312:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a6f      	ldr	r2, [pc, #444]	; (80074e0 <HAL_TIM_ConfigClockSource+0x214>)
 8007322:	4293      	cmp	r3, r2
 8007324:	f000 80c1 	beq.w	80074aa <HAL_TIM_ConfigClockSource+0x1de>
 8007328:	4a6d      	ldr	r2, [pc, #436]	; (80074e0 <HAL_TIM_ConfigClockSource+0x214>)
 800732a:	4293      	cmp	r3, r2
 800732c:	f200 80c6 	bhi.w	80074bc <HAL_TIM_ConfigClockSource+0x1f0>
 8007330:	4a6c      	ldr	r2, [pc, #432]	; (80074e4 <HAL_TIM_ConfigClockSource+0x218>)
 8007332:	4293      	cmp	r3, r2
 8007334:	f000 80b9 	beq.w	80074aa <HAL_TIM_ConfigClockSource+0x1de>
 8007338:	4a6a      	ldr	r2, [pc, #424]	; (80074e4 <HAL_TIM_ConfigClockSource+0x218>)
 800733a:	4293      	cmp	r3, r2
 800733c:	f200 80be 	bhi.w	80074bc <HAL_TIM_ConfigClockSource+0x1f0>
 8007340:	4a69      	ldr	r2, [pc, #420]	; (80074e8 <HAL_TIM_ConfigClockSource+0x21c>)
 8007342:	4293      	cmp	r3, r2
 8007344:	f000 80b1 	beq.w	80074aa <HAL_TIM_ConfigClockSource+0x1de>
 8007348:	4a67      	ldr	r2, [pc, #412]	; (80074e8 <HAL_TIM_ConfigClockSource+0x21c>)
 800734a:	4293      	cmp	r3, r2
 800734c:	f200 80b6 	bhi.w	80074bc <HAL_TIM_ConfigClockSource+0x1f0>
 8007350:	4a66      	ldr	r2, [pc, #408]	; (80074ec <HAL_TIM_ConfigClockSource+0x220>)
 8007352:	4293      	cmp	r3, r2
 8007354:	f000 80a9 	beq.w	80074aa <HAL_TIM_ConfigClockSource+0x1de>
 8007358:	4a64      	ldr	r2, [pc, #400]	; (80074ec <HAL_TIM_ConfigClockSource+0x220>)
 800735a:	4293      	cmp	r3, r2
 800735c:	f200 80ae 	bhi.w	80074bc <HAL_TIM_ConfigClockSource+0x1f0>
 8007360:	4a63      	ldr	r2, [pc, #396]	; (80074f0 <HAL_TIM_ConfigClockSource+0x224>)
 8007362:	4293      	cmp	r3, r2
 8007364:	f000 80a1 	beq.w	80074aa <HAL_TIM_ConfigClockSource+0x1de>
 8007368:	4a61      	ldr	r2, [pc, #388]	; (80074f0 <HAL_TIM_ConfigClockSource+0x224>)
 800736a:	4293      	cmp	r3, r2
 800736c:	f200 80a6 	bhi.w	80074bc <HAL_TIM_ConfigClockSource+0x1f0>
 8007370:	4a60      	ldr	r2, [pc, #384]	; (80074f4 <HAL_TIM_ConfigClockSource+0x228>)
 8007372:	4293      	cmp	r3, r2
 8007374:	f000 8099 	beq.w	80074aa <HAL_TIM_ConfigClockSource+0x1de>
 8007378:	4a5e      	ldr	r2, [pc, #376]	; (80074f4 <HAL_TIM_ConfigClockSource+0x228>)
 800737a:	4293      	cmp	r3, r2
 800737c:	f200 809e 	bhi.w	80074bc <HAL_TIM_ConfigClockSource+0x1f0>
 8007380:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007384:	f000 8091 	beq.w	80074aa <HAL_TIM_ConfigClockSource+0x1de>
 8007388:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800738c:	f200 8096 	bhi.w	80074bc <HAL_TIM_ConfigClockSource+0x1f0>
 8007390:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007394:	f000 8089 	beq.w	80074aa <HAL_TIM_ConfigClockSource+0x1de>
 8007398:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800739c:	f200 808e 	bhi.w	80074bc <HAL_TIM_ConfigClockSource+0x1f0>
 80073a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073a4:	d03e      	beq.n	8007424 <HAL_TIM_ConfigClockSource+0x158>
 80073a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073aa:	f200 8087 	bhi.w	80074bc <HAL_TIM_ConfigClockSource+0x1f0>
 80073ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073b2:	f000 8086 	beq.w	80074c2 <HAL_TIM_ConfigClockSource+0x1f6>
 80073b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ba:	d87f      	bhi.n	80074bc <HAL_TIM_ConfigClockSource+0x1f0>
 80073bc:	2b70      	cmp	r3, #112	; 0x70
 80073be:	d01a      	beq.n	80073f6 <HAL_TIM_ConfigClockSource+0x12a>
 80073c0:	2b70      	cmp	r3, #112	; 0x70
 80073c2:	d87b      	bhi.n	80074bc <HAL_TIM_ConfigClockSource+0x1f0>
 80073c4:	2b60      	cmp	r3, #96	; 0x60
 80073c6:	d050      	beq.n	800746a <HAL_TIM_ConfigClockSource+0x19e>
 80073c8:	2b60      	cmp	r3, #96	; 0x60
 80073ca:	d877      	bhi.n	80074bc <HAL_TIM_ConfigClockSource+0x1f0>
 80073cc:	2b50      	cmp	r3, #80	; 0x50
 80073ce:	d03c      	beq.n	800744a <HAL_TIM_ConfigClockSource+0x17e>
 80073d0:	2b50      	cmp	r3, #80	; 0x50
 80073d2:	d873      	bhi.n	80074bc <HAL_TIM_ConfigClockSource+0x1f0>
 80073d4:	2b40      	cmp	r3, #64	; 0x40
 80073d6:	d058      	beq.n	800748a <HAL_TIM_ConfigClockSource+0x1be>
 80073d8:	2b40      	cmp	r3, #64	; 0x40
 80073da:	d86f      	bhi.n	80074bc <HAL_TIM_ConfigClockSource+0x1f0>
 80073dc:	2b30      	cmp	r3, #48	; 0x30
 80073de:	d064      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0x1de>
 80073e0:	2b30      	cmp	r3, #48	; 0x30
 80073e2:	d86b      	bhi.n	80074bc <HAL_TIM_ConfigClockSource+0x1f0>
 80073e4:	2b20      	cmp	r3, #32
 80073e6:	d060      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0x1de>
 80073e8:	2b20      	cmp	r3, #32
 80073ea:	d867      	bhi.n	80074bc <HAL_TIM_ConfigClockSource+0x1f0>
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d05c      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0x1de>
 80073f0:	2b10      	cmp	r3, #16
 80073f2:	d05a      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0x1de>
 80073f4:	e062      	b.n	80074bc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6818      	ldr	r0, [r3, #0]
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	6899      	ldr	r1, [r3, #8]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	685a      	ldr	r2, [r3, #4]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	f000 fd61 	bl	8007ecc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007418:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	609a      	str	r2, [r3, #8]
      break;
 8007422:	e04f      	b.n	80074c4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6818      	ldr	r0, [r3, #0]
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	6899      	ldr	r1, [r3, #8]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	685a      	ldr	r2, [r3, #4]
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	f000 fd4a 	bl	8007ecc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689a      	ldr	r2, [r3, #8]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007446:	609a      	str	r2, [r3, #8]
      break;
 8007448:	e03c      	b.n	80074c4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6818      	ldr	r0, [r3, #0]
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	6859      	ldr	r1, [r3, #4]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	461a      	mov	r2, r3
 8007458:	f000 fcbc 	bl	8007dd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2150      	movs	r1, #80	; 0x50
 8007462:	4618      	mov	r0, r3
 8007464:	f000 fd15 	bl	8007e92 <TIM_ITRx_SetConfig>
      break;
 8007468:	e02c      	b.n	80074c4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6818      	ldr	r0, [r3, #0]
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	6859      	ldr	r1, [r3, #4]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	461a      	mov	r2, r3
 8007478:	f000 fcdb 	bl	8007e32 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2160      	movs	r1, #96	; 0x60
 8007482:	4618      	mov	r0, r3
 8007484:	f000 fd05 	bl	8007e92 <TIM_ITRx_SetConfig>
      break;
 8007488:	e01c      	b.n	80074c4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6818      	ldr	r0, [r3, #0]
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	6859      	ldr	r1, [r3, #4]
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	461a      	mov	r2, r3
 8007498:	f000 fc9c 	bl	8007dd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2140      	movs	r1, #64	; 0x40
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 fcf5 	bl	8007e92 <TIM_ITRx_SetConfig>
      break;
 80074a8:	e00c      	b.n	80074c4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4619      	mov	r1, r3
 80074b4:	4610      	mov	r0, r2
 80074b6:	f000 fcec 	bl	8007e92 <TIM_ITRx_SetConfig>
      break;
 80074ba:	e003      	b.n	80074c4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	73fb      	strb	r3, [r7, #15]
      break;
 80074c0:	e000      	b.n	80074c4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80074c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	00100070 	.word	0x00100070
 80074e4:	00100060 	.word	0x00100060
 80074e8:	00100050 	.word	0x00100050
 80074ec:	00100040 	.word	0x00100040
 80074f0:	00100030 	.word	0x00100030
 80074f4:	00100020 	.word	0x00100020

080074f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007500:	bf00      	nop
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800753c:	bf00      	nop
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a46      	ldr	r2, [pc, #280]	; (8007674 <TIM_Base_SetConfig+0x12c>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d017      	beq.n	8007590 <TIM_Base_SetConfig+0x48>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007566:	d013      	beq.n	8007590 <TIM_Base_SetConfig+0x48>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a43      	ldr	r2, [pc, #268]	; (8007678 <TIM_Base_SetConfig+0x130>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d00f      	beq.n	8007590 <TIM_Base_SetConfig+0x48>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a42      	ldr	r2, [pc, #264]	; (800767c <TIM_Base_SetConfig+0x134>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d00b      	beq.n	8007590 <TIM_Base_SetConfig+0x48>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a41      	ldr	r2, [pc, #260]	; (8007680 <TIM_Base_SetConfig+0x138>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d007      	beq.n	8007590 <TIM_Base_SetConfig+0x48>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a40      	ldr	r2, [pc, #256]	; (8007684 <TIM_Base_SetConfig+0x13c>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d003      	beq.n	8007590 <TIM_Base_SetConfig+0x48>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a3f      	ldr	r2, [pc, #252]	; (8007688 <TIM_Base_SetConfig+0x140>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d108      	bne.n	80075a2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007596:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	4313      	orrs	r3, r2
 80075a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a33      	ldr	r2, [pc, #204]	; (8007674 <TIM_Base_SetConfig+0x12c>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d023      	beq.n	80075f2 <TIM_Base_SetConfig+0xaa>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075b0:	d01f      	beq.n	80075f2 <TIM_Base_SetConfig+0xaa>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a30      	ldr	r2, [pc, #192]	; (8007678 <TIM_Base_SetConfig+0x130>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d01b      	beq.n	80075f2 <TIM_Base_SetConfig+0xaa>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a2f      	ldr	r2, [pc, #188]	; (800767c <TIM_Base_SetConfig+0x134>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d017      	beq.n	80075f2 <TIM_Base_SetConfig+0xaa>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a2e      	ldr	r2, [pc, #184]	; (8007680 <TIM_Base_SetConfig+0x138>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d013      	beq.n	80075f2 <TIM_Base_SetConfig+0xaa>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a2d      	ldr	r2, [pc, #180]	; (8007684 <TIM_Base_SetConfig+0x13c>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d00f      	beq.n	80075f2 <TIM_Base_SetConfig+0xaa>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a2d      	ldr	r2, [pc, #180]	; (800768c <TIM_Base_SetConfig+0x144>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d00b      	beq.n	80075f2 <TIM_Base_SetConfig+0xaa>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a2c      	ldr	r2, [pc, #176]	; (8007690 <TIM_Base_SetConfig+0x148>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d007      	beq.n	80075f2 <TIM_Base_SetConfig+0xaa>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a2b      	ldr	r2, [pc, #172]	; (8007694 <TIM_Base_SetConfig+0x14c>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d003      	beq.n	80075f2 <TIM_Base_SetConfig+0xaa>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a26      	ldr	r2, [pc, #152]	; (8007688 <TIM_Base_SetConfig+0x140>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d108      	bne.n	8007604 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	4313      	orrs	r3, r2
 8007602:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	695b      	ldr	r3, [r3, #20]
 800760e:	4313      	orrs	r3, r2
 8007610:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	689a      	ldr	r2, [r3, #8]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a12      	ldr	r2, [pc, #72]	; (8007674 <TIM_Base_SetConfig+0x12c>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d013      	beq.n	8007658 <TIM_Base_SetConfig+0x110>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a14      	ldr	r2, [pc, #80]	; (8007684 <TIM_Base_SetConfig+0x13c>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d00f      	beq.n	8007658 <TIM_Base_SetConfig+0x110>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a14      	ldr	r2, [pc, #80]	; (800768c <TIM_Base_SetConfig+0x144>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d00b      	beq.n	8007658 <TIM_Base_SetConfig+0x110>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a13      	ldr	r2, [pc, #76]	; (8007690 <TIM_Base_SetConfig+0x148>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d007      	beq.n	8007658 <TIM_Base_SetConfig+0x110>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a12      	ldr	r2, [pc, #72]	; (8007694 <TIM_Base_SetConfig+0x14c>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d003      	beq.n	8007658 <TIM_Base_SetConfig+0x110>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a0d      	ldr	r2, [pc, #52]	; (8007688 <TIM_Base_SetConfig+0x140>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d103      	bne.n	8007660 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	691a      	ldr	r2, [r3, #16]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	615a      	str	r2, [r3, #20]
}
 8007666:	bf00      	nop
 8007668:	3714      	adds	r7, #20
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	40012c00 	.word	0x40012c00
 8007678:	40000400 	.word	0x40000400
 800767c:	40000800 	.word	0x40000800
 8007680:	40000c00 	.word	0x40000c00
 8007684:	40013400 	.word	0x40013400
 8007688:	40015000 	.word	0x40015000
 800768c:	40014000 	.word	0x40014000
 8007690:	40014400 	.word	0x40014400
 8007694:	40014800 	.word	0x40014800

08007698 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007698:	b480      	push	{r7}
 800769a:	b087      	sub	sp, #28
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a1b      	ldr	r3, [r3, #32]
 80076a6:	f023 0201 	bic.w	r2, r3, #1
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f023 0303 	bic.w	r3, r3, #3
 80076d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	4313      	orrs	r3, r2
 80076dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	f023 0302 	bic.w	r3, r3, #2
 80076e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	697a      	ldr	r2, [r7, #20]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a30      	ldr	r2, [pc, #192]	; (80077b4 <TIM_OC1_SetConfig+0x11c>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d013      	beq.n	8007720 <TIM_OC1_SetConfig+0x88>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a2f      	ldr	r2, [pc, #188]	; (80077b8 <TIM_OC1_SetConfig+0x120>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d00f      	beq.n	8007720 <TIM_OC1_SetConfig+0x88>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a2e      	ldr	r2, [pc, #184]	; (80077bc <TIM_OC1_SetConfig+0x124>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d00b      	beq.n	8007720 <TIM_OC1_SetConfig+0x88>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a2d      	ldr	r2, [pc, #180]	; (80077c0 <TIM_OC1_SetConfig+0x128>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d007      	beq.n	8007720 <TIM_OC1_SetConfig+0x88>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a2c      	ldr	r2, [pc, #176]	; (80077c4 <TIM_OC1_SetConfig+0x12c>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d003      	beq.n	8007720 <TIM_OC1_SetConfig+0x88>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a2b      	ldr	r2, [pc, #172]	; (80077c8 <TIM_OC1_SetConfig+0x130>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d10c      	bne.n	800773a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	f023 0308 	bic.w	r3, r3, #8
 8007726:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	697a      	ldr	r2, [r7, #20]
 800772e:	4313      	orrs	r3, r2
 8007730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	f023 0304 	bic.w	r3, r3, #4
 8007738:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a1d      	ldr	r2, [pc, #116]	; (80077b4 <TIM_OC1_SetConfig+0x11c>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d013      	beq.n	800776a <TIM_OC1_SetConfig+0xd2>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a1c      	ldr	r2, [pc, #112]	; (80077b8 <TIM_OC1_SetConfig+0x120>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d00f      	beq.n	800776a <TIM_OC1_SetConfig+0xd2>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a1b      	ldr	r2, [pc, #108]	; (80077bc <TIM_OC1_SetConfig+0x124>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d00b      	beq.n	800776a <TIM_OC1_SetConfig+0xd2>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a1a      	ldr	r2, [pc, #104]	; (80077c0 <TIM_OC1_SetConfig+0x128>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d007      	beq.n	800776a <TIM_OC1_SetConfig+0xd2>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a19      	ldr	r2, [pc, #100]	; (80077c4 <TIM_OC1_SetConfig+0x12c>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d003      	beq.n	800776a <TIM_OC1_SetConfig+0xd2>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a18      	ldr	r2, [pc, #96]	; (80077c8 <TIM_OC1_SetConfig+0x130>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d111      	bne.n	800778e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	693a      	ldr	r2, [r7, #16]
 8007780:	4313      	orrs	r3, r2
 8007782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	693a      	ldr	r2, [r7, #16]
 800778a:	4313      	orrs	r3, r2
 800778c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	685a      	ldr	r2, [r3, #4]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	697a      	ldr	r2, [r7, #20]
 80077a6:	621a      	str	r2, [r3, #32]
}
 80077a8:	bf00      	nop
 80077aa:	371c      	adds	r7, #28
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr
 80077b4:	40012c00 	.word	0x40012c00
 80077b8:	40013400 	.word	0x40013400
 80077bc:	40014000 	.word	0x40014000
 80077c0:	40014400 	.word	0x40014400
 80077c4:	40014800 	.word	0x40014800
 80077c8:	40015000 	.word	0x40015000

080077cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b087      	sub	sp, #28
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a1b      	ldr	r3, [r3, #32]
 80077da:	f023 0210 	bic.w	r2, r3, #16
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a1b      	ldr	r3, [r3, #32]
 80077e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	699b      	ldr	r3, [r3, #24]
 80077f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	021b      	lsls	r3, r3, #8
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	4313      	orrs	r3, r2
 8007812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	f023 0320 	bic.w	r3, r3, #32
 800781a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	011b      	lsls	r3, r3, #4
 8007822:	697a      	ldr	r2, [r7, #20]
 8007824:	4313      	orrs	r3, r2
 8007826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a2c      	ldr	r2, [pc, #176]	; (80078dc <TIM_OC2_SetConfig+0x110>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d007      	beq.n	8007840 <TIM_OC2_SetConfig+0x74>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4a2b      	ldr	r2, [pc, #172]	; (80078e0 <TIM_OC2_SetConfig+0x114>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d003      	beq.n	8007840 <TIM_OC2_SetConfig+0x74>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a2a      	ldr	r2, [pc, #168]	; (80078e4 <TIM_OC2_SetConfig+0x118>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d10d      	bne.n	800785c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007846:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	011b      	lsls	r3, r3, #4
 800784e:	697a      	ldr	r2, [r7, #20]
 8007850:	4313      	orrs	r3, r2
 8007852:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800785a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a1f      	ldr	r2, [pc, #124]	; (80078dc <TIM_OC2_SetConfig+0x110>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d013      	beq.n	800788c <TIM_OC2_SetConfig+0xc0>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a1e      	ldr	r2, [pc, #120]	; (80078e0 <TIM_OC2_SetConfig+0x114>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d00f      	beq.n	800788c <TIM_OC2_SetConfig+0xc0>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a1e      	ldr	r2, [pc, #120]	; (80078e8 <TIM_OC2_SetConfig+0x11c>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d00b      	beq.n	800788c <TIM_OC2_SetConfig+0xc0>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a1d      	ldr	r2, [pc, #116]	; (80078ec <TIM_OC2_SetConfig+0x120>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d007      	beq.n	800788c <TIM_OC2_SetConfig+0xc0>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a1c      	ldr	r2, [pc, #112]	; (80078f0 <TIM_OC2_SetConfig+0x124>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d003      	beq.n	800788c <TIM_OC2_SetConfig+0xc0>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4a17      	ldr	r2, [pc, #92]	; (80078e4 <TIM_OC2_SetConfig+0x118>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d113      	bne.n	80078b4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007892:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800789a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	695b      	ldr	r3, [r3, #20]
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	693a      	ldr	r2, [r7, #16]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	685a      	ldr	r2, [r3, #4]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	697a      	ldr	r2, [r7, #20]
 80078cc:	621a      	str	r2, [r3, #32]
}
 80078ce:	bf00      	nop
 80078d0:	371c      	adds	r7, #28
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	40012c00 	.word	0x40012c00
 80078e0:	40013400 	.word	0x40013400
 80078e4:	40015000 	.word	0x40015000
 80078e8:	40014000 	.word	0x40014000
 80078ec:	40014400 	.word	0x40014400
 80078f0:	40014800 	.word	0x40014800

080078f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b087      	sub	sp, #28
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a1b      	ldr	r3, [r3, #32]
 8007902:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a1b      	ldr	r3, [r3, #32]
 800790e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	69db      	ldr	r3, [r3, #28]
 800791a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f023 0303 	bic.w	r3, r3, #3
 800792e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	68fa      	ldr	r2, [r7, #12]
 8007936:	4313      	orrs	r3, r2
 8007938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007940:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	021b      	lsls	r3, r3, #8
 8007948:	697a      	ldr	r2, [r7, #20]
 800794a:	4313      	orrs	r3, r2
 800794c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a2b      	ldr	r2, [pc, #172]	; (8007a00 <TIM_OC3_SetConfig+0x10c>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d007      	beq.n	8007966 <TIM_OC3_SetConfig+0x72>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a2a      	ldr	r2, [pc, #168]	; (8007a04 <TIM_OC3_SetConfig+0x110>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d003      	beq.n	8007966 <TIM_OC3_SetConfig+0x72>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a29      	ldr	r2, [pc, #164]	; (8007a08 <TIM_OC3_SetConfig+0x114>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d10d      	bne.n	8007982 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800796c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	021b      	lsls	r3, r3, #8
 8007974:	697a      	ldr	r2, [r7, #20]
 8007976:	4313      	orrs	r3, r2
 8007978:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007980:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a1e      	ldr	r2, [pc, #120]	; (8007a00 <TIM_OC3_SetConfig+0x10c>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d013      	beq.n	80079b2 <TIM_OC3_SetConfig+0xbe>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a1d      	ldr	r2, [pc, #116]	; (8007a04 <TIM_OC3_SetConfig+0x110>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d00f      	beq.n	80079b2 <TIM_OC3_SetConfig+0xbe>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a1d      	ldr	r2, [pc, #116]	; (8007a0c <TIM_OC3_SetConfig+0x118>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d00b      	beq.n	80079b2 <TIM_OC3_SetConfig+0xbe>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a1c      	ldr	r2, [pc, #112]	; (8007a10 <TIM_OC3_SetConfig+0x11c>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d007      	beq.n	80079b2 <TIM_OC3_SetConfig+0xbe>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a1b      	ldr	r2, [pc, #108]	; (8007a14 <TIM_OC3_SetConfig+0x120>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d003      	beq.n	80079b2 <TIM_OC3_SetConfig+0xbe>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a16      	ldr	r2, [pc, #88]	; (8007a08 <TIM_OC3_SetConfig+0x114>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d113      	bne.n	80079da <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	695b      	ldr	r3, [r3, #20]
 80079c6:	011b      	lsls	r3, r3, #4
 80079c8:	693a      	ldr	r2, [r7, #16]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	011b      	lsls	r3, r3, #4
 80079d4:	693a      	ldr	r2, [r7, #16]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	685a      	ldr	r2, [r3, #4]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	621a      	str	r2, [r3, #32]
}
 80079f4:	bf00      	nop
 80079f6:	371c      	adds	r7, #28
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr
 8007a00:	40012c00 	.word	0x40012c00
 8007a04:	40013400 	.word	0x40013400
 8007a08:	40015000 	.word	0x40015000
 8007a0c:	40014000 	.word	0x40014000
 8007a10:	40014400 	.word	0x40014400
 8007a14:	40014800 	.word	0x40014800

08007a18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	69db      	ldr	r3, [r3, #28]
 8007a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	021b      	lsls	r3, r3, #8
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	031b      	lsls	r3, r3, #12
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a2c      	ldr	r2, [pc, #176]	; (8007b28 <TIM_OC4_SetConfig+0x110>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d007      	beq.n	8007a8c <TIM_OC4_SetConfig+0x74>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a2b      	ldr	r2, [pc, #172]	; (8007b2c <TIM_OC4_SetConfig+0x114>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d003      	beq.n	8007a8c <TIM_OC4_SetConfig+0x74>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a2a      	ldr	r2, [pc, #168]	; (8007b30 <TIM_OC4_SetConfig+0x118>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d10d      	bne.n	8007aa8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	031b      	lsls	r3, r3, #12
 8007a9a:	697a      	ldr	r2, [r7, #20]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007aa6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a1f      	ldr	r2, [pc, #124]	; (8007b28 <TIM_OC4_SetConfig+0x110>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d013      	beq.n	8007ad8 <TIM_OC4_SetConfig+0xc0>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a1e      	ldr	r2, [pc, #120]	; (8007b2c <TIM_OC4_SetConfig+0x114>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d00f      	beq.n	8007ad8 <TIM_OC4_SetConfig+0xc0>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a1e      	ldr	r2, [pc, #120]	; (8007b34 <TIM_OC4_SetConfig+0x11c>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d00b      	beq.n	8007ad8 <TIM_OC4_SetConfig+0xc0>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a1d      	ldr	r2, [pc, #116]	; (8007b38 <TIM_OC4_SetConfig+0x120>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d007      	beq.n	8007ad8 <TIM_OC4_SetConfig+0xc0>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a1c      	ldr	r2, [pc, #112]	; (8007b3c <TIM_OC4_SetConfig+0x124>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d003      	beq.n	8007ad8 <TIM_OC4_SetConfig+0xc0>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4a17      	ldr	r2, [pc, #92]	; (8007b30 <TIM_OC4_SetConfig+0x118>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d113      	bne.n	8007b00 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ade:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ae6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	695b      	ldr	r3, [r3, #20]
 8007aec:	019b      	lsls	r3, r3, #6
 8007aee:	693a      	ldr	r2, [r7, #16]
 8007af0:	4313      	orrs	r3, r2
 8007af2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	019b      	lsls	r3, r3, #6
 8007afa:	693a      	ldr	r2, [r7, #16]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	693a      	ldr	r2, [r7, #16]
 8007b04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	697a      	ldr	r2, [r7, #20]
 8007b18:	621a      	str	r2, [r3, #32]
}
 8007b1a:	bf00      	nop
 8007b1c:	371c      	adds	r7, #28
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	40012c00 	.word	0x40012c00
 8007b2c:	40013400 	.word	0x40013400
 8007b30:	40015000 	.word	0x40015000
 8007b34:	40014000 	.word	0x40014000
 8007b38:	40014400 	.word	0x40014400
 8007b3c:	40014800 	.word	0x40014800

08007b40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b087      	sub	sp, #28
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a1b      	ldr	r3, [r3, #32]
 8007b4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a1b      	ldr	r3, [r3, #32]
 8007b5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007b84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	041b      	lsls	r3, r3, #16
 8007b8c:	693a      	ldr	r2, [r7, #16]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a19      	ldr	r2, [pc, #100]	; (8007bfc <TIM_OC5_SetConfig+0xbc>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d013      	beq.n	8007bc2 <TIM_OC5_SetConfig+0x82>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a18      	ldr	r2, [pc, #96]	; (8007c00 <TIM_OC5_SetConfig+0xc0>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d00f      	beq.n	8007bc2 <TIM_OC5_SetConfig+0x82>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a17      	ldr	r2, [pc, #92]	; (8007c04 <TIM_OC5_SetConfig+0xc4>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d00b      	beq.n	8007bc2 <TIM_OC5_SetConfig+0x82>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a16      	ldr	r2, [pc, #88]	; (8007c08 <TIM_OC5_SetConfig+0xc8>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d007      	beq.n	8007bc2 <TIM_OC5_SetConfig+0x82>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a15      	ldr	r2, [pc, #84]	; (8007c0c <TIM_OC5_SetConfig+0xcc>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d003      	beq.n	8007bc2 <TIM_OC5_SetConfig+0x82>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a14      	ldr	r2, [pc, #80]	; (8007c10 <TIM_OC5_SetConfig+0xd0>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d109      	bne.n	8007bd6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bc8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	695b      	ldr	r3, [r3, #20]
 8007bce:	021b      	lsls	r3, r3, #8
 8007bd0:	697a      	ldr	r2, [r7, #20]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	685a      	ldr	r2, [r3, #4]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	693a      	ldr	r2, [r7, #16]
 8007bee:	621a      	str	r2, [r3, #32]
}
 8007bf0:	bf00      	nop
 8007bf2:	371c      	adds	r7, #28
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr
 8007bfc:	40012c00 	.word	0x40012c00
 8007c00:	40013400 	.word	0x40013400
 8007c04:	40014000 	.word	0x40014000
 8007c08:	40014400 	.word	0x40014400
 8007c0c:	40014800 	.word	0x40014800
 8007c10:	40015000 	.word	0x40015000

08007c14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b087      	sub	sp, #28
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a1b      	ldr	r3, [r3, #32]
 8007c22:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	021b      	lsls	r3, r3, #8
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	051b      	lsls	r3, r3, #20
 8007c62:	693a      	ldr	r2, [r7, #16]
 8007c64:	4313      	orrs	r3, r2
 8007c66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a1a      	ldr	r2, [pc, #104]	; (8007cd4 <TIM_OC6_SetConfig+0xc0>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d013      	beq.n	8007c98 <TIM_OC6_SetConfig+0x84>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	4a19      	ldr	r2, [pc, #100]	; (8007cd8 <TIM_OC6_SetConfig+0xc4>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d00f      	beq.n	8007c98 <TIM_OC6_SetConfig+0x84>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4a18      	ldr	r2, [pc, #96]	; (8007cdc <TIM_OC6_SetConfig+0xc8>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d00b      	beq.n	8007c98 <TIM_OC6_SetConfig+0x84>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4a17      	ldr	r2, [pc, #92]	; (8007ce0 <TIM_OC6_SetConfig+0xcc>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d007      	beq.n	8007c98 <TIM_OC6_SetConfig+0x84>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a16      	ldr	r2, [pc, #88]	; (8007ce4 <TIM_OC6_SetConfig+0xd0>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d003      	beq.n	8007c98 <TIM_OC6_SetConfig+0x84>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a15      	ldr	r2, [pc, #84]	; (8007ce8 <TIM_OC6_SetConfig+0xd4>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d109      	bne.n	8007cac <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	695b      	ldr	r3, [r3, #20]
 8007ca4:	029b      	lsls	r3, r3, #10
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	697a      	ldr	r2, [r7, #20]
 8007cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	685a      	ldr	r2, [r3, #4]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	621a      	str	r2, [r3, #32]
}
 8007cc6:	bf00      	nop
 8007cc8:	371c      	adds	r7, #28
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	40012c00 	.word	0x40012c00
 8007cd8:	40013400 	.word	0x40013400
 8007cdc:	40014000 	.word	0x40014000
 8007ce0:	40014400 	.word	0x40014400
 8007ce4:	40014800 	.word	0x40014800
 8007ce8:	40015000 	.word	0x40015000

08007cec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b087      	sub	sp, #28
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	607a      	str	r2, [r7, #4]
 8007cf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6a1b      	ldr	r3, [r3, #32]
 8007cfe:	f023 0201 	bic.w	r2, r3, #1
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	699b      	ldr	r3, [r3, #24]
 8007d0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6a1b      	ldr	r3, [r3, #32]
 8007d10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	4a28      	ldr	r2, [pc, #160]	; (8007db8 <TIM_TI1_SetConfig+0xcc>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d01b      	beq.n	8007d52 <TIM_TI1_SetConfig+0x66>
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d20:	d017      	beq.n	8007d52 <TIM_TI1_SetConfig+0x66>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	4a25      	ldr	r2, [pc, #148]	; (8007dbc <TIM_TI1_SetConfig+0xd0>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d013      	beq.n	8007d52 <TIM_TI1_SetConfig+0x66>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	4a24      	ldr	r2, [pc, #144]	; (8007dc0 <TIM_TI1_SetConfig+0xd4>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d00f      	beq.n	8007d52 <TIM_TI1_SetConfig+0x66>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	4a23      	ldr	r2, [pc, #140]	; (8007dc4 <TIM_TI1_SetConfig+0xd8>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d00b      	beq.n	8007d52 <TIM_TI1_SetConfig+0x66>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	4a22      	ldr	r2, [pc, #136]	; (8007dc8 <TIM_TI1_SetConfig+0xdc>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d007      	beq.n	8007d52 <TIM_TI1_SetConfig+0x66>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	4a21      	ldr	r2, [pc, #132]	; (8007dcc <TIM_TI1_SetConfig+0xe0>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d003      	beq.n	8007d52 <TIM_TI1_SetConfig+0x66>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	4a20      	ldr	r2, [pc, #128]	; (8007dd0 <TIM_TI1_SetConfig+0xe4>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d101      	bne.n	8007d56 <TIM_TI1_SetConfig+0x6a>
 8007d52:	2301      	movs	r3, #1
 8007d54:	e000      	b.n	8007d58 <TIM_TI1_SetConfig+0x6c>
 8007d56:	2300      	movs	r3, #0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d008      	beq.n	8007d6e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	f023 0303 	bic.w	r3, r3, #3
 8007d62:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007d64:	697a      	ldr	r2, [r7, #20]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	617b      	str	r3, [r7, #20]
 8007d6c:	e003      	b.n	8007d76 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	f043 0301 	orr.w	r3, r3, #1
 8007d74:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	011b      	lsls	r3, r3, #4
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	697a      	ldr	r2, [r7, #20]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	f023 030a 	bic.w	r3, r3, #10
 8007d90:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	f003 030a 	and.w	r3, r3, #10
 8007d98:	693a      	ldr	r2, [r7, #16]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	697a      	ldr	r2, [r7, #20]
 8007da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	621a      	str	r2, [r3, #32]
}
 8007daa:	bf00      	nop
 8007dac:	371c      	adds	r7, #28
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop
 8007db8:	40012c00 	.word	0x40012c00
 8007dbc:	40000400 	.word	0x40000400
 8007dc0:	40000800 	.word	0x40000800
 8007dc4:	40000c00 	.word	0x40000c00
 8007dc8:	40013400 	.word	0x40013400
 8007dcc:	40014000 	.word	0x40014000
 8007dd0:	40015000 	.word	0x40015000

08007dd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b087      	sub	sp, #28
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6a1b      	ldr	r3, [r3, #32]
 8007de4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	f023 0201 	bic.w	r2, r3, #1
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	011b      	lsls	r3, r3, #4
 8007e04:	693a      	ldr	r2, [r7, #16]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	f023 030a 	bic.w	r3, r3, #10
 8007e10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e12:	697a      	ldr	r2, [r7, #20]
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	693a      	ldr	r2, [r7, #16]
 8007e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	697a      	ldr	r2, [r7, #20]
 8007e24:	621a      	str	r2, [r3, #32]
}
 8007e26:	bf00      	nop
 8007e28:	371c      	adds	r7, #28
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr

08007e32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b087      	sub	sp, #28
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	60f8      	str	r0, [r7, #12]
 8007e3a:	60b9      	str	r1, [r7, #8]
 8007e3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6a1b      	ldr	r3, [r3, #32]
 8007e42:	f023 0210 	bic.w	r2, r3, #16
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	699b      	ldr	r3, [r3, #24]
 8007e4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6a1b      	ldr	r3, [r3, #32]
 8007e54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	031b      	lsls	r3, r3, #12
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	011b      	lsls	r3, r3, #4
 8007e74:	693a      	ldr	r2, [r7, #16]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	697a      	ldr	r2, [r7, #20]
 8007e7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	693a      	ldr	r2, [r7, #16]
 8007e84:	621a      	str	r2, [r3, #32]
}
 8007e86:	bf00      	nop
 8007e88:	371c      	adds	r7, #28
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr

08007e92 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e92:	b480      	push	{r7}
 8007e94:	b085      	sub	sp, #20
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
 8007e9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007eae:	683a      	ldr	r2, [r7, #0]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	f043 0307 	orr.w	r3, r3, #7
 8007eb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	609a      	str	r2, [r3, #8]
}
 8007ec0:	bf00      	nop
 8007ec2:	3714      	adds	r7, #20
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b087      	sub	sp, #28
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
 8007ed8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ee6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	021a      	lsls	r2, r3, #8
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	431a      	orrs	r2, r3
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	697a      	ldr	r2, [r7, #20]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	609a      	str	r2, [r3, #8]
}
 8007f00:	bf00      	nop
 8007f02:	371c      	adds	r7, #28
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b087      	sub	sp, #28
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	f003 031f 	and.w	r3, r3, #31
 8007f1e:	2201      	movs	r2, #1
 8007f20:	fa02 f303 	lsl.w	r3, r2, r3
 8007f24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	6a1a      	ldr	r2, [r3, #32]
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	43db      	mvns	r3, r3
 8007f2e:	401a      	ands	r2, r3
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6a1a      	ldr	r2, [r3, #32]
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	f003 031f 	and.w	r3, r3, #31
 8007f3e:	6879      	ldr	r1, [r7, #4]
 8007f40:	fa01 f303 	lsl.w	r3, r1, r3
 8007f44:	431a      	orrs	r2, r3
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	621a      	str	r2, [r3, #32]
}
 8007f4a:	bf00      	nop
 8007f4c:	371c      	adds	r7, #28
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr

08007f56 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b08a      	sub	sp, #40	; 0x28
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
 8007f5e:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d101      	bne.n	8007f6a <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e0a0      	b.n	80080ac <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d106      	bne.n	8007f84 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f7f9 ff80 	bl	8001e84 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2202      	movs	r2, #2
 8007f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	3304      	adds	r3, #4
 8007f94:	4619      	mov	r1, r3
 8007f96:	4610      	mov	r0, r2
 8007f98:	f7ff fad6 	bl	8007548 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6818      	ldr	r0, [r3, #0]
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	6819      	ldr	r1, [r3, #0]
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	2203      	movs	r2, #3
 8007faa:	f7ff fe9f 	bl	8007cec <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	699a      	ldr	r2, [r3, #24]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f022 020c 	bic.w	r2, r2, #12
 8007fbc:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	6999      	ldr	r1, [r3, #24]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	685a      	ldr	r2, [r3, #4]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	430a      	orrs	r2, r1
 8007fce:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	685a      	ldr	r2, [r3, #4]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007fde:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	6812      	ldr	r2, [r2, #0]
 8007fea:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ff2:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	689a      	ldr	r2, [r3, #8]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008002:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	6812      	ldr	r2, [r2, #0]
 800800e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008012:	f023 0307 	bic.w	r3, r3, #7
 8008016:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	689a      	ldr	r2, [r3, #8]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f042 0204 	orr.w	r2, r2, #4
 8008026:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8008028:	2300      	movs	r3, #0
 800802a:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800802c:	2300      	movs	r3, #0
 800802e:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8008030:	2370      	movs	r3, #112	; 0x70
 8008032:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008034:	2300      	movs	r3, #0
 8008036:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008038:	2300      	movs	r3, #0
 800803a:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800803c:	2300      	movs	r3, #0
 800803e:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f107 020c 	add.w	r2, r7, #12
 800804e:	4611      	mov	r1, r2
 8008050:	4618      	mov	r0, r3
 8008052:	f7ff fbbb 	bl	80077cc <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	6812      	ldr	r2, [r2, #0]
 8008060:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008068:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	685a      	ldr	r2, [r3, #4]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8008078:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2201      	movs	r2, #1
 800807e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2201      	movs	r2, #1
 800808e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2201      	movs	r2, #1
 800809e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2201      	movs	r2, #1
 80080a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3728      	adds	r7, #40	; 0x28
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d109      	bne.n	80080d8 <HAL_TIMEx_PWMN_Start+0x24>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	bf14      	ite	ne
 80080d0:	2301      	movne	r3, #1
 80080d2:	2300      	moveq	r3, #0
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	e022      	b.n	800811e <HAL_TIMEx_PWMN_Start+0x6a>
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	2b04      	cmp	r3, #4
 80080dc:	d109      	bne.n	80080f2 <HAL_TIMEx_PWMN_Start+0x3e>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	bf14      	ite	ne
 80080ea:	2301      	movne	r3, #1
 80080ec:	2300      	moveq	r3, #0
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	e015      	b.n	800811e <HAL_TIMEx_PWMN_Start+0x6a>
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	2b08      	cmp	r3, #8
 80080f6:	d109      	bne.n	800810c <HAL_TIMEx_PWMN_Start+0x58>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	2b01      	cmp	r3, #1
 8008102:	bf14      	ite	ne
 8008104:	2301      	movne	r3, #1
 8008106:	2300      	moveq	r3, #0
 8008108:	b2db      	uxtb	r3, r3
 800810a:	e008      	b.n	800811e <HAL_TIMEx_PWMN_Start+0x6a>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b01      	cmp	r3, #1
 8008116:	bf14      	ite	ne
 8008118:	2301      	movne	r3, #1
 800811a:	2300      	moveq	r3, #0
 800811c:	b2db      	uxtb	r3, r3
 800811e:	2b00      	cmp	r3, #0
 8008120:	d001      	beq.n	8008126 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e073      	b.n	800820e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d104      	bne.n	8008136 <HAL_TIMEx_PWMN_Start+0x82>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2202      	movs	r2, #2
 8008130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008134:	e013      	b.n	800815e <HAL_TIMEx_PWMN_Start+0xaa>
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	2b04      	cmp	r3, #4
 800813a:	d104      	bne.n	8008146 <HAL_TIMEx_PWMN_Start+0x92>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2202      	movs	r2, #2
 8008140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008144:	e00b      	b.n	800815e <HAL_TIMEx_PWMN_Start+0xaa>
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	2b08      	cmp	r3, #8
 800814a:	d104      	bne.n	8008156 <HAL_TIMEx_PWMN_Start+0xa2>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2202      	movs	r2, #2
 8008150:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008154:	e003      	b.n	800815e <HAL_TIMEx_PWMN_Start+0xaa>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2202      	movs	r2, #2
 800815a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2204      	movs	r2, #4
 8008164:	6839      	ldr	r1, [r7, #0]
 8008166:	4618      	mov	r0, r3
 8008168:	f000 fa52 	bl	8008610 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800817a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a25      	ldr	r2, [pc, #148]	; (8008218 <HAL_TIMEx_PWMN_Start+0x164>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d022      	beq.n	80081cc <HAL_TIMEx_PWMN_Start+0x118>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800818e:	d01d      	beq.n	80081cc <HAL_TIMEx_PWMN_Start+0x118>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a21      	ldr	r2, [pc, #132]	; (800821c <HAL_TIMEx_PWMN_Start+0x168>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d018      	beq.n	80081cc <HAL_TIMEx_PWMN_Start+0x118>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a20      	ldr	r2, [pc, #128]	; (8008220 <HAL_TIMEx_PWMN_Start+0x16c>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d013      	beq.n	80081cc <HAL_TIMEx_PWMN_Start+0x118>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a1e      	ldr	r2, [pc, #120]	; (8008224 <HAL_TIMEx_PWMN_Start+0x170>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d00e      	beq.n	80081cc <HAL_TIMEx_PWMN_Start+0x118>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a1d      	ldr	r2, [pc, #116]	; (8008228 <HAL_TIMEx_PWMN_Start+0x174>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d009      	beq.n	80081cc <HAL_TIMEx_PWMN_Start+0x118>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a1b      	ldr	r2, [pc, #108]	; (800822c <HAL_TIMEx_PWMN_Start+0x178>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d004      	beq.n	80081cc <HAL_TIMEx_PWMN_Start+0x118>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a1a      	ldr	r2, [pc, #104]	; (8008230 <HAL_TIMEx_PWMN_Start+0x17c>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d115      	bne.n	80081f8 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	689a      	ldr	r2, [r3, #8]
 80081d2:	4b18      	ldr	r3, [pc, #96]	; (8008234 <HAL_TIMEx_PWMN_Start+0x180>)
 80081d4:	4013      	ands	r3, r2
 80081d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2b06      	cmp	r3, #6
 80081dc:	d015      	beq.n	800820a <HAL_TIMEx_PWMN_Start+0x156>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081e4:	d011      	beq.n	800820a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f042 0201 	orr.w	r2, r2, #1
 80081f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081f6:	e008      	b.n	800820a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f042 0201 	orr.w	r2, r2, #1
 8008206:	601a      	str	r2, [r3, #0]
 8008208:	e000      	b.n	800820c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800820a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	40012c00 	.word	0x40012c00
 800821c:	40000400 	.word	0x40000400
 8008220:	40000800 	.word	0x40000800
 8008224:	40000c00 	.word	0x40000c00
 8008228:	40013400 	.word	0x40013400
 800822c:	40014000 	.word	0x40014000
 8008230:	40015000 	.word	0x40015000
 8008234:	00010007 	.word	0x00010007

08008238 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2200      	movs	r2, #0
 8008248:	6839      	ldr	r1, [r7, #0]
 800824a:	4618      	mov	r0, r3
 800824c:	f000 f9e0 	bl	8008610 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6a1a      	ldr	r2, [r3, #32]
 8008256:	f241 1311 	movw	r3, #4369	; 0x1111
 800825a:	4013      	ands	r3, r2
 800825c:	2b00      	cmp	r3, #0
 800825e:	d10f      	bne.n	8008280 <HAL_TIMEx_PWMN_Stop+0x48>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6a1a      	ldr	r2, [r3, #32]
 8008266:	f244 4344 	movw	r3, #17476	; 0x4444
 800826a:	4013      	ands	r3, r2
 800826c:	2b00      	cmp	r3, #0
 800826e:	d107      	bne.n	8008280 <HAL_TIMEx_PWMN_Stop+0x48>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800827e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	6a1a      	ldr	r2, [r3, #32]
 8008286:	f241 1311 	movw	r3, #4369	; 0x1111
 800828a:	4013      	ands	r3, r2
 800828c:	2b00      	cmp	r3, #0
 800828e:	d10f      	bne.n	80082b0 <HAL_TIMEx_PWMN_Stop+0x78>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	6a1a      	ldr	r2, [r3, #32]
 8008296:	f244 4344 	movw	r3, #17476	; 0x4444
 800829a:	4013      	ands	r3, r2
 800829c:	2b00      	cmp	r3, #0
 800829e:	d107      	bne.n	80082b0 <HAL_TIMEx_PWMN_Stop+0x78>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f022 0201 	bic.w	r2, r2, #1
 80082ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d104      	bne.n	80082c0 <HAL_TIMEx_PWMN_Stop+0x88>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2201      	movs	r2, #1
 80082ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082be:	e013      	b.n	80082e8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	2b04      	cmp	r3, #4
 80082c4:	d104      	bne.n	80082d0 <HAL_TIMEx_PWMN_Stop+0x98>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2201      	movs	r2, #1
 80082ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082ce:	e00b      	b.n	80082e8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	2b08      	cmp	r3, #8
 80082d4:	d104      	bne.n	80082e0 <HAL_TIMEx_PWMN_Stop+0xa8>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2201      	movs	r2, #1
 80082da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80082de:	e003      	b.n	80082e8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 80082e8:	2300      	movs	r3, #0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3708      	adds	r7, #8
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
	...

080082f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008304:	2b01      	cmp	r3, #1
 8008306:	d101      	bne.n	800830c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008308:	2302      	movs	r3, #2
 800830a:	e074      	b.n	80083f6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2202      	movs	r2, #2
 8008318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a34      	ldr	r2, [pc, #208]	; (8008404 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d009      	beq.n	800834a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a33      	ldr	r2, [pc, #204]	; (8008408 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d004      	beq.n	800834a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a31      	ldr	r2, [pc, #196]	; (800840c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d108      	bne.n	800835c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008350:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	4313      	orrs	r3, r2
 800835a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008366:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	4313      	orrs	r3, r2
 8008370:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a21      	ldr	r2, [pc, #132]	; (8008404 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d022      	beq.n	80083ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800838c:	d01d      	beq.n	80083ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a1f      	ldr	r2, [pc, #124]	; (8008410 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d018      	beq.n	80083ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a1d      	ldr	r2, [pc, #116]	; (8008414 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d013      	beq.n	80083ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a1c      	ldr	r2, [pc, #112]	; (8008418 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d00e      	beq.n	80083ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a15      	ldr	r2, [pc, #84]	; (8008408 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d009      	beq.n	80083ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a18      	ldr	r2, [pc, #96]	; (800841c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d004      	beq.n	80083ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a11      	ldr	r2, [pc, #68]	; (800840c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d10c      	bne.n	80083e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	68ba      	ldr	r2, [r7, #8]
 80083d8:	4313      	orrs	r3, r2
 80083da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68ba      	ldr	r2, [r7, #8]
 80083e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3714      	adds	r7, #20
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	40012c00 	.word	0x40012c00
 8008408:	40013400 	.word	0x40013400
 800840c:	40015000 	.word	0x40015000
 8008410:	40000400 	.word	0x40000400
 8008414:	40000800 	.word	0x40000800
 8008418:	40000c00 	.word	0x40000c00
 800841c:	40014000 	.word	0x40014000

08008420 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800842a:	2300      	movs	r3, #0
 800842c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008434:	2b01      	cmp	r3, #1
 8008436:	d101      	bne.n	800843c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008438:	2302      	movs	r3, #2
 800843a:	e096      	b.n	800856a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	4313      	orrs	r3, r2
 8008450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	4313      	orrs	r3, r2
 800845e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	4313      	orrs	r3, r2
 800846c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4313      	orrs	r3, r2
 800847a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	4313      	orrs	r3, r2
 8008488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	695b      	ldr	r3, [r3, #20]
 8008494:	4313      	orrs	r3, r2
 8008496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a2:	4313      	orrs	r3, r2
 80084a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	699b      	ldr	r3, [r3, #24]
 80084b0:	041b      	lsls	r3, r3, #16
 80084b2:	4313      	orrs	r3, r2
 80084b4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a2f      	ldr	r2, [pc, #188]	; (8008578 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d009      	beq.n	80084d4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a2d      	ldr	r2, [pc, #180]	; (800857c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d004      	beq.n	80084d4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a2c      	ldr	r2, [pc, #176]	; (8008580 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d106      	bne.n	80084e2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	69db      	ldr	r3, [r3, #28]
 80084de:	4313      	orrs	r3, r2
 80084e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a24      	ldr	r2, [pc, #144]	; (8008578 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d009      	beq.n	8008500 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a22      	ldr	r2, [pc, #136]	; (800857c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d004      	beq.n	8008500 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a21      	ldr	r2, [pc, #132]	; (8008580 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d12b      	bne.n	8008558 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800850a:	051b      	lsls	r3, r3, #20
 800850c:	4313      	orrs	r3, r2
 800850e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	6a1b      	ldr	r3, [r3, #32]
 800851a:	4313      	orrs	r3, r2
 800851c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008528:	4313      	orrs	r3, r2
 800852a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a11      	ldr	r2, [pc, #68]	; (8008578 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d009      	beq.n	800854a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a10      	ldr	r2, [pc, #64]	; (800857c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d004      	beq.n	800854a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a0e      	ldr	r2, [pc, #56]	; (8008580 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d106      	bne.n	8008558 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008554:	4313      	orrs	r3, r2
 8008556:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3714      	adds	r7, #20
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr
 8008576:	bf00      	nop
 8008578:	40012c00 	.word	0x40012c00
 800857c:	40013400 	.word	0x40013400
 8008580:	40015000 	.word	0x40015000

08008584 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800858c:	bf00      	nop
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085a0:	bf00      	nop
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80085b4:	bf00      	nop
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80085c8:	bf00      	nop
 80085ca:	370c      	adds	r7, #12
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80085dc:	bf00      	nop
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80085f0:	bf00      	nop
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008604:	bf00      	nop
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008610:	b480      	push	{r7}
 8008612:	b087      	sub	sp, #28
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	60b9      	str	r1, [r7, #8]
 800861a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	f003 031f 	and.w	r3, r3, #31
 8008622:	2204      	movs	r2, #4
 8008624:	fa02 f303 	lsl.w	r3, r2, r3
 8008628:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6a1a      	ldr	r2, [r3, #32]
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	43db      	mvns	r3, r3
 8008632:	401a      	ands	r2, r3
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6a1a      	ldr	r2, [r3, #32]
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	f003 031f 	and.w	r3, r3, #31
 8008642:	6879      	ldr	r1, [r7, #4]
 8008644:	fa01 f303 	lsl.w	r3, r1, r3
 8008648:	431a      	orrs	r2, r3
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	621a      	str	r2, [r3, #32]
}
 800864e:	bf00      	nop
 8008650:	371c      	adds	r7, #28
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr

0800865a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b082      	sub	sp, #8
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d101      	bne.n	800866c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	e042      	b.n	80086f2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008672:	2b00      	cmp	r3, #0
 8008674:	d106      	bne.n	8008684 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f7f9 fdcc 	bl	800221c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2224      	movs	r2, #36	; 0x24
 8008688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f022 0201 	bic.w	r2, r2, #1
 800869a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 fc51 	bl	8008f44 <UART_SetConfig>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d101      	bne.n	80086ac <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	e022      	b.n	80086f2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d002      	beq.n	80086ba <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 ff41 	bl	800953c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	685a      	ldr	r2, [r3, #4]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80086c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	689a      	ldr	r2, [r3, #8]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80086d8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f042 0201 	orr.w	r2, r2, #1
 80086e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 ffc8 	bl	8009680 <UART_CheckIdleState>
 80086f0:	4603      	mov	r3, r0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3708      	adds	r7, #8
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b08a      	sub	sp, #40	; 0x28
 80086fe:	af02      	add	r7, sp, #8
 8008700:	60f8      	str	r0, [r7, #12]
 8008702:	60b9      	str	r1, [r7, #8]
 8008704:	603b      	str	r3, [r7, #0]
 8008706:	4613      	mov	r3, r2
 8008708:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008710:	2b20      	cmp	r3, #32
 8008712:	f040 8083 	bne.w	800881c <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d002      	beq.n	8008722 <HAL_UART_Transmit+0x28>
 800871c:	88fb      	ldrh	r3, [r7, #6]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d101      	bne.n	8008726 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	e07b      	b.n	800881e <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800872c:	2b01      	cmp	r3, #1
 800872e:	d101      	bne.n	8008734 <HAL_UART_Transmit+0x3a>
 8008730:	2302      	movs	r3, #2
 8008732:	e074      	b.n	800881e <HAL_UART_Transmit+0x124>
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2200      	movs	r2, #0
 8008740:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2221      	movs	r2, #33	; 0x21
 8008748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800874c:	f7fa f8e8 	bl	8002920 <HAL_GetTick>
 8008750:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	88fa      	ldrh	r2, [r7, #6]
 8008756:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	88fa      	ldrh	r2, [r7, #6]
 800875e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800876a:	d108      	bne.n	800877e <HAL_UART_Transmit+0x84>
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d104      	bne.n	800877e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008774:	2300      	movs	r3, #0
 8008776:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	61bb      	str	r3, [r7, #24]
 800877c:	e003      	b.n	8008786 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008782:	2300      	movs	r3, #0
 8008784:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2200      	movs	r2, #0
 800878a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800878e:	e02c      	b.n	80087ea <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	9300      	str	r3, [sp, #0]
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	2200      	movs	r2, #0
 8008798:	2180      	movs	r1, #128	; 0x80
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f000 ffbb 	bl	8009716 <UART_WaitOnFlagUntilTimeout>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d001      	beq.n	80087aa <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80087a6:	2303      	movs	r3, #3
 80087a8:	e039      	b.n	800881e <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d10b      	bne.n	80087c8 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	881b      	ldrh	r3, [r3, #0]
 80087b4:	461a      	mov	r2, r3
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80087c0:	69bb      	ldr	r3, [r7, #24]
 80087c2:	3302      	adds	r3, #2
 80087c4:	61bb      	str	r3, [r7, #24]
 80087c6:	e007      	b.n	80087d8 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	781a      	ldrb	r2, [r3, #0]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	3301      	adds	r3, #1
 80087d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80087de:	b29b      	uxth	r3, r3
 80087e0:	3b01      	subs	r3, #1
 80087e2:	b29a      	uxth	r2, r3
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1cc      	bne.n	8008790 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	9300      	str	r3, [sp, #0]
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	2200      	movs	r2, #0
 80087fe:	2140      	movs	r1, #64	; 0x40
 8008800:	68f8      	ldr	r0, [r7, #12]
 8008802:	f000 ff88 	bl	8009716 <UART_WaitOnFlagUntilTimeout>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d001      	beq.n	8008810 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800880c:	2303      	movs	r3, #3
 800880e:	e006      	b.n	800881e <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2220      	movs	r2, #32
 8008814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008818:	2300      	movs	r3, #0
 800881a:	e000      	b.n	800881e <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800881c:	2302      	movs	r3, #2
  }
}
 800881e:	4618      	mov	r0, r3
 8008820:	3720      	adds	r7, #32
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
	...

08008828 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b08a      	sub	sp, #40	; 0x28
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	4613      	mov	r3, r2
 8008834:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800883c:	2b20      	cmp	r3, #32
 800883e:	d142      	bne.n	80088c6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d002      	beq.n	800884c <HAL_UART_Receive_IT+0x24>
 8008846:	88fb      	ldrh	r3, [r7, #6]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d101      	bne.n	8008850 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	e03b      	b.n	80088c8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008856:	2b01      	cmp	r3, #1
 8008858:	d101      	bne.n	800885e <HAL_UART_Receive_IT+0x36>
 800885a:	2302      	movs	r3, #2
 800885c:	e034      	b.n	80088c8 <HAL_UART_Receive_IT+0xa0>
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2201      	movs	r2, #1
 8008862:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2200      	movs	r2, #0
 800886a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a17      	ldr	r2, [pc, #92]	; (80088d0 <HAL_UART_Receive_IT+0xa8>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d01f      	beq.n	80088b6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008880:	2b00      	cmp	r3, #0
 8008882:	d018      	beq.n	80088b6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	e853 3f00 	ldrex	r3, [r3]
 8008890:	613b      	str	r3, [r7, #16]
   return(result);
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008898:	627b      	str	r3, [r7, #36]	; 0x24
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	461a      	mov	r2, r3
 80088a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a2:	623b      	str	r3, [r7, #32]
 80088a4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a6:	69f9      	ldr	r1, [r7, #28]
 80088a8:	6a3a      	ldr	r2, [r7, #32]
 80088aa:	e841 2300 	strex	r3, r2, [r1]
 80088ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d1e6      	bne.n	8008884 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80088b6:	88fb      	ldrh	r3, [r7, #6]
 80088b8:	461a      	mov	r2, r3
 80088ba:	68b9      	ldr	r1, [r7, #8]
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f000 fff3 	bl	80098a8 <UART_Start_Receive_IT>
 80088c2:	4603      	mov	r3, r0
 80088c4:	e000      	b.n	80088c8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80088c6:	2302      	movs	r3, #2
  }
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3728      	adds	r7, #40	; 0x28
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	40008000 	.word	0x40008000

080088d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b0ba      	sub	sp, #232	; 0xe8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	69db      	ldr	r3, [r3, #28]
 80088e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80088fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80088fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8008902:	4013      	ands	r3, r2
 8008904:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008908:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800890c:	2b00      	cmp	r3, #0
 800890e:	d11b      	bne.n	8008948 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008914:	f003 0320 	and.w	r3, r3, #32
 8008918:	2b00      	cmp	r3, #0
 800891a:	d015      	beq.n	8008948 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800891c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008920:	f003 0320 	and.w	r3, r3, #32
 8008924:	2b00      	cmp	r3, #0
 8008926:	d105      	bne.n	8008934 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800892c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008930:	2b00      	cmp	r3, #0
 8008932:	d009      	beq.n	8008948 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008938:	2b00      	cmp	r3, #0
 800893a:	f000 82d6 	beq.w	8008eea <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	4798      	blx	r3
      }
      return;
 8008946:	e2d0      	b.n	8008eea <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008948:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800894c:	2b00      	cmp	r3, #0
 800894e:	f000 811f 	beq.w	8008b90 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008952:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008956:	4b8b      	ldr	r3, [pc, #556]	; (8008b84 <HAL_UART_IRQHandler+0x2b0>)
 8008958:	4013      	ands	r3, r2
 800895a:	2b00      	cmp	r3, #0
 800895c:	d106      	bne.n	800896c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800895e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008962:	4b89      	ldr	r3, [pc, #548]	; (8008b88 <HAL_UART_IRQHandler+0x2b4>)
 8008964:	4013      	ands	r3, r2
 8008966:	2b00      	cmp	r3, #0
 8008968:	f000 8112 	beq.w	8008b90 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800896c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008970:	f003 0301 	and.w	r3, r3, #1
 8008974:	2b00      	cmp	r3, #0
 8008976:	d011      	beq.n	800899c <HAL_UART_IRQHandler+0xc8>
 8008978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800897c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008980:	2b00      	cmp	r3, #0
 8008982:	d00b      	beq.n	800899c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2201      	movs	r2, #1
 800898a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008992:	f043 0201 	orr.w	r2, r3, #1
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800899c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089a0:	f003 0302 	and.w	r3, r3, #2
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d011      	beq.n	80089cc <HAL_UART_IRQHandler+0xf8>
 80089a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089ac:	f003 0301 	and.w	r3, r3, #1
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d00b      	beq.n	80089cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2202      	movs	r2, #2
 80089ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089c2:	f043 0204 	orr.w	r2, r3, #4
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089d0:	f003 0304 	and.w	r3, r3, #4
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d011      	beq.n	80089fc <HAL_UART_IRQHandler+0x128>
 80089d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089dc:	f003 0301 	and.w	r3, r3, #1
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d00b      	beq.n	80089fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2204      	movs	r2, #4
 80089ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089f2:	f043 0202 	orr.w	r2, r3, #2
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80089fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a00:	f003 0308 	and.w	r3, r3, #8
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d017      	beq.n	8008a38 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a0c:	f003 0320 	and.w	r3, r3, #32
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d105      	bne.n	8008a20 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008a14:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008a18:	4b5a      	ldr	r3, [pc, #360]	; (8008b84 <HAL_UART_IRQHandler+0x2b0>)
 8008a1a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d00b      	beq.n	8008a38 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	2208      	movs	r2, #8
 8008a26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a2e:	f043 0208 	orr.w	r2, r3, #8
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d012      	beq.n	8008a6a <HAL_UART_IRQHandler+0x196>
 8008a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d00c      	beq.n	8008a6a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a60:	f043 0220 	orr.w	r2, r3, #32
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f000 823c 	beq.w	8008eee <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a7a:	f003 0320 	and.w	r3, r3, #32
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d013      	beq.n	8008aaa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008a82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a86:	f003 0320 	and.w	r3, r3, #32
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d105      	bne.n	8008a9a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008a8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d007      	beq.n	8008aaa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d003      	beq.n	8008aaa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ab0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008abe:	2b40      	cmp	r3, #64	; 0x40
 8008ac0:	d005      	beq.n	8008ace <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008ac2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ac6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d04f      	beq.n	8008b6e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f001 f814 	bl	8009afc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ade:	2b40      	cmp	r3, #64	; 0x40
 8008ae0:	d141      	bne.n	8008b66 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	3308      	adds	r3, #8
 8008ae8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008af0:	e853 3f00 	ldrex	r3, [r3]
 8008af4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008af8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008afc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	3308      	adds	r3, #8
 8008b0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008b0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008b12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008b1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008b1e:	e841 2300 	strex	r3, r2, [r1]
 8008b22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008b26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d1d9      	bne.n	8008ae2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d013      	beq.n	8008b5e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b3a:	4a14      	ldr	r2, [pc, #80]	; (8008b8c <HAL_UART_IRQHandler+0x2b8>)
 8008b3c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7fc f948 	bl	8004dd8 <HAL_DMA_Abort_IT>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d017      	beq.n	8008b7e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008b58:	4610      	mov	r0, r2
 8008b5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b5c:	e00f      	b.n	8008b7e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 f9da 	bl	8008f18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b64:	e00b      	b.n	8008b7e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 f9d6 	bl	8008f18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b6c:	e007      	b.n	8008b7e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f9d2 	bl	8008f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008b7c:	e1b7      	b.n	8008eee <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b7e:	bf00      	nop
    return;
 8008b80:	e1b5      	b.n	8008eee <HAL_UART_IRQHandler+0x61a>
 8008b82:	bf00      	nop
 8008b84:	10000001 	.word	0x10000001
 8008b88:	04000120 	.word	0x04000120
 8008b8c:	08009bc9 	.word	0x08009bc9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	f040 814a 	bne.w	8008e2e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b9e:	f003 0310 	and.w	r3, r3, #16
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	f000 8143 	beq.w	8008e2e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bac:	f003 0310 	and.w	r3, r3, #16
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	f000 813c 	beq.w	8008e2e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2210      	movs	r2, #16
 8008bbc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bc8:	2b40      	cmp	r3, #64	; 0x40
 8008bca:	f040 80b5 	bne.w	8008d38 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008bda:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	f000 8187 	beq.w	8008ef2 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008bea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	f080 817f 	bcs.w	8008ef2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008bfa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 0320 	and.w	r3, r3, #32
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	f040 8086 	bne.w	8008d1c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c1c:	e853 3f00 	ldrex	r3, [r3]
 8008c20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008c24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	461a      	mov	r2, r3
 8008c36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008c3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008c3e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008c46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008c4a:	e841 2300 	strex	r3, r2, [r1]
 8008c4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008c52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1da      	bne.n	8008c10 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	3308      	adds	r3, #8
 8008c60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c64:	e853 3f00 	ldrex	r3, [r3]
 8008c68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008c6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c6c:	f023 0301 	bic.w	r3, r3, #1
 8008c70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	3308      	adds	r3, #8
 8008c7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008c7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008c82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008c86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008c8a:	e841 2300 	strex	r3, r2, [r1]
 8008c8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008c90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1e1      	bne.n	8008c5a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	3308      	adds	r3, #8
 8008c9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ca0:	e853 3f00 	ldrex	r3, [r3]
 8008ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008ca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	3308      	adds	r3, #8
 8008cb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008cba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008cbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008cc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008cc2:	e841 2300 	strex	r3, r2, [r1]
 8008cc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008cc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d1e3      	bne.n	8008c96 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2220      	movs	r2, #32
 8008cd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ce4:	e853 3f00 	ldrex	r3, [r3]
 8008ce8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cec:	f023 0310 	bic.w	r3, r3, #16
 8008cf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008cfe:	65bb      	str	r3, [r7, #88]	; 0x58
 8008d00:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008d04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d06:	e841 2300 	strex	r3, r2, [r1]
 8008d0a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008d0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1e4      	bne.n	8008cdc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7fc f805 	bl	8004d26 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	4619      	mov	r1, r3
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 f8fb 	bl	8008f2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008d36:	e0dc      	b.n	8008ef2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f000 80ce 	beq.w	8008ef6 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8008d5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	f000 80c9 	beq.w	8008ef6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d6c:	e853 3f00 	ldrex	r3, [r3]
 8008d70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	461a      	mov	r2, r3
 8008d82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008d86:	647b      	str	r3, [r7, #68]	; 0x44
 8008d88:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d8e:	e841 2300 	strex	r3, r2, [r1]
 8008d92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d1e4      	bne.n	8008d64 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	3308      	adds	r3, #8
 8008da0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da4:	e853 3f00 	ldrex	r3, [r3]
 8008da8:	623b      	str	r3, [r7, #32]
   return(result);
 8008daa:	6a3b      	ldr	r3, [r7, #32]
 8008dac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008db0:	f023 0301 	bic.w	r3, r3, #1
 8008db4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	3308      	adds	r3, #8
 8008dbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008dc2:	633a      	str	r2, [r7, #48]	; 0x30
 8008dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dca:	e841 2300 	strex	r3, r2, [r1]
 8008dce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d1e1      	bne.n	8008d9a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2220      	movs	r2, #32
 8008dda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	e853 3f00 	ldrex	r3, [r3]
 8008df6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f023 0310 	bic.w	r3, r3, #16
 8008dfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	461a      	mov	r2, r3
 8008e08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008e0c:	61fb      	str	r3, [r7, #28]
 8008e0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e10:	69b9      	ldr	r1, [r7, #24]
 8008e12:	69fa      	ldr	r2, [r7, #28]
 8008e14:	e841 2300 	strex	r3, r2, [r1]
 8008e18:	617b      	str	r3, [r7, #20]
   return(result);
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d1e4      	bne.n	8008dea <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008e20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008e24:	4619      	mov	r1, r3
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 f880 	bl	8008f2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008e2c:	e063      	b.n	8008ef6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00e      	beq.n	8008e58 <HAL_UART_IRQHandler+0x584>
 8008e3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d008      	beq.n	8008e58 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008e4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f001 fb57 	bl	800a504 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008e56:	e051      	b.n	8008efc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d014      	beq.n	8008e8e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d105      	bne.n	8008e7c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d008      	beq.n	8008e8e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d03a      	beq.n	8008efa <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	4798      	blx	r3
    }
    return;
 8008e8c:	e035      	b.n	8008efa <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d009      	beq.n	8008eae <HAL_UART_IRQHandler+0x5da>
 8008e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d003      	beq.n	8008eae <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 fea4 	bl	8009bf4 <UART_EndTransmit_IT>
    return;
 8008eac:	e026      	b.n	8008efc <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d009      	beq.n	8008ece <HAL_UART_IRQHandler+0x5fa>
 8008eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ebe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d003      	beq.n	8008ece <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f001 fb30 	bl	800a52c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ecc:	e016      	b.n	8008efc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ed2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d010      	beq.n	8008efc <HAL_UART_IRQHandler+0x628>
 8008eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	da0c      	bge.n	8008efc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f001 fb18 	bl	800a518 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ee8:	e008      	b.n	8008efc <HAL_UART_IRQHandler+0x628>
      return;
 8008eea:	bf00      	nop
 8008eec:	e006      	b.n	8008efc <HAL_UART_IRQHandler+0x628>
    return;
 8008eee:	bf00      	nop
 8008ef0:	e004      	b.n	8008efc <HAL_UART_IRQHandler+0x628>
      return;
 8008ef2:	bf00      	nop
 8008ef4:	e002      	b.n	8008efc <HAL_UART_IRQHandler+0x628>
      return;
 8008ef6:	bf00      	nop
 8008ef8:	e000      	b.n	8008efc <HAL_UART_IRQHandler+0x628>
    return;
 8008efa:	bf00      	nop
  }
}
 8008efc:	37e8      	adds	r7, #232	; 0xe8
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop

08008f04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008f0c:	bf00      	nop
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008f20:	bf00      	nop
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	460b      	mov	r3, r1
 8008f36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008f38:	bf00      	nop
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f48:	b08c      	sub	sp, #48	; 0x30
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	689a      	ldr	r2, [r3, #8]
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	431a      	orrs	r2, r3
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	695b      	ldr	r3, [r3, #20]
 8008f62:	431a      	orrs	r2, r3
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	69db      	ldr	r3, [r3, #28]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	4baa      	ldr	r3, [pc, #680]	; (800921c <UART_SetConfig+0x2d8>)
 8008f74:	4013      	ands	r3, r2
 8008f76:	697a      	ldr	r2, [r7, #20]
 8008f78:	6812      	ldr	r2, [r2, #0]
 8008f7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f7c:	430b      	orrs	r3, r1
 8008f7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	68da      	ldr	r2, [r3, #12]
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	430a      	orrs	r2, r1
 8008f94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	699b      	ldr	r3, [r3, #24]
 8008f9a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a9f      	ldr	r2, [pc, #636]	; (8009220 <UART_SetConfig+0x2dc>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d004      	beq.n	8008fb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	6a1b      	ldr	r3, [r3, #32]
 8008faa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fac:	4313      	orrs	r3, r2
 8008fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008fba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008fbe:	697a      	ldr	r2, [r7, #20]
 8008fc0:	6812      	ldr	r2, [r2, #0]
 8008fc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008fc4:	430b      	orrs	r3, r1
 8008fc6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fce:	f023 010f 	bic.w	r1, r3, #15
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	430a      	orrs	r2, r1
 8008fdc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a90      	ldr	r2, [pc, #576]	; (8009224 <UART_SetConfig+0x2e0>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d125      	bne.n	8009034 <UART_SetConfig+0xf0>
 8008fe8:	4b8f      	ldr	r3, [pc, #572]	; (8009228 <UART_SetConfig+0x2e4>)
 8008fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fee:	f003 0303 	and.w	r3, r3, #3
 8008ff2:	2b03      	cmp	r3, #3
 8008ff4:	d81a      	bhi.n	800902c <UART_SetConfig+0xe8>
 8008ff6:	a201      	add	r2, pc, #4	; (adr r2, 8008ffc <UART_SetConfig+0xb8>)
 8008ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ffc:	0800900d 	.word	0x0800900d
 8009000:	0800901d 	.word	0x0800901d
 8009004:	08009015 	.word	0x08009015
 8009008:	08009025 	.word	0x08009025
 800900c:	2301      	movs	r3, #1
 800900e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009012:	e116      	b.n	8009242 <UART_SetConfig+0x2fe>
 8009014:	2302      	movs	r3, #2
 8009016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800901a:	e112      	b.n	8009242 <UART_SetConfig+0x2fe>
 800901c:	2304      	movs	r3, #4
 800901e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009022:	e10e      	b.n	8009242 <UART_SetConfig+0x2fe>
 8009024:	2308      	movs	r3, #8
 8009026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800902a:	e10a      	b.n	8009242 <UART_SetConfig+0x2fe>
 800902c:	2310      	movs	r3, #16
 800902e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009032:	e106      	b.n	8009242 <UART_SetConfig+0x2fe>
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a7c      	ldr	r2, [pc, #496]	; (800922c <UART_SetConfig+0x2e8>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d138      	bne.n	80090b0 <UART_SetConfig+0x16c>
 800903e:	4b7a      	ldr	r3, [pc, #488]	; (8009228 <UART_SetConfig+0x2e4>)
 8009040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009044:	f003 030c 	and.w	r3, r3, #12
 8009048:	2b0c      	cmp	r3, #12
 800904a:	d82d      	bhi.n	80090a8 <UART_SetConfig+0x164>
 800904c:	a201      	add	r2, pc, #4	; (adr r2, 8009054 <UART_SetConfig+0x110>)
 800904e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009052:	bf00      	nop
 8009054:	08009089 	.word	0x08009089
 8009058:	080090a9 	.word	0x080090a9
 800905c:	080090a9 	.word	0x080090a9
 8009060:	080090a9 	.word	0x080090a9
 8009064:	08009099 	.word	0x08009099
 8009068:	080090a9 	.word	0x080090a9
 800906c:	080090a9 	.word	0x080090a9
 8009070:	080090a9 	.word	0x080090a9
 8009074:	08009091 	.word	0x08009091
 8009078:	080090a9 	.word	0x080090a9
 800907c:	080090a9 	.word	0x080090a9
 8009080:	080090a9 	.word	0x080090a9
 8009084:	080090a1 	.word	0x080090a1
 8009088:	2300      	movs	r3, #0
 800908a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800908e:	e0d8      	b.n	8009242 <UART_SetConfig+0x2fe>
 8009090:	2302      	movs	r3, #2
 8009092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009096:	e0d4      	b.n	8009242 <UART_SetConfig+0x2fe>
 8009098:	2304      	movs	r3, #4
 800909a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800909e:	e0d0      	b.n	8009242 <UART_SetConfig+0x2fe>
 80090a0:	2308      	movs	r3, #8
 80090a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80090a6:	e0cc      	b.n	8009242 <UART_SetConfig+0x2fe>
 80090a8:	2310      	movs	r3, #16
 80090aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80090ae:	e0c8      	b.n	8009242 <UART_SetConfig+0x2fe>
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a5e      	ldr	r2, [pc, #376]	; (8009230 <UART_SetConfig+0x2ec>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d125      	bne.n	8009106 <UART_SetConfig+0x1c2>
 80090ba:	4b5b      	ldr	r3, [pc, #364]	; (8009228 <UART_SetConfig+0x2e4>)
 80090bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80090c4:	2b30      	cmp	r3, #48	; 0x30
 80090c6:	d016      	beq.n	80090f6 <UART_SetConfig+0x1b2>
 80090c8:	2b30      	cmp	r3, #48	; 0x30
 80090ca:	d818      	bhi.n	80090fe <UART_SetConfig+0x1ba>
 80090cc:	2b20      	cmp	r3, #32
 80090ce:	d00a      	beq.n	80090e6 <UART_SetConfig+0x1a2>
 80090d0:	2b20      	cmp	r3, #32
 80090d2:	d814      	bhi.n	80090fe <UART_SetConfig+0x1ba>
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d002      	beq.n	80090de <UART_SetConfig+0x19a>
 80090d8:	2b10      	cmp	r3, #16
 80090da:	d008      	beq.n	80090ee <UART_SetConfig+0x1aa>
 80090dc:	e00f      	b.n	80090fe <UART_SetConfig+0x1ba>
 80090de:	2300      	movs	r3, #0
 80090e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80090e4:	e0ad      	b.n	8009242 <UART_SetConfig+0x2fe>
 80090e6:	2302      	movs	r3, #2
 80090e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80090ec:	e0a9      	b.n	8009242 <UART_SetConfig+0x2fe>
 80090ee:	2304      	movs	r3, #4
 80090f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80090f4:	e0a5      	b.n	8009242 <UART_SetConfig+0x2fe>
 80090f6:	2308      	movs	r3, #8
 80090f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80090fc:	e0a1      	b.n	8009242 <UART_SetConfig+0x2fe>
 80090fe:	2310      	movs	r3, #16
 8009100:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009104:	e09d      	b.n	8009242 <UART_SetConfig+0x2fe>
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a4a      	ldr	r2, [pc, #296]	; (8009234 <UART_SetConfig+0x2f0>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d125      	bne.n	800915c <UART_SetConfig+0x218>
 8009110:	4b45      	ldr	r3, [pc, #276]	; (8009228 <UART_SetConfig+0x2e4>)
 8009112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009116:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800911a:	2bc0      	cmp	r3, #192	; 0xc0
 800911c:	d016      	beq.n	800914c <UART_SetConfig+0x208>
 800911e:	2bc0      	cmp	r3, #192	; 0xc0
 8009120:	d818      	bhi.n	8009154 <UART_SetConfig+0x210>
 8009122:	2b80      	cmp	r3, #128	; 0x80
 8009124:	d00a      	beq.n	800913c <UART_SetConfig+0x1f8>
 8009126:	2b80      	cmp	r3, #128	; 0x80
 8009128:	d814      	bhi.n	8009154 <UART_SetConfig+0x210>
 800912a:	2b00      	cmp	r3, #0
 800912c:	d002      	beq.n	8009134 <UART_SetConfig+0x1f0>
 800912e:	2b40      	cmp	r3, #64	; 0x40
 8009130:	d008      	beq.n	8009144 <UART_SetConfig+0x200>
 8009132:	e00f      	b.n	8009154 <UART_SetConfig+0x210>
 8009134:	2300      	movs	r3, #0
 8009136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800913a:	e082      	b.n	8009242 <UART_SetConfig+0x2fe>
 800913c:	2302      	movs	r3, #2
 800913e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009142:	e07e      	b.n	8009242 <UART_SetConfig+0x2fe>
 8009144:	2304      	movs	r3, #4
 8009146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800914a:	e07a      	b.n	8009242 <UART_SetConfig+0x2fe>
 800914c:	2308      	movs	r3, #8
 800914e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009152:	e076      	b.n	8009242 <UART_SetConfig+0x2fe>
 8009154:	2310      	movs	r3, #16
 8009156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800915a:	e072      	b.n	8009242 <UART_SetConfig+0x2fe>
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a35      	ldr	r2, [pc, #212]	; (8009238 <UART_SetConfig+0x2f4>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d12a      	bne.n	80091bc <UART_SetConfig+0x278>
 8009166:	4b30      	ldr	r3, [pc, #192]	; (8009228 <UART_SetConfig+0x2e4>)
 8009168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800916c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009170:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009174:	d01a      	beq.n	80091ac <UART_SetConfig+0x268>
 8009176:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800917a:	d81b      	bhi.n	80091b4 <UART_SetConfig+0x270>
 800917c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009180:	d00c      	beq.n	800919c <UART_SetConfig+0x258>
 8009182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009186:	d815      	bhi.n	80091b4 <UART_SetConfig+0x270>
 8009188:	2b00      	cmp	r3, #0
 800918a:	d003      	beq.n	8009194 <UART_SetConfig+0x250>
 800918c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009190:	d008      	beq.n	80091a4 <UART_SetConfig+0x260>
 8009192:	e00f      	b.n	80091b4 <UART_SetConfig+0x270>
 8009194:	2300      	movs	r3, #0
 8009196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800919a:	e052      	b.n	8009242 <UART_SetConfig+0x2fe>
 800919c:	2302      	movs	r3, #2
 800919e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091a2:	e04e      	b.n	8009242 <UART_SetConfig+0x2fe>
 80091a4:	2304      	movs	r3, #4
 80091a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091aa:	e04a      	b.n	8009242 <UART_SetConfig+0x2fe>
 80091ac:	2308      	movs	r3, #8
 80091ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091b2:	e046      	b.n	8009242 <UART_SetConfig+0x2fe>
 80091b4:	2310      	movs	r3, #16
 80091b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091ba:	e042      	b.n	8009242 <UART_SetConfig+0x2fe>
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a17      	ldr	r2, [pc, #92]	; (8009220 <UART_SetConfig+0x2dc>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d13a      	bne.n	800923c <UART_SetConfig+0x2f8>
 80091c6:	4b18      	ldr	r3, [pc, #96]	; (8009228 <UART_SetConfig+0x2e4>)
 80091c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80091d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80091d4:	d01a      	beq.n	800920c <UART_SetConfig+0x2c8>
 80091d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80091da:	d81b      	bhi.n	8009214 <UART_SetConfig+0x2d0>
 80091dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091e0:	d00c      	beq.n	80091fc <UART_SetConfig+0x2b8>
 80091e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091e6:	d815      	bhi.n	8009214 <UART_SetConfig+0x2d0>
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d003      	beq.n	80091f4 <UART_SetConfig+0x2b0>
 80091ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091f0:	d008      	beq.n	8009204 <UART_SetConfig+0x2c0>
 80091f2:	e00f      	b.n	8009214 <UART_SetConfig+0x2d0>
 80091f4:	2300      	movs	r3, #0
 80091f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091fa:	e022      	b.n	8009242 <UART_SetConfig+0x2fe>
 80091fc:	2302      	movs	r3, #2
 80091fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009202:	e01e      	b.n	8009242 <UART_SetConfig+0x2fe>
 8009204:	2304      	movs	r3, #4
 8009206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800920a:	e01a      	b.n	8009242 <UART_SetConfig+0x2fe>
 800920c:	2308      	movs	r3, #8
 800920e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009212:	e016      	b.n	8009242 <UART_SetConfig+0x2fe>
 8009214:	2310      	movs	r3, #16
 8009216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800921a:	e012      	b.n	8009242 <UART_SetConfig+0x2fe>
 800921c:	cfff69f3 	.word	0xcfff69f3
 8009220:	40008000 	.word	0x40008000
 8009224:	40013800 	.word	0x40013800
 8009228:	40021000 	.word	0x40021000
 800922c:	40004400 	.word	0x40004400
 8009230:	40004800 	.word	0x40004800
 8009234:	40004c00 	.word	0x40004c00
 8009238:	40005000 	.word	0x40005000
 800923c:	2310      	movs	r3, #16
 800923e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4aae      	ldr	r2, [pc, #696]	; (8009500 <UART_SetConfig+0x5bc>)
 8009248:	4293      	cmp	r3, r2
 800924a:	f040 8097 	bne.w	800937c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800924e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009252:	2b08      	cmp	r3, #8
 8009254:	d823      	bhi.n	800929e <UART_SetConfig+0x35a>
 8009256:	a201      	add	r2, pc, #4	; (adr r2, 800925c <UART_SetConfig+0x318>)
 8009258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925c:	08009281 	.word	0x08009281
 8009260:	0800929f 	.word	0x0800929f
 8009264:	08009289 	.word	0x08009289
 8009268:	0800929f 	.word	0x0800929f
 800926c:	0800928f 	.word	0x0800928f
 8009270:	0800929f 	.word	0x0800929f
 8009274:	0800929f 	.word	0x0800929f
 8009278:	0800929f 	.word	0x0800929f
 800927c:	08009297 	.word	0x08009297
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009280:	f7fc fe94 	bl	8005fac <HAL_RCC_GetPCLK1Freq>
 8009284:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009286:	e010      	b.n	80092aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009288:	4b9e      	ldr	r3, [pc, #632]	; (8009504 <UART_SetConfig+0x5c0>)
 800928a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800928c:	e00d      	b.n	80092aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800928e:	f7fc fe1f 	bl	8005ed0 <HAL_RCC_GetSysClockFreq>
 8009292:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009294:	e009      	b.n	80092aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800929a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800929c:	e005      	b.n	80092aa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800929e:	2300      	movs	r3, #0
 80092a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80092a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80092aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f000 8130 	beq.w	8009512 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b6:	4a94      	ldr	r2, [pc, #592]	; (8009508 <UART_SetConfig+0x5c4>)
 80092b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092bc:	461a      	mov	r2, r3
 80092be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80092c4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	685a      	ldr	r2, [r3, #4]
 80092ca:	4613      	mov	r3, r2
 80092cc:	005b      	lsls	r3, r3, #1
 80092ce:	4413      	add	r3, r2
 80092d0:	69ba      	ldr	r2, [r7, #24]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d305      	bcc.n	80092e2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092dc:	69ba      	ldr	r2, [r7, #24]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d903      	bls.n	80092ea <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80092e8:	e113      	b.n	8009512 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ec:	2200      	movs	r2, #0
 80092ee:	60bb      	str	r3, [r7, #8]
 80092f0:	60fa      	str	r2, [r7, #12]
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f6:	4a84      	ldr	r2, [pc, #528]	; (8009508 <UART_SetConfig+0x5c4>)
 80092f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	2200      	movs	r2, #0
 8009300:	603b      	str	r3, [r7, #0]
 8009302:	607a      	str	r2, [r7, #4]
 8009304:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009308:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800930c:	f7f7 fcd4 	bl	8000cb8 <__aeabi_uldivmod>
 8009310:	4602      	mov	r2, r0
 8009312:	460b      	mov	r3, r1
 8009314:	4610      	mov	r0, r2
 8009316:	4619      	mov	r1, r3
 8009318:	f04f 0200 	mov.w	r2, #0
 800931c:	f04f 0300 	mov.w	r3, #0
 8009320:	020b      	lsls	r3, r1, #8
 8009322:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009326:	0202      	lsls	r2, r0, #8
 8009328:	6979      	ldr	r1, [r7, #20]
 800932a:	6849      	ldr	r1, [r1, #4]
 800932c:	0849      	lsrs	r1, r1, #1
 800932e:	2000      	movs	r0, #0
 8009330:	460c      	mov	r4, r1
 8009332:	4605      	mov	r5, r0
 8009334:	eb12 0804 	adds.w	r8, r2, r4
 8009338:	eb43 0905 	adc.w	r9, r3, r5
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	469a      	mov	sl, r3
 8009344:	4693      	mov	fp, r2
 8009346:	4652      	mov	r2, sl
 8009348:	465b      	mov	r3, fp
 800934a:	4640      	mov	r0, r8
 800934c:	4649      	mov	r1, r9
 800934e:	f7f7 fcb3 	bl	8000cb8 <__aeabi_uldivmod>
 8009352:	4602      	mov	r2, r0
 8009354:	460b      	mov	r3, r1
 8009356:	4613      	mov	r3, r2
 8009358:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800935a:	6a3b      	ldr	r3, [r7, #32]
 800935c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009360:	d308      	bcc.n	8009374 <UART_SetConfig+0x430>
 8009362:	6a3b      	ldr	r3, [r7, #32]
 8009364:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009368:	d204      	bcs.n	8009374 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	6a3a      	ldr	r2, [r7, #32]
 8009370:	60da      	str	r2, [r3, #12]
 8009372:	e0ce      	b.n	8009512 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800937a:	e0ca      	b.n	8009512 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	69db      	ldr	r3, [r3, #28]
 8009380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009384:	d166      	bne.n	8009454 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009386:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800938a:	2b08      	cmp	r3, #8
 800938c:	d827      	bhi.n	80093de <UART_SetConfig+0x49a>
 800938e:	a201      	add	r2, pc, #4	; (adr r2, 8009394 <UART_SetConfig+0x450>)
 8009390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009394:	080093b9 	.word	0x080093b9
 8009398:	080093c1 	.word	0x080093c1
 800939c:	080093c9 	.word	0x080093c9
 80093a0:	080093df 	.word	0x080093df
 80093a4:	080093cf 	.word	0x080093cf
 80093a8:	080093df 	.word	0x080093df
 80093ac:	080093df 	.word	0x080093df
 80093b0:	080093df 	.word	0x080093df
 80093b4:	080093d7 	.word	0x080093d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093b8:	f7fc fdf8 	bl	8005fac <HAL_RCC_GetPCLK1Freq>
 80093bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80093be:	e014      	b.n	80093ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093c0:	f7fc fe0a 	bl	8005fd8 <HAL_RCC_GetPCLK2Freq>
 80093c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80093c6:	e010      	b.n	80093ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093c8:	4b4e      	ldr	r3, [pc, #312]	; (8009504 <UART_SetConfig+0x5c0>)
 80093ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80093cc:	e00d      	b.n	80093ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093ce:	f7fc fd7f 	bl	8005ed0 <HAL_RCC_GetSysClockFreq>
 80093d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80093d4:	e009      	b.n	80093ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80093dc:	e005      	b.n	80093ea <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80093de:	2300      	movs	r3, #0
 80093e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80093e2:	2301      	movs	r3, #1
 80093e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80093e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80093ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	f000 8090 	beq.w	8009512 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f6:	4a44      	ldr	r2, [pc, #272]	; (8009508 <UART_SetConfig+0x5c4>)
 80093f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093fc:	461a      	mov	r2, r3
 80093fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009400:	fbb3 f3f2 	udiv	r3, r3, r2
 8009404:	005a      	lsls	r2, r3, #1
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	085b      	lsrs	r3, r3, #1
 800940c:	441a      	add	r2, r3
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	fbb2 f3f3 	udiv	r3, r2, r3
 8009416:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009418:	6a3b      	ldr	r3, [r7, #32]
 800941a:	2b0f      	cmp	r3, #15
 800941c:	d916      	bls.n	800944c <UART_SetConfig+0x508>
 800941e:	6a3b      	ldr	r3, [r7, #32]
 8009420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009424:	d212      	bcs.n	800944c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009426:	6a3b      	ldr	r3, [r7, #32]
 8009428:	b29b      	uxth	r3, r3
 800942a:	f023 030f 	bic.w	r3, r3, #15
 800942e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009430:	6a3b      	ldr	r3, [r7, #32]
 8009432:	085b      	lsrs	r3, r3, #1
 8009434:	b29b      	uxth	r3, r3
 8009436:	f003 0307 	and.w	r3, r3, #7
 800943a:	b29a      	uxth	r2, r3
 800943c:	8bfb      	ldrh	r3, [r7, #30]
 800943e:	4313      	orrs	r3, r2
 8009440:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	8bfa      	ldrh	r2, [r7, #30]
 8009448:	60da      	str	r2, [r3, #12]
 800944a:	e062      	b.n	8009512 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800944c:	2301      	movs	r3, #1
 800944e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009452:	e05e      	b.n	8009512 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009454:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009458:	2b08      	cmp	r3, #8
 800945a:	d828      	bhi.n	80094ae <UART_SetConfig+0x56a>
 800945c:	a201      	add	r2, pc, #4	; (adr r2, 8009464 <UART_SetConfig+0x520>)
 800945e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009462:	bf00      	nop
 8009464:	08009489 	.word	0x08009489
 8009468:	08009491 	.word	0x08009491
 800946c:	08009499 	.word	0x08009499
 8009470:	080094af 	.word	0x080094af
 8009474:	0800949f 	.word	0x0800949f
 8009478:	080094af 	.word	0x080094af
 800947c:	080094af 	.word	0x080094af
 8009480:	080094af 	.word	0x080094af
 8009484:	080094a7 	.word	0x080094a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009488:	f7fc fd90 	bl	8005fac <HAL_RCC_GetPCLK1Freq>
 800948c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800948e:	e014      	b.n	80094ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009490:	f7fc fda2 	bl	8005fd8 <HAL_RCC_GetPCLK2Freq>
 8009494:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009496:	e010      	b.n	80094ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009498:	4b1a      	ldr	r3, [pc, #104]	; (8009504 <UART_SetConfig+0x5c0>)
 800949a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800949c:	e00d      	b.n	80094ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800949e:	f7fc fd17 	bl	8005ed0 <HAL_RCC_GetSysClockFreq>
 80094a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80094a4:	e009      	b.n	80094ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80094ac:	e005      	b.n	80094ba <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80094ae:	2300      	movs	r3, #0
 80094b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80094b2:	2301      	movs	r3, #1
 80094b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80094b8:	bf00      	nop
    }

    if (pclk != 0U)
 80094ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d028      	beq.n	8009512 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c4:	4a10      	ldr	r2, [pc, #64]	; (8009508 <UART_SetConfig+0x5c4>)
 80094c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094ca:	461a      	mov	r2, r3
 80094cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	085b      	lsrs	r3, r3, #1
 80094d8:	441a      	add	r2, r3
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	fbb2 f3f3 	udiv	r3, r2, r3
 80094e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094e4:	6a3b      	ldr	r3, [r7, #32]
 80094e6:	2b0f      	cmp	r3, #15
 80094e8:	d910      	bls.n	800950c <UART_SetConfig+0x5c8>
 80094ea:	6a3b      	ldr	r3, [r7, #32]
 80094ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094f0:	d20c      	bcs.n	800950c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80094f2:	6a3b      	ldr	r3, [r7, #32]
 80094f4:	b29a      	uxth	r2, r3
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	60da      	str	r2, [r3, #12]
 80094fc:	e009      	b.n	8009512 <UART_SetConfig+0x5ce>
 80094fe:	bf00      	nop
 8009500:	40008000 	.word	0x40008000
 8009504:	00f42400 	.word	0x00f42400
 8009508:	0800d740 	.word	0x0800d740
      }
      else
      {
        ret = HAL_ERROR;
 800950c:	2301      	movs	r3, #1
 800950e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	2201      	movs	r2, #1
 8009516:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	2201      	movs	r2, #1
 800951e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	2200      	movs	r2, #0
 8009526:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	2200      	movs	r2, #0
 800952c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800952e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009532:	4618      	mov	r0, r3
 8009534:	3730      	adds	r7, #48	; 0x30
 8009536:	46bd      	mov	sp, r7
 8009538:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800953c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009548:	f003 0301 	and.w	r3, r3, #1
 800954c:	2b00      	cmp	r3, #0
 800954e:	d00a      	beq.n	8009566 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	430a      	orrs	r2, r1
 8009564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800956a:	f003 0302 	and.w	r3, r3, #2
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00a      	beq.n	8009588 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	430a      	orrs	r2, r1
 8009586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800958c:	f003 0304 	and.w	r3, r3, #4
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00a      	beq.n	80095aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	430a      	orrs	r2, r1
 80095a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ae:	f003 0308 	and.w	r3, r3, #8
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00a      	beq.n	80095cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	430a      	orrs	r2, r1
 80095ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d0:	f003 0310 	and.w	r3, r3, #16
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d00a      	beq.n	80095ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	430a      	orrs	r2, r1
 80095ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f2:	f003 0320 	and.w	r3, r3, #32
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d00a      	beq.n	8009610 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	430a      	orrs	r2, r1
 800960e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009618:	2b00      	cmp	r3, #0
 800961a:	d01a      	beq.n	8009652 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	430a      	orrs	r2, r1
 8009630:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009636:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800963a:	d10a      	bne.n	8009652 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	430a      	orrs	r2, r1
 8009650:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00a      	beq.n	8009674 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	430a      	orrs	r2, r1
 8009672:	605a      	str	r2, [r3, #4]
  }
}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b086      	sub	sp, #24
 8009684:	af02      	add	r7, sp, #8
 8009686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009690:	f7f9 f946 	bl	8002920 <HAL_GetTick>
 8009694:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f003 0308 	and.w	r3, r3, #8
 80096a0:	2b08      	cmp	r3, #8
 80096a2:	d10e      	bne.n	80096c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80096a8:	9300      	str	r3, [sp, #0]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 f82f 	bl	8009716 <UART_WaitOnFlagUntilTimeout>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d001      	beq.n	80096c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096be:	2303      	movs	r3, #3
 80096c0:	e025      	b.n	800970e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f003 0304 	and.w	r3, r3, #4
 80096cc:	2b04      	cmp	r3, #4
 80096ce:	d10e      	bne.n	80096ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80096d4:	9300      	str	r3, [sp, #0]
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2200      	movs	r2, #0
 80096da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 f819 	bl	8009716 <UART_WaitOnFlagUntilTimeout>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d001      	beq.n	80096ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096ea:	2303      	movs	r3, #3
 80096ec:	e00f      	b.n	800970e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2220      	movs	r2, #32
 80096f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2220      	movs	r2, #32
 80096fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b09c      	sub	sp, #112	; 0x70
 800971a:	af00      	add	r7, sp, #0
 800971c:	60f8      	str	r0, [r7, #12]
 800971e:	60b9      	str	r1, [r7, #8]
 8009720:	603b      	str	r3, [r7, #0]
 8009722:	4613      	mov	r3, r2
 8009724:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009726:	e0a9      	b.n	800987c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009728:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800972a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800972e:	f000 80a5 	beq.w	800987c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009732:	f7f9 f8f5 	bl	8002920 <HAL_GetTick>
 8009736:	4602      	mov	r2, r0
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	1ad3      	subs	r3, r2, r3
 800973c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800973e:	429a      	cmp	r2, r3
 8009740:	d302      	bcc.n	8009748 <UART_WaitOnFlagUntilTimeout+0x32>
 8009742:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009744:	2b00      	cmp	r3, #0
 8009746:	d140      	bne.n	80097ca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800974e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009750:	e853 3f00 	ldrex	r3, [r3]
 8009754:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009758:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800975c:	667b      	str	r3, [r7, #100]	; 0x64
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	461a      	mov	r2, r3
 8009764:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009766:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009768:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800976a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800976c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800976e:	e841 2300 	strex	r3, r2, [r1]
 8009772:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009776:	2b00      	cmp	r3, #0
 8009778:	d1e6      	bne.n	8009748 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	3308      	adds	r3, #8
 8009780:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009784:	e853 3f00 	ldrex	r3, [r3]
 8009788:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800978a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978c:	f023 0301 	bic.w	r3, r3, #1
 8009790:	663b      	str	r3, [r7, #96]	; 0x60
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	3308      	adds	r3, #8
 8009798:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800979a:	64ba      	str	r2, [r7, #72]	; 0x48
 800979c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80097a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097a2:	e841 2300 	strex	r3, r2, [r1]
 80097a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80097a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d1e5      	bne.n	800977a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2220      	movs	r2, #32
 80097b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2220      	movs	r2, #32
 80097ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2200      	movs	r2, #0
 80097c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80097c6:	2303      	movs	r3, #3
 80097c8:	e069      	b.n	800989e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f003 0304 	and.w	r3, r3, #4
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d051      	beq.n	800987c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	69db      	ldr	r3, [r3, #28]
 80097de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097e6:	d149      	bne.n	800987c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80097f0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fa:	e853 3f00 	ldrex	r3, [r3]
 80097fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009802:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009806:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	461a      	mov	r2, r3
 800980e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009810:	637b      	str	r3, [r7, #52]	; 0x34
 8009812:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009814:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009818:	e841 2300 	strex	r3, r2, [r1]
 800981c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800981e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009820:	2b00      	cmp	r3, #0
 8009822:	d1e6      	bne.n	80097f2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	3308      	adds	r3, #8
 800982a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	e853 3f00 	ldrex	r3, [r3]
 8009832:	613b      	str	r3, [r7, #16]
   return(result);
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	f023 0301 	bic.w	r3, r3, #1
 800983a:	66bb      	str	r3, [r7, #104]	; 0x68
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	3308      	adds	r3, #8
 8009842:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009844:	623a      	str	r2, [r7, #32]
 8009846:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009848:	69f9      	ldr	r1, [r7, #28]
 800984a:	6a3a      	ldr	r2, [r7, #32]
 800984c:	e841 2300 	strex	r3, r2, [r1]
 8009850:	61bb      	str	r3, [r7, #24]
   return(result);
 8009852:	69bb      	ldr	r3, [r7, #24]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d1e5      	bne.n	8009824 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2220      	movs	r2, #32
 800985c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2220      	movs	r2, #32
 8009864:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2220      	movs	r2, #32
 800986c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2200      	movs	r2, #0
 8009874:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009878:	2303      	movs	r3, #3
 800987a:	e010      	b.n	800989e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	69da      	ldr	r2, [r3, #28]
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	4013      	ands	r3, r2
 8009886:	68ba      	ldr	r2, [r7, #8]
 8009888:	429a      	cmp	r2, r3
 800988a:	bf0c      	ite	eq
 800988c:	2301      	moveq	r3, #1
 800988e:	2300      	movne	r3, #0
 8009890:	b2db      	uxtb	r3, r3
 8009892:	461a      	mov	r2, r3
 8009894:	79fb      	ldrb	r3, [r7, #7]
 8009896:	429a      	cmp	r2, r3
 8009898:	f43f af46 	beq.w	8009728 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800989c:	2300      	movs	r3, #0
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3770      	adds	r7, #112	; 0x70
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
	...

080098a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b0a3      	sub	sp, #140	; 0x8c
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	4613      	mov	r3, r2
 80098b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	68ba      	ldr	r2, [r7, #8]
 80098ba:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	88fa      	ldrh	r2, [r7, #6]
 80098c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	88fa      	ldrh	r2, [r7, #6]
 80098c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2200      	movs	r2, #0
 80098d0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098da:	d10e      	bne.n	80098fa <UART_Start_Receive_IT+0x52>
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d105      	bne.n	80098f0 <UART_Start_Receive_IT+0x48>
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80098ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80098ee:	e02d      	b.n	800994c <UART_Start_Receive_IT+0xa4>
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	22ff      	movs	r2, #255	; 0xff
 80098f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80098f8:	e028      	b.n	800994c <UART_Start_Receive_IT+0xa4>
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	689b      	ldr	r3, [r3, #8]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d10d      	bne.n	800991e <UART_Start_Receive_IT+0x76>
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	691b      	ldr	r3, [r3, #16]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d104      	bne.n	8009914 <UART_Start_Receive_IT+0x6c>
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	22ff      	movs	r2, #255	; 0xff
 800990e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009912:	e01b      	b.n	800994c <UART_Start_Receive_IT+0xa4>
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	227f      	movs	r2, #127	; 0x7f
 8009918:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800991c:	e016      	b.n	800994c <UART_Start_Receive_IT+0xa4>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009926:	d10d      	bne.n	8009944 <UART_Start_Receive_IT+0x9c>
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d104      	bne.n	800993a <UART_Start_Receive_IT+0x92>
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	227f      	movs	r2, #127	; 0x7f
 8009934:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009938:	e008      	b.n	800994c <UART_Start_Receive_IT+0xa4>
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	223f      	movs	r2, #63	; 0x3f
 800993e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009942:	e003      	b.n	800994c <UART_Start_Receive_IT+0xa4>
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2200      	movs	r2, #0
 8009948:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2200      	movs	r2, #0
 8009950:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2222      	movs	r2, #34	; 0x22
 8009958:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	3308      	adds	r3, #8
 8009962:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009964:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009966:	e853 3f00 	ldrex	r3, [r3]
 800996a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800996c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800996e:	f043 0301 	orr.w	r3, r3, #1
 8009972:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	3308      	adds	r3, #8
 800997c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009980:	673a      	str	r2, [r7, #112]	; 0x70
 8009982:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009984:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009986:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009988:	e841 2300 	strex	r3, r2, [r1]
 800998c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800998e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009990:	2b00      	cmp	r3, #0
 8009992:	d1e3      	bne.n	800995c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009998:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800999c:	d153      	bne.n	8009a46 <UART_Start_Receive_IT+0x19e>
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80099a4:	88fa      	ldrh	r2, [r7, #6]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d34d      	bcc.n	8009a46 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	689b      	ldr	r3, [r3, #8]
 80099ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099b2:	d107      	bne.n	80099c4 <UART_Start_Receive_IT+0x11c>
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	691b      	ldr	r3, [r3, #16]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d103      	bne.n	80099c4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	4a4b      	ldr	r2, [pc, #300]	; (8009aec <UART_Start_Receive_IT+0x244>)
 80099c0:	671a      	str	r2, [r3, #112]	; 0x70
 80099c2:	e002      	b.n	80099ca <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	4a4a      	ldr	r2, [pc, #296]	; (8009af0 <UART_Start_Receive_IT+0x248>)
 80099c8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	691b      	ldr	r3, [r3, #16]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d01a      	beq.n	8009a10 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099e2:	e853 3f00 	ldrex	r3, [r3]
 80099e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80099e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	461a      	mov	r2, r3
 80099f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80099fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099fe:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a00:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009a02:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009a04:	e841 2300 	strex	r3, r2, [r1]
 8009a08:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d1e4      	bne.n	80099da <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	3308      	adds	r3, #8
 8009a16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a1a:	e853 3f00 	ldrex	r3, [r3]
 8009a1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a26:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	3308      	adds	r3, #8
 8009a2e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009a30:	64ba      	str	r2, [r7, #72]	; 0x48
 8009a32:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a34:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009a36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a38:	e841 2300 	strex	r3, r2, [r1]
 8009a3c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009a3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d1e5      	bne.n	8009a10 <UART_Start_Receive_IT+0x168>
 8009a44:	e04a      	b.n	8009adc <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a4e:	d107      	bne.n	8009a60 <UART_Start_Receive_IT+0x1b8>
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	691b      	ldr	r3, [r3, #16]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d103      	bne.n	8009a60 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	4a26      	ldr	r2, [pc, #152]	; (8009af4 <UART_Start_Receive_IT+0x24c>)
 8009a5c:	671a      	str	r2, [r3, #112]	; 0x70
 8009a5e:	e002      	b.n	8009a66 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	4a25      	ldr	r2, [pc, #148]	; (8009af8 <UART_Start_Receive_IT+0x250>)
 8009a64:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	691b      	ldr	r3, [r3, #16]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d019      	beq.n	8009aaa <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7e:	e853 3f00 	ldrex	r3, [r3]
 8009a82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a86:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009a8a:	677b      	str	r3, [r7, #116]	; 0x74
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	461a      	mov	r2, r3
 8009a92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a94:	637b      	str	r3, [r7, #52]	; 0x34
 8009a96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009a9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a9c:	e841 2300 	strex	r3, r2, [r1]
 8009aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d1e6      	bne.n	8009a76 <UART_Start_Receive_IT+0x1ce>
 8009aa8:	e018      	b.n	8009adc <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	e853 3f00 	ldrex	r3, [r3]
 8009ab6:	613b      	str	r3, [r7, #16]
   return(result);
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	f043 0320 	orr.w	r3, r3, #32
 8009abe:	67bb      	str	r3, [r7, #120]	; 0x78
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ac8:	623b      	str	r3, [r7, #32]
 8009aca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009acc:	69f9      	ldr	r1, [r7, #28]
 8009ace:	6a3a      	ldr	r2, [r7, #32]
 8009ad0:	e841 2300 	strex	r3, r2, [r1]
 8009ad4:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ad6:	69bb      	ldr	r3, [r7, #24]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d1e6      	bne.n	8009aaa <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	378c      	adds	r7, #140	; 0x8c
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	0800a205 	.word	0x0800a205
 8009af0:	08009f0d 	.word	0x08009f0d
 8009af4:	08009dab 	.word	0x08009dab
 8009af8:	08009c4b 	.word	0x08009c4b

08009afc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b095      	sub	sp, #84	; 0x54
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b0c:	e853 3f00 	ldrex	r3, [r3]
 8009b10:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	461a      	mov	r2, r3
 8009b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b22:	643b      	str	r3, [r7, #64]	; 0x40
 8009b24:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b2a:	e841 2300 	strex	r3, r2, [r1]
 8009b2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d1e6      	bne.n	8009b04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	3308      	adds	r3, #8
 8009b3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b3e:	6a3b      	ldr	r3, [r7, #32]
 8009b40:	e853 3f00 	ldrex	r3, [r3]
 8009b44:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b4c:	f023 0301 	bic.w	r3, r3, #1
 8009b50:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	3308      	adds	r3, #8
 8009b58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b62:	e841 2300 	strex	r3, r2, [r1]
 8009b66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d1e3      	bne.n	8009b36 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d118      	bne.n	8009ba8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	e853 3f00 	ldrex	r3, [r3]
 8009b82:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	f023 0310 	bic.w	r3, r3, #16
 8009b8a:	647b      	str	r3, [r7, #68]	; 0x44
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	461a      	mov	r2, r3
 8009b92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b94:	61bb      	str	r3, [r7, #24]
 8009b96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b98:	6979      	ldr	r1, [r7, #20]
 8009b9a:	69ba      	ldr	r2, [r7, #24]
 8009b9c:	e841 2300 	strex	r3, r2, [r1]
 8009ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d1e6      	bne.n	8009b76 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2220      	movs	r2, #32
 8009bac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009bbc:	bf00      	nop
 8009bbe:	3754      	adds	r7, #84	; 0x54
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2200      	movs	r2, #0
 8009be2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009be6:	68f8      	ldr	r0, [r7, #12]
 8009be8:	f7ff f996 	bl	8008f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bec:	bf00      	nop
 8009bee:	3710      	adds	r7, #16
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b088      	sub	sp, #32
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	e853 3f00 	ldrex	r3, [r3]
 8009c08:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c10:	61fb      	str	r3, [r7, #28]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	461a      	mov	r2, r3
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	61bb      	str	r3, [r7, #24]
 8009c1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c1e:	6979      	ldr	r1, [r7, #20]
 8009c20:	69ba      	ldr	r2, [r7, #24]
 8009c22:	e841 2300 	strex	r3, r2, [r1]
 8009c26:	613b      	str	r3, [r7, #16]
   return(result);
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d1e6      	bne.n	8009bfc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2220      	movs	r2, #32
 8009c32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f7ff f961 	bl	8008f04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c42:	bf00      	nop
 8009c44:	3720      	adds	r7, #32
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}

08009c4a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009c4a:	b580      	push	{r7, lr}
 8009c4c:	b096      	sub	sp, #88	; 0x58
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009c58:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c62:	2b22      	cmp	r3, #34	; 0x22
 8009c64:	f040 8095 	bne.w	8009d92 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009c72:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009c76:	b2d9      	uxtb	r1, r3
 8009c78:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009c7c:	b2da      	uxtb	r2, r3
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c82:	400a      	ands	r2, r1
 8009c84:	b2d2      	uxtb	r2, r2
 8009c86:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c8c:	1c5a      	adds	r2, r3, #1
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	3b01      	subs	r3, #1
 8009c9c:	b29a      	uxth	r2, r3
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d178      	bne.n	8009da2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb8:	e853 3f00 	ldrex	r3, [r3]
 8009cbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009cc4:	653b      	str	r3, [r7, #80]	; 0x50
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	461a      	mov	r2, r3
 8009ccc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cce:	647b      	str	r3, [r7, #68]	; 0x44
 8009cd0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009cd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009cd6:	e841 2300 	strex	r3, r2, [r1]
 8009cda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d1e6      	bne.n	8009cb0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	3308      	adds	r3, #8
 8009ce8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cec:	e853 3f00 	ldrex	r3, [r3]
 8009cf0:	623b      	str	r3, [r7, #32]
   return(result);
 8009cf2:	6a3b      	ldr	r3, [r7, #32]
 8009cf4:	f023 0301 	bic.w	r3, r3, #1
 8009cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	3308      	adds	r3, #8
 8009d00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d02:	633a      	str	r2, [r7, #48]	; 0x30
 8009d04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d0a:	e841 2300 	strex	r3, r2, [r1]
 8009d0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d1e5      	bne.n	8009ce2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2220      	movs	r2, #32
 8009d1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d12e      	bne.n	8009d8a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	e853 3f00 	ldrex	r3, [r3]
 8009d3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f023 0310 	bic.w	r3, r3, #16
 8009d46:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d50:	61fb      	str	r3, [r7, #28]
 8009d52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d54:	69b9      	ldr	r1, [r7, #24]
 8009d56:	69fa      	ldr	r2, [r7, #28]
 8009d58:	e841 2300 	strex	r3, r2, [r1]
 8009d5c:	617b      	str	r3, [r7, #20]
   return(result);
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d1e6      	bne.n	8009d32 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	69db      	ldr	r3, [r3, #28]
 8009d6a:	f003 0310 	and.w	r3, r3, #16
 8009d6e:	2b10      	cmp	r3, #16
 8009d70:	d103      	bne.n	8009d7a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	2210      	movs	r2, #16
 8009d78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d80:	4619      	mov	r1, r3
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f7ff f8d2 	bl	8008f2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d88:	e00b      	b.n	8009da2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f7f8 fd5e 	bl	800284c <HAL_UART_RxCpltCallback>
}
 8009d90:	e007      	b.n	8009da2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	699a      	ldr	r2, [r3, #24]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f042 0208 	orr.w	r2, r2, #8
 8009da0:	619a      	str	r2, [r3, #24]
}
 8009da2:	bf00      	nop
 8009da4:	3758      	adds	r7, #88	; 0x58
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}

08009daa <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b096      	sub	sp, #88	; 0x58
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009db8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dc2:	2b22      	cmp	r3, #34	; 0x22
 8009dc4:	f040 8095 	bne.w	8009ef2 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dce:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dd6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009dd8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009ddc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009de0:	4013      	ands	r3, r2
 8009de2:	b29a      	uxth	r2, r3
 8009de4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009de6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dec:	1c9a      	adds	r2, r3, #2
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	3b01      	subs	r3, #1
 8009dfc:	b29a      	uxth	r2, r3
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d178      	bne.n	8009f02 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e18:	e853 3f00 	ldrex	r3, [r3]
 8009e1c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e2e:	643b      	str	r3, [r7, #64]	; 0x40
 8009e30:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e36:	e841 2300 	strex	r3, r2, [r1]
 8009e3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d1e6      	bne.n	8009e10 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	3308      	adds	r3, #8
 8009e48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e4a:	6a3b      	ldr	r3, [r7, #32]
 8009e4c:	e853 3f00 	ldrex	r3, [r3]
 8009e50:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e52:	69fb      	ldr	r3, [r7, #28]
 8009e54:	f023 0301 	bic.w	r3, r3, #1
 8009e58:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	3308      	adds	r3, #8
 8009e60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009e64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e6a:	e841 2300 	strex	r3, r2, [r1]
 8009e6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d1e5      	bne.n	8009e42 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2220      	movs	r2, #32
 8009e7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d12e      	bne.n	8009eea <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	e853 3f00 	ldrex	r3, [r3]
 8009e9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	f023 0310 	bic.w	r3, r3, #16
 8009ea6:	647b      	str	r3, [r7, #68]	; 0x44
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	461a      	mov	r2, r3
 8009eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009eb0:	61bb      	str	r3, [r7, #24]
 8009eb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb4:	6979      	ldr	r1, [r7, #20]
 8009eb6:	69ba      	ldr	r2, [r7, #24]
 8009eb8:	e841 2300 	strex	r3, r2, [r1]
 8009ebc:	613b      	str	r3, [r7, #16]
   return(result);
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d1e6      	bne.n	8009e92 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	69db      	ldr	r3, [r3, #28]
 8009eca:	f003 0310 	and.w	r3, r3, #16
 8009ece:	2b10      	cmp	r3, #16
 8009ed0:	d103      	bne.n	8009eda <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	2210      	movs	r2, #16
 8009ed8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f7ff f822 	bl	8008f2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ee8:	e00b      	b.n	8009f02 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f7f8 fcae 	bl	800284c <HAL_UART_RxCpltCallback>
}
 8009ef0:	e007      	b.n	8009f02 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	699a      	ldr	r2, [r3, #24]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f042 0208 	orr.w	r2, r2, #8
 8009f00:	619a      	str	r2, [r3, #24]
}
 8009f02:	bf00      	nop
 8009f04:	3758      	adds	r7, #88	; 0x58
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
	...

08009f0c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b0a6      	sub	sp, #152	; 0x98
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009f1a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	69db      	ldr	r3, [r3, #28]
 8009f24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f42:	2b22      	cmp	r3, #34	; 0x22
 8009f44:	f040 814f 	bne.w	800a1e6 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009f4e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f52:	e0f6      	b.n	800a142 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009f5e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009f62:	b2d9      	uxtb	r1, r3
 8009f64:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009f68:	b2da      	uxtb	r2, r3
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f6e:	400a      	ands	r2, r1
 8009f70:	b2d2      	uxtb	r2, r2
 8009f72:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f78:	1c5a      	adds	r2, r3, #1
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	3b01      	subs	r3, #1
 8009f88:	b29a      	uxth	r2, r3
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	69db      	ldr	r3, [r3, #28]
 8009f96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009f9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009f9e:	f003 0307 	and.w	r3, r3, #7
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d053      	beq.n	800a04e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009fa6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009faa:	f003 0301 	and.w	r3, r3, #1
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d011      	beq.n	8009fd6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009fb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d00b      	beq.n	8009fd6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fcc:	f043 0201 	orr.w	r2, r3, #1
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009fda:	f003 0302 	and.w	r3, r3, #2
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d011      	beq.n	800a006 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009fe2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009fe6:	f003 0301 	and.w	r3, r3, #1
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d00b      	beq.n	800a006 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2202      	movs	r2, #2
 8009ff4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ffc:	f043 0204 	orr.w	r2, r3, #4
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a006:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a00a:	f003 0304 	and.w	r3, r3, #4
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d011      	beq.n	800a036 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a012:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a016:	f003 0301 	and.w	r3, r3, #1
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d00b      	beq.n	800a036 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2204      	movs	r2, #4
 800a024:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a02c:	f043 0202 	orr.w	r2, r3, #2
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d006      	beq.n	800a04e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f7fe ff69 	bl	8008f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a054:	b29b      	uxth	r3, r3
 800a056:	2b00      	cmp	r3, #0
 800a058:	d173      	bne.n	800a142 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a060:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a062:	e853 3f00 	ldrex	r3, [r3]
 800a066:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800a068:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a06a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a06e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	461a      	mov	r2, r3
 800a078:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a07c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a07e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a080:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a082:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a084:	e841 2300 	strex	r3, r2, [r1]
 800a088:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a08a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d1e4      	bne.n	800a05a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	3308      	adds	r3, #8
 800a096:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a09a:	e853 3f00 	ldrex	r3, [r3]
 800a09e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a0a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a0a6:	f023 0301 	bic.w	r3, r3, #1
 800a0aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	3308      	adds	r3, #8
 800a0b2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a0b4:	657a      	str	r2, [r7, #84]	; 0x54
 800a0b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a0ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a0bc:	e841 2300 	strex	r3, r2, [r1]
 800a0c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a0c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d1e3      	bne.n	800a090 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2220      	movs	r2, #32
 800a0cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d12e      	bne.n	800a13c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ec:	e853 3f00 	ldrex	r3, [r3]
 800a0f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f4:	f023 0310 	bic.w	r3, r3, #16
 800a0f8:	67bb      	str	r3, [r7, #120]	; 0x78
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	461a      	mov	r2, r3
 800a100:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a102:	643b      	str	r3, [r7, #64]	; 0x40
 800a104:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a106:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a108:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a10a:	e841 2300 	strex	r3, r2, [r1]
 800a10e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a112:	2b00      	cmp	r3, #0
 800a114:	d1e6      	bne.n	800a0e4 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	69db      	ldr	r3, [r3, #28]
 800a11c:	f003 0310 	and.w	r3, r3, #16
 800a120:	2b10      	cmp	r3, #16
 800a122:	d103      	bne.n	800a12c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	2210      	movs	r2, #16
 800a12a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a132:	4619      	mov	r1, r3
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f7fe fef9 	bl	8008f2c <HAL_UARTEx_RxEventCallback>
 800a13a:	e002      	b.n	800a142 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f7f8 fb85 	bl	800284c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a142:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a146:	2b00      	cmp	r3, #0
 800a148:	d006      	beq.n	800a158 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800a14a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a14e:	f003 0320 	and.w	r3, r3, #32
 800a152:	2b00      	cmp	r3, #0
 800a154:	f47f aefe 	bne.w	8009f54 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a15e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a162:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800a166:	2b00      	cmp	r3, #0
 800a168:	d045      	beq.n	800a1f6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a170:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a174:	429a      	cmp	r2, r3
 800a176:	d23e      	bcs.n	800a1f6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	3308      	adds	r3, #8
 800a17e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a180:	6a3b      	ldr	r3, [r7, #32]
 800a182:	e853 3f00 	ldrex	r3, [r3]
 800a186:	61fb      	str	r3, [r7, #28]
   return(result);
 800a188:	69fb      	ldr	r3, [r7, #28]
 800a18a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a18e:	673b      	str	r3, [r7, #112]	; 0x70
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	3308      	adds	r3, #8
 800a196:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a198:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a19a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a19c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a19e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1a0:	e841 2300 	strex	r3, r2, [r1]
 800a1a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d1e5      	bne.n	800a178 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	4a14      	ldr	r2, [pc, #80]	; (800a200 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800a1b0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	e853 3f00 	ldrex	r3, [r3]
 800a1be:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	f043 0320 	orr.w	r3, r3, #32
 800a1c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1d0:	61bb      	str	r3, [r7, #24]
 800a1d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d4:	6979      	ldr	r1, [r7, #20]
 800a1d6:	69ba      	ldr	r2, [r7, #24]
 800a1d8:	e841 2300 	strex	r3, r2, [r1]
 800a1dc:	613b      	str	r3, [r7, #16]
   return(result);
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d1e6      	bne.n	800a1b2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a1e4:	e007      	b.n	800a1f6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	699a      	ldr	r2, [r3, #24]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f042 0208 	orr.w	r2, r2, #8
 800a1f4:	619a      	str	r2, [r3, #24]
}
 800a1f6:	bf00      	nop
 800a1f8:	3798      	adds	r7, #152	; 0x98
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	08009c4b 	.word	0x08009c4b

0800a204 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b0a8      	sub	sp, #160	; 0xa0
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a212:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	69db      	ldr	r3, [r3, #28]
 800a21c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a23a:	2b22      	cmp	r3, #34	; 0x22
 800a23c:	f040 8153 	bne.w	800a4e6 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a246:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a24a:	e0fa      	b.n	800a442 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a252:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a25a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800a25e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800a262:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a266:	4013      	ands	r3, r2
 800a268:	b29a      	uxth	r2, r3
 800a26a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a26e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a274:	1c9a      	adds	r2, r3, #2
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a280:	b29b      	uxth	r3, r3
 800a282:	3b01      	subs	r3, #1
 800a284:	b29a      	uxth	r2, r3
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	69db      	ldr	r3, [r3, #28]
 800a292:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a296:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a29a:	f003 0307 	and.w	r3, r3, #7
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d053      	beq.n	800a34a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a2a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2a6:	f003 0301 	and.w	r3, r3, #1
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d011      	beq.n	800a2d2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800a2ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a2b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00b      	beq.n	800a2d2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2c8:	f043 0201 	orr.w	r2, r3, #1
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a2d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2d6:	f003 0302 	and.w	r3, r3, #2
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d011      	beq.n	800a302 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a2de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a2e2:	f003 0301 	and.w	r3, r3, #1
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00b      	beq.n	800a302 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	2202      	movs	r2, #2
 800a2f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2f8:	f043 0204 	orr.w	r2, r3, #4
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a302:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a306:	f003 0304 	and.w	r3, r3, #4
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d011      	beq.n	800a332 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a30e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a312:	f003 0301 	and.w	r3, r3, #1
 800a316:	2b00      	cmp	r3, #0
 800a318:	d00b      	beq.n	800a332 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	2204      	movs	r2, #4
 800a320:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a328:	f043 0202 	orr.w	r2, r3, #2
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d006      	beq.n	800a34a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f7fe fdeb 	bl	8008f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a350:	b29b      	uxth	r3, r3
 800a352:	2b00      	cmp	r3, #0
 800a354:	d175      	bne.n	800a442 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a35c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a35e:	e853 3f00 	ldrex	r3, [r3]
 800a362:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a364:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a366:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a36a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	461a      	mov	r2, r3
 800a374:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a378:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a37a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a37c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a37e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a380:	e841 2300 	strex	r3, r2, [r1]
 800a384:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a386:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d1e4      	bne.n	800a356 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	3308      	adds	r3, #8
 800a392:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a396:	e853 3f00 	ldrex	r3, [r3]
 800a39a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a39c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a39e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a3a2:	f023 0301 	bic.w	r3, r3, #1
 800a3a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	3308      	adds	r3, #8
 800a3b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a3b4:	65ba      	str	r2, [r7, #88]	; 0x58
 800a3b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a3ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a3bc:	e841 2300 	strex	r3, r2, [r1]
 800a3c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a3c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d1e1      	bne.n	800a38c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2220      	movs	r2, #32
 800a3cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	d12e      	bne.n	800a43c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ec:	e853 3f00 	ldrex	r3, [r3]
 800a3f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a3f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3f4:	f023 0310 	bic.w	r3, r3, #16
 800a3f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	461a      	mov	r2, r3
 800a400:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a402:	647b      	str	r3, [r7, #68]	; 0x44
 800a404:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a406:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a408:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a40a:	e841 2300 	strex	r3, r2, [r1]
 800a40e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a412:	2b00      	cmp	r3, #0
 800a414:	d1e6      	bne.n	800a3e4 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	69db      	ldr	r3, [r3, #28]
 800a41c:	f003 0310 	and.w	r3, r3, #16
 800a420:	2b10      	cmp	r3, #16
 800a422:	d103      	bne.n	800a42c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	2210      	movs	r2, #16
 800a42a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a432:	4619      	mov	r1, r3
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f7fe fd79 	bl	8008f2c <HAL_UARTEx_RxEventCallback>
 800a43a:	e002      	b.n	800a442 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f7f8 fa05 	bl	800284c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a442:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a446:	2b00      	cmp	r3, #0
 800a448:	d006      	beq.n	800a458 <UART_RxISR_16BIT_FIFOEN+0x254>
 800a44a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a44e:	f003 0320 	and.w	r3, r3, #32
 800a452:	2b00      	cmp	r3, #0
 800a454:	f47f aefa 	bne.w	800a24c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a45e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a462:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800a466:	2b00      	cmp	r3, #0
 800a468:	d045      	beq.n	800a4f6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a470:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800a474:	429a      	cmp	r2, r3
 800a476:	d23e      	bcs.n	800a4f6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	3308      	adds	r3, #8
 800a47e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a482:	e853 3f00 	ldrex	r3, [r3]
 800a486:	623b      	str	r3, [r7, #32]
   return(result);
 800a488:	6a3b      	ldr	r3, [r7, #32]
 800a48a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a48e:	677b      	str	r3, [r7, #116]	; 0x74
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	3308      	adds	r3, #8
 800a496:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a498:	633a      	str	r2, [r7, #48]	; 0x30
 800a49a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a49c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a49e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4a0:	e841 2300 	strex	r3, r2, [r1]
 800a4a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d1e5      	bne.n	800a478 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	4a14      	ldr	r2, [pc, #80]	; (800a500 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800a4b0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	e853 3f00 	ldrex	r3, [r3]
 800a4be:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f043 0320 	orr.w	r3, r3, #32
 800a4c6:	673b      	str	r3, [r7, #112]	; 0x70
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a4d0:	61fb      	str	r3, [r7, #28]
 800a4d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4d4:	69b9      	ldr	r1, [r7, #24]
 800a4d6:	69fa      	ldr	r2, [r7, #28]
 800a4d8:	e841 2300 	strex	r3, r2, [r1]
 800a4dc:	617b      	str	r3, [r7, #20]
   return(result);
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d1e6      	bne.n	800a4b2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a4e4:	e007      	b.n	800a4f6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	699a      	ldr	r2, [r3, #24]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f042 0208 	orr.w	r2, r2, #8
 800a4f4:	619a      	str	r2, [r3, #24]
}
 800a4f6:	bf00      	nop
 800a4f8:	37a0      	adds	r7, #160	; 0xa0
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	08009dab 	.word	0x08009dab

0800a504 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a50c:	bf00      	nop
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a520:	bf00      	nop
 800a522:	370c      	adds	r7, #12
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr

0800a52c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b083      	sub	sp, #12
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a534:	bf00      	nop
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr

0800a540 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a540:	b480      	push	{r7}
 800a542:	b085      	sub	sp, #20
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d101      	bne.n	800a556 <HAL_UARTEx_DisableFifoMode+0x16>
 800a552:	2302      	movs	r3, #2
 800a554:	e027      	b.n	800a5a6 <HAL_UARTEx_DisableFifoMode+0x66>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2201      	movs	r2, #1
 800a55a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2224      	movs	r2, #36	; 0x24
 800a562:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	681a      	ldr	r2, [r3, #0]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f022 0201 	bic.w	r2, r2, #1
 800a57c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a584:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	68fa      	ldr	r2, [r7, #12]
 800a592:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2220      	movs	r2, #32
 800a598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3714      	adds	r7, #20
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr

0800a5b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	b084      	sub	sp, #16
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
 800a5ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d101      	bne.n	800a5ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a5c6:	2302      	movs	r3, #2
 800a5c8:	e02d      	b.n	800a626 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2224      	movs	r2, #36	; 0x24
 800a5d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	681a      	ldr	r2, [r3, #0]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f022 0201 	bic.w	r2, r2, #1
 800a5f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	683a      	ldr	r2, [r7, #0]
 800a602:	430a      	orrs	r2, r1
 800a604:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 f850 	bl	800a6ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	68fa      	ldr	r2, [r7, #12]
 800a612:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2220      	movs	r2, #32
 800a618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2200      	movs	r2, #0
 800a620:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a624:	2300      	movs	r3, #0
}
 800a626:	4618      	mov	r0, r3
 800a628:	3710      	adds	r7, #16
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}

0800a62e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a62e:	b580      	push	{r7, lr}
 800a630:	b084      	sub	sp, #16
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
 800a636:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a63e:	2b01      	cmp	r3, #1
 800a640:	d101      	bne.n	800a646 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a642:	2302      	movs	r3, #2
 800a644:	e02d      	b.n	800a6a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2201      	movs	r2, #1
 800a64a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2224      	movs	r2, #36	; 0x24
 800a652:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f022 0201 	bic.w	r2, r2, #1
 800a66c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	683a      	ldr	r2, [r7, #0]
 800a67e:	430a      	orrs	r2, r1
 800a680:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 f812 	bl	800a6ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	68fa      	ldr	r2, [r7, #12]
 800a68e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2220      	movs	r2, #32
 800a694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2200      	movs	r2, #0
 800a69c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a6a0:	2300      	movs	r3, #0
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
	...

0800a6ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b085      	sub	sp, #20
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d108      	bne.n	800a6ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2201      	movs	r2, #1
 800a6c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a6cc:	e031      	b.n	800a732 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a6ce:	2308      	movs	r3, #8
 800a6d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a6d2:	2308      	movs	r3, #8
 800a6d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	0e5b      	lsrs	r3, r3, #25
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	f003 0307 	and.w	r3, r3, #7
 800a6e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	689b      	ldr	r3, [r3, #8]
 800a6ec:	0f5b      	lsrs	r3, r3, #29
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	f003 0307 	and.w	r3, r3, #7
 800a6f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6f6:	7bbb      	ldrb	r3, [r7, #14]
 800a6f8:	7b3a      	ldrb	r2, [r7, #12]
 800a6fa:	4911      	ldr	r1, [pc, #68]	; (800a740 <UARTEx_SetNbDataToProcess+0x94>)
 800a6fc:	5c8a      	ldrb	r2, [r1, r2]
 800a6fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a702:	7b3a      	ldrb	r2, [r7, #12]
 800a704:	490f      	ldr	r1, [pc, #60]	; (800a744 <UARTEx_SetNbDataToProcess+0x98>)
 800a706:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a708:	fb93 f3f2 	sdiv	r3, r3, r2
 800a70c:	b29a      	uxth	r2, r3
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a714:	7bfb      	ldrb	r3, [r7, #15]
 800a716:	7b7a      	ldrb	r2, [r7, #13]
 800a718:	4909      	ldr	r1, [pc, #36]	; (800a740 <UARTEx_SetNbDataToProcess+0x94>)
 800a71a:	5c8a      	ldrb	r2, [r1, r2]
 800a71c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a720:	7b7a      	ldrb	r2, [r7, #13]
 800a722:	4908      	ldr	r1, [pc, #32]	; (800a744 <UARTEx_SetNbDataToProcess+0x98>)
 800a724:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a726:	fb93 f3f2 	sdiv	r3, r3, r2
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a732:	bf00      	nop
 800a734:	3714      	adds	r7, #20
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr
 800a73e:	bf00      	nop
 800a740:	0800d758 	.word	0x0800d758
 800a744:	0800d760 	.word	0x0800d760

0800a748 <atoi>:
 800a748:	220a      	movs	r2, #10
 800a74a:	2100      	movs	r1, #0
 800a74c:	f000 b882 	b.w	800a854 <strtol>

0800a750 <_strtol_l.constprop.0>:
 800a750:	2b01      	cmp	r3, #1
 800a752:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a756:	d001      	beq.n	800a75c <_strtol_l.constprop.0+0xc>
 800a758:	2b24      	cmp	r3, #36	; 0x24
 800a75a:	d906      	bls.n	800a76a <_strtol_l.constprop.0+0x1a>
 800a75c:	f000 fee0 	bl	800b520 <__errno>
 800a760:	2316      	movs	r3, #22
 800a762:	6003      	str	r3, [r0, #0]
 800a764:	2000      	movs	r0, #0
 800a766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a76a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a850 <_strtol_l.constprop.0+0x100>
 800a76e:	460d      	mov	r5, r1
 800a770:	462e      	mov	r6, r5
 800a772:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a776:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a77a:	f017 0708 	ands.w	r7, r7, #8
 800a77e:	d1f7      	bne.n	800a770 <_strtol_l.constprop.0+0x20>
 800a780:	2c2d      	cmp	r4, #45	; 0x2d
 800a782:	d132      	bne.n	800a7ea <_strtol_l.constprop.0+0x9a>
 800a784:	782c      	ldrb	r4, [r5, #0]
 800a786:	2701      	movs	r7, #1
 800a788:	1cb5      	adds	r5, r6, #2
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d05b      	beq.n	800a846 <_strtol_l.constprop.0+0xf6>
 800a78e:	2b10      	cmp	r3, #16
 800a790:	d109      	bne.n	800a7a6 <_strtol_l.constprop.0+0x56>
 800a792:	2c30      	cmp	r4, #48	; 0x30
 800a794:	d107      	bne.n	800a7a6 <_strtol_l.constprop.0+0x56>
 800a796:	782c      	ldrb	r4, [r5, #0]
 800a798:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a79c:	2c58      	cmp	r4, #88	; 0x58
 800a79e:	d14d      	bne.n	800a83c <_strtol_l.constprop.0+0xec>
 800a7a0:	786c      	ldrb	r4, [r5, #1]
 800a7a2:	2310      	movs	r3, #16
 800a7a4:	3502      	adds	r5, #2
 800a7a6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a7aa:	f108 38ff 	add.w	r8, r8, #4294967295
 800a7ae:	f04f 0e00 	mov.w	lr, #0
 800a7b2:	fbb8 f9f3 	udiv	r9, r8, r3
 800a7b6:	4676      	mov	r6, lr
 800a7b8:	fb03 8a19 	mls	sl, r3, r9, r8
 800a7bc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a7c0:	f1bc 0f09 	cmp.w	ip, #9
 800a7c4:	d816      	bhi.n	800a7f4 <_strtol_l.constprop.0+0xa4>
 800a7c6:	4664      	mov	r4, ip
 800a7c8:	42a3      	cmp	r3, r4
 800a7ca:	dd24      	ble.n	800a816 <_strtol_l.constprop.0+0xc6>
 800a7cc:	f1be 3fff 	cmp.w	lr, #4294967295
 800a7d0:	d008      	beq.n	800a7e4 <_strtol_l.constprop.0+0x94>
 800a7d2:	45b1      	cmp	r9, r6
 800a7d4:	d31c      	bcc.n	800a810 <_strtol_l.constprop.0+0xc0>
 800a7d6:	d101      	bne.n	800a7dc <_strtol_l.constprop.0+0x8c>
 800a7d8:	45a2      	cmp	sl, r4
 800a7da:	db19      	blt.n	800a810 <_strtol_l.constprop.0+0xc0>
 800a7dc:	fb06 4603 	mla	r6, r6, r3, r4
 800a7e0:	f04f 0e01 	mov.w	lr, #1
 800a7e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7e8:	e7e8      	b.n	800a7bc <_strtol_l.constprop.0+0x6c>
 800a7ea:	2c2b      	cmp	r4, #43	; 0x2b
 800a7ec:	bf04      	itt	eq
 800a7ee:	782c      	ldrbeq	r4, [r5, #0]
 800a7f0:	1cb5      	addeq	r5, r6, #2
 800a7f2:	e7ca      	b.n	800a78a <_strtol_l.constprop.0+0x3a>
 800a7f4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a7f8:	f1bc 0f19 	cmp.w	ip, #25
 800a7fc:	d801      	bhi.n	800a802 <_strtol_l.constprop.0+0xb2>
 800a7fe:	3c37      	subs	r4, #55	; 0x37
 800a800:	e7e2      	b.n	800a7c8 <_strtol_l.constprop.0+0x78>
 800a802:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a806:	f1bc 0f19 	cmp.w	ip, #25
 800a80a:	d804      	bhi.n	800a816 <_strtol_l.constprop.0+0xc6>
 800a80c:	3c57      	subs	r4, #87	; 0x57
 800a80e:	e7db      	b.n	800a7c8 <_strtol_l.constprop.0+0x78>
 800a810:	f04f 3eff 	mov.w	lr, #4294967295
 800a814:	e7e6      	b.n	800a7e4 <_strtol_l.constprop.0+0x94>
 800a816:	f1be 3fff 	cmp.w	lr, #4294967295
 800a81a:	d105      	bne.n	800a828 <_strtol_l.constprop.0+0xd8>
 800a81c:	2322      	movs	r3, #34	; 0x22
 800a81e:	6003      	str	r3, [r0, #0]
 800a820:	4646      	mov	r6, r8
 800a822:	b942      	cbnz	r2, 800a836 <_strtol_l.constprop.0+0xe6>
 800a824:	4630      	mov	r0, r6
 800a826:	e79e      	b.n	800a766 <_strtol_l.constprop.0+0x16>
 800a828:	b107      	cbz	r7, 800a82c <_strtol_l.constprop.0+0xdc>
 800a82a:	4276      	negs	r6, r6
 800a82c:	2a00      	cmp	r2, #0
 800a82e:	d0f9      	beq.n	800a824 <_strtol_l.constprop.0+0xd4>
 800a830:	f1be 0f00 	cmp.w	lr, #0
 800a834:	d000      	beq.n	800a838 <_strtol_l.constprop.0+0xe8>
 800a836:	1e69      	subs	r1, r5, #1
 800a838:	6011      	str	r1, [r2, #0]
 800a83a:	e7f3      	b.n	800a824 <_strtol_l.constprop.0+0xd4>
 800a83c:	2430      	movs	r4, #48	; 0x30
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d1b1      	bne.n	800a7a6 <_strtol_l.constprop.0+0x56>
 800a842:	2308      	movs	r3, #8
 800a844:	e7af      	b.n	800a7a6 <_strtol_l.constprop.0+0x56>
 800a846:	2c30      	cmp	r4, #48	; 0x30
 800a848:	d0a5      	beq.n	800a796 <_strtol_l.constprop.0+0x46>
 800a84a:	230a      	movs	r3, #10
 800a84c:	e7ab      	b.n	800a7a6 <_strtol_l.constprop.0+0x56>
 800a84e:	bf00      	nop
 800a850:	0800d769 	.word	0x0800d769

0800a854 <strtol>:
 800a854:	4613      	mov	r3, r2
 800a856:	460a      	mov	r2, r1
 800a858:	4601      	mov	r1, r0
 800a85a:	4802      	ldr	r0, [pc, #8]	; (800a864 <strtol+0x10>)
 800a85c:	6800      	ldr	r0, [r0, #0]
 800a85e:	f7ff bf77 	b.w	800a750 <_strtol_l.constprop.0>
 800a862:	bf00      	nop
 800a864:	20000120 	.word	0x20000120

0800a868 <__cvt>:
 800a868:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a86c:	ec55 4b10 	vmov	r4, r5, d0
 800a870:	2d00      	cmp	r5, #0
 800a872:	460e      	mov	r6, r1
 800a874:	4619      	mov	r1, r3
 800a876:	462b      	mov	r3, r5
 800a878:	bfbb      	ittet	lt
 800a87a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a87e:	461d      	movlt	r5, r3
 800a880:	2300      	movge	r3, #0
 800a882:	232d      	movlt	r3, #45	; 0x2d
 800a884:	700b      	strb	r3, [r1, #0]
 800a886:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a888:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a88c:	4691      	mov	r9, r2
 800a88e:	f023 0820 	bic.w	r8, r3, #32
 800a892:	bfbc      	itt	lt
 800a894:	4622      	movlt	r2, r4
 800a896:	4614      	movlt	r4, r2
 800a898:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a89c:	d005      	beq.n	800a8aa <__cvt+0x42>
 800a89e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a8a2:	d100      	bne.n	800a8a6 <__cvt+0x3e>
 800a8a4:	3601      	adds	r6, #1
 800a8a6:	2102      	movs	r1, #2
 800a8a8:	e000      	b.n	800a8ac <__cvt+0x44>
 800a8aa:	2103      	movs	r1, #3
 800a8ac:	ab03      	add	r3, sp, #12
 800a8ae:	9301      	str	r3, [sp, #4]
 800a8b0:	ab02      	add	r3, sp, #8
 800a8b2:	9300      	str	r3, [sp, #0]
 800a8b4:	ec45 4b10 	vmov	d0, r4, r5
 800a8b8:	4653      	mov	r3, sl
 800a8ba:	4632      	mov	r2, r6
 800a8bc:	f000 ff04 	bl	800b6c8 <_dtoa_r>
 800a8c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a8c4:	4607      	mov	r7, r0
 800a8c6:	d102      	bne.n	800a8ce <__cvt+0x66>
 800a8c8:	f019 0f01 	tst.w	r9, #1
 800a8cc:	d022      	beq.n	800a914 <__cvt+0xac>
 800a8ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a8d2:	eb07 0906 	add.w	r9, r7, r6
 800a8d6:	d110      	bne.n	800a8fa <__cvt+0x92>
 800a8d8:	783b      	ldrb	r3, [r7, #0]
 800a8da:	2b30      	cmp	r3, #48	; 0x30
 800a8dc:	d10a      	bne.n	800a8f4 <__cvt+0x8c>
 800a8de:	2200      	movs	r2, #0
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	4620      	mov	r0, r4
 800a8e4:	4629      	mov	r1, r5
 800a8e6:	f7f6 f927 	bl	8000b38 <__aeabi_dcmpeq>
 800a8ea:	b918      	cbnz	r0, 800a8f4 <__cvt+0x8c>
 800a8ec:	f1c6 0601 	rsb	r6, r6, #1
 800a8f0:	f8ca 6000 	str.w	r6, [sl]
 800a8f4:	f8da 3000 	ldr.w	r3, [sl]
 800a8f8:	4499      	add	r9, r3
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	4620      	mov	r0, r4
 800a900:	4629      	mov	r1, r5
 800a902:	f7f6 f919 	bl	8000b38 <__aeabi_dcmpeq>
 800a906:	b108      	cbz	r0, 800a90c <__cvt+0xa4>
 800a908:	f8cd 900c 	str.w	r9, [sp, #12]
 800a90c:	2230      	movs	r2, #48	; 0x30
 800a90e:	9b03      	ldr	r3, [sp, #12]
 800a910:	454b      	cmp	r3, r9
 800a912:	d307      	bcc.n	800a924 <__cvt+0xbc>
 800a914:	9b03      	ldr	r3, [sp, #12]
 800a916:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a918:	1bdb      	subs	r3, r3, r7
 800a91a:	4638      	mov	r0, r7
 800a91c:	6013      	str	r3, [r2, #0]
 800a91e:	b004      	add	sp, #16
 800a920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a924:	1c59      	adds	r1, r3, #1
 800a926:	9103      	str	r1, [sp, #12]
 800a928:	701a      	strb	r2, [r3, #0]
 800a92a:	e7f0      	b.n	800a90e <__cvt+0xa6>

0800a92c <__exponent>:
 800a92c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a92e:	4603      	mov	r3, r0
 800a930:	2900      	cmp	r1, #0
 800a932:	bfb8      	it	lt
 800a934:	4249      	neglt	r1, r1
 800a936:	f803 2b02 	strb.w	r2, [r3], #2
 800a93a:	bfb4      	ite	lt
 800a93c:	222d      	movlt	r2, #45	; 0x2d
 800a93e:	222b      	movge	r2, #43	; 0x2b
 800a940:	2909      	cmp	r1, #9
 800a942:	7042      	strb	r2, [r0, #1]
 800a944:	dd2a      	ble.n	800a99c <__exponent+0x70>
 800a946:	f10d 0207 	add.w	r2, sp, #7
 800a94a:	4617      	mov	r7, r2
 800a94c:	260a      	movs	r6, #10
 800a94e:	4694      	mov	ip, r2
 800a950:	fb91 f5f6 	sdiv	r5, r1, r6
 800a954:	fb06 1415 	mls	r4, r6, r5, r1
 800a958:	3430      	adds	r4, #48	; 0x30
 800a95a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a95e:	460c      	mov	r4, r1
 800a960:	2c63      	cmp	r4, #99	; 0x63
 800a962:	f102 32ff 	add.w	r2, r2, #4294967295
 800a966:	4629      	mov	r1, r5
 800a968:	dcf1      	bgt.n	800a94e <__exponent+0x22>
 800a96a:	3130      	adds	r1, #48	; 0x30
 800a96c:	f1ac 0402 	sub.w	r4, ip, #2
 800a970:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a974:	1c41      	adds	r1, r0, #1
 800a976:	4622      	mov	r2, r4
 800a978:	42ba      	cmp	r2, r7
 800a97a:	d30a      	bcc.n	800a992 <__exponent+0x66>
 800a97c:	f10d 0209 	add.w	r2, sp, #9
 800a980:	eba2 020c 	sub.w	r2, r2, ip
 800a984:	42bc      	cmp	r4, r7
 800a986:	bf88      	it	hi
 800a988:	2200      	movhi	r2, #0
 800a98a:	4413      	add	r3, r2
 800a98c:	1a18      	subs	r0, r3, r0
 800a98e:	b003      	add	sp, #12
 800a990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a992:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a996:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a99a:	e7ed      	b.n	800a978 <__exponent+0x4c>
 800a99c:	2330      	movs	r3, #48	; 0x30
 800a99e:	3130      	adds	r1, #48	; 0x30
 800a9a0:	7083      	strb	r3, [r0, #2]
 800a9a2:	70c1      	strb	r1, [r0, #3]
 800a9a4:	1d03      	adds	r3, r0, #4
 800a9a6:	e7f1      	b.n	800a98c <__exponent+0x60>

0800a9a8 <_printf_float>:
 800a9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ac:	ed2d 8b02 	vpush	{d8}
 800a9b0:	b08d      	sub	sp, #52	; 0x34
 800a9b2:	460c      	mov	r4, r1
 800a9b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a9b8:	4616      	mov	r6, r2
 800a9ba:	461f      	mov	r7, r3
 800a9bc:	4605      	mov	r5, r0
 800a9be:	f000 fd65 	bl	800b48c <_localeconv_r>
 800a9c2:	f8d0 a000 	ldr.w	sl, [r0]
 800a9c6:	4650      	mov	r0, sl
 800a9c8:	f7f5 fc8a 	bl	80002e0 <strlen>
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	930a      	str	r3, [sp, #40]	; 0x28
 800a9d0:	6823      	ldr	r3, [r4, #0]
 800a9d2:	9305      	str	r3, [sp, #20]
 800a9d4:	f8d8 3000 	ldr.w	r3, [r8]
 800a9d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a9dc:	3307      	adds	r3, #7
 800a9de:	f023 0307 	bic.w	r3, r3, #7
 800a9e2:	f103 0208 	add.w	r2, r3, #8
 800a9e6:	f8c8 2000 	str.w	r2, [r8]
 800a9ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a9ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a9f2:	9307      	str	r3, [sp, #28]
 800a9f4:	f8cd 8018 	str.w	r8, [sp, #24]
 800a9f8:	ee08 0a10 	vmov	s16, r0
 800a9fc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800aa00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa04:	4b9e      	ldr	r3, [pc, #632]	; (800ac80 <_printf_float+0x2d8>)
 800aa06:	f04f 32ff 	mov.w	r2, #4294967295
 800aa0a:	f7f6 f8c7 	bl	8000b9c <__aeabi_dcmpun>
 800aa0e:	bb88      	cbnz	r0, 800aa74 <_printf_float+0xcc>
 800aa10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa14:	4b9a      	ldr	r3, [pc, #616]	; (800ac80 <_printf_float+0x2d8>)
 800aa16:	f04f 32ff 	mov.w	r2, #4294967295
 800aa1a:	f7f6 f8a1 	bl	8000b60 <__aeabi_dcmple>
 800aa1e:	bb48      	cbnz	r0, 800aa74 <_printf_float+0xcc>
 800aa20:	2200      	movs	r2, #0
 800aa22:	2300      	movs	r3, #0
 800aa24:	4640      	mov	r0, r8
 800aa26:	4649      	mov	r1, r9
 800aa28:	f7f6 f890 	bl	8000b4c <__aeabi_dcmplt>
 800aa2c:	b110      	cbz	r0, 800aa34 <_printf_float+0x8c>
 800aa2e:	232d      	movs	r3, #45	; 0x2d
 800aa30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa34:	4a93      	ldr	r2, [pc, #588]	; (800ac84 <_printf_float+0x2dc>)
 800aa36:	4b94      	ldr	r3, [pc, #592]	; (800ac88 <_printf_float+0x2e0>)
 800aa38:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800aa3c:	bf94      	ite	ls
 800aa3e:	4690      	movls	r8, r2
 800aa40:	4698      	movhi	r8, r3
 800aa42:	2303      	movs	r3, #3
 800aa44:	6123      	str	r3, [r4, #16]
 800aa46:	9b05      	ldr	r3, [sp, #20]
 800aa48:	f023 0304 	bic.w	r3, r3, #4
 800aa4c:	6023      	str	r3, [r4, #0]
 800aa4e:	f04f 0900 	mov.w	r9, #0
 800aa52:	9700      	str	r7, [sp, #0]
 800aa54:	4633      	mov	r3, r6
 800aa56:	aa0b      	add	r2, sp, #44	; 0x2c
 800aa58:	4621      	mov	r1, r4
 800aa5a:	4628      	mov	r0, r5
 800aa5c:	f000 f9da 	bl	800ae14 <_printf_common>
 800aa60:	3001      	adds	r0, #1
 800aa62:	f040 8090 	bne.w	800ab86 <_printf_float+0x1de>
 800aa66:	f04f 30ff 	mov.w	r0, #4294967295
 800aa6a:	b00d      	add	sp, #52	; 0x34
 800aa6c:	ecbd 8b02 	vpop	{d8}
 800aa70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa74:	4642      	mov	r2, r8
 800aa76:	464b      	mov	r3, r9
 800aa78:	4640      	mov	r0, r8
 800aa7a:	4649      	mov	r1, r9
 800aa7c:	f7f6 f88e 	bl	8000b9c <__aeabi_dcmpun>
 800aa80:	b140      	cbz	r0, 800aa94 <_printf_float+0xec>
 800aa82:	464b      	mov	r3, r9
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	bfbc      	itt	lt
 800aa88:	232d      	movlt	r3, #45	; 0x2d
 800aa8a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aa8e:	4a7f      	ldr	r2, [pc, #508]	; (800ac8c <_printf_float+0x2e4>)
 800aa90:	4b7f      	ldr	r3, [pc, #508]	; (800ac90 <_printf_float+0x2e8>)
 800aa92:	e7d1      	b.n	800aa38 <_printf_float+0x90>
 800aa94:	6863      	ldr	r3, [r4, #4]
 800aa96:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800aa9a:	9206      	str	r2, [sp, #24]
 800aa9c:	1c5a      	adds	r2, r3, #1
 800aa9e:	d13f      	bne.n	800ab20 <_printf_float+0x178>
 800aaa0:	2306      	movs	r3, #6
 800aaa2:	6063      	str	r3, [r4, #4]
 800aaa4:	9b05      	ldr	r3, [sp, #20]
 800aaa6:	6861      	ldr	r1, [r4, #4]
 800aaa8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800aaac:	2300      	movs	r3, #0
 800aaae:	9303      	str	r3, [sp, #12]
 800aab0:	ab0a      	add	r3, sp, #40	; 0x28
 800aab2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800aab6:	ab09      	add	r3, sp, #36	; 0x24
 800aab8:	ec49 8b10 	vmov	d0, r8, r9
 800aabc:	9300      	str	r3, [sp, #0]
 800aabe:	6022      	str	r2, [r4, #0]
 800aac0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aac4:	4628      	mov	r0, r5
 800aac6:	f7ff fecf 	bl	800a868 <__cvt>
 800aaca:	9b06      	ldr	r3, [sp, #24]
 800aacc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aace:	2b47      	cmp	r3, #71	; 0x47
 800aad0:	4680      	mov	r8, r0
 800aad2:	d108      	bne.n	800aae6 <_printf_float+0x13e>
 800aad4:	1cc8      	adds	r0, r1, #3
 800aad6:	db02      	blt.n	800aade <_printf_float+0x136>
 800aad8:	6863      	ldr	r3, [r4, #4]
 800aada:	4299      	cmp	r1, r3
 800aadc:	dd41      	ble.n	800ab62 <_printf_float+0x1ba>
 800aade:	f1ab 0302 	sub.w	r3, fp, #2
 800aae2:	fa5f fb83 	uxtb.w	fp, r3
 800aae6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aaea:	d820      	bhi.n	800ab2e <_printf_float+0x186>
 800aaec:	3901      	subs	r1, #1
 800aaee:	465a      	mov	r2, fp
 800aaf0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800aaf4:	9109      	str	r1, [sp, #36]	; 0x24
 800aaf6:	f7ff ff19 	bl	800a92c <__exponent>
 800aafa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aafc:	1813      	adds	r3, r2, r0
 800aafe:	2a01      	cmp	r2, #1
 800ab00:	4681      	mov	r9, r0
 800ab02:	6123      	str	r3, [r4, #16]
 800ab04:	dc02      	bgt.n	800ab0c <_printf_float+0x164>
 800ab06:	6822      	ldr	r2, [r4, #0]
 800ab08:	07d2      	lsls	r2, r2, #31
 800ab0a:	d501      	bpl.n	800ab10 <_printf_float+0x168>
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	6123      	str	r3, [r4, #16]
 800ab10:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d09c      	beq.n	800aa52 <_printf_float+0xaa>
 800ab18:	232d      	movs	r3, #45	; 0x2d
 800ab1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab1e:	e798      	b.n	800aa52 <_printf_float+0xaa>
 800ab20:	9a06      	ldr	r2, [sp, #24]
 800ab22:	2a47      	cmp	r2, #71	; 0x47
 800ab24:	d1be      	bne.n	800aaa4 <_printf_float+0xfc>
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d1bc      	bne.n	800aaa4 <_printf_float+0xfc>
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	e7b9      	b.n	800aaa2 <_printf_float+0xfa>
 800ab2e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ab32:	d118      	bne.n	800ab66 <_printf_float+0x1be>
 800ab34:	2900      	cmp	r1, #0
 800ab36:	6863      	ldr	r3, [r4, #4]
 800ab38:	dd0b      	ble.n	800ab52 <_printf_float+0x1aa>
 800ab3a:	6121      	str	r1, [r4, #16]
 800ab3c:	b913      	cbnz	r3, 800ab44 <_printf_float+0x19c>
 800ab3e:	6822      	ldr	r2, [r4, #0]
 800ab40:	07d0      	lsls	r0, r2, #31
 800ab42:	d502      	bpl.n	800ab4a <_printf_float+0x1a2>
 800ab44:	3301      	adds	r3, #1
 800ab46:	440b      	add	r3, r1
 800ab48:	6123      	str	r3, [r4, #16]
 800ab4a:	65a1      	str	r1, [r4, #88]	; 0x58
 800ab4c:	f04f 0900 	mov.w	r9, #0
 800ab50:	e7de      	b.n	800ab10 <_printf_float+0x168>
 800ab52:	b913      	cbnz	r3, 800ab5a <_printf_float+0x1b2>
 800ab54:	6822      	ldr	r2, [r4, #0]
 800ab56:	07d2      	lsls	r2, r2, #31
 800ab58:	d501      	bpl.n	800ab5e <_printf_float+0x1b6>
 800ab5a:	3302      	adds	r3, #2
 800ab5c:	e7f4      	b.n	800ab48 <_printf_float+0x1a0>
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e7f2      	b.n	800ab48 <_printf_float+0x1a0>
 800ab62:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ab66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab68:	4299      	cmp	r1, r3
 800ab6a:	db05      	blt.n	800ab78 <_printf_float+0x1d0>
 800ab6c:	6823      	ldr	r3, [r4, #0]
 800ab6e:	6121      	str	r1, [r4, #16]
 800ab70:	07d8      	lsls	r0, r3, #31
 800ab72:	d5ea      	bpl.n	800ab4a <_printf_float+0x1a2>
 800ab74:	1c4b      	adds	r3, r1, #1
 800ab76:	e7e7      	b.n	800ab48 <_printf_float+0x1a0>
 800ab78:	2900      	cmp	r1, #0
 800ab7a:	bfd4      	ite	le
 800ab7c:	f1c1 0202 	rsble	r2, r1, #2
 800ab80:	2201      	movgt	r2, #1
 800ab82:	4413      	add	r3, r2
 800ab84:	e7e0      	b.n	800ab48 <_printf_float+0x1a0>
 800ab86:	6823      	ldr	r3, [r4, #0]
 800ab88:	055a      	lsls	r2, r3, #21
 800ab8a:	d407      	bmi.n	800ab9c <_printf_float+0x1f4>
 800ab8c:	6923      	ldr	r3, [r4, #16]
 800ab8e:	4642      	mov	r2, r8
 800ab90:	4631      	mov	r1, r6
 800ab92:	4628      	mov	r0, r5
 800ab94:	47b8      	blx	r7
 800ab96:	3001      	adds	r0, #1
 800ab98:	d12c      	bne.n	800abf4 <_printf_float+0x24c>
 800ab9a:	e764      	b.n	800aa66 <_printf_float+0xbe>
 800ab9c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aba0:	f240 80e0 	bls.w	800ad64 <_printf_float+0x3bc>
 800aba4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aba8:	2200      	movs	r2, #0
 800abaa:	2300      	movs	r3, #0
 800abac:	f7f5 ffc4 	bl	8000b38 <__aeabi_dcmpeq>
 800abb0:	2800      	cmp	r0, #0
 800abb2:	d034      	beq.n	800ac1e <_printf_float+0x276>
 800abb4:	4a37      	ldr	r2, [pc, #220]	; (800ac94 <_printf_float+0x2ec>)
 800abb6:	2301      	movs	r3, #1
 800abb8:	4631      	mov	r1, r6
 800abba:	4628      	mov	r0, r5
 800abbc:	47b8      	blx	r7
 800abbe:	3001      	adds	r0, #1
 800abc0:	f43f af51 	beq.w	800aa66 <_printf_float+0xbe>
 800abc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800abc8:	429a      	cmp	r2, r3
 800abca:	db02      	blt.n	800abd2 <_printf_float+0x22a>
 800abcc:	6823      	ldr	r3, [r4, #0]
 800abce:	07d8      	lsls	r0, r3, #31
 800abd0:	d510      	bpl.n	800abf4 <_printf_float+0x24c>
 800abd2:	ee18 3a10 	vmov	r3, s16
 800abd6:	4652      	mov	r2, sl
 800abd8:	4631      	mov	r1, r6
 800abda:	4628      	mov	r0, r5
 800abdc:	47b8      	blx	r7
 800abde:	3001      	adds	r0, #1
 800abe0:	f43f af41 	beq.w	800aa66 <_printf_float+0xbe>
 800abe4:	f04f 0800 	mov.w	r8, #0
 800abe8:	f104 091a 	add.w	r9, r4, #26
 800abec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abee:	3b01      	subs	r3, #1
 800abf0:	4543      	cmp	r3, r8
 800abf2:	dc09      	bgt.n	800ac08 <_printf_float+0x260>
 800abf4:	6823      	ldr	r3, [r4, #0]
 800abf6:	079b      	lsls	r3, r3, #30
 800abf8:	f100 8107 	bmi.w	800ae0a <_printf_float+0x462>
 800abfc:	68e0      	ldr	r0, [r4, #12]
 800abfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac00:	4298      	cmp	r0, r3
 800ac02:	bfb8      	it	lt
 800ac04:	4618      	movlt	r0, r3
 800ac06:	e730      	b.n	800aa6a <_printf_float+0xc2>
 800ac08:	2301      	movs	r3, #1
 800ac0a:	464a      	mov	r2, r9
 800ac0c:	4631      	mov	r1, r6
 800ac0e:	4628      	mov	r0, r5
 800ac10:	47b8      	blx	r7
 800ac12:	3001      	adds	r0, #1
 800ac14:	f43f af27 	beq.w	800aa66 <_printf_float+0xbe>
 800ac18:	f108 0801 	add.w	r8, r8, #1
 800ac1c:	e7e6      	b.n	800abec <_printf_float+0x244>
 800ac1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	dc39      	bgt.n	800ac98 <_printf_float+0x2f0>
 800ac24:	4a1b      	ldr	r2, [pc, #108]	; (800ac94 <_printf_float+0x2ec>)
 800ac26:	2301      	movs	r3, #1
 800ac28:	4631      	mov	r1, r6
 800ac2a:	4628      	mov	r0, r5
 800ac2c:	47b8      	blx	r7
 800ac2e:	3001      	adds	r0, #1
 800ac30:	f43f af19 	beq.w	800aa66 <_printf_float+0xbe>
 800ac34:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	d102      	bne.n	800ac42 <_printf_float+0x29a>
 800ac3c:	6823      	ldr	r3, [r4, #0]
 800ac3e:	07d9      	lsls	r1, r3, #31
 800ac40:	d5d8      	bpl.n	800abf4 <_printf_float+0x24c>
 800ac42:	ee18 3a10 	vmov	r3, s16
 800ac46:	4652      	mov	r2, sl
 800ac48:	4631      	mov	r1, r6
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	47b8      	blx	r7
 800ac4e:	3001      	adds	r0, #1
 800ac50:	f43f af09 	beq.w	800aa66 <_printf_float+0xbe>
 800ac54:	f04f 0900 	mov.w	r9, #0
 800ac58:	f104 0a1a 	add.w	sl, r4, #26
 800ac5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac5e:	425b      	negs	r3, r3
 800ac60:	454b      	cmp	r3, r9
 800ac62:	dc01      	bgt.n	800ac68 <_printf_float+0x2c0>
 800ac64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac66:	e792      	b.n	800ab8e <_printf_float+0x1e6>
 800ac68:	2301      	movs	r3, #1
 800ac6a:	4652      	mov	r2, sl
 800ac6c:	4631      	mov	r1, r6
 800ac6e:	4628      	mov	r0, r5
 800ac70:	47b8      	blx	r7
 800ac72:	3001      	adds	r0, #1
 800ac74:	f43f aef7 	beq.w	800aa66 <_printf_float+0xbe>
 800ac78:	f109 0901 	add.w	r9, r9, #1
 800ac7c:	e7ee      	b.n	800ac5c <_printf_float+0x2b4>
 800ac7e:	bf00      	nop
 800ac80:	7fefffff 	.word	0x7fefffff
 800ac84:	0800d869 	.word	0x0800d869
 800ac88:	0800d86d 	.word	0x0800d86d
 800ac8c:	0800d871 	.word	0x0800d871
 800ac90:	0800d875 	.word	0x0800d875
 800ac94:	0800d879 	.word	0x0800d879
 800ac98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	bfa8      	it	ge
 800aca0:	461a      	movge	r2, r3
 800aca2:	2a00      	cmp	r2, #0
 800aca4:	4691      	mov	r9, r2
 800aca6:	dc37      	bgt.n	800ad18 <_printf_float+0x370>
 800aca8:	f04f 0b00 	mov.w	fp, #0
 800acac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800acb0:	f104 021a 	add.w	r2, r4, #26
 800acb4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800acb6:	9305      	str	r3, [sp, #20]
 800acb8:	eba3 0309 	sub.w	r3, r3, r9
 800acbc:	455b      	cmp	r3, fp
 800acbe:	dc33      	bgt.n	800ad28 <_printf_float+0x380>
 800acc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800acc4:	429a      	cmp	r2, r3
 800acc6:	db3b      	blt.n	800ad40 <_printf_float+0x398>
 800acc8:	6823      	ldr	r3, [r4, #0]
 800acca:	07da      	lsls	r2, r3, #31
 800accc:	d438      	bmi.n	800ad40 <_printf_float+0x398>
 800acce:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800acd2:	eba2 0903 	sub.w	r9, r2, r3
 800acd6:	9b05      	ldr	r3, [sp, #20]
 800acd8:	1ad2      	subs	r2, r2, r3
 800acda:	4591      	cmp	r9, r2
 800acdc:	bfa8      	it	ge
 800acde:	4691      	movge	r9, r2
 800ace0:	f1b9 0f00 	cmp.w	r9, #0
 800ace4:	dc35      	bgt.n	800ad52 <_printf_float+0x3aa>
 800ace6:	f04f 0800 	mov.w	r8, #0
 800acea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800acee:	f104 0a1a 	add.w	sl, r4, #26
 800acf2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800acf6:	1a9b      	subs	r3, r3, r2
 800acf8:	eba3 0309 	sub.w	r3, r3, r9
 800acfc:	4543      	cmp	r3, r8
 800acfe:	f77f af79 	ble.w	800abf4 <_printf_float+0x24c>
 800ad02:	2301      	movs	r3, #1
 800ad04:	4652      	mov	r2, sl
 800ad06:	4631      	mov	r1, r6
 800ad08:	4628      	mov	r0, r5
 800ad0a:	47b8      	blx	r7
 800ad0c:	3001      	adds	r0, #1
 800ad0e:	f43f aeaa 	beq.w	800aa66 <_printf_float+0xbe>
 800ad12:	f108 0801 	add.w	r8, r8, #1
 800ad16:	e7ec      	b.n	800acf2 <_printf_float+0x34a>
 800ad18:	4613      	mov	r3, r2
 800ad1a:	4631      	mov	r1, r6
 800ad1c:	4642      	mov	r2, r8
 800ad1e:	4628      	mov	r0, r5
 800ad20:	47b8      	blx	r7
 800ad22:	3001      	adds	r0, #1
 800ad24:	d1c0      	bne.n	800aca8 <_printf_float+0x300>
 800ad26:	e69e      	b.n	800aa66 <_printf_float+0xbe>
 800ad28:	2301      	movs	r3, #1
 800ad2a:	4631      	mov	r1, r6
 800ad2c:	4628      	mov	r0, r5
 800ad2e:	9205      	str	r2, [sp, #20]
 800ad30:	47b8      	blx	r7
 800ad32:	3001      	adds	r0, #1
 800ad34:	f43f ae97 	beq.w	800aa66 <_printf_float+0xbe>
 800ad38:	9a05      	ldr	r2, [sp, #20]
 800ad3a:	f10b 0b01 	add.w	fp, fp, #1
 800ad3e:	e7b9      	b.n	800acb4 <_printf_float+0x30c>
 800ad40:	ee18 3a10 	vmov	r3, s16
 800ad44:	4652      	mov	r2, sl
 800ad46:	4631      	mov	r1, r6
 800ad48:	4628      	mov	r0, r5
 800ad4a:	47b8      	blx	r7
 800ad4c:	3001      	adds	r0, #1
 800ad4e:	d1be      	bne.n	800acce <_printf_float+0x326>
 800ad50:	e689      	b.n	800aa66 <_printf_float+0xbe>
 800ad52:	9a05      	ldr	r2, [sp, #20]
 800ad54:	464b      	mov	r3, r9
 800ad56:	4442      	add	r2, r8
 800ad58:	4631      	mov	r1, r6
 800ad5a:	4628      	mov	r0, r5
 800ad5c:	47b8      	blx	r7
 800ad5e:	3001      	adds	r0, #1
 800ad60:	d1c1      	bne.n	800ace6 <_printf_float+0x33e>
 800ad62:	e680      	b.n	800aa66 <_printf_float+0xbe>
 800ad64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad66:	2a01      	cmp	r2, #1
 800ad68:	dc01      	bgt.n	800ad6e <_printf_float+0x3c6>
 800ad6a:	07db      	lsls	r3, r3, #31
 800ad6c:	d53a      	bpl.n	800ade4 <_printf_float+0x43c>
 800ad6e:	2301      	movs	r3, #1
 800ad70:	4642      	mov	r2, r8
 800ad72:	4631      	mov	r1, r6
 800ad74:	4628      	mov	r0, r5
 800ad76:	47b8      	blx	r7
 800ad78:	3001      	adds	r0, #1
 800ad7a:	f43f ae74 	beq.w	800aa66 <_printf_float+0xbe>
 800ad7e:	ee18 3a10 	vmov	r3, s16
 800ad82:	4652      	mov	r2, sl
 800ad84:	4631      	mov	r1, r6
 800ad86:	4628      	mov	r0, r5
 800ad88:	47b8      	blx	r7
 800ad8a:	3001      	adds	r0, #1
 800ad8c:	f43f ae6b 	beq.w	800aa66 <_printf_float+0xbe>
 800ad90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ad94:	2200      	movs	r2, #0
 800ad96:	2300      	movs	r3, #0
 800ad98:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ad9c:	f7f5 fecc 	bl	8000b38 <__aeabi_dcmpeq>
 800ada0:	b9d8      	cbnz	r0, 800adda <_printf_float+0x432>
 800ada2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ada6:	f108 0201 	add.w	r2, r8, #1
 800adaa:	4631      	mov	r1, r6
 800adac:	4628      	mov	r0, r5
 800adae:	47b8      	blx	r7
 800adb0:	3001      	adds	r0, #1
 800adb2:	d10e      	bne.n	800add2 <_printf_float+0x42a>
 800adb4:	e657      	b.n	800aa66 <_printf_float+0xbe>
 800adb6:	2301      	movs	r3, #1
 800adb8:	4652      	mov	r2, sl
 800adba:	4631      	mov	r1, r6
 800adbc:	4628      	mov	r0, r5
 800adbe:	47b8      	blx	r7
 800adc0:	3001      	adds	r0, #1
 800adc2:	f43f ae50 	beq.w	800aa66 <_printf_float+0xbe>
 800adc6:	f108 0801 	add.w	r8, r8, #1
 800adca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adcc:	3b01      	subs	r3, #1
 800adce:	4543      	cmp	r3, r8
 800add0:	dcf1      	bgt.n	800adb6 <_printf_float+0x40e>
 800add2:	464b      	mov	r3, r9
 800add4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800add8:	e6da      	b.n	800ab90 <_printf_float+0x1e8>
 800adda:	f04f 0800 	mov.w	r8, #0
 800adde:	f104 0a1a 	add.w	sl, r4, #26
 800ade2:	e7f2      	b.n	800adca <_printf_float+0x422>
 800ade4:	2301      	movs	r3, #1
 800ade6:	4642      	mov	r2, r8
 800ade8:	e7df      	b.n	800adaa <_printf_float+0x402>
 800adea:	2301      	movs	r3, #1
 800adec:	464a      	mov	r2, r9
 800adee:	4631      	mov	r1, r6
 800adf0:	4628      	mov	r0, r5
 800adf2:	47b8      	blx	r7
 800adf4:	3001      	adds	r0, #1
 800adf6:	f43f ae36 	beq.w	800aa66 <_printf_float+0xbe>
 800adfa:	f108 0801 	add.w	r8, r8, #1
 800adfe:	68e3      	ldr	r3, [r4, #12]
 800ae00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae02:	1a5b      	subs	r3, r3, r1
 800ae04:	4543      	cmp	r3, r8
 800ae06:	dcf0      	bgt.n	800adea <_printf_float+0x442>
 800ae08:	e6f8      	b.n	800abfc <_printf_float+0x254>
 800ae0a:	f04f 0800 	mov.w	r8, #0
 800ae0e:	f104 0919 	add.w	r9, r4, #25
 800ae12:	e7f4      	b.n	800adfe <_printf_float+0x456>

0800ae14 <_printf_common>:
 800ae14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae18:	4616      	mov	r6, r2
 800ae1a:	4699      	mov	r9, r3
 800ae1c:	688a      	ldr	r2, [r1, #8]
 800ae1e:	690b      	ldr	r3, [r1, #16]
 800ae20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae24:	4293      	cmp	r3, r2
 800ae26:	bfb8      	it	lt
 800ae28:	4613      	movlt	r3, r2
 800ae2a:	6033      	str	r3, [r6, #0]
 800ae2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae30:	4607      	mov	r7, r0
 800ae32:	460c      	mov	r4, r1
 800ae34:	b10a      	cbz	r2, 800ae3a <_printf_common+0x26>
 800ae36:	3301      	adds	r3, #1
 800ae38:	6033      	str	r3, [r6, #0]
 800ae3a:	6823      	ldr	r3, [r4, #0]
 800ae3c:	0699      	lsls	r1, r3, #26
 800ae3e:	bf42      	ittt	mi
 800ae40:	6833      	ldrmi	r3, [r6, #0]
 800ae42:	3302      	addmi	r3, #2
 800ae44:	6033      	strmi	r3, [r6, #0]
 800ae46:	6825      	ldr	r5, [r4, #0]
 800ae48:	f015 0506 	ands.w	r5, r5, #6
 800ae4c:	d106      	bne.n	800ae5c <_printf_common+0x48>
 800ae4e:	f104 0a19 	add.w	sl, r4, #25
 800ae52:	68e3      	ldr	r3, [r4, #12]
 800ae54:	6832      	ldr	r2, [r6, #0]
 800ae56:	1a9b      	subs	r3, r3, r2
 800ae58:	42ab      	cmp	r3, r5
 800ae5a:	dc26      	bgt.n	800aeaa <_printf_common+0x96>
 800ae5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ae60:	1e13      	subs	r3, r2, #0
 800ae62:	6822      	ldr	r2, [r4, #0]
 800ae64:	bf18      	it	ne
 800ae66:	2301      	movne	r3, #1
 800ae68:	0692      	lsls	r2, r2, #26
 800ae6a:	d42b      	bmi.n	800aec4 <_printf_common+0xb0>
 800ae6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae70:	4649      	mov	r1, r9
 800ae72:	4638      	mov	r0, r7
 800ae74:	47c0      	blx	r8
 800ae76:	3001      	adds	r0, #1
 800ae78:	d01e      	beq.n	800aeb8 <_printf_common+0xa4>
 800ae7a:	6823      	ldr	r3, [r4, #0]
 800ae7c:	6922      	ldr	r2, [r4, #16]
 800ae7e:	f003 0306 	and.w	r3, r3, #6
 800ae82:	2b04      	cmp	r3, #4
 800ae84:	bf02      	ittt	eq
 800ae86:	68e5      	ldreq	r5, [r4, #12]
 800ae88:	6833      	ldreq	r3, [r6, #0]
 800ae8a:	1aed      	subeq	r5, r5, r3
 800ae8c:	68a3      	ldr	r3, [r4, #8]
 800ae8e:	bf0c      	ite	eq
 800ae90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae94:	2500      	movne	r5, #0
 800ae96:	4293      	cmp	r3, r2
 800ae98:	bfc4      	itt	gt
 800ae9a:	1a9b      	subgt	r3, r3, r2
 800ae9c:	18ed      	addgt	r5, r5, r3
 800ae9e:	2600      	movs	r6, #0
 800aea0:	341a      	adds	r4, #26
 800aea2:	42b5      	cmp	r5, r6
 800aea4:	d11a      	bne.n	800aedc <_printf_common+0xc8>
 800aea6:	2000      	movs	r0, #0
 800aea8:	e008      	b.n	800aebc <_printf_common+0xa8>
 800aeaa:	2301      	movs	r3, #1
 800aeac:	4652      	mov	r2, sl
 800aeae:	4649      	mov	r1, r9
 800aeb0:	4638      	mov	r0, r7
 800aeb2:	47c0      	blx	r8
 800aeb4:	3001      	adds	r0, #1
 800aeb6:	d103      	bne.n	800aec0 <_printf_common+0xac>
 800aeb8:	f04f 30ff 	mov.w	r0, #4294967295
 800aebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aec0:	3501      	adds	r5, #1
 800aec2:	e7c6      	b.n	800ae52 <_printf_common+0x3e>
 800aec4:	18e1      	adds	r1, r4, r3
 800aec6:	1c5a      	adds	r2, r3, #1
 800aec8:	2030      	movs	r0, #48	; 0x30
 800aeca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aece:	4422      	add	r2, r4
 800aed0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aed4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aed8:	3302      	adds	r3, #2
 800aeda:	e7c7      	b.n	800ae6c <_printf_common+0x58>
 800aedc:	2301      	movs	r3, #1
 800aede:	4622      	mov	r2, r4
 800aee0:	4649      	mov	r1, r9
 800aee2:	4638      	mov	r0, r7
 800aee4:	47c0      	blx	r8
 800aee6:	3001      	adds	r0, #1
 800aee8:	d0e6      	beq.n	800aeb8 <_printf_common+0xa4>
 800aeea:	3601      	adds	r6, #1
 800aeec:	e7d9      	b.n	800aea2 <_printf_common+0x8e>
	...

0800aef0 <_printf_i>:
 800aef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aef4:	7e0f      	ldrb	r7, [r1, #24]
 800aef6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aef8:	2f78      	cmp	r7, #120	; 0x78
 800aefa:	4691      	mov	r9, r2
 800aefc:	4680      	mov	r8, r0
 800aefe:	460c      	mov	r4, r1
 800af00:	469a      	mov	sl, r3
 800af02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800af06:	d807      	bhi.n	800af18 <_printf_i+0x28>
 800af08:	2f62      	cmp	r7, #98	; 0x62
 800af0a:	d80a      	bhi.n	800af22 <_printf_i+0x32>
 800af0c:	2f00      	cmp	r7, #0
 800af0e:	f000 80d4 	beq.w	800b0ba <_printf_i+0x1ca>
 800af12:	2f58      	cmp	r7, #88	; 0x58
 800af14:	f000 80c0 	beq.w	800b098 <_printf_i+0x1a8>
 800af18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af20:	e03a      	b.n	800af98 <_printf_i+0xa8>
 800af22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af26:	2b15      	cmp	r3, #21
 800af28:	d8f6      	bhi.n	800af18 <_printf_i+0x28>
 800af2a:	a101      	add	r1, pc, #4	; (adr r1, 800af30 <_printf_i+0x40>)
 800af2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af30:	0800af89 	.word	0x0800af89
 800af34:	0800af9d 	.word	0x0800af9d
 800af38:	0800af19 	.word	0x0800af19
 800af3c:	0800af19 	.word	0x0800af19
 800af40:	0800af19 	.word	0x0800af19
 800af44:	0800af19 	.word	0x0800af19
 800af48:	0800af9d 	.word	0x0800af9d
 800af4c:	0800af19 	.word	0x0800af19
 800af50:	0800af19 	.word	0x0800af19
 800af54:	0800af19 	.word	0x0800af19
 800af58:	0800af19 	.word	0x0800af19
 800af5c:	0800b0a1 	.word	0x0800b0a1
 800af60:	0800afc9 	.word	0x0800afc9
 800af64:	0800b05b 	.word	0x0800b05b
 800af68:	0800af19 	.word	0x0800af19
 800af6c:	0800af19 	.word	0x0800af19
 800af70:	0800b0c3 	.word	0x0800b0c3
 800af74:	0800af19 	.word	0x0800af19
 800af78:	0800afc9 	.word	0x0800afc9
 800af7c:	0800af19 	.word	0x0800af19
 800af80:	0800af19 	.word	0x0800af19
 800af84:	0800b063 	.word	0x0800b063
 800af88:	682b      	ldr	r3, [r5, #0]
 800af8a:	1d1a      	adds	r2, r3, #4
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	602a      	str	r2, [r5, #0]
 800af90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af98:	2301      	movs	r3, #1
 800af9a:	e09f      	b.n	800b0dc <_printf_i+0x1ec>
 800af9c:	6820      	ldr	r0, [r4, #0]
 800af9e:	682b      	ldr	r3, [r5, #0]
 800afa0:	0607      	lsls	r7, r0, #24
 800afa2:	f103 0104 	add.w	r1, r3, #4
 800afa6:	6029      	str	r1, [r5, #0]
 800afa8:	d501      	bpl.n	800afae <_printf_i+0xbe>
 800afaa:	681e      	ldr	r6, [r3, #0]
 800afac:	e003      	b.n	800afb6 <_printf_i+0xc6>
 800afae:	0646      	lsls	r6, r0, #25
 800afb0:	d5fb      	bpl.n	800afaa <_printf_i+0xba>
 800afb2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800afb6:	2e00      	cmp	r6, #0
 800afb8:	da03      	bge.n	800afc2 <_printf_i+0xd2>
 800afba:	232d      	movs	r3, #45	; 0x2d
 800afbc:	4276      	negs	r6, r6
 800afbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afc2:	485a      	ldr	r0, [pc, #360]	; (800b12c <_printf_i+0x23c>)
 800afc4:	230a      	movs	r3, #10
 800afc6:	e012      	b.n	800afee <_printf_i+0xfe>
 800afc8:	682b      	ldr	r3, [r5, #0]
 800afca:	6820      	ldr	r0, [r4, #0]
 800afcc:	1d19      	adds	r1, r3, #4
 800afce:	6029      	str	r1, [r5, #0]
 800afd0:	0605      	lsls	r5, r0, #24
 800afd2:	d501      	bpl.n	800afd8 <_printf_i+0xe8>
 800afd4:	681e      	ldr	r6, [r3, #0]
 800afd6:	e002      	b.n	800afde <_printf_i+0xee>
 800afd8:	0641      	lsls	r1, r0, #25
 800afda:	d5fb      	bpl.n	800afd4 <_printf_i+0xe4>
 800afdc:	881e      	ldrh	r6, [r3, #0]
 800afde:	4853      	ldr	r0, [pc, #332]	; (800b12c <_printf_i+0x23c>)
 800afe0:	2f6f      	cmp	r7, #111	; 0x6f
 800afe2:	bf0c      	ite	eq
 800afe4:	2308      	moveq	r3, #8
 800afe6:	230a      	movne	r3, #10
 800afe8:	2100      	movs	r1, #0
 800afea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800afee:	6865      	ldr	r5, [r4, #4]
 800aff0:	60a5      	str	r5, [r4, #8]
 800aff2:	2d00      	cmp	r5, #0
 800aff4:	bfa2      	ittt	ge
 800aff6:	6821      	ldrge	r1, [r4, #0]
 800aff8:	f021 0104 	bicge.w	r1, r1, #4
 800affc:	6021      	strge	r1, [r4, #0]
 800affe:	b90e      	cbnz	r6, 800b004 <_printf_i+0x114>
 800b000:	2d00      	cmp	r5, #0
 800b002:	d04b      	beq.n	800b09c <_printf_i+0x1ac>
 800b004:	4615      	mov	r5, r2
 800b006:	fbb6 f1f3 	udiv	r1, r6, r3
 800b00a:	fb03 6711 	mls	r7, r3, r1, r6
 800b00e:	5dc7      	ldrb	r7, [r0, r7]
 800b010:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b014:	4637      	mov	r7, r6
 800b016:	42bb      	cmp	r3, r7
 800b018:	460e      	mov	r6, r1
 800b01a:	d9f4      	bls.n	800b006 <_printf_i+0x116>
 800b01c:	2b08      	cmp	r3, #8
 800b01e:	d10b      	bne.n	800b038 <_printf_i+0x148>
 800b020:	6823      	ldr	r3, [r4, #0]
 800b022:	07de      	lsls	r6, r3, #31
 800b024:	d508      	bpl.n	800b038 <_printf_i+0x148>
 800b026:	6923      	ldr	r3, [r4, #16]
 800b028:	6861      	ldr	r1, [r4, #4]
 800b02a:	4299      	cmp	r1, r3
 800b02c:	bfde      	ittt	le
 800b02e:	2330      	movle	r3, #48	; 0x30
 800b030:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b034:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b038:	1b52      	subs	r2, r2, r5
 800b03a:	6122      	str	r2, [r4, #16]
 800b03c:	f8cd a000 	str.w	sl, [sp]
 800b040:	464b      	mov	r3, r9
 800b042:	aa03      	add	r2, sp, #12
 800b044:	4621      	mov	r1, r4
 800b046:	4640      	mov	r0, r8
 800b048:	f7ff fee4 	bl	800ae14 <_printf_common>
 800b04c:	3001      	adds	r0, #1
 800b04e:	d14a      	bne.n	800b0e6 <_printf_i+0x1f6>
 800b050:	f04f 30ff 	mov.w	r0, #4294967295
 800b054:	b004      	add	sp, #16
 800b056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b05a:	6823      	ldr	r3, [r4, #0]
 800b05c:	f043 0320 	orr.w	r3, r3, #32
 800b060:	6023      	str	r3, [r4, #0]
 800b062:	4833      	ldr	r0, [pc, #204]	; (800b130 <_printf_i+0x240>)
 800b064:	2778      	movs	r7, #120	; 0x78
 800b066:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b06a:	6823      	ldr	r3, [r4, #0]
 800b06c:	6829      	ldr	r1, [r5, #0]
 800b06e:	061f      	lsls	r7, r3, #24
 800b070:	f851 6b04 	ldr.w	r6, [r1], #4
 800b074:	d402      	bmi.n	800b07c <_printf_i+0x18c>
 800b076:	065f      	lsls	r7, r3, #25
 800b078:	bf48      	it	mi
 800b07a:	b2b6      	uxthmi	r6, r6
 800b07c:	07df      	lsls	r7, r3, #31
 800b07e:	bf48      	it	mi
 800b080:	f043 0320 	orrmi.w	r3, r3, #32
 800b084:	6029      	str	r1, [r5, #0]
 800b086:	bf48      	it	mi
 800b088:	6023      	strmi	r3, [r4, #0]
 800b08a:	b91e      	cbnz	r6, 800b094 <_printf_i+0x1a4>
 800b08c:	6823      	ldr	r3, [r4, #0]
 800b08e:	f023 0320 	bic.w	r3, r3, #32
 800b092:	6023      	str	r3, [r4, #0]
 800b094:	2310      	movs	r3, #16
 800b096:	e7a7      	b.n	800afe8 <_printf_i+0xf8>
 800b098:	4824      	ldr	r0, [pc, #144]	; (800b12c <_printf_i+0x23c>)
 800b09a:	e7e4      	b.n	800b066 <_printf_i+0x176>
 800b09c:	4615      	mov	r5, r2
 800b09e:	e7bd      	b.n	800b01c <_printf_i+0x12c>
 800b0a0:	682b      	ldr	r3, [r5, #0]
 800b0a2:	6826      	ldr	r6, [r4, #0]
 800b0a4:	6961      	ldr	r1, [r4, #20]
 800b0a6:	1d18      	adds	r0, r3, #4
 800b0a8:	6028      	str	r0, [r5, #0]
 800b0aa:	0635      	lsls	r5, r6, #24
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	d501      	bpl.n	800b0b4 <_printf_i+0x1c4>
 800b0b0:	6019      	str	r1, [r3, #0]
 800b0b2:	e002      	b.n	800b0ba <_printf_i+0x1ca>
 800b0b4:	0670      	lsls	r0, r6, #25
 800b0b6:	d5fb      	bpl.n	800b0b0 <_printf_i+0x1c0>
 800b0b8:	8019      	strh	r1, [r3, #0]
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	6123      	str	r3, [r4, #16]
 800b0be:	4615      	mov	r5, r2
 800b0c0:	e7bc      	b.n	800b03c <_printf_i+0x14c>
 800b0c2:	682b      	ldr	r3, [r5, #0]
 800b0c4:	1d1a      	adds	r2, r3, #4
 800b0c6:	602a      	str	r2, [r5, #0]
 800b0c8:	681d      	ldr	r5, [r3, #0]
 800b0ca:	6862      	ldr	r2, [r4, #4]
 800b0cc:	2100      	movs	r1, #0
 800b0ce:	4628      	mov	r0, r5
 800b0d0:	f7f5 f8b6 	bl	8000240 <memchr>
 800b0d4:	b108      	cbz	r0, 800b0da <_printf_i+0x1ea>
 800b0d6:	1b40      	subs	r0, r0, r5
 800b0d8:	6060      	str	r0, [r4, #4]
 800b0da:	6863      	ldr	r3, [r4, #4]
 800b0dc:	6123      	str	r3, [r4, #16]
 800b0de:	2300      	movs	r3, #0
 800b0e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0e4:	e7aa      	b.n	800b03c <_printf_i+0x14c>
 800b0e6:	6923      	ldr	r3, [r4, #16]
 800b0e8:	462a      	mov	r2, r5
 800b0ea:	4649      	mov	r1, r9
 800b0ec:	4640      	mov	r0, r8
 800b0ee:	47d0      	blx	sl
 800b0f0:	3001      	adds	r0, #1
 800b0f2:	d0ad      	beq.n	800b050 <_printf_i+0x160>
 800b0f4:	6823      	ldr	r3, [r4, #0]
 800b0f6:	079b      	lsls	r3, r3, #30
 800b0f8:	d413      	bmi.n	800b122 <_printf_i+0x232>
 800b0fa:	68e0      	ldr	r0, [r4, #12]
 800b0fc:	9b03      	ldr	r3, [sp, #12]
 800b0fe:	4298      	cmp	r0, r3
 800b100:	bfb8      	it	lt
 800b102:	4618      	movlt	r0, r3
 800b104:	e7a6      	b.n	800b054 <_printf_i+0x164>
 800b106:	2301      	movs	r3, #1
 800b108:	4632      	mov	r2, r6
 800b10a:	4649      	mov	r1, r9
 800b10c:	4640      	mov	r0, r8
 800b10e:	47d0      	blx	sl
 800b110:	3001      	adds	r0, #1
 800b112:	d09d      	beq.n	800b050 <_printf_i+0x160>
 800b114:	3501      	adds	r5, #1
 800b116:	68e3      	ldr	r3, [r4, #12]
 800b118:	9903      	ldr	r1, [sp, #12]
 800b11a:	1a5b      	subs	r3, r3, r1
 800b11c:	42ab      	cmp	r3, r5
 800b11e:	dcf2      	bgt.n	800b106 <_printf_i+0x216>
 800b120:	e7eb      	b.n	800b0fa <_printf_i+0x20a>
 800b122:	2500      	movs	r5, #0
 800b124:	f104 0619 	add.w	r6, r4, #25
 800b128:	e7f5      	b.n	800b116 <_printf_i+0x226>
 800b12a:	bf00      	nop
 800b12c:	0800d87b 	.word	0x0800d87b
 800b130:	0800d88c 	.word	0x0800d88c

0800b134 <std>:
 800b134:	2300      	movs	r3, #0
 800b136:	b510      	push	{r4, lr}
 800b138:	4604      	mov	r4, r0
 800b13a:	e9c0 3300 	strd	r3, r3, [r0]
 800b13e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b142:	6083      	str	r3, [r0, #8]
 800b144:	8181      	strh	r1, [r0, #12]
 800b146:	6643      	str	r3, [r0, #100]	; 0x64
 800b148:	81c2      	strh	r2, [r0, #14]
 800b14a:	6183      	str	r3, [r0, #24]
 800b14c:	4619      	mov	r1, r3
 800b14e:	2208      	movs	r2, #8
 800b150:	305c      	adds	r0, #92	; 0x5c
 800b152:	f000 f936 	bl	800b3c2 <memset>
 800b156:	4b05      	ldr	r3, [pc, #20]	; (800b16c <std+0x38>)
 800b158:	6263      	str	r3, [r4, #36]	; 0x24
 800b15a:	4b05      	ldr	r3, [pc, #20]	; (800b170 <std+0x3c>)
 800b15c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b15e:	4b05      	ldr	r3, [pc, #20]	; (800b174 <std+0x40>)
 800b160:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b162:	4b05      	ldr	r3, [pc, #20]	; (800b178 <std+0x44>)
 800b164:	6224      	str	r4, [r4, #32]
 800b166:	6323      	str	r3, [r4, #48]	; 0x30
 800b168:	bd10      	pop	{r4, pc}
 800b16a:	bf00      	nop
 800b16c:	0800b33d 	.word	0x0800b33d
 800b170:	0800b35f 	.word	0x0800b35f
 800b174:	0800b397 	.word	0x0800b397
 800b178:	0800b3bb 	.word	0x0800b3bb

0800b17c <stdio_exit_handler>:
 800b17c:	4a02      	ldr	r2, [pc, #8]	; (800b188 <stdio_exit_handler+0xc>)
 800b17e:	4903      	ldr	r1, [pc, #12]	; (800b18c <stdio_exit_handler+0x10>)
 800b180:	4803      	ldr	r0, [pc, #12]	; (800b190 <stdio_exit_handler+0x14>)
 800b182:	f000 b869 	b.w	800b258 <_fwalk_sglue>
 800b186:	bf00      	nop
 800b188:	200000c8 	.word	0x200000c8
 800b18c:	0800cf61 	.word	0x0800cf61
 800b190:	200000d4 	.word	0x200000d4

0800b194 <cleanup_stdio>:
 800b194:	6841      	ldr	r1, [r0, #4]
 800b196:	4b0c      	ldr	r3, [pc, #48]	; (800b1c8 <cleanup_stdio+0x34>)
 800b198:	4299      	cmp	r1, r3
 800b19a:	b510      	push	{r4, lr}
 800b19c:	4604      	mov	r4, r0
 800b19e:	d001      	beq.n	800b1a4 <cleanup_stdio+0x10>
 800b1a0:	f001 fede 	bl	800cf60 <_fflush_r>
 800b1a4:	68a1      	ldr	r1, [r4, #8]
 800b1a6:	4b09      	ldr	r3, [pc, #36]	; (800b1cc <cleanup_stdio+0x38>)
 800b1a8:	4299      	cmp	r1, r3
 800b1aa:	d002      	beq.n	800b1b2 <cleanup_stdio+0x1e>
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	f001 fed7 	bl	800cf60 <_fflush_r>
 800b1b2:	68e1      	ldr	r1, [r4, #12]
 800b1b4:	4b06      	ldr	r3, [pc, #24]	; (800b1d0 <cleanup_stdio+0x3c>)
 800b1b6:	4299      	cmp	r1, r3
 800b1b8:	d004      	beq.n	800b1c4 <cleanup_stdio+0x30>
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1c0:	f001 bece 	b.w	800cf60 <_fflush_r>
 800b1c4:	bd10      	pop	{r4, pc}
 800b1c6:	bf00      	nop
 800b1c8:	20000814 	.word	0x20000814
 800b1cc:	2000087c 	.word	0x2000087c
 800b1d0:	200008e4 	.word	0x200008e4

0800b1d4 <global_stdio_init.part.0>:
 800b1d4:	b510      	push	{r4, lr}
 800b1d6:	4b0b      	ldr	r3, [pc, #44]	; (800b204 <global_stdio_init.part.0+0x30>)
 800b1d8:	4c0b      	ldr	r4, [pc, #44]	; (800b208 <global_stdio_init.part.0+0x34>)
 800b1da:	4a0c      	ldr	r2, [pc, #48]	; (800b20c <global_stdio_init.part.0+0x38>)
 800b1dc:	601a      	str	r2, [r3, #0]
 800b1de:	4620      	mov	r0, r4
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	2104      	movs	r1, #4
 800b1e4:	f7ff ffa6 	bl	800b134 <std>
 800b1e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b1ec:	2201      	movs	r2, #1
 800b1ee:	2109      	movs	r1, #9
 800b1f0:	f7ff ffa0 	bl	800b134 <std>
 800b1f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b1f8:	2202      	movs	r2, #2
 800b1fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1fe:	2112      	movs	r1, #18
 800b200:	f7ff bf98 	b.w	800b134 <std>
 800b204:	2000094c 	.word	0x2000094c
 800b208:	20000814 	.word	0x20000814
 800b20c:	0800b17d 	.word	0x0800b17d

0800b210 <__sfp_lock_acquire>:
 800b210:	4801      	ldr	r0, [pc, #4]	; (800b218 <__sfp_lock_acquire+0x8>)
 800b212:	f000 b9af 	b.w	800b574 <__retarget_lock_acquire_recursive>
 800b216:	bf00      	nop
 800b218:	20000955 	.word	0x20000955

0800b21c <__sfp_lock_release>:
 800b21c:	4801      	ldr	r0, [pc, #4]	; (800b224 <__sfp_lock_release+0x8>)
 800b21e:	f000 b9aa 	b.w	800b576 <__retarget_lock_release_recursive>
 800b222:	bf00      	nop
 800b224:	20000955 	.word	0x20000955

0800b228 <__sinit>:
 800b228:	b510      	push	{r4, lr}
 800b22a:	4604      	mov	r4, r0
 800b22c:	f7ff fff0 	bl	800b210 <__sfp_lock_acquire>
 800b230:	6a23      	ldr	r3, [r4, #32]
 800b232:	b11b      	cbz	r3, 800b23c <__sinit+0x14>
 800b234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b238:	f7ff bff0 	b.w	800b21c <__sfp_lock_release>
 800b23c:	4b04      	ldr	r3, [pc, #16]	; (800b250 <__sinit+0x28>)
 800b23e:	6223      	str	r3, [r4, #32]
 800b240:	4b04      	ldr	r3, [pc, #16]	; (800b254 <__sinit+0x2c>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d1f5      	bne.n	800b234 <__sinit+0xc>
 800b248:	f7ff ffc4 	bl	800b1d4 <global_stdio_init.part.0>
 800b24c:	e7f2      	b.n	800b234 <__sinit+0xc>
 800b24e:	bf00      	nop
 800b250:	0800b195 	.word	0x0800b195
 800b254:	2000094c 	.word	0x2000094c

0800b258 <_fwalk_sglue>:
 800b258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b25c:	4607      	mov	r7, r0
 800b25e:	4688      	mov	r8, r1
 800b260:	4614      	mov	r4, r2
 800b262:	2600      	movs	r6, #0
 800b264:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b268:	f1b9 0901 	subs.w	r9, r9, #1
 800b26c:	d505      	bpl.n	800b27a <_fwalk_sglue+0x22>
 800b26e:	6824      	ldr	r4, [r4, #0]
 800b270:	2c00      	cmp	r4, #0
 800b272:	d1f7      	bne.n	800b264 <_fwalk_sglue+0xc>
 800b274:	4630      	mov	r0, r6
 800b276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b27a:	89ab      	ldrh	r3, [r5, #12]
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	d907      	bls.n	800b290 <_fwalk_sglue+0x38>
 800b280:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b284:	3301      	adds	r3, #1
 800b286:	d003      	beq.n	800b290 <_fwalk_sglue+0x38>
 800b288:	4629      	mov	r1, r5
 800b28a:	4638      	mov	r0, r7
 800b28c:	47c0      	blx	r8
 800b28e:	4306      	orrs	r6, r0
 800b290:	3568      	adds	r5, #104	; 0x68
 800b292:	e7e9      	b.n	800b268 <_fwalk_sglue+0x10>

0800b294 <sniprintf>:
 800b294:	b40c      	push	{r2, r3}
 800b296:	b530      	push	{r4, r5, lr}
 800b298:	4b17      	ldr	r3, [pc, #92]	; (800b2f8 <sniprintf+0x64>)
 800b29a:	1e0c      	subs	r4, r1, #0
 800b29c:	681d      	ldr	r5, [r3, #0]
 800b29e:	b09d      	sub	sp, #116	; 0x74
 800b2a0:	da08      	bge.n	800b2b4 <sniprintf+0x20>
 800b2a2:	238b      	movs	r3, #139	; 0x8b
 800b2a4:	602b      	str	r3, [r5, #0]
 800b2a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b2aa:	b01d      	add	sp, #116	; 0x74
 800b2ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2b0:	b002      	add	sp, #8
 800b2b2:	4770      	bx	lr
 800b2b4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b2b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b2bc:	bf14      	ite	ne
 800b2be:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b2c2:	4623      	moveq	r3, r4
 800b2c4:	9304      	str	r3, [sp, #16]
 800b2c6:	9307      	str	r3, [sp, #28]
 800b2c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b2cc:	9002      	str	r0, [sp, #8]
 800b2ce:	9006      	str	r0, [sp, #24]
 800b2d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b2d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b2d6:	ab21      	add	r3, sp, #132	; 0x84
 800b2d8:	a902      	add	r1, sp, #8
 800b2da:	4628      	mov	r0, r5
 800b2dc:	9301      	str	r3, [sp, #4]
 800b2de:	f001 fcbb 	bl	800cc58 <_svfiprintf_r>
 800b2e2:	1c43      	adds	r3, r0, #1
 800b2e4:	bfbc      	itt	lt
 800b2e6:	238b      	movlt	r3, #139	; 0x8b
 800b2e8:	602b      	strlt	r3, [r5, #0]
 800b2ea:	2c00      	cmp	r4, #0
 800b2ec:	d0dd      	beq.n	800b2aa <sniprintf+0x16>
 800b2ee:	9b02      	ldr	r3, [sp, #8]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	701a      	strb	r2, [r3, #0]
 800b2f4:	e7d9      	b.n	800b2aa <sniprintf+0x16>
 800b2f6:	bf00      	nop
 800b2f8:	20000120 	.word	0x20000120

0800b2fc <siprintf>:
 800b2fc:	b40e      	push	{r1, r2, r3}
 800b2fe:	b500      	push	{lr}
 800b300:	b09c      	sub	sp, #112	; 0x70
 800b302:	ab1d      	add	r3, sp, #116	; 0x74
 800b304:	9002      	str	r0, [sp, #8]
 800b306:	9006      	str	r0, [sp, #24]
 800b308:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b30c:	4809      	ldr	r0, [pc, #36]	; (800b334 <siprintf+0x38>)
 800b30e:	9107      	str	r1, [sp, #28]
 800b310:	9104      	str	r1, [sp, #16]
 800b312:	4909      	ldr	r1, [pc, #36]	; (800b338 <siprintf+0x3c>)
 800b314:	f853 2b04 	ldr.w	r2, [r3], #4
 800b318:	9105      	str	r1, [sp, #20]
 800b31a:	6800      	ldr	r0, [r0, #0]
 800b31c:	9301      	str	r3, [sp, #4]
 800b31e:	a902      	add	r1, sp, #8
 800b320:	f001 fc9a 	bl	800cc58 <_svfiprintf_r>
 800b324:	9b02      	ldr	r3, [sp, #8]
 800b326:	2200      	movs	r2, #0
 800b328:	701a      	strb	r2, [r3, #0]
 800b32a:	b01c      	add	sp, #112	; 0x70
 800b32c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b330:	b003      	add	sp, #12
 800b332:	4770      	bx	lr
 800b334:	20000120 	.word	0x20000120
 800b338:	ffff0208 	.word	0xffff0208

0800b33c <__sread>:
 800b33c:	b510      	push	{r4, lr}
 800b33e:	460c      	mov	r4, r1
 800b340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b344:	f000 f8c8 	bl	800b4d8 <_read_r>
 800b348:	2800      	cmp	r0, #0
 800b34a:	bfab      	itete	ge
 800b34c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b34e:	89a3      	ldrhlt	r3, [r4, #12]
 800b350:	181b      	addge	r3, r3, r0
 800b352:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b356:	bfac      	ite	ge
 800b358:	6563      	strge	r3, [r4, #84]	; 0x54
 800b35a:	81a3      	strhlt	r3, [r4, #12]
 800b35c:	bd10      	pop	{r4, pc}

0800b35e <__swrite>:
 800b35e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b362:	461f      	mov	r7, r3
 800b364:	898b      	ldrh	r3, [r1, #12]
 800b366:	05db      	lsls	r3, r3, #23
 800b368:	4605      	mov	r5, r0
 800b36a:	460c      	mov	r4, r1
 800b36c:	4616      	mov	r6, r2
 800b36e:	d505      	bpl.n	800b37c <__swrite+0x1e>
 800b370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b374:	2302      	movs	r3, #2
 800b376:	2200      	movs	r2, #0
 800b378:	f000 f89c 	bl	800b4b4 <_lseek_r>
 800b37c:	89a3      	ldrh	r3, [r4, #12]
 800b37e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b382:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b386:	81a3      	strh	r3, [r4, #12]
 800b388:	4632      	mov	r2, r6
 800b38a:	463b      	mov	r3, r7
 800b38c:	4628      	mov	r0, r5
 800b38e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b392:	f000 b8b3 	b.w	800b4fc <_write_r>

0800b396 <__sseek>:
 800b396:	b510      	push	{r4, lr}
 800b398:	460c      	mov	r4, r1
 800b39a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b39e:	f000 f889 	bl	800b4b4 <_lseek_r>
 800b3a2:	1c43      	adds	r3, r0, #1
 800b3a4:	89a3      	ldrh	r3, [r4, #12]
 800b3a6:	bf15      	itete	ne
 800b3a8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b3aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b3ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b3b2:	81a3      	strheq	r3, [r4, #12]
 800b3b4:	bf18      	it	ne
 800b3b6:	81a3      	strhne	r3, [r4, #12]
 800b3b8:	bd10      	pop	{r4, pc}

0800b3ba <__sclose>:
 800b3ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3be:	f000 b869 	b.w	800b494 <_close_r>

0800b3c2 <memset>:
 800b3c2:	4402      	add	r2, r0
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d100      	bne.n	800b3cc <memset+0xa>
 800b3ca:	4770      	bx	lr
 800b3cc:	f803 1b01 	strb.w	r1, [r3], #1
 800b3d0:	e7f9      	b.n	800b3c6 <memset+0x4>
	...

0800b3d4 <strtok>:
 800b3d4:	4b16      	ldr	r3, [pc, #88]	; (800b430 <strtok+0x5c>)
 800b3d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3d8:	681e      	ldr	r6, [r3, #0]
 800b3da:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800b3dc:	4605      	mov	r5, r0
 800b3de:	b9fc      	cbnz	r4, 800b420 <strtok+0x4c>
 800b3e0:	2050      	movs	r0, #80	; 0x50
 800b3e2:	9101      	str	r1, [sp, #4]
 800b3e4:	f000 ffae 	bl	800c344 <malloc>
 800b3e8:	9901      	ldr	r1, [sp, #4]
 800b3ea:	6470      	str	r0, [r6, #68]	; 0x44
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	b920      	cbnz	r0, 800b3fa <strtok+0x26>
 800b3f0:	4b10      	ldr	r3, [pc, #64]	; (800b434 <strtok+0x60>)
 800b3f2:	4811      	ldr	r0, [pc, #68]	; (800b438 <strtok+0x64>)
 800b3f4:	215b      	movs	r1, #91	; 0x5b
 800b3f6:	f000 f8bf 	bl	800b578 <__assert_func>
 800b3fa:	e9c0 4400 	strd	r4, r4, [r0]
 800b3fe:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b402:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b406:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b40a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b40e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b412:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b416:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b41a:	6184      	str	r4, [r0, #24]
 800b41c:	7704      	strb	r4, [r0, #28]
 800b41e:	6244      	str	r4, [r0, #36]	; 0x24
 800b420:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800b422:	2301      	movs	r3, #1
 800b424:	4628      	mov	r0, r5
 800b426:	b002      	add	sp, #8
 800b428:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b42c:	f000 b806 	b.w	800b43c <__strtok_r>
 800b430:	20000120 	.word	0x20000120
 800b434:	0800d89d 	.word	0x0800d89d
 800b438:	0800d8b4 	.word	0x0800d8b4

0800b43c <__strtok_r>:
 800b43c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b43e:	b908      	cbnz	r0, 800b444 <__strtok_r+0x8>
 800b440:	6810      	ldr	r0, [r2, #0]
 800b442:	b188      	cbz	r0, 800b468 <__strtok_r+0x2c>
 800b444:	4604      	mov	r4, r0
 800b446:	4620      	mov	r0, r4
 800b448:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b44c:	460f      	mov	r7, r1
 800b44e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b452:	b91e      	cbnz	r6, 800b45c <__strtok_r+0x20>
 800b454:	b965      	cbnz	r5, 800b470 <__strtok_r+0x34>
 800b456:	6015      	str	r5, [r2, #0]
 800b458:	4628      	mov	r0, r5
 800b45a:	e005      	b.n	800b468 <__strtok_r+0x2c>
 800b45c:	42b5      	cmp	r5, r6
 800b45e:	d1f6      	bne.n	800b44e <__strtok_r+0x12>
 800b460:	2b00      	cmp	r3, #0
 800b462:	d1f0      	bne.n	800b446 <__strtok_r+0xa>
 800b464:	6014      	str	r4, [r2, #0]
 800b466:	7003      	strb	r3, [r0, #0]
 800b468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b46a:	461c      	mov	r4, r3
 800b46c:	e00c      	b.n	800b488 <__strtok_r+0x4c>
 800b46e:	b915      	cbnz	r5, 800b476 <__strtok_r+0x3a>
 800b470:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b474:	460e      	mov	r6, r1
 800b476:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b47a:	42ab      	cmp	r3, r5
 800b47c:	d1f7      	bne.n	800b46e <__strtok_r+0x32>
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d0f3      	beq.n	800b46a <__strtok_r+0x2e>
 800b482:	2300      	movs	r3, #0
 800b484:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b488:	6014      	str	r4, [r2, #0]
 800b48a:	e7ed      	b.n	800b468 <__strtok_r+0x2c>

0800b48c <_localeconv_r>:
 800b48c:	4800      	ldr	r0, [pc, #0]	; (800b490 <_localeconv_r+0x4>)
 800b48e:	4770      	bx	lr
 800b490:	20000214 	.word	0x20000214

0800b494 <_close_r>:
 800b494:	b538      	push	{r3, r4, r5, lr}
 800b496:	4d06      	ldr	r5, [pc, #24]	; (800b4b0 <_close_r+0x1c>)
 800b498:	2300      	movs	r3, #0
 800b49a:	4604      	mov	r4, r0
 800b49c:	4608      	mov	r0, r1
 800b49e:	602b      	str	r3, [r5, #0]
 800b4a0:	f7f6 faaf 	bl	8001a02 <_close>
 800b4a4:	1c43      	adds	r3, r0, #1
 800b4a6:	d102      	bne.n	800b4ae <_close_r+0x1a>
 800b4a8:	682b      	ldr	r3, [r5, #0]
 800b4aa:	b103      	cbz	r3, 800b4ae <_close_r+0x1a>
 800b4ac:	6023      	str	r3, [r4, #0]
 800b4ae:	bd38      	pop	{r3, r4, r5, pc}
 800b4b0:	20000950 	.word	0x20000950

0800b4b4 <_lseek_r>:
 800b4b4:	b538      	push	{r3, r4, r5, lr}
 800b4b6:	4d07      	ldr	r5, [pc, #28]	; (800b4d4 <_lseek_r+0x20>)
 800b4b8:	4604      	mov	r4, r0
 800b4ba:	4608      	mov	r0, r1
 800b4bc:	4611      	mov	r1, r2
 800b4be:	2200      	movs	r2, #0
 800b4c0:	602a      	str	r2, [r5, #0]
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	f7f6 fac4 	bl	8001a50 <_lseek>
 800b4c8:	1c43      	adds	r3, r0, #1
 800b4ca:	d102      	bne.n	800b4d2 <_lseek_r+0x1e>
 800b4cc:	682b      	ldr	r3, [r5, #0]
 800b4ce:	b103      	cbz	r3, 800b4d2 <_lseek_r+0x1e>
 800b4d0:	6023      	str	r3, [r4, #0]
 800b4d2:	bd38      	pop	{r3, r4, r5, pc}
 800b4d4:	20000950 	.word	0x20000950

0800b4d8 <_read_r>:
 800b4d8:	b538      	push	{r3, r4, r5, lr}
 800b4da:	4d07      	ldr	r5, [pc, #28]	; (800b4f8 <_read_r+0x20>)
 800b4dc:	4604      	mov	r4, r0
 800b4de:	4608      	mov	r0, r1
 800b4e0:	4611      	mov	r1, r2
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	602a      	str	r2, [r5, #0]
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	f7f6 fa52 	bl	8001990 <_read>
 800b4ec:	1c43      	adds	r3, r0, #1
 800b4ee:	d102      	bne.n	800b4f6 <_read_r+0x1e>
 800b4f0:	682b      	ldr	r3, [r5, #0]
 800b4f2:	b103      	cbz	r3, 800b4f6 <_read_r+0x1e>
 800b4f4:	6023      	str	r3, [r4, #0]
 800b4f6:	bd38      	pop	{r3, r4, r5, pc}
 800b4f8:	20000950 	.word	0x20000950

0800b4fc <_write_r>:
 800b4fc:	b538      	push	{r3, r4, r5, lr}
 800b4fe:	4d07      	ldr	r5, [pc, #28]	; (800b51c <_write_r+0x20>)
 800b500:	4604      	mov	r4, r0
 800b502:	4608      	mov	r0, r1
 800b504:	4611      	mov	r1, r2
 800b506:	2200      	movs	r2, #0
 800b508:	602a      	str	r2, [r5, #0]
 800b50a:	461a      	mov	r2, r3
 800b50c:	f7f6 fa5d 	bl	80019ca <_write>
 800b510:	1c43      	adds	r3, r0, #1
 800b512:	d102      	bne.n	800b51a <_write_r+0x1e>
 800b514:	682b      	ldr	r3, [r5, #0]
 800b516:	b103      	cbz	r3, 800b51a <_write_r+0x1e>
 800b518:	6023      	str	r3, [r4, #0]
 800b51a:	bd38      	pop	{r3, r4, r5, pc}
 800b51c:	20000950 	.word	0x20000950

0800b520 <__errno>:
 800b520:	4b01      	ldr	r3, [pc, #4]	; (800b528 <__errno+0x8>)
 800b522:	6818      	ldr	r0, [r3, #0]
 800b524:	4770      	bx	lr
 800b526:	bf00      	nop
 800b528:	20000120 	.word	0x20000120

0800b52c <__libc_init_array>:
 800b52c:	b570      	push	{r4, r5, r6, lr}
 800b52e:	4d0d      	ldr	r5, [pc, #52]	; (800b564 <__libc_init_array+0x38>)
 800b530:	4c0d      	ldr	r4, [pc, #52]	; (800b568 <__libc_init_array+0x3c>)
 800b532:	1b64      	subs	r4, r4, r5
 800b534:	10a4      	asrs	r4, r4, #2
 800b536:	2600      	movs	r6, #0
 800b538:	42a6      	cmp	r6, r4
 800b53a:	d109      	bne.n	800b550 <__libc_init_array+0x24>
 800b53c:	4d0b      	ldr	r5, [pc, #44]	; (800b56c <__libc_init_array+0x40>)
 800b53e:	4c0c      	ldr	r4, [pc, #48]	; (800b570 <__libc_init_array+0x44>)
 800b540:	f002 f894 	bl	800d66c <_init>
 800b544:	1b64      	subs	r4, r4, r5
 800b546:	10a4      	asrs	r4, r4, #2
 800b548:	2600      	movs	r6, #0
 800b54a:	42a6      	cmp	r6, r4
 800b54c:	d105      	bne.n	800b55a <__libc_init_array+0x2e>
 800b54e:	bd70      	pop	{r4, r5, r6, pc}
 800b550:	f855 3b04 	ldr.w	r3, [r5], #4
 800b554:	4798      	blx	r3
 800b556:	3601      	adds	r6, #1
 800b558:	e7ee      	b.n	800b538 <__libc_init_array+0xc>
 800b55a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b55e:	4798      	blx	r3
 800b560:	3601      	adds	r6, #1
 800b562:	e7f2      	b.n	800b54a <__libc_init_array+0x1e>
 800b564:	0800db40 	.word	0x0800db40
 800b568:	0800db40 	.word	0x0800db40
 800b56c:	0800db40 	.word	0x0800db40
 800b570:	0800db44 	.word	0x0800db44

0800b574 <__retarget_lock_acquire_recursive>:
 800b574:	4770      	bx	lr

0800b576 <__retarget_lock_release_recursive>:
 800b576:	4770      	bx	lr

0800b578 <__assert_func>:
 800b578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b57a:	4614      	mov	r4, r2
 800b57c:	461a      	mov	r2, r3
 800b57e:	4b09      	ldr	r3, [pc, #36]	; (800b5a4 <__assert_func+0x2c>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4605      	mov	r5, r0
 800b584:	68d8      	ldr	r0, [r3, #12]
 800b586:	b14c      	cbz	r4, 800b59c <__assert_func+0x24>
 800b588:	4b07      	ldr	r3, [pc, #28]	; (800b5a8 <__assert_func+0x30>)
 800b58a:	9100      	str	r1, [sp, #0]
 800b58c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b590:	4906      	ldr	r1, [pc, #24]	; (800b5ac <__assert_func+0x34>)
 800b592:	462b      	mov	r3, r5
 800b594:	f001 fd0c 	bl	800cfb0 <fiprintf>
 800b598:	f001 fd54 	bl	800d044 <abort>
 800b59c:	4b04      	ldr	r3, [pc, #16]	; (800b5b0 <__assert_func+0x38>)
 800b59e:	461c      	mov	r4, r3
 800b5a0:	e7f3      	b.n	800b58a <__assert_func+0x12>
 800b5a2:	bf00      	nop
 800b5a4:	20000120 	.word	0x20000120
 800b5a8:	0800d90e 	.word	0x0800d90e
 800b5ac:	0800d91b 	.word	0x0800d91b
 800b5b0:	0800d949 	.word	0x0800d949

0800b5b4 <quorem>:
 800b5b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b8:	6903      	ldr	r3, [r0, #16]
 800b5ba:	690c      	ldr	r4, [r1, #16]
 800b5bc:	42a3      	cmp	r3, r4
 800b5be:	4607      	mov	r7, r0
 800b5c0:	db7e      	blt.n	800b6c0 <quorem+0x10c>
 800b5c2:	3c01      	subs	r4, #1
 800b5c4:	f101 0814 	add.w	r8, r1, #20
 800b5c8:	f100 0514 	add.w	r5, r0, #20
 800b5cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b5d0:	9301      	str	r3, [sp, #4]
 800b5d2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b5d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b5da:	3301      	adds	r3, #1
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b5e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b5e6:	fbb2 f6f3 	udiv	r6, r2, r3
 800b5ea:	d331      	bcc.n	800b650 <quorem+0x9c>
 800b5ec:	f04f 0e00 	mov.w	lr, #0
 800b5f0:	4640      	mov	r0, r8
 800b5f2:	46ac      	mov	ip, r5
 800b5f4:	46f2      	mov	sl, lr
 800b5f6:	f850 2b04 	ldr.w	r2, [r0], #4
 800b5fa:	b293      	uxth	r3, r2
 800b5fc:	fb06 e303 	mla	r3, r6, r3, lr
 800b600:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b604:	0c1a      	lsrs	r2, r3, #16
 800b606:	b29b      	uxth	r3, r3
 800b608:	ebaa 0303 	sub.w	r3, sl, r3
 800b60c:	f8dc a000 	ldr.w	sl, [ip]
 800b610:	fa13 f38a 	uxtah	r3, r3, sl
 800b614:	fb06 220e 	mla	r2, r6, lr, r2
 800b618:	9300      	str	r3, [sp, #0]
 800b61a:	9b00      	ldr	r3, [sp, #0]
 800b61c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b620:	b292      	uxth	r2, r2
 800b622:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b626:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b62a:	f8bd 3000 	ldrh.w	r3, [sp]
 800b62e:	4581      	cmp	r9, r0
 800b630:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b634:	f84c 3b04 	str.w	r3, [ip], #4
 800b638:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b63c:	d2db      	bcs.n	800b5f6 <quorem+0x42>
 800b63e:	f855 300b 	ldr.w	r3, [r5, fp]
 800b642:	b92b      	cbnz	r3, 800b650 <quorem+0x9c>
 800b644:	9b01      	ldr	r3, [sp, #4]
 800b646:	3b04      	subs	r3, #4
 800b648:	429d      	cmp	r5, r3
 800b64a:	461a      	mov	r2, r3
 800b64c:	d32c      	bcc.n	800b6a8 <quorem+0xf4>
 800b64e:	613c      	str	r4, [r7, #16]
 800b650:	4638      	mov	r0, r7
 800b652:	f001 f9a7 	bl	800c9a4 <__mcmp>
 800b656:	2800      	cmp	r0, #0
 800b658:	db22      	blt.n	800b6a0 <quorem+0xec>
 800b65a:	3601      	adds	r6, #1
 800b65c:	4629      	mov	r1, r5
 800b65e:	2000      	movs	r0, #0
 800b660:	f858 2b04 	ldr.w	r2, [r8], #4
 800b664:	f8d1 c000 	ldr.w	ip, [r1]
 800b668:	b293      	uxth	r3, r2
 800b66a:	1ac3      	subs	r3, r0, r3
 800b66c:	0c12      	lsrs	r2, r2, #16
 800b66e:	fa13 f38c 	uxtah	r3, r3, ip
 800b672:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b676:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b680:	45c1      	cmp	r9, r8
 800b682:	f841 3b04 	str.w	r3, [r1], #4
 800b686:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b68a:	d2e9      	bcs.n	800b660 <quorem+0xac>
 800b68c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b690:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b694:	b922      	cbnz	r2, 800b6a0 <quorem+0xec>
 800b696:	3b04      	subs	r3, #4
 800b698:	429d      	cmp	r5, r3
 800b69a:	461a      	mov	r2, r3
 800b69c:	d30a      	bcc.n	800b6b4 <quorem+0x100>
 800b69e:	613c      	str	r4, [r7, #16]
 800b6a0:	4630      	mov	r0, r6
 800b6a2:	b003      	add	sp, #12
 800b6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6a8:	6812      	ldr	r2, [r2, #0]
 800b6aa:	3b04      	subs	r3, #4
 800b6ac:	2a00      	cmp	r2, #0
 800b6ae:	d1ce      	bne.n	800b64e <quorem+0x9a>
 800b6b0:	3c01      	subs	r4, #1
 800b6b2:	e7c9      	b.n	800b648 <quorem+0x94>
 800b6b4:	6812      	ldr	r2, [r2, #0]
 800b6b6:	3b04      	subs	r3, #4
 800b6b8:	2a00      	cmp	r2, #0
 800b6ba:	d1f0      	bne.n	800b69e <quorem+0xea>
 800b6bc:	3c01      	subs	r4, #1
 800b6be:	e7eb      	b.n	800b698 <quorem+0xe4>
 800b6c0:	2000      	movs	r0, #0
 800b6c2:	e7ee      	b.n	800b6a2 <quorem+0xee>
 800b6c4:	0000      	movs	r0, r0
	...

0800b6c8 <_dtoa_r>:
 800b6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6cc:	ed2d 8b04 	vpush	{d8-d9}
 800b6d0:	69c5      	ldr	r5, [r0, #28]
 800b6d2:	b093      	sub	sp, #76	; 0x4c
 800b6d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b6d8:	ec57 6b10 	vmov	r6, r7, d0
 800b6dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b6e0:	9107      	str	r1, [sp, #28]
 800b6e2:	4604      	mov	r4, r0
 800b6e4:	920a      	str	r2, [sp, #40]	; 0x28
 800b6e6:	930d      	str	r3, [sp, #52]	; 0x34
 800b6e8:	b975      	cbnz	r5, 800b708 <_dtoa_r+0x40>
 800b6ea:	2010      	movs	r0, #16
 800b6ec:	f000 fe2a 	bl	800c344 <malloc>
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	61e0      	str	r0, [r4, #28]
 800b6f4:	b920      	cbnz	r0, 800b700 <_dtoa_r+0x38>
 800b6f6:	4bae      	ldr	r3, [pc, #696]	; (800b9b0 <_dtoa_r+0x2e8>)
 800b6f8:	21ef      	movs	r1, #239	; 0xef
 800b6fa:	48ae      	ldr	r0, [pc, #696]	; (800b9b4 <_dtoa_r+0x2ec>)
 800b6fc:	f7ff ff3c 	bl	800b578 <__assert_func>
 800b700:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b704:	6005      	str	r5, [r0, #0]
 800b706:	60c5      	str	r5, [r0, #12]
 800b708:	69e3      	ldr	r3, [r4, #28]
 800b70a:	6819      	ldr	r1, [r3, #0]
 800b70c:	b151      	cbz	r1, 800b724 <_dtoa_r+0x5c>
 800b70e:	685a      	ldr	r2, [r3, #4]
 800b710:	604a      	str	r2, [r1, #4]
 800b712:	2301      	movs	r3, #1
 800b714:	4093      	lsls	r3, r2
 800b716:	608b      	str	r3, [r1, #8]
 800b718:	4620      	mov	r0, r4
 800b71a:	f000 ff07 	bl	800c52c <_Bfree>
 800b71e:	69e3      	ldr	r3, [r4, #28]
 800b720:	2200      	movs	r2, #0
 800b722:	601a      	str	r2, [r3, #0]
 800b724:	1e3b      	subs	r3, r7, #0
 800b726:	bfbb      	ittet	lt
 800b728:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b72c:	9303      	strlt	r3, [sp, #12]
 800b72e:	2300      	movge	r3, #0
 800b730:	2201      	movlt	r2, #1
 800b732:	bfac      	ite	ge
 800b734:	f8c8 3000 	strge.w	r3, [r8]
 800b738:	f8c8 2000 	strlt.w	r2, [r8]
 800b73c:	4b9e      	ldr	r3, [pc, #632]	; (800b9b8 <_dtoa_r+0x2f0>)
 800b73e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b742:	ea33 0308 	bics.w	r3, r3, r8
 800b746:	d11b      	bne.n	800b780 <_dtoa_r+0xb8>
 800b748:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b74a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b74e:	6013      	str	r3, [r2, #0]
 800b750:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b754:	4333      	orrs	r3, r6
 800b756:	f000 8593 	beq.w	800c280 <_dtoa_r+0xbb8>
 800b75a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b75c:	b963      	cbnz	r3, 800b778 <_dtoa_r+0xb0>
 800b75e:	4b97      	ldr	r3, [pc, #604]	; (800b9bc <_dtoa_r+0x2f4>)
 800b760:	e027      	b.n	800b7b2 <_dtoa_r+0xea>
 800b762:	4b97      	ldr	r3, [pc, #604]	; (800b9c0 <_dtoa_r+0x2f8>)
 800b764:	9300      	str	r3, [sp, #0]
 800b766:	3308      	adds	r3, #8
 800b768:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b76a:	6013      	str	r3, [r2, #0]
 800b76c:	9800      	ldr	r0, [sp, #0]
 800b76e:	b013      	add	sp, #76	; 0x4c
 800b770:	ecbd 8b04 	vpop	{d8-d9}
 800b774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b778:	4b90      	ldr	r3, [pc, #576]	; (800b9bc <_dtoa_r+0x2f4>)
 800b77a:	9300      	str	r3, [sp, #0]
 800b77c:	3303      	adds	r3, #3
 800b77e:	e7f3      	b.n	800b768 <_dtoa_r+0xa0>
 800b780:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b784:	2200      	movs	r2, #0
 800b786:	ec51 0b17 	vmov	r0, r1, d7
 800b78a:	eeb0 8a47 	vmov.f32	s16, s14
 800b78e:	eef0 8a67 	vmov.f32	s17, s15
 800b792:	2300      	movs	r3, #0
 800b794:	f7f5 f9d0 	bl	8000b38 <__aeabi_dcmpeq>
 800b798:	4681      	mov	r9, r0
 800b79a:	b160      	cbz	r0, 800b7b6 <_dtoa_r+0xee>
 800b79c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b79e:	2301      	movs	r3, #1
 800b7a0:	6013      	str	r3, [r2, #0]
 800b7a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	f000 8568 	beq.w	800c27a <_dtoa_r+0xbb2>
 800b7aa:	4b86      	ldr	r3, [pc, #536]	; (800b9c4 <_dtoa_r+0x2fc>)
 800b7ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b7ae:	6013      	str	r3, [r2, #0]
 800b7b0:	3b01      	subs	r3, #1
 800b7b2:	9300      	str	r3, [sp, #0]
 800b7b4:	e7da      	b.n	800b76c <_dtoa_r+0xa4>
 800b7b6:	aa10      	add	r2, sp, #64	; 0x40
 800b7b8:	a911      	add	r1, sp, #68	; 0x44
 800b7ba:	4620      	mov	r0, r4
 800b7bc:	eeb0 0a48 	vmov.f32	s0, s16
 800b7c0:	eef0 0a68 	vmov.f32	s1, s17
 800b7c4:	f001 f994 	bl	800caf0 <__d2b>
 800b7c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b7cc:	4682      	mov	sl, r0
 800b7ce:	2d00      	cmp	r5, #0
 800b7d0:	d07f      	beq.n	800b8d2 <_dtoa_r+0x20a>
 800b7d2:	ee18 3a90 	vmov	r3, s17
 800b7d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7da:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b7de:	ec51 0b18 	vmov	r0, r1, d8
 800b7e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b7e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b7ea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	4b75      	ldr	r3, [pc, #468]	; (800b9c8 <_dtoa_r+0x300>)
 800b7f4:	f7f4 fd80 	bl	80002f8 <__aeabi_dsub>
 800b7f8:	a367      	add	r3, pc, #412	; (adr r3, 800b998 <_dtoa_r+0x2d0>)
 800b7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fe:	f7f4 ff33 	bl	8000668 <__aeabi_dmul>
 800b802:	a367      	add	r3, pc, #412	; (adr r3, 800b9a0 <_dtoa_r+0x2d8>)
 800b804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b808:	f7f4 fd78 	bl	80002fc <__adddf3>
 800b80c:	4606      	mov	r6, r0
 800b80e:	4628      	mov	r0, r5
 800b810:	460f      	mov	r7, r1
 800b812:	f7f4 febf 	bl	8000594 <__aeabi_i2d>
 800b816:	a364      	add	r3, pc, #400	; (adr r3, 800b9a8 <_dtoa_r+0x2e0>)
 800b818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81c:	f7f4 ff24 	bl	8000668 <__aeabi_dmul>
 800b820:	4602      	mov	r2, r0
 800b822:	460b      	mov	r3, r1
 800b824:	4630      	mov	r0, r6
 800b826:	4639      	mov	r1, r7
 800b828:	f7f4 fd68 	bl	80002fc <__adddf3>
 800b82c:	4606      	mov	r6, r0
 800b82e:	460f      	mov	r7, r1
 800b830:	f7f5 f9ca 	bl	8000bc8 <__aeabi_d2iz>
 800b834:	2200      	movs	r2, #0
 800b836:	4683      	mov	fp, r0
 800b838:	2300      	movs	r3, #0
 800b83a:	4630      	mov	r0, r6
 800b83c:	4639      	mov	r1, r7
 800b83e:	f7f5 f985 	bl	8000b4c <__aeabi_dcmplt>
 800b842:	b148      	cbz	r0, 800b858 <_dtoa_r+0x190>
 800b844:	4658      	mov	r0, fp
 800b846:	f7f4 fea5 	bl	8000594 <__aeabi_i2d>
 800b84a:	4632      	mov	r2, r6
 800b84c:	463b      	mov	r3, r7
 800b84e:	f7f5 f973 	bl	8000b38 <__aeabi_dcmpeq>
 800b852:	b908      	cbnz	r0, 800b858 <_dtoa_r+0x190>
 800b854:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b858:	f1bb 0f16 	cmp.w	fp, #22
 800b85c:	d857      	bhi.n	800b90e <_dtoa_r+0x246>
 800b85e:	4b5b      	ldr	r3, [pc, #364]	; (800b9cc <_dtoa_r+0x304>)
 800b860:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b868:	ec51 0b18 	vmov	r0, r1, d8
 800b86c:	f7f5 f96e 	bl	8000b4c <__aeabi_dcmplt>
 800b870:	2800      	cmp	r0, #0
 800b872:	d04e      	beq.n	800b912 <_dtoa_r+0x24a>
 800b874:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b878:	2300      	movs	r3, #0
 800b87a:	930c      	str	r3, [sp, #48]	; 0x30
 800b87c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b87e:	1b5b      	subs	r3, r3, r5
 800b880:	1e5a      	subs	r2, r3, #1
 800b882:	bf45      	ittet	mi
 800b884:	f1c3 0301 	rsbmi	r3, r3, #1
 800b888:	9305      	strmi	r3, [sp, #20]
 800b88a:	2300      	movpl	r3, #0
 800b88c:	2300      	movmi	r3, #0
 800b88e:	9206      	str	r2, [sp, #24]
 800b890:	bf54      	ite	pl
 800b892:	9305      	strpl	r3, [sp, #20]
 800b894:	9306      	strmi	r3, [sp, #24]
 800b896:	f1bb 0f00 	cmp.w	fp, #0
 800b89a:	db3c      	blt.n	800b916 <_dtoa_r+0x24e>
 800b89c:	9b06      	ldr	r3, [sp, #24]
 800b89e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b8a2:	445b      	add	r3, fp
 800b8a4:	9306      	str	r3, [sp, #24]
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	9308      	str	r3, [sp, #32]
 800b8aa:	9b07      	ldr	r3, [sp, #28]
 800b8ac:	2b09      	cmp	r3, #9
 800b8ae:	d868      	bhi.n	800b982 <_dtoa_r+0x2ba>
 800b8b0:	2b05      	cmp	r3, #5
 800b8b2:	bfc4      	itt	gt
 800b8b4:	3b04      	subgt	r3, #4
 800b8b6:	9307      	strgt	r3, [sp, #28]
 800b8b8:	9b07      	ldr	r3, [sp, #28]
 800b8ba:	f1a3 0302 	sub.w	r3, r3, #2
 800b8be:	bfcc      	ite	gt
 800b8c0:	2500      	movgt	r5, #0
 800b8c2:	2501      	movle	r5, #1
 800b8c4:	2b03      	cmp	r3, #3
 800b8c6:	f200 8085 	bhi.w	800b9d4 <_dtoa_r+0x30c>
 800b8ca:	e8df f003 	tbb	[pc, r3]
 800b8ce:	3b2e      	.short	0x3b2e
 800b8d0:	5839      	.short	0x5839
 800b8d2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b8d6:	441d      	add	r5, r3
 800b8d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b8dc:	2b20      	cmp	r3, #32
 800b8de:	bfc1      	itttt	gt
 800b8e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b8e4:	fa08 f803 	lslgt.w	r8, r8, r3
 800b8e8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b8ec:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b8f0:	bfd6      	itet	le
 800b8f2:	f1c3 0320 	rsble	r3, r3, #32
 800b8f6:	ea48 0003 	orrgt.w	r0, r8, r3
 800b8fa:	fa06 f003 	lslle.w	r0, r6, r3
 800b8fe:	f7f4 fe39 	bl	8000574 <__aeabi_ui2d>
 800b902:	2201      	movs	r2, #1
 800b904:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b908:	3d01      	subs	r5, #1
 800b90a:	920e      	str	r2, [sp, #56]	; 0x38
 800b90c:	e76f      	b.n	800b7ee <_dtoa_r+0x126>
 800b90e:	2301      	movs	r3, #1
 800b910:	e7b3      	b.n	800b87a <_dtoa_r+0x1b2>
 800b912:	900c      	str	r0, [sp, #48]	; 0x30
 800b914:	e7b2      	b.n	800b87c <_dtoa_r+0x1b4>
 800b916:	9b05      	ldr	r3, [sp, #20]
 800b918:	eba3 030b 	sub.w	r3, r3, fp
 800b91c:	9305      	str	r3, [sp, #20]
 800b91e:	f1cb 0300 	rsb	r3, fp, #0
 800b922:	9308      	str	r3, [sp, #32]
 800b924:	2300      	movs	r3, #0
 800b926:	930b      	str	r3, [sp, #44]	; 0x2c
 800b928:	e7bf      	b.n	800b8aa <_dtoa_r+0x1e2>
 800b92a:	2300      	movs	r3, #0
 800b92c:	9309      	str	r3, [sp, #36]	; 0x24
 800b92e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b930:	2b00      	cmp	r3, #0
 800b932:	dc52      	bgt.n	800b9da <_dtoa_r+0x312>
 800b934:	2301      	movs	r3, #1
 800b936:	9301      	str	r3, [sp, #4]
 800b938:	9304      	str	r3, [sp, #16]
 800b93a:	461a      	mov	r2, r3
 800b93c:	920a      	str	r2, [sp, #40]	; 0x28
 800b93e:	e00b      	b.n	800b958 <_dtoa_r+0x290>
 800b940:	2301      	movs	r3, #1
 800b942:	e7f3      	b.n	800b92c <_dtoa_r+0x264>
 800b944:	2300      	movs	r3, #0
 800b946:	9309      	str	r3, [sp, #36]	; 0x24
 800b948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b94a:	445b      	add	r3, fp
 800b94c:	9301      	str	r3, [sp, #4]
 800b94e:	3301      	adds	r3, #1
 800b950:	2b01      	cmp	r3, #1
 800b952:	9304      	str	r3, [sp, #16]
 800b954:	bfb8      	it	lt
 800b956:	2301      	movlt	r3, #1
 800b958:	69e0      	ldr	r0, [r4, #28]
 800b95a:	2100      	movs	r1, #0
 800b95c:	2204      	movs	r2, #4
 800b95e:	f102 0614 	add.w	r6, r2, #20
 800b962:	429e      	cmp	r6, r3
 800b964:	d93d      	bls.n	800b9e2 <_dtoa_r+0x31a>
 800b966:	6041      	str	r1, [r0, #4]
 800b968:	4620      	mov	r0, r4
 800b96a:	f000 fd9f 	bl	800c4ac <_Balloc>
 800b96e:	9000      	str	r0, [sp, #0]
 800b970:	2800      	cmp	r0, #0
 800b972:	d139      	bne.n	800b9e8 <_dtoa_r+0x320>
 800b974:	4b16      	ldr	r3, [pc, #88]	; (800b9d0 <_dtoa_r+0x308>)
 800b976:	4602      	mov	r2, r0
 800b978:	f240 11af 	movw	r1, #431	; 0x1af
 800b97c:	e6bd      	b.n	800b6fa <_dtoa_r+0x32>
 800b97e:	2301      	movs	r3, #1
 800b980:	e7e1      	b.n	800b946 <_dtoa_r+0x27e>
 800b982:	2501      	movs	r5, #1
 800b984:	2300      	movs	r3, #0
 800b986:	9307      	str	r3, [sp, #28]
 800b988:	9509      	str	r5, [sp, #36]	; 0x24
 800b98a:	f04f 33ff 	mov.w	r3, #4294967295
 800b98e:	9301      	str	r3, [sp, #4]
 800b990:	9304      	str	r3, [sp, #16]
 800b992:	2200      	movs	r2, #0
 800b994:	2312      	movs	r3, #18
 800b996:	e7d1      	b.n	800b93c <_dtoa_r+0x274>
 800b998:	636f4361 	.word	0x636f4361
 800b99c:	3fd287a7 	.word	0x3fd287a7
 800b9a0:	8b60c8b3 	.word	0x8b60c8b3
 800b9a4:	3fc68a28 	.word	0x3fc68a28
 800b9a8:	509f79fb 	.word	0x509f79fb
 800b9ac:	3fd34413 	.word	0x3fd34413
 800b9b0:	0800d89d 	.word	0x0800d89d
 800b9b4:	0800d957 	.word	0x0800d957
 800b9b8:	7ff00000 	.word	0x7ff00000
 800b9bc:	0800d953 	.word	0x0800d953
 800b9c0:	0800d94a 	.word	0x0800d94a
 800b9c4:	0800d87a 	.word	0x0800d87a
 800b9c8:	3ff80000 	.word	0x3ff80000
 800b9cc:	0800da48 	.word	0x0800da48
 800b9d0:	0800d9af 	.word	0x0800d9af
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	9309      	str	r3, [sp, #36]	; 0x24
 800b9d8:	e7d7      	b.n	800b98a <_dtoa_r+0x2c2>
 800b9da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9dc:	9301      	str	r3, [sp, #4]
 800b9de:	9304      	str	r3, [sp, #16]
 800b9e0:	e7ba      	b.n	800b958 <_dtoa_r+0x290>
 800b9e2:	3101      	adds	r1, #1
 800b9e4:	0052      	lsls	r2, r2, #1
 800b9e6:	e7ba      	b.n	800b95e <_dtoa_r+0x296>
 800b9e8:	69e3      	ldr	r3, [r4, #28]
 800b9ea:	9a00      	ldr	r2, [sp, #0]
 800b9ec:	601a      	str	r2, [r3, #0]
 800b9ee:	9b04      	ldr	r3, [sp, #16]
 800b9f0:	2b0e      	cmp	r3, #14
 800b9f2:	f200 80a8 	bhi.w	800bb46 <_dtoa_r+0x47e>
 800b9f6:	2d00      	cmp	r5, #0
 800b9f8:	f000 80a5 	beq.w	800bb46 <_dtoa_r+0x47e>
 800b9fc:	f1bb 0f00 	cmp.w	fp, #0
 800ba00:	dd38      	ble.n	800ba74 <_dtoa_r+0x3ac>
 800ba02:	4bc0      	ldr	r3, [pc, #768]	; (800bd04 <_dtoa_r+0x63c>)
 800ba04:	f00b 020f 	and.w	r2, fp, #15
 800ba08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba0c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ba10:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ba14:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ba18:	d019      	beq.n	800ba4e <_dtoa_r+0x386>
 800ba1a:	4bbb      	ldr	r3, [pc, #748]	; (800bd08 <_dtoa_r+0x640>)
 800ba1c:	ec51 0b18 	vmov	r0, r1, d8
 800ba20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ba24:	f7f4 ff4a 	bl	80008bc <__aeabi_ddiv>
 800ba28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba2c:	f008 080f 	and.w	r8, r8, #15
 800ba30:	2503      	movs	r5, #3
 800ba32:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800bd08 <_dtoa_r+0x640>
 800ba36:	f1b8 0f00 	cmp.w	r8, #0
 800ba3a:	d10a      	bne.n	800ba52 <_dtoa_r+0x38a>
 800ba3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba40:	4632      	mov	r2, r6
 800ba42:	463b      	mov	r3, r7
 800ba44:	f7f4 ff3a 	bl	80008bc <__aeabi_ddiv>
 800ba48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba4c:	e02b      	b.n	800baa6 <_dtoa_r+0x3de>
 800ba4e:	2502      	movs	r5, #2
 800ba50:	e7ef      	b.n	800ba32 <_dtoa_r+0x36a>
 800ba52:	f018 0f01 	tst.w	r8, #1
 800ba56:	d008      	beq.n	800ba6a <_dtoa_r+0x3a2>
 800ba58:	4630      	mov	r0, r6
 800ba5a:	4639      	mov	r1, r7
 800ba5c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ba60:	f7f4 fe02 	bl	8000668 <__aeabi_dmul>
 800ba64:	3501      	adds	r5, #1
 800ba66:	4606      	mov	r6, r0
 800ba68:	460f      	mov	r7, r1
 800ba6a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ba6e:	f109 0908 	add.w	r9, r9, #8
 800ba72:	e7e0      	b.n	800ba36 <_dtoa_r+0x36e>
 800ba74:	f000 809f 	beq.w	800bbb6 <_dtoa_r+0x4ee>
 800ba78:	f1cb 0600 	rsb	r6, fp, #0
 800ba7c:	4ba1      	ldr	r3, [pc, #644]	; (800bd04 <_dtoa_r+0x63c>)
 800ba7e:	4fa2      	ldr	r7, [pc, #648]	; (800bd08 <_dtoa_r+0x640>)
 800ba80:	f006 020f 	and.w	r2, r6, #15
 800ba84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8c:	ec51 0b18 	vmov	r0, r1, d8
 800ba90:	f7f4 fdea 	bl	8000668 <__aeabi_dmul>
 800ba94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba98:	1136      	asrs	r6, r6, #4
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	2502      	movs	r5, #2
 800ba9e:	2e00      	cmp	r6, #0
 800baa0:	d17e      	bne.n	800bba0 <_dtoa_r+0x4d8>
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d1d0      	bne.n	800ba48 <_dtoa_r+0x380>
 800baa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800baa8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800baac:	2b00      	cmp	r3, #0
 800baae:	f000 8084 	beq.w	800bbba <_dtoa_r+0x4f2>
 800bab2:	4b96      	ldr	r3, [pc, #600]	; (800bd0c <_dtoa_r+0x644>)
 800bab4:	2200      	movs	r2, #0
 800bab6:	4640      	mov	r0, r8
 800bab8:	4649      	mov	r1, r9
 800baba:	f7f5 f847 	bl	8000b4c <__aeabi_dcmplt>
 800babe:	2800      	cmp	r0, #0
 800bac0:	d07b      	beq.n	800bbba <_dtoa_r+0x4f2>
 800bac2:	9b04      	ldr	r3, [sp, #16]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d078      	beq.n	800bbba <_dtoa_r+0x4f2>
 800bac8:	9b01      	ldr	r3, [sp, #4]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	dd39      	ble.n	800bb42 <_dtoa_r+0x47a>
 800bace:	4b90      	ldr	r3, [pc, #576]	; (800bd10 <_dtoa_r+0x648>)
 800bad0:	2200      	movs	r2, #0
 800bad2:	4640      	mov	r0, r8
 800bad4:	4649      	mov	r1, r9
 800bad6:	f7f4 fdc7 	bl	8000668 <__aeabi_dmul>
 800bada:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bade:	9e01      	ldr	r6, [sp, #4]
 800bae0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800bae4:	3501      	adds	r5, #1
 800bae6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800baea:	4628      	mov	r0, r5
 800baec:	f7f4 fd52 	bl	8000594 <__aeabi_i2d>
 800baf0:	4642      	mov	r2, r8
 800baf2:	464b      	mov	r3, r9
 800baf4:	f7f4 fdb8 	bl	8000668 <__aeabi_dmul>
 800baf8:	4b86      	ldr	r3, [pc, #536]	; (800bd14 <_dtoa_r+0x64c>)
 800bafa:	2200      	movs	r2, #0
 800bafc:	f7f4 fbfe 	bl	80002fc <__adddf3>
 800bb00:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bb04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb08:	9303      	str	r3, [sp, #12]
 800bb0a:	2e00      	cmp	r6, #0
 800bb0c:	d158      	bne.n	800bbc0 <_dtoa_r+0x4f8>
 800bb0e:	4b82      	ldr	r3, [pc, #520]	; (800bd18 <_dtoa_r+0x650>)
 800bb10:	2200      	movs	r2, #0
 800bb12:	4640      	mov	r0, r8
 800bb14:	4649      	mov	r1, r9
 800bb16:	f7f4 fbef 	bl	80002f8 <__aeabi_dsub>
 800bb1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb1e:	4680      	mov	r8, r0
 800bb20:	4689      	mov	r9, r1
 800bb22:	f7f5 f831 	bl	8000b88 <__aeabi_dcmpgt>
 800bb26:	2800      	cmp	r0, #0
 800bb28:	f040 8296 	bne.w	800c058 <_dtoa_r+0x990>
 800bb2c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bb30:	4640      	mov	r0, r8
 800bb32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb36:	4649      	mov	r1, r9
 800bb38:	f7f5 f808 	bl	8000b4c <__aeabi_dcmplt>
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	f040 8289 	bne.w	800c054 <_dtoa_r+0x98c>
 800bb42:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bb46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	f2c0 814e 	blt.w	800bdea <_dtoa_r+0x722>
 800bb4e:	f1bb 0f0e 	cmp.w	fp, #14
 800bb52:	f300 814a 	bgt.w	800bdea <_dtoa_r+0x722>
 800bb56:	4b6b      	ldr	r3, [pc, #428]	; (800bd04 <_dtoa_r+0x63c>)
 800bb58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bb5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	f280 80dc 	bge.w	800bd20 <_dtoa_r+0x658>
 800bb68:	9b04      	ldr	r3, [sp, #16]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	f300 80d8 	bgt.w	800bd20 <_dtoa_r+0x658>
 800bb70:	f040 826f 	bne.w	800c052 <_dtoa_r+0x98a>
 800bb74:	4b68      	ldr	r3, [pc, #416]	; (800bd18 <_dtoa_r+0x650>)
 800bb76:	2200      	movs	r2, #0
 800bb78:	4640      	mov	r0, r8
 800bb7a:	4649      	mov	r1, r9
 800bb7c:	f7f4 fd74 	bl	8000668 <__aeabi_dmul>
 800bb80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb84:	f7f4 fff6 	bl	8000b74 <__aeabi_dcmpge>
 800bb88:	9e04      	ldr	r6, [sp, #16]
 800bb8a:	4637      	mov	r7, r6
 800bb8c:	2800      	cmp	r0, #0
 800bb8e:	f040 8245 	bne.w	800c01c <_dtoa_r+0x954>
 800bb92:	9d00      	ldr	r5, [sp, #0]
 800bb94:	2331      	movs	r3, #49	; 0x31
 800bb96:	f805 3b01 	strb.w	r3, [r5], #1
 800bb9a:	f10b 0b01 	add.w	fp, fp, #1
 800bb9e:	e241      	b.n	800c024 <_dtoa_r+0x95c>
 800bba0:	07f2      	lsls	r2, r6, #31
 800bba2:	d505      	bpl.n	800bbb0 <_dtoa_r+0x4e8>
 800bba4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bba8:	f7f4 fd5e 	bl	8000668 <__aeabi_dmul>
 800bbac:	3501      	adds	r5, #1
 800bbae:	2301      	movs	r3, #1
 800bbb0:	1076      	asrs	r6, r6, #1
 800bbb2:	3708      	adds	r7, #8
 800bbb4:	e773      	b.n	800ba9e <_dtoa_r+0x3d6>
 800bbb6:	2502      	movs	r5, #2
 800bbb8:	e775      	b.n	800baa6 <_dtoa_r+0x3de>
 800bbba:	9e04      	ldr	r6, [sp, #16]
 800bbbc:	465f      	mov	r7, fp
 800bbbe:	e792      	b.n	800bae6 <_dtoa_r+0x41e>
 800bbc0:	9900      	ldr	r1, [sp, #0]
 800bbc2:	4b50      	ldr	r3, [pc, #320]	; (800bd04 <_dtoa_r+0x63c>)
 800bbc4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bbc8:	4431      	add	r1, r6
 800bbca:	9102      	str	r1, [sp, #8]
 800bbcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bbce:	eeb0 9a47 	vmov.f32	s18, s14
 800bbd2:	eef0 9a67 	vmov.f32	s19, s15
 800bbd6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bbda:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bbde:	2900      	cmp	r1, #0
 800bbe0:	d044      	beq.n	800bc6c <_dtoa_r+0x5a4>
 800bbe2:	494e      	ldr	r1, [pc, #312]	; (800bd1c <_dtoa_r+0x654>)
 800bbe4:	2000      	movs	r0, #0
 800bbe6:	f7f4 fe69 	bl	80008bc <__aeabi_ddiv>
 800bbea:	ec53 2b19 	vmov	r2, r3, d9
 800bbee:	f7f4 fb83 	bl	80002f8 <__aeabi_dsub>
 800bbf2:	9d00      	ldr	r5, [sp, #0]
 800bbf4:	ec41 0b19 	vmov	d9, r0, r1
 800bbf8:	4649      	mov	r1, r9
 800bbfa:	4640      	mov	r0, r8
 800bbfc:	f7f4 ffe4 	bl	8000bc8 <__aeabi_d2iz>
 800bc00:	4606      	mov	r6, r0
 800bc02:	f7f4 fcc7 	bl	8000594 <__aeabi_i2d>
 800bc06:	4602      	mov	r2, r0
 800bc08:	460b      	mov	r3, r1
 800bc0a:	4640      	mov	r0, r8
 800bc0c:	4649      	mov	r1, r9
 800bc0e:	f7f4 fb73 	bl	80002f8 <__aeabi_dsub>
 800bc12:	3630      	adds	r6, #48	; 0x30
 800bc14:	f805 6b01 	strb.w	r6, [r5], #1
 800bc18:	ec53 2b19 	vmov	r2, r3, d9
 800bc1c:	4680      	mov	r8, r0
 800bc1e:	4689      	mov	r9, r1
 800bc20:	f7f4 ff94 	bl	8000b4c <__aeabi_dcmplt>
 800bc24:	2800      	cmp	r0, #0
 800bc26:	d164      	bne.n	800bcf2 <_dtoa_r+0x62a>
 800bc28:	4642      	mov	r2, r8
 800bc2a:	464b      	mov	r3, r9
 800bc2c:	4937      	ldr	r1, [pc, #220]	; (800bd0c <_dtoa_r+0x644>)
 800bc2e:	2000      	movs	r0, #0
 800bc30:	f7f4 fb62 	bl	80002f8 <__aeabi_dsub>
 800bc34:	ec53 2b19 	vmov	r2, r3, d9
 800bc38:	f7f4 ff88 	bl	8000b4c <__aeabi_dcmplt>
 800bc3c:	2800      	cmp	r0, #0
 800bc3e:	f040 80b6 	bne.w	800bdae <_dtoa_r+0x6e6>
 800bc42:	9b02      	ldr	r3, [sp, #8]
 800bc44:	429d      	cmp	r5, r3
 800bc46:	f43f af7c 	beq.w	800bb42 <_dtoa_r+0x47a>
 800bc4a:	4b31      	ldr	r3, [pc, #196]	; (800bd10 <_dtoa_r+0x648>)
 800bc4c:	ec51 0b19 	vmov	r0, r1, d9
 800bc50:	2200      	movs	r2, #0
 800bc52:	f7f4 fd09 	bl	8000668 <__aeabi_dmul>
 800bc56:	4b2e      	ldr	r3, [pc, #184]	; (800bd10 <_dtoa_r+0x648>)
 800bc58:	ec41 0b19 	vmov	d9, r0, r1
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	4640      	mov	r0, r8
 800bc60:	4649      	mov	r1, r9
 800bc62:	f7f4 fd01 	bl	8000668 <__aeabi_dmul>
 800bc66:	4680      	mov	r8, r0
 800bc68:	4689      	mov	r9, r1
 800bc6a:	e7c5      	b.n	800bbf8 <_dtoa_r+0x530>
 800bc6c:	ec51 0b17 	vmov	r0, r1, d7
 800bc70:	f7f4 fcfa 	bl	8000668 <__aeabi_dmul>
 800bc74:	9b02      	ldr	r3, [sp, #8]
 800bc76:	9d00      	ldr	r5, [sp, #0]
 800bc78:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc7a:	ec41 0b19 	vmov	d9, r0, r1
 800bc7e:	4649      	mov	r1, r9
 800bc80:	4640      	mov	r0, r8
 800bc82:	f7f4 ffa1 	bl	8000bc8 <__aeabi_d2iz>
 800bc86:	4606      	mov	r6, r0
 800bc88:	f7f4 fc84 	bl	8000594 <__aeabi_i2d>
 800bc8c:	3630      	adds	r6, #48	; 0x30
 800bc8e:	4602      	mov	r2, r0
 800bc90:	460b      	mov	r3, r1
 800bc92:	4640      	mov	r0, r8
 800bc94:	4649      	mov	r1, r9
 800bc96:	f7f4 fb2f 	bl	80002f8 <__aeabi_dsub>
 800bc9a:	f805 6b01 	strb.w	r6, [r5], #1
 800bc9e:	9b02      	ldr	r3, [sp, #8]
 800bca0:	429d      	cmp	r5, r3
 800bca2:	4680      	mov	r8, r0
 800bca4:	4689      	mov	r9, r1
 800bca6:	f04f 0200 	mov.w	r2, #0
 800bcaa:	d124      	bne.n	800bcf6 <_dtoa_r+0x62e>
 800bcac:	4b1b      	ldr	r3, [pc, #108]	; (800bd1c <_dtoa_r+0x654>)
 800bcae:	ec51 0b19 	vmov	r0, r1, d9
 800bcb2:	f7f4 fb23 	bl	80002fc <__adddf3>
 800bcb6:	4602      	mov	r2, r0
 800bcb8:	460b      	mov	r3, r1
 800bcba:	4640      	mov	r0, r8
 800bcbc:	4649      	mov	r1, r9
 800bcbe:	f7f4 ff63 	bl	8000b88 <__aeabi_dcmpgt>
 800bcc2:	2800      	cmp	r0, #0
 800bcc4:	d173      	bne.n	800bdae <_dtoa_r+0x6e6>
 800bcc6:	ec53 2b19 	vmov	r2, r3, d9
 800bcca:	4914      	ldr	r1, [pc, #80]	; (800bd1c <_dtoa_r+0x654>)
 800bccc:	2000      	movs	r0, #0
 800bcce:	f7f4 fb13 	bl	80002f8 <__aeabi_dsub>
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	4640      	mov	r0, r8
 800bcd8:	4649      	mov	r1, r9
 800bcda:	f7f4 ff37 	bl	8000b4c <__aeabi_dcmplt>
 800bcde:	2800      	cmp	r0, #0
 800bce0:	f43f af2f 	beq.w	800bb42 <_dtoa_r+0x47a>
 800bce4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bce6:	1e6b      	subs	r3, r5, #1
 800bce8:	930f      	str	r3, [sp, #60]	; 0x3c
 800bcea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bcee:	2b30      	cmp	r3, #48	; 0x30
 800bcf0:	d0f8      	beq.n	800bce4 <_dtoa_r+0x61c>
 800bcf2:	46bb      	mov	fp, r7
 800bcf4:	e04a      	b.n	800bd8c <_dtoa_r+0x6c4>
 800bcf6:	4b06      	ldr	r3, [pc, #24]	; (800bd10 <_dtoa_r+0x648>)
 800bcf8:	f7f4 fcb6 	bl	8000668 <__aeabi_dmul>
 800bcfc:	4680      	mov	r8, r0
 800bcfe:	4689      	mov	r9, r1
 800bd00:	e7bd      	b.n	800bc7e <_dtoa_r+0x5b6>
 800bd02:	bf00      	nop
 800bd04:	0800da48 	.word	0x0800da48
 800bd08:	0800da20 	.word	0x0800da20
 800bd0c:	3ff00000 	.word	0x3ff00000
 800bd10:	40240000 	.word	0x40240000
 800bd14:	401c0000 	.word	0x401c0000
 800bd18:	40140000 	.word	0x40140000
 800bd1c:	3fe00000 	.word	0x3fe00000
 800bd20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bd24:	9d00      	ldr	r5, [sp, #0]
 800bd26:	4642      	mov	r2, r8
 800bd28:	464b      	mov	r3, r9
 800bd2a:	4630      	mov	r0, r6
 800bd2c:	4639      	mov	r1, r7
 800bd2e:	f7f4 fdc5 	bl	80008bc <__aeabi_ddiv>
 800bd32:	f7f4 ff49 	bl	8000bc8 <__aeabi_d2iz>
 800bd36:	9001      	str	r0, [sp, #4]
 800bd38:	f7f4 fc2c 	bl	8000594 <__aeabi_i2d>
 800bd3c:	4642      	mov	r2, r8
 800bd3e:	464b      	mov	r3, r9
 800bd40:	f7f4 fc92 	bl	8000668 <__aeabi_dmul>
 800bd44:	4602      	mov	r2, r0
 800bd46:	460b      	mov	r3, r1
 800bd48:	4630      	mov	r0, r6
 800bd4a:	4639      	mov	r1, r7
 800bd4c:	f7f4 fad4 	bl	80002f8 <__aeabi_dsub>
 800bd50:	9e01      	ldr	r6, [sp, #4]
 800bd52:	9f04      	ldr	r7, [sp, #16]
 800bd54:	3630      	adds	r6, #48	; 0x30
 800bd56:	f805 6b01 	strb.w	r6, [r5], #1
 800bd5a:	9e00      	ldr	r6, [sp, #0]
 800bd5c:	1bae      	subs	r6, r5, r6
 800bd5e:	42b7      	cmp	r7, r6
 800bd60:	4602      	mov	r2, r0
 800bd62:	460b      	mov	r3, r1
 800bd64:	d134      	bne.n	800bdd0 <_dtoa_r+0x708>
 800bd66:	f7f4 fac9 	bl	80002fc <__adddf3>
 800bd6a:	4642      	mov	r2, r8
 800bd6c:	464b      	mov	r3, r9
 800bd6e:	4606      	mov	r6, r0
 800bd70:	460f      	mov	r7, r1
 800bd72:	f7f4 ff09 	bl	8000b88 <__aeabi_dcmpgt>
 800bd76:	b9c8      	cbnz	r0, 800bdac <_dtoa_r+0x6e4>
 800bd78:	4642      	mov	r2, r8
 800bd7a:	464b      	mov	r3, r9
 800bd7c:	4630      	mov	r0, r6
 800bd7e:	4639      	mov	r1, r7
 800bd80:	f7f4 feda 	bl	8000b38 <__aeabi_dcmpeq>
 800bd84:	b110      	cbz	r0, 800bd8c <_dtoa_r+0x6c4>
 800bd86:	9b01      	ldr	r3, [sp, #4]
 800bd88:	07db      	lsls	r3, r3, #31
 800bd8a:	d40f      	bmi.n	800bdac <_dtoa_r+0x6e4>
 800bd8c:	4651      	mov	r1, sl
 800bd8e:	4620      	mov	r0, r4
 800bd90:	f000 fbcc 	bl	800c52c <_Bfree>
 800bd94:	2300      	movs	r3, #0
 800bd96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd98:	702b      	strb	r3, [r5, #0]
 800bd9a:	f10b 0301 	add.w	r3, fp, #1
 800bd9e:	6013      	str	r3, [r2, #0]
 800bda0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	f43f ace2 	beq.w	800b76c <_dtoa_r+0xa4>
 800bda8:	601d      	str	r5, [r3, #0]
 800bdaa:	e4df      	b.n	800b76c <_dtoa_r+0xa4>
 800bdac:	465f      	mov	r7, fp
 800bdae:	462b      	mov	r3, r5
 800bdb0:	461d      	mov	r5, r3
 800bdb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bdb6:	2a39      	cmp	r2, #57	; 0x39
 800bdb8:	d106      	bne.n	800bdc8 <_dtoa_r+0x700>
 800bdba:	9a00      	ldr	r2, [sp, #0]
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d1f7      	bne.n	800bdb0 <_dtoa_r+0x6e8>
 800bdc0:	9900      	ldr	r1, [sp, #0]
 800bdc2:	2230      	movs	r2, #48	; 0x30
 800bdc4:	3701      	adds	r7, #1
 800bdc6:	700a      	strb	r2, [r1, #0]
 800bdc8:	781a      	ldrb	r2, [r3, #0]
 800bdca:	3201      	adds	r2, #1
 800bdcc:	701a      	strb	r2, [r3, #0]
 800bdce:	e790      	b.n	800bcf2 <_dtoa_r+0x62a>
 800bdd0:	4ba3      	ldr	r3, [pc, #652]	; (800c060 <_dtoa_r+0x998>)
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	f7f4 fc48 	bl	8000668 <__aeabi_dmul>
 800bdd8:	2200      	movs	r2, #0
 800bdda:	2300      	movs	r3, #0
 800bddc:	4606      	mov	r6, r0
 800bdde:	460f      	mov	r7, r1
 800bde0:	f7f4 feaa 	bl	8000b38 <__aeabi_dcmpeq>
 800bde4:	2800      	cmp	r0, #0
 800bde6:	d09e      	beq.n	800bd26 <_dtoa_r+0x65e>
 800bde8:	e7d0      	b.n	800bd8c <_dtoa_r+0x6c4>
 800bdea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdec:	2a00      	cmp	r2, #0
 800bdee:	f000 80ca 	beq.w	800bf86 <_dtoa_r+0x8be>
 800bdf2:	9a07      	ldr	r2, [sp, #28]
 800bdf4:	2a01      	cmp	r2, #1
 800bdf6:	f300 80ad 	bgt.w	800bf54 <_dtoa_r+0x88c>
 800bdfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bdfc:	2a00      	cmp	r2, #0
 800bdfe:	f000 80a5 	beq.w	800bf4c <_dtoa_r+0x884>
 800be02:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800be06:	9e08      	ldr	r6, [sp, #32]
 800be08:	9d05      	ldr	r5, [sp, #20]
 800be0a:	9a05      	ldr	r2, [sp, #20]
 800be0c:	441a      	add	r2, r3
 800be0e:	9205      	str	r2, [sp, #20]
 800be10:	9a06      	ldr	r2, [sp, #24]
 800be12:	2101      	movs	r1, #1
 800be14:	441a      	add	r2, r3
 800be16:	4620      	mov	r0, r4
 800be18:	9206      	str	r2, [sp, #24]
 800be1a:	f000 fc3d 	bl	800c698 <__i2b>
 800be1e:	4607      	mov	r7, r0
 800be20:	b165      	cbz	r5, 800be3c <_dtoa_r+0x774>
 800be22:	9b06      	ldr	r3, [sp, #24]
 800be24:	2b00      	cmp	r3, #0
 800be26:	dd09      	ble.n	800be3c <_dtoa_r+0x774>
 800be28:	42ab      	cmp	r3, r5
 800be2a:	9a05      	ldr	r2, [sp, #20]
 800be2c:	bfa8      	it	ge
 800be2e:	462b      	movge	r3, r5
 800be30:	1ad2      	subs	r2, r2, r3
 800be32:	9205      	str	r2, [sp, #20]
 800be34:	9a06      	ldr	r2, [sp, #24]
 800be36:	1aed      	subs	r5, r5, r3
 800be38:	1ad3      	subs	r3, r2, r3
 800be3a:	9306      	str	r3, [sp, #24]
 800be3c:	9b08      	ldr	r3, [sp, #32]
 800be3e:	b1f3      	cbz	r3, 800be7e <_dtoa_r+0x7b6>
 800be40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be42:	2b00      	cmp	r3, #0
 800be44:	f000 80a3 	beq.w	800bf8e <_dtoa_r+0x8c6>
 800be48:	2e00      	cmp	r6, #0
 800be4a:	dd10      	ble.n	800be6e <_dtoa_r+0x7a6>
 800be4c:	4639      	mov	r1, r7
 800be4e:	4632      	mov	r2, r6
 800be50:	4620      	mov	r0, r4
 800be52:	f000 fce1 	bl	800c818 <__pow5mult>
 800be56:	4652      	mov	r2, sl
 800be58:	4601      	mov	r1, r0
 800be5a:	4607      	mov	r7, r0
 800be5c:	4620      	mov	r0, r4
 800be5e:	f000 fc31 	bl	800c6c4 <__multiply>
 800be62:	4651      	mov	r1, sl
 800be64:	4680      	mov	r8, r0
 800be66:	4620      	mov	r0, r4
 800be68:	f000 fb60 	bl	800c52c <_Bfree>
 800be6c:	46c2      	mov	sl, r8
 800be6e:	9b08      	ldr	r3, [sp, #32]
 800be70:	1b9a      	subs	r2, r3, r6
 800be72:	d004      	beq.n	800be7e <_dtoa_r+0x7b6>
 800be74:	4651      	mov	r1, sl
 800be76:	4620      	mov	r0, r4
 800be78:	f000 fcce 	bl	800c818 <__pow5mult>
 800be7c:	4682      	mov	sl, r0
 800be7e:	2101      	movs	r1, #1
 800be80:	4620      	mov	r0, r4
 800be82:	f000 fc09 	bl	800c698 <__i2b>
 800be86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be88:	2b00      	cmp	r3, #0
 800be8a:	4606      	mov	r6, r0
 800be8c:	f340 8081 	ble.w	800bf92 <_dtoa_r+0x8ca>
 800be90:	461a      	mov	r2, r3
 800be92:	4601      	mov	r1, r0
 800be94:	4620      	mov	r0, r4
 800be96:	f000 fcbf 	bl	800c818 <__pow5mult>
 800be9a:	9b07      	ldr	r3, [sp, #28]
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	4606      	mov	r6, r0
 800bea0:	dd7a      	ble.n	800bf98 <_dtoa_r+0x8d0>
 800bea2:	f04f 0800 	mov.w	r8, #0
 800bea6:	6933      	ldr	r3, [r6, #16]
 800bea8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800beac:	6918      	ldr	r0, [r3, #16]
 800beae:	f000 fba5 	bl	800c5fc <__hi0bits>
 800beb2:	f1c0 0020 	rsb	r0, r0, #32
 800beb6:	9b06      	ldr	r3, [sp, #24]
 800beb8:	4418      	add	r0, r3
 800beba:	f010 001f 	ands.w	r0, r0, #31
 800bebe:	f000 8094 	beq.w	800bfea <_dtoa_r+0x922>
 800bec2:	f1c0 0320 	rsb	r3, r0, #32
 800bec6:	2b04      	cmp	r3, #4
 800bec8:	f340 8085 	ble.w	800bfd6 <_dtoa_r+0x90e>
 800becc:	9b05      	ldr	r3, [sp, #20]
 800bece:	f1c0 001c 	rsb	r0, r0, #28
 800bed2:	4403      	add	r3, r0
 800bed4:	9305      	str	r3, [sp, #20]
 800bed6:	9b06      	ldr	r3, [sp, #24]
 800bed8:	4403      	add	r3, r0
 800beda:	4405      	add	r5, r0
 800bedc:	9306      	str	r3, [sp, #24]
 800bede:	9b05      	ldr	r3, [sp, #20]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	dd05      	ble.n	800bef0 <_dtoa_r+0x828>
 800bee4:	4651      	mov	r1, sl
 800bee6:	461a      	mov	r2, r3
 800bee8:	4620      	mov	r0, r4
 800beea:	f000 fcef 	bl	800c8cc <__lshift>
 800beee:	4682      	mov	sl, r0
 800bef0:	9b06      	ldr	r3, [sp, #24]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	dd05      	ble.n	800bf02 <_dtoa_r+0x83a>
 800bef6:	4631      	mov	r1, r6
 800bef8:	461a      	mov	r2, r3
 800befa:	4620      	mov	r0, r4
 800befc:	f000 fce6 	bl	800c8cc <__lshift>
 800bf00:	4606      	mov	r6, r0
 800bf02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d072      	beq.n	800bfee <_dtoa_r+0x926>
 800bf08:	4631      	mov	r1, r6
 800bf0a:	4650      	mov	r0, sl
 800bf0c:	f000 fd4a 	bl	800c9a4 <__mcmp>
 800bf10:	2800      	cmp	r0, #0
 800bf12:	da6c      	bge.n	800bfee <_dtoa_r+0x926>
 800bf14:	2300      	movs	r3, #0
 800bf16:	4651      	mov	r1, sl
 800bf18:	220a      	movs	r2, #10
 800bf1a:	4620      	mov	r0, r4
 800bf1c:	f000 fb28 	bl	800c570 <__multadd>
 800bf20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf22:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bf26:	4682      	mov	sl, r0
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	f000 81b0 	beq.w	800c28e <_dtoa_r+0xbc6>
 800bf2e:	2300      	movs	r3, #0
 800bf30:	4639      	mov	r1, r7
 800bf32:	220a      	movs	r2, #10
 800bf34:	4620      	mov	r0, r4
 800bf36:	f000 fb1b 	bl	800c570 <__multadd>
 800bf3a:	9b01      	ldr	r3, [sp, #4]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	4607      	mov	r7, r0
 800bf40:	f300 8096 	bgt.w	800c070 <_dtoa_r+0x9a8>
 800bf44:	9b07      	ldr	r3, [sp, #28]
 800bf46:	2b02      	cmp	r3, #2
 800bf48:	dc59      	bgt.n	800bffe <_dtoa_r+0x936>
 800bf4a:	e091      	b.n	800c070 <_dtoa_r+0x9a8>
 800bf4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bf52:	e758      	b.n	800be06 <_dtoa_r+0x73e>
 800bf54:	9b04      	ldr	r3, [sp, #16]
 800bf56:	1e5e      	subs	r6, r3, #1
 800bf58:	9b08      	ldr	r3, [sp, #32]
 800bf5a:	42b3      	cmp	r3, r6
 800bf5c:	bfbf      	itttt	lt
 800bf5e:	9b08      	ldrlt	r3, [sp, #32]
 800bf60:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800bf62:	9608      	strlt	r6, [sp, #32]
 800bf64:	1af3      	sublt	r3, r6, r3
 800bf66:	bfb4      	ite	lt
 800bf68:	18d2      	addlt	r2, r2, r3
 800bf6a:	1b9e      	subge	r6, r3, r6
 800bf6c:	9b04      	ldr	r3, [sp, #16]
 800bf6e:	bfbc      	itt	lt
 800bf70:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800bf72:	2600      	movlt	r6, #0
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	bfb7      	itett	lt
 800bf78:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800bf7c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800bf80:	1a9d      	sublt	r5, r3, r2
 800bf82:	2300      	movlt	r3, #0
 800bf84:	e741      	b.n	800be0a <_dtoa_r+0x742>
 800bf86:	9e08      	ldr	r6, [sp, #32]
 800bf88:	9d05      	ldr	r5, [sp, #20]
 800bf8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bf8c:	e748      	b.n	800be20 <_dtoa_r+0x758>
 800bf8e:	9a08      	ldr	r2, [sp, #32]
 800bf90:	e770      	b.n	800be74 <_dtoa_r+0x7ac>
 800bf92:	9b07      	ldr	r3, [sp, #28]
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	dc19      	bgt.n	800bfcc <_dtoa_r+0x904>
 800bf98:	9b02      	ldr	r3, [sp, #8]
 800bf9a:	b9bb      	cbnz	r3, 800bfcc <_dtoa_r+0x904>
 800bf9c:	9b03      	ldr	r3, [sp, #12]
 800bf9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bfa2:	b99b      	cbnz	r3, 800bfcc <_dtoa_r+0x904>
 800bfa4:	9b03      	ldr	r3, [sp, #12]
 800bfa6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bfaa:	0d1b      	lsrs	r3, r3, #20
 800bfac:	051b      	lsls	r3, r3, #20
 800bfae:	b183      	cbz	r3, 800bfd2 <_dtoa_r+0x90a>
 800bfb0:	9b05      	ldr	r3, [sp, #20]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	9305      	str	r3, [sp, #20]
 800bfb6:	9b06      	ldr	r3, [sp, #24]
 800bfb8:	3301      	adds	r3, #1
 800bfba:	9306      	str	r3, [sp, #24]
 800bfbc:	f04f 0801 	mov.w	r8, #1
 800bfc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	f47f af6f 	bne.w	800bea6 <_dtoa_r+0x7de>
 800bfc8:	2001      	movs	r0, #1
 800bfca:	e774      	b.n	800beb6 <_dtoa_r+0x7ee>
 800bfcc:	f04f 0800 	mov.w	r8, #0
 800bfd0:	e7f6      	b.n	800bfc0 <_dtoa_r+0x8f8>
 800bfd2:	4698      	mov	r8, r3
 800bfd4:	e7f4      	b.n	800bfc0 <_dtoa_r+0x8f8>
 800bfd6:	d082      	beq.n	800bede <_dtoa_r+0x816>
 800bfd8:	9a05      	ldr	r2, [sp, #20]
 800bfda:	331c      	adds	r3, #28
 800bfdc:	441a      	add	r2, r3
 800bfde:	9205      	str	r2, [sp, #20]
 800bfe0:	9a06      	ldr	r2, [sp, #24]
 800bfe2:	441a      	add	r2, r3
 800bfe4:	441d      	add	r5, r3
 800bfe6:	9206      	str	r2, [sp, #24]
 800bfe8:	e779      	b.n	800bede <_dtoa_r+0x816>
 800bfea:	4603      	mov	r3, r0
 800bfec:	e7f4      	b.n	800bfd8 <_dtoa_r+0x910>
 800bfee:	9b04      	ldr	r3, [sp, #16]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	dc37      	bgt.n	800c064 <_dtoa_r+0x99c>
 800bff4:	9b07      	ldr	r3, [sp, #28]
 800bff6:	2b02      	cmp	r3, #2
 800bff8:	dd34      	ble.n	800c064 <_dtoa_r+0x99c>
 800bffa:	9b04      	ldr	r3, [sp, #16]
 800bffc:	9301      	str	r3, [sp, #4]
 800bffe:	9b01      	ldr	r3, [sp, #4]
 800c000:	b963      	cbnz	r3, 800c01c <_dtoa_r+0x954>
 800c002:	4631      	mov	r1, r6
 800c004:	2205      	movs	r2, #5
 800c006:	4620      	mov	r0, r4
 800c008:	f000 fab2 	bl	800c570 <__multadd>
 800c00c:	4601      	mov	r1, r0
 800c00e:	4606      	mov	r6, r0
 800c010:	4650      	mov	r0, sl
 800c012:	f000 fcc7 	bl	800c9a4 <__mcmp>
 800c016:	2800      	cmp	r0, #0
 800c018:	f73f adbb 	bgt.w	800bb92 <_dtoa_r+0x4ca>
 800c01c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c01e:	9d00      	ldr	r5, [sp, #0]
 800c020:	ea6f 0b03 	mvn.w	fp, r3
 800c024:	f04f 0800 	mov.w	r8, #0
 800c028:	4631      	mov	r1, r6
 800c02a:	4620      	mov	r0, r4
 800c02c:	f000 fa7e 	bl	800c52c <_Bfree>
 800c030:	2f00      	cmp	r7, #0
 800c032:	f43f aeab 	beq.w	800bd8c <_dtoa_r+0x6c4>
 800c036:	f1b8 0f00 	cmp.w	r8, #0
 800c03a:	d005      	beq.n	800c048 <_dtoa_r+0x980>
 800c03c:	45b8      	cmp	r8, r7
 800c03e:	d003      	beq.n	800c048 <_dtoa_r+0x980>
 800c040:	4641      	mov	r1, r8
 800c042:	4620      	mov	r0, r4
 800c044:	f000 fa72 	bl	800c52c <_Bfree>
 800c048:	4639      	mov	r1, r7
 800c04a:	4620      	mov	r0, r4
 800c04c:	f000 fa6e 	bl	800c52c <_Bfree>
 800c050:	e69c      	b.n	800bd8c <_dtoa_r+0x6c4>
 800c052:	2600      	movs	r6, #0
 800c054:	4637      	mov	r7, r6
 800c056:	e7e1      	b.n	800c01c <_dtoa_r+0x954>
 800c058:	46bb      	mov	fp, r7
 800c05a:	4637      	mov	r7, r6
 800c05c:	e599      	b.n	800bb92 <_dtoa_r+0x4ca>
 800c05e:	bf00      	nop
 800c060:	40240000 	.word	0x40240000
 800c064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c066:	2b00      	cmp	r3, #0
 800c068:	f000 80c8 	beq.w	800c1fc <_dtoa_r+0xb34>
 800c06c:	9b04      	ldr	r3, [sp, #16]
 800c06e:	9301      	str	r3, [sp, #4]
 800c070:	2d00      	cmp	r5, #0
 800c072:	dd05      	ble.n	800c080 <_dtoa_r+0x9b8>
 800c074:	4639      	mov	r1, r7
 800c076:	462a      	mov	r2, r5
 800c078:	4620      	mov	r0, r4
 800c07a:	f000 fc27 	bl	800c8cc <__lshift>
 800c07e:	4607      	mov	r7, r0
 800c080:	f1b8 0f00 	cmp.w	r8, #0
 800c084:	d05b      	beq.n	800c13e <_dtoa_r+0xa76>
 800c086:	6879      	ldr	r1, [r7, #4]
 800c088:	4620      	mov	r0, r4
 800c08a:	f000 fa0f 	bl	800c4ac <_Balloc>
 800c08e:	4605      	mov	r5, r0
 800c090:	b928      	cbnz	r0, 800c09e <_dtoa_r+0x9d6>
 800c092:	4b83      	ldr	r3, [pc, #524]	; (800c2a0 <_dtoa_r+0xbd8>)
 800c094:	4602      	mov	r2, r0
 800c096:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c09a:	f7ff bb2e 	b.w	800b6fa <_dtoa_r+0x32>
 800c09e:	693a      	ldr	r2, [r7, #16]
 800c0a0:	3202      	adds	r2, #2
 800c0a2:	0092      	lsls	r2, r2, #2
 800c0a4:	f107 010c 	add.w	r1, r7, #12
 800c0a8:	300c      	adds	r0, #12
 800c0aa:	f000 ffbd 	bl	800d028 <memcpy>
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	4629      	mov	r1, r5
 800c0b2:	4620      	mov	r0, r4
 800c0b4:	f000 fc0a 	bl	800c8cc <__lshift>
 800c0b8:	9b00      	ldr	r3, [sp, #0]
 800c0ba:	3301      	adds	r3, #1
 800c0bc:	9304      	str	r3, [sp, #16]
 800c0be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0c2:	4413      	add	r3, r2
 800c0c4:	9308      	str	r3, [sp, #32]
 800c0c6:	9b02      	ldr	r3, [sp, #8]
 800c0c8:	f003 0301 	and.w	r3, r3, #1
 800c0cc:	46b8      	mov	r8, r7
 800c0ce:	9306      	str	r3, [sp, #24]
 800c0d0:	4607      	mov	r7, r0
 800c0d2:	9b04      	ldr	r3, [sp, #16]
 800c0d4:	4631      	mov	r1, r6
 800c0d6:	3b01      	subs	r3, #1
 800c0d8:	4650      	mov	r0, sl
 800c0da:	9301      	str	r3, [sp, #4]
 800c0dc:	f7ff fa6a 	bl	800b5b4 <quorem>
 800c0e0:	4641      	mov	r1, r8
 800c0e2:	9002      	str	r0, [sp, #8]
 800c0e4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c0e8:	4650      	mov	r0, sl
 800c0ea:	f000 fc5b 	bl	800c9a4 <__mcmp>
 800c0ee:	463a      	mov	r2, r7
 800c0f0:	9005      	str	r0, [sp, #20]
 800c0f2:	4631      	mov	r1, r6
 800c0f4:	4620      	mov	r0, r4
 800c0f6:	f000 fc71 	bl	800c9dc <__mdiff>
 800c0fa:	68c2      	ldr	r2, [r0, #12]
 800c0fc:	4605      	mov	r5, r0
 800c0fe:	bb02      	cbnz	r2, 800c142 <_dtoa_r+0xa7a>
 800c100:	4601      	mov	r1, r0
 800c102:	4650      	mov	r0, sl
 800c104:	f000 fc4e 	bl	800c9a4 <__mcmp>
 800c108:	4602      	mov	r2, r0
 800c10a:	4629      	mov	r1, r5
 800c10c:	4620      	mov	r0, r4
 800c10e:	9209      	str	r2, [sp, #36]	; 0x24
 800c110:	f000 fa0c 	bl	800c52c <_Bfree>
 800c114:	9b07      	ldr	r3, [sp, #28]
 800c116:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c118:	9d04      	ldr	r5, [sp, #16]
 800c11a:	ea43 0102 	orr.w	r1, r3, r2
 800c11e:	9b06      	ldr	r3, [sp, #24]
 800c120:	4319      	orrs	r1, r3
 800c122:	d110      	bne.n	800c146 <_dtoa_r+0xa7e>
 800c124:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c128:	d029      	beq.n	800c17e <_dtoa_r+0xab6>
 800c12a:	9b05      	ldr	r3, [sp, #20]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	dd02      	ble.n	800c136 <_dtoa_r+0xa6e>
 800c130:	9b02      	ldr	r3, [sp, #8]
 800c132:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c136:	9b01      	ldr	r3, [sp, #4]
 800c138:	f883 9000 	strb.w	r9, [r3]
 800c13c:	e774      	b.n	800c028 <_dtoa_r+0x960>
 800c13e:	4638      	mov	r0, r7
 800c140:	e7ba      	b.n	800c0b8 <_dtoa_r+0x9f0>
 800c142:	2201      	movs	r2, #1
 800c144:	e7e1      	b.n	800c10a <_dtoa_r+0xa42>
 800c146:	9b05      	ldr	r3, [sp, #20]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	db04      	blt.n	800c156 <_dtoa_r+0xa8e>
 800c14c:	9907      	ldr	r1, [sp, #28]
 800c14e:	430b      	orrs	r3, r1
 800c150:	9906      	ldr	r1, [sp, #24]
 800c152:	430b      	orrs	r3, r1
 800c154:	d120      	bne.n	800c198 <_dtoa_r+0xad0>
 800c156:	2a00      	cmp	r2, #0
 800c158:	dded      	ble.n	800c136 <_dtoa_r+0xa6e>
 800c15a:	4651      	mov	r1, sl
 800c15c:	2201      	movs	r2, #1
 800c15e:	4620      	mov	r0, r4
 800c160:	f000 fbb4 	bl	800c8cc <__lshift>
 800c164:	4631      	mov	r1, r6
 800c166:	4682      	mov	sl, r0
 800c168:	f000 fc1c 	bl	800c9a4 <__mcmp>
 800c16c:	2800      	cmp	r0, #0
 800c16e:	dc03      	bgt.n	800c178 <_dtoa_r+0xab0>
 800c170:	d1e1      	bne.n	800c136 <_dtoa_r+0xa6e>
 800c172:	f019 0f01 	tst.w	r9, #1
 800c176:	d0de      	beq.n	800c136 <_dtoa_r+0xa6e>
 800c178:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c17c:	d1d8      	bne.n	800c130 <_dtoa_r+0xa68>
 800c17e:	9a01      	ldr	r2, [sp, #4]
 800c180:	2339      	movs	r3, #57	; 0x39
 800c182:	7013      	strb	r3, [r2, #0]
 800c184:	462b      	mov	r3, r5
 800c186:	461d      	mov	r5, r3
 800c188:	3b01      	subs	r3, #1
 800c18a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c18e:	2a39      	cmp	r2, #57	; 0x39
 800c190:	d06c      	beq.n	800c26c <_dtoa_r+0xba4>
 800c192:	3201      	adds	r2, #1
 800c194:	701a      	strb	r2, [r3, #0]
 800c196:	e747      	b.n	800c028 <_dtoa_r+0x960>
 800c198:	2a00      	cmp	r2, #0
 800c19a:	dd07      	ble.n	800c1ac <_dtoa_r+0xae4>
 800c19c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c1a0:	d0ed      	beq.n	800c17e <_dtoa_r+0xab6>
 800c1a2:	9a01      	ldr	r2, [sp, #4]
 800c1a4:	f109 0301 	add.w	r3, r9, #1
 800c1a8:	7013      	strb	r3, [r2, #0]
 800c1aa:	e73d      	b.n	800c028 <_dtoa_r+0x960>
 800c1ac:	9b04      	ldr	r3, [sp, #16]
 800c1ae:	9a08      	ldr	r2, [sp, #32]
 800c1b0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	d043      	beq.n	800c240 <_dtoa_r+0xb78>
 800c1b8:	4651      	mov	r1, sl
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	220a      	movs	r2, #10
 800c1be:	4620      	mov	r0, r4
 800c1c0:	f000 f9d6 	bl	800c570 <__multadd>
 800c1c4:	45b8      	cmp	r8, r7
 800c1c6:	4682      	mov	sl, r0
 800c1c8:	f04f 0300 	mov.w	r3, #0
 800c1cc:	f04f 020a 	mov.w	r2, #10
 800c1d0:	4641      	mov	r1, r8
 800c1d2:	4620      	mov	r0, r4
 800c1d4:	d107      	bne.n	800c1e6 <_dtoa_r+0xb1e>
 800c1d6:	f000 f9cb 	bl	800c570 <__multadd>
 800c1da:	4680      	mov	r8, r0
 800c1dc:	4607      	mov	r7, r0
 800c1de:	9b04      	ldr	r3, [sp, #16]
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	9304      	str	r3, [sp, #16]
 800c1e4:	e775      	b.n	800c0d2 <_dtoa_r+0xa0a>
 800c1e6:	f000 f9c3 	bl	800c570 <__multadd>
 800c1ea:	4639      	mov	r1, r7
 800c1ec:	4680      	mov	r8, r0
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	220a      	movs	r2, #10
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	f000 f9bc 	bl	800c570 <__multadd>
 800c1f8:	4607      	mov	r7, r0
 800c1fa:	e7f0      	b.n	800c1de <_dtoa_r+0xb16>
 800c1fc:	9b04      	ldr	r3, [sp, #16]
 800c1fe:	9301      	str	r3, [sp, #4]
 800c200:	9d00      	ldr	r5, [sp, #0]
 800c202:	4631      	mov	r1, r6
 800c204:	4650      	mov	r0, sl
 800c206:	f7ff f9d5 	bl	800b5b4 <quorem>
 800c20a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c20e:	9b00      	ldr	r3, [sp, #0]
 800c210:	f805 9b01 	strb.w	r9, [r5], #1
 800c214:	1aea      	subs	r2, r5, r3
 800c216:	9b01      	ldr	r3, [sp, #4]
 800c218:	4293      	cmp	r3, r2
 800c21a:	dd07      	ble.n	800c22c <_dtoa_r+0xb64>
 800c21c:	4651      	mov	r1, sl
 800c21e:	2300      	movs	r3, #0
 800c220:	220a      	movs	r2, #10
 800c222:	4620      	mov	r0, r4
 800c224:	f000 f9a4 	bl	800c570 <__multadd>
 800c228:	4682      	mov	sl, r0
 800c22a:	e7ea      	b.n	800c202 <_dtoa_r+0xb3a>
 800c22c:	9b01      	ldr	r3, [sp, #4]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	bfc8      	it	gt
 800c232:	461d      	movgt	r5, r3
 800c234:	9b00      	ldr	r3, [sp, #0]
 800c236:	bfd8      	it	le
 800c238:	2501      	movle	r5, #1
 800c23a:	441d      	add	r5, r3
 800c23c:	f04f 0800 	mov.w	r8, #0
 800c240:	4651      	mov	r1, sl
 800c242:	2201      	movs	r2, #1
 800c244:	4620      	mov	r0, r4
 800c246:	f000 fb41 	bl	800c8cc <__lshift>
 800c24a:	4631      	mov	r1, r6
 800c24c:	4682      	mov	sl, r0
 800c24e:	f000 fba9 	bl	800c9a4 <__mcmp>
 800c252:	2800      	cmp	r0, #0
 800c254:	dc96      	bgt.n	800c184 <_dtoa_r+0xabc>
 800c256:	d102      	bne.n	800c25e <_dtoa_r+0xb96>
 800c258:	f019 0f01 	tst.w	r9, #1
 800c25c:	d192      	bne.n	800c184 <_dtoa_r+0xabc>
 800c25e:	462b      	mov	r3, r5
 800c260:	461d      	mov	r5, r3
 800c262:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c266:	2a30      	cmp	r2, #48	; 0x30
 800c268:	d0fa      	beq.n	800c260 <_dtoa_r+0xb98>
 800c26a:	e6dd      	b.n	800c028 <_dtoa_r+0x960>
 800c26c:	9a00      	ldr	r2, [sp, #0]
 800c26e:	429a      	cmp	r2, r3
 800c270:	d189      	bne.n	800c186 <_dtoa_r+0xabe>
 800c272:	f10b 0b01 	add.w	fp, fp, #1
 800c276:	2331      	movs	r3, #49	; 0x31
 800c278:	e796      	b.n	800c1a8 <_dtoa_r+0xae0>
 800c27a:	4b0a      	ldr	r3, [pc, #40]	; (800c2a4 <_dtoa_r+0xbdc>)
 800c27c:	f7ff ba99 	b.w	800b7b2 <_dtoa_r+0xea>
 800c280:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c282:	2b00      	cmp	r3, #0
 800c284:	f47f aa6d 	bne.w	800b762 <_dtoa_r+0x9a>
 800c288:	4b07      	ldr	r3, [pc, #28]	; (800c2a8 <_dtoa_r+0xbe0>)
 800c28a:	f7ff ba92 	b.w	800b7b2 <_dtoa_r+0xea>
 800c28e:	9b01      	ldr	r3, [sp, #4]
 800c290:	2b00      	cmp	r3, #0
 800c292:	dcb5      	bgt.n	800c200 <_dtoa_r+0xb38>
 800c294:	9b07      	ldr	r3, [sp, #28]
 800c296:	2b02      	cmp	r3, #2
 800c298:	f73f aeb1 	bgt.w	800bffe <_dtoa_r+0x936>
 800c29c:	e7b0      	b.n	800c200 <_dtoa_r+0xb38>
 800c29e:	bf00      	nop
 800c2a0:	0800d9af 	.word	0x0800d9af
 800c2a4:	0800d879 	.word	0x0800d879
 800c2a8:	0800d94a 	.word	0x0800d94a

0800c2ac <_free_r>:
 800c2ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c2ae:	2900      	cmp	r1, #0
 800c2b0:	d044      	beq.n	800c33c <_free_r+0x90>
 800c2b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2b6:	9001      	str	r0, [sp, #4]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	f1a1 0404 	sub.w	r4, r1, #4
 800c2be:	bfb8      	it	lt
 800c2c0:	18e4      	addlt	r4, r4, r3
 800c2c2:	f000 f8e7 	bl	800c494 <__malloc_lock>
 800c2c6:	4a1e      	ldr	r2, [pc, #120]	; (800c340 <_free_r+0x94>)
 800c2c8:	9801      	ldr	r0, [sp, #4]
 800c2ca:	6813      	ldr	r3, [r2, #0]
 800c2cc:	b933      	cbnz	r3, 800c2dc <_free_r+0x30>
 800c2ce:	6063      	str	r3, [r4, #4]
 800c2d0:	6014      	str	r4, [r2, #0]
 800c2d2:	b003      	add	sp, #12
 800c2d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2d8:	f000 b8e2 	b.w	800c4a0 <__malloc_unlock>
 800c2dc:	42a3      	cmp	r3, r4
 800c2de:	d908      	bls.n	800c2f2 <_free_r+0x46>
 800c2e0:	6825      	ldr	r5, [r4, #0]
 800c2e2:	1961      	adds	r1, r4, r5
 800c2e4:	428b      	cmp	r3, r1
 800c2e6:	bf01      	itttt	eq
 800c2e8:	6819      	ldreq	r1, [r3, #0]
 800c2ea:	685b      	ldreq	r3, [r3, #4]
 800c2ec:	1949      	addeq	r1, r1, r5
 800c2ee:	6021      	streq	r1, [r4, #0]
 800c2f0:	e7ed      	b.n	800c2ce <_free_r+0x22>
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	b10b      	cbz	r3, 800c2fc <_free_r+0x50>
 800c2f8:	42a3      	cmp	r3, r4
 800c2fa:	d9fa      	bls.n	800c2f2 <_free_r+0x46>
 800c2fc:	6811      	ldr	r1, [r2, #0]
 800c2fe:	1855      	adds	r5, r2, r1
 800c300:	42a5      	cmp	r5, r4
 800c302:	d10b      	bne.n	800c31c <_free_r+0x70>
 800c304:	6824      	ldr	r4, [r4, #0]
 800c306:	4421      	add	r1, r4
 800c308:	1854      	adds	r4, r2, r1
 800c30a:	42a3      	cmp	r3, r4
 800c30c:	6011      	str	r1, [r2, #0]
 800c30e:	d1e0      	bne.n	800c2d2 <_free_r+0x26>
 800c310:	681c      	ldr	r4, [r3, #0]
 800c312:	685b      	ldr	r3, [r3, #4]
 800c314:	6053      	str	r3, [r2, #4]
 800c316:	440c      	add	r4, r1
 800c318:	6014      	str	r4, [r2, #0]
 800c31a:	e7da      	b.n	800c2d2 <_free_r+0x26>
 800c31c:	d902      	bls.n	800c324 <_free_r+0x78>
 800c31e:	230c      	movs	r3, #12
 800c320:	6003      	str	r3, [r0, #0]
 800c322:	e7d6      	b.n	800c2d2 <_free_r+0x26>
 800c324:	6825      	ldr	r5, [r4, #0]
 800c326:	1961      	adds	r1, r4, r5
 800c328:	428b      	cmp	r3, r1
 800c32a:	bf04      	itt	eq
 800c32c:	6819      	ldreq	r1, [r3, #0]
 800c32e:	685b      	ldreq	r3, [r3, #4]
 800c330:	6063      	str	r3, [r4, #4]
 800c332:	bf04      	itt	eq
 800c334:	1949      	addeq	r1, r1, r5
 800c336:	6021      	streq	r1, [r4, #0]
 800c338:	6054      	str	r4, [r2, #4]
 800c33a:	e7ca      	b.n	800c2d2 <_free_r+0x26>
 800c33c:	b003      	add	sp, #12
 800c33e:	bd30      	pop	{r4, r5, pc}
 800c340:	20000958 	.word	0x20000958

0800c344 <malloc>:
 800c344:	4b02      	ldr	r3, [pc, #8]	; (800c350 <malloc+0xc>)
 800c346:	4601      	mov	r1, r0
 800c348:	6818      	ldr	r0, [r3, #0]
 800c34a:	f000 b823 	b.w	800c394 <_malloc_r>
 800c34e:	bf00      	nop
 800c350:	20000120 	.word	0x20000120

0800c354 <sbrk_aligned>:
 800c354:	b570      	push	{r4, r5, r6, lr}
 800c356:	4e0e      	ldr	r6, [pc, #56]	; (800c390 <sbrk_aligned+0x3c>)
 800c358:	460c      	mov	r4, r1
 800c35a:	6831      	ldr	r1, [r6, #0]
 800c35c:	4605      	mov	r5, r0
 800c35e:	b911      	cbnz	r1, 800c366 <sbrk_aligned+0x12>
 800c360:	f000 fe52 	bl	800d008 <_sbrk_r>
 800c364:	6030      	str	r0, [r6, #0]
 800c366:	4621      	mov	r1, r4
 800c368:	4628      	mov	r0, r5
 800c36a:	f000 fe4d 	bl	800d008 <_sbrk_r>
 800c36e:	1c43      	adds	r3, r0, #1
 800c370:	d00a      	beq.n	800c388 <sbrk_aligned+0x34>
 800c372:	1cc4      	adds	r4, r0, #3
 800c374:	f024 0403 	bic.w	r4, r4, #3
 800c378:	42a0      	cmp	r0, r4
 800c37a:	d007      	beq.n	800c38c <sbrk_aligned+0x38>
 800c37c:	1a21      	subs	r1, r4, r0
 800c37e:	4628      	mov	r0, r5
 800c380:	f000 fe42 	bl	800d008 <_sbrk_r>
 800c384:	3001      	adds	r0, #1
 800c386:	d101      	bne.n	800c38c <sbrk_aligned+0x38>
 800c388:	f04f 34ff 	mov.w	r4, #4294967295
 800c38c:	4620      	mov	r0, r4
 800c38e:	bd70      	pop	{r4, r5, r6, pc}
 800c390:	2000095c 	.word	0x2000095c

0800c394 <_malloc_r>:
 800c394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c398:	1ccd      	adds	r5, r1, #3
 800c39a:	f025 0503 	bic.w	r5, r5, #3
 800c39e:	3508      	adds	r5, #8
 800c3a0:	2d0c      	cmp	r5, #12
 800c3a2:	bf38      	it	cc
 800c3a4:	250c      	movcc	r5, #12
 800c3a6:	2d00      	cmp	r5, #0
 800c3a8:	4607      	mov	r7, r0
 800c3aa:	db01      	blt.n	800c3b0 <_malloc_r+0x1c>
 800c3ac:	42a9      	cmp	r1, r5
 800c3ae:	d905      	bls.n	800c3bc <_malloc_r+0x28>
 800c3b0:	230c      	movs	r3, #12
 800c3b2:	603b      	str	r3, [r7, #0]
 800c3b4:	2600      	movs	r6, #0
 800c3b6:	4630      	mov	r0, r6
 800c3b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c490 <_malloc_r+0xfc>
 800c3c0:	f000 f868 	bl	800c494 <__malloc_lock>
 800c3c4:	f8d8 3000 	ldr.w	r3, [r8]
 800c3c8:	461c      	mov	r4, r3
 800c3ca:	bb5c      	cbnz	r4, 800c424 <_malloc_r+0x90>
 800c3cc:	4629      	mov	r1, r5
 800c3ce:	4638      	mov	r0, r7
 800c3d0:	f7ff ffc0 	bl	800c354 <sbrk_aligned>
 800c3d4:	1c43      	adds	r3, r0, #1
 800c3d6:	4604      	mov	r4, r0
 800c3d8:	d155      	bne.n	800c486 <_malloc_r+0xf2>
 800c3da:	f8d8 4000 	ldr.w	r4, [r8]
 800c3de:	4626      	mov	r6, r4
 800c3e0:	2e00      	cmp	r6, #0
 800c3e2:	d145      	bne.n	800c470 <_malloc_r+0xdc>
 800c3e4:	2c00      	cmp	r4, #0
 800c3e6:	d048      	beq.n	800c47a <_malloc_r+0xe6>
 800c3e8:	6823      	ldr	r3, [r4, #0]
 800c3ea:	4631      	mov	r1, r6
 800c3ec:	4638      	mov	r0, r7
 800c3ee:	eb04 0903 	add.w	r9, r4, r3
 800c3f2:	f000 fe09 	bl	800d008 <_sbrk_r>
 800c3f6:	4581      	cmp	r9, r0
 800c3f8:	d13f      	bne.n	800c47a <_malloc_r+0xe6>
 800c3fa:	6821      	ldr	r1, [r4, #0]
 800c3fc:	1a6d      	subs	r5, r5, r1
 800c3fe:	4629      	mov	r1, r5
 800c400:	4638      	mov	r0, r7
 800c402:	f7ff ffa7 	bl	800c354 <sbrk_aligned>
 800c406:	3001      	adds	r0, #1
 800c408:	d037      	beq.n	800c47a <_malloc_r+0xe6>
 800c40a:	6823      	ldr	r3, [r4, #0]
 800c40c:	442b      	add	r3, r5
 800c40e:	6023      	str	r3, [r4, #0]
 800c410:	f8d8 3000 	ldr.w	r3, [r8]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d038      	beq.n	800c48a <_malloc_r+0xf6>
 800c418:	685a      	ldr	r2, [r3, #4]
 800c41a:	42a2      	cmp	r2, r4
 800c41c:	d12b      	bne.n	800c476 <_malloc_r+0xe2>
 800c41e:	2200      	movs	r2, #0
 800c420:	605a      	str	r2, [r3, #4]
 800c422:	e00f      	b.n	800c444 <_malloc_r+0xb0>
 800c424:	6822      	ldr	r2, [r4, #0]
 800c426:	1b52      	subs	r2, r2, r5
 800c428:	d41f      	bmi.n	800c46a <_malloc_r+0xd6>
 800c42a:	2a0b      	cmp	r2, #11
 800c42c:	d917      	bls.n	800c45e <_malloc_r+0xca>
 800c42e:	1961      	adds	r1, r4, r5
 800c430:	42a3      	cmp	r3, r4
 800c432:	6025      	str	r5, [r4, #0]
 800c434:	bf18      	it	ne
 800c436:	6059      	strne	r1, [r3, #4]
 800c438:	6863      	ldr	r3, [r4, #4]
 800c43a:	bf08      	it	eq
 800c43c:	f8c8 1000 	streq.w	r1, [r8]
 800c440:	5162      	str	r2, [r4, r5]
 800c442:	604b      	str	r3, [r1, #4]
 800c444:	4638      	mov	r0, r7
 800c446:	f104 060b 	add.w	r6, r4, #11
 800c44a:	f000 f829 	bl	800c4a0 <__malloc_unlock>
 800c44e:	f026 0607 	bic.w	r6, r6, #7
 800c452:	1d23      	adds	r3, r4, #4
 800c454:	1af2      	subs	r2, r6, r3
 800c456:	d0ae      	beq.n	800c3b6 <_malloc_r+0x22>
 800c458:	1b9b      	subs	r3, r3, r6
 800c45a:	50a3      	str	r3, [r4, r2]
 800c45c:	e7ab      	b.n	800c3b6 <_malloc_r+0x22>
 800c45e:	42a3      	cmp	r3, r4
 800c460:	6862      	ldr	r2, [r4, #4]
 800c462:	d1dd      	bne.n	800c420 <_malloc_r+0x8c>
 800c464:	f8c8 2000 	str.w	r2, [r8]
 800c468:	e7ec      	b.n	800c444 <_malloc_r+0xb0>
 800c46a:	4623      	mov	r3, r4
 800c46c:	6864      	ldr	r4, [r4, #4]
 800c46e:	e7ac      	b.n	800c3ca <_malloc_r+0x36>
 800c470:	4634      	mov	r4, r6
 800c472:	6876      	ldr	r6, [r6, #4]
 800c474:	e7b4      	b.n	800c3e0 <_malloc_r+0x4c>
 800c476:	4613      	mov	r3, r2
 800c478:	e7cc      	b.n	800c414 <_malloc_r+0x80>
 800c47a:	230c      	movs	r3, #12
 800c47c:	603b      	str	r3, [r7, #0]
 800c47e:	4638      	mov	r0, r7
 800c480:	f000 f80e 	bl	800c4a0 <__malloc_unlock>
 800c484:	e797      	b.n	800c3b6 <_malloc_r+0x22>
 800c486:	6025      	str	r5, [r4, #0]
 800c488:	e7dc      	b.n	800c444 <_malloc_r+0xb0>
 800c48a:	605b      	str	r3, [r3, #4]
 800c48c:	deff      	udf	#255	; 0xff
 800c48e:	bf00      	nop
 800c490:	20000958 	.word	0x20000958

0800c494 <__malloc_lock>:
 800c494:	4801      	ldr	r0, [pc, #4]	; (800c49c <__malloc_lock+0x8>)
 800c496:	f7ff b86d 	b.w	800b574 <__retarget_lock_acquire_recursive>
 800c49a:	bf00      	nop
 800c49c:	20000954 	.word	0x20000954

0800c4a0 <__malloc_unlock>:
 800c4a0:	4801      	ldr	r0, [pc, #4]	; (800c4a8 <__malloc_unlock+0x8>)
 800c4a2:	f7ff b868 	b.w	800b576 <__retarget_lock_release_recursive>
 800c4a6:	bf00      	nop
 800c4a8:	20000954 	.word	0x20000954

0800c4ac <_Balloc>:
 800c4ac:	b570      	push	{r4, r5, r6, lr}
 800c4ae:	69c6      	ldr	r6, [r0, #28]
 800c4b0:	4604      	mov	r4, r0
 800c4b2:	460d      	mov	r5, r1
 800c4b4:	b976      	cbnz	r6, 800c4d4 <_Balloc+0x28>
 800c4b6:	2010      	movs	r0, #16
 800c4b8:	f7ff ff44 	bl	800c344 <malloc>
 800c4bc:	4602      	mov	r2, r0
 800c4be:	61e0      	str	r0, [r4, #28]
 800c4c0:	b920      	cbnz	r0, 800c4cc <_Balloc+0x20>
 800c4c2:	4b18      	ldr	r3, [pc, #96]	; (800c524 <_Balloc+0x78>)
 800c4c4:	4818      	ldr	r0, [pc, #96]	; (800c528 <_Balloc+0x7c>)
 800c4c6:	216b      	movs	r1, #107	; 0x6b
 800c4c8:	f7ff f856 	bl	800b578 <__assert_func>
 800c4cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4d0:	6006      	str	r6, [r0, #0]
 800c4d2:	60c6      	str	r6, [r0, #12]
 800c4d4:	69e6      	ldr	r6, [r4, #28]
 800c4d6:	68f3      	ldr	r3, [r6, #12]
 800c4d8:	b183      	cbz	r3, 800c4fc <_Balloc+0x50>
 800c4da:	69e3      	ldr	r3, [r4, #28]
 800c4dc:	68db      	ldr	r3, [r3, #12]
 800c4de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c4e2:	b9b8      	cbnz	r0, 800c514 <_Balloc+0x68>
 800c4e4:	2101      	movs	r1, #1
 800c4e6:	fa01 f605 	lsl.w	r6, r1, r5
 800c4ea:	1d72      	adds	r2, r6, #5
 800c4ec:	0092      	lsls	r2, r2, #2
 800c4ee:	4620      	mov	r0, r4
 800c4f0:	f000 fdaf 	bl	800d052 <_calloc_r>
 800c4f4:	b160      	cbz	r0, 800c510 <_Balloc+0x64>
 800c4f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c4fa:	e00e      	b.n	800c51a <_Balloc+0x6e>
 800c4fc:	2221      	movs	r2, #33	; 0x21
 800c4fe:	2104      	movs	r1, #4
 800c500:	4620      	mov	r0, r4
 800c502:	f000 fda6 	bl	800d052 <_calloc_r>
 800c506:	69e3      	ldr	r3, [r4, #28]
 800c508:	60f0      	str	r0, [r6, #12]
 800c50a:	68db      	ldr	r3, [r3, #12]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d1e4      	bne.n	800c4da <_Balloc+0x2e>
 800c510:	2000      	movs	r0, #0
 800c512:	bd70      	pop	{r4, r5, r6, pc}
 800c514:	6802      	ldr	r2, [r0, #0]
 800c516:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c51a:	2300      	movs	r3, #0
 800c51c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c520:	e7f7      	b.n	800c512 <_Balloc+0x66>
 800c522:	bf00      	nop
 800c524:	0800d89d 	.word	0x0800d89d
 800c528:	0800d9c0 	.word	0x0800d9c0

0800c52c <_Bfree>:
 800c52c:	b570      	push	{r4, r5, r6, lr}
 800c52e:	69c6      	ldr	r6, [r0, #28]
 800c530:	4605      	mov	r5, r0
 800c532:	460c      	mov	r4, r1
 800c534:	b976      	cbnz	r6, 800c554 <_Bfree+0x28>
 800c536:	2010      	movs	r0, #16
 800c538:	f7ff ff04 	bl	800c344 <malloc>
 800c53c:	4602      	mov	r2, r0
 800c53e:	61e8      	str	r0, [r5, #28]
 800c540:	b920      	cbnz	r0, 800c54c <_Bfree+0x20>
 800c542:	4b09      	ldr	r3, [pc, #36]	; (800c568 <_Bfree+0x3c>)
 800c544:	4809      	ldr	r0, [pc, #36]	; (800c56c <_Bfree+0x40>)
 800c546:	218f      	movs	r1, #143	; 0x8f
 800c548:	f7ff f816 	bl	800b578 <__assert_func>
 800c54c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c550:	6006      	str	r6, [r0, #0]
 800c552:	60c6      	str	r6, [r0, #12]
 800c554:	b13c      	cbz	r4, 800c566 <_Bfree+0x3a>
 800c556:	69eb      	ldr	r3, [r5, #28]
 800c558:	6862      	ldr	r2, [r4, #4]
 800c55a:	68db      	ldr	r3, [r3, #12]
 800c55c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c560:	6021      	str	r1, [r4, #0]
 800c562:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c566:	bd70      	pop	{r4, r5, r6, pc}
 800c568:	0800d89d 	.word	0x0800d89d
 800c56c:	0800d9c0 	.word	0x0800d9c0

0800c570 <__multadd>:
 800c570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c574:	690d      	ldr	r5, [r1, #16]
 800c576:	4607      	mov	r7, r0
 800c578:	460c      	mov	r4, r1
 800c57a:	461e      	mov	r6, r3
 800c57c:	f101 0c14 	add.w	ip, r1, #20
 800c580:	2000      	movs	r0, #0
 800c582:	f8dc 3000 	ldr.w	r3, [ip]
 800c586:	b299      	uxth	r1, r3
 800c588:	fb02 6101 	mla	r1, r2, r1, r6
 800c58c:	0c1e      	lsrs	r6, r3, #16
 800c58e:	0c0b      	lsrs	r3, r1, #16
 800c590:	fb02 3306 	mla	r3, r2, r6, r3
 800c594:	b289      	uxth	r1, r1
 800c596:	3001      	adds	r0, #1
 800c598:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c59c:	4285      	cmp	r5, r0
 800c59e:	f84c 1b04 	str.w	r1, [ip], #4
 800c5a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c5a6:	dcec      	bgt.n	800c582 <__multadd+0x12>
 800c5a8:	b30e      	cbz	r6, 800c5ee <__multadd+0x7e>
 800c5aa:	68a3      	ldr	r3, [r4, #8]
 800c5ac:	42ab      	cmp	r3, r5
 800c5ae:	dc19      	bgt.n	800c5e4 <__multadd+0x74>
 800c5b0:	6861      	ldr	r1, [r4, #4]
 800c5b2:	4638      	mov	r0, r7
 800c5b4:	3101      	adds	r1, #1
 800c5b6:	f7ff ff79 	bl	800c4ac <_Balloc>
 800c5ba:	4680      	mov	r8, r0
 800c5bc:	b928      	cbnz	r0, 800c5ca <__multadd+0x5a>
 800c5be:	4602      	mov	r2, r0
 800c5c0:	4b0c      	ldr	r3, [pc, #48]	; (800c5f4 <__multadd+0x84>)
 800c5c2:	480d      	ldr	r0, [pc, #52]	; (800c5f8 <__multadd+0x88>)
 800c5c4:	21ba      	movs	r1, #186	; 0xba
 800c5c6:	f7fe ffd7 	bl	800b578 <__assert_func>
 800c5ca:	6922      	ldr	r2, [r4, #16]
 800c5cc:	3202      	adds	r2, #2
 800c5ce:	f104 010c 	add.w	r1, r4, #12
 800c5d2:	0092      	lsls	r2, r2, #2
 800c5d4:	300c      	adds	r0, #12
 800c5d6:	f000 fd27 	bl	800d028 <memcpy>
 800c5da:	4621      	mov	r1, r4
 800c5dc:	4638      	mov	r0, r7
 800c5de:	f7ff ffa5 	bl	800c52c <_Bfree>
 800c5e2:	4644      	mov	r4, r8
 800c5e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c5e8:	3501      	adds	r5, #1
 800c5ea:	615e      	str	r6, [r3, #20]
 800c5ec:	6125      	str	r5, [r4, #16]
 800c5ee:	4620      	mov	r0, r4
 800c5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5f4:	0800d9af 	.word	0x0800d9af
 800c5f8:	0800d9c0 	.word	0x0800d9c0

0800c5fc <__hi0bits>:
 800c5fc:	0c03      	lsrs	r3, r0, #16
 800c5fe:	041b      	lsls	r3, r3, #16
 800c600:	b9d3      	cbnz	r3, 800c638 <__hi0bits+0x3c>
 800c602:	0400      	lsls	r0, r0, #16
 800c604:	2310      	movs	r3, #16
 800c606:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c60a:	bf04      	itt	eq
 800c60c:	0200      	lsleq	r0, r0, #8
 800c60e:	3308      	addeq	r3, #8
 800c610:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c614:	bf04      	itt	eq
 800c616:	0100      	lsleq	r0, r0, #4
 800c618:	3304      	addeq	r3, #4
 800c61a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c61e:	bf04      	itt	eq
 800c620:	0080      	lsleq	r0, r0, #2
 800c622:	3302      	addeq	r3, #2
 800c624:	2800      	cmp	r0, #0
 800c626:	db05      	blt.n	800c634 <__hi0bits+0x38>
 800c628:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c62c:	f103 0301 	add.w	r3, r3, #1
 800c630:	bf08      	it	eq
 800c632:	2320      	moveq	r3, #32
 800c634:	4618      	mov	r0, r3
 800c636:	4770      	bx	lr
 800c638:	2300      	movs	r3, #0
 800c63a:	e7e4      	b.n	800c606 <__hi0bits+0xa>

0800c63c <__lo0bits>:
 800c63c:	6803      	ldr	r3, [r0, #0]
 800c63e:	f013 0207 	ands.w	r2, r3, #7
 800c642:	d00c      	beq.n	800c65e <__lo0bits+0x22>
 800c644:	07d9      	lsls	r1, r3, #31
 800c646:	d422      	bmi.n	800c68e <__lo0bits+0x52>
 800c648:	079a      	lsls	r2, r3, #30
 800c64a:	bf49      	itett	mi
 800c64c:	085b      	lsrmi	r3, r3, #1
 800c64e:	089b      	lsrpl	r3, r3, #2
 800c650:	6003      	strmi	r3, [r0, #0]
 800c652:	2201      	movmi	r2, #1
 800c654:	bf5c      	itt	pl
 800c656:	6003      	strpl	r3, [r0, #0]
 800c658:	2202      	movpl	r2, #2
 800c65a:	4610      	mov	r0, r2
 800c65c:	4770      	bx	lr
 800c65e:	b299      	uxth	r1, r3
 800c660:	b909      	cbnz	r1, 800c666 <__lo0bits+0x2a>
 800c662:	0c1b      	lsrs	r3, r3, #16
 800c664:	2210      	movs	r2, #16
 800c666:	b2d9      	uxtb	r1, r3
 800c668:	b909      	cbnz	r1, 800c66e <__lo0bits+0x32>
 800c66a:	3208      	adds	r2, #8
 800c66c:	0a1b      	lsrs	r3, r3, #8
 800c66e:	0719      	lsls	r1, r3, #28
 800c670:	bf04      	itt	eq
 800c672:	091b      	lsreq	r3, r3, #4
 800c674:	3204      	addeq	r2, #4
 800c676:	0799      	lsls	r1, r3, #30
 800c678:	bf04      	itt	eq
 800c67a:	089b      	lsreq	r3, r3, #2
 800c67c:	3202      	addeq	r2, #2
 800c67e:	07d9      	lsls	r1, r3, #31
 800c680:	d403      	bmi.n	800c68a <__lo0bits+0x4e>
 800c682:	085b      	lsrs	r3, r3, #1
 800c684:	f102 0201 	add.w	r2, r2, #1
 800c688:	d003      	beq.n	800c692 <__lo0bits+0x56>
 800c68a:	6003      	str	r3, [r0, #0]
 800c68c:	e7e5      	b.n	800c65a <__lo0bits+0x1e>
 800c68e:	2200      	movs	r2, #0
 800c690:	e7e3      	b.n	800c65a <__lo0bits+0x1e>
 800c692:	2220      	movs	r2, #32
 800c694:	e7e1      	b.n	800c65a <__lo0bits+0x1e>
	...

0800c698 <__i2b>:
 800c698:	b510      	push	{r4, lr}
 800c69a:	460c      	mov	r4, r1
 800c69c:	2101      	movs	r1, #1
 800c69e:	f7ff ff05 	bl	800c4ac <_Balloc>
 800c6a2:	4602      	mov	r2, r0
 800c6a4:	b928      	cbnz	r0, 800c6b2 <__i2b+0x1a>
 800c6a6:	4b05      	ldr	r3, [pc, #20]	; (800c6bc <__i2b+0x24>)
 800c6a8:	4805      	ldr	r0, [pc, #20]	; (800c6c0 <__i2b+0x28>)
 800c6aa:	f240 1145 	movw	r1, #325	; 0x145
 800c6ae:	f7fe ff63 	bl	800b578 <__assert_func>
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	6144      	str	r4, [r0, #20]
 800c6b6:	6103      	str	r3, [r0, #16]
 800c6b8:	bd10      	pop	{r4, pc}
 800c6ba:	bf00      	nop
 800c6bc:	0800d9af 	.word	0x0800d9af
 800c6c0:	0800d9c0 	.word	0x0800d9c0

0800c6c4 <__multiply>:
 800c6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6c8:	4691      	mov	r9, r2
 800c6ca:	690a      	ldr	r2, [r1, #16]
 800c6cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	bfb8      	it	lt
 800c6d4:	460b      	movlt	r3, r1
 800c6d6:	460c      	mov	r4, r1
 800c6d8:	bfbc      	itt	lt
 800c6da:	464c      	movlt	r4, r9
 800c6dc:	4699      	movlt	r9, r3
 800c6de:	6927      	ldr	r7, [r4, #16]
 800c6e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c6e4:	68a3      	ldr	r3, [r4, #8]
 800c6e6:	6861      	ldr	r1, [r4, #4]
 800c6e8:	eb07 060a 	add.w	r6, r7, sl
 800c6ec:	42b3      	cmp	r3, r6
 800c6ee:	b085      	sub	sp, #20
 800c6f0:	bfb8      	it	lt
 800c6f2:	3101      	addlt	r1, #1
 800c6f4:	f7ff feda 	bl	800c4ac <_Balloc>
 800c6f8:	b930      	cbnz	r0, 800c708 <__multiply+0x44>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	4b44      	ldr	r3, [pc, #272]	; (800c810 <__multiply+0x14c>)
 800c6fe:	4845      	ldr	r0, [pc, #276]	; (800c814 <__multiply+0x150>)
 800c700:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c704:	f7fe ff38 	bl	800b578 <__assert_func>
 800c708:	f100 0514 	add.w	r5, r0, #20
 800c70c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c710:	462b      	mov	r3, r5
 800c712:	2200      	movs	r2, #0
 800c714:	4543      	cmp	r3, r8
 800c716:	d321      	bcc.n	800c75c <__multiply+0x98>
 800c718:	f104 0314 	add.w	r3, r4, #20
 800c71c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c720:	f109 0314 	add.w	r3, r9, #20
 800c724:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c728:	9202      	str	r2, [sp, #8]
 800c72a:	1b3a      	subs	r2, r7, r4
 800c72c:	3a15      	subs	r2, #21
 800c72e:	f022 0203 	bic.w	r2, r2, #3
 800c732:	3204      	adds	r2, #4
 800c734:	f104 0115 	add.w	r1, r4, #21
 800c738:	428f      	cmp	r7, r1
 800c73a:	bf38      	it	cc
 800c73c:	2204      	movcc	r2, #4
 800c73e:	9201      	str	r2, [sp, #4]
 800c740:	9a02      	ldr	r2, [sp, #8]
 800c742:	9303      	str	r3, [sp, #12]
 800c744:	429a      	cmp	r2, r3
 800c746:	d80c      	bhi.n	800c762 <__multiply+0x9e>
 800c748:	2e00      	cmp	r6, #0
 800c74a:	dd03      	ble.n	800c754 <__multiply+0x90>
 800c74c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c750:	2b00      	cmp	r3, #0
 800c752:	d05b      	beq.n	800c80c <__multiply+0x148>
 800c754:	6106      	str	r6, [r0, #16]
 800c756:	b005      	add	sp, #20
 800c758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c75c:	f843 2b04 	str.w	r2, [r3], #4
 800c760:	e7d8      	b.n	800c714 <__multiply+0x50>
 800c762:	f8b3 a000 	ldrh.w	sl, [r3]
 800c766:	f1ba 0f00 	cmp.w	sl, #0
 800c76a:	d024      	beq.n	800c7b6 <__multiply+0xf2>
 800c76c:	f104 0e14 	add.w	lr, r4, #20
 800c770:	46a9      	mov	r9, r5
 800c772:	f04f 0c00 	mov.w	ip, #0
 800c776:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c77a:	f8d9 1000 	ldr.w	r1, [r9]
 800c77e:	fa1f fb82 	uxth.w	fp, r2
 800c782:	b289      	uxth	r1, r1
 800c784:	fb0a 110b 	mla	r1, sl, fp, r1
 800c788:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c78c:	f8d9 2000 	ldr.w	r2, [r9]
 800c790:	4461      	add	r1, ip
 800c792:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c796:	fb0a c20b 	mla	r2, sl, fp, ip
 800c79a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c79e:	b289      	uxth	r1, r1
 800c7a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c7a4:	4577      	cmp	r7, lr
 800c7a6:	f849 1b04 	str.w	r1, [r9], #4
 800c7aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c7ae:	d8e2      	bhi.n	800c776 <__multiply+0xb2>
 800c7b0:	9a01      	ldr	r2, [sp, #4]
 800c7b2:	f845 c002 	str.w	ip, [r5, r2]
 800c7b6:	9a03      	ldr	r2, [sp, #12]
 800c7b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c7bc:	3304      	adds	r3, #4
 800c7be:	f1b9 0f00 	cmp.w	r9, #0
 800c7c2:	d021      	beq.n	800c808 <__multiply+0x144>
 800c7c4:	6829      	ldr	r1, [r5, #0]
 800c7c6:	f104 0c14 	add.w	ip, r4, #20
 800c7ca:	46ae      	mov	lr, r5
 800c7cc:	f04f 0a00 	mov.w	sl, #0
 800c7d0:	f8bc b000 	ldrh.w	fp, [ip]
 800c7d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c7d8:	fb09 220b 	mla	r2, r9, fp, r2
 800c7dc:	4452      	add	r2, sl
 800c7de:	b289      	uxth	r1, r1
 800c7e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c7e4:	f84e 1b04 	str.w	r1, [lr], #4
 800c7e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c7ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c7f0:	f8be 1000 	ldrh.w	r1, [lr]
 800c7f4:	fb09 110a 	mla	r1, r9, sl, r1
 800c7f8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c7fc:	4567      	cmp	r7, ip
 800c7fe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c802:	d8e5      	bhi.n	800c7d0 <__multiply+0x10c>
 800c804:	9a01      	ldr	r2, [sp, #4]
 800c806:	50a9      	str	r1, [r5, r2]
 800c808:	3504      	adds	r5, #4
 800c80a:	e799      	b.n	800c740 <__multiply+0x7c>
 800c80c:	3e01      	subs	r6, #1
 800c80e:	e79b      	b.n	800c748 <__multiply+0x84>
 800c810:	0800d9af 	.word	0x0800d9af
 800c814:	0800d9c0 	.word	0x0800d9c0

0800c818 <__pow5mult>:
 800c818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c81c:	4615      	mov	r5, r2
 800c81e:	f012 0203 	ands.w	r2, r2, #3
 800c822:	4606      	mov	r6, r0
 800c824:	460f      	mov	r7, r1
 800c826:	d007      	beq.n	800c838 <__pow5mult+0x20>
 800c828:	4c25      	ldr	r4, [pc, #148]	; (800c8c0 <__pow5mult+0xa8>)
 800c82a:	3a01      	subs	r2, #1
 800c82c:	2300      	movs	r3, #0
 800c82e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c832:	f7ff fe9d 	bl	800c570 <__multadd>
 800c836:	4607      	mov	r7, r0
 800c838:	10ad      	asrs	r5, r5, #2
 800c83a:	d03d      	beq.n	800c8b8 <__pow5mult+0xa0>
 800c83c:	69f4      	ldr	r4, [r6, #28]
 800c83e:	b97c      	cbnz	r4, 800c860 <__pow5mult+0x48>
 800c840:	2010      	movs	r0, #16
 800c842:	f7ff fd7f 	bl	800c344 <malloc>
 800c846:	4602      	mov	r2, r0
 800c848:	61f0      	str	r0, [r6, #28]
 800c84a:	b928      	cbnz	r0, 800c858 <__pow5mult+0x40>
 800c84c:	4b1d      	ldr	r3, [pc, #116]	; (800c8c4 <__pow5mult+0xac>)
 800c84e:	481e      	ldr	r0, [pc, #120]	; (800c8c8 <__pow5mult+0xb0>)
 800c850:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c854:	f7fe fe90 	bl	800b578 <__assert_func>
 800c858:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c85c:	6004      	str	r4, [r0, #0]
 800c85e:	60c4      	str	r4, [r0, #12]
 800c860:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c864:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c868:	b94c      	cbnz	r4, 800c87e <__pow5mult+0x66>
 800c86a:	f240 2171 	movw	r1, #625	; 0x271
 800c86e:	4630      	mov	r0, r6
 800c870:	f7ff ff12 	bl	800c698 <__i2b>
 800c874:	2300      	movs	r3, #0
 800c876:	f8c8 0008 	str.w	r0, [r8, #8]
 800c87a:	4604      	mov	r4, r0
 800c87c:	6003      	str	r3, [r0, #0]
 800c87e:	f04f 0900 	mov.w	r9, #0
 800c882:	07eb      	lsls	r3, r5, #31
 800c884:	d50a      	bpl.n	800c89c <__pow5mult+0x84>
 800c886:	4639      	mov	r1, r7
 800c888:	4622      	mov	r2, r4
 800c88a:	4630      	mov	r0, r6
 800c88c:	f7ff ff1a 	bl	800c6c4 <__multiply>
 800c890:	4639      	mov	r1, r7
 800c892:	4680      	mov	r8, r0
 800c894:	4630      	mov	r0, r6
 800c896:	f7ff fe49 	bl	800c52c <_Bfree>
 800c89a:	4647      	mov	r7, r8
 800c89c:	106d      	asrs	r5, r5, #1
 800c89e:	d00b      	beq.n	800c8b8 <__pow5mult+0xa0>
 800c8a0:	6820      	ldr	r0, [r4, #0]
 800c8a2:	b938      	cbnz	r0, 800c8b4 <__pow5mult+0x9c>
 800c8a4:	4622      	mov	r2, r4
 800c8a6:	4621      	mov	r1, r4
 800c8a8:	4630      	mov	r0, r6
 800c8aa:	f7ff ff0b 	bl	800c6c4 <__multiply>
 800c8ae:	6020      	str	r0, [r4, #0]
 800c8b0:	f8c0 9000 	str.w	r9, [r0]
 800c8b4:	4604      	mov	r4, r0
 800c8b6:	e7e4      	b.n	800c882 <__pow5mult+0x6a>
 800c8b8:	4638      	mov	r0, r7
 800c8ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8be:	bf00      	nop
 800c8c0:	0800db10 	.word	0x0800db10
 800c8c4:	0800d89d 	.word	0x0800d89d
 800c8c8:	0800d9c0 	.word	0x0800d9c0

0800c8cc <__lshift>:
 800c8cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8d0:	460c      	mov	r4, r1
 800c8d2:	6849      	ldr	r1, [r1, #4]
 800c8d4:	6923      	ldr	r3, [r4, #16]
 800c8d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c8da:	68a3      	ldr	r3, [r4, #8]
 800c8dc:	4607      	mov	r7, r0
 800c8de:	4691      	mov	r9, r2
 800c8e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c8e4:	f108 0601 	add.w	r6, r8, #1
 800c8e8:	42b3      	cmp	r3, r6
 800c8ea:	db0b      	blt.n	800c904 <__lshift+0x38>
 800c8ec:	4638      	mov	r0, r7
 800c8ee:	f7ff fddd 	bl	800c4ac <_Balloc>
 800c8f2:	4605      	mov	r5, r0
 800c8f4:	b948      	cbnz	r0, 800c90a <__lshift+0x3e>
 800c8f6:	4602      	mov	r2, r0
 800c8f8:	4b28      	ldr	r3, [pc, #160]	; (800c99c <__lshift+0xd0>)
 800c8fa:	4829      	ldr	r0, [pc, #164]	; (800c9a0 <__lshift+0xd4>)
 800c8fc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c900:	f7fe fe3a 	bl	800b578 <__assert_func>
 800c904:	3101      	adds	r1, #1
 800c906:	005b      	lsls	r3, r3, #1
 800c908:	e7ee      	b.n	800c8e8 <__lshift+0x1c>
 800c90a:	2300      	movs	r3, #0
 800c90c:	f100 0114 	add.w	r1, r0, #20
 800c910:	f100 0210 	add.w	r2, r0, #16
 800c914:	4618      	mov	r0, r3
 800c916:	4553      	cmp	r3, sl
 800c918:	db33      	blt.n	800c982 <__lshift+0xb6>
 800c91a:	6920      	ldr	r0, [r4, #16]
 800c91c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c920:	f104 0314 	add.w	r3, r4, #20
 800c924:	f019 091f 	ands.w	r9, r9, #31
 800c928:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c92c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c930:	d02b      	beq.n	800c98a <__lshift+0xbe>
 800c932:	f1c9 0e20 	rsb	lr, r9, #32
 800c936:	468a      	mov	sl, r1
 800c938:	2200      	movs	r2, #0
 800c93a:	6818      	ldr	r0, [r3, #0]
 800c93c:	fa00 f009 	lsl.w	r0, r0, r9
 800c940:	4310      	orrs	r0, r2
 800c942:	f84a 0b04 	str.w	r0, [sl], #4
 800c946:	f853 2b04 	ldr.w	r2, [r3], #4
 800c94a:	459c      	cmp	ip, r3
 800c94c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c950:	d8f3      	bhi.n	800c93a <__lshift+0x6e>
 800c952:	ebac 0304 	sub.w	r3, ip, r4
 800c956:	3b15      	subs	r3, #21
 800c958:	f023 0303 	bic.w	r3, r3, #3
 800c95c:	3304      	adds	r3, #4
 800c95e:	f104 0015 	add.w	r0, r4, #21
 800c962:	4584      	cmp	ip, r0
 800c964:	bf38      	it	cc
 800c966:	2304      	movcc	r3, #4
 800c968:	50ca      	str	r2, [r1, r3]
 800c96a:	b10a      	cbz	r2, 800c970 <__lshift+0xa4>
 800c96c:	f108 0602 	add.w	r6, r8, #2
 800c970:	3e01      	subs	r6, #1
 800c972:	4638      	mov	r0, r7
 800c974:	612e      	str	r6, [r5, #16]
 800c976:	4621      	mov	r1, r4
 800c978:	f7ff fdd8 	bl	800c52c <_Bfree>
 800c97c:	4628      	mov	r0, r5
 800c97e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c982:	f842 0f04 	str.w	r0, [r2, #4]!
 800c986:	3301      	adds	r3, #1
 800c988:	e7c5      	b.n	800c916 <__lshift+0x4a>
 800c98a:	3904      	subs	r1, #4
 800c98c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c990:	f841 2f04 	str.w	r2, [r1, #4]!
 800c994:	459c      	cmp	ip, r3
 800c996:	d8f9      	bhi.n	800c98c <__lshift+0xc0>
 800c998:	e7ea      	b.n	800c970 <__lshift+0xa4>
 800c99a:	bf00      	nop
 800c99c:	0800d9af 	.word	0x0800d9af
 800c9a0:	0800d9c0 	.word	0x0800d9c0

0800c9a4 <__mcmp>:
 800c9a4:	b530      	push	{r4, r5, lr}
 800c9a6:	6902      	ldr	r2, [r0, #16]
 800c9a8:	690c      	ldr	r4, [r1, #16]
 800c9aa:	1b12      	subs	r2, r2, r4
 800c9ac:	d10e      	bne.n	800c9cc <__mcmp+0x28>
 800c9ae:	f100 0314 	add.w	r3, r0, #20
 800c9b2:	3114      	adds	r1, #20
 800c9b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c9b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c9bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c9c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c9c4:	42a5      	cmp	r5, r4
 800c9c6:	d003      	beq.n	800c9d0 <__mcmp+0x2c>
 800c9c8:	d305      	bcc.n	800c9d6 <__mcmp+0x32>
 800c9ca:	2201      	movs	r2, #1
 800c9cc:	4610      	mov	r0, r2
 800c9ce:	bd30      	pop	{r4, r5, pc}
 800c9d0:	4283      	cmp	r3, r0
 800c9d2:	d3f3      	bcc.n	800c9bc <__mcmp+0x18>
 800c9d4:	e7fa      	b.n	800c9cc <__mcmp+0x28>
 800c9d6:	f04f 32ff 	mov.w	r2, #4294967295
 800c9da:	e7f7      	b.n	800c9cc <__mcmp+0x28>

0800c9dc <__mdiff>:
 800c9dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9e0:	460c      	mov	r4, r1
 800c9e2:	4606      	mov	r6, r0
 800c9e4:	4611      	mov	r1, r2
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	4690      	mov	r8, r2
 800c9ea:	f7ff ffdb 	bl	800c9a4 <__mcmp>
 800c9ee:	1e05      	subs	r5, r0, #0
 800c9f0:	d110      	bne.n	800ca14 <__mdiff+0x38>
 800c9f2:	4629      	mov	r1, r5
 800c9f4:	4630      	mov	r0, r6
 800c9f6:	f7ff fd59 	bl	800c4ac <_Balloc>
 800c9fa:	b930      	cbnz	r0, 800ca0a <__mdiff+0x2e>
 800c9fc:	4b3a      	ldr	r3, [pc, #232]	; (800cae8 <__mdiff+0x10c>)
 800c9fe:	4602      	mov	r2, r0
 800ca00:	f240 2137 	movw	r1, #567	; 0x237
 800ca04:	4839      	ldr	r0, [pc, #228]	; (800caec <__mdiff+0x110>)
 800ca06:	f7fe fdb7 	bl	800b578 <__assert_func>
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ca10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca14:	bfa4      	itt	ge
 800ca16:	4643      	movge	r3, r8
 800ca18:	46a0      	movge	r8, r4
 800ca1a:	4630      	mov	r0, r6
 800ca1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ca20:	bfa6      	itte	ge
 800ca22:	461c      	movge	r4, r3
 800ca24:	2500      	movge	r5, #0
 800ca26:	2501      	movlt	r5, #1
 800ca28:	f7ff fd40 	bl	800c4ac <_Balloc>
 800ca2c:	b920      	cbnz	r0, 800ca38 <__mdiff+0x5c>
 800ca2e:	4b2e      	ldr	r3, [pc, #184]	; (800cae8 <__mdiff+0x10c>)
 800ca30:	4602      	mov	r2, r0
 800ca32:	f240 2145 	movw	r1, #581	; 0x245
 800ca36:	e7e5      	b.n	800ca04 <__mdiff+0x28>
 800ca38:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ca3c:	6926      	ldr	r6, [r4, #16]
 800ca3e:	60c5      	str	r5, [r0, #12]
 800ca40:	f104 0914 	add.w	r9, r4, #20
 800ca44:	f108 0514 	add.w	r5, r8, #20
 800ca48:	f100 0e14 	add.w	lr, r0, #20
 800ca4c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ca50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ca54:	f108 0210 	add.w	r2, r8, #16
 800ca58:	46f2      	mov	sl, lr
 800ca5a:	2100      	movs	r1, #0
 800ca5c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ca60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ca64:	fa11 f88b 	uxtah	r8, r1, fp
 800ca68:	b299      	uxth	r1, r3
 800ca6a:	0c1b      	lsrs	r3, r3, #16
 800ca6c:	eba8 0801 	sub.w	r8, r8, r1
 800ca70:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ca74:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ca78:	fa1f f888 	uxth.w	r8, r8
 800ca7c:	1419      	asrs	r1, r3, #16
 800ca7e:	454e      	cmp	r6, r9
 800ca80:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ca84:	f84a 3b04 	str.w	r3, [sl], #4
 800ca88:	d8e8      	bhi.n	800ca5c <__mdiff+0x80>
 800ca8a:	1b33      	subs	r3, r6, r4
 800ca8c:	3b15      	subs	r3, #21
 800ca8e:	f023 0303 	bic.w	r3, r3, #3
 800ca92:	3304      	adds	r3, #4
 800ca94:	3415      	adds	r4, #21
 800ca96:	42a6      	cmp	r6, r4
 800ca98:	bf38      	it	cc
 800ca9a:	2304      	movcc	r3, #4
 800ca9c:	441d      	add	r5, r3
 800ca9e:	4473      	add	r3, lr
 800caa0:	469e      	mov	lr, r3
 800caa2:	462e      	mov	r6, r5
 800caa4:	4566      	cmp	r6, ip
 800caa6:	d30e      	bcc.n	800cac6 <__mdiff+0xea>
 800caa8:	f10c 0203 	add.w	r2, ip, #3
 800caac:	1b52      	subs	r2, r2, r5
 800caae:	f022 0203 	bic.w	r2, r2, #3
 800cab2:	3d03      	subs	r5, #3
 800cab4:	45ac      	cmp	ip, r5
 800cab6:	bf38      	it	cc
 800cab8:	2200      	movcc	r2, #0
 800caba:	4413      	add	r3, r2
 800cabc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cac0:	b17a      	cbz	r2, 800cae2 <__mdiff+0x106>
 800cac2:	6107      	str	r7, [r0, #16]
 800cac4:	e7a4      	b.n	800ca10 <__mdiff+0x34>
 800cac6:	f856 8b04 	ldr.w	r8, [r6], #4
 800caca:	fa11 f288 	uxtah	r2, r1, r8
 800cace:	1414      	asrs	r4, r2, #16
 800cad0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cad4:	b292      	uxth	r2, r2
 800cad6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cada:	f84e 2b04 	str.w	r2, [lr], #4
 800cade:	1421      	asrs	r1, r4, #16
 800cae0:	e7e0      	b.n	800caa4 <__mdiff+0xc8>
 800cae2:	3f01      	subs	r7, #1
 800cae4:	e7ea      	b.n	800cabc <__mdiff+0xe0>
 800cae6:	bf00      	nop
 800cae8:	0800d9af 	.word	0x0800d9af
 800caec:	0800d9c0 	.word	0x0800d9c0

0800caf0 <__d2b>:
 800caf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800caf4:	460f      	mov	r7, r1
 800caf6:	2101      	movs	r1, #1
 800caf8:	ec59 8b10 	vmov	r8, r9, d0
 800cafc:	4616      	mov	r6, r2
 800cafe:	f7ff fcd5 	bl	800c4ac <_Balloc>
 800cb02:	4604      	mov	r4, r0
 800cb04:	b930      	cbnz	r0, 800cb14 <__d2b+0x24>
 800cb06:	4602      	mov	r2, r0
 800cb08:	4b24      	ldr	r3, [pc, #144]	; (800cb9c <__d2b+0xac>)
 800cb0a:	4825      	ldr	r0, [pc, #148]	; (800cba0 <__d2b+0xb0>)
 800cb0c:	f240 310f 	movw	r1, #783	; 0x30f
 800cb10:	f7fe fd32 	bl	800b578 <__assert_func>
 800cb14:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cb18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb1c:	bb2d      	cbnz	r5, 800cb6a <__d2b+0x7a>
 800cb1e:	9301      	str	r3, [sp, #4]
 800cb20:	f1b8 0300 	subs.w	r3, r8, #0
 800cb24:	d026      	beq.n	800cb74 <__d2b+0x84>
 800cb26:	4668      	mov	r0, sp
 800cb28:	9300      	str	r3, [sp, #0]
 800cb2a:	f7ff fd87 	bl	800c63c <__lo0bits>
 800cb2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cb32:	b1e8      	cbz	r0, 800cb70 <__d2b+0x80>
 800cb34:	f1c0 0320 	rsb	r3, r0, #32
 800cb38:	fa02 f303 	lsl.w	r3, r2, r3
 800cb3c:	430b      	orrs	r3, r1
 800cb3e:	40c2      	lsrs	r2, r0
 800cb40:	6163      	str	r3, [r4, #20]
 800cb42:	9201      	str	r2, [sp, #4]
 800cb44:	9b01      	ldr	r3, [sp, #4]
 800cb46:	61a3      	str	r3, [r4, #24]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	bf14      	ite	ne
 800cb4c:	2202      	movne	r2, #2
 800cb4e:	2201      	moveq	r2, #1
 800cb50:	6122      	str	r2, [r4, #16]
 800cb52:	b1bd      	cbz	r5, 800cb84 <__d2b+0x94>
 800cb54:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cb58:	4405      	add	r5, r0
 800cb5a:	603d      	str	r5, [r7, #0]
 800cb5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cb60:	6030      	str	r0, [r6, #0]
 800cb62:	4620      	mov	r0, r4
 800cb64:	b003      	add	sp, #12
 800cb66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb6e:	e7d6      	b.n	800cb1e <__d2b+0x2e>
 800cb70:	6161      	str	r1, [r4, #20]
 800cb72:	e7e7      	b.n	800cb44 <__d2b+0x54>
 800cb74:	a801      	add	r0, sp, #4
 800cb76:	f7ff fd61 	bl	800c63c <__lo0bits>
 800cb7a:	9b01      	ldr	r3, [sp, #4]
 800cb7c:	6163      	str	r3, [r4, #20]
 800cb7e:	3020      	adds	r0, #32
 800cb80:	2201      	movs	r2, #1
 800cb82:	e7e5      	b.n	800cb50 <__d2b+0x60>
 800cb84:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb8c:	6038      	str	r0, [r7, #0]
 800cb8e:	6918      	ldr	r0, [r3, #16]
 800cb90:	f7ff fd34 	bl	800c5fc <__hi0bits>
 800cb94:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cb98:	e7e2      	b.n	800cb60 <__d2b+0x70>
 800cb9a:	bf00      	nop
 800cb9c:	0800d9af 	.word	0x0800d9af
 800cba0:	0800d9c0 	.word	0x0800d9c0

0800cba4 <__ssputs_r>:
 800cba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cba8:	688e      	ldr	r6, [r1, #8]
 800cbaa:	461f      	mov	r7, r3
 800cbac:	42be      	cmp	r6, r7
 800cbae:	680b      	ldr	r3, [r1, #0]
 800cbb0:	4682      	mov	sl, r0
 800cbb2:	460c      	mov	r4, r1
 800cbb4:	4690      	mov	r8, r2
 800cbb6:	d82c      	bhi.n	800cc12 <__ssputs_r+0x6e>
 800cbb8:	898a      	ldrh	r2, [r1, #12]
 800cbba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cbbe:	d026      	beq.n	800cc0e <__ssputs_r+0x6a>
 800cbc0:	6965      	ldr	r5, [r4, #20]
 800cbc2:	6909      	ldr	r1, [r1, #16]
 800cbc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cbc8:	eba3 0901 	sub.w	r9, r3, r1
 800cbcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cbd0:	1c7b      	adds	r3, r7, #1
 800cbd2:	444b      	add	r3, r9
 800cbd4:	106d      	asrs	r5, r5, #1
 800cbd6:	429d      	cmp	r5, r3
 800cbd8:	bf38      	it	cc
 800cbda:	461d      	movcc	r5, r3
 800cbdc:	0553      	lsls	r3, r2, #21
 800cbde:	d527      	bpl.n	800cc30 <__ssputs_r+0x8c>
 800cbe0:	4629      	mov	r1, r5
 800cbe2:	f7ff fbd7 	bl	800c394 <_malloc_r>
 800cbe6:	4606      	mov	r6, r0
 800cbe8:	b360      	cbz	r0, 800cc44 <__ssputs_r+0xa0>
 800cbea:	6921      	ldr	r1, [r4, #16]
 800cbec:	464a      	mov	r2, r9
 800cbee:	f000 fa1b 	bl	800d028 <memcpy>
 800cbf2:	89a3      	ldrh	r3, [r4, #12]
 800cbf4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cbf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbfc:	81a3      	strh	r3, [r4, #12]
 800cbfe:	6126      	str	r6, [r4, #16]
 800cc00:	6165      	str	r5, [r4, #20]
 800cc02:	444e      	add	r6, r9
 800cc04:	eba5 0509 	sub.w	r5, r5, r9
 800cc08:	6026      	str	r6, [r4, #0]
 800cc0a:	60a5      	str	r5, [r4, #8]
 800cc0c:	463e      	mov	r6, r7
 800cc0e:	42be      	cmp	r6, r7
 800cc10:	d900      	bls.n	800cc14 <__ssputs_r+0x70>
 800cc12:	463e      	mov	r6, r7
 800cc14:	6820      	ldr	r0, [r4, #0]
 800cc16:	4632      	mov	r2, r6
 800cc18:	4641      	mov	r1, r8
 800cc1a:	f000 f9db 	bl	800cfd4 <memmove>
 800cc1e:	68a3      	ldr	r3, [r4, #8]
 800cc20:	1b9b      	subs	r3, r3, r6
 800cc22:	60a3      	str	r3, [r4, #8]
 800cc24:	6823      	ldr	r3, [r4, #0]
 800cc26:	4433      	add	r3, r6
 800cc28:	6023      	str	r3, [r4, #0]
 800cc2a:	2000      	movs	r0, #0
 800cc2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc30:	462a      	mov	r2, r5
 800cc32:	f000 fa36 	bl	800d0a2 <_realloc_r>
 800cc36:	4606      	mov	r6, r0
 800cc38:	2800      	cmp	r0, #0
 800cc3a:	d1e0      	bne.n	800cbfe <__ssputs_r+0x5a>
 800cc3c:	6921      	ldr	r1, [r4, #16]
 800cc3e:	4650      	mov	r0, sl
 800cc40:	f7ff fb34 	bl	800c2ac <_free_r>
 800cc44:	230c      	movs	r3, #12
 800cc46:	f8ca 3000 	str.w	r3, [sl]
 800cc4a:	89a3      	ldrh	r3, [r4, #12]
 800cc4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc50:	81a3      	strh	r3, [r4, #12]
 800cc52:	f04f 30ff 	mov.w	r0, #4294967295
 800cc56:	e7e9      	b.n	800cc2c <__ssputs_r+0x88>

0800cc58 <_svfiprintf_r>:
 800cc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc5c:	4698      	mov	r8, r3
 800cc5e:	898b      	ldrh	r3, [r1, #12]
 800cc60:	061b      	lsls	r3, r3, #24
 800cc62:	b09d      	sub	sp, #116	; 0x74
 800cc64:	4607      	mov	r7, r0
 800cc66:	460d      	mov	r5, r1
 800cc68:	4614      	mov	r4, r2
 800cc6a:	d50e      	bpl.n	800cc8a <_svfiprintf_r+0x32>
 800cc6c:	690b      	ldr	r3, [r1, #16]
 800cc6e:	b963      	cbnz	r3, 800cc8a <_svfiprintf_r+0x32>
 800cc70:	2140      	movs	r1, #64	; 0x40
 800cc72:	f7ff fb8f 	bl	800c394 <_malloc_r>
 800cc76:	6028      	str	r0, [r5, #0]
 800cc78:	6128      	str	r0, [r5, #16]
 800cc7a:	b920      	cbnz	r0, 800cc86 <_svfiprintf_r+0x2e>
 800cc7c:	230c      	movs	r3, #12
 800cc7e:	603b      	str	r3, [r7, #0]
 800cc80:	f04f 30ff 	mov.w	r0, #4294967295
 800cc84:	e0d0      	b.n	800ce28 <_svfiprintf_r+0x1d0>
 800cc86:	2340      	movs	r3, #64	; 0x40
 800cc88:	616b      	str	r3, [r5, #20]
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	9309      	str	r3, [sp, #36]	; 0x24
 800cc8e:	2320      	movs	r3, #32
 800cc90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc94:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc98:	2330      	movs	r3, #48	; 0x30
 800cc9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ce40 <_svfiprintf_r+0x1e8>
 800cc9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cca2:	f04f 0901 	mov.w	r9, #1
 800cca6:	4623      	mov	r3, r4
 800cca8:	469a      	mov	sl, r3
 800ccaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccae:	b10a      	cbz	r2, 800ccb4 <_svfiprintf_r+0x5c>
 800ccb0:	2a25      	cmp	r2, #37	; 0x25
 800ccb2:	d1f9      	bne.n	800cca8 <_svfiprintf_r+0x50>
 800ccb4:	ebba 0b04 	subs.w	fp, sl, r4
 800ccb8:	d00b      	beq.n	800ccd2 <_svfiprintf_r+0x7a>
 800ccba:	465b      	mov	r3, fp
 800ccbc:	4622      	mov	r2, r4
 800ccbe:	4629      	mov	r1, r5
 800ccc0:	4638      	mov	r0, r7
 800ccc2:	f7ff ff6f 	bl	800cba4 <__ssputs_r>
 800ccc6:	3001      	adds	r0, #1
 800ccc8:	f000 80a9 	beq.w	800ce1e <_svfiprintf_r+0x1c6>
 800cccc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ccce:	445a      	add	r2, fp
 800ccd0:	9209      	str	r2, [sp, #36]	; 0x24
 800ccd2:	f89a 3000 	ldrb.w	r3, [sl]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	f000 80a1 	beq.w	800ce1e <_svfiprintf_r+0x1c6>
 800ccdc:	2300      	movs	r3, #0
 800ccde:	f04f 32ff 	mov.w	r2, #4294967295
 800cce2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cce6:	f10a 0a01 	add.w	sl, sl, #1
 800ccea:	9304      	str	r3, [sp, #16]
 800ccec:	9307      	str	r3, [sp, #28]
 800ccee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ccf2:	931a      	str	r3, [sp, #104]	; 0x68
 800ccf4:	4654      	mov	r4, sl
 800ccf6:	2205      	movs	r2, #5
 800ccf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccfc:	4850      	ldr	r0, [pc, #320]	; (800ce40 <_svfiprintf_r+0x1e8>)
 800ccfe:	f7f3 fa9f 	bl	8000240 <memchr>
 800cd02:	9a04      	ldr	r2, [sp, #16]
 800cd04:	b9d8      	cbnz	r0, 800cd3e <_svfiprintf_r+0xe6>
 800cd06:	06d0      	lsls	r0, r2, #27
 800cd08:	bf44      	itt	mi
 800cd0a:	2320      	movmi	r3, #32
 800cd0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd10:	0711      	lsls	r1, r2, #28
 800cd12:	bf44      	itt	mi
 800cd14:	232b      	movmi	r3, #43	; 0x2b
 800cd16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd1a:	f89a 3000 	ldrb.w	r3, [sl]
 800cd1e:	2b2a      	cmp	r3, #42	; 0x2a
 800cd20:	d015      	beq.n	800cd4e <_svfiprintf_r+0xf6>
 800cd22:	9a07      	ldr	r2, [sp, #28]
 800cd24:	4654      	mov	r4, sl
 800cd26:	2000      	movs	r0, #0
 800cd28:	f04f 0c0a 	mov.w	ip, #10
 800cd2c:	4621      	mov	r1, r4
 800cd2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd32:	3b30      	subs	r3, #48	; 0x30
 800cd34:	2b09      	cmp	r3, #9
 800cd36:	d94d      	bls.n	800cdd4 <_svfiprintf_r+0x17c>
 800cd38:	b1b0      	cbz	r0, 800cd68 <_svfiprintf_r+0x110>
 800cd3a:	9207      	str	r2, [sp, #28]
 800cd3c:	e014      	b.n	800cd68 <_svfiprintf_r+0x110>
 800cd3e:	eba0 0308 	sub.w	r3, r0, r8
 800cd42:	fa09 f303 	lsl.w	r3, r9, r3
 800cd46:	4313      	orrs	r3, r2
 800cd48:	9304      	str	r3, [sp, #16]
 800cd4a:	46a2      	mov	sl, r4
 800cd4c:	e7d2      	b.n	800ccf4 <_svfiprintf_r+0x9c>
 800cd4e:	9b03      	ldr	r3, [sp, #12]
 800cd50:	1d19      	adds	r1, r3, #4
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	9103      	str	r1, [sp, #12]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	bfbb      	ittet	lt
 800cd5a:	425b      	neglt	r3, r3
 800cd5c:	f042 0202 	orrlt.w	r2, r2, #2
 800cd60:	9307      	strge	r3, [sp, #28]
 800cd62:	9307      	strlt	r3, [sp, #28]
 800cd64:	bfb8      	it	lt
 800cd66:	9204      	strlt	r2, [sp, #16]
 800cd68:	7823      	ldrb	r3, [r4, #0]
 800cd6a:	2b2e      	cmp	r3, #46	; 0x2e
 800cd6c:	d10c      	bne.n	800cd88 <_svfiprintf_r+0x130>
 800cd6e:	7863      	ldrb	r3, [r4, #1]
 800cd70:	2b2a      	cmp	r3, #42	; 0x2a
 800cd72:	d134      	bne.n	800cdde <_svfiprintf_r+0x186>
 800cd74:	9b03      	ldr	r3, [sp, #12]
 800cd76:	1d1a      	adds	r2, r3, #4
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	9203      	str	r2, [sp, #12]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	bfb8      	it	lt
 800cd80:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd84:	3402      	adds	r4, #2
 800cd86:	9305      	str	r3, [sp, #20]
 800cd88:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ce50 <_svfiprintf_r+0x1f8>
 800cd8c:	7821      	ldrb	r1, [r4, #0]
 800cd8e:	2203      	movs	r2, #3
 800cd90:	4650      	mov	r0, sl
 800cd92:	f7f3 fa55 	bl	8000240 <memchr>
 800cd96:	b138      	cbz	r0, 800cda8 <_svfiprintf_r+0x150>
 800cd98:	9b04      	ldr	r3, [sp, #16]
 800cd9a:	eba0 000a 	sub.w	r0, r0, sl
 800cd9e:	2240      	movs	r2, #64	; 0x40
 800cda0:	4082      	lsls	r2, r0
 800cda2:	4313      	orrs	r3, r2
 800cda4:	3401      	adds	r4, #1
 800cda6:	9304      	str	r3, [sp, #16]
 800cda8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdac:	4825      	ldr	r0, [pc, #148]	; (800ce44 <_svfiprintf_r+0x1ec>)
 800cdae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cdb2:	2206      	movs	r2, #6
 800cdb4:	f7f3 fa44 	bl	8000240 <memchr>
 800cdb8:	2800      	cmp	r0, #0
 800cdba:	d038      	beq.n	800ce2e <_svfiprintf_r+0x1d6>
 800cdbc:	4b22      	ldr	r3, [pc, #136]	; (800ce48 <_svfiprintf_r+0x1f0>)
 800cdbe:	bb1b      	cbnz	r3, 800ce08 <_svfiprintf_r+0x1b0>
 800cdc0:	9b03      	ldr	r3, [sp, #12]
 800cdc2:	3307      	adds	r3, #7
 800cdc4:	f023 0307 	bic.w	r3, r3, #7
 800cdc8:	3308      	adds	r3, #8
 800cdca:	9303      	str	r3, [sp, #12]
 800cdcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdce:	4433      	add	r3, r6
 800cdd0:	9309      	str	r3, [sp, #36]	; 0x24
 800cdd2:	e768      	b.n	800cca6 <_svfiprintf_r+0x4e>
 800cdd4:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdd8:	460c      	mov	r4, r1
 800cdda:	2001      	movs	r0, #1
 800cddc:	e7a6      	b.n	800cd2c <_svfiprintf_r+0xd4>
 800cdde:	2300      	movs	r3, #0
 800cde0:	3401      	adds	r4, #1
 800cde2:	9305      	str	r3, [sp, #20]
 800cde4:	4619      	mov	r1, r3
 800cde6:	f04f 0c0a 	mov.w	ip, #10
 800cdea:	4620      	mov	r0, r4
 800cdec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdf0:	3a30      	subs	r2, #48	; 0x30
 800cdf2:	2a09      	cmp	r2, #9
 800cdf4:	d903      	bls.n	800cdfe <_svfiprintf_r+0x1a6>
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d0c6      	beq.n	800cd88 <_svfiprintf_r+0x130>
 800cdfa:	9105      	str	r1, [sp, #20]
 800cdfc:	e7c4      	b.n	800cd88 <_svfiprintf_r+0x130>
 800cdfe:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce02:	4604      	mov	r4, r0
 800ce04:	2301      	movs	r3, #1
 800ce06:	e7f0      	b.n	800cdea <_svfiprintf_r+0x192>
 800ce08:	ab03      	add	r3, sp, #12
 800ce0a:	9300      	str	r3, [sp, #0]
 800ce0c:	462a      	mov	r2, r5
 800ce0e:	4b0f      	ldr	r3, [pc, #60]	; (800ce4c <_svfiprintf_r+0x1f4>)
 800ce10:	a904      	add	r1, sp, #16
 800ce12:	4638      	mov	r0, r7
 800ce14:	f7fd fdc8 	bl	800a9a8 <_printf_float>
 800ce18:	1c42      	adds	r2, r0, #1
 800ce1a:	4606      	mov	r6, r0
 800ce1c:	d1d6      	bne.n	800cdcc <_svfiprintf_r+0x174>
 800ce1e:	89ab      	ldrh	r3, [r5, #12]
 800ce20:	065b      	lsls	r3, r3, #25
 800ce22:	f53f af2d 	bmi.w	800cc80 <_svfiprintf_r+0x28>
 800ce26:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce28:	b01d      	add	sp, #116	; 0x74
 800ce2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce2e:	ab03      	add	r3, sp, #12
 800ce30:	9300      	str	r3, [sp, #0]
 800ce32:	462a      	mov	r2, r5
 800ce34:	4b05      	ldr	r3, [pc, #20]	; (800ce4c <_svfiprintf_r+0x1f4>)
 800ce36:	a904      	add	r1, sp, #16
 800ce38:	4638      	mov	r0, r7
 800ce3a:	f7fe f859 	bl	800aef0 <_printf_i>
 800ce3e:	e7eb      	b.n	800ce18 <_svfiprintf_r+0x1c0>
 800ce40:	0800db1c 	.word	0x0800db1c
 800ce44:	0800db26 	.word	0x0800db26
 800ce48:	0800a9a9 	.word	0x0800a9a9
 800ce4c:	0800cba5 	.word	0x0800cba5
 800ce50:	0800db22 	.word	0x0800db22

0800ce54 <__sflush_r>:
 800ce54:	898a      	ldrh	r2, [r1, #12]
 800ce56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce5a:	4605      	mov	r5, r0
 800ce5c:	0710      	lsls	r0, r2, #28
 800ce5e:	460c      	mov	r4, r1
 800ce60:	d458      	bmi.n	800cf14 <__sflush_r+0xc0>
 800ce62:	684b      	ldr	r3, [r1, #4]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	dc05      	bgt.n	800ce74 <__sflush_r+0x20>
 800ce68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	dc02      	bgt.n	800ce74 <__sflush_r+0x20>
 800ce6e:	2000      	movs	r0, #0
 800ce70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce76:	2e00      	cmp	r6, #0
 800ce78:	d0f9      	beq.n	800ce6e <__sflush_r+0x1a>
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ce80:	682f      	ldr	r7, [r5, #0]
 800ce82:	6a21      	ldr	r1, [r4, #32]
 800ce84:	602b      	str	r3, [r5, #0]
 800ce86:	d032      	beq.n	800ceee <__sflush_r+0x9a>
 800ce88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ce8a:	89a3      	ldrh	r3, [r4, #12]
 800ce8c:	075a      	lsls	r2, r3, #29
 800ce8e:	d505      	bpl.n	800ce9c <__sflush_r+0x48>
 800ce90:	6863      	ldr	r3, [r4, #4]
 800ce92:	1ac0      	subs	r0, r0, r3
 800ce94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce96:	b10b      	cbz	r3, 800ce9c <__sflush_r+0x48>
 800ce98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce9a:	1ac0      	subs	r0, r0, r3
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	4602      	mov	r2, r0
 800cea0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cea2:	6a21      	ldr	r1, [r4, #32]
 800cea4:	4628      	mov	r0, r5
 800cea6:	47b0      	blx	r6
 800cea8:	1c43      	adds	r3, r0, #1
 800ceaa:	89a3      	ldrh	r3, [r4, #12]
 800ceac:	d106      	bne.n	800cebc <__sflush_r+0x68>
 800ceae:	6829      	ldr	r1, [r5, #0]
 800ceb0:	291d      	cmp	r1, #29
 800ceb2:	d82b      	bhi.n	800cf0c <__sflush_r+0xb8>
 800ceb4:	4a29      	ldr	r2, [pc, #164]	; (800cf5c <__sflush_r+0x108>)
 800ceb6:	410a      	asrs	r2, r1
 800ceb8:	07d6      	lsls	r6, r2, #31
 800ceba:	d427      	bmi.n	800cf0c <__sflush_r+0xb8>
 800cebc:	2200      	movs	r2, #0
 800cebe:	6062      	str	r2, [r4, #4]
 800cec0:	04d9      	lsls	r1, r3, #19
 800cec2:	6922      	ldr	r2, [r4, #16]
 800cec4:	6022      	str	r2, [r4, #0]
 800cec6:	d504      	bpl.n	800ced2 <__sflush_r+0x7e>
 800cec8:	1c42      	adds	r2, r0, #1
 800ceca:	d101      	bne.n	800ced0 <__sflush_r+0x7c>
 800cecc:	682b      	ldr	r3, [r5, #0]
 800cece:	b903      	cbnz	r3, 800ced2 <__sflush_r+0x7e>
 800ced0:	6560      	str	r0, [r4, #84]	; 0x54
 800ced2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ced4:	602f      	str	r7, [r5, #0]
 800ced6:	2900      	cmp	r1, #0
 800ced8:	d0c9      	beq.n	800ce6e <__sflush_r+0x1a>
 800ceda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cede:	4299      	cmp	r1, r3
 800cee0:	d002      	beq.n	800cee8 <__sflush_r+0x94>
 800cee2:	4628      	mov	r0, r5
 800cee4:	f7ff f9e2 	bl	800c2ac <_free_r>
 800cee8:	2000      	movs	r0, #0
 800ceea:	6360      	str	r0, [r4, #52]	; 0x34
 800ceec:	e7c0      	b.n	800ce70 <__sflush_r+0x1c>
 800ceee:	2301      	movs	r3, #1
 800cef0:	4628      	mov	r0, r5
 800cef2:	47b0      	blx	r6
 800cef4:	1c41      	adds	r1, r0, #1
 800cef6:	d1c8      	bne.n	800ce8a <__sflush_r+0x36>
 800cef8:	682b      	ldr	r3, [r5, #0]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d0c5      	beq.n	800ce8a <__sflush_r+0x36>
 800cefe:	2b1d      	cmp	r3, #29
 800cf00:	d001      	beq.n	800cf06 <__sflush_r+0xb2>
 800cf02:	2b16      	cmp	r3, #22
 800cf04:	d101      	bne.n	800cf0a <__sflush_r+0xb6>
 800cf06:	602f      	str	r7, [r5, #0]
 800cf08:	e7b1      	b.n	800ce6e <__sflush_r+0x1a>
 800cf0a:	89a3      	ldrh	r3, [r4, #12]
 800cf0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf10:	81a3      	strh	r3, [r4, #12]
 800cf12:	e7ad      	b.n	800ce70 <__sflush_r+0x1c>
 800cf14:	690f      	ldr	r7, [r1, #16]
 800cf16:	2f00      	cmp	r7, #0
 800cf18:	d0a9      	beq.n	800ce6e <__sflush_r+0x1a>
 800cf1a:	0793      	lsls	r3, r2, #30
 800cf1c:	680e      	ldr	r6, [r1, #0]
 800cf1e:	bf08      	it	eq
 800cf20:	694b      	ldreq	r3, [r1, #20]
 800cf22:	600f      	str	r7, [r1, #0]
 800cf24:	bf18      	it	ne
 800cf26:	2300      	movne	r3, #0
 800cf28:	eba6 0807 	sub.w	r8, r6, r7
 800cf2c:	608b      	str	r3, [r1, #8]
 800cf2e:	f1b8 0f00 	cmp.w	r8, #0
 800cf32:	dd9c      	ble.n	800ce6e <__sflush_r+0x1a>
 800cf34:	6a21      	ldr	r1, [r4, #32]
 800cf36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cf38:	4643      	mov	r3, r8
 800cf3a:	463a      	mov	r2, r7
 800cf3c:	4628      	mov	r0, r5
 800cf3e:	47b0      	blx	r6
 800cf40:	2800      	cmp	r0, #0
 800cf42:	dc06      	bgt.n	800cf52 <__sflush_r+0xfe>
 800cf44:	89a3      	ldrh	r3, [r4, #12]
 800cf46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf4a:	81a3      	strh	r3, [r4, #12]
 800cf4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf50:	e78e      	b.n	800ce70 <__sflush_r+0x1c>
 800cf52:	4407      	add	r7, r0
 800cf54:	eba8 0800 	sub.w	r8, r8, r0
 800cf58:	e7e9      	b.n	800cf2e <__sflush_r+0xda>
 800cf5a:	bf00      	nop
 800cf5c:	dfbffffe 	.word	0xdfbffffe

0800cf60 <_fflush_r>:
 800cf60:	b538      	push	{r3, r4, r5, lr}
 800cf62:	690b      	ldr	r3, [r1, #16]
 800cf64:	4605      	mov	r5, r0
 800cf66:	460c      	mov	r4, r1
 800cf68:	b913      	cbnz	r3, 800cf70 <_fflush_r+0x10>
 800cf6a:	2500      	movs	r5, #0
 800cf6c:	4628      	mov	r0, r5
 800cf6e:	bd38      	pop	{r3, r4, r5, pc}
 800cf70:	b118      	cbz	r0, 800cf7a <_fflush_r+0x1a>
 800cf72:	6a03      	ldr	r3, [r0, #32]
 800cf74:	b90b      	cbnz	r3, 800cf7a <_fflush_r+0x1a>
 800cf76:	f7fe f957 	bl	800b228 <__sinit>
 800cf7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d0f3      	beq.n	800cf6a <_fflush_r+0xa>
 800cf82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cf84:	07d0      	lsls	r0, r2, #31
 800cf86:	d404      	bmi.n	800cf92 <_fflush_r+0x32>
 800cf88:	0599      	lsls	r1, r3, #22
 800cf8a:	d402      	bmi.n	800cf92 <_fflush_r+0x32>
 800cf8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf8e:	f7fe faf1 	bl	800b574 <__retarget_lock_acquire_recursive>
 800cf92:	4628      	mov	r0, r5
 800cf94:	4621      	mov	r1, r4
 800cf96:	f7ff ff5d 	bl	800ce54 <__sflush_r>
 800cf9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf9c:	07da      	lsls	r2, r3, #31
 800cf9e:	4605      	mov	r5, r0
 800cfa0:	d4e4      	bmi.n	800cf6c <_fflush_r+0xc>
 800cfa2:	89a3      	ldrh	r3, [r4, #12]
 800cfa4:	059b      	lsls	r3, r3, #22
 800cfa6:	d4e1      	bmi.n	800cf6c <_fflush_r+0xc>
 800cfa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cfaa:	f7fe fae4 	bl	800b576 <__retarget_lock_release_recursive>
 800cfae:	e7dd      	b.n	800cf6c <_fflush_r+0xc>

0800cfb0 <fiprintf>:
 800cfb0:	b40e      	push	{r1, r2, r3}
 800cfb2:	b503      	push	{r0, r1, lr}
 800cfb4:	4601      	mov	r1, r0
 800cfb6:	ab03      	add	r3, sp, #12
 800cfb8:	4805      	ldr	r0, [pc, #20]	; (800cfd0 <fiprintf+0x20>)
 800cfba:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfbe:	6800      	ldr	r0, [r0, #0]
 800cfc0:	9301      	str	r3, [sp, #4]
 800cfc2:	f000 f8d3 	bl	800d16c <_vfiprintf_r>
 800cfc6:	b002      	add	sp, #8
 800cfc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfcc:	b003      	add	sp, #12
 800cfce:	4770      	bx	lr
 800cfd0:	20000120 	.word	0x20000120

0800cfd4 <memmove>:
 800cfd4:	4288      	cmp	r0, r1
 800cfd6:	b510      	push	{r4, lr}
 800cfd8:	eb01 0402 	add.w	r4, r1, r2
 800cfdc:	d902      	bls.n	800cfe4 <memmove+0x10>
 800cfde:	4284      	cmp	r4, r0
 800cfe0:	4623      	mov	r3, r4
 800cfe2:	d807      	bhi.n	800cff4 <memmove+0x20>
 800cfe4:	1e43      	subs	r3, r0, #1
 800cfe6:	42a1      	cmp	r1, r4
 800cfe8:	d008      	beq.n	800cffc <memmove+0x28>
 800cfea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cff2:	e7f8      	b.n	800cfe6 <memmove+0x12>
 800cff4:	4402      	add	r2, r0
 800cff6:	4601      	mov	r1, r0
 800cff8:	428a      	cmp	r2, r1
 800cffa:	d100      	bne.n	800cffe <memmove+0x2a>
 800cffc:	bd10      	pop	{r4, pc}
 800cffe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d002:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d006:	e7f7      	b.n	800cff8 <memmove+0x24>

0800d008 <_sbrk_r>:
 800d008:	b538      	push	{r3, r4, r5, lr}
 800d00a:	4d06      	ldr	r5, [pc, #24]	; (800d024 <_sbrk_r+0x1c>)
 800d00c:	2300      	movs	r3, #0
 800d00e:	4604      	mov	r4, r0
 800d010:	4608      	mov	r0, r1
 800d012:	602b      	str	r3, [r5, #0]
 800d014:	f7f4 fd2a 	bl	8001a6c <_sbrk>
 800d018:	1c43      	adds	r3, r0, #1
 800d01a:	d102      	bne.n	800d022 <_sbrk_r+0x1a>
 800d01c:	682b      	ldr	r3, [r5, #0]
 800d01e:	b103      	cbz	r3, 800d022 <_sbrk_r+0x1a>
 800d020:	6023      	str	r3, [r4, #0]
 800d022:	bd38      	pop	{r3, r4, r5, pc}
 800d024:	20000950 	.word	0x20000950

0800d028 <memcpy>:
 800d028:	440a      	add	r2, r1
 800d02a:	4291      	cmp	r1, r2
 800d02c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d030:	d100      	bne.n	800d034 <memcpy+0xc>
 800d032:	4770      	bx	lr
 800d034:	b510      	push	{r4, lr}
 800d036:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d03a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d03e:	4291      	cmp	r1, r2
 800d040:	d1f9      	bne.n	800d036 <memcpy+0xe>
 800d042:	bd10      	pop	{r4, pc}

0800d044 <abort>:
 800d044:	b508      	push	{r3, lr}
 800d046:	2006      	movs	r0, #6
 800d048:	f000 fa68 	bl	800d51c <raise>
 800d04c:	2001      	movs	r0, #1
 800d04e:	f7f4 fc95 	bl	800197c <_exit>

0800d052 <_calloc_r>:
 800d052:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d054:	fba1 2402 	umull	r2, r4, r1, r2
 800d058:	b94c      	cbnz	r4, 800d06e <_calloc_r+0x1c>
 800d05a:	4611      	mov	r1, r2
 800d05c:	9201      	str	r2, [sp, #4]
 800d05e:	f7ff f999 	bl	800c394 <_malloc_r>
 800d062:	9a01      	ldr	r2, [sp, #4]
 800d064:	4605      	mov	r5, r0
 800d066:	b930      	cbnz	r0, 800d076 <_calloc_r+0x24>
 800d068:	4628      	mov	r0, r5
 800d06a:	b003      	add	sp, #12
 800d06c:	bd30      	pop	{r4, r5, pc}
 800d06e:	220c      	movs	r2, #12
 800d070:	6002      	str	r2, [r0, #0]
 800d072:	2500      	movs	r5, #0
 800d074:	e7f8      	b.n	800d068 <_calloc_r+0x16>
 800d076:	4621      	mov	r1, r4
 800d078:	f7fe f9a3 	bl	800b3c2 <memset>
 800d07c:	e7f4      	b.n	800d068 <_calloc_r+0x16>

0800d07e <__ascii_mbtowc>:
 800d07e:	b082      	sub	sp, #8
 800d080:	b901      	cbnz	r1, 800d084 <__ascii_mbtowc+0x6>
 800d082:	a901      	add	r1, sp, #4
 800d084:	b142      	cbz	r2, 800d098 <__ascii_mbtowc+0x1a>
 800d086:	b14b      	cbz	r3, 800d09c <__ascii_mbtowc+0x1e>
 800d088:	7813      	ldrb	r3, [r2, #0]
 800d08a:	600b      	str	r3, [r1, #0]
 800d08c:	7812      	ldrb	r2, [r2, #0]
 800d08e:	1e10      	subs	r0, r2, #0
 800d090:	bf18      	it	ne
 800d092:	2001      	movne	r0, #1
 800d094:	b002      	add	sp, #8
 800d096:	4770      	bx	lr
 800d098:	4610      	mov	r0, r2
 800d09a:	e7fb      	b.n	800d094 <__ascii_mbtowc+0x16>
 800d09c:	f06f 0001 	mvn.w	r0, #1
 800d0a0:	e7f8      	b.n	800d094 <__ascii_mbtowc+0x16>

0800d0a2 <_realloc_r>:
 800d0a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0a6:	4680      	mov	r8, r0
 800d0a8:	4614      	mov	r4, r2
 800d0aa:	460e      	mov	r6, r1
 800d0ac:	b921      	cbnz	r1, 800d0b8 <_realloc_r+0x16>
 800d0ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0b2:	4611      	mov	r1, r2
 800d0b4:	f7ff b96e 	b.w	800c394 <_malloc_r>
 800d0b8:	b92a      	cbnz	r2, 800d0c6 <_realloc_r+0x24>
 800d0ba:	f7ff f8f7 	bl	800c2ac <_free_r>
 800d0be:	4625      	mov	r5, r4
 800d0c0:	4628      	mov	r0, r5
 800d0c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0c6:	f000 fa45 	bl	800d554 <_malloc_usable_size_r>
 800d0ca:	4284      	cmp	r4, r0
 800d0cc:	4607      	mov	r7, r0
 800d0ce:	d802      	bhi.n	800d0d6 <_realloc_r+0x34>
 800d0d0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d0d4:	d812      	bhi.n	800d0fc <_realloc_r+0x5a>
 800d0d6:	4621      	mov	r1, r4
 800d0d8:	4640      	mov	r0, r8
 800d0da:	f7ff f95b 	bl	800c394 <_malloc_r>
 800d0de:	4605      	mov	r5, r0
 800d0e0:	2800      	cmp	r0, #0
 800d0e2:	d0ed      	beq.n	800d0c0 <_realloc_r+0x1e>
 800d0e4:	42bc      	cmp	r4, r7
 800d0e6:	4622      	mov	r2, r4
 800d0e8:	4631      	mov	r1, r6
 800d0ea:	bf28      	it	cs
 800d0ec:	463a      	movcs	r2, r7
 800d0ee:	f7ff ff9b 	bl	800d028 <memcpy>
 800d0f2:	4631      	mov	r1, r6
 800d0f4:	4640      	mov	r0, r8
 800d0f6:	f7ff f8d9 	bl	800c2ac <_free_r>
 800d0fa:	e7e1      	b.n	800d0c0 <_realloc_r+0x1e>
 800d0fc:	4635      	mov	r5, r6
 800d0fe:	e7df      	b.n	800d0c0 <_realloc_r+0x1e>

0800d100 <__ascii_wctomb>:
 800d100:	b149      	cbz	r1, 800d116 <__ascii_wctomb+0x16>
 800d102:	2aff      	cmp	r2, #255	; 0xff
 800d104:	bf85      	ittet	hi
 800d106:	238a      	movhi	r3, #138	; 0x8a
 800d108:	6003      	strhi	r3, [r0, #0]
 800d10a:	700a      	strbls	r2, [r1, #0]
 800d10c:	f04f 30ff 	movhi.w	r0, #4294967295
 800d110:	bf98      	it	ls
 800d112:	2001      	movls	r0, #1
 800d114:	4770      	bx	lr
 800d116:	4608      	mov	r0, r1
 800d118:	4770      	bx	lr

0800d11a <__sfputc_r>:
 800d11a:	6893      	ldr	r3, [r2, #8]
 800d11c:	3b01      	subs	r3, #1
 800d11e:	2b00      	cmp	r3, #0
 800d120:	b410      	push	{r4}
 800d122:	6093      	str	r3, [r2, #8]
 800d124:	da08      	bge.n	800d138 <__sfputc_r+0x1e>
 800d126:	6994      	ldr	r4, [r2, #24]
 800d128:	42a3      	cmp	r3, r4
 800d12a:	db01      	blt.n	800d130 <__sfputc_r+0x16>
 800d12c:	290a      	cmp	r1, #10
 800d12e:	d103      	bne.n	800d138 <__sfputc_r+0x1e>
 800d130:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d134:	f000 b934 	b.w	800d3a0 <__swbuf_r>
 800d138:	6813      	ldr	r3, [r2, #0]
 800d13a:	1c58      	adds	r0, r3, #1
 800d13c:	6010      	str	r0, [r2, #0]
 800d13e:	7019      	strb	r1, [r3, #0]
 800d140:	4608      	mov	r0, r1
 800d142:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d146:	4770      	bx	lr

0800d148 <__sfputs_r>:
 800d148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d14a:	4606      	mov	r6, r0
 800d14c:	460f      	mov	r7, r1
 800d14e:	4614      	mov	r4, r2
 800d150:	18d5      	adds	r5, r2, r3
 800d152:	42ac      	cmp	r4, r5
 800d154:	d101      	bne.n	800d15a <__sfputs_r+0x12>
 800d156:	2000      	movs	r0, #0
 800d158:	e007      	b.n	800d16a <__sfputs_r+0x22>
 800d15a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d15e:	463a      	mov	r2, r7
 800d160:	4630      	mov	r0, r6
 800d162:	f7ff ffda 	bl	800d11a <__sfputc_r>
 800d166:	1c43      	adds	r3, r0, #1
 800d168:	d1f3      	bne.n	800d152 <__sfputs_r+0xa>
 800d16a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d16c <_vfiprintf_r>:
 800d16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d170:	460d      	mov	r5, r1
 800d172:	b09d      	sub	sp, #116	; 0x74
 800d174:	4614      	mov	r4, r2
 800d176:	4698      	mov	r8, r3
 800d178:	4606      	mov	r6, r0
 800d17a:	b118      	cbz	r0, 800d184 <_vfiprintf_r+0x18>
 800d17c:	6a03      	ldr	r3, [r0, #32]
 800d17e:	b90b      	cbnz	r3, 800d184 <_vfiprintf_r+0x18>
 800d180:	f7fe f852 	bl	800b228 <__sinit>
 800d184:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d186:	07d9      	lsls	r1, r3, #31
 800d188:	d405      	bmi.n	800d196 <_vfiprintf_r+0x2a>
 800d18a:	89ab      	ldrh	r3, [r5, #12]
 800d18c:	059a      	lsls	r2, r3, #22
 800d18e:	d402      	bmi.n	800d196 <_vfiprintf_r+0x2a>
 800d190:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d192:	f7fe f9ef 	bl	800b574 <__retarget_lock_acquire_recursive>
 800d196:	89ab      	ldrh	r3, [r5, #12]
 800d198:	071b      	lsls	r3, r3, #28
 800d19a:	d501      	bpl.n	800d1a0 <_vfiprintf_r+0x34>
 800d19c:	692b      	ldr	r3, [r5, #16]
 800d19e:	b99b      	cbnz	r3, 800d1c8 <_vfiprintf_r+0x5c>
 800d1a0:	4629      	mov	r1, r5
 800d1a2:	4630      	mov	r0, r6
 800d1a4:	f000 f93a 	bl	800d41c <__swsetup_r>
 800d1a8:	b170      	cbz	r0, 800d1c8 <_vfiprintf_r+0x5c>
 800d1aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1ac:	07dc      	lsls	r4, r3, #31
 800d1ae:	d504      	bpl.n	800d1ba <_vfiprintf_r+0x4e>
 800d1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d1b4:	b01d      	add	sp, #116	; 0x74
 800d1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ba:	89ab      	ldrh	r3, [r5, #12]
 800d1bc:	0598      	lsls	r0, r3, #22
 800d1be:	d4f7      	bmi.n	800d1b0 <_vfiprintf_r+0x44>
 800d1c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1c2:	f7fe f9d8 	bl	800b576 <__retarget_lock_release_recursive>
 800d1c6:	e7f3      	b.n	800d1b0 <_vfiprintf_r+0x44>
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	9309      	str	r3, [sp, #36]	; 0x24
 800d1cc:	2320      	movs	r3, #32
 800d1ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1d6:	2330      	movs	r3, #48	; 0x30
 800d1d8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d38c <_vfiprintf_r+0x220>
 800d1dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d1e0:	f04f 0901 	mov.w	r9, #1
 800d1e4:	4623      	mov	r3, r4
 800d1e6:	469a      	mov	sl, r3
 800d1e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1ec:	b10a      	cbz	r2, 800d1f2 <_vfiprintf_r+0x86>
 800d1ee:	2a25      	cmp	r2, #37	; 0x25
 800d1f0:	d1f9      	bne.n	800d1e6 <_vfiprintf_r+0x7a>
 800d1f2:	ebba 0b04 	subs.w	fp, sl, r4
 800d1f6:	d00b      	beq.n	800d210 <_vfiprintf_r+0xa4>
 800d1f8:	465b      	mov	r3, fp
 800d1fa:	4622      	mov	r2, r4
 800d1fc:	4629      	mov	r1, r5
 800d1fe:	4630      	mov	r0, r6
 800d200:	f7ff ffa2 	bl	800d148 <__sfputs_r>
 800d204:	3001      	adds	r0, #1
 800d206:	f000 80a9 	beq.w	800d35c <_vfiprintf_r+0x1f0>
 800d20a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d20c:	445a      	add	r2, fp
 800d20e:	9209      	str	r2, [sp, #36]	; 0x24
 800d210:	f89a 3000 	ldrb.w	r3, [sl]
 800d214:	2b00      	cmp	r3, #0
 800d216:	f000 80a1 	beq.w	800d35c <_vfiprintf_r+0x1f0>
 800d21a:	2300      	movs	r3, #0
 800d21c:	f04f 32ff 	mov.w	r2, #4294967295
 800d220:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d224:	f10a 0a01 	add.w	sl, sl, #1
 800d228:	9304      	str	r3, [sp, #16]
 800d22a:	9307      	str	r3, [sp, #28]
 800d22c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d230:	931a      	str	r3, [sp, #104]	; 0x68
 800d232:	4654      	mov	r4, sl
 800d234:	2205      	movs	r2, #5
 800d236:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d23a:	4854      	ldr	r0, [pc, #336]	; (800d38c <_vfiprintf_r+0x220>)
 800d23c:	f7f3 f800 	bl	8000240 <memchr>
 800d240:	9a04      	ldr	r2, [sp, #16]
 800d242:	b9d8      	cbnz	r0, 800d27c <_vfiprintf_r+0x110>
 800d244:	06d1      	lsls	r1, r2, #27
 800d246:	bf44      	itt	mi
 800d248:	2320      	movmi	r3, #32
 800d24a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d24e:	0713      	lsls	r3, r2, #28
 800d250:	bf44      	itt	mi
 800d252:	232b      	movmi	r3, #43	; 0x2b
 800d254:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d258:	f89a 3000 	ldrb.w	r3, [sl]
 800d25c:	2b2a      	cmp	r3, #42	; 0x2a
 800d25e:	d015      	beq.n	800d28c <_vfiprintf_r+0x120>
 800d260:	9a07      	ldr	r2, [sp, #28]
 800d262:	4654      	mov	r4, sl
 800d264:	2000      	movs	r0, #0
 800d266:	f04f 0c0a 	mov.w	ip, #10
 800d26a:	4621      	mov	r1, r4
 800d26c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d270:	3b30      	subs	r3, #48	; 0x30
 800d272:	2b09      	cmp	r3, #9
 800d274:	d94d      	bls.n	800d312 <_vfiprintf_r+0x1a6>
 800d276:	b1b0      	cbz	r0, 800d2a6 <_vfiprintf_r+0x13a>
 800d278:	9207      	str	r2, [sp, #28]
 800d27a:	e014      	b.n	800d2a6 <_vfiprintf_r+0x13a>
 800d27c:	eba0 0308 	sub.w	r3, r0, r8
 800d280:	fa09 f303 	lsl.w	r3, r9, r3
 800d284:	4313      	orrs	r3, r2
 800d286:	9304      	str	r3, [sp, #16]
 800d288:	46a2      	mov	sl, r4
 800d28a:	e7d2      	b.n	800d232 <_vfiprintf_r+0xc6>
 800d28c:	9b03      	ldr	r3, [sp, #12]
 800d28e:	1d19      	adds	r1, r3, #4
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	9103      	str	r1, [sp, #12]
 800d294:	2b00      	cmp	r3, #0
 800d296:	bfbb      	ittet	lt
 800d298:	425b      	neglt	r3, r3
 800d29a:	f042 0202 	orrlt.w	r2, r2, #2
 800d29e:	9307      	strge	r3, [sp, #28]
 800d2a0:	9307      	strlt	r3, [sp, #28]
 800d2a2:	bfb8      	it	lt
 800d2a4:	9204      	strlt	r2, [sp, #16]
 800d2a6:	7823      	ldrb	r3, [r4, #0]
 800d2a8:	2b2e      	cmp	r3, #46	; 0x2e
 800d2aa:	d10c      	bne.n	800d2c6 <_vfiprintf_r+0x15a>
 800d2ac:	7863      	ldrb	r3, [r4, #1]
 800d2ae:	2b2a      	cmp	r3, #42	; 0x2a
 800d2b0:	d134      	bne.n	800d31c <_vfiprintf_r+0x1b0>
 800d2b2:	9b03      	ldr	r3, [sp, #12]
 800d2b4:	1d1a      	adds	r2, r3, #4
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	9203      	str	r2, [sp, #12]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	bfb8      	it	lt
 800d2be:	f04f 33ff 	movlt.w	r3, #4294967295
 800d2c2:	3402      	adds	r4, #2
 800d2c4:	9305      	str	r3, [sp, #20]
 800d2c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d39c <_vfiprintf_r+0x230>
 800d2ca:	7821      	ldrb	r1, [r4, #0]
 800d2cc:	2203      	movs	r2, #3
 800d2ce:	4650      	mov	r0, sl
 800d2d0:	f7f2 ffb6 	bl	8000240 <memchr>
 800d2d4:	b138      	cbz	r0, 800d2e6 <_vfiprintf_r+0x17a>
 800d2d6:	9b04      	ldr	r3, [sp, #16]
 800d2d8:	eba0 000a 	sub.w	r0, r0, sl
 800d2dc:	2240      	movs	r2, #64	; 0x40
 800d2de:	4082      	lsls	r2, r0
 800d2e0:	4313      	orrs	r3, r2
 800d2e2:	3401      	adds	r4, #1
 800d2e4:	9304      	str	r3, [sp, #16]
 800d2e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2ea:	4829      	ldr	r0, [pc, #164]	; (800d390 <_vfiprintf_r+0x224>)
 800d2ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d2f0:	2206      	movs	r2, #6
 800d2f2:	f7f2 ffa5 	bl	8000240 <memchr>
 800d2f6:	2800      	cmp	r0, #0
 800d2f8:	d03f      	beq.n	800d37a <_vfiprintf_r+0x20e>
 800d2fa:	4b26      	ldr	r3, [pc, #152]	; (800d394 <_vfiprintf_r+0x228>)
 800d2fc:	bb1b      	cbnz	r3, 800d346 <_vfiprintf_r+0x1da>
 800d2fe:	9b03      	ldr	r3, [sp, #12]
 800d300:	3307      	adds	r3, #7
 800d302:	f023 0307 	bic.w	r3, r3, #7
 800d306:	3308      	adds	r3, #8
 800d308:	9303      	str	r3, [sp, #12]
 800d30a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d30c:	443b      	add	r3, r7
 800d30e:	9309      	str	r3, [sp, #36]	; 0x24
 800d310:	e768      	b.n	800d1e4 <_vfiprintf_r+0x78>
 800d312:	fb0c 3202 	mla	r2, ip, r2, r3
 800d316:	460c      	mov	r4, r1
 800d318:	2001      	movs	r0, #1
 800d31a:	e7a6      	b.n	800d26a <_vfiprintf_r+0xfe>
 800d31c:	2300      	movs	r3, #0
 800d31e:	3401      	adds	r4, #1
 800d320:	9305      	str	r3, [sp, #20]
 800d322:	4619      	mov	r1, r3
 800d324:	f04f 0c0a 	mov.w	ip, #10
 800d328:	4620      	mov	r0, r4
 800d32a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d32e:	3a30      	subs	r2, #48	; 0x30
 800d330:	2a09      	cmp	r2, #9
 800d332:	d903      	bls.n	800d33c <_vfiprintf_r+0x1d0>
 800d334:	2b00      	cmp	r3, #0
 800d336:	d0c6      	beq.n	800d2c6 <_vfiprintf_r+0x15a>
 800d338:	9105      	str	r1, [sp, #20]
 800d33a:	e7c4      	b.n	800d2c6 <_vfiprintf_r+0x15a>
 800d33c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d340:	4604      	mov	r4, r0
 800d342:	2301      	movs	r3, #1
 800d344:	e7f0      	b.n	800d328 <_vfiprintf_r+0x1bc>
 800d346:	ab03      	add	r3, sp, #12
 800d348:	9300      	str	r3, [sp, #0]
 800d34a:	462a      	mov	r2, r5
 800d34c:	4b12      	ldr	r3, [pc, #72]	; (800d398 <_vfiprintf_r+0x22c>)
 800d34e:	a904      	add	r1, sp, #16
 800d350:	4630      	mov	r0, r6
 800d352:	f7fd fb29 	bl	800a9a8 <_printf_float>
 800d356:	4607      	mov	r7, r0
 800d358:	1c78      	adds	r0, r7, #1
 800d35a:	d1d6      	bne.n	800d30a <_vfiprintf_r+0x19e>
 800d35c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d35e:	07d9      	lsls	r1, r3, #31
 800d360:	d405      	bmi.n	800d36e <_vfiprintf_r+0x202>
 800d362:	89ab      	ldrh	r3, [r5, #12]
 800d364:	059a      	lsls	r2, r3, #22
 800d366:	d402      	bmi.n	800d36e <_vfiprintf_r+0x202>
 800d368:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d36a:	f7fe f904 	bl	800b576 <__retarget_lock_release_recursive>
 800d36e:	89ab      	ldrh	r3, [r5, #12]
 800d370:	065b      	lsls	r3, r3, #25
 800d372:	f53f af1d 	bmi.w	800d1b0 <_vfiprintf_r+0x44>
 800d376:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d378:	e71c      	b.n	800d1b4 <_vfiprintf_r+0x48>
 800d37a:	ab03      	add	r3, sp, #12
 800d37c:	9300      	str	r3, [sp, #0]
 800d37e:	462a      	mov	r2, r5
 800d380:	4b05      	ldr	r3, [pc, #20]	; (800d398 <_vfiprintf_r+0x22c>)
 800d382:	a904      	add	r1, sp, #16
 800d384:	4630      	mov	r0, r6
 800d386:	f7fd fdb3 	bl	800aef0 <_printf_i>
 800d38a:	e7e4      	b.n	800d356 <_vfiprintf_r+0x1ea>
 800d38c:	0800db1c 	.word	0x0800db1c
 800d390:	0800db26 	.word	0x0800db26
 800d394:	0800a9a9 	.word	0x0800a9a9
 800d398:	0800d149 	.word	0x0800d149
 800d39c:	0800db22 	.word	0x0800db22

0800d3a0 <__swbuf_r>:
 800d3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3a2:	460e      	mov	r6, r1
 800d3a4:	4614      	mov	r4, r2
 800d3a6:	4605      	mov	r5, r0
 800d3a8:	b118      	cbz	r0, 800d3b2 <__swbuf_r+0x12>
 800d3aa:	6a03      	ldr	r3, [r0, #32]
 800d3ac:	b90b      	cbnz	r3, 800d3b2 <__swbuf_r+0x12>
 800d3ae:	f7fd ff3b 	bl	800b228 <__sinit>
 800d3b2:	69a3      	ldr	r3, [r4, #24]
 800d3b4:	60a3      	str	r3, [r4, #8]
 800d3b6:	89a3      	ldrh	r3, [r4, #12]
 800d3b8:	071a      	lsls	r2, r3, #28
 800d3ba:	d525      	bpl.n	800d408 <__swbuf_r+0x68>
 800d3bc:	6923      	ldr	r3, [r4, #16]
 800d3be:	b31b      	cbz	r3, 800d408 <__swbuf_r+0x68>
 800d3c0:	6823      	ldr	r3, [r4, #0]
 800d3c2:	6922      	ldr	r2, [r4, #16]
 800d3c4:	1a98      	subs	r0, r3, r2
 800d3c6:	6963      	ldr	r3, [r4, #20]
 800d3c8:	b2f6      	uxtb	r6, r6
 800d3ca:	4283      	cmp	r3, r0
 800d3cc:	4637      	mov	r7, r6
 800d3ce:	dc04      	bgt.n	800d3da <__swbuf_r+0x3a>
 800d3d0:	4621      	mov	r1, r4
 800d3d2:	4628      	mov	r0, r5
 800d3d4:	f7ff fdc4 	bl	800cf60 <_fflush_r>
 800d3d8:	b9e0      	cbnz	r0, 800d414 <__swbuf_r+0x74>
 800d3da:	68a3      	ldr	r3, [r4, #8]
 800d3dc:	3b01      	subs	r3, #1
 800d3de:	60a3      	str	r3, [r4, #8]
 800d3e0:	6823      	ldr	r3, [r4, #0]
 800d3e2:	1c5a      	adds	r2, r3, #1
 800d3e4:	6022      	str	r2, [r4, #0]
 800d3e6:	701e      	strb	r6, [r3, #0]
 800d3e8:	6962      	ldr	r2, [r4, #20]
 800d3ea:	1c43      	adds	r3, r0, #1
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d004      	beq.n	800d3fa <__swbuf_r+0x5a>
 800d3f0:	89a3      	ldrh	r3, [r4, #12]
 800d3f2:	07db      	lsls	r3, r3, #31
 800d3f4:	d506      	bpl.n	800d404 <__swbuf_r+0x64>
 800d3f6:	2e0a      	cmp	r6, #10
 800d3f8:	d104      	bne.n	800d404 <__swbuf_r+0x64>
 800d3fa:	4621      	mov	r1, r4
 800d3fc:	4628      	mov	r0, r5
 800d3fe:	f7ff fdaf 	bl	800cf60 <_fflush_r>
 800d402:	b938      	cbnz	r0, 800d414 <__swbuf_r+0x74>
 800d404:	4638      	mov	r0, r7
 800d406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d408:	4621      	mov	r1, r4
 800d40a:	4628      	mov	r0, r5
 800d40c:	f000 f806 	bl	800d41c <__swsetup_r>
 800d410:	2800      	cmp	r0, #0
 800d412:	d0d5      	beq.n	800d3c0 <__swbuf_r+0x20>
 800d414:	f04f 37ff 	mov.w	r7, #4294967295
 800d418:	e7f4      	b.n	800d404 <__swbuf_r+0x64>
	...

0800d41c <__swsetup_r>:
 800d41c:	b538      	push	{r3, r4, r5, lr}
 800d41e:	4b2a      	ldr	r3, [pc, #168]	; (800d4c8 <__swsetup_r+0xac>)
 800d420:	4605      	mov	r5, r0
 800d422:	6818      	ldr	r0, [r3, #0]
 800d424:	460c      	mov	r4, r1
 800d426:	b118      	cbz	r0, 800d430 <__swsetup_r+0x14>
 800d428:	6a03      	ldr	r3, [r0, #32]
 800d42a:	b90b      	cbnz	r3, 800d430 <__swsetup_r+0x14>
 800d42c:	f7fd fefc 	bl	800b228 <__sinit>
 800d430:	89a3      	ldrh	r3, [r4, #12]
 800d432:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d436:	0718      	lsls	r0, r3, #28
 800d438:	d422      	bmi.n	800d480 <__swsetup_r+0x64>
 800d43a:	06d9      	lsls	r1, r3, #27
 800d43c:	d407      	bmi.n	800d44e <__swsetup_r+0x32>
 800d43e:	2309      	movs	r3, #9
 800d440:	602b      	str	r3, [r5, #0]
 800d442:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d446:	81a3      	strh	r3, [r4, #12]
 800d448:	f04f 30ff 	mov.w	r0, #4294967295
 800d44c:	e034      	b.n	800d4b8 <__swsetup_r+0x9c>
 800d44e:	0758      	lsls	r0, r3, #29
 800d450:	d512      	bpl.n	800d478 <__swsetup_r+0x5c>
 800d452:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d454:	b141      	cbz	r1, 800d468 <__swsetup_r+0x4c>
 800d456:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d45a:	4299      	cmp	r1, r3
 800d45c:	d002      	beq.n	800d464 <__swsetup_r+0x48>
 800d45e:	4628      	mov	r0, r5
 800d460:	f7fe ff24 	bl	800c2ac <_free_r>
 800d464:	2300      	movs	r3, #0
 800d466:	6363      	str	r3, [r4, #52]	; 0x34
 800d468:	89a3      	ldrh	r3, [r4, #12]
 800d46a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d46e:	81a3      	strh	r3, [r4, #12]
 800d470:	2300      	movs	r3, #0
 800d472:	6063      	str	r3, [r4, #4]
 800d474:	6923      	ldr	r3, [r4, #16]
 800d476:	6023      	str	r3, [r4, #0]
 800d478:	89a3      	ldrh	r3, [r4, #12]
 800d47a:	f043 0308 	orr.w	r3, r3, #8
 800d47e:	81a3      	strh	r3, [r4, #12]
 800d480:	6923      	ldr	r3, [r4, #16]
 800d482:	b94b      	cbnz	r3, 800d498 <__swsetup_r+0x7c>
 800d484:	89a3      	ldrh	r3, [r4, #12]
 800d486:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d48a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d48e:	d003      	beq.n	800d498 <__swsetup_r+0x7c>
 800d490:	4621      	mov	r1, r4
 800d492:	4628      	mov	r0, r5
 800d494:	f000 f88c 	bl	800d5b0 <__smakebuf_r>
 800d498:	89a0      	ldrh	r0, [r4, #12]
 800d49a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d49e:	f010 0301 	ands.w	r3, r0, #1
 800d4a2:	d00a      	beq.n	800d4ba <__swsetup_r+0x9e>
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	60a3      	str	r3, [r4, #8]
 800d4a8:	6963      	ldr	r3, [r4, #20]
 800d4aa:	425b      	negs	r3, r3
 800d4ac:	61a3      	str	r3, [r4, #24]
 800d4ae:	6923      	ldr	r3, [r4, #16]
 800d4b0:	b943      	cbnz	r3, 800d4c4 <__swsetup_r+0xa8>
 800d4b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d4b6:	d1c4      	bne.n	800d442 <__swsetup_r+0x26>
 800d4b8:	bd38      	pop	{r3, r4, r5, pc}
 800d4ba:	0781      	lsls	r1, r0, #30
 800d4bc:	bf58      	it	pl
 800d4be:	6963      	ldrpl	r3, [r4, #20]
 800d4c0:	60a3      	str	r3, [r4, #8]
 800d4c2:	e7f4      	b.n	800d4ae <__swsetup_r+0x92>
 800d4c4:	2000      	movs	r0, #0
 800d4c6:	e7f7      	b.n	800d4b8 <__swsetup_r+0x9c>
 800d4c8:	20000120 	.word	0x20000120

0800d4cc <_raise_r>:
 800d4cc:	291f      	cmp	r1, #31
 800d4ce:	b538      	push	{r3, r4, r5, lr}
 800d4d0:	4604      	mov	r4, r0
 800d4d2:	460d      	mov	r5, r1
 800d4d4:	d904      	bls.n	800d4e0 <_raise_r+0x14>
 800d4d6:	2316      	movs	r3, #22
 800d4d8:	6003      	str	r3, [r0, #0]
 800d4da:	f04f 30ff 	mov.w	r0, #4294967295
 800d4de:	bd38      	pop	{r3, r4, r5, pc}
 800d4e0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d4e2:	b112      	cbz	r2, 800d4ea <_raise_r+0x1e>
 800d4e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d4e8:	b94b      	cbnz	r3, 800d4fe <_raise_r+0x32>
 800d4ea:	4620      	mov	r0, r4
 800d4ec:	f000 f830 	bl	800d550 <_getpid_r>
 800d4f0:	462a      	mov	r2, r5
 800d4f2:	4601      	mov	r1, r0
 800d4f4:	4620      	mov	r0, r4
 800d4f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4fa:	f000 b817 	b.w	800d52c <_kill_r>
 800d4fe:	2b01      	cmp	r3, #1
 800d500:	d00a      	beq.n	800d518 <_raise_r+0x4c>
 800d502:	1c59      	adds	r1, r3, #1
 800d504:	d103      	bne.n	800d50e <_raise_r+0x42>
 800d506:	2316      	movs	r3, #22
 800d508:	6003      	str	r3, [r0, #0]
 800d50a:	2001      	movs	r0, #1
 800d50c:	e7e7      	b.n	800d4de <_raise_r+0x12>
 800d50e:	2400      	movs	r4, #0
 800d510:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d514:	4628      	mov	r0, r5
 800d516:	4798      	blx	r3
 800d518:	2000      	movs	r0, #0
 800d51a:	e7e0      	b.n	800d4de <_raise_r+0x12>

0800d51c <raise>:
 800d51c:	4b02      	ldr	r3, [pc, #8]	; (800d528 <raise+0xc>)
 800d51e:	4601      	mov	r1, r0
 800d520:	6818      	ldr	r0, [r3, #0]
 800d522:	f7ff bfd3 	b.w	800d4cc <_raise_r>
 800d526:	bf00      	nop
 800d528:	20000120 	.word	0x20000120

0800d52c <_kill_r>:
 800d52c:	b538      	push	{r3, r4, r5, lr}
 800d52e:	4d07      	ldr	r5, [pc, #28]	; (800d54c <_kill_r+0x20>)
 800d530:	2300      	movs	r3, #0
 800d532:	4604      	mov	r4, r0
 800d534:	4608      	mov	r0, r1
 800d536:	4611      	mov	r1, r2
 800d538:	602b      	str	r3, [r5, #0]
 800d53a:	f7f4 fa0f 	bl	800195c <_kill>
 800d53e:	1c43      	adds	r3, r0, #1
 800d540:	d102      	bne.n	800d548 <_kill_r+0x1c>
 800d542:	682b      	ldr	r3, [r5, #0]
 800d544:	b103      	cbz	r3, 800d548 <_kill_r+0x1c>
 800d546:	6023      	str	r3, [r4, #0]
 800d548:	bd38      	pop	{r3, r4, r5, pc}
 800d54a:	bf00      	nop
 800d54c:	20000950 	.word	0x20000950

0800d550 <_getpid_r>:
 800d550:	f7f4 b9fc 	b.w	800194c <_getpid>

0800d554 <_malloc_usable_size_r>:
 800d554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d558:	1f18      	subs	r0, r3, #4
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	bfbc      	itt	lt
 800d55e:	580b      	ldrlt	r3, [r1, r0]
 800d560:	18c0      	addlt	r0, r0, r3
 800d562:	4770      	bx	lr

0800d564 <__swhatbuf_r>:
 800d564:	b570      	push	{r4, r5, r6, lr}
 800d566:	460c      	mov	r4, r1
 800d568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d56c:	2900      	cmp	r1, #0
 800d56e:	b096      	sub	sp, #88	; 0x58
 800d570:	4615      	mov	r5, r2
 800d572:	461e      	mov	r6, r3
 800d574:	da0d      	bge.n	800d592 <__swhatbuf_r+0x2e>
 800d576:	89a3      	ldrh	r3, [r4, #12]
 800d578:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d57c:	f04f 0100 	mov.w	r1, #0
 800d580:	bf0c      	ite	eq
 800d582:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d586:	2340      	movne	r3, #64	; 0x40
 800d588:	2000      	movs	r0, #0
 800d58a:	6031      	str	r1, [r6, #0]
 800d58c:	602b      	str	r3, [r5, #0]
 800d58e:	b016      	add	sp, #88	; 0x58
 800d590:	bd70      	pop	{r4, r5, r6, pc}
 800d592:	466a      	mov	r2, sp
 800d594:	f000 f848 	bl	800d628 <_fstat_r>
 800d598:	2800      	cmp	r0, #0
 800d59a:	dbec      	blt.n	800d576 <__swhatbuf_r+0x12>
 800d59c:	9901      	ldr	r1, [sp, #4]
 800d59e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d5a2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d5a6:	4259      	negs	r1, r3
 800d5a8:	4159      	adcs	r1, r3
 800d5aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5ae:	e7eb      	b.n	800d588 <__swhatbuf_r+0x24>

0800d5b0 <__smakebuf_r>:
 800d5b0:	898b      	ldrh	r3, [r1, #12]
 800d5b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d5b4:	079d      	lsls	r5, r3, #30
 800d5b6:	4606      	mov	r6, r0
 800d5b8:	460c      	mov	r4, r1
 800d5ba:	d507      	bpl.n	800d5cc <__smakebuf_r+0x1c>
 800d5bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d5c0:	6023      	str	r3, [r4, #0]
 800d5c2:	6123      	str	r3, [r4, #16]
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	6163      	str	r3, [r4, #20]
 800d5c8:	b002      	add	sp, #8
 800d5ca:	bd70      	pop	{r4, r5, r6, pc}
 800d5cc:	ab01      	add	r3, sp, #4
 800d5ce:	466a      	mov	r2, sp
 800d5d0:	f7ff ffc8 	bl	800d564 <__swhatbuf_r>
 800d5d4:	9900      	ldr	r1, [sp, #0]
 800d5d6:	4605      	mov	r5, r0
 800d5d8:	4630      	mov	r0, r6
 800d5da:	f7fe fedb 	bl	800c394 <_malloc_r>
 800d5de:	b948      	cbnz	r0, 800d5f4 <__smakebuf_r+0x44>
 800d5e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5e4:	059a      	lsls	r2, r3, #22
 800d5e6:	d4ef      	bmi.n	800d5c8 <__smakebuf_r+0x18>
 800d5e8:	f023 0303 	bic.w	r3, r3, #3
 800d5ec:	f043 0302 	orr.w	r3, r3, #2
 800d5f0:	81a3      	strh	r3, [r4, #12]
 800d5f2:	e7e3      	b.n	800d5bc <__smakebuf_r+0xc>
 800d5f4:	89a3      	ldrh	r3, [r4, #12]
 800d5f6:	6020      	str	r0, [r4, #0]
 800d5f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5fc:	81a3      	strh	r3, [r4, #12]
 800d5fe:	9b00      	ldr	r3, [sp, #0]
 800d600:	6163      	str	r3, [r4, #20]
 800d602:	9b01      	ldr	r3, [sp, #4]
 800d604:	6120      	str	r0, [r4, #16]
 800d606:	b15b      	cbz	r3, 800d620 <__smakebuf_r+0x70>
 800d608:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d60c:	4630      	mov	r0, r6
 800d60e:	f000 f81d 	bl	800d64c <_isatty_r>
 800d612:	b128      	cbz	r0, 800d620 <__smakebuf_r+0x70>
 800d614:	89a3      	ldrh	r3, [r4, #12]
 800d616:	f023 0303 	bic.w	r3, r3, #3
 800d61a:	f043 0301 	orr.w	r3, r3, #1
 800d61e:	81a3      	strh	r3, [r4, #12]
 800d620:	89a3      	ldrh	r3, [r4, #12]
 800d622:	431d      	orrs	r5, r3
 800d624:	81a5      	strh	r5, [r4, #12]
 800d626:	e7cf      	b.n	800d5c8 <__smakebuf_r+0x18>

0800d628 <_fstat_r>:
 800d628:	b538      	push	{r3, r4, r5, lr}
 800d62a:	4d07      	ldr	r5, [pc, #28]	; (800d648 <_fstat_r+0x20>)
 800d62c:	2300      	movs	r3, #0
 800d62e:	4604      	mov	r4, r0
 800d630:	4608      	mov	r0, r1
 800d632:	4611      	mov	r1, r2
 800d634:	602b      	str	r3, [r5, #0]
 800d636:	f7f4 f9f0 	bl	8001a1a <_fstat>
 800d63a:	1c43      	adds	r3, r0, #1
 800d63c:	d102      	bne.n	800d644 <_fstat_r+0x1c>
 800d63e:	682b      	ldr	r3, [r5, #0]
 800d640:	b103      	cbz	r3, 800d644 <_fstat_r+0x1c>
 800d642:	6023      	str	r3, [r4, #0]
 800d644:	bd38      	pop	{r3, r4, r5, pc}
 800d646:	bf00      	nop
 800d648:	20000950 	.word	0x20000950

0800d64c <_isatty_r>:
 800d64c:	b538      	push	{r3, r4, r5, lr}
 800d64e:	4d06      	ldr	r5, [pc, #24]	; (800d668 <_isatty_r+0x1c>)
 800d650:	2300      	movs	r3, #0
 800d652:	4604      	mov	r4, r0
 800d654:	4608      	mov	r0, r1
 800d656:	602b      	str	r3, [r5, #0]
 800d658:	f7f4 f9ef 	bl	8001a3a <_isatty>
 800d65c:	1c43      	adds	r3, r0, #1
 800d65e:	d102      	bne.n	800d666 <_isatty_r+0x1a>
 800d660:	682b      	ldr	r3, [r5, #0]
 800d662:	b103      	cbz	r3, 800d666 <_isatty_r+0x1a>
 800d664:	6023      	str	r3, [r4, #0]
 800d666:	bd38      	pop	{r3, r4, r5, pc}
 800d668:	20000950 	.word	0x20000950

0800d66c <_init>:
 800d66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d66e:	bf00      	nop
 800d670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d672:	bc08      	pop	{r3}
 800d674:	469e      	mov	lr, r3
 800d676:	4770      	bx	lr

0800d678 <_fini>:
 800d678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d67a:	bf00      	nop
 800d67c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d67e:	bc08      	pop	{r3}
 800d680:	469e      	mov	lr, r3
 800d682:	4770      	bx	lr
