
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4ac  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  0800d690  0800d690  0001d690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db40  0800db40  00020290  2**0
                  CONTENTS
  4 .ARM          00000008  0800db40  0800db40  0001db40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db48  0800db48  00020290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db48  0800db48  0001db48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db4c  0800db4c  0001db4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  0800db50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d0  20000290  0800dde0  00020290  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000960  0800dde0  00020960  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c304  00000000  00000000  00020303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003857  00000000  00000000  0003c607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001668  00000000  00000000  0003fe60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000114f  00000000  00000000  000414c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a464  00000000  00000000  00042617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bc2d  00000000  00000000  0006ca7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00114722  00000000  00000000  000886a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000071b4  00000000  00000000  0019cdcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001a3f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000290 	.word	0x20000290
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d674 	.word	0x0800d674

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000294 	.word	0x20000294
 800021c:	0800d674 	.word	0x0800d674

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b970 	b.w	8000fb0 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	460d      	mov	r5, r1
 8000cf0:	4604      	mov	r4, r0
 8000cf2:	460f      	mov	r7, r1
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d14a      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf8:	428a      	cmp	r2, r1
 8000cfa:	4694      	mov	ip, r2
 8000cfc:	d965      	bls.n	8000dca <__udivmoddi4+0xe2>
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	b143      	cbz	r3, 8000d16 <__udivmoddi4+0x2e>
 8000d04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d08:	f1c3 0220 	rsb	r2, r3, #32
 8000d0c:	409f      	lsls	r7, r3
 8000d0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d12:	4317      	orrs	r7, r2
 8000d14:	409c      	lsls	r4, r3
 8000d16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d1a:	fa1f f58c 	uxth.w	r5, ip
 8000d1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d22:	0c22      	lsrs	r2, r4, #16
 8000d24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d2c:	fb01 f005 	mul.w	r0, r1, r5
 8000d30:	4290      	cmp	r0, r2
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x62>
 8000d34:	eb1c 0202 	adds.w	r2, ip, r2
 8000d38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d3c:	f080 811c 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d40:	4290      	cmp	r0, r2
 8000d42:	f240 8119 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d46:	3902      	subs	r1, #2
 8000d48:	4462      	add	r2, ip
 8000d4a:	1a12      	subs	r2, r2, r0
 8000d4c:	b2a4      	uxth	r4, r4
 8000d4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5a:	fb00 f505 	mul.w	r5, r0, r5
 8000d5e:	42a5      	cmp	r5, r4
 8000d60:	d90a      	bls.n	8000d78 <__udivmoddi4+0x90>
 8000d62:	eb1c 0404 	adds.w	r4, ip, r4
 8000d66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6a:	f080 8107 	bcs.w	8000f7c <__udivmoddi4+0x294>
 8000d6e:	42a5      	cmp	r5, r4
 8000d70:	f240 8104 	bls.w	8000f7c <__udivmoddi4+0x294>
 8000d74:	4464      	add	r4, ip
 8000d76:	3802      	subs	r0, #2
 8000d78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d7c:	1b64      	subs	r4, r4, r5
 8000d7e:	2100      	movs	r1, #0
 8000d80:	b11e      	cbz	r6, 8000d8a <__udivmoddi4+0xa2>
 8000d82:	40dc      	lsrs	r4, r3
 8000d84:	2300      	movs	r3, #0
 8000d86:	e9c6 4300 	strd	r4, r3, [r6]
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0xbc>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80ed 	beq.w	8000f72 <__udivmoddi4+0x28a>
 8000d98:	2100      	movs	r1, #0
 8000d9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da4:	fab3 f183 	clz	r1, r3
 8000da8:	2900      	cmp	r1, #0
 8000daa:	d149      	bne.n	8000e40 <__udivmoddi4+0x158>
 8000dac:	42ab      	cmp	r3, r5
 8000dae:	d302      	bcc.n	8000db6 <__udivmoddi4+0xce>
 8000db0:	4282      	cmp	r2, r0
 8000db2:	f200 80f8 	bhi.w	8000fa6 <__udivmoddi4+0x2be>
 8000db6:	1a84      	subs	r4, r0, r2
 8000db8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	4617      	mov	r7, r2
 8000dc0:	2e00      	cmp	r6, #0
 8000dc2:	d0e2      	beq.n	8000d8a <__udivmoddi4+0xa2>
 8000dc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000dc8:	e7df      	b.n	8000d8a <__udivmoddi4+0xa2>
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xe6>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f382 	clz	r3, r2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f040 8090 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dd8:	1a8a      	subs	r2, r1, r2
 8000dda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dde:	fa1f fe8c 	uxth.w	lr, ip
 8000de2:	2101      	movs	r1, #1
 8000de4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000de8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dec:	0c22      	lsrs	r2, r4, #16
 8000dee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000df2:	fb0e f005 	mul.w	r0, lr, r5
 8000df6:	4290      	cmp	r0, r2
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4290      	cmp	r0, r2
 8000e06:	f200 80cb 	bhi.w	8000fa0 <__udivmoddi4+0x2b8>
 8000e0a:	4645      	mov	r5, r8
 8000e0c:	1a12      	subs	r2, r2, r0
 8000e0e:	b2a4      	uxth	r4, r4
 8000e10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e14:	fb07 2210 	mls	r2, r7, r0, r2
 8000e18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e20:	45a6      	cmp	lr, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x14e>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e2c:	d202      	bcs.n	8000e34 <__udivmoddi4+0x14c>
 8000e2e:	45a6      	cmp	lr, r4
 8000e30:	f200 80bb 	bhi.w	8000faa <__udivmoddi4+0x2c2>
 8000e34:	4610      	mov	r0, r2
 8000e36:	eba4 040e 	sub.w	r4, r4, lr
 8000e3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e3e:	e79f      	b.n	8000d80 <__udivmoddi4+0x98>
 8000e40:	f1c1 0720 	rsb	r7, r1, #32
 8000e44:	408b      	lsls	r3, r1
 8000e46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e52:	fa20 f307 	lsr.w	r3, r0, r7
 8000e56:	40fd      	lsrs	r5, r7
 8000e58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e5c:	4323      	orrs	r3, r4
 8000e5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	fb09 5518 	mls	r5, r9, r8, r5
 8000e6a:	0c1c      	lsrs	r4, r3, #16
 8000e6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e70:	fb08 f50e 	mul.w	r5, r8, lr
 8000e74:	42a5      	cmp	r5, r4
 8000e76:	fa02 f201 	lsl.w	r2, r2, r1
 8000e7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e88:	f080 8088 	bcs.w	8000f9c <__udivmoddi4+0x2b4>
 8000e8c:	42a5      	cmp	r5, r4
 8000e8e:	f240 8085 	bls.w	8000f9c <__udivmoddi4+0x2b4>
 8000e92:	f1a8 0802 	sub.w	r8, r8, #2
 8000e96:	4464      	add	r4, ip
 8000e98:	1b64      	subs	r4, r4, r5
 8000e9a:	b29d      	uxth	r5, r3
 8000e9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ea0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ea4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ea8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000eb8:	d26c      	bcs.n	8000f94 <__udivmoddi4+0x2ac>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	d96a      	bls.n	8000f94 <__udivmoddi4+0x2ac>
 8000ebe:	3b02      	subs	r3, #2
 8000ec0:	4464      	add	r4, ip
 8000ec2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ec6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	42ac      	cmp	r4, r5
 8000ed0:	46c8      	mov	r8, r9
 8000ed2:	46ae      	mov	lr, r5
 8000ed4:	d356      	bcc.n	8000f84 <__udivmoddi4+0x29c>
 8000ed6:	d053      	beq.n	8000f80 <__udivmoddi4+0x298>
 8000ed8:	b156      	cbz	r6, 8000ef0 <__udivmoddi4+0x208>
 8000eda:	ebb0 0208 	subs.w	r2, r0, r8
 8000ede:	eb64 040e 	sbc.w	r4, r4, lr
 8000ee2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ee6:	40ca      	lsrs	r2, r1
 8000ee8:	40cc      	lsrs	r4, r1
 8000eea:	4317      	orrs	r7, r2
 8000eec:	e9c6 7400 	strd	r7, r4, [r6]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef8:	f1c3 0120 	rsb	r1, r3, #32
 8000efc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f00:	fa20 f201 	lsr.w	r2, r0, r1
 8000f04:	fa25 f101 	lsr.w	r1, r5, r1
 8000f08:	409d      	lsls	r5, r3
 8000f0a:	432a      	orrs	r2, r5
 8000f0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f10:	fa1f fe8c 	uxth.w	lr, ip
 8000f14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f18:	fb07 1510 	mls	r5, r7, r0, r1
 8000f1c:	0c11      	lsrs	r1, r2, #16
 8000f1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f22:	fb00 f50e 	mul.w	r5, r0, lr
 8000f26:	428d      	cmp	r5, r1
 8000f28:	fa04 f403 	lsl.w	r4, r4, r3
 8000f2c:	d908      	bls.n	8000f40 <__udivmoddi4+0x258>
 8000f2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f36:	d22f      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f38:	428d      	cmp	r5, r1
 8000f3a:	d92d      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	4461      	add	r1, ip
 8000f40:	1b49      	subs	r1, r1, r5
 8000f42:	b292      	uxth	r2, r2
 8000f44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f48:	fb07 1115 	mls	r1, r7, r5, r1
 8000f4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f50:	fb05 f10e 	mul.w	r1, r5, lr
 8000f54:	4291      	cmp	r1, r2
 8000f56:	d908      	bls.n	8000f6a <__udivmoddi4+0x282>
 8000f58:	eb1c 0202 	adds.w	r2, ip, r2
 8000f5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f60:	d216      	bcs.n	8000f90 <__udivmoddi4+0x2a8>
 8000f62:	4291      	cmp	r1, r2
 8000f64:	d914      	bls.n	8000f90 <__udivmoddi4+0x2a8>
 8000f66:	3d02      	subs	r5, #2
 8000f68:	4462      	add	r2, ip
 8000f6a:	1a52      	subs	r2, r2, r1
 8000f6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f70:	e738      	b.n	8000de4 <__udivmoddi4+0xfc>
 8000f72:	4631      	mov	r1, r6
 8000f74:	4630      	mov	r0, r6
 8000f76:	e708      	b.n	8000d8a <__udivmoddi4+0xa2>
 8000f78:	4639      	mov	r1, r7
 8000f7a:	e6e6      	b.n	8000d4a <__udivmoddi4+0x62>
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	e6fb      	b.n	8000d78 <__udivmoddi4+0x90>
 8000f80:	4548      	cmp	r0, r9
 8000f82:	d2a9      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f84:	ebb9 0802 	subs.w	r8, r9, r2
 8000f88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	e7a3      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f90:	4645      	mov	r5, r8
 8000f92:	e7ea      	b.n	8000f6a <__udivmoddi4+0x282>
 8000f94:	462b      	mov	r3, r5
 8000f96:	e794      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f98:	4640      	mov	r0, r8
 8000f9a:	e7d1      	b.n	8000f40 <__udivmoddi4+0x258>
 8000f9c:	46d0      	mov	r8, sl
 8000f9e:	e77b      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000fa0:	3d02      	subs	r5, #2
 8000fa2:	4462      	add	r2, ip
 8000fa4:	e732      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e70a      	b.n	8000dc0 <__udivmoddi4+0xd8>
 8000faa:	4464      	add	r4, ip
 8000fac:	3802      	subs	r0, #2
 8000fae:	e742      	b.n	8000e36 <__udivmoddi4+0x14e>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08c      	sub	sp, #48	; 0x30
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	2220      	movs	r2, #32
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f00a f9fc 	bl	800b3ca <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fd2:	4b33      	ldr	r3, [pc, #204]	; (80010a0 <MX_ADC1_Init+0xec>)
 8000fd4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fd8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fda:	4b31      	ldr	r3, [pc, #196]	; (80010a0 <MX_ADC1_Init+0xec>)
 8000fdc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fe0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fe2:	4b2f      	ldr	r3, [pc, #188]	; (80010a0 <MX_ADC1_Init+0xec>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fe8:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <MX_ADC1_Init+0xec>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000fee:	4b2c      	ldr	r3, [pc, #176]	; (80010a0 <MX_ADC1_Init+0xec>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ff4:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <MX_ADC1_Init+0xec>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ffa:	4b29      	ldr	r3, [pc, #164]	; (80010a0 <MX_ADC1_Init+0xec>)
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001000:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <MX_ADC1_Init+0xec>)
 8001002:	2200      	movs	r2, #0
 8001004:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001006:	4b26      	ldr	r3, [pc, #152]	; (80010a0 <MX_ADC1_Init+0xec>)
 8001008:	2200      	movs	r2, #0
 800100a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800100c:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <MX_ADC1_Init+0xec>)
 800100e:	2201      	movs	r2, #1
 8001010:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001012:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <MX_ADC1_Init+0xec>)
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800101a:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <MX_ADC1_Init+0xec>)
 800101c:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8001020:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001022:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <MX_ADC1_Init+0xec>)
 8001024:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001028:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <MX_ADC1_Init+0xec>)
 800102c:	2201      	movs	r2, #1
 800102e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001032:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <MX_ADC1_Init+0xec>)
 8001034:	2200      	movs	r2, #0
 8001036:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001038:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <MX_ADC1_Init+0xec>)
 800103a:	2200      	movs	r2, #0
 800103c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001040:	4817      	ldr	r0, [pc, #92]	; (80010a0 <MX_ADC1_Init+0xec>)
 8001042:	f001 fee7 	bl	8002e14 <HAL_ADC_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 800104c:	f000 fb60 	bl	8001710 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001058:	4619      	mov	r1, r3
 800105a:	4811      	ldr	r0, [pc, #68]	; (80010a0 <MX_ADC1_Init+0xec>)
 800105c:	f003 fb5c 	bl	8004718 <HAL_ADCEx_MultiModeConfigChannel>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001066:	f000 fb53 	bl	8001710 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MX_ADC1_Init+0xf0>)
 800106c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800106e:	2306      	movs	r3, #6
 8001070:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001072:	2302      	movs	r3, #2
 8001074:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001076:	237f      	movs	r3, #127	; 0x7f
 8001078:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800107a:	2304      	movs	r3, #4
 800107c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	4619      	mov	r1, r3
 8001086:	4806      	ldr	r0, [pc, #24]	; (80010a0 <MX_ADC1_Init+0xec>)
 8001088:	f002 fcca 	bl	8003a20 <HAL_ADC_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001092:	f000 fb3d 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001096:	bf00      	nop
 8001098:	3730      	adds	r7, #48	; 0x30
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200002ac 	.word	0x200002ac
 80010a4:	08600004 	.word	0x08600004

080010a8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ae:	463b      	mov	r3, r7
 80010b0:	2220      	movs	r2, #32
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f00a f988 	bl	800b3ca <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80010ba:	4b2b      	ldr	r3, [pc, #172]	; (8001168 <MX_ADC2_Init+0xc0>)
 80010bc:	4a2b      	ldr	r2, [pc, #172]	; (800116c <MX_ADC2_Init+0xc4>)
 80010be:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010c0:	4b29      	ldr	r3, [pc, #164]	; (8001168 <MX_ADC2_Init+0xc0>)
 80010c2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010c6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010c8:	4b27      	ldr	r3, [pc, #156]	; (8001168 <MX_ADC2_Init+0xc0>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ce:	4b26      	ldr	r3, [pc, #152]	; (8001168 <MX_ADC2_Init+0xc0>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80010d4:	4b24      	ldr	r3, [pc, #144]	; (8001168 <MX_ADC2_Init+0xc0>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010da:	4b23      	ldr	r3, [pc, #140]	; (8001168 <MX_ADC2_Init+0xc0>)
 80010dc:	2200      	movs	r2, #0
 80010de:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010e0:	4b21      	ldr	r3, [pc, #132]	; (8001168 <MX_ADC2_Init+0xc0>)
 80010e2:	2204      	movs	r2, #4
 80010e4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80010e6:	4b20      	ldr	r3, [pc, #128]	; (8001168 <MX_ADC2_Init+0xc0>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010ec:	4b1e      	ldr	r3, [pc, #120]	; (8001168 <MX_ADC2_Init+0xc0>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80010f2:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <MX_ADC2_Init+0xc0>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010f8:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <MX_ADC2_Init+0xc0>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001100:	4b19      	ldr	r3, [pc, #100]	; (8001168 <MX_ADC2_Init+0xc0>)
 8001102:	2200      	movs	r2, #0
 8001104:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001106:	4b18      	ldr	r3, [pc, #96]	; (8001168 <MX_ADC2_Init+0xc0>)
 8001108:	2200      	movs	r2, #0
 800110a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800110c:	4b16      	ldr	r3, [pc, #88]	; (8001168 <MX_ADC2_Init+0xc0>)
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_ADC2_Init+0xc0>)
 8001116:	2200      	movs	r2, #0
 8001118:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800111a:	4b13      	ldr	r3, [pc, #76]	; (8001168 <MX_ADC2_Init+0xc0>)
 800111c:	2200      	movs	r2, #0
 800111e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001122:	4811      	ldr	r0, [pc, #68]	; (8001168 <MX_ADC2_Init+0xc0>)
 8001124:	f001 fe76 	bl	8002e14 <HAL_ADC_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800112e:	f000 faef 	bl	8001710 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <MX_ADC2_Init+0xc8>)
 8001134:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001136:	2306      	movs	r3, #6
 8001138:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800113e:	237f      	movs	r3, #127	; 0x7f
 8001140:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001142:	2304      	movs	r3, #4
 8001144:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800114a:	463b      	mov	r3, r7
 800114c:	4619      	mov	r1, r3
 800114e:	4806      	ldr	r0, [pc, #24]	; (8001168 <MX_ADC2_Init+0xc0>)
 8001150:	f002 fc66 	bl	8003a20 <HAL_ADC_ConfigChannel>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800115a:	f000 fad9 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	3720      	adds	r7, #32
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000318 	.word	0x20000318
 800116c:	50000100 	.word	0x50000100
 8001170:	19200040 	.word	0x19200040

08001174 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b0a4      	sub	sp, #144	; 0x90
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800118c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001190:	2254      	movs	r2, #84	; 0x54
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f00a f918 	bl	800b3ca <memset>
  if(adcHandle->Instance==ADC1)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011a2:	f040 80a8 	bne.w	80012f6 <HAL_ADC_MspInit+0x182>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011ac:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80011b0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011b6:	4618      	mov	r0, r3
 80011b8:	f004 ffa0 	bl	80060fc <HAL_RCCEx_PeriphCLKConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80011c2:	f000 faa5 	bl	8001710 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80011c6:	4b81      	ldr	r3, [pc, #516]	; (80013cc <HAL_ADC_MspInit+0x258>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	3301      	adds	r3, #1
 80011cc:	4a7f      	ldr	r2, [pc, #508]	; (80013cc <HAL_ADC_MspInit+0x258>)
 80011ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80011d0:	4b7e      	ldr	r3, [pc, #504]	; (80013cc <HAL_ADC_MspInit+0x258>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d10b      	bne.n	80011f0 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80011d8:	4b7d      	ldr	r3, [pc, #500]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 80011da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011dc:	4a7c      	ldr	r2, [pc, #496]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 80011de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e4:	4b7a      	ldr	r3, [pc, #488]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 80011e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f0:	4b77      	ldr	r3, [pc, #476]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f4:	4a76      	ldr	r2, [pc, #472]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 80011f6:	f043 0304 	orr.w	r3, r3, #4
 80011fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fc:	4b74      	ldr	r3, [pc, #464]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 80011fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	623b      	str	r3, [r7, #32]
 8001206:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001208:	4b71      	ldr	r3, [pc, #452]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 800120a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120c:	4a70      	ldr	r2, [pc, #448]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001214:	4b6e      	ldr	r3, [pc, #440]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 8001216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	61fb      	str	r3, [r7, #28]
 800121e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001220:	4b6b      	ldr	r3, [pc, #428]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 8001222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001224:	4a6a      	ldr	r2, [pc, #424]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 8001226:	f043 0302 	orr.w	r3, r3, #2
 800122a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122c:	4b68      	ldr	r3, [pc, #416]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 800122e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	61bb      	str	r3, [r7, #24]
 8001236:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8001238:	2304      	movs	r3, #4
 800123a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800123c:	2303      	movs	r3, #3
 800123e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 8001248:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800124c:	4619      	mov	r1, r3
 800124e:	4861      	ldr	r0, [pc, #388]	; (80013d4 <HAL_ADC_MspInit+0x260>)
 8001250:	f003 ff7c 	bl	800514c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8001254:	2302      	movs	r3, #2
 8001256:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001258:	2303      	movs	r3, #3
 800125a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8001264:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001268:	4619      	mov	r1, r3
 800126a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126e:	f003 ff6d 	bl	800514c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001272:	2303      	movs	r3, #3
 8001274:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001276:	2303      	movs	r3, #3
 8001278:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001282:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001286:	4619      	mov	r1, r3
 8001288:	4853      	ldr	r0, [pc, #332]	; (80013d8 <HAL_ADC_MspInit+0x264>)
 800128a:	f003 ff5f 	bl	800514c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 800128e:	4b53      	ldr	r3, [pc, #332]	; (80013dc <HAL_ADC_MspInit+0x268>)
 8001290:	4a53      	ldr	r2, [pc, #332]	; (80013e0 <HAL_ADC_MspInit+0x26c>)
 8001292:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001294:	4b51      	ldr	r3, [pc, #324]	; (80013dc <HAL_ADC_MspInit+0x268>)
 8001296:	2205      	movs	r2, #5
 8001298:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800129a:	4b50      	ldr	r3, [pc, #320]	; (80013dc <HAL_ADC_MspInit+0x268>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a0:	4b4e      	ldr	r3, [pc, #312]	; (80013dc <HAL_ADC_MspInit+0x268>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012a6:	4b4d      	ldr	r3, [pc, #308]	; (80013dc <HAL_ADC_MspInit+0x268>)
 80012a8:	2280      	movs	r2, #128	; 0x80
 80012aa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012ac:	4b4b      	ldr	r3, [pc, #300]	; (80013dc <HAL_ADC_MspInit+0x268>)
 80012ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012b2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012b4:	4b49      	ldr	r3, [pc, #292]	; (80013dc <HAL_ADC_MspInit+0x268>)
 80012b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ba:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80012bc:	4b47      	ldr	r3, [pc, #284]	; (80013dc <HAL_ADC_MspInit+0x268>)
 80012be:	2200      	movs	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012c2:	4b46      	ldr	r3, [pc, #280]	; (80013dc <HAL_ADC_MspInit+0x268>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012c8:	4844      	ldr	r0, [pc, #272]	; (80013dc <HAL_ADC_MspInit+0x268>)
 80012ca:	f003 fc0d 	bl	8004ae8 <HAL_DMA_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 80012d4:	f000 fa1c 	bl	8001710 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a40      	ldr	r2, [pc, #256]	; (80013dc <HAL_ADC_MspInit+0x268>)
 80012dc:	655a      	str	r2, [r3, #84]	; 0x54
 80012de:	4a3f      	ldr	r2, [pc, #252]	; (80013dc <HAL_ADC_MspInit+0x268>)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2100      	movs	r1, #0
 80012e8:	2012      	movs	r0, #18
 80012ea:	f003 fbd5 	bl	8004a98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80012ee:	2012      	movs	r0, #18
 80012f0:	f003 fbec 	bl	8004acc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80012f4:	e066      	b.n	80013c4 <HAL_ADC_MspInit+0x250>
  else if(adcHandle->Instance==ADC2)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a3a      	ldr	r2, [pc, #232]	; (80013e4 <HAL_ADC_MspInit+0x270>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d161      	bne.n	80013c4 <HAL_ADC_MspInit+0x250>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001300:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001306:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800130a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800130c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001310:	4618      	mov	r0, r3
 8001312:	f004 fef3 	bl	80060fc <HAL_RCCEx_PeriphCLKConfig>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <HAL_ADC_MspInit+0x1ac>
      Error_Handler();
 800131c:	f000 f9f8 	bl	8001710 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001320:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <HAL_ADC_MspInit+0x258>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	3301      	adds	r3, #1
 8001326:	4a29      	ldr	r2, [pc, #164]	; (80013cc <HAL_ADC_MspInit+0x258>)
 8001328:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800132a:	4b28      	ldr	r3, [pc, #160]	; (80013cc <HAL_ADC_MspInit+0x258>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d10b      	bne.n	800134a <HAL_ADC_MspInit+0x1d6>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001332:	4b27      	ldr	r3, [pc, #156]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	4a26      	ldr	r2, [pc, #152]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 8001338:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800133c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800133e:	4b24      	ldr	r3, [pc, #144]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001342:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	4a20      	ldr	r2, [pc, #128]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001356:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	4a1a      	ldr	r2, [pc, #104]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <HAL_ADC_MspInit+0x25c>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 800137a:	230b      	movs	r3, #11
 800137c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800137e:	2303      	movs	r3, #3
 8001380:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800138e:	4619      	mov	r1, r3
 8001390:	4810      	ldr	r0, [pc, #64]	; (80013d4 <HAL_ADC_MspInit+0x260>)
 8001392:	f003 fedb 	bl	800514c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8001396:	2301      	movs	r3, #1
 8001398:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800139a:	2303      	movs	r3, #3
 800139c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 80013a6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013aa:	4619      	mov	r1, r3
 80013ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b0:	f003 fecc 	bl	800514c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2100      	movs	r1, #0
 80013b8:	2012      	movs	r0, #18
 80013ba:	f003 fb6d 	bl	8004a98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80013be:	2012      	movs	r0, #18
 80013c0:	f003 fb84 	bl	8004acc <HAL_NVIC_EnableIRQ>
}
 80013c4:	bf00      	nop
 80013c6:	3790      	adds	r7, #144	; 0x90
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200003e4 	.word	0x200003e4
 80013d0:	40021000 	.word	0x40021000
 80013d4:	48000800 	.word	0x48000800
 80013d8:	48000400 	.word	0x48000400
 80013dc:	20000384 	.word	0x20000384
 80013e0:	4002001c 	.word	0x4002001c
 80013e4:	50000100 	.word	0x50000100

080013e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80013ee:	4b12      	ldr	r3, [pc, #72]	; (8001438 <MX_DMA_Init+0x50>)
 80013f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f2:	4a11      	ldr	r2, [pc, #68]	; (8001438 <MX_DMA_Init+0x50>)
 80013f4:	f043 0304 	orr.w	r3, r3, #4
 80013f8:	6493      	str	r3, [r2, #72]	; 0x48
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <MX_DMA_Init+0x50>)
 80013fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <MX_DMA_Init+0x50>)
 8001408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800140a:	4a0b      	ldr	r2, [pc, #44]	; (8001438 <MX_DMA_Init+0x50>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6493      	str	r3, [r2, #72]	; 0x48
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <MX_DMA_Init+0x50>)
 8001414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2100      	movs	r1, #0
 8001422:	200c      	movs	r0, #12
 8001424:	f003 fb38 	bl	8004a98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001428:	200c      	movs	r0, #12
 800142a:	f003 fb4f 	bl	8004acc <HAL_NVIC_EnableIRQ>

}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40021000 	.word	0x40021000

0800143c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	; 0x28
 8001440:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
 8001450:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001452:	4b3f      	ldr	r3, [pc, #252]	; (8001550 <MX_GPIO_Init+0x114>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	4a3e      	ldr	r2, [pc, #248]	; (8001550 <MX_GPIO_Init+0x114>)
 8001458:	f043 0304 	orr.w	r3, r3, #4
 800145c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145e:	4b3c      	ldr	r3, [pc, #240]	; (8001550 <MX_GPIO_Init+0x114>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800146a:	4b39      	ldr	r3, [pc, #228]	; (8001550 <MX_GPIO_Init+0x114>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	4a38      	ldr	r2, [pc, #224]	; (8001550 <MX_GPIO_Init+0x114>)
 8001470:	f043 0320 	orr.w	r3, r3, #32
 8001474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001476:	4b36      	ldr	r3, [pc, #216]	; (8001550 <MX_GPIO_Init+0x114>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	f003 0320 	and.w	r3, r3, #32
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	4b33      	ldr	r3, [pc, #204]	; (8001550 <MX_GPIO_Init+0x114>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	4a32      	ldr	r2, [pc, #200]	; (8001550 <MX_GPIO_Init+0x114>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148e:	4b30      	ldr	r3, [pc, #192]	; (8001550 <MX_GPIO_Init+0x114>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	4b2d      	ldr	r3, [pc, #180]	; (8001550 <MX_GPIO_Init+0x114>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	4a2c      	ldr	r2, [pc, #176]	; (8001550 <MX_GPIO_Init+0x114>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a6:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <MX_GPIO_Init+0x114>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b2:	4b27      	ldr	r3, [pc, #156]	; (8001550 <MX_GPIO_Init+0x114>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	4a26      	ldr	r2, [pc, #152]	; (8001550 <MX_GPIO_Init+0x114>)
 80014b8:	f043 0308 	orr.w	r3, r3, #8
 80014bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014be:	4b24      	ldr	r3, [pc, #144]	; (8001550 <MX_GPIO_Init+0x114>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2120      	movs	r1, #32
 80014ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d2:	f003 ffbd 	bl	8005450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2104      	movs	r1, #4
 80014da:	481e      	ldr	r0, [pc, #120]	; (8001554 <MX_GPIO_Init+0x118>)
 80014dc:	f003 ffb8 	bl	8005450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 80014e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	4619      	mov	r1, r3
 80014f6:	4818      	ldr	r0, [pc, #96]	; (8001558 <MX_GPIO_Init+0x11c>)
 80014f8:	f003 fe28 	bl	800514c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 80014fc:	2320      	movs	r3, #32
 80014fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001500:	2301      	movs	r3, #1
 8001502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4619      	mov	r1, r3
 8001512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001516:	f003 fe19 	bl	800514c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 800151a:	2304      	movs	r3, #4
 800151c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151e:	2301      	movs	r3, #1
 8001520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	4808      	ldr	r0, [pc, #32]	; (8001554 <MX_GPIO_Init+0x118>)
 8001532:	f003 fe0b 	bl	800514c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2100      	movs	r1, #0
 800153a:	2028      	movs	r0, #40	; 0x28
 800153c:	f003 faac 	bl	8004a98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001540:	2028      	movs	r0, #40	; 0x28
 8001542:	f003 fac3 	bl	8004acc <HAL_NVIC_EnableIRQ>

}
 8001546:	bf00      	nop
 8001548:	3728      	adds	r7, #40	; 0x28
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40021000 	.word	0x40021000
 8001554:	48000c00 	.word	0x48000c00
 8001558:	48000800 	.word	0x48000800

0800155c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001560:	f001 f9b7 	bl	80028d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001564:	f000 f826 	bl	80015b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001568:	f7ff ff68 	bl	800143c <MX_GPIO_Init>
  MX_DMA_Init();
 800156c:	f7ff ff3c 	bl	80013e8 <MX_DMA_Init>
  MX_ADC2_Init();
 8001570:	f7ff fd9a 	bl	80010a8 <MX_ADC2_Init>
  MX_ADC1_Init();
 8001574:	f7ff fd1e 	bl	8000fb4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001578:	f000 fac0 	bl	8001afc <MX_TIM1_Init>
  MX_TIM3_Init();
 800157c:	f000 fb70 	bl	8001c60 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001580:	f000 fdb4 	bl	80020ec <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001584:	f000 fdfe 	bl	8002184 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8001588:	f000 fbb6 	bl	8001cf8 <MX_TIM4_Init>
  MX_TIM5_Init();
 800158c:	f000 fc0a 	bl	8001da4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
	Shell_Init();
 8001590:	f000 feec 	bl	800236c <Shell_Init>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001594:	217f      	movs	r1, #127	; 0x7f
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <main+0x50>)
 8001598:	f003 f82a 	bl	80045f0 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1,ADC_Buffer, ADC_BUF_SIZE);
 800159c:	2201      	movs	r2, #1
 800159e:	4904      	ldr	r1, [pc, #16]	; (80015b0 <main+0x54>)
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <main+0x50>)
 80015a2:	f001 fedd 	bl	8003360 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 80015a6:	f000 ff23 	bl	80023f0 <Shell_Loop>
	{
 80015aa:	e7fc      	b.n	80015a6 <main+0x4a>
 80015ac:	200002ac 	.word	0x200002ac
 80015b0:	200003f0 	.word	0x200003f0

080015b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b094      	sub	sp, #80	; 0x50
 80015b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ba:	f107 0318 	add.w	r3, r7, #24
 80015be:	2238      	movs	r2, #56	; 0x38
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f009 ff01 	bl	800b3ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80015d6:	2000      	movs	r0, #0
 80015d8:	f003 ff76 	bl	80054c8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015dc:	2301      	movs	r3, #1
 80015de:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015e4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015e6:	2302      	movs	r3, #2
 80015e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ea:	2303      	movs	r3, #3
 80015ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80015ee:	2306      	movs	r3, #6
 80015f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80015f2:	2355      	movs	r3, #85	; 0x55
 80015f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015f6:	2302      	movs	r3, #2
 80015f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015fa:	2302      	movs	r3, #2
 80015fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015fe:	2302      	movs	r3, #2
 8001600:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001602:	f107 0318 	add.w	r3, r7, #24
 8001606:	4618      	mov	r0, r3
 8001608:	f004 f812 	bl	8005630 <HAL_RCC_OscConfig>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001612:	f000 f87d 	bl	8001710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001616:	230f      	movs	r3, #15
 8001618:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800161a:	2303      	movs	r3, #3
 800161c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	2104      	movs	r1, #4
 800162e:	4618      	mov	r0, r3
 8001630:	f004 fb16 	bl	8005c60 <HAL_RCC_ClockConfig>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800163a:	f000 f869 	bl	8001710 <Error_Handler>
  }
}
 800163e:	bf00      	nop
 8001640:	3750      	adds	r7, #80	; 0x50
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	float u_Vf;
	uint16_t valf = ADC_Buffer[0];
 8001650:	4b23      	ldr	r3, [pc, #140]	; (80016e0 <HAL_ADC_ConvCpltCallback+0x98>)
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	81fb      	strh	r3, [r7, #14]
	u_Vf = (valf / 4096.0) * 3.3;
 8001656:	89fb      	ldrh	r3, [r7, #14]
 8001658:	4618      	mov	r0, r3
 800165a:	f7fe ff9b 	bl	8000594 <__aeabi_i2d>
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001664:	f7ff f92a 	bl	80008bc <__aeabi_ddiv>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4610      	mov	r0, r2
 800166e:	4619      	mov	r1, r3
 8001670:	a315      	add	r3, pc, #84	; (adr r3, 80016c8 <HAL_ADC_ConvCpltCallback+0x80>)
 8001672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001676:	f7fe fff7 	bl	8000668 <__aeabi_dmul>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4610      	mov	r0, r2
 8001680:	4619      	mov	r1, r3
 8001682:	f7ff fac9 	bl	8000c18 <__aeabi_d2f>
 8001686:	4603      	mov	r3, r0
 8001688:	60bb      	str	r3, [r7, #8]
	Imesf =(u_Vf - 1.65) / 0.05;
 800168a:	68b8      	ldr	r0, [r7, #8]
 800168c:	f7fe ff94 	bl	80005b8 <__aeabi_f2d>
 8001690:	a30f      	add	r3, pc, #60	; (adr r3, 80016d0 <HAL_ADC_ConvCpltCallback+0x88>)
 8001692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001696:	f7fe fe2f 	bl	80002f8 <__aeabi_dsub>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	a30d      	add	r3, pc, #52	; (adr r3, 80016d8 <HAL_ADC_ConvCpltCallback+0x90>)
 80016a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a8:	f7ff f908 	bl	80008bc <__aeabi_ddiv>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4610      	mov	r0, r2
 80016b2:	4619      	mov	r1, r3
 80016b4:	f7ff fab0 	bl	8000c18 <__aeabi_d2f>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4a0b      	ldr	r2, [pc, #44]	; (80016e8 <HAL_ADC_ConvCpltCallback+0xa0>)
 80016bc:	6013      	str	r3, [r2, #0]

}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	66666666 	.word	0x66666666
 80016cc:	400a6666 	.word	0x400a6666
 80016d0:	66666666 	.word	0x66666666
 80016d4:	3ffa6666 	.word	0x3ffa6666
 80016d8:	9999999a 	.word	0x9999999a
 80016dc:	3fa99999 	.word	0x3fa99999
 80016e0:	200003f0 	.word	0x200003f0
 80016e4:	40b00000 	.word	0x40b00000
 80016e8:	200003e8 	.word	0x200003e8

080016ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d101      	bne.n	8001702 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016fe:	f001 f901 	bl	8002904 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40001000 	.word	0x40001000

08001710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001714:	b672      	cpsid	i
}
 8001716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001718:	e7fe      	b.n	8001718 <Error_Handler+0x8>
	...

0800171c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001722:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <HAL_MspInit+0x44>)
 8001724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001726:	4a0e      	ldr	r2, [pc, #56]	; (8001760 <HAL_MspInit+0x44>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6613      	str	r3, [r2, #96]	; 0x60
 800172e:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <HAL_MspInit+0x44>)
 8001730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800173a:	4b09      	ldr	r3, [pc, #36]	; (8001760 <HAL_MspInit+0x44>)
 800173c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173e:	4a08      	ldr	r2, [pc, #32]	; (8001760 <HAL_MspInit+0x44>)
 8001740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001744:	6593      	str	r3, [r2, #88]	; 0x58
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_MspInit+0x44>)
 8001748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174e:	603b      	str	r3, [r7, #0]
 8001750:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001752:	f003 ff5d 	bl	8005610 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40021000 	.word	0x40021000

08001764 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08c      	sub	sp, #48	; 0x30
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001774:	4b2c      	ldr	r3, [pc, #176]	; (8001828 <HAL_InitTick+0xc4>)
 8001776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001778:	4a2b      	ldr	r2, [pc, #172]	; (8001828 <HAL_InitTick+0xc4>)
 800177a:	f043 0310 	orr.w	r3, r3, #16
 800177e:	6593      	str	r3, [r2, #88]	; 0x58
 8001780:	4b29      	ldr	r3, [pc, #164]	; (8001828 <HAL_InitTick+0xc4>)
 8001782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001784:	f003 0310 	and.w	r3, r3, #16
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800178c:	f107 020c 	add.w	r2, r7, #12
 8001790:	f107 0310 	add.w	r3, r7, #16
 8001794:	4611      	mov	r1, r2
 8001796:	4618      	mov	r0, r3
 8001798:	f004 fc38 	bl	800600c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800179c:	f004 fc0a 	bl	8005fb4 <HAL_RCC_GetPCLK1Freq>
 80017a0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a4:	4a21      	ldr	r2, [pc, #132]	; (800182c <HAL_InitTick+0xc8>)
 80017a6:	fba2 2303 	umull	r2, r3, r2, r3
 80017aa:	0c9b      	lsrs	r3, r3, #18
 80017ac:	3b01      	subs	r3, #1
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017b0:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <HAL_InitTick+0xcc>)
 80017b2:	4a20      	ldr	r2, [pc, #128]	; (8001834 <HAL_InitTick+0xd0>)
 80017b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017b6:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <HAL_InitTick+0xcc>)
 80017b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017bc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017be:	4a1c      	ldr	r2, [pc, #112]	; (8001830 <HAL_InitTick+0xcc>)
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <HAL_InitTick+0xcc>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ca:	4b19      	ldr	r3, [pc, #100]	; (8001830 <HAL_InitTick+0xcc>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80017d0:	4817      	ldr	r0, [pc, #92]	; (8001830 <HAL_InitTick+0xcc>)
 80017d2:	f004 fee1 	bl	8006598 <HAL_TIM_Base_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80017dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d11b      	bne.n	800181c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80017e4:	4812      	ldr	r0, [pc, #72]	; (8001830 <HAL_InitTick+0xcc>)
 80017e6:	f004 ff2f 	bl	8006648 <HAL_TIM_Base_Start_IT>
 80017ea:	4603      	mov	r3, r0
 80017ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80017f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d111      	bne.n	800181c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017f8:	2036      	movs	r0, #54	; 0x36
 80017fa:	f003 f967 	bl	8004acc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b0f      	cmp	r3, #15
 8001802:	d808      	bhi.n	8001816 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001804:	2200      	movs	r2, #0
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	2036      	movs	r0, #54	; 0x36
 800180a:	f003 f945 	bl	8004a98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800180e:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <HAL_InitTick+0xd4>)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	e002      	b.n	800181c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800181c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001820:	4618      	mov	r0, r3
 8001822:	3730      	adds	r7, #48	; 0x30
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40021000 	.word	0x40021000
 800182c:	431bde83 	.word	0x431bde83
 8001830:	200003f4 	.word	0x200003f4
 8001834:	40001000 	.word	0x40001000
 8001838:	200000c0 	.word	0x200000c0

0800183c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001840:	e7fe      	b.n	8001840 <NMI_Handler+0x4>

08001842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001846:	e7fe      	b.n	8001846 <HardFault_Handler+0x4>

08001848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800184c:	e7fe      	b.n	800184c <MemManage_Handler+0x4>

0800184e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001852:	e7fe      	b.n	8001852 <BusFault_Handler+0x4>

08001854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <UsageFault_Handler+0x4>

0800185a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001898:	4802      	ldr	r0, [pc, #8]	; (80018a4 <DMA1_Channel2_IRQHandler+0x10>)
 800189a:	f003 fb08 	bl	8004eae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000384 	.word	0x20000384

080018a8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80018ac:	4803      	ldr	r0, [pc, #12]	; (80018bc <ADC1_2_IRQHandler+0x14>)
 80018ae:	f001 fe39 	bl	8003524 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80018b2:	4803      	ldr	r0, [pc, #12]	; (80018c0 <ADC1_2_IRQHandler+0x18>)
 80018b4:	f001 fe36 	bl	8003524 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	200002ac 	.word	0x200002ac
 80018c0:	20000318 	.word	0x20000318

080018c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <USART2_IRQHandler+0x10>)
 80018ca:	f007 f807 	bl	80088dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000574 	.word	0x20000574

080018d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018dc:	4802      	ldr	r0, [pc, #8]	; (80018e8 <USART3_IRQHandler+0x10>)
 80018de:	f006 fffd 	bl	80088dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000604 	.word	0x20000604

080018ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 80018f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018f4:	f003 fdc4 	bl	8005480 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}

080018fc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	encoder_speed = TIM4->CNT*ENCODER_FREQUENCY/ENCODER_RESOLUTION;
 8001900:	4b0a      	ldr	r3, [pc, #40]	; (800192c <TIM5_IRQHandler+0x30>)
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	2264      	movs	r2, #100	; 0x64
 8001906:	fb02 f303 	mul.w	r3, r2, r3
 800190a:	0b1b      	lsrs	r3, r3, #12
 800190c:	ee07 3a90 	vmov	s15, r3
 8001910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <TIM5_IRQHandler+0x34>)
 8001916:	edc3 7a00 	vstr	s15, [r3]
	TIM4->CNT = 0;
 800191a:	4b04      	ldr	r3, [pc, #16]	; (800192c <TIM5_IRQHandler+0x30>)
 800191c:	2200      	movs	r2, #0
 800191e:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001920:	4804      	ldr	r0, [pc, #16]	; (8001934 <TIM5_IRQHandler+0x38>)
 8001922:	f005 fa43 	bl	8006dac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40000800 	.word	0x40000800
 8001930:	200003ec 	.word	0x200003ec
 8001934:	20000528 	.word	0x20000528

08001938 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800193c:	4802      	ldr	r0, [pc, #8]	; (8001948 <TIM6_DAC_IRQHandler+0x10>)
 800193e:	f005 fa35 	bl	8006dac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200003f4 	.word	0x200003f4

0800194c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return 1;
 8001950:	2301      	movs	r3, #1
}
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <_kill>:

int _kill(int pid, int sig)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001966:	f009 fddf 	bl	800b528 <__errno>
 800196a:	4603      	mov	r3, r0
 800196c:	2216      	movs	r2, #22
 800196e:	601a      	str	r2, [r3, #0]
  return -1;
 8001970:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <_exit>:

void _exit (int status)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001984:	f04f 31ff 	mov.w	r1, #4294967295
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff ffe7 	bl	800195c <_kill>
  while (1) {}    /* Make sure we hang here */
 800198e:	e7fe      	b.n	800198e <_exit+0x12>

08001990 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	e00a      	b.n	80019b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019a2:	f3af 8000 	nop.w
 80019a6:	4601      	mov	r1, r0
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	1c5a      	adds	r2, r3, #1
 80019ac:	60ba      	str	r2, [r7, #8]
 80019ae:	b2ca      	uxtb	r2, r1
 80019b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	3301      	adds	r3, #1
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	429a      	cmp	r2, r3
 80019be:	dbf0      	blt.n	80019a2 <_read+0x12>
  }

  return len;
 80019c0:	687b      	ldr	r3, [r7, #4]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b086      	sub	sp, #24
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	60f8      	str	r0, [r7, #12]
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	e009      	b.n	80019f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	1c5a      	adds	r2, r3, #1
 80019e0:	60ba      	str	r2, [r7, #8]
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	3301      	adds	r3, #1
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	dbf1      	blt.n	80019dc <_write+0x12>
  }
  return len;
 80019f8:	687b      	ldr	r3, [r7, #4]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <_close>:

int _close(int file)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a2a:	605a      	str	r2, [r3, #4]
  return 0;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <_isatty>:

int _isatty(int file)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a42:	2301      	movs	r3, #1
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
	...

08001a6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a74:	4a14      	ldr	r2, [pc, #80]	; (8001ac8 <_sbrk+0x5c>)
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <_sbrk+0x60>)
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a80:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <_sbrk+0x64>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d102      	bne.n	8001a8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a88:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <_sbrk+0x64>)
 8001a8a:	4a12      	ldr	r2, [pc, #72]	; (8001ad4 <_sbrk+0x68>)
 8001a8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <_sbrk+0x64>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d207      	bcs.n	8001aac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a9c:	f009 fd44 	bl	800b528 <__errno>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aaa:	e009      	b.n	8001ac0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <_sbrk+0x64>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ab2:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <_sbrk+0x64>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	4a05      	ldr	r2, [pc, #20]	; (8001ad0 <_sbrk+0x64>)
 8001abc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001abe:	68fb      	ldr	r3, [r7, #12]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20020000 	.word	0x20020000
 8001acc:	00000400 	.word	0x00000400
 8001ad0:	20000440 	.word	0x20000440
 8001ad4:	20000960 	.word	0x20000960

08001ad8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <SystemInit+0x20>)
 8001ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ae2:	4a05      	ldr	r2, [pc, #20]	; (8001af8 <SystemInit+0x20>)
 8001ae4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ae8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b098      	sub	sp, #96	; 0x60
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b02:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b0e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
 8001b1c:	611a      	str	r2, [r3, #16]
 8001b1e:	615a      	str	r2, [r3, #20]
 8001b20:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	2234      	movs	r2, #52	; 0x34
 8001b26:	2100      	movs	r1, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f009 fc4e 	bl	800b3ca <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b2e:	4b4a      	ldr	r3, [pc, #296]	; (8001c58 <MX_TIM1_Init+0x15c>)
 8001b30:	4a4a      	ldr	r2, [pc, #296]	; (8001c5c <MX_TIM1_Init+0x160>)
 8001b32:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b34:	4b48      	ldr	r3, [pc, #288]	; (8001c58 <MX_TIM1_Init+0x15c>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001b3a:	4b47      	ldr	r3, [pc, #284]	; (8001c58 <MX_TIM1_Init+0x15c>)
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4250;
 8001b40:	4b45      	ldr	r3, [pc, #276]	; (8001c58 <MX_TIM1_Init+0x15c>)
 8001b42:	f241 029a 	movw	r2, #4250	; 0x109a
 8001b46:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b48:	4b43      	ldr	r3, [pc, #268]	; (8001c58 <MX_TIM1_Init+0x15c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b4e:	4b42      	ldr	r3, [pc, #264]	; (8001c58 <MX_TIM1_Init+0x15c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b54:	4b40      	ldr	r3, [pc, #256]	; (8001c58 <MX_TIM1_Init+0x15c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b5a:	483f      	ldr	r0, [pc, #252]	; (8001c58 <MX_TIM1_Init+0x15c>)
 8001b5c:	f004 fdec 	bl	8006738 <HAL_TIM_PWM_Init>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001b66:	f7ff fdd3 	bl	8001710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b6a:	2320      	movs	r3, #32
 8001b6c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4836      	ldr	r0, [pc, #216]	; (8001c58 <MX_TIM1_Init+0x15c>)
 8001b7e:	f006 fbbd 	bl	80082fc <HAL_TIMEx_MasterConfigSynchronization>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001b88:	f7ff fdc2 	bl	8001710 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b8c:	2360      	movs	r3, #96	; 0x60
 8001b8e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 2550;
 8001b90:	f640 13f6 	movw	r3, #2550	; 0x9f6
 8001b94:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b96:	2300      	movs	r3, #0
 8001b98:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001baa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bae:	2200      	movs	r2, #0
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4829      	ldr	r0, [pc, #164]	; (8001c58 <MX_TIM1_Init+0x15c>)
 8001bb4:	f005 fa7a 	bl	80070ac <HAL_TIM_PWM_ConfigChannel>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001bbe:	f7ff fda7 	bl	8001710 <Error_Handler>
  }
  sConfigOC.Pulse = 1700;
 8001bc2:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8001bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bc8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bcc:	2204      	movs	r2, #4
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4821      	ldr	r0, [pc, #132]	; (8001c58 <MX_TIM1_Init+0x15c>)
 8001bd2:	f005 fa6b 	bl	80070ac <HAL_TIM_PWM_ConfigChannel>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8001bdc:	f7ff fd98 	bl	8001710 <Error_Handler>
  }
  sConfigOC.Pulse = 637;
 8001be0:	f240 237d 	movw	r3, #637	; 0x27d
 8001be4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001be6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bea:	2208      	movs	r2, #8
 8001bec:	4619      	mov	r1, r3
 8001bee:	481a      	ldr	r0, [pc, #104]	; (8001c58 <MX_TIM1_Init+0x15c>)
 8001bf0:	f005 fa5c 	bl	80070ac <HAL_TIM_PWM_ConfigChannel>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8001bfa:	f7ff fd89 	bl	8001710 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 34;
 8001c0a:	2322      	movs	r3, #34	; 0x22
 8001c0c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c16:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c28:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4807      	ldr	r0, [pc, #28]	; (8001c58 <MX_TIM1_Init+0x15c>)
 8001c3c:	f006 fbf4 	bl	8008428 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8001c46:	f7ff fd63 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c4a:	4803      	ldr	r0, [pc, #12]	; (8001c58 <MX_TIM1_Init+0x15c>)
 8001c4c:	f000 f9e6 	bl	800201c <HAL_TIM_MspPostInit>

}
 8001c50:	bf00      	nop
 8001c52:	3760      	adds	r7, #96	; 0x60
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000444 	.word	0x20000444
 8001c5c:	40012c00 	.word	0x40012c00

08001c60 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001c66:	f107 0310 	add.w	r3, r7, #16
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]
 8001c7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c7e:	4b1c      	ldr	r3, [pc, #112]	; (8001cf0 <MX_TIM3_Init+0x90>)
 8001c80:	4a1c      	ldr	r2, [pc, #112]	; (8001cf4 <MX_TIM3_Init+0x94>)
 8001c82:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c84:	4b1a      	ldr	r3, [pc, #104]	; (8001cf0 <MX_TIM3_Init+0x90>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8a:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <MX_TIM3_Init+0x90>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c90:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <MX_TIM3_Init+0x90>)
 8001c92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c96:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c98:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <MX_TIM3_Init+0x90>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c9e:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <MX_TIM3_Init+0x90>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001cb4:	f107 0310 	add.w	r3, r7, #16
 8001cb8:	4619      	mov	r1, r3
 8001cba:	480d      	ldr	r0, [pc, #52]	; (8001cf0 <MX_TIM3_Init+0x90>)
 8001cbc:	f006 f94f 	bl	8007f5e <HAL_TIMEx_HallSensor_Init>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001cc6:	f7ff fd23 	bl	8001710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001cca:	2350      	movs	r3, #80	; 0x50
 8001ccc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4806      	ldr	r0, [pc, #24]	; (8001cf0 <MX_TIM3_Init+0x90>)
 8001cd8:	f006 fb10 	bl	80082fc <HAL_TIMEx_MasterConfigSynchronization>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001ce2:	f7ff fd15 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ce6:	bf00      	nop
 8001ce8:	3720      	adds	r7, #32
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000490 	.word	0x20000490
 8001cf4:	40000400 	.word	0x40000400

08001cf8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08c      	sub	sp, #48	; 0x30
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cfe:	f107 030c 	add.w	r3, r7, #12
 8001d02:	2224      	movs	r2, #36	; 0x24
 8001d04:	2100      	movs	r1, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f009 fb5f 	bl	800b3ca <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d0c:	463b      	mov	r3, r7
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d16:	4b21      	ldr	r3, [pc, #132]	; (8001d9c <MX_TIM4_Init+0xa4>)
 8001d18:	4a21      	ldr	r2, [pc, #132]	; (8001da0 <MX_TIM4_Init+0xa8>)
 8001d1a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d1c:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <MX_TIM4_Init+0xa4>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d22:	4b1e      	ldr	r3, [pc, #120]	; (8001d9c <MX_TIM4_Init+0xa4>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d28:	4b1c      	ldr	r3, [pc, #112]	; (8001d9c <MX_TIM4_Init+0xa4>)
 8001d2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d2e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d30:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <MX_TIM4_Init+0xa4>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d36:	4b19      	ldr	r3, [pc, #100]	; (8001d9c <MX_TIM4_Init+0xa4>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d40:	2300      	movs	r3, #0
 8001d42:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d44:	2301      	movs	r3, #1
 8001d46:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d50:	2300      	movs	r3, #0
 8001d52:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d54:	2301      	movs	r3, #1
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001d60:	f107 030c 	add.w	r3, r7, #12
 8001d64:	4619      	mov	r1, r3
 8001d66:	480d      	ldr	r0, [pc, #52]	; (8001d9c <MX_TIM4_Init+0xa4>)
 8001d68:	f004 feec 	bl	8006b44 <HAL_TIM_Encoder_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001d72:	f7ff fccd 	bl	8001710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d7e:	463b      	mov	r3, r7
 8001d80:	4619      	mov	r1, r3
 8001d82:	4806      	ldr	r0, [pc, #24]	; (8001d9c <MX_TIM4_Init+0xa4>)
 8001d84:	f006 faba 	bl	80082fc <HAL_TIMEx_MasterConfigSynchronization>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001d8e:	f7ff fcbf 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d92:	bf00      	nop
 8001d94:	3730      	adds	r7, #48	; 0x30
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200004dc 	.word	0x200004dc
 8001da0:	40000800 	.word	0x40000800

08001da4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001daa:	f107 0310 	add.w	r3, r7, #16
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db8:	1d3b      	adds	r3, r7, #4
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001dc2:	4b1e      	ldr	r3, [pc, #120]	; (8001e3c <MX_TIM5_Init+0x98>)
 8001dc4:	4a1e      	ldr	r2, [pc, #120]	; (8001e40 <MX_TIM5_Init+0x9c>)
 8001dc6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1699;
 8001dc8:	4b1c      	ldr	r3, [pc, #112]	; (8001e3c <MX_TIM5_Init+0x98>)
 8001dca:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8001dce:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd0:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <MX_TIM5_Init+0x98>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001dd6:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <MX_TIM5_Init+0x98>)
 8001dd8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ddc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dde:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <MX_TIM5_Init+0x98>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de4:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <MX_TIM5_Init+0x98>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001dea:	4814      	ldr	r0, [pc, #80]	; (8001e3c <MX_TIM5_Init+0x98>)
 8001dec:	f004 fbd4 	bl	8006598 <HAL_TIM_Base_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001df6:	f7ff fc8b 	bl	8001710 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dfe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001e00:	f107 0310 	add.w	r3, r7, #16
 8001e04:	4619      	mov	r1, r3
 8001e06:	480d      	ldr	r0, [pc, #52]	; (8001e3c <MX_TIM5_Init+0x98>)
 8001e08:	f005 fa64 	bl	80072d4 <HAL_TIM_ConfigClockSource>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001e12:	f7ff fc7d 	bl	8001710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e16:	2300      	movs	r3, #0
 8001e18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e1e:	1d3b      	adds	r3, r7, #4
 8001e20:	4619      	mov	r1, r3
 8001e22:	4806      	ldr	r0, [pc, #24]	; (8001e3c <MX_TIM5_Init+0x98>)
 8001e24:	f006 fa6a 	bl	80082fc <HAL_TIMEx_MasterConfigSynchronization>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001e2e:	f7ff fc6f 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001e32:	bf00      	nop
 8001e34:	3720      	adds	r7, #32
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000528 	.word	0x20000528
 8001e40:	40000c00 	.word	0x40000c00

08001e44 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <HAL_TIM_PWM_MspInit+0x38>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d10b      	bne.n	8001e6e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e56:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e5a:	4a09      	ldr	r2, [pc, #36]	; (8001e80 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e60:	6613      	str	r3, [r2, #96]	; 0x60
 8001e62:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001e6e:	bf00      	nop
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40012c00 	.word	0x40012c00
 8001e80:	40021000 	.word	0x40021000

08001e84 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08a      	sub	sp, #40	; 0x28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a26      	ldr	r2, [pc, #152]	; (8001f3c <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d145      	bne.n	8001f32 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ea6:	4b26      	ldr	r3, [pc, #152]	; (8001f40 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eaa:	4a25      	ldr	r2, [pc, #148]	; (8001f40 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	6593      	str	r3, [r2, #88]	; 0x58
 8001eb2:	4b23      	ldr	r3, [pc, #140]	; (8001f40 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebe:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec2:	4a1f      	ldr	r2, [pc, #124]	; (8001f40 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eca:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed6:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eda:	4a19      	ldr	r2, [pc, #100]	; (8001f40 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001edc:	f043 0304 	orr.w	r3, r3, #4
 8001ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ee2:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001eee:	2350      	movs	r3, #80	; 0x50
 8001ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efa:	2300      	movs	r3, #0
 8001efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001efe:	2302      	movs	r3, #2
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f02:	f107 0314 	add.w	r3, r7, #20
 8001f06:	4619      	mov	r1, r3
 8001f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f0c:	f003 f91e 	bl	800514c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f22:	2302      	movs	r3, #2
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f26:	f107 0314 	add.w	r3, r7, #20
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4805      	ldr	r0, [pc, #20]	; (8001f44 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 8001f2e:	f003 f90d 	bl	800514c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001f32:	bf00      	nop
 8001f34:	3728      	adds	r7, #40	; 0x28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40000400 	.word	0x40000400
 8001f40:	40021000 	.word	0x40021000
 8001f44:	48000800 	.word	0x48000800

08001f48 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08a      	sub	sp, #40	; 0x28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a18      	ldr	r2, [pc, #96]	; (8001fc8 <HAL_TIM_Encoder_MspInit+0x80>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d129      	bne.n	8001fbe <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f6a:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <HAL_TIM_Encoder_MspInit+0x84>)
 8001f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6e:	4a17      	ldr	r2, [pc, #92]	; (8001fcc <HAL_TIM_Encoder_MspInit+0x84>)
 8001f70:	f043 0304 	orr.w	r3, r3, #4
 8001f74:	6593      	str	r3, [r2, #88]	; 0x58
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <HAL_TIM_Encoder_MspInit+0x84>)
 8001f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f82:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <HAL_TIM_Encoder_MspInit+0x84>)
 8001f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f86:	4a11      	ldr	r2, [pc, #68]	; (8001fcc <HAL_TIM_Encoder_MspInit+0x84>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f8e:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <HAL_TIM_Encoder_MspInit+0x84>)
 8001f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f9a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001fac:	230a      	movs	r3, #10
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fba:	f003 f8c7 	bl	800514c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	3728      	adds	r7, #40	; 0x28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40000800 	.word	0x40000800
 8001fcc:	40021000 	.word	0x40021000

08001fd0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0d      	ldr	r2, [pc, #52]	; (8002014 <HAL_TIM_Base_MspInit+0x44>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d113      	bne.n	800200a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001fe2:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <HAL_TIM_Base_MspInit+0x48>)
 8001fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe6:	4a0c      	ldr	r2, [pc, #48]	; (8002018 <HAL_TIM_Base_MspInit+0x48>)
 8001fe8:	f043 0308 	orr.w	r3, r3, #8
 8001fec:	6593      	str	r3, [r2, #88]	; 0x58
 8001fee:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <HAL_TIM_Base_MspInit+0x48>)
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	2032      	movs	r0, #50	; 0x32
 8002000:	f002 fd4a 	bl	8004a98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002004:	2032      	movs	r0, #50	; 0x32
 8002006:	f002 fd61 	bl	8004acc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800200a:	bf00      	nop
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40000c00 	.word	0x40000c00
 8002018:	40021000 	.word	0x40021000

0800201c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	; 0x28
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a29      	ldr	r2, [pc, #164]	; (80020e0 <HAL_TIM_MspPostInit+0xc4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d14b      	bne.n	80020d6 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203e:	4b29      	ldr	r3, [pc, #164]	; (80020e4 <HAL_TIM_MspPostInit+0xc8>)
 8002040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002042:	4a28      	ldr	r2, [pc, #160]	; (80020e4 <HAL_TIM_MspPostInit+0xc8>)
 8002044:	f043 0302 	orr.w	r3, r3, #2
 8002048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800204a:	4b26      	ldr	r3, [pc, #152]	; (80020e4 <HAL_TIM_MspPostInit+0xc8>)
 800204c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	613b      	str	r3, [r7, #16]
 8002054:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002056:	4b23      	ldr	r3, [pc, #140]	; (80020e4 <HAL_TIM_MspPostInit+0xc8>)
 8002058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205a:	4a22      	ldr	r2, [pc, #136]	; (80020e4 <HAL_TIM_MspPostInit+0xc8>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002062:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <HAL_TIM_MspPostInit+0xc8>)
 8002064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 800206e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002074:	2302      	movs	r3, #2
 8002076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207c:	2300      	movs	r3, #0
 800207e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002080:	2306      	movs	r3, #6
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	4619      	mov	r1, r3
 800208a:	4817      	ldr	r0, [pc, #92]	; (80020e8 <HAL_TIM_MspPostInit+0xcc>)
 800208c:	f003 f85e 	bl	800514c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8002090:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002096:	2302      	movs	r3, #2
 8002098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209e:	2300      	movs	r3, #0
 80020a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80020a2:	2304      	movs	r3, #4
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 80020a6:	f107 0314 	add.w	r3, r7, #20
 80020aa:	4619      	mov	r1, r3
 80020ac:	480e      	ldr	r0, [pc, #56]	; (80020e8 <HAL_TIM_MspPostInit+0xcc>)
 80020ae:	f003 f84d 	bl	800514c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 80020b2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80020b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b8:	2302      	movs	r3, #2
 80020ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c0:	2300      	movs	r3, #0
 80020c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80020c4:	2306      	movs	r3, #6
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	4619      	mov	r1, r3
 80020ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d2:	f003 f83b 	bl	800514c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80020d6:	bf00      	nop
 80020d8:	3728      	adds	r7, #40	; 0x28
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40012c00 	.word	0x40012c00
 80020e4:	40021000 	.word	0x40021000
 80020e8:	48000400 	.word	0x48000400

080020ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020f0:	4b22      	ldr	r3, [pc, #136]	; (800217c <MX_USART2_UART_Init+0x90>)
 80020f2:	4a23      	ldr	r2, [pc, #140]	; (8002180 <MX_USART2_UART_Init+0x94>)
 80020f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020f6:	4b21      	ldr	r3, [pc, #132]	; (800217c <MX_USART2_UART_Init+0x90>)
 80020f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020fe:	4b1f      	ldr	r3, [pc, #124]	; (800217c <MX_USART2_UART_Init+0x90>)
 8002100:	2200      	movs	r2, #0
 8002102:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002104:	4b1d      	ldr	r3, [pc, #116]	; (800217c <MX_USART2_UART_Init+0x90>)
 8002106:	2200      	movs	r2, #0
 8002108:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800210a:	4b1c      	ldr	r3, [pc, #112]	; (800217c <MX_USART2_UART_Init+0x90>)
 800210c:	2200      	movs	r2, #0
 800210e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002110:	4b1a      	ldr	r3, [pc, #104]	; (800217c <MX_USART2_UART_Init+0x90>)
 8002112:	220c      	movs	r2, #12
 8002114:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002116:	4b19      	ldr	r3, [pc, #100]	; (800217c <MX_USART2_UART_Init+0x90>)
 8002118:	2200      	movs	r2, #0
 800211a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800211c:	4b17      	ldr	r3, [pc, #92]	; (800217c <MX_USART2_UART_Init+0x90>)
 800211e:	2200      	movs	r2, #0
 8002120:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002122:	4b16      	ldr	r3, [pc, #88]	; (800217c <MX_USART2_UART_Init+0x90>)
 8002124:	2200      	movs	r2, #0
 8002126:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002128:	4b14      	ldr	r3, [pc, #80]	; (800217c <MX_USART2_UART_Init+0x90>)
 800212a:	2200      	movs	r2, #0
 800212c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800212e:	4b13      	ldr	r3, [pc, #76]	; (800217c <MX_USART2_UART_Init+0x90>)
 8002130:	2200      	movs	r2, #0
 8002132:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002134:	4811      	ldr	r0, [pc, #68]	; (800217c <MX_USART2_UART_Init+0x90>)
 8002136:	f006 fa94 	bl	8008662 <HAL_UART_Init>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002140:	f7ff fae6 	bl	8001710 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002144:	2100      	movs	r1, #0
 8002146:	480d      	ldr	r0, [pc, #52]	; (800217c <MX_USART2_UART_Init+0x90>)
 8002148:	f008 fa37 	bl	800a5ba <HAL_UARTEx_SetTxFifoThreshold>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002152:	f7ff fadd 	bl	8001710 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002156:	2100      	movs	r1, #0
 8002158:	4808      	ldr	r0, [pc, #32]	; (800217c <MX_USART2_UART_Init+0x90>)
 800215a:	f008 fa6c 	bl	800a636 <HAL_UARTEx_SetRxFifoThreshold>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002164:	f7ff fad4 	bl	8001710 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002168:	4804      	ldr	r0, [pc, #16]	; (800217c <MX_USART2_UART_Init+0x90>)
 800216a:	f008 f9ed 	bl	800a548 <HAL_UARTEx_DisableFifoMode>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002174:	f7ff facc 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20000574 	.word	0x20000574
 8002180:	40004400 	.word	0x40004400

08002184 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002188:	4b22      	ldr	r3, [pc, #136]	; (8002214 <MX_USART3_UART_Init+0x90>)
 800218a:	4a23      	ldr	r2, [pc, #140]	; (8002218 <MX_USART3_UART_Init+0x94>)
 800218c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800218e:	4b21      	ldr	r3, [pc, #132]	; (8002214 <MX_USART3_UART_Init+0x90>)
 8002190:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002194:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002196:	4b1f      	ldr	r3, [pc, #124]	; (8002214 <MX_USART3_UART_Init+0x90>)
 8002198:	2200      	movs	r2, #0
 800219a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800219c:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <MX_USART3_UART_Init+0x90>)
 800219e:	2200      	movs	r2, #0
 80021a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021a2:	4b1c      	ldr	r3, [pc, #112]	; (8002214 <MX_USART3_UART_Init+0x90>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021a8:	4b1a      	ldr	r3, [pc, #104]	; (8002214 <MX_USART3_UART_Init+0x90>)
 80021aa:	220c      	movs	r2, #12
 80021ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ae:	4b19      	ldr	r3, [pc, #100]	; (8002214 <MX_USART3_UART_Init+0x90>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b4:	4b17      	ldr	r3, [pc, #92]	; (8002214 <MX_USART3_UART_Init+0x90>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021ba:	4b16      	ldr	r3, [pc, #88]	; (8002214 <MX_USART3_UART_Init+0x90>)
 80021bc:	2200      	movs	r2, #0
 80021be:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021c0:	4b14      	ldr	r3, [pc, #80]	; (8002214 <MX_USART3_UART_Init+0x90>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021c6:	4b13      	ldr	r3, [pc, #76]	; (8002214 <MX_USART3_UART_Init+0x90>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021cc:	4811      	ldr	r0, [pc, #68]	; (8002214 <MX_USART3_UART_Init+0x90>)
 80021ce:	f006 fa48 	bl	8008662 <HAL_UART_Init>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80021d8:	f7ff fa9a 	bl	8001710 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021dc:	2100      	movs	r1, #0
 80021de:	480d      	ldr	r0, [pc, #52]	; (8002214 <MX_USART3_UART_Init+0x90>)
 80021e0:	f008 f9eb 	bl	800a5ba <HAL_UARTEx_SetTxFifoThreshold>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80021ea:	f7ff fa91 	bl	8001710 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021ee:	2100      	movs	r1, #0
 80021f0:	4808      	ldr	r0, [pc, #32]	; (8002214 <MX_USART3_UART_Init+0x90>)
 80021f2:	f008 fa20 	bl	800a636 <HAL_UARTEx_SetRxFifoThreshold>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80021fc:	f7ff fa88 	bl	8001710 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002200:	4804      	ldr	r0, [pc, #16]	; (8002214 <MX_USART3_UART_Init+0x90>)
 8002202:	f008 f9a1 	bl	800a548 <HAL_UARTEx_DisableFifoMode>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800220c:	f7ff fa80 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002210:	bf00      	nop
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000604 	.word	0x20000604
 8002218:	40004800 	.word	0x40004800

0800221c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b0a0      	sub	sp, #128	; 0x80
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002224:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002234:	f107 0318 	add.w	r3, r7, #24
 8002238:	2254      	movs	r2, #84	; 0x54
 800223a:	2100      	movs	r1, #0
 800223c:	4618      	mov	r0, r3
 800223e:	f009 f8c4 	bl	800b3ca <memset>
  if(uartHandle->Instance==USART2)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a45      	ldr	r2, [pc, #276]	; (800235c <HAL_UART_MspInit+0x140>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d13f      	bne.n	80022cc <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800224c:	2302      	movs	r3, #2
 800224e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002250:	2300      	movs	r3, #0
 8002252:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002254:	f107 0318 	add.w	r3, r7, #24
 8002258:	4618      	mov	r0, r3
 800225a:	f003 ff4f 	bl	80060fc <HAL_RCCEx_PeriphCLKConfig>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002264:	f7ff fa54 	bl	8001710 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002268:	4b3d      	ldr	r3, [pc, #244]	; (8002360 <HAL_UART_MspInit+0x144>)
 800226a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226c:	4a3c      	ldr	r2, [pc, #240]	; (8002360 <HAL_UART_MspInit+0x144>)
 800226e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002272:	6593      	str	r3, [r2, #88]	; 0x58
 8002274:	4b3a      	ldr	r3, [pc, #232]	; (8002360 <HAL_UART_MspInit+0x144>)
 8002276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002280:	4b37      	ldr	r3, [pc, #220]	; (8002360 <HAL_UART_MspInit+0x144>)
 8002282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002284:	4a36      	ldr	r2, [pc, #216]	; (8002360 <HAL_UART_MspInit+0x144>)
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800228c:	4b34      	ldr	r3, [pc, #208]	; (8002360 <HAL_UART_MspInit+0x144>)
 800228e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002298:	230c      	movs	r3, #12
 800229a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229c:	2302      	movs	r3, #2
 800229e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a4:	2300      	movs	r3, #0
 80022a6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022a8:	2307      	movs	r3, #7
 80022aa:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022b0:	4619      	mov	r1, r3
 80022b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022b6:	f002 ff49 	bl	800514c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2100      	movs	r1, #0
 80022be:	2026      	movs	r0, #38	; 0x26
 80022c0:	f002 fbea 	bl	8004a98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022c4:	2026      	movs	r0, #38	; 0x26
 80022c6:	f002 fc01 	bl	8004acc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80022ca:	e043      	b.n	8002354 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a24      	ldr	r2, [pc, #144]	; (8002364 <HAL_UART_MspInit+0x148>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d13e      	bne.n	8002354 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80022d6:	2304      	movs	r3, #4
 80022d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80022da:	2300      	movs	r3, #0
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022de:	f107 0318 	add.w	r3, r7, #24
 80022e2:	4618      	mov	r0, r3
 80022e4:	f003 ff0a 	bl	80060fc <HAL_RCCEx_PeriphCLKConfig>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 80022ee:	f7ff fa0f 	bl	8001710 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80022f2:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <HAL_UART_MspInit+0x144>)
 80022f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f6:	4a1a      	ldr	r2, [pc, #104]	; (8002360 <HAL_UART_MspInit+0x144>)
 80022f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022fc:	6593      	str	r3, [r2, #88]	; 0x58
 80022fe:	4b18      	ldr	r3, [pc, #96]	; (8002360 <HAL_UART_MspInit+0x144>)
 8002300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002302:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800230a:	4b15      	ldr	r3, [pc, #84]	; (8002360 <HAL_UART_MspInit+0x144>)
 800230c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230e:	4a14      	ldr	r2, [pc, #80]	; (8002360 <HAL_UART_MspInit+0x144>)
 8002310:	f043 0304 	orr.w	r3, r3, #4
 8002314:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002316:	4b12      	ldr	r3, [pc, #72]	; (8002360 <HAL_UART_MspInit+0x144>)
 8002318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002322:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002326:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002328:	2302      	movs	r3, #2
 800232a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002330:	2300      	movs	r3, #0
 8002332:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002334:	2307      	movs	r3, #7
 8002336:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002338:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800233c:	4619      	mov	r1, r3
 800233e:	480a      	ldr	r0, [pc, #40]	; (8002368 <HAL_UART_MspInit+0x14c>)
 8002340:	f002 ff04 	bl	800514c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002344:	2200      	movs	r2, #0
 8002346:	2100      	movs	r1, #0
 8002348:	2027      	movs	r0, #39	; 0x27
 800234a:	f002 fba5 	bl	8004a98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800234e:	2027      	movs	r0, #39	; 0x27
 8002350:	f002 fbbc 	bl	8004acc <HAL_NVIC_EnableIRQ>
}
 8002354:	bf00      	nop
 8002356:	3780      	adds	r7, #128	; 0x80
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40004400 	.word	0x40004400
 8002360:	40021000 	.word	0x40021000
 8002364:	40004800 	.word	0x40004800
 8002368:	48000800 	.word	0x48000800

0800236c <Shell_Init>:
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;
extern float Imesf;
extern float encoder_speed;
void Shell_Init(void){
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 8002370:	2224      	movs	r2, #36	; 0x24
 8002372:	2100      	movs	r1, #0
 8002374:	4816      	ldr	r0, [pc, #88]	; (80023d0 <Shell_Init+0x64>)
 8002376:	f009 f828 	bl	800b3ca <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 800237a:	2240      	movs	r2, #64	; 0x40
 800237c:	2100      	movs	r1, #0
 800237e:	4815      	ldr	r0, [pc, #84]	; (80023d4 <Shell_Init+0x68>)
 8002380:	f009 f823 	bl	800b3ca <memset>
 8002384:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <Shell_Init+0x6c>)
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 800238a:	2240      	movs	r2, #64	; 0x40
 800238c:	2100      	movs	r1, #0
 800238e:	4813      	ldr	r0, [pc, #76]	; (80023dc <Shell_Init+0x70>)
 8002390:	f009 f81b 	bl	800b3ca <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002394:	2201      	movs	r2, #1
 8002396:	4910      	ldr	r1, [pc, #64]	; (80023d8 <Shell_Init+0x6c>)
 8002398:	4811      	ldr	r0, [pc, #68]	; (80023e0 <Shell_Init+0x74>)
 800239a:	f006 fa49 	bl	8008830 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 800239e:	4811      	ldr	r0, [pc, #68]	; (80023e4 <Shell_Init+0x78>)
 80023a0:	f7fd ff9e 	bl	80002e0 <strlen>
 80023a4:	4603      	mov	r3, r0
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	f04f 33ff 	mov.w	r3, #4294967295
 80023ac:	490d      	ldr	r1, [pc, #52]	; (80023e4 <Shell_Init+0x78>)
 80023ae:	480c      	ldr	r0, [pc, #48]	; (80023e0 <Shell_Init+0x74>)
 80023b0:	f006 f9a7 	bl	8008702 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 80023b4:	480c      	ldr	r0, [pc, #48]	; (80023e8 <Shell_Init+0x7c>)
 80023b6:	f7fd ff93 	bl	80002e0 <strlen>
 80023ba:	4603      	mov	r3, r0
 80023bc:	b29a      	uxth	r2, r3
 80023be:	f04f 33ff 	mov.w	r3, #4294967295
 80023c2:	4909      	ldr	r1, [pc, #36]	; (80023e8 <Shell_Init+0x7c>)
 80023c4:	4806      	ldr	r0, [pc, #24]	; (80023e0 <Shell_Init+0x74>)
 80023c6:	f006 f99c 	bl	8008702 <HAL_UART_Transmit>
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	200007e0 	.word	0x200007e0
 80023d4:	2000079c 	.word	0x2000079c
 80023d8:	20000698 	.word	0x20000698
 80023dc:	2000069c 	.word	0x2000069c
 80023e0:	20000574 	.word	0x20000574
 80023e4:	20000020 	.word	0x20000020
 80023e8:	20000004 	.word	0x20000004
 80023ec:	00000000 	.word	0x00000000

080023f0 <Shell_Loop>:

void Shell_Loop(void){
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
	if(uartRxReceived){
 80023f6:	4b8f      	ldr	r3, [pc, #572]	; (8002634 <Shell_Loop+0x244>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d05b      	beq.n	80024b6 <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 80023fe:	4b8e      	ldr	r3, [pc, #568]	; (8002638 <Shell_Loop+0x248>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b08      	cmp	r3, #8
 8002404:	d034      	beq.n	8002470 <Shell_Loop+0x80>
 8002406:	2b0d      	cmp	r3, #13
 8002408:	d142      	bne.n	8002490 <Shell_Loop+0xa0>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 800240a:	f04f 33ff 	mov.w	r3, #4294967295
 800240e:	2203      	movs	r2, #3
 8002410:	498a      	ldr	r1, [pc, #552]	; (800263c <Shell_Loop+0x24c>)
 8002412:	488b      	ldr	r0, [pc, #556]	; (8002640 <Shell_Loop+0x250>)
 8002414:	f006 f975 	bl	8008702 <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 8002418:	4b8a      	ldr	r3, [pc, #552]	; (8002644 <Shell_Loop+0x254>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a8a      	ldr	r2, [pc, #552]	; (8002648 <Shell_Loop+0x258>)
 800241e:	2100      	movs	r1, #0
 8002420:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 8002422:	4b8a      	ldr	r3, [pc, #552]	; (800264c <Shell_Loop+0x25c>)
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 8002428:	4989      	ldr	r1, [pc, #548]	; (8002650 <Shell_Loop+0x260>)
 800242a:	4887      	ldr	r0, [pc, #540]	; (8002648 <Shell_Loop+0x258>)
 800242c:	f008 ffd6 	bl	800b3dc <strtok>
 8002430:	4603      	mov	r3, r0
 8002432:	4a88      	ldr	r2, [pc, #544]	; (8002654 <Shell_Loop+0x264>)
 8002434:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8002436:	e010      	b.n	800245a <Shell_Loop+0x6a>
				argv[argc++] = token;
 8002438:	4b84      	ldr	r3, [pc, #528]	; (800264c <Shell_Loop+0x25c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	1c5a      	adds	r2, r3, #1
 800243e:	4983      	ldr	r1, [pc, #524]	; (800264c <Shell_Loop+0x25c>)
 8002440:	600a      	str	r2, [r1, #0]
 8002442:	4a84      	ldr	r2, [pc, #528]	; (8002654 <Shell_Loop+0x264>)
 8002444:	6812      	ldr	r2, [r2, #0]
 8002446:	4984      	ldr	r1, [pc, #528]	; (8002658 <Shell_Loop+0x268>)
 8002448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 800244c:	4980      	ldr	r1, [pc, #512]	; (8002650 <Shell_Loop+0x260>)
 800244e:	2000      	movs	r0, #0
 8002450:	f008 ffc4 	bl	800b3dc <strtok>
 8002454:	4603      	mov	r3, r0
 8002456:	4a7f      	ldr	r2, [pc, #508]	; (8002654 <Shell_Loop+0x264>)
 8002458:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 800245a:	4b7e      	ldr	r3, [pc, #504]	; (8002654 <Shell_Loop+0x264>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1ea      	bne.n	8002438 <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 8002462:	4b78      	ldr	r3, [pc, #480]	; (8002644 <Shell_Loop+0x254>)
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 8002468:	4b7c      	ldr	r3, [pc, #496]	; (800265c <Shell_Loop+0x26c>)
 800246a:	2201      	movs	r2, #1
 800246c:	601a      	str	r2, [r3, #0]
			break;
 800246e:	e01f      	b.n	80024b0 <Shell_Loop+0xc0>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 8002470:	4b74      	ldr	r3, [pc, #464]	; (8002644 <Shell_Loop+0x254>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	1e5a      	subs	r2, r3, #1
 8002476:	4973      	ldr	r1, [pc, #460]	; (8002644 <Shell_Loop+0x254>)
 8002478:	600a      	str	r2, [r1, #0]
 800247a:	4a73      	ldr	r2, [pc, #460]	; (8002648 <Shell_Loop+0x258>)
 800247c:	2100      	movs	r1, #0
 800247e:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 8002480:	f04f 33ff 	mov.w	r3, #4294967295
 8002484:	2204      	movs	r2, #4
 8002486:	4976      	ldr	r1, [pc, #472]	; (8002660 <Shell_Loop+0x270>)
 8002488:	486d      	ldr	r0, [pc, #436]	; (8002640 <Shell_Loop+0x250>)
 800248a:	f006 f93a 	bl	8008702 <HAL_UART_Transmit>
			break;
 800248e:	e00f      	b.n	80024b0 <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8002490:	4b6c      	ldr	r3, [pc, #432]	; (8002644 <Shell_Loop+0x254>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	496b      	ldr	r1, [pc, #428]	; (8002644 <Shell_Loop+0x254>)
 8002498:	600a      	str	r2, [r1, #0]
 800249a:	4a67      	ldr	r2, [pc, #412]	; (8002638 <Shell_Loop+0x248>)
 800249c:	7811      	ldrb	r1, [r2, #0]
 800249e:	4a6a      	ldr	r2, [pc, #424]	; (8002648 <Shell_Loop+0x258>)
 80024a0:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80024a2:	f04f 33ff 	mov.w	r3, #4294967295
 80024a6:	2201      	movs	r2, #1
 80024a8:	4963      	ldr	r1, [pc, #396]	; (8002638 <Shell_Loop+0x248>)
 80024aa:	4865      	ldr	r0, [pc, #404]	; (8002640 <Shell_Loop+0x250>)
 80024ac:	f006 f929 	bl	8008702 <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 80024b0:	4b60      	ldr	r3, [pc, #384]	; (8002634 <Shell_Loop+0x244>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 80024b6:	4b69      	ldr	r3, [pc, #420]	; (800265c <Shell_Loop+0x26c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 8198 	beq.w	80027f0 <Shell_Loop+0x400>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 80024c0:	4b65      	ldr	r3, [pc, #404]	; (8002658 <Shell_Loop+0x268>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4967      	ldr	r1, [pc, #412]	; (8002664 <Shell_Loop+0x274>)
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fd feaa 	bl	8000220 <strcmp>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d107      	bne.n	80024e2 <Shell_Loop+0xf2>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 80024d2:	f04f 33ff 	mov.w	r3, #4294967295
 80024d6:	221a      	movs	r2, #26
 80024d8:	4963      	ldr	r1, [pc, #396]	; (8002668 <Shell_Loop+0x278>)
 80024da:	4859      	ldr	r0, [pc, #356]	; (8002640 <Shell_Loop+0x250>)
 80024dc:	f006 f911 	bl	8008702 <HAL_UART_Transmit>
 80024e0:	e17c      	b.n	80027dc <Shell_Loop+0x3ec>
		}
		else if(strcmp(argv[0],"help")==0){
 80024e2:	4b5d      	ldr	r3, [pc, #372]	; (8002658 <Shell_Loop+0x268>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4961      	ldr	r1, [pc, #388]	; (800266c <Shell_Loop+0x27c>)
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fd fe99 	bl	8000220 <strcmp>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10e      	bne.n	8002512 <Shell_Loop+0x122>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE,
 80024f4:	4a5e      	ldr	r2, [pc, #376]	; (8002670 <Shell_Loop+0x280>)
 80024f6:	2140      	movs	r1, #64	; 0x40
 80024f8:	485e      	ldr	r0, [pc, #376]	; (8002674 <Shell_Loop+0x284>)
 80024fa:	f008 fecf 	bl	800b29c <sniprintf>
 80024fe:	6078      	str	r0, [r7, #4]
					"\r\n start"
					"\r\n stop"
					"\r\n adc"
					"\r\n adc_dma"
					"\r\n encoder");
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	b29a      	uxth	r2, r3
 8002504:	f04f 33ff 	mov.w	r3, #4294967295
 8002508:	495a      	ldr	r1, [pc, #360]	; (8002674 <Shell_Loop+0x284>)
 800250a:	484d      	ldr	r0, [pc, #308]	; (8002640 <Shell_Loop+0x250>)
 800250c:	f006 f8f9 	bl	8008702 <HAL_UART_Transmit>
 8002510:	e164      	b.n	80027dc <Shell_Loop+0x3ec>
		}
		else if(strcmp(argv[0],"speed")==0){
 8002512:	4b51      	ldr	r3, [pc, #324]	; (8002658 <Shell_Loop+0x268>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4958      	ldr	r1, [pc, #352]	; (8002678 <Shell_Loop+0x288>)
 8002518:	4618      	mov	r0, r3
 800251a:	f7fd fe81 	bl	8000220 <strcmp>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d142      	bne.n	80025aa <Shell_Loop+0x1ba>
			float speedVal=atoi(argv[1]);
 8002524:	4b4c      	ldr	r3, [pc, #304]	; (8002658 <Shell_Loop+0x268>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	4618      	mov	r0, r3
 800252a:	f008 f911 	bl	800a750 <atoi>
 800252e:	ee07 0a90 	vmov	s15, r0
 8002532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002536:	edc7 7a05 	vstr	s15, [r7, #20]
			if (speedVal> PWM_MAX){
 800253a:	edd7 7a05 	vldr	s15, [r7, #20]
 800253e:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800267c <Shell_Loop+0x28c>
 8002542:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254a:	dd01      	ble.n	8002550 <Shell_Loop+0x160>
				speedVal=PWM_MAX;
 800254c:	4b4c      	ldr	r3, [pc, #304]	; (8002680 <Shell_Loop+0x290>)
 800254e:	617b      	str	r3, [r7, #20]
			}
			if (speedVal< PWM_MIN){
 8002550:	edd7 7a05 	vldr	s15, [r7, #20]
 8002554:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255c:	d502      	bpl.n	8002564 <Shell_Loop+0x174>
				speedVal=PWM_MIN;
 800255e:	f04f 0300 	mov.w	r3, #0
 8002562:	617b      	str	r3, [r7, #20]
			}

			speedVal=(DUTY_MAX*speedVal)/100; //PWM en pourcentage
 8002564:	edd7 7a05 	vldr	s15, [r7, #20]
 8002568:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002684 <Shell_Loop+0x294>
 800256c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002570:	eddf 6a42 	vldr	s13, [pc, #264]	; 800267c <Shell_Loop+0x28c>
 8002574:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002578:	edc7 7a05 	vstr	s15, [r7, #20]
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,speedVal);
 800257c:	4b42      	ldr	r3, [pc, #264]	; (8002688 <Shell_Loop+0x298>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	edd7 7a05 	vldr	s15, [r7, #20]
 8002584:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002588:	ee17 2a90 	vmov	r2, s15
 800258c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,DUTY_MAX - speedVal);
 800258e:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002684 <Shell_Loop+0x294>
 8002592:	edd7 7a05 	vldr	s15, [r7, #20]
 8002596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800259a:	4b3b      	ldr	r3, [pc, #236]	; (8002688 <Shell_Loop+0x298>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025a2:	ee17 2a90 	vmov	r2, s15
 80025a6:	639a      	str	r2, [r3, #56]	; 0x38
 80025a8:	e118      	b.n	80027dc <Shell_Loop+0x3ec>
		/*
		 * start -> Activation des PWM avec un rapport cyclique de 50%
		 * stop  -> Désactivation des PWM
		 * adc   -> On affiche la mesure du courant
		 */
		else if(strcmp(argv[0],"start")==0){
 80025aa:	4b2b      	ldr	r3, [pc, #172]	; (8002658 <Shell_Loop+0x268>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4937      	ldr	r1, [pc, #220]	; (800268c <Shell_Loop+0x29c>)
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fd fe35 	bl	8000220 <strcmp>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d121      	bne.n	8002600 <Shell_Loop+0x210>

			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,0.5*DUTY_MAX);
 80025bc:	4b32      	ldr	r3, [pc, #200]	; (8002688 <Shell_Loop+0x298>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f640 024d 	movw	r2, #2125	; 0x84d
 80025c4:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,0.5*DUTY_MAX);
 80025c6:	4b30      	ldr	r3, [pc, #192]	; (8002688 <Shell_Loop+0x298>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f640 024d 	movw	r2, #2125	; 0x84d
 80025ce:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80025d0:	2100      	movs	r1, #0
 80025d2:	482d      	ldr	r0, [pc, #180]	; (8002688 <Shell_Loop+0x298>)
 80025d4:	f004 f908 	bl	80067e8 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80025d8:	2100      	movs	r1, #0
 80025da:	482b      	ldr	r0, [pc, #172]	; (8002688 <Shell_Loop+0x298>)
 80025dc:	f005 fd6e 	bl	80080bc <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80025e0:	2104      	movs	r1, #4
 80025e2:	4829      	ldr	r0, [pc, #164]	; (8002688 <Shell_Loop+0x298>)
 80025e4:	f004 f900 	bl	80067e8 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80025e8:	2104      	movs	r1, #4
 80025ea:	4827      	ldr	r0, [pc, #156]	; (8002688 <Shell_Loop+0x298>)
 80025ec:	f005 fd66 	bl	80080bc <HAL_TIMEx_PWMN_Start>
			HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80025f0:	213c      	movs	r1, #60	; 0x3c
 80025f2:	4827      	ldr	r0, [pc, #156]	; (8002690 <Shell_Loop+0x2a0>)
 80025f4:	f004 fb4c 	bl	8006c90 <HAL_TIM_Encoder_Start>
			HAL_TIM_Base_Start_IT(&htim5);
 80025f8:	4826      	ldr	r0, [pc, #152]	; (8002694 <Shell_Loop+0x2a4>)
 80025fa:	f004 f825 	bl	8006648 <HAL_TIM_Base_Start_IT>
 80025fe:	e0ed      	b.n	80027dc <Shell_Loop+0x3ec>

		}
		else if(strcmp(argv[0],"stop")==0){
 8002600:	4b15      	ldr	r3, [pc, #84]	; (8002658 <Shell_Loop+0x268>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4924      	ldr	r1, [pc, #144]	; (8002698 <Shell_Loop+0x2a8>)
 8002606:	4618      	mov	r0, r3
 8002608:	f7fd fe0a 	bl	8000220 <strcmp>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d144      	bne.n	800269c <Shell_Loop+0x2ac>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002612:	2100      	movs	r1, #0
 8002614:	481c      	ldr	r0, [pc, #112]	; (8002688 <Shell_Loop+0x298>)
 8002616:	f004 f9f9 	bl	8006a0c <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800261a:	2100      	movs	r1, #0
 800261c:	481a      	ldr	r0, [pc, #104]	; (8002688 <Shell_Loop+0x298>)
 800261e:	f005 fe0f 	bl	8008240 <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8002622:	2104      	movs	r1, #4
 8002624:	4818      	ldr	r0, [pc, #96]	; (8002688 <Shell_Loop+0x298>)
 8002626:	f004 f9f1 	bl	8006a0c <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 800262a:	2104      	movs	r1, #4
 800262c:	4816      	ldr	r0, [pc, #88]	; (8002688 <Shell_Loop+0x298>)
 800262e:	f005 fe07 	bl	8008240 <HAL_TIMEx_PWMN_Stop>
 8002632:	e0d3      	b.n	80027dc <Shell_Loop+0x3ec>
 8002634:	20000694 	.word	0x20000694
 8002638:	20000698 	.word	0x20000698
 800263c:	20000088 	.word	0x20000088
 8002640:	20000574 	.word	0x20000574
 8002644:	200007dc 	.word	0x200007dc
 8002648:	2000079c 	.word	0x2000079c
 800264c:	20000804 	.word	0x20000804
 8002650:	0800d690 	.word	0x0800d690
 8002654:	20000808 	.word	0x20000808
 8002658:	200007e0 	.word	0x200007e0
 800265c:	2000080c 	.word	0x2000080c
 8002660:	2000008c 	.word	0x2000008c
 8002664:	0800d694 	.word	0x0800d694
 8002668:	200000a4 	.word	0x200000a4
 800266c:	0800d6a4 	.word	0x0800d6a4
 8002670:	0800d6ac 	.word	0x0800d6ac
 8002674:	2000069c 	.word	0x2000069c
 8002678:	0800d6dc 	.word	0x0800d6dc
 800267c:	42c80000 	.word	0x42c80000
 8002680:	42c80000 	.word	0x42c80000
 8002684:	4584d000 	.word	0x4584d000
 8002688:	20000444 	.word	0x20000444
 800268c:	0800d6e4 	.word	0x0800d6e4
 8002690:	200004dc 	.word	0x200004dc
 8002694:	20000528 	.word	0x20000528
 8002698:	0800d6ec 	.word	0x0800d6ec
		/* Par polling
		 * Commande "adc" qui permet de mesurer le courant
		 * valueADC est la valeur qu'on récupère de l'ADC
		 * valueCurrent -> Variable qui correspond à la valeur du courant
		 */
		else if(strcmp(argv[0],"adc")==0){
 800269c:	4b5c      	ldr	r3, [pc, #368]	; (8002810 <Shell_Loop+0x420>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	495c      	ldr	r1, [pc, #368]	; (8002814 <Shell_Loop+0x424>)
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fd fdbc 	bl	8000220 <strcmp>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d14f      	bne.n	800274e <Shell_Loop+0x35e>
			HAL_ADC_Start(&hadc1);
 80026ae:	485a      	ldr	r0, [pc, #360]	; (8002818 <Shell_Loop+0x428>)
 80026b0:	f000 fd72 	bl	8003198 <HAL_ADC_Start>
			uint16_t valueADC;
			valueADC= HAL_ADC_GetValue(&hadc1);
 80026b4:	4858      	ldr	r0, [pc, #352]	; (8002818 <Shell_Loop+0x428>)
 80026b6:	f000 ff27 	bl	8003508 <HAL_ADC_GetValue>
 80026ba:	4603      	mov	r3, r0
 80026bc:	827b      	strh	r3, [r7, #18]
			float us_ADC, valueCurrent ;
			us_ADC = (valueADC/4096.0)*3.3;
 80026be:	8a7b      	ldrh	r3, [r7, #18]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fd ff67 	bl	8000594 <__aeabi_i2d>
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	4b54      	ldr	r3, [pc, #336]	; (800281c <Shell_Loop+0x42c>)
 80026cc:	f7fe f8f6 	bl	80008bc <__aeabi_ddiv>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4610      	mov	r0, r2
 80026d6:	4619      	mov	r1, r3
 80026d8:	a347      	add	r3, pc, #284	; (adr r3, 80027f8 <Shell_Loop+0x408>)
 80026da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026de:	f7fd ffc3 	bl	8000668 <__aeabi_dmul>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	4610      	mov	r0, r2
 80026e8:	4619      	mov	r1, r3
 80026ea:	f7fe fa95 	bl	8000c18 <__aeabi_d2f>
 80026ee:	4603      	mov	r3, r0
 80026f0:	60fb      	str	r3, [r7, #12]
			valueCurrent = (us_ADC-1.65)/0.05;
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f7fd ff60 	bl	80005b8 <__aeabi_f2d>
 80026f8:	a341      	add	r3, pc, #260	; (adr r3, 8002800 <Shell_Loop+0x410>)
 80026fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fe:	f7fd fdfb 	bl	80002f8 <__aeabi_dsub>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	4610      	mov	r0, r2
 8002708:	4619      	mov	r1, r3
 800270a:	a33f      	add	r3, pc, #252	; (adr r3, 8002808 <Shell_Loop+0x418>)
 800270c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002710:	f7fe f8d4 	bl	80008bc <__aeabi_ddiv>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4610      	mov	r0, r2
 800271a:	4619      	mov	r1, r3
 800271c:	f7fe fa7c 	bl	8000c18 <__aeabi_d2f>
 8002720:	4603      	mov	r3, r0
 8002722:	60bb      	str	r3, [r7, #8]
			sprintf(adc, "Courant : %f A\r\n", valueCurrent);
 8002724:	68b8      	ldr	r0, [r7, #8]
 8002726:	f7fd ff47 	bl	80005b8 <__aeabi_f2d>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	493c      	ldr	r1, [pc, #240]	; (8002820 <Shell_Loop+0x430>)
 8002730:	483c      	ldr	r0, [pc, #240]	; (8002824 <Shell_Loop+0x434>)
 8002732:	f008 fde7 	bl	800b304 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)adc,strlen(adc),HAL_MAX_DELAY);
 8002736:	483b      	ldr	r0, [pc, #236]	; (8002824 <Shell_Loop+0x434>)
 8002738:	f7fd fdd2 	bl	80002e0 <strlen>
 800273c:	4603      	mov	r3, r0
 800273e:	b29a      	uxth	r2, r3
 8002740:	f04f 33ff 	mov.w	r3, #4294967295
 8002744:	4937      	ldr	r1, [pc, #220]	; (8002824 <Shell_Loop+0x434>)
 8002746:	4838      	ldr	r0, [pc, #224]	; (8002828 <Shell_Loop+0x438>)
 8002748:	f005 ffdb 	bl	8008702 <HAL_UART_Transmit>
 800274c:	e046      	b.n	80027dc <Shell_Loop+0x3ec>
		}
		else if(strcmp(argv[0],"adc_dma")==0){
 800274e:	4b30      	ldr	r3, [pc, #192]	; (8002810 <Shell_Loop+0x420>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4936      	ldr	r1, [pc, #216]	; (800282c <Shell_Loop+0x43c>)
 8002754:	4618      	mov	r0, r3
 8002756:	f7fd fd63 	bl	8000220 <strcmp>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d116      	bne.n	800278e <Shell_Loop+0x39e>

			sprintf(adc_dma, "Courant : %f A\r\n", Imesf);
 8002760:	4b33      	ldr	r3, [pc, #204]	; (8002830 <Shell_Loop+0x440>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f7fd ff27 	bl	80005b8 <__aeabi_f2d>
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	492c      	ldr	r1, [pc, #176]	; (8002820 <Shell_Loop+0x430>)
 8002770:	4830      	ldr	r0, [pc, #192]	; (8002834 <Shell_Loop+0x444>)
 8002772:	f008 fdc7 	bl	800b304 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)adc_dma,strlen(adc_dma),HAL_MAX_DELAY);
 8002776:	482f      	ldr	r0, [pc, #188]	; (8002834 <Shell_Loop+0x444>)
 8002778:	f7fd fdb2 	bl	80002e0 <strlen>
 800277c:	4603      	mov	r3, r0
 800277e:	b29a      	uxth	r2, r3
 8002780:	f04f 33ff 	mov.w	r3, #4294967295
 8002784:	492b      	ldr	r1, [pc, #172]	; (8002834 <Shell_Loop+0x444>)
 8002786:	4828      	ldr	r0, [pc, #160]	; (8002828 <Shell_Loop+0x438>)
 8002788:	f005 ffbb 	bl	8008702 <HAL_UART_Transmit>
 800278c:	e026      	b.n	80027dc <Shell_Loop+0x3ec>
		}
		else if(strcmp(argv[0],"encoder")==0){
 800278e:	4b20      	ldr	r3, [pc, #128]	; (8002810 <Shell_Loop+0x420>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4929      	ldr	r1, [pc, #164]	; (8002838 <Shell_Loop+0x448>)
 8002794:	4618      	mov	r0, r3
 8002796:	f7fd fd43 	bl	8000220 <strcmp>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d116      	bne.n	80027ce <Shell_Loop+0x3de>

			sprintf(encoder, "Vitesse : %f tr/s\r\n", encoder_speed);
 80027a0:	4b26      	ldr	r3, [pc, #152]	; (800283c <Shell_Loop+0x44c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fd ff07 	bl	80005b8 <__aeabi_f2d>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4924      	ldr	r1, [pc, #144]	; (8002840 <Shell_Loop+0x450>)
 80027b0:	4824      	ldr	r0, [pc, #144]	; (8002844 <Shell_Loop+0x454>)
 80027b2:	f008 fda7 	bl	800b304 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)encoder,strlen(encoder),HAL_MAX_DELAY);
 80027b6:	4823      	ldr	r0, [pc, #140]	; (8002844 <Shell_Loop+0x454>)
 80027b8:	f7fd fd92 	bl	80002e0 <strlen>
 80027bc:	4603      	mov	r3, r0
 80027be:	b29a      	uxth	r2, r3
 80027c0:	f04f 33ff 	mov.w	r3, #4294967295
 80027c4:	491f      	ldr	r1, [pc, #124]	; (8002844 <Shell_Loop+0x454>)
 80027c6:	4818      	ldr	r0, [pc, #96]	; (8002828 <Shell_Loop+0x438>)
 80027c8:	f005 ff9b 	bl	8008702 <HAL_UART_Transmit>
 80027cc:	e006      	b.n	80027dc <Shell_Loop+0x3ec>
		}

		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80027ce:	f04f 33ff 	mov.w	r3, #4294967295
 80027d2:	2214      	movs	r2, #20
 80027d4:	491c      	ldr	r1, [pc, #112]	; (8002848 <Shell_Loop+0x458>)
 80027d6:	4814      	ldr	r0, [pc, #80]	; (8002828 <Shell_Loop+0x438>)
 80027d8:	f005 ff93 	bl	8008702 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80027dc:	f04f 33ff 	mov.w	r3, #4294967295
 80027e0:	221c      	movs	r2, #28
 80027e2:	491a      	ldr	r1, [pc, #104]	; (800284c <Shell_Loop+0x45c>)
 80027e4:	4810      	ldr	r0, [pc, #64]	; (8002828 <Shell_Loop+0x438>)
 80027e6:	f005 ff8c 	bl	8008702 <HAL_UART_Transmit>
		newCmdReady = 0;
 80027ea:	4b19      	ldr	r3, [pc, #100]	; (8002850 <Shell_Loop+0x460>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
	}
}
 80027f0:	bf00      	nop
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	66666666 	.word	0x66666666
 80027fc:	400a6666 	.word	0x400a6666
 8002800:	66666666 	.word	0x66666666
 8002804:	3ffa6666 	.word	0x3ffa6666
 8002808:	9999999a 	.word	0x9999999a
 800280c:	3fa99999 	.word	0x3fa99999
 8002810:	200007e0 	.word	0x200007e0
 8002814:	0800d6f4 	.word	0x0800d6f4
 8002818:	200002ac 	.word	0x200002ac
 800281c:	40b00000 	.word	0x40b00000
 8002820:	0800d6f8 	.word	0x0800d6f8
 8002824:	200006dc 	.word	0x200006dc
 8002828:	20000574 	.word	0x20000574
 800282c:	0800d70c 	.word	0x0800d70c
 8002830:	200003e8 	.word	0x200003e8
 8002834:	2000071c 	.word	0x2000071c
 8002838:	0800d714 	.word	0x0800d714
 800283c:	200003ec 	.word	0x200003ec
 8002840:	0800d71c 	.word	0x0800d71c
 8002844:	2000075c 	.word	0x2000075c
 8002848:	20000090 	.word	0x20000090
 800284c:	20000004 	.word	0x20000004
 8002850:	2000080c 	.word	0x2000080c

08002854 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <HAL_UART_RxCpltCallback+0x20>)
 800285e:	2201      	movs	r2, #1
 8002860:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002862:	2201      	movs	r2, #1
 8002864:	4904      	ldr	r1, [pc, #16]	; (8002878 <HAL_UART_RxCpltCallback+0x24>)
 8002866:	4805      	ldr	r0, [pc, #20]	; (800287c <HAL_UART_RxCpltCallback+0x28>)
 8002868:	f005 ffe2 	bl	8008830 <HAL_UART_Receive_IT>
}
 800286c:	bf00      	nop
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20000694 	.word	0x20000694
 8002878:	20000698 	.word	0x20000698
 800287c:	20000574 	.word	0x20000574

08002880 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002880:	480d      	ldr	r0, [pc, #52]	; (80028b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002882:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002884:	480d      	ldr	r0, [pc, #52]	; (80028bc <LoopForever+0x6>)
  ldr r1, =_edata
 8002886:	490e      	ldr	r1, [pc, #56]	; (80028c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002888:	4a0e      	ldr	r2, [pc, #56]	; (80028c4 <LoopForever+0xe>)
  movs r3, #0
 800288a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800288c:	e002      	b.n	8002894 <LoopCopyDataInit>

0800288e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800288e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002892:	3304      	adds	r3, #4

08002894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002898:	d3f9      	bcc.n	800288e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800289a:	4a0b      	ldr	r2, [pc, #44]	; (80028c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800289c:	4c0b      	ldr	r4, [pc, #44]	; (80028cc <LoopForever+0x16>)
  movs r3, #0
 800289e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028a0:	e001      	b.n	80028a6 <LoopFillZerobss>

080028a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028a4:	3204      	adds	r2, #4

080028a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028a8:	d3fb      	bcc.n	80028a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80028aa:	f7ff f915 	bl	8001ad8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028ae:	f008 fe41 	bl	800b534 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028b2:	f7fe fe53 	bl	800155c <main>

080028b6 <LoopForever>:

LoopForever:
    b LoopForever
 80028b6:	e7fe      	b.n	80028b6 <LoopForever>
  ldr   r0, =_estack
 80028b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028c0:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 80028c4:	0800db50 	.word	0x0800db50
  ldr r2, =_sbss
 80028c8:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 80028cc:	20000960 	.word	0x20000960

080028d0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028d0:	e7fe      	b.n	80028d0 <ADC3_IRQHandler>

080028d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028dc:	2003      	movs	r0, #3
 80028de:	f002 f8d0 	bl	8004a82 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028e2:	200f      	movs	r0, #15
 80028e4:	f7fe ff3e 	bl	8001764 <HAL_InitTick>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d002      	beq.n	80028f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	71fb      	strb	r3, [r7, #7]
 80028f2:	e001      	b.n	80028f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028f4:	f7fe ff12 	bl	800171c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028f8:	79fb      	ldrb	r3, [r7, #7]

}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002908:	4b05      	ldr	r3, [pc, #20]	; (8002920 <HAL_IncTick+0x1c>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4b05      	ldr	r3, [pc, #20]	; (8002924 <HAL_IncTick+0x20>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4413      	add	r3, r2
 8002912:	4a03      	ldr	r2, [pc, #12]	; (8002920 <HAL_IncTick+0x1c>)
 8002914:	6013      	str	r3, [r2, #0]
}
 8002916:	bf00      	nop
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	20000810 	.word	0x20000810
 8002924:	200000c4 	.word	0x200000c4

08002928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  return uwTick;
 800292c:	4b03      	ldr	r3, [pc, #12]	; (800293c <HAL_GetTick+0x14>)
 800292e:	681b      	ldr	r3, [r3, #0]
}
 8002930:	4618      	mov	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	20000810 	.word	0x20000810

08002940 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	431a      	orrs	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	609a      	str	r2, [r3, #8]
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
 800296e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	609a      	str	r2, [r3, #8]
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800299c:	4618      	mov	r0, r3
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
 80029b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	3360      	adds	r3, #96	; 0x60
 80029ba:	461a      	mov	r2, r3
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	4b08      	ldr	r3, [pc, #32]	; (80029ec <LL_ADC_SetOffset+0x44>)
 80029ca:	4013      	ands	r3, r2
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80029e0:	bf00      	nop
 80029e2:	371c      	adds	r7, #28
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	03fff000 	.word	0x03fff000

080029f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	3360      	adds	r3, #96	; 0x60
 80029fe:	461a      	mov	r2, r3
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b087      	sub	sp, #28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	3360      	adds	r3, #96	; 0x60
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	431a      	orrs	r2, r3
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002a46:	bf00      	nop
 8002a48:	371c      	adds	r7, #28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b087      	sub	sp, #28
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	3360      	adds	r3, #96	; 0x60
 8002a62:	461a      	mov	r2, r3
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	431a      	orrs	r2, r3
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002a7c:	bf00      	nop
 8002a7e:	371c      	adds	r7, #28
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b087      	sub	sp, #28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	3360      	adds	r3, #96	; 0x60
 8002a98:	461a      	mov	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	431a      	orrs	r2, r3
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002ab2:	bf00      	nop
 8002ab4:	371c      	adds	r7, #28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	615a      	str	r2, [r3, #20]
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002af8:	2301      	movs	r3, #1
 8002afa:	e000      	b.n	8002afe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b087      	sub	sp, #28
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	3330      	adds	r3, #48	; 0x30
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	0a1b      	lsrs	r3, r3, #8
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	f003 030c 	and.w	r3, r3, #12
 8002b26:	4413      	add	r3, r2
 8002b28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	f003 031f 	and.w	r3, r3, #31
 8002b34:	211f      	movs	r1, #31
 8002b36:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	401a      	ands	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	0e9b      	lsrs	r3, r3, #26
 8002b42:	f003 011f 	and.w	r1, r3, #31
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	f003 031f 	and.w	r3, r3, #31
 8002b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b50:	431a      	orrs	r2, r3
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b56:	bf00      	nop
 8002b58:	371c      	adds	r7, #28
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b087      	sub	sp, #28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	3314      	adds	r3, #20
 8002b98:	461a      	mov	r2, r3
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	0e5b      	lsrs	r3, r3, #25
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	4413      	add	r3, r2
 8002ba6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	0d1b      	lsrs	r3, r3, #20
 8002bb0:	f003 031f 	and.w	r3, r3, #31
 8002bb4:	2107      	movs	r1, #7
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	401a      	ands	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	0d1b      	lsrs	r3, r3, #20
 8002bc2:	f003 031f 	and.w	r3, r3, #31
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002bd2:	bf00      	nop
 8002bd4:	371c      	adds	r7, #28
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
	...

08002be0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a0f      	ldr	r2, [pc, #60]	; (8002c2c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d10a      	bne.n	8002c0a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c00:	431a      	orrs	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002c08:	e00a      	b.n	8002c20 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c16:	43db      	mvns	r3, r3
 8002c18:	401a      	ands	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002c20:	bf00      	nop
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	407f0000 	.word	0x407f0000

08002c30 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 031f 	and.w	r3, r3, #31
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002c78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6093      	str	r3, [r2, #8]
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ca0:	d101      	bne.n	8002ca6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002cc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cc8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cf0:	d101      	bne.n	8002cf6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d18:	f043 0201 	orr.w	r2, r3, #1
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d40:	f043 0202 	orr.w	r2, r3, #2
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d101      	bne.n	8002d6c <LL_ADC_IsEnabled+0x18>
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <LL_ADC_IsEnabled+0x1a>
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d101      	bne.n	8002d92 <LL_ADC_IsDisableOngoing+0x18>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <LL_ADC_IsDisableOngoing+0x1a>
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002db0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002db4:	f043 0204 	orr.w	r2, r3, #4
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d101      	bne.n	8002de0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e000      	b.n	8002de2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d101      	bne.n	8002e06 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e02:	2301      	movs	r3, #1
 8002e04:	e000      	b.n	8002e08 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e14:	b590      	push	{r4, r7, lr}
 8002e16:	b089      	sub	sp, #36	; 0x24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e1af      	b.n	800318e <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d109      	bne.n	8002e50 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7fe f999 	bl	8001174 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff ff19 	bl	8002c8c <LL_ADC_IsDeepPowerDownEnabled>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d004      	beq.n	8002e6a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff feff 	bl	8002c68 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff ff34 	bl	8002cdc <LL_ADC_IsInternalRegulatorEnabled>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d115      	bne.n	8002ea6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff ff18 	bl	8002cb4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e84:	4b9f      	ldr	r3, [pc, #636]	; (8003104 <HAL_ADC_Init+0x2f0>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	099b      	lsrs	r3, r3, #6
 8002e8a:	4a9f      	ldr	r2, [pc, #636]	; (8003108 <HAL_ADC_Init+0x2f4>)
 8002e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e90:	099b      	lsrs	r3, r3, #6
 8002e92:	3301      	adds	r3, #1
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e98:	e002      	b.n	8002ea0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f9      	bne.n	8002e9a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff ff16 	bl	8002cdc <LL_ADC_IsInternalRegulatorEnabled>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10d      	bne.n	8002ed2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eba:	f043 0210 	orr.w	r2, r3, #16
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec6:	f043 0201 	orr.w	r2, r3, #1
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff ff76 	bl	8002dc8 <LL_ADC_REG_IsConversionOngoing>
 8002edc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee2:	f003 0310 	and.w	r3, r3, #16
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f040 8148 	bne.w	800317c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f040 8144 	bne.w	800317c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002efc:	f043 0202 	orr.w	r2, r3, #2
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff ff23 	bl	8002d54 <LL_ADC_IsEnabled>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d141      	bne.n	8002f98 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f1c:	d004      	beq.n	8002f28 <HAL_ADC_Init+0x114>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a7a      	ldr	r2, [pc, #488]	; (800310c <HAL_ADC_Init+0x2f8>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d10f      	bne.n	8002f48 <HAL_ADC_Init+0x134>
 8002f28:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002f2c:	f7ff ff12 	bl	8002d54 <LL_ADC_IsEnabled>
 8002f30:	4604      	mov	r4, r0
 8002f32:	4876      	ldr	r0, [pc, #472]	; (800310c <HAL_ADC_Init+0x2f8>)
 8002f34:	f7ff ff0e 	bl	8002d54 <LL_ADC_IsEnabled>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	4323      	orrs	r3, r4
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	bf0c      	ite	eq
 8002f40:	2301      	moveq	r3, #1
 8002f42:	2300      	movne	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	e012      	b.n	8002f6e <HAL_ADC_Init+0x15a>
 8002f48:	4871      	ldr	r0, [pc, #452]	; (8003110 <HAL_ADC_Init+0x2fc>)
 8002f4a:	f7ff ff03 	bl	8002d54 <LL_ADC_IsEnabled>
 8002f4e:	4604      	mov	r4, r0
 8002f50:	4870      	ldr	r0, [pc, #448]	; (8003114 <HAL_ADC_Init+0x300>)
 8002f52:	f7ff feff 	bl	8002d54 <LL_ADC_IsEnabled>
 8002f56:	4603      	mov	r3, r0
 8002f58:	431c      	orrs	r4, r3
 8002f5a:	486f      	ldr	r0, [pc, #444]	; (8003118 <HAL_ADC_Init+0x304>)
 8002f5c:	f7ff fefa 	bl	8002d54 <LL_ADC_IsEnabled>
 8002f60:	4603      	mov	r3, r0
 8002f62:	4323      	orrs	r3, r4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	bf0c      	ite	eq
 8002f68:	2301      	moveq	r3, #1
 8002f6a:	2300      	movne	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d012      	beq.n	8002f98 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f7a:	d004      	beq.n	8002f86 <HAL_ADC_Init+0x172>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a62      	ldr	r2, [pc, #392]	; (800310c <HAL_ADC_Init+0x2f8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d101      	bne.n	8002f8a <HAL_ADC_Init+0x176>
 8002f86:	4a65      	ldr	r2, [pc, #404]	; (800311c <HAL_ADC_Init+0x308>)
 8002f88:	e000      	b.n	8002f8c <HAL_ADC_Init+0x178>
 8002f8a:	4a65      	ldr	r2, [pc, #404]	; (8003120 <HAL_ADC_Init+0x30c>)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	4619      	mov	r1, r3
 8002f92:	4610      	mov	r0, r2
 8002f94:	f7ff fcd4 	bl	8002940 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	7f5b      	ldrb	r3, [r3, #29]
 8002f9c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fa2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002fa8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002fae:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fb6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d106      	bne.n	8002fd4 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	045b      	lsls	r3, r3, #17
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d009      	beq.n	8002ff0 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	4b4b      	ldr	r3, [pc, #300]	; (8003124 <HAL_ADC_Init+0x310>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6812      	ldr	r2, [r2, #0]
 8002ffe:	69b9      	ldr	r1, [r7, #24]
 8003000:	430b      	orrs	r3, r1
 8003002:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff fed2 	bl	8002dc8 <LL_ADC_REG_IsConversionOngoing>
 8003024:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff fedf 	bl	8002dee <LL_ADC_INJ_IsConversionOngoing>
 8003030:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d17f      	bne.n	8003138 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d17c      	bne.n	8003138 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003042:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800304a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800304c:	4313      	orrs	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800305a:	f023 0302 	bic.w	r3, r3, #2
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6812      	ldr	r2, [r2, #0]
 8003062:	69b9      	ldr	r1, [r7, #24]
 8003064:	430b      	orrs	r3, r1
 8003066:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d017      	beq.n	80030a0 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691a      	ldr	r2, [r3, #16]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800307e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003088:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800308c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6911      	ldr	r1, [r2, #16]
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6812      	ldr	r2, [r2, #0]
 8003098:	430b      	orrs	r3, r1
 800309a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800309e:	e013      	b.n	80030c8 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	691a      	ldr	r2, [r3, #16]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80030ae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6812      	ldr	r2, [r2, #0]
 80030bc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80030c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030c4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d12a      	bne.n	8003128 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80030dc:	f023 0304 	bic.w	r3, r3, #4
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80030e8:	4311      	orrs	r1, r2
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80030ee:	4311      	orrs	r1, r2
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80030f4:	430a      	orrs	r2, r1
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f042 0201 	orr.w	r2, r2, #1
 8003100:	611a      	str	r2, [r3, #16]
 8003102:	e019      	b.n	8003138 <HAL_ADC_Init+0x324>
 8003104:	20000000 	.word	0x20000000
 8003108:	053e2d63 	.word	0x053e2d63
 800310c:	50000100 	.word	0x50000100
 8003110:	50000400 	.word	0x50000400
 8003114:	50000500 	.word	0x50000500
 8003118:	50000600 	.word	0x50000600
 800311c:	50000300 	.word	0x50000300
 8003120:	50000700 	.word	0x50000700
 8003124:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691a      	ldr	r2, [r3, #16]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 0201 	bic.w	r2, r2, #1
 8003136:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d10c      	bne.n	800315a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	f023 010f 	bic.w	r1, r3, #15
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	1e5a      	subs	r2, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	631a      	str	r2, [r3, #48]	; 0x30
 8003158:	e007      	b.n	800316a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 020f 	bic.w	r2, r2, #15
 8003168:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316e:	f023 0303 	bic.w	r3, r3, #3
 8003172:	f043 0201 	orr.w	r2, r3, #1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	65da      	str	r2, [r3, #92]	; 0x5c
 800317a:	e007      	b.n	800318c <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003180:	f043 0210 	orr.w	r2, r3, #16
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800318c:	7ffb      	ldrb	r3, [r7, #31]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3724      	adds	r7, #36	; 0x24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd90      	pop	{r4, r7, pc}
 8003196:	bf00      	nop

08003198 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031a8:	d004      	beq.n	80031b4 <HAL_ADC_Start+0x1c>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a67      	ldr	r2, [pc, #412]	; (800334c <HAL_ADC_Start+0x1b4>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d101      	bne.n	80031b8 <HAL_ADC_Start+0x20>
 80031b4:	4b66      	ldr	r3, [pc, #408]	; (8003350 <HAL_ADC_Start+0x1b8>)
 80031b6:	e000      	b.n	80031ba <HAL_ADC_Start+0x22>
 80031b8:	4b66      	ldr	r3, [pc, #408]	; (8003354 <HAL_ADC_Start+0x1bc>)
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff fd38 	bl	8002c30 <LL_ADC_GetMultimode>
 80031c0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff fdfe 	bl	8002dc8 <LL_ADC_REG_IsConversionOngoing>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f040 80b4 	bne.w	800333c <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d101      	bne.n	80031e2 <HAL_ADC_Start+0x4a>
 80031de:	2302      	movs	r3, #2
 80031e0:	e0af      	b.n	8003342 <HAL_ADC_Start+0x1aa>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f001 f858 	bl	80042a0 <ADC_Enable>
 80031f0:	4603      	mov	r3, r0
 80031f2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80031f4:	7dfb      	ldrb	r3, [r7, #23]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f040 809b 	bne.w	8003332 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003200:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003204:	f023 0301 	bic.w	r3, r3, #1
 8003208:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a4d      	ldr	r2, [pc, #308]	; (800334c <HAL_ADC_Start+0x1b4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d009      	beq.n	800322e <HAL_ADC_Start+0x96>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a4e      	ldr	r2, [pc, #312]	; (8003358 <HAL_ADC_Start+0x1c0>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d002      	beq.n	800322a <HAL_ADC_Start+0x92>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	e003      	b.n	8003232 <HAL_ADC_Start+0x9a>
 800322a:	4b4c      	ldr	r3, [pc, #304]	; (800335c <HAL_ADC_Start+0x1c4>)
 800322c:	e001      	b.n	8003232 <HAL_ADC_Start+0x9a>
 800322e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6812      	ldr	r2, [r2, #0]
 8003236:	4293      	cmp	r3, r2
 8003238:	d002      	beq.n	8003240 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d105      	bne.n	800324c <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003244:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003250:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003258:	d106      	bne.n	8003268 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800325e:	f023 0206 	bic.w	r2, r3, #6
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	661a      	str	r2, [r3, #96]	; 0x60
 8003266:	e002      	b.n	800326e <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	221c      	movs	r2, #28
 8003274:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a32      	ldr	r2, [pc, #200]	; (800334c <HAL_ADC_Start+0x1b4>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d009      	beq.n	800329c <HAL_ADC_Start+0x104>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a32      	ldr	r2, [pc, #200]	; (8003358 <HAL_ADC_Start+0x1c0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d002      	beq.n	8003298 <HAL_ADC_Start+0x100>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	e003      	b.n	80032a0 <HAL_ADC_Start+0x108>
 8003298:	4b30      	ldr	r3, [pc, #192]	; (800335c <HAL_ADC_Start+0x1c4>)
 800329a:	e001      	b.n	80032a0 <HAL_ADC_Start+0x108>
 800329c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6812      	ldr	r2, [r2, #0]
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d008      	beq.n	80032ba <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d005      	beq.n	80032ba <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	2b05      	cmp	r3, #5
 80032b2:	d002      	beq.n	80032ba <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	2b09      	cmp	r3, #9
 80032b8:	d114      	bne.n	80032e4 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d007      	beq.n	80032d8 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff fd5f 	bl	8002da0 <LL_ADC_REG_StartConversion>
 80032e2:	e02d      	b.n	8003340 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a15      	ldr	r2, [pc, #84]	; (800334c <HAL_ADC_Start+0x1b4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d009      	beq.n	800330e <HAL_ADC_Start+0x176>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a16      	ldr	r2, [pc, #88]	; (8003358 <HAL_ADC_Start+0x1c0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d002      	beq.n	800330a <HAL_ADC_Start+0x172>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	e003      	b.n	8003312 <HAL_ADC_Start+0x17a>
 800330a:	4b14      	ldr	r3, [pc, #80]	; (800335c <HAL_ADC_Start+0x1c4>)
 800330c:	e001      	b.n	8003312 <HAL_ADC_Start+0x17a>
 800330e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003312:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00f      	beq.n	8003340 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003324:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003328:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003330:	e006      	b.n	8003340 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800333a:	e001      	b.n	8003340 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800333c:	2302      	movs	r3, #2
 800333e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003340:	7dfb      	ldrb	r3, [r7, #23]
}
 8003342:	4618      	mov	r0, r3
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	50000100 	.word	0x50000100
 8003350:	50000300 	.word	0x50000300
 8003354:	50000700 	.word	0x50000700
 8003358:	50000500 	.word	0x50000500
 800335c:	50000400 	.word	0x50000400

08003360 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003374:	d004      	beq.n	8003380 <HAL_ADC_Start_DMA+0x20>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a5a      	ldr	r2, [pc, #360]	; (80034e4 <HAL_ADC_Start_DMA+0x184>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d101      	bne.n	8003384 <HAL_ADC_Start_DMA+0x24>
 8003380:	4b59      	ldr	r3, [pc, #356]	; (80034e8 <HAL_ADC_Start_DMA+0x188>)
 8003382:	e000      	b.n	8003386 <HAL_ADC_Start_DMA+0x26>
 8003384:	4b59      	ldr	r3, [pc, #356]	; (80034ec <HAL_ADC_Start_DMA+0x18c>)
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff fc52 	bl	8002c30 <LL_ADC_GetMultimode>
 800338c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff fd18 	bl	8002dc8 <LL_ADC_REG_IsConversionOngoing>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	f040 809b 	bne.w	80034d6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d101      	bne.n	80033ae <HAL_ADC_Start_DMA+0x4e>
 80033aa:	2302      	movs	r3, #2
 80033ac:	e096      	b.n	80034dc <HAL_ADC_Start_DMA+0x17c>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a4d      	ldr	r2, [pc, #308]	; (80034f0 <HAL_ADC_Start_DMA+0x190>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d008      	beq.n	80033d2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d005      	beq.n	80033d2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	2b05      	cmp	r3, #5
 80033ca:	d002      	beq.n	80033d2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	2b09      	cmp	r3, #9
 80033d0:	d17a      	bne.n	80034c8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 ff64 	bl	80042a0 <ADC_Enable>
 80033d8:	4603      	mov	r3, r0
 80033da:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80033dc:	7dfb      	ldrb	r3, [r7, #23]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d16d      	bne.n	80034be <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80033ea:	f023 0301 	bic.w	r3, r3, #1
 80033ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a3a      	ldr	r2, [pc, #232]	; (80034e4 <HAL_ADC_Start_DMA+0x184>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d009      	beq.n	8003414 <HAL_ADC_Start_DMA+0xb4>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a3b      	ldr	r2, [pc, #236]	; (80034f4 <HAL_ADC_Start_DMA+0x194>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d002      	beq.n	8003410 <HAL_ADC_Start_DMA+0xb0>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	e003      	b.n	8003418 <HAL_ADC_Start_DMA+0xb8>
 8003410:	4b39      	ldr	r3, [pc, #228]	; (80034f8 <HAL_ADC_Start_DMA+0x198>)
 8003412:	e001      	b.n	8003418 <HAL_ADC_Start_DMA+0xb8>
 8003414:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	6812      	ldr	r2, [r2, #0]
 800341c:	4293      	cmp	r3, r2
 800341e:	d002      	beq.n	8003426 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d105      	bne.n	8003432 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003436:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d006      	beq.n	800344c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003442:	f023 0206 	bic.w	r2, r3, #6
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	661a      	str	r2, [r3, #96]	; 0x60
 800344a:	e002      	b.n	8003452 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003456:	4a29      	ldr	r2, [pc, #164]	; (80034fc <HAL_ADC_Start_DMA+0x19c>)
 8003458:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345e:	4a28      	ldr	r2, [pc, #160]	; (8003500 <HAL_ADC_Start_DMA+0x1a0>)
 8003460:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003466:	4a27      	ldr	r2, [pc, #156]	; (8003504 <HAL_ADC_Start_DMA+0x1a4>)
 8003468:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	221c      	movs	r2, #28
 8003470:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f042 0210 	orr.w	r2, r2, #16
 8003488:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68da      	ldr	r2, [r3, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f042 0201 	orr.w	r2, r2, #1
 8003498:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	3340      	adds	r3, #64	; 0x40
 80034a4:	4619      	mov	r1, r3
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f001 fbc5 	bl	8004c38 <HAL_DMA_Start_IT>
 80034ae:	4603      	mov	r3, r0
 80034b0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff fc72 	bl	8002da0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80034bc:	e00d      	b.n	80034da <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80034c6:	e008      	b.n	80034da <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80034d4:	e001      	b.n	80034da <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80034d6:	2302      	movs	r3, #2
 80034d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80034da:	7dfb      	ldrb	r3, [r7, #23]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3718      	adds	r7, #24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	50000100 	.word	0x50000100
 80034e8:	50000300 	.word	0x50000300
 80034ec:	50000700 	.word	0x50000700
 80034f0:	50000600 	.word	0x50000600
 80034f4:	50000500 	.word	0x50000500
 80034f8:	50000400 	.word	0x50000400
 80034fc:	08004423 	.word	0x08004423
 8003500:	080044fb 	.word	0x080044fb
 8003504:	08004517 	.word	0x08004517

08003508 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003516:	4618      	mov	r0, r3
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
	...

08003524 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b08a      	sub	sp, #40	; 0x28
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800352c:	2300      	movs	r3, #0
 800352e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003548:	d004      	beq.n	8003554 <HAL_ADC_IRQHandler+0x30>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a8e      	ldr	r2, [pc, #568]	; (8003788 <HAL_ADC_IRQHandler+0x264>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d101      	bne.n	8003558 <HAL_ADC_IRQHandler+0x34>
 8003554:	4b8d      	ldr	r3, [pc, #564]	; (800378c <HAL_ADC_IRQHandler+0x268>)
 8003556:	e000      	b.n	800355a <HAL_ADC_IRQHandler+0x36>
 8003558:	4b8d      	ldr	r3, [pc, #564]	; (8003790 <HAL_ADC_IRQHandler+0x26c>)
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff fb68 	bl	8002c30 <LL_ADC_GetMultimode>
 8003560:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d017      	beq.n	800359c <HAL_ADC_IRQHandler+0x78>
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d012      	beq.n	800359c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357a:	f003 0310 	and.w	r3, r3, #16
 800357e:	2b00      	cmp	r3, #0
 8003580:	d105      	bne.n	800358e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003586:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f001 f8b8 	bl	8004704 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2202      	movs	r2, #2
 800359a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d004      	beq.n	80035b0 <HAL_ADC_IRQHandler+0x8c>
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10b      	bne.n	80035c8 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 8094 	beq.w	80036e4 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 808e 	beq.w	80036e4 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035cc:	f003 0310 	and.w	r3, r3, #16
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d105      	bne.n	80035e0 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff fa7d 	bl	8002ae4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d072      	beq.n	80036d6 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a64      	ldr	r2, [pc, #400]	; (8003788 <HAL_ADC_IRQHandler+0x264>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d009      	beq.n	800360e <HAL_ADC_IRQHandler+0xea>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a65      	ldr	r2, [pc, #404]	; (8003794 <HAL_ADC_IRQHandler+0x270>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d002      	beq.n	800360a <HAL_ADC_IRQHandler+0xe6>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	e003      	b.n	8003612 <HAL_ADC_IRQHandler+0xee>
 800360a:	4b63      	ldr	r3, [pc, #396]	; (8003798 <HAL_ADC_IRQHandler+0x274>)
 800360c:	e001      	b.n	8003612 <HAL_ADC_IRQHandler+0xee>
 800360e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6812      	ldr	r2, [r2, #0]
 8003616:	4293      	cmp	r3, r2
 8003618:	d008      	beq.n	800362c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	2b05      	cmp	r3, #5
 8003624:	d002      	beq.n	800362c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	2b09      	cmp	r3, #9
 800362a:	d104      	bne.n	8003636 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	623b      	str	r3, [r7, #32]
 8003634:	e014      	b.n	8003660 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a53      	ldr	r2, [pc, #332]	; (8003788 <HAL_ADC_IRQHandler+0x264>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d009      	beq.n	8003654 <HAL_ADC_IRQHandler+0x130>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a53      	ldr	r2, [pc, #332]	; (8003794 <HAL_ADC_IRQHandler+0x270>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d002      	beq.n	8003650 <HAL_ADC_IRQHandler+0x12c>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	e003      	b.n	8003658 <HAL_ADC_IRQHandler+0x134>
 8003650:	4b51      	ldr	r3, [pc, #324]	; (8003798 <HAL_ADC_IRQHandler+0x274>)
 8003652:	e001      	b.n	8003658 <HAL_ADC_IRQHandler+0x134>
 8003654:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003658:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d135      	bne.n	80036d6 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b08      	cmp	r3, #8
 8003676:	d12e      	bne.n	80036d6 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff fba3 	bl	8002dc8 <LL_ADC_REG_IsConversionOngoing>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d11a      	bne.n	80036be <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 020c 	bic.w	r2, r2, #12
 8003696:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d112      	bne.n	80036d6 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b4:	f043 0201 	orr.w	r2, r3, #1
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80036bc:	e00b      	b.n	80036d6 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c2:	f043 0210 	orr.w	r2, r3, #16
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ce:	f043 0201 	orr.w	r2, r3, #1
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7fd ffb6 	bl	8001648 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	220c      	movs	r2, #12
 80036e2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	f003 0320 	and.w	r3, r3, #32
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d004      	beq.n	80036f8 <HAL_ADC_IRQHandler+0x1d4>
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	f003 0320 	and.w	r3, r3, #32
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10b      	bne.n	8003710 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 80b3 	beq.w	800386a <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 80ad 	beq.w	800386a <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003714:	f003 0310 	and.w	r3, r3, #16
 8003718:	2b00      	cmp	r3, #0
 800371a:	d105      	bne.n	8003728 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003720:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff fa18 	bl	8002b62 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003732:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff f9d3 	bl	8002ae4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800373e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a10      	ldr	r2, [pc, #64]	; (8003788 <HAL_ADC_IRQHandler+0x264>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d009      	beq.n	800375e <HAL_ADC_IRQHandler+0x23a>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a11      	ldr	r2, [pc, #68]	; (8003794 <HAL_ADC_IRQHandler+0x270>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d002      	beq.n	800375a <HAL_ADC_IRQHandler+0x236>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	e003      	b.n	8003762 <HAL_ADC_IRQHandler+0x23e>
 800375a:	4b0f      	ldr	r3, [pc, #60]	; (8003798 <HAL_ADC_IRQHandler+0x274>)
 800375c:	e001      	b.n	8003762 <HAL_ADC_IRQHandler+0x23e>
 800375e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6812      	ldr	r2, [r2, #0]
 8003766:	4293      	cmp	r3, r2
 8003768:	d008      	beq.n	800377c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	2b06      	cmp	r3, #6
 8003774:	d002      	beq.n	800377c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2b07      	cmp	r3, #7
 800377a:	d10f      	bne.n	800379c <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	623b      	str	r3, [r7, #32]
 8003784:	e01f      	b.n	80037c6 <HAL_ADC_IRQHandler+0x2a2>
 8003786:	bf00      	nop
 8003788:	50000100 	.word	0x50000100
 800378c:	50000300 	.word	0x50000300
 8003790:	50000700 	.word	0x50000700
 8003794:	50000500 	.word	0x50000500
 8003798:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a8b      	ldr	r2, [pc, #556]	; (80039d0 <HAL_ADC_IRQHandler+0x4ac>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d009      	beq.n	80037ba <HAL_ADC_IRQHandler+0x296>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a8a      	ldr	r2, [pc, #552]	; (80039d4 <HAL_ADC_IRQHandler+0x4b0>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d002      	beq.n	80037b6 <HAL_ADC_IRQHandler+0x292>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	e003      	b.n	80037be <HAL_ADC_IRQHandler+0x29a>
 80037b6:	4b88      	ldr	r3, [pc, #544]	; (80039d8 <HAL_ADC_IRQHandler+0x4b4>)
 80037b8:	e001      	b.n	80037be <HAL_ADC_IRQHandler+0x29a>
 80037ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80037be:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d047      	beq.n	800385c <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d007      	beq.n	80037e6 <HAL_ADC_IRQHandler+0x2c2>
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d03f      	beq.n	800385c <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d13a      	bne.n	800385c <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f0:	2b40      	cmp	r3, #64	; 0x40
 80037f2:	d133      	bne.n	800385c <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d12e      	bne.n	800385c <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff faf3 	bl	8002dee <LL_ADC_INJ_IsConversionOngoing>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d11a      	bne.n	8003844 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800381c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003822:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003832:	2b00      	cmp	r3, #0
 8003834:	d112      	bne.n	800385c <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800383a:	f043 0201 	orr.w	r2, r3, #1
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	65da      	str	r2, [r3, #92]	; 0x5c
 8003842:	e00b      	b.n	800385c <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003848:	f043 0210 	orr.w	r2, r3, #16
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003854:	f043 0201 	orr.w	r2, r3, #1
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 ff29 	bl	80046b4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2260      	movs	r2, #96	; 0x60
 8003868:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003870:	2b00      	cmp	r3, #0
 8003872:	d011      	beq.n	8003898 <HAL_ADC_IRQHandler+0x374>
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00c      	beq.n	8003898 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003882:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f8b4 	bl	80039f8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2280      	movs	r2, #128	; 0x80
 8003896:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d012      	beq.n	80038c8 <HAL_ADC_IRQHandler+0x3a4>
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00d      	beq.n	80038c8 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 ff0f 	bl	80046dc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038c6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d012      	beq.n	80038f8 <HAL_ADC_IRQHandler+0x3d4>
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00d      	beq.n	80038f8 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 ff01 	bl	80046f0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038f6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f003 0310 	and.w	r3, r3, #16
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d043      	beq.n	800398a <HAL_ADC_IRQHandler+0x466>
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	f003 0310 	and.w	r3, r3, #16
 8003908:	2b00      	cmp	r3, #0
 800390a:	d03e      	beq.n	800398a <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003910:	2b00      	cmp	r3, #0
 8003912:	d102      	bne.n	800391a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003914:	2301      	movs	r3, #1
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
 8003918:	e021      	b.n	800395e <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d015      	beq.n	800394c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003928:	d004      	beq.n	8003934 <HAL_ADC_IRQHandler+0x410>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a28      	ldr	r2, [pc, #160]	; (80039d0 <HAL_ADC_IRQHandler+0x4ac>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d101      	bne.n	8003938 <HAL_ADC_IRQHandler+0x414>
 8003934:	4b29      	ldr	r3, [pc, #164]	; (80039dc <HAL_ADC_IRQHandler+0x4b8>)
 8003936:	e000      	b.n	800393a <HAL_ADC_IRQHandler+0x416>
 8003938:	4b29      	ldr	r3, [pc, #164]	; (80039e0 <HAL_ADC_IRQHandler+0x4bc>)
 800393a:	4618      	mov	r0, r3
 800393c:	f7ff f986 	bl	8002c4c <LL_ADC_GetMultiDMATransfer>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00b      	beq.n	800395e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003946:	2301      	movs	r3, #1
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
 800394a:	e008      	b.n	800395e <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800395a:	2301      	movs	r3, #1
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	2b01      	cmp	r3, #1
 8003962:	d10e      	bne.n	8003982 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003968:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003974:	f043 0202 	orr.w	r2, r3, #2
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f845 	bl	8003a0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2210      	movs	r2, #16
 8003988:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003990:	2b00      	cmp	r3, #0
 8003992:	d018      	beq.n	80039c6 <HAL_ADC_IRQHandler+0x4a2>
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800399a:	2b00      	cmp	r3, #0
 800399c:	d013      	beq.n	80039c6 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ae:	f043 0208 	orr.w	r2, r3, #8
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039be:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 fe81 	bl	80046c8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80039c6:	bf00      	nop
 80039c8:	3728      	adds	r7, #40	; 0x28
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	50000100 	.word	0x50000100
 80039d4:	50000500 	.word	0x50000500
 80039d8:	50000400 	.word	0x50000400
 80039dc:	50000300 	.word	0x50000300
 80039e0:	50000700 	.word	0x50000700

080039e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b0b6      	sub	sp, #216	; 0xd8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003a30:	2300      	movs	r3, #0
 8003a32:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d102      	bne.n	8003a44 <HAL_ADC_ConfigChannel+0x24>
 8003a3e:	2302      	movs	r3, #2
 8003a40:	f000 bc13 	b.w	800426a <HAL_ADC_ConfigChannel+0x84a>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff f9b9 	bl	8002dc8 <LL_ADC_REG_IsConversionOngoing>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f040 83f3 	bne.w	8004244 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6818      	ldr	r0, [r3, #0]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	6859      	ldr	r1, [r3, #4]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	f7ff f84d 	bl	8002b0a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff f9a7 	bl	8002dc8 <LL_ADC_REG_IsConversionOngoing>
 8003a7a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7ff f9b3 	bl	8002dee <LL_ADC_INJ_IsConversionOngoing>
 8003a88:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a8c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f040 81d9 	bne.w	8003e48 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f040 81d4 	bne.w	8003e48 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003aa8:	d10f      	bne.n	8003aca <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6818      	ldr	r0, [r3, #0]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	f7ff f867 	bl	8002b88 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fe fffb 	bl	8002abe <LL_ADC_SetSamplingTimeCommonConfig>
 8003ac8:	e00e      	b.n	8003ae8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6818      	ldr	r0, [r3, #0]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	6819      	ldr	r1, [r3, #0]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	f7ff f856 	bl	8002b88 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fe ffeb 	bl	8002abe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	695a      	ldr	r2, [r3, #20]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	08db      	lsrs	r3, r3, #3
 8003af4:	f003 0303 	and.w	r3, r3, #3
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d022      	beq.n	8003b50 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	6919      	ldr	r1, [r3, #16]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003b1a:	f7fe ff45 	bl	80029a8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6818      	ldr	r0, [r3, #0]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	6919      	ldr	r1, [r3, #16]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	f7fe ff91 	bl	8002a52 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6818      	ldr	r0, [r3, #0]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	6919      	ldr	r1, [r3, #16]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	7f1b      	ldrb	r3, [r3, #28]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d102      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x126>
 8003b40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b44:	e000      	b.n	8003b48 <HAL_ADC_ConfigChannel+0x128>
 8003b46:	2300      	movs	r3, #0
 8003b48:	461a      	mov	r2, r3
 8003b4a:	f7fe ff9d 	bl	8002a88 <LL_ADC_SetOffsetSaturation>
 8003b4e:	e17b      	b.n	8003e48 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2100      	movs	r1, #0
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fe ff4a 	bl	80029f0 <LL_ADC_GetOffsetChannel>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10a      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x15c>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7fe ff3f 	bl	80029f0 <LL_ADC_GetOffsetChannel>
 8003b72:	4603      	mov	r3, r0
 8003b74:	0e9b      	lsrs	r3, r3, #26
 8003b76:	f003 021f 	and.w	r2, r3, #31
 8003b7a:	e01e      	b.n	8003bba <HAL_ADC_ConfigChannel+0x19a>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2100      	movs	r1, #0
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fe ff34 	bl	80029f0 <LL_ADC_GetOffsetChannel>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b92:	fa93 f3a3 	rbit	r3, r3
 8003b96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003ba2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003baa:	2320      	movs	r3, #32
 8003bac:	e004      	b.n	8003bb8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003bae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003bb2:	fab3 f383 	clz	r3, r3
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d105      	bne.n	8003bd2 <HAL_ADC_ConfigChannel+0x1b2>
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	0e9b      	lsrs	r3, r3, #26
 8003bcc:	f003 031f 	and.w	r3, r3, #31
 8003bd0:	e018      	b.n	8003c04 <HAL_ADC_ConfigChannel+0x1e4>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bda:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003bde:	fa93 f3a3 	rbit	r3, r3
 8003be2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003be6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003bea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003bee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003bf6:	2320      	movs	r3, #32
 8003bf8:	e004      	b.n	8003c04 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003bfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003bfe:	fab3 f383 	clz	r3, r3
 8003c02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d106      	bne.n	8003c16 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	2100      	movs	r1, #0
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7fe ff03 	bl	8002a1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7fe fee7 	bl	80029f0 <LL_ADC_GetOffsetChannel>
 8003c22:	4603      	mov	r3, r0
 8003c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10a      	bne.n	8003c42 <HAL_ADC_ConfigChannel+0x222>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2101      	movs	r1, #1
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fe fedc 	bl	80029f0 <LL_ADC_GetOffsetChannel>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	0e9b      	lsrs	r3, r3, #26
 8003c3c:	f003 021f 	and.w	r2, r3, #31
 8003c40:	e01e      	b.n	8003c80 <HAL_ADC_ConfigChannel+0x260>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2101      	movs	r1, #1
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7fe fed1 	bl	80029f0 <LL_ADC_GetOffsetChannel>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c58:	fa93 f3a3 	rbit	r3, r3
 8003c5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003c60:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003c68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003c70:	2320      	movs	r3, #32
 8003c72:	e004      	b.n	8003c7e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003c74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c78:	fab3 f383 	clz	r3, r3
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d105      	bne.n	8003c98 <HAL_ADC_ConfigChannel+0x278>
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	0e9b      	lsrs	r3, r3, #26
 8003c92:	f003 031f 	and.w	r3, r3, #31
 8003c96:	e018      	b.n	8003cca <HAL_ADC_ConfigChannel+0x2aa>
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ca4:	fa93 f3a3 	rbit	r3, r3
 8003ca8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003cac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003cb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003cb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003cbc:	2320      	movs	r3, #32
 8003cbe:	e004      	b.n	8003cca <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003cc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cc4:	fab3 f383 	clz	r3, r3
 8003cc8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d106      	bne.n	8003cdc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fe fea0 	bl	8002a1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2102      	movs	r1, #2
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fe fe84 	bl	80029f0 <LL_ADC_GetOffsetChannel>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10a      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x2e8>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2102      	movs	r1, #2
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7fe fe79 	bl	80029f0 <LL_ADC_GetOffsetChannel>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	0e9b      	lsrs	r3, r3, #26
 8003d02:	f003 021f 	and.w	r2, r3, #31
 8003d06:	e01e      	b.n	8003d46 <HAL_ADC_ConfigChannel+0x326>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2102      	movs	r1, #2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7fe fe6e 	bl	80029f0 <LL_ADC_GetOffsetChannel>
 8003d14:	4603      	mov	r3, r0
 8003d16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d1e:	fa93 f3a3 	rbit	r3, r3
 8003d22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003d26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003d2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003d36:	2320      	movs	r3, #32
 8003d38:	e004      	b.n	8003d44 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003d3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d3e:	fab3 f383 	clz	r3, r3
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d105      	bne.n	8003d5e <HAL_ADC_ConfigChannel+0x33e>
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	0e9b      	lsrs	r3, r3, #26
 8003d58:	f003 031f 	and.w	r3, r3, #31
 8003d5c:	e016      	b.n	8003d8c <HAL_ADC_ConfigChannel+0x36c>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d6a:	fa93 f3a3 	rbit	r3, r3
 8003d6e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003d70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003d76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003d7e:	2320      	movs	r3, #32
 8003d80:	e004      	b.n	8003d8c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003d82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d86:	fab3 f383 	clz	r3, r3
 8003d8a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d106      	bne.n	8003d9e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2200      	movs	r2, #0
 8003d96:	2102      	movs	r1, #2
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7fe fe3f 	bl	8002a1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2103      	movs	r1, #3
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7fe fe23 	bl	80029f0 <LL_ADC_GetOffsetChannel>
 8003daa:	4603      	mov	r3, r0
 8003dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10a      	bne.n	8003dca <HAL_ADC_ConfigChannel+0x3aa>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2103      	movs	r1, #3
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fe fe18 	bl	80029f0 <LL_ADC_GetOffsetChannel>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	0e9b      	lsrs	r3, r3, #26
 8003dc4:	f003 021f 	and.w	r2, r3, #31
 8003dc8:	e017      	b.n	8003dfa <HAL_ADC_ConfigChannel+0x3da>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2103      	movs	r1, #3
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7fe fe0d 	bl	80029f0 <LL_ADC_GetOffsetChannel>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ddc:	fa93 f3a3 	rbit	r3, r3
 8003de0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003de2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003de4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003de6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003dec:	2320      	movs	r3, #32
 8003dee:	e003      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003df0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003df2:	fab3 f383 	clz	r3, r3
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d105      	bne.n	8003e12 <HAL_ADC_ConfigChannel+0x3f2>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	0e9b      	lsrs	r3, r3, #26
 8003e0c:	f003 031f 	and.w	r3, r3, #31
 8003e10:	e011      	b.n	8003e36 <HAL_ADC_ConfigChannel+0x416>
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e1a:	fa93 f3a3 	rbit	r3, r3
 8003e1e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003e20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e22:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003e2a:	2320      	movs	r3, #32
 8003e2c:	e003      	b.n	8003e36 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e30:	fab3 f383 	clz	r3, r3
 8003e34:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d106      	bne.n	8003e48 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	2103      	movs	r1, #3
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fe fdea 	bl	8002a1c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fe ff81 	bl	8002d54 <LL_ADC_IsEnabled>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f040 813d 	bne.w	80040d4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6818      	ldr	r0, [r3, #0]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	6819      	ldr	r1, [r3, #0]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	461a      	mov	r2, r3
 8003e68:	f7fe feba 	bl	8002be0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	4aa2      	ldr	r2, [pc, #648]	; (80040fc <HAL_ADC_ConfigChannel+0x6dc>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	f040 812e 	bne.w	80040d4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10b      	bne.n	8003ea0 <HAL_ADC_ConfigChannel+0x480>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	0e9b      	lsrs	r3, r3, #26
 8003e8e:	3301      	adds	r3, #1
 8003e90:	f003 031f 	and.w	r3, r3, #31
 8003e94:	2b09      	cmp	r3, #9
 8003e96:	bf94      	ite	ls
 8003e98:	2301      	movls	r3, #1
 8003e9a:	2300      	movhi	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	e019      	b.n	8003ed4 <HAL_ADC_ConfigChannel+0x4b4>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ea8:	fa93 f3a3 	rbit	r3, r3
 8003eac:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003eae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003eb0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003eb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003eb8:	2320      	movs	r3, #32
 8003eba:	e003      	b.n	8003ec4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003ebc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ebe:	fab3 f383 	clz	r3, r3
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	f003 031f 	and.w	r3, r3, #31
 8003eca:	2b09      	cmp	r3, #9
 8003ecc:	bf94      	ite	ls
 8003ece:	2301      	movls	r3, #1
 8003ed0:	2300      	movhi	r3, #0
 8003ed2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d079      	beq.n	8003fcc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d107      	bne.n	8003ef4 <HAL_ADC_ConfigChannel+0x4d4>
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	0e9b      	lsrs	r3, r3, #26
 8003eea:	3301      	adds	r3, #1
 8003eec:	069b      	lsls	r3, r3, #26
 8003eee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ef2:	e015      	b.n	8003f20 <HAL_ADC_ConfigChannel+0x500>
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003efc:	fa93 f3a3 	rbit	r3, r3
 8003f00:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f04:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003f06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003f0c:	2320      	movs	r3, #32
 8003f0e:	e003      	b.n	8003f18 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003f10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f12:	fab3 f383 	clz	r3, r3
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	3301      	adds	r3, #1
 8003f1a:	069b      	lsls	r3, r3, #26
 8003f1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d109      	bne.n	8003f40 <HAL_ADC_ConfigChannel+0x520>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	0e9b      	lsrs	r3, r3, #26
 8003f32:	3301      	adds	r3, #1
 8003f34:	f003 031f 	and.w	r3, r3, #31
 8003f38:	2101      	movs	r1, #1
 8003f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f3e:	e017      	b.n	8003f70 <HAL_ADC_ConfigChannel+0x550>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f48:	fa93 f3a3 	rbit	r3, r3
 8003f4c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f50:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003f58:	2320      	movs	r3, #32
 8003f5a:	e003      	b.n	8003f64 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003f5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f5e:	fab3 f383 	clz	r3, r3
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	3301      	adds	r3, #1
 8003f66:	f003 031f 	and.w	r3, r3, #31
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f70:	ea42 0103 	orr.w	r1, r2, r3
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10a      	bne.n	8003f96 <HAL_ADC_ConfigChannel+0x576>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	0e9b      	lsrs	r3, r3, #26
 8003f86:	3301      	adds	r3, #1
 8003f88:	f003 021f 	and.w	r2, r3, #31
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	4413      	add	r3, r2
 8003f92:	051b      	lsls	r3, r3, #20
 8003f94:	e018      	b.n	8003fc8 <HAL_ADC_ConfigChannel+0x5a8>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9e:	fa93 f3a3 	rbit	r3, r3
 8003fa2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003fae:	2320      	movs	r3, #32
 8003fb0:	e003      	b.n	8003fba <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb4:	fab3 f383 	clz	r3, r3
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	3301      	adds	r3, #1
 8003fbc:	f003 021f 	and.w	r2, r3, #31
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	4413      	add	r3, r2
 8003fc6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fc8:	430b      	orrs	r3, r1
 8003fca:	e07e      	b.n	80040ca <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d107      	bne.n	8003fe8 <HAL_ADC_ConfigChannel+0x5c8>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	0e9b      	lsrs	r3, r3, #26
 8003fde:	3301      	adds	r3, #1
 8003fe0:	069b      	lsls	r3, r3, #26
 8003fe2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fe6:	e015      	b.n	8004014 <HAL_ADC_ConfigChannel+0x5f4>
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff0:	fa93 f3a3 	rbit	r3, r3
 8003ff4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004000:	2320      	movs	r3, #32
 8004002:	e003      	b.n	800400c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004006:	fab3 f383 	clz	r3, r3
 800400a:	b2db      	uxtb	r3, r3
 800400c:	3301      	adds	r3, #1
 800400e:	069b      	lsls	r3, r3, #26
 8004010:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800401c:	2b00      	cmp	r3, #0
 800401e:	d109      	bne.n	8004034 <HAL_ADC_ConfigChannel+0x614>
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	0e9b      	lsrs	r3, r3, #26
 8004026:	3301      	adds	r3, #1
 8004028:	f003 031f 	and.w	r3, r3, #31
 800402c:	2101      	movs	r1, #1
 800402e:	fa01 f303 	lsl.w	r3, r1, r3
 8004032:	e017      	b.n	8004064 <HAL_ADC_ConfigChannel+0x644>
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	fa93 f3a3 	rbit	r3, r3
 8004040:	61fb      	str	r3, [r7, #28]
  return result;
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800404c:	2320      	movs	r3, #32
 800404e:	e003      	b.n	8004058 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	fab3 f383 	clz	r3, r3
 8004056:	b2db      	uxtb	r3, r3
 8004058:	3301      	adds	r3, #1
 800405a:	f003 031f 	and.w	r3, r3, #31
 800405e:	2101      	movs	r1, #1
 8004060:	fa01 f303 	lsl.w	r3, r1, r3
 8004064:	ea42 0103 	orr.w	r1, r2, r3
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10d      	bne.n	8004090 <HAL_ADC_ConfigChannel+0x670>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	0e9b      	lsrs	r3, r3, #26
 800407a:	3301      	adds	r3, #1
 800407c:	f003 021f 	and.w	r2, r3, #31
 8004080:	4613      	mov	r3, r2
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	4413      	add	r3, r2
 8004086:	3b1e      	subs	r3, #30
 8004088:	051b      	lsls	r3, r3, #20
 800408a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800408e:	e01b      	b.n	80040c8 <HAL_ADC_ConfigChannel+0x6a8>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	fa93 f3a3 	rbit	r3, r3
 800409c:	613b      	str	r3, [r7, #16]
  return result;
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80040a8:	2320      	movs	r3, #32
 80040aa:	e003      	b.n	80040b4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	fab3 f383 	clz	r3, r3
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	3301      	adds	r3, #1
 80040b6:	f003 021f 	and.w	r2, r3, #31
 80040ba:	4613      	mov	r3, r2
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	4413      	add	r3, r2
 80040c0:	3b1e      	subs	r3, #30
 80040c2:	051b      	lsls	r3, r3, #20
 80040c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040c8:	430b      	orrs	r3, r1
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	6892      	ldr	r2, [r2, #8]
 80040ce:	4619      	mov	r1, r3
 80040d0:	f7fe fd5a 	bl	8002b88 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	4b09      	ldr	r3, [pc, #36]	; (8004100 <HAL_ADC_ConfigChannel+0x6e0>)
 80040da:	4013      	ands	r3, r2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 80be 	beq.w	800425e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040ea:	d004      	beq.n	80040f6 <HAL_ADC_ConfigChannel+0x6d6>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a04      	ldr	r2, [pc, #16]	; (8004104 <HAL_ADC_ConfigChannel+0x6e4>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d10a      	bne.n	800410c <HAL_ADC_ConfigChannel+0x6ec>
 80040f6:	4b04      	ldr	r3, [pc, #16]	; (8004108 <HAL_ADC_ConfigChannel+0x6e8>)
 80040f8:	e009      	b.n	800410e <HAL_ADC_ConfigChannel+0x6ee>
 80040fa:	bf00      	nop
 80040fc:	407f0000 	.word	0x407f0000
 8004100:	80080000 	.word	0x80080000
 8004104:	50000100 	.word	0x50000100
 8004108:	50000300 	.word	0x50000300
 800410c:	4b59      	ldr	r3, [pc, #356]	; (8004274 <HAL_ADC_ConfigChannel+0x854>)
 800410e:	4618      	mov	r0, r3
 8004110:	f7fe fc3c 	bl	800298c <LL_ADC_GetCommonPathInternalCh>
 8004114:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a56      	ldr	r2, [pc, #344]	; (8004278 <HAL_ADC_ConfigChannel+0x858>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d004      	beq.n	800412c <HAL_ADC_ConfigChannel+0x70c>
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a55      	ldr	r2, [pc, #340]	; (800427c <HAL_ADC_ConfigChannel+0x85c>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d13a      	bne.n	80041a2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800412c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004130:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d134      	bne.n	80041a2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004140:	d005      	beq.n	800414e <HAL_ADC_ConfigChannel+0x72e>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a4e      	ldr	r2, [pc, #312]	; (8004280 <HAL_ADC_ConfigChannel+0x860>)
 8004148:	4293      	cmp	r3, r2
 800414a:	f040 8085 	bne.w	8004258 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004156:	d004      	beq.n	8004162 <HAL_ADC_ConfigChannel+0x742>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a49      	ldr	r2, [pc, #292]	; (8004284 <HAL_ADC_ConfigChannel+0x864>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d101      	bne.n	8004166 <HAL_ADC_ConfigChannel+0x746>
 8004162:	4a49      	ldr	r2, [pc, #292]	; (8004288 <HAL_ADC_ConfigChannel+0x868>)
 8004164:	e000      	b.n	8004168 <HAL_ADC_ConfigChannel+0x748>
 8004166:	4a43      	ldr	r2, [pc, #268]	; (8004274 <HAL_ADC_ConfigChannel+0x854>)
 8004168:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800416c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004170:	4619      	mov	r1, r3
 8004172:	4610      	mov	r0, r2
 8004174:	f7fe fbf7 	bl	8002966 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004178:	4b44      	ldr	r3, [pc, #272]	; (800428c <HAL_ADC_ConfigChannel+0x86c>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	099b      	lsrs	r3, r3, #6
 800417e:	4a44      	ldr	r2, [pc, #272]	; (8004290 <HAL_ADC_ConfigChannel+0x870>)
 8004180:	fba2 2303 	umull	r2, r3, r2, r3
 8004184:	099b      	lsrs	r3, r3, #6
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	4613      	mov	r3, r2
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	4413      	add	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004192:	e002      	b.n	800419a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	3b01      	subs	r3, #1
 8004198:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1f9      	bne.n	8004194 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041a0:	e05a      	b.n	8004258 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a3b      	ldr	r2, [pc, #236]	; (8004294 <HAL_ADC_ConfigChannel+0x874>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d125      	bne.n	80041f8 <HAL_ADC_ConfigChannel+0x7d8>
 80041ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d11f      	bne.n	80041f8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a31      	ldr	r2, [pc, #196]	; (8004284 <HAL_ADC_ConfigChannel+0x864>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d104      	bne.n	80041cc <HAL_ADC_ConfigChannel+0x7ac>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a34      	ldr	r2, [pc, #208]	; (8004298 <HAL_ADC_ConfigChannel+0x878>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d047      	beq.n	800425c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041d4:	d004      	beq.n	80041e0 <HAL_ADC_ConfigChannel+0x7c0>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a2a      	ldr	r2, [pc, #168]	; (8004284 <HAL_ADC_ConfigChannel+0x864>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d101      	bne.n	80041e4 <HAL_ADC_ConfigChannel+0x7c4>
 80041e0:	4a29      	ldr	r2, [pc, #164]	; (8004288 <HAL_ADC_ConfigChannel+0x868>)
 80041e2:	e000      	b.n	80041e6 <HAL_ADC_ConfigChannel+0x7c6>
 80041e4:	4a23      	ldr	r2, [pc, #140]	; (8004274 <HAL_ADC_ConfigChannel+0x854>)
 80041e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041ee:	4619      	mov	r1, r3
 80041f0:	4610      	mov	r0, r2
 80041f2:	f7fe fbb8 	bl	8002966 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041f6:	e031      	b.n	800425c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a27      	ldr	r2, [pc, #156]	; (800429c <HAL_ADC_ConfigChannel+0x87c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d12d      	bne.n	800425e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004202:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d127      	bne.n	800425e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a1c      	ldr	r2, [pc, #112]	; (8004284 <HAL_ADC_ConfigChannel+0x864>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d022      	beq.n	800425e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004220:	d004      	beq.n	800422c <HAL_ADC_ConfigChannel+0x80c>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a17      	ldr	r2, [pc, #92]	; (8004284 <HAL_ADC_ConfigChannel+0x864>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d101      	bne.n	8004230 <HAL_ADC_ConfigChannel+0x810>
 800422c:	4a16      	ldr	r2, [pc, #88]	; (8004288 <HAL_ADC_ConfigChannel+0x868>)
 800422e:	e000      	b.n	8004232 <HAL_ADC_ConfigChannel+0x812>
 8004230:	4a10      	ldr	r2, [pc, #64]	; (8004274 <HAL_ADC_ConfigChannel+0x854>)
 8004232:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004236:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800423a:	4619      	mov	r1, r3
 800423c:	4610      	mov	r0, r2
 800423e:	f7fe fb92 	bl	8002966 <LL_ADC_SetCommonPathInternalCh>
 8004242:	e00c      	b.n	800425e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004248:	f043 0220 	orr.w	r2, r3, #32
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004256:	e002      	b.n	800425e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004258:	bf00      	nop
 800425a:	e000      	b.n	800425e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800425c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004266:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800426a:	4618      	mov	r0, r3
 800426c:	37d8      	adds	r7, #216	; 0xd8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	50000700 	.word	0x50000700
 8004278:	c3210000 	.word	0xc3210000
 800427c:	90c00010 	.word	0x90c00010
 8004280:	50000600 	.word	0x50000600
 8004284:	50000100 	.word	0x50000100
 8004288:	50000300 	.word	0x50000300
 800428c:	20000000 	.word	0x20000000
 8004290:	053e2d63 	.word	0x053e2d63
 8004294:	c7520000 	.word	0xc7520000
 8004298:	50000500 	.word	0x50000500
 800429c:	cb840000 	.word	0xcb840000

080042a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7fe fd51 	bl	8002d54 <LL_ADC_IsEnabled>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d14d      	bne.n	8004354 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689a      	ldr	r2, [r3, #8]
 80042be:	4b28      	ldr	r3, [pc, #160]	; (8004360 <ADC_Enable+0xc0>)
 80042c0:	4013      	ands	r3, r2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00d      	beq.n	80042e2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ca:	f043 0210 	orr.w	r2, r3, #16
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042d6:	f043 0201 	orr.w	r2, r3, #1
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e039      	b.n	8004356 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7fe fd0c 	bl	8002d04 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80042ec:	f7fe fb1c 	bl	8002928 <HAL_GetTick>
 80042f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042f2:	e028      	b.n	8004346 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7fe fd2b 	bl	8002d54 <LL_ADC_IsEnabled>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d104      	bne.n	800430e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4618      	mov	r0, r3
 800430a:	f7fe fcfb 	bl	8002d04 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800430e:	f7fe fb0b 	bl	8002928 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d914      	bls.n	8004346 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b01      	cmp	r3, #1
 8004328:	d00d      	beq.n	8004346 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800432e:	f043 0210 	orr.w	r2, r3, #16
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800433a:	f043 0201 	orr.w	r2, r3, #1
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e007      	b.n	8004356 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b01      	cmp	r3, #1
 8004352:	d1cf      	bne.n	80042f4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	8000003f 	.word	0x8000003f

08004364 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4618      	mov	r0, r3
 8004372:	f7fe fd02 	bl	8002d7a <LL_ADC_IsDisableOngoing>
 8004376:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4618      	mov	r0, r3
 800437e:	f7fe fce9 	bl	8002d54 <LL_ADC_IsEnabled>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d047      	beq.n	8004418 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d144      	bne.n	8004418 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 030d 	and.w	r3, r3, #13
 8004398:	2b01      	cmp	r3, #1
 800439a:	d10c      	bne.n	80043b6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7fe fcc3 	bl	8002d2c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2203      	movs	r2, #3
 80043ac:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80043ae:	f7fe fabb 	bl	8002928 <HAL_GetTick>
 80043b2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80043b4:	e029      	b.n	800440a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ba:	f043 0210 	orr.w	r2, r3, #16
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043c6:	f043 0201 	orr.w	r2, r3, #1
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e023      	b.n	800441a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80043d2:	f7fe faa9 	bl	8002928 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d914      	bls.n	800440a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00d      	beq.n	800440a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f2:	f043 0210 	orr.w	r2, r3, #16
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043fe:	f043 0201 	orr.w	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e007      	b.n	800441a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1dc      	bne.n	80043d2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004434:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004438:	2b00      	cmp	r3, #0
 800443a:	d14b      	bne.n	80044d4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004440:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0308 	and.w	r3, r3, #8
 8004452:	2b00      	cmp	r3, #0
 8004454:	d021      	beq.n	800449a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f7fe fb42 	bl	8002ae4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d032      	beq.n	80044cc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d12b      	bne.n	80044cc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004478:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004484:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d11f      	bne.n	80044cc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004490:	f043 0201 	orr.w	r2, r3, #1
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	65da      	str	r2, [r3, #92]	; 0x5c
 8004498:	e018      	b.n	80044cc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d111      	bne.n	80044cc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d105      	bne.n	80044cc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c4:	f043 0201 	orr.w	r2, r3, #1
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f7fd f8bb 	bl	8001648 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80044d2:	e00e      	b.n	80044f2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d8:	f003 0310 	and.w	r3, r3, #16
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d003      	beq.n	80044e8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f7ff fa93 	bl	8003a0c <HAL_ADC_ErrorCallback>
}
 80044e6:	e004      	b.n	80044f2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	4798      	blx	r3
}
 80044f2:	bf00      	nop
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b084      	sub	sp, #16
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004506:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f7ff fa6b 	bl	80039e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800450e:	bf00      	nop
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b084      	sub	sp, #16
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004522:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004528:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004534:	f043 0204 	orr.w	r2, r3, #4
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f7ff fa65 	bl	8003a0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004542:	bf00      	nop
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <LL_ADC_IsEnabled>:
{
 800454a:	b480      	push	{r7}
 800454c:	b083      	sub	sp, #12
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b01      	cmp	r3, #1
 800455c:	d101      	bne.n	8004562 <LL_ADC_IsEnabled+0x18>
 800455e:	2301      	movs	r3, #1
 8004560:	e000      	b.n	8004564 <LL_ADC_IsEnabled+0x1a>
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <LL_ADC_StartCalibration>:
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004582:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800458c:	4313      	orrs	r3, r2
 800458e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	609a      	str	r2, [r3, #8]
}
 8004596:	bf00      	nop
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <LL_ADC_IsCalibrationOnGoing>:
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045b6:	d101      	bne.n	80045bc <LL_ADC_IsCalibrationOnGoing+0x1a>
 80045b8:	2301      	movs	r3, #1
 80045ba:	e000      	b.n	80045be <LL_ADC_IsCalibrationOnGoing+0x1c>
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <LL_ADC_REG_IsConversionOngoing>:
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 0304 	and.w	r3, r3, #4
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d101      	bne.n	80045e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80045de:	2301      	movs	r3, #1
 80045e0:	e000      	b.n	80045e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004604:	2b01      	cmp	r3, #1
 8004606:	d101      	bne.n	800460c <HAL_ADCEx_Calibration_Start+0x1c>
 8004608:	2302      	movs	r3, #2
 800460a:	e04d      	b.n	80046a8 <HAL_ADCEx_Calibration_Start+0xb8>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7ff fea5 	bl	8004364 <ADC_Disable>
 800461a:	4603      	mov	r3, r0
 800461c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800461e:	7bfb      	ldrb	r3, [r7, #15]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d136      	bne.n	8004692 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004628:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800462c:	f023 0302 	bic.w	r3, r3, #2
 8004630:	f043 0202 	orr.w	r2, r3, #2
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6839      	ldr	r1, [r7, #0]
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff ff96 	bl	8004570 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004644:	e014      	b.n	8004670 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	3301      	adds	r3, #1
 800464a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	4a18      	ldr	r2, [pc, #96]	; (80046b0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d90d      	bls.n	8004670 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004658:	f023 0312 	bic.w	r3, r3, #18
 800465c:	f043 0210 	orr.w	r2, r3, #16
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e01b      	b.n	80046a8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4618      	mov	r0, r3
 8004676:	f7ff ff94 	bl	80045a2 <LL_ADC_IsCalibrationOnGoing>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1e2      	bne.n	8004646 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004684:	f023 0303 	bic.w	r3, r3, #3
 8004688:	f043 0201 	orr.w	r2, r3, #1
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004690:	e005      	b.n	800469e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004696:	f043 0210 	orr.w	r2, r3, #16
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80046a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	0004de01 	.word	0x0004de01

080046b4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004718:	b590      	push	{r4, r7, lr}
 800471a:	b0a1      	sub	sp, #132	; 0x84
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800472e:	2b01      	cmp	r3, #1
 8004730:	d101      	bne.n	8004736 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004732:	2302      	movs	r3, #2
 8004734:	e0e7      	b.n	8004906 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800473e:	2300      	movs	r3, #0
 8004740:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004742:	2300      	movs	r3, #0
 8004744:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800474e:	d102      	bne.n	8004756 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004750:	4b6f      	ldr	r3, [pc, #444]	; (8004910 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004752:	60bb      	str	r3, [r7, #8]
 8004754:	e009      	b.n	800476a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a6e      	ldr	r2, [pc, #440]	; (8004914 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d102      	bne.n	8004766 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004760:	4b6d      	ldr	r3, [pc, #436]	; (8004918 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004762:	60bb      	str	r3, [r7, #8]
 8004764:	e001      	b.n	800476a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004766:	2300      	movs	r3, #0
 8004768:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10b      	bne.n	8004788 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004774:	f043 0220 	orr.w	r2, r3, #32
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e0be      	b.n	8004906 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff ff1d 	bl	80045ca <LL_ADC_REG_IsConversionOngoing>
 8004790:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4618      	mov	r0, r3
 8004798:	f7ff ff17 	bl	80045ca <LL_ADC_REG_IsConversionOngoing>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f040 80a0 	bne.w	80048e4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80047a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f040 809c 	bne.w	80048e4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047b4:	d004      	beq.n	80047c0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a55      	ldr	r2, [pc, #340]	; (8004910 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d101      	bne.n	80047c4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80047c0:	4b56      	ldr	r3, [pc, #344]	; (800491c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80047c2:	e000      	b.n	80047c6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80047c4:	4b56      	ldr	r3, [pc, #344]	; (8004920 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80047c6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d04b      	beq.n	8004868 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80047d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	6859      	ldr	r1, [r3, #4]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047e2:	035b      	lsls	r3, r3, #13
 80047e4:	430b      	orrs	r3, r1
 80047e6:	431a      	orrs	r2, r3
 80047e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047ea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047f4:	d004      	beq.n	8004800 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a45      	ldr	r2, [pc, #276]	; (8004910 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d10f      	bne.n	8004820 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004800:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004804:	f7ff fea1 	bl	800454a <LL_ADC_IsEnabled>
 8004808:	4604      	mov	r4, r0
 800480a:	4841      	ldr	r0, [pc, #260]	; (8004910 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800480c:	f7ff fe9d 	bl	800454a <LL_ADC_IsEnabled>
 8004810:	4603      	mov	r3, r0
 8004812:	4323      	orrs	r3, r4
 8004814:	2b00      	cmp	r3, #0
 8004816:	bf0c      	ite	eq
 8004818:	2301      	moveq	r3, #1
 800481a:	2300      	movne	r3, #0
 800481c:	b2db      	uxtb	r3, r3
 800481e:	e012      	b.n	8004846 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004820:	483c      	ldr	r0, [pc, #240]	; (8004914 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004822:	f7ff fe92 	bl	800454a <LL_ADC_IsEnabled>
 8004826:	4604      	mov	r4, r0
 8004828:	483b      	ldr	r0, [pc, #236]	; (8004918 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800482a:	f7ff fe8e 	bl	800454a <LL_ADC_IsEnabled>
 800482e:	4603      	mov	r3, r0
 8004830:	431c      	orrs	r4, r3
 8004832:	483c      	ldr	r0, [pc, #240]	; (8004924 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004834:	f7ff fe89 	bl	800454a <LL_ADC_IsEnabled>
 8004838:	4603      	mov	r3, r0
 800483a:	4323      	orrs	r3, r4
 800483c:	2b00      	cmp	r3, #0
 800483e:	bf0c      	ite	eq
 8004840:	2301      	moveq	r3, #1
 8004842:	2300      	movne	r3, #0
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d056      	beq.n	80048f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800484a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004852:	f023 030f 	bic.w	r3, r3, #15
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	6811      	ldr	r1, [r2, #0]
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	6892      	ldr	r2, [r2, #8]
 800485e:	430a      	orrs	r2, r1
 8004860:	431a      	orrs	r2, r3
 8004862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004864:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004866:	e047      	b.n	80048f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004868:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004870:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004872:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800487c:	d004      	beq.n	8004888 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a23      	ldr	r2, [pc, #140]	; (8004910 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d10f      	bne.n	80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004888:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800488c:	f7ff fe5d 	bl	800454a <LL_ADC_IsEnabled>
 8004890:	4604      	mov	r4, r0
 8004892:	481f      	ldr	r0, [pc, #124]	; (8004910 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004894:	f7ff fe59 	bl	800454a <LL_ADC_IsEnabled>
 8004898:	4603      	mov	r3, r0
 800489a:	4323      	orrs	r3, r4
 800489c:	2b00      	cmp	r3, #0
 800489e:	bf0c      	ite	eq
 80048a0:	2301      	moveq	r3, #1
 80048a2:	2300      	movne	r3, #0
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	e012      	b.n	80048ce <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80048a8:	481a      	ldr	r0, [pc, #104]	; (8004914 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80048aa:	f7ff fe4e 	bl	800454a <LL_ADC_IsEnabled>
 80048ae:	4604      	mov	r4, r0
 80048b0:	4819      	ldr	r0, [pc, #100]	; (8004918 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80048b2:	f7ff fe4a 	bl	800454a <LL_ADC_IsEnabled>
 80048b6:	4603      	mov	r3, r0
 80048b8:	431c      	orrs	r4, r3
 80048ba:	481a      	ldr	r0, [pc, #104]	; (8004924 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80048bc:	f7ff fe45 	bl	800454a <LL_ADC_IsEnabled>
 80048c0:	4603      	mov	r3, r0
 80048c2:	4323      	orrs	r3, r4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	bf0c      	ite	eq
 80048c8:	2301      	moveq	r3, #1
 80048ca:	2300      	movne	r3, #0
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d012      	beq.n	80048f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80048d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80048da:	f023 030f 	bic.w	r3, r3, #15
 80048de:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80048e0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048e2:	e009      	b.n	80048f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e8:	f043 0220 	orr.w	r2, r3, #32
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80048f6:	e000      	b.n	80048fa <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004902:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004906:	4618      	mov	r0, r3
 8004908:	3784      	adds	r7, #132	; 0x84
 800490a:	46bd      	mov	sp, r7
 800490c:	bd90      	pop	{r4, r7, pc}
 800490e:	bf00      	nop
 8004910:	50000100 	.word	0x50000100
 8004914:	50000400 	.word	0x50000400
 8004918:	50000500 	.word	0x50000500
 800491c:	50000300 	.word	0x50000300
 8004920:	50000700 	.word	0x50000700
 8004924:	50000600 	.word	0x50000600

08004928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004938:	4b0c      	ldr	r3, [pc, #48]	; (800496c <__NVIC_SetPriorityGrouping+0x44>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004944:	4013      	ands	r3, r2
 8004946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004950:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800495a:	4a04      	ldr	r2, [pc, #16]	; (800496c <__NVIC_SetPriorityGrouping+0x44>)
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	60d3      	str	r3, [r2, #12]
}
 8004960:	bf00      	nop
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	e000ed00 	.word	0xe000ed00

08004970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004974:	4b04      	ldr	r3, [pc, #16]	; (8004988 <__NVIC_GetPriorityGrouping+0x18>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	0a1b      	lsrs	r3, r3, #8
 800497a:	f003 0307 	and.w	r3, r3, #7
}
 800497e:	4618      	mov	r0, r3
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	e000ed00 	.word	0xe000ed00

0800498c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	4603      	mov	r3, r0
 8004994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800499a:	2b00      	cmp	r3, #0
 800499c:	db0b      	blt.n	80049b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800499e:	79fb      	ldrb	r3, [r7, #7]
 80049a0:	f003 021f 	and.w	r2, r3, #31
 80049a4:	4907      	ldr	r1, [pc, #28]	; (80049c4 <__NVIC_EnableIRQ+0x38>)
 80049a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049aa:	095b      	lsrs	r3, r3, #5
 80049ac:	2001      	movs	r0, #1
 80049ae:	fa00 f202 	lsl.w	r2, r0, r2
 80049b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	e000e100 	.word	0xe000e100

080049c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	4603      	mov	r3, r0
 80049d0:	6039      	str	r1, [r7, #0]
 80049d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	db0a      	blt.n	80049f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	490c      	ldr	r1, [pc, #48]	; (8004a14 <__NVIC_SetPriority+0x4c>)
 80049e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e6:	0112      	lsls	r2, r2, #4
 80049e8:	b2d2      	uxtb	r2, r2
 80049ea:	440b      	add	r3, r1
 80049ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049f0:	e00a      	b.n	8004a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	4908      	ldr	r1, [pc, #32]	; (8004a18 <__NVIC_SetPriority+0x50>)
 80049f8:	79fb      	ldrb	r3, [r7, #7]
 80049fa:	f003 030f 	and.w	r3, r3, #15
 80049fe:	3b04      	subs	r3, #4
 8004a00:	0112      	lsls	r2, r2, #4
 8004a02:	b2d2      	uxtb	r2, r2
 8004a04:	440b      	add	r3, r1
 8004a06:	761a      	strb	r2, [r3, #24]
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr
 8004a14:	e000e100 	.word	0xe000e100
 8004a18:	e000ed00 	.word	0xe000ed00

08004a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b089      	sub	sp, #36	; 0x24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f003 0307 	and.w	r3, r3, #7
 8004a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	f1c3 0307 	rsb	r3, r3, #7
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	bf28      	it	cs
 8004a3a:	2304      	movcs	r3, #4
 8004a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	3304      	adds	r3, #4
 8004a42:	2b06      	cmp	r3, #6
 8004a44:	d902      	bls.n	8004a4c <NVIC_EncodePriority+0x30>
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	3b03      	subs	r3, #3
 8004a4a:	e000      	b.n	8004a4e <NVIC_EncodePriority+0x32>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a50:	f04f 32ff 	mov.w	r2, #4294967295
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5a:	43da      	mvns	r2, r3
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	401a      	ands	r2, r3
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a64:	f04f 31ff 	mov.w	r1, #4294967295
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6e:	43d9      	mvns	r1, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a74:	4313      	orrs	r3, r2
         );
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3724      	adds	r7, #36	; 0x24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b082      	sub	sp, #8
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7ff ff4c 	bl	8004928 <__NVIC_SetPriorityGrouping>
}
 8004a90:	bf00      	nop
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
 8004aa4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004aa6:	f7ff ff63 	bl	8004970 <__NVIC_GetPriorityGrouping>
 8004aaa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	68b9      	ldr	r1, [r7, #8]
 8004ab0:	6978      	ldr	r0, [r7, #20]
 8004ab2:	f7ff ffb3 	bl	8004a1c <NVIC_EncodePriority>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004abc:	4611      	mov	r1, r2
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7ff ff82 	bl	80049c8 <__NVIC_SetPriority>
}
 8004ac4:	bf00      	nop
 8004ac6:	3718      	adds	r7, #24
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7ff ff56 	bl	800498c <__NVIC_EnableIRQ>
}
 8004ae0:	bf00      	nop
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e08d      	b.n	8004c16 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	4b47      	ldr	r3, [pc, #284]	; (8004c20 <HAL_DMA_Init+0x138>)
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d80f      	bhi.n	8004b26 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	4b45      	ldr	r3, [pc, #276]	; (8004c24 <HAL_DMA_Init+0x13c>)
 8004b0e:	4413      	add	r3, r2
 8004b10:	4a45      	ldr	r2, [pc, #276]	; (8004c28 <HAL_DMA_Init+0x140>)
 8004b12:	fba2 2303 	umull	r2, r3, r2, r3
 8004b16:	091b      	lsrs	r3, r3, #4
 8004b18:	009a      	lsls	r2, r3, #2
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a42      	ldr	r2, [pc, #264]	; (8004c2c <HAL_DMA_Init+0x144>)
 8004b22:	641a      	str	r2, [r3, #64]	; 0x40
 8004b24:	e00e      	b.n	8004b44 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	4b40      	ldr	r3, [pc, #256]	; (8004c30 <HAL_DMA_Init+0x148>)
 8004b2e:	4413      	add	r3, r2
 8004b30:	4a3d      	ldr	r2, [pc, #244]	; (8004c28 <HAL_DMA_Init+0x140>)
 8004b32:	fba2 2303 	umull	r2, r3, r2, r3
 8004b36:	091b      	lsrs	r3, r3, #4
 8004b38:	009a      	lsls	r2, r3, #2
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a3c      	ldr	r2, [pc, #240]	; (8004c34 <HAL_DMA_Init+0x14c>)
 8004b42:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004b68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 fa76 	bl	8005088 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ba4:	d102      	bne.n	8004bac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bb4:	b2d2      	uxtb	r2, r2
 8004bb6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004bc0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d010      	beq.n	8004bec <HAL_DMA_Init+0x104>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	d80c      	bhi.n	8004bec <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 fa96 	bl	8005104 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bdc:	2200      	movs	r2, #0
 8004bde:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004be8:	605a      	str	r2, [r3, #4]
 8004bea:	e008      	b.n	8004bfe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	40020407 	.word	0x40020407
 8004c24:	bffdfff8 	.word	0xbffdfff8
 8004c28:	cccccccd 	.word	0xcccccccd
 8004c2c:	40020000 	.word	0x40020000
 8004c30:	bffdfbf8 	.word	0xbffdfbf8
 8004c34:	40020400 	.word	0x40020400

08004c38 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d101      	bne.n	8004c58 <HAL_DMA_Start_IT+0x20>
 8004c54:	2302      	movs	r3, #2
 8004c56:	e066      	b.n	8004d26 <HAL_DMA_Start_IT+0xee>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d155      	bne.n	8004d18 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 0201 	bic.w	r2, r2, #1
 8004c88:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	68b9      	ldr	r1, [r7, #8]
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 f9bb 	bl	800500c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d008      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f042 020e 	orr.w	r2, r2, #14
 8004cac:	601a      	str	r2, [r3, #0]
 8004cae:	e00f      	b.n	8004cd0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 0204 	bic.w	r2, r2, #4
 8004cbe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 020a 	orr.w	r2, r2, #10
 8004cce:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d007      	beq.n	8004cee <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cec:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d007      	beq.n	8004d06 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d04:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f042 0201 	orr.w	r2, r2, #1
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	e005      	b.n	8004d24 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004d20:	2302      	movs	r3, #2
 8004d22:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3718      	adds	r7, #24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b085      	sub	sp, #20
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d005      	beq.n	8004d52 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2204      	movs	r2, #4
 8004d4a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	73fb      	strb	r3, [r7, #15]
 8004d50:	e037      	b.n	8004dc2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 020e 	bic.w	r2, r2, #14
 8004d60:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d70:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 0201 	bic.w	r2, r2, #1
 8004d80:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d86:	f003 021f 	and.w	r2, r3, #31
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	2101      	movs	r1, #1
 8004d90:	fa01 f202 	lsl.w	r2, r1, r2
 8004d94:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004d9e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00c      	beq.n	8004dc2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004db6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004dc0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004de8:	2300      	movs	r3, #0
 8004dea:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d00d      	beq.n	8004e14 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2204      	movs	r2, #4
 8004dfc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	73fb      	strb	r3, [r7, #15]
 8004e12:	e047      	b.n	8004ea4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 020e 	bic.w	r2, r2, #14
 8004e22:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0201 	bic.w	r2, r2, #1
 8004e32:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e48:	f003 021f 	and.w	r2, r3, #31
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e50:	2101      	movs	r1, #1
 8004e52:	fa01 f202 	lsl.w	r2, r1, r2
 8004e56:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004e60:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00c      	beq.n	8004e84 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e78:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004e82:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d003      	beq.n	8004ea4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	4798      	blx	r3
    }
  }
  return status;
 8004ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eca:	f003 031f 	and.w	r3, r3, #31
 8004ece:	2204      	movs	r2, #4
 8004ed0:	409a      	lsls	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d026      	beq.n	8004f28 <HAL_DMA_IRQHandler+0x7a>
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	f003 0304 	and.w	r3, r3, #4
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d021      	beq.n	8004f28 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d107      	bne.n	8004f02 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0204 	bic.w	r2, r2, #4
 8004f00:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f06:	f003 021f 	and.w	r2, r3, #31
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	2104      	movs	r1, #4
 8004f10:	fa01 f202 	lsl.w	r2, r1, r2
 8004f14:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d071      	beq.n	8005002 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004f26:	e06c      	b.n	8005002 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f2c:	f003 031f 	and.w	r3, r3, #31
 8004f30:	2202      	movs	r2, #2
 8004f32:	409a      	lsls	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4013      	ands	r3, r2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d02e      	beq.n	8004f9a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d029      	beq.n	8004f9a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0320 	and.w	r3, r3, #32
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10b      	bne.n	8004f6c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 020a 	bic.w	r2, r2, #10
 8004f62:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f70:	f003 021f 	and.w	r2, r3, #31
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f78:	2102      	movs	r1, #2
 8004f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8004f7e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d038      	beq.n	8005002 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004f98:	e033      	b.n	8005002 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9e:	f003 031f 	and.w	r3, r3, #31
 8004fa2:	2208      	movs	r2, #8
 8004fa4:	409a      	lsls	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d02a      	beq.n	8005004 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	f003 0308 	and.w	r3, r3, #8
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d025      	beq.n	8005004 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 020e 	bic.w	r2, r2, #14
 8004fc6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fcc:	f003 021f 	and.w	r2, r3, #31
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	fa01 f202 	lsl.w	r2, r1, r2
 8004fda:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d004      	beq.n	8005004 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005002:	bf00      	nop
 8005004:	bf00      	nop
}
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
 8005018:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005022:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005028:	2b00      	cmp	r3, #0
 800502a:	d004      	beq.n	8005036 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005034:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503a:	f003 021f 	and.w	r2, r3, #31
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	2101      	movs	r1, #1
 8005044:	fa01 f202 	lsl.w	r2, r1, r2
 8005048:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	2b10      	cmp	r3, #16
 8005058:	d108      	bne.n	800506c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800506a:	e007      	b.n	800507c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	60da      	str	r2, [r3, #12]
}
 800507c:	bf00      	nop
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	461a      	mov	r2, r3
 8005096:	4b16      	ldr	r3, [pc, #88]	; (80050f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005098:	429a      	cmp	r2, r3
 800509a:	d802      	bhi.n	80050a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800509c:	4b15      	ldr	r3, [pc, #84]	; (80050f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800509e:	617b      	str	r3, [r7, #20]
 80050a0:	e001      	b.n	80050a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80050a2:	4b15      	ldr	r3, [pc, #84]	; (80050f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80050a4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	3b08      	subs	r3, #8
 80050b2:	4a12      	ldr	r2, [pc, #72]	; (80050fc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80050b4:	fba2 2303 	umull	r2, r3, r2, r3
 80050b8:	091b      	lsrs	r3, r3, #4
 80050ba:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c0:	089b      	lsrs	r3, r3, #2
 80050c2:	009a      	lsls	r2, r3, #2
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	4413      	add	r3, r2
 80050c8:	461a      	mov	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a0b      	ldr	r2, [pc, #44]	; (8005100 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80050d2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f003 031f 	and.w	r3, r3, #31
 80050da:	2201      	movs	r2, #1
 80050dc:	409a      	lsls	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80050e2:	bf00      	nop
 80050e4:	371c      	adds	r7, #28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	40020407 	.word	0x40020407
 80050f4:	40020800 	.word	0x40020800
 80050f8:	40020820 	.word	0x40020820
 80050fc:	cccccccd 	.word	0xcccccccd
 8005100:	40020880 	.word	0x40020880

08005104 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	b2db      	uxtb	r3, r3
 8005112:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	4b0b      	ldr	r3, [pc, #44]	; (8005144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005118:	4413      	add	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	461a      	mov	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a08      	ldr	r2, [pc, #32]	; (8005148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005126:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	3b01      	subs	r3, #1
 800512c:	f003 031f 	and.w	r3, r3, #31
 8005130:	2201      	movs	r2, #1
 8005132:	409a      	lsls	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005138:	bf00      	nop
 800513a:	3714      	adds	r7, #20
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr
 8005144:	1000823f 	.word	0x1000823f
 8005148:	40020940 	.word	0x40020940

0800514c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005156:	2300      	movs	r3, #0
 8005158:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800515a:	e15a      	b.n	8005412 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	2101      	movs	r1, #1
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	fa01 f303 	lsl.w	r3, r1, r3
 8005168:	4013      	ands	r3, r2
 800516a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 814c 	beq.w	800540c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f003 0303 	and.w	r3, r3, #3
 800517c:	2b01      	cmp	r3, #1
 800517e:	d005      	beq.n	800518c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005188:	2b02      	cmp	r3, #2
 800518a:	d130      	bne.n	80051ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	2203      	movs	r2, #3
 8005198:	fa02 f303 	lsl.w	r3, r2, r3
 800519c:	43db      	mvns	r3, r3
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	4013      	ands	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	68da      	ldr	r2, [r3, #12]
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	fa02 f303 	lsl.w	r3, r2, r3
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80051c2:	2201      	movs	r2, #1
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ca:	43db      	mvns	r3, r3
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	4013      	ands	r3, r2
 80051d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	091b      	lsrs	r3, r3, #4
 80051d8:	f003 0201 	and.w	r2, r3, #1
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	fa02 f303 	lsl.w	r3, r2, r3
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f003 0303 	and.w	r3, r3, #3
 80051f6:	2b03      	cmp	r3, #3
 80051f8:	d017      	beq.n	800522a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	2203      	movs	r2, #3
 8005206:	fa02 f303 	lsl.w	r3, r2, r3
 800520a:	43db      	mvns	r3, r3
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	4013      	ands	r3, r2
 8005210:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	689a      	ldr	r2, [r3, #8]
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	fa02 f303 	lsl.w	r3, r2, r3
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	4313      	orrs	r3, r2
 8005222:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f003 0303 	and.w	r3, r3, #3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d123      	bne.n	800527e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	08da      	lsrs	r2, r3, #3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	3208      	adds	r2, #8
 800523e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005242:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f003 0307 	and.w	r3, r3, #7
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	220f      	movs	r2, #15
 800524e:	fa02 f303 	lsl.w	r3, r2, r3
 8005252:	43db      	mvns	r3, r3
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	4013      	ands	r3, r2
 8005258:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	691a      	ldr	r2, [r3, #16]
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f003 0307 	and.w	r3, r3, #7
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	fa02 f303 	lsl.w	r3, r2, r3
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	4313      	orrs	r3, r2
 800526e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	08da      	lsrs	r2, r3, #3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	3208      	adds	r2, #8
 8005278:	6939      	ldr	r1, [r7, #16]
 800527a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	2203      	movs	r2, #3
 800528a:	fa02 f303 	lsl.w	r3, r2, r3
 800528e:	43db      	mvns	r3, r3
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	4013      	ands	r3, r2
 8005294:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f003 0203 	and.w	r2, r3, #3
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	005b      	lsls	r3, r3, #1
 80052a2:	fa02 f303 	lsl.w	r3, r2, r3
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f000 80a6 	beq.w	800540c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052c0:	4b5b      	ldr	r3, [pc, #364]	; (8005430 <HAL_GPIO_Init+0x2e4>)
 80052c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052c4:	4a5a      	ldr	r2, [pc, #360]	; (8005430 <HAL_GPIO_Init+0x2e4>)
 80052c6:	f043 0301 	orr.w	r3, r3, #1
 80052ca:	6613      	str	r3, [r2, #96]	; 0x60
 80052cc:	4b58      	ldr	r3, [pc, #352]	; (8005430 <HAL_GPIO_Init+0x2e4>)
 80052ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	60bb      	str	r3, [r7, #8]
 80052d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052d8:	4a56      	ldr	r2, [pc, #344]	; (8005434 <HAL_GPIO_Init+0x2e8>)
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	089b      	lsrs	r3, r3, #2
 80052de:	3302      	adds	r3, #2
 80052e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f003 0303 	and.w	r3, r3, #3
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	220f      	movs	r2, #15
 80052f0:	fa02 f303 	lsl.w	r3, r2, r3
 80052f4:	43db      	mvns	r3, r3
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	4013      	ands	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005302:	d01f      	beq.n	8005344 <HAL_GPIO_Init+0x1f8>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a4c      	ldr	r2, [pc, #304]	; (8005438 <HAL_GPIO_Init+0x2ec>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d019      	beq.n	8005340 <HAL_GPIO_Init+0x1f4>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a4b      	ldr	r2, [pc, #300]	; (800543c <HAL_GPIO_Init+0x2f0>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d013      	beq.n	800533c <HAL_GPIO_Init+0x1f0>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a4a      	ldr	r2, [pc, #296]	; (8005440 <HAL_GPIO_Init+0x2f4>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d00d      	beq.n	8005338 <HAL_GPIO_Init+0x1ec>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a49      	ldr	r2, [pc, #292]	; (8005444 <HAL_GPIO_Init+0x2f8>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d007      	beq.n	8005334 <HAL_GPIO_Init+0x1e8>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a48      	ldr	r2, [pc, #288]	; (8005448 <HAL_GPIO_Init+0x2fc>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d101      	bne.n	8005330 <HAL_GPIO_Init+0x1e4>
 800532c:	2305      	movs	r3, #5
 800532e:	e00a      	b.n	8005346 <HAL_GPIO_Init+0x1fa>
 8005330:	2306      	movs	r3, #6
 8005332:	e008      	b.n	8005346 <HAL_GPIO_Init+0x1fa>
 8005334:	2304      	movs	r3, #4
 8005336:	e006      	b.n	8005346 <HAL_GPIO_Init+0x1fa>
 8005338:	2303      	movs	r3, #3
 800533a:	e004      	b.n	8005346 <HAL_GPIO_Init+0x1fa>
 800533c:	2302      	movs	r3, #2
 800533e:	e002      	b.n	8005346 <HAL_GPIO_Init+0x1fa>
 8005340:	2301      	movs	r3, #1
 8005342:	e000      	b.n	8005346 <HAL_GPIO_Init+0x1fa>
 8005344:	2300      	movs	r3, #0
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	f002 0203 	and.w	r2, r2, #3
 800534c:	0092      	lsls	r2, r2, #2
 800534e:	4093      	lsls	r3, r2
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	4313      	orrs	r3, r2
 8005354:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005356:	4937      	ldr	r1, [pc, #220]	; (8005434 <HAL_GPIO_Init+0x2e8>)
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	089b      	lsrs	r3, r3, #2
 800535c:	3302      	adds	r3, #2
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005364:	4b39      	ldr	r3, [pc, #228]	; (800544c <HAL_GPIO_Init+0x300>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	43db      	mvns	r3, r3
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	4013      	ands	r3, r2
 8005372:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d003      	beq.n	8005388 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	4313      	orrs	r3, r2
 8005386:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005388:	4a30      	ldr	r2, [pc, #192]	; (800544c <HAL_GPIO_Init+0x300>)
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800538e:	4b2f      	ldr	r3, [pc, #188]	; (800544c <HAL_GPIO_Init+0x300>)
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	43db      	mvns	r3, r3
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	4013      	ands	r3, r2
 800539c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80053b2:	4a26      	ldr	r2, [pc, #152]	; (800544c <HAL_GPIO_Init+0x300>)
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80053b8:	4b24      	ldr	r3, [pc, #144]	; (800544c <HAL_GPIO_Init+0x300>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	43db      	mvns	r3, r3
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	4013      	ands	r3, r2
 80053c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d003      	beq.n	80053dc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	4313      	orrs	r3, r2
 80053da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80053dc:	4a1b      	ldr	r2, [pc, #108]	; (800544c <HAL_GPIO_Init+0x300>)
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80053e2:	4b1a      	ldr	r3, [pc, #104]	; (800544c <HAL_GPIO_Init+0x300>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	43db      	mvns	r3, r3
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	4013      	ands	r3, r2
 80053f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4313      	orrs	r3, r2
 8005404:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005406:	4a11      	ldr	r2, [pc, #68]	; (800544c <HAL_GPIO_Init+0x300>)
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	3301      	adds	r3, #1
 8005410:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	fa22 f303 	lsr.w	r3, r2, r3
 800541c:	2b00      	cmp	r3, #0
 800541e:	f47f ae9d 	bne.w	800515c <HAL_GPIO_Init+0x10>
  }
}
 8005422:	bf00      	nop
 8005424:	bf00      	nop
 8005426:	371c      	adds	r7, #28
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	40021000 	.word	0x40021000
 8005434:	40010000 	.word	0x40010000
 8005438:	48000400 	.word	0x48000400
 800543c:	48000800 	.word	0x48000800
 8005440:	48000c00 	.word	0x48000c00
 8005444:	48001000 	.word	0x48001000
 8005448:	48001400 	.word	0x48001400
 800544c:	40010400 	.word	0x40010400

08005450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	460b      	mov	r3, r1
 800545a:	807b      	strh	r3, [r7, #2]
 800545c:	4613      	mov	r3, r2
 800545e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005460:	787b      	ldrb	r3, [r7, #1]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005466:	887a      	ldrh	r2, [r7, #2]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800546c:	e002      	b.n	8005474 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800546e:	887a      	ldrh	r2, [r7, #2]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	4603      	mov	r3, r0
 8005488:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800548a:	4b08      	ldr	r3, [pc, #32]	; (80054ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800548c:	695a      	ldr	r2, [r3, #20]
 800548e:	88fb      	ldrh	r3, [r7, #6]
 8005490:	4013      	ands	r3, r2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d006      	beq.n	80054a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005496:	4a05      	ldr	r2, [pc, #20]	; (80054ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005498:	88fb      	ldrh	r3, [r7, #6]
 800549a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800549c:	88fb      	ldrh	r3, [r7, #6]
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 f806 	bl	80054b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80054a4:	bf00      	nop
 80054a6:	3708      	adds	r7, #8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	40010400 	.word	0x40010400

080054b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	4603      	mov	r3, r0
 80054b8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80054ba:	bf00      	nop
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
	...

080054c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d141      	bne.n	800555a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80054d6:	4b4b      	ldr	r3, [pc, #300]	; (8005604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80054de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e2:	d131      	bne.n	8005548 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054e4:	4b47      	ldr	r3, [pc, #284]	; (8005604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054ea:	4a46      	ldr	r2, [pc, #280]	; (8005604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80054f4:	4b43      	ldr	r3, [pc, #268]	; (8005604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80054fc:	4a41      	ldr	r2, [pc, #260]	; (8005604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005502:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005504:	4b40      	ldr	r3, [pc, #256]	; (8005608 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2232      	movs	r2, #50	; 0x32
 800550a:	fb02 f303 	mul.w	r3, r2, r3
 800550e:	4a3f      	ldr	r2, [pc, #252]	; (800560c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005510:	fba2 2303 	umull	r2, r3, r2, r3
 8005514:	0c9b      	lsrs	r3, r3, #18
 8005516:	3301      	adds	r3, #1
 8005518:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800551a:	e002      	b.n	8005522 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	3b01      	subs	r3, #1
 8005520:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005522:	4b38      	ldr	r3, [pc, #224]	; (8005604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800552a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800552e:	d102      	bne.n	8005536 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1f2      	bne.n	800551c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005536:	4b33      	ldr	r3, [pc, #204]	; (8005604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800553e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005542:	d158      	bne.n	80055f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e057      	b.n	80055f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005548:	4b2e      	ldr	r3, [pc, #184]	; (8005604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800554a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800554e:	4a2d      	ldr	r2, [pc, #180]	; (8005604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005554:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005558:	e04d      	b.n	80055f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005560:	d141      	bne.n	80055e6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005562:	4b28      	ldr	r3, [pc, #160]	; (8005604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800556a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800556e:	d131      	bne.n	80055d4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005570:	4b24      	ldr	r3, [pc, #144]	; (8005604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005572:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005576:	4a23      	ldr	r2, [pc, #140]	; (8005604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800557c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005580:	4b20      	ldr	r3, [pc, #128]	; (8005604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005588:	4a1e      	ldr	r2, [pc, #120]	; (8005604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800558a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800558e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005590:	4b1d      	ldr	r3, [pc, #116]	; (8005608 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2232      	movs	r2, #50	; 0x32
 8005596:	fb02 f303 	mul.w	r3, r2, r3
 800559a:	4a1c      	ldr	r2, [pc, #112]	; (800560c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800559c:	fba2 2303 	umull	r2, r3, r2, r3
 80055a0:	0c9b      	lsrs	r3, r3, #18
 80055a2:	3301      	adds	r3, #1
 80055a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055a6:	e002      	b.n	80055ae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	3b01      	subs	r3, #1
 80055ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055ae:	4b15      	ldr	r3, [pc, #84]	; (8005604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ba:	d102      	bne.n	80055c2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1f2      	bne.n	80055a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80055c2:	4b10      	ldr	r3, [pc, #64]	; (8005604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ce:	d112      	bne.n	80055f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e011      	b.n	80055f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055d4:	4b0b      	ldr	r3, [pc, #44]	; (8005604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055da:	4a0a      	ldr	r2, [pc, #40]	; (8005604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80055e4:	e007      	b.n	80055f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80055e6:	4b07      	ldr	r3, [pc, #28]	; (8005604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80055ee:	4a05      	ldr	r2, [pc, #20]	; (8005604 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055f4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr
 8005604:	40007000 	.word	0x40007000
 8005608:	20000000 	.word	0x20000000
 800560c:	431bde83 	.word	0x431bde83

08005610 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005610:	b480      	push	{r7}
 8005612:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005614:	4b05      	ldr	r3, [pc, #20]	; (800562c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	4a04      	ldr	r2, [pc, #16]	; (800562c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800561a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800561e:	6093      	str	r3, [r2, #8]
}
 8005620:	bf00      	nop
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	40007000 	.word	0x40007000

08005630 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b088      	sub	sp, #32
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e306      	b.n	8005c50 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d075      	beq.n	800573a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800564e:	4b97      	ldr	r3, [pc, #604]	; (80058ac <HAL_RCC_OscConfig+0x27c>)
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f003 030c 	and.w	r3, r3, #12
 8005656:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005658:	4b94      	ldr	r3, [pc, #592]	; (80058ac <HAL_RCC_OscConfig+0x27c>)
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	f003 0303 	and.w	r3, r3, #3
 8005660:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	2b0c      	cmp	r3, #12
 8005666:	d102      	bne.n	800566e <HAL_RCC_OscConfig+0x3e>
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	2b03      	cmp	r3, #3
 800566c:	d002      	beq.n	8005674 <HAL_RCC_OscConfig+0x44>
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	2b08      	cmp	r3, #8
 8005672:	d10b      	bne.n	800568c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005674:	4b8d      	ldr	r3, [pc, #564]	; (80058ac <HAL_RCC_OscConfig+0x27c>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d05b      	beq.n	8005738 <HAL_RCC_OscConfig+0x108>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d157      	bne.n	8005738 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e2e1      	b.n	8005c50 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005694:	d106      	bne.n	80056a4 <HAL_RCC_OscConfig+0x74>
 8005696:	4b85      	ldr	r3, [pc, #532]	; (80058ac <HAL_RCC_OscConfig+0x27c>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a84      	ldr	r2, [pc, #528]	; (80058ac <HAL_RCC_OscConfig+0x27c>)
 800569c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056a0:	6013      	str	r3, [r2, #0]
 80056a2:	e01d      	b.n	80056e0 <HAL_RCC_OscConfig+0xb0>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056ac:	d10c      	bne.n	80056c8 <HAL_RCC_OscConfig+0x98>
 80056ae:	4b7f      	ldr	r3, [pc, #508]	; (80058ac <HAL_RCC_OscConfig+0x27c>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a7e      	ldr	r2, [pc, #504]	; (80058ac <HAL_RCC_OscConfig+0x27c>)
 80056b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056b8:	6013      	str	r3, [r2, #0]
 80056ba:	4b7c      	ldr	r3, [pc, #496]	; (80058ac <HAL_RCC_OscConfig+0x27c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a7b      	ldr	r2, [pc, #492]	; (80058ac <HAL_RCC_OscConfig+0x27c>)
 80056c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	e00b      	b.n	80056e0 <HAL_RCC_OscConfig+0xb0>
 80056c8:	4b78      	ldr	r3, [pc, #480]	; (80058ac <HAL_RCC_OscConfig+0x27c>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a77      	ldr	r2, [pc, #476]	; (80058ac <HAL_RCC_OscConfig+0x27c>)
 80056ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056d2:	6013      	str	r3, [r2, #0]
 80056d4:	4b75      	ldr	r3, [pc, #468]	; (80058ac <HAL_RCC_OscConfig+0x27c>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a74      	ldr	r2, [pc, #464]	; (80058ac <HAL_RCC_OscConfig+0x27c>)
 80056da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d013      	beq.n	8005710 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e8:	f7fd f91e 	bl	8002928 <HAL_GetTick>
 80056ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056ee:	e008      	b.n	8005702 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056f0:	f7fd f91a 	bl	8002928 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b64      	cmp	r3, #100	; 0x64
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e2a6      	b.n	8005c50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005702:	4b6a      	ldr	r3, [pc, #424]	; (80058ac <HAL_RCC_OscConfig+0x27c>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d0f0      	beq.n	80056f0 <HAL_RCC_OscConfig+0xc0>
 800570e:	e014      	b.n	800573a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005710:	f7fd f90a 	bl	8002928 <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005716:	e008      	b.n	800572a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005718:	f7fd f906 	bl	8002928 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	2b64      	cmp	r3, #100	; 0x64
 8005724:	d901      	bls.n	800572a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e292      	b.n	8005c50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800572a:	4b60      	ldr	r3, [pc, #384]	; (80058ac <HAL_RCC_OscConfig+0x27c>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1f0      	bne.n	8005718 <HAL_RCC_OscConfig+0xe8>
 8005736:	e000      	b.n	800573a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d075      	beq.n	8005832 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005746:	4b59      	ldr	r3, [pc, #356]	; (80058ac <HAL_RCC_OscConfig+0x27c>)
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f003 030c 	and.w	r3, r3, #12
 800574e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005750:	4b56      	ldr	r3, [pc, #344]	; (80058ac <HAL_RCC_OscConfig+0x27c>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f003 0303 	and.w	r3, r3, #3
 8005758:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	2b0c      	cmp	r3, #12
 800575e:	d102      	bne.n	8005766 <HAL_RCC_OscConfig+0x136>
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	2b02      	cmp	r3, #2
 8005764:	d002      	beq.n	800576c <HAL_RCC_OscConfig+0x13c>
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	2b04      	cmp	r3, #4
 800576a:	d11f      	bne.n	80057ac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800576c:	4b4f      	ldr	r3, [pc, #316]	; (80058ac <HAL_RCC_OscConfig+0x27c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005774:	2b00      	cmp	r3, #0
 8005776:	d005      	beq.n	8005784 <HAL_RCC_OscConfig+0x154>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e265      	b.n	8005c50 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005784:	4b49      	ldr	r3, [pc, #292]	; (80058ac <HAL_RCC_OscConfig+0x27c>)
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	061b      	lsls	r3, r3, #24
 8005792:	4946      	ldr	r1, [pc, #280]	; (80058ac <HAL_RCC_OscConfig+0x27c>)
 8005794:	4313      	orrs	r3, r2
 8005796:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005798:	4b45      	ldr	r3, [pc, #276]	; (80058b0 <HAL_RCC_OscConfig+0x280>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4618      	mov	r0, r3
 800579e:	f7fb ffe1 	bl	8001764 <HAL_InitTick>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d043      	beq.n	8005830 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e251      	b.n	8005c50 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d023      	beq.n	80057fc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057b4:	4b3d      	ldr	r3, [pc, #244]	; (80058ac <HAL_RCC_OscConfig+0x27c>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a3c      	ldr	r2, [pc, #240]	; (80058ac <HAL_RCC_OscConfig+0x27c>)
 80057ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c0:	f7fd f8b2 	bl	8002928 <HAL_GetTick>
 80057c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057c6:	e008      	b.n	80057da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057c8:	f7fd f8ae 	bl	8002928 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d901      	bls.n	80057da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e23a      	b.n	8005c50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057da:	4b34      	ldr	r3, [pc, #208]	; (80058ac <HAL_RCC_OscConfig+0x27c>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d0f0      	beq.n	80057c8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057e6:	4b31      	ldr	r3, [pc, #196]	; (80058ac <HAL_RCC_OscConfig+0x27c>)
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	061b      	lsls	r3, r3, #24
 80057f4:	492d      	ldr	r1, [pc, #180]	; (80058ac <HAL_RCC_OscConfig+0x27c>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	604b      	str	r3, [r1, #4]
 80057fa:	e01a      	b.n	8005832 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057fc:	4b2b      	ldr	r3, [pc, #172]	; (80058ac <HAL_RCC_OscConfig+0x27c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a2a      	ldr	r2, [pc, #168]	; (80058ac <HAL_RCC_OscConfig+0x27c>)
 8005802:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005806:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005808:	f7fd f88e 	bl	8002928 <HAL_GetTick>
 800580c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800580e:	e008      	b.n	8005822 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005810:	f7fd f88a 	bl	8002928 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	2b02      	cmp	r3, #2
 800581c:	d901      	bls.n	8005822 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e216      	b.n	8005c50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005822:	4b22      	ldr	r3, [pc, #136]	; (80058ac <HAL_RCC_OscConfig+0x27c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1f0      	bne.n	8005810 <HAL_RCC_OscConfig+0x1e0>
 800582e:	e000      	b.n	8005832 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005830:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0308 	and.w	r3, r3, #8
 800583a:	2b00      	cmp	r3, #0
 800583c:	d041      	beq.n	80058c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d01c      	beq.n	8005880 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005846:	4b19      	ldr	r3, [pc, #100]	; (80058ac <HAL_RCC_OscConfig+0x27c>)
 8005848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800584c:	4a17      	ldr	r2, [pc, #92]	; (80058ac <HAL_RCC_OscConfig+0x27c>)
 800584e:	f043 0301 	orr.w	r3, r3, #1
 8005852:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005856:	f7fd f867 	bl	8002928 <HAL_GetTick>
 800585a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800585c:	e008      	b.n	8005870 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800585e:	f7fd f863 	bl	8002928 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d901      	bls.n	8005870 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e1ef      	b.n	8005c50 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005870:	4b0e      	ldr	r3, [pc, #56]	; (80058ac <HAL_RCC_OscConfig+0x27c>)
 8005872:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d0ef      	beq.n	800585e <HAL_RCC_OscConfig+0x22e>
 800587e:	e020      	b.n	80058c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005880:	4b0a      	ldr	r3, [pc, #40]	; (80058ac <HAL_RCC_OscConfig+0x27c>)
 8005882:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005886:	4a09      	ldr	r2, [pc, #36]	; (80058ac <HAL_RCC_OscConfig+0x27c>)
 8005888:	f023 0301 	bic.w	r3, r3, #1
 800588c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005890:	f7fd f84a 	bl	8002928 <HAL_GetTick>
 8005894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005896:	e00d      	b.n	80058b4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005898:	f7fd f846 	bl	8002928 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d906      	bls.n	80058b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e1d2      	b.n	8005c50 <HAL_RCC_OscConfig+0x620>
 80058aa:	bf00      	nop
 80058ac:	40021000 	.word	0x40021000
 80058b0:	200000c0 	.word	0x200000c0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058b4:	4b8c      	ldr	r3, [pc, #560]	; (8005ae8 <HAL_RCC_OscConfig+0x4b8>)
 80058b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1ea      	bne.n	8005898 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0304 	and.w	r3, r3, #4
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 80a6 	beq.w	8005a1c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058d0:	2300      	movs	r3, #0
 80058d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80058d4:	4b84      	ldr	r3, [pc, #528]	; (8005ae8 <HAL_RCC_OscConfig+0x4b8>)
 80058d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <HAL_RCC_OscConfig+0x2b4>
 80058e0:	2301      	movs	r3, #1
 80058e2:	e000      	b.n	80058e6 <HAL_RCC_OscConfig+0x2b6>
 80058e4:	2300      	movs	r3, #0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00d      	beq.n	8005906 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058ea:	4b7f      	ldr	r3, [pc, #508]	; (8005ae8 <HAL_RCC_OscConfig+0x4b8>)
 80058ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ee:	4a7e      	ldr	r2, [pc, #504]	; (8005ae8 <HAL_RCC_OscConfig+0x4b8>)
 80058f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058f4:	6593      	str	r3, [r2, #88]	; 0x58
 80058f6:	4b7c      	ldr	r3, [pc, #496]	; (8005ae8 <HAL_RCC_OscConfig+0x4b8>)
 80058f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058fe:	60fb      	str	r3, [r7, #12]
 8005900:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005902:	2301      	movs	r3, #1
 8005904:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005906:	4b79      	ldr	r3, [pc, #484]	; (8005aec <HAL_RCC_OscConfig+0x4bc>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800590e:	2b00      	cmp	r3, #0
 8005910:	d118      	bne.n	8005944 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005912:	4b76      	ldr	r3, [pc, #472]	; (8005aec <HAL_RCC_OscConfig+0x4bc>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a75      	ldr	r2, [pc, #468]	; (8005aec <HAL_RCC_OscConfig+0x4bc>)
 8005918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800591c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800591e:	f7fd f803 	bl	8002928 <HAL_GetTick>
 8005922:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005924:	e008      	b.n	8005938 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005926:	f7fc ffff 	bl	8002928 <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	2b02      	cmp	r3, #2
 8005932:	d901      	bls.n	8005938 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e18b      	b.n	8005c50 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005938:	4b6c      	ldr	r3, [pc, #432]	; (8005aec <HAL_RCC_OscConfig+0x4bc>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005940:	2b00      	cmp	r3, #0
 8005942:	d0f0      	beq.n	8005926 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d108      	bne.n	800595e <HAL_RCC_OscConfig+0x32e>
 800594c:	4b66      	ldr	r3, [pc, #408]	; (8005ae8 <HAL_RCC_OscConfig+0x4b8>)
 800594e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005952:	4a65      	ldr	r2, [pc, #404]	; (8005ae8 <HAL_RCC_OscConfig+0x4b8>)
 8005954:	f043 0301 	orr.w	r3, r3, #1
 8005958:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800595c:	e024      	b.n	80059a8 <HAL_RCC_OscConfig+0x378>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	2b05      	cmp	r3, #5
 8005964:	d110      	bne.n	8005988 <HAL_RCC_OscConfig+0x358>
 8005966:	4b60      	ldr	r3, [pc, #384]	; (8005ae8 <HAL_RCC_OscConfig+0x4b8>)
 8005968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800596c:	4a5e      	ldr	r2, [pc, #376]	; (8005ae8 <HAL_RCC_OscConfig+0x4b8>)
 800596e:	f043 0304 	orr.w	r3, r3, #4
 8005972:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005976:	4b5c      	ldr	r3, [pc, #368]	; (8005ae8 <HAL_RCC_OscConfig+0x4b8>)
 8005978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800597c:	4a5a      	ldr	r2, [pc, #360]	; (8005ae8 <HAL_RCC_OscConfig+0x4b8>)
 800597e:	f043 0301 	orr.w	r3, r3, #1
 8005982:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005986:	e00f      	b.n	80059a8 <HAL_RCC_OscConfig+0x378>
 8005988:	4b57      	ldr	r3, [pc, #348]	; (8005ae8 <HAL_RCC_OscConfig+0x4b8>)
 800598a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800598e:	4a56      	ldr	r2, [pc, #344]	; (8005ae8 <HAL_RCC_OscConfig+0x4b8>)
 8005990:	f023 0301 	bic.w	r3, r3, #1
 8005994:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005998:	4b53      	ldr	r3, [pc, #332]	; (8005ae8 <HAL_RCC_OscConfig+0x4b8>)
 800599a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800599e:	4a52      	ldr	r2, [pc, #328]	; (8005ae8 <HAL_RCC_OscConfig+0x4b8>)
 80059a0:	f023 0304 	bic.w	r3, r3, #4
 80059a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d016      	beq.n	80059de <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059b0:	f7fc ffba 	bl	8002928 <HAL_GetTick>
 80059b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059b6:	e00a      	b.n	80059ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059b8:	f7fc ffb6 	bl	8002928 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e140      	b.n	8005c50 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059ce:	4b46      	ldr	r3, [pc, #280]	; (8005ae8 <HAL_RCC_OscConfig+0x4b8>)
 80059d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d0ed      	beq.n	80059b8 <HAL_RCC_OscConfig+0x388>
 80059dc:	e015      	b.n	8005a0a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059de:	f7fc ffa3 	bl	8002928 <HAL_GetTick>
 80059e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059e4:	e00a      	b.n	80059fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059e6:	f7fc ff9f 	bl	8002928 <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d901      	bls.n	80059fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e129      	b.n	8005c50 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059fc:	4b3a      	ldr	r3, [pc, #232]	; (8005ae8 <HAL_RCC_OscConfig+0x4b8>)
 80059fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1ed      	bne.n	80059e6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a0a:	7ffb      	ldrb	r3, [r7, #31]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d105      	bne.n	8005a1c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a10:	4b35      	ldr	r3, [pc, #212]	; (8005ae8 <HAL_RCC_OscConfig+0x4b8>)
 8005a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a14:	4a34      	ldr	r2, [pc, #208]	; (8005ae8 <HAL_RCC_OscConfig+0x4b8>)
 8005a16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a1a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0320 	and.w	r3, r3, #32
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d03c      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d01c      	beq.n	8005a6a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a30:	4b2d      	ldr	r3, [pc, #180]	; (8005ae8 <HAL_RCC_OscConfig+0x4b8>)
 8005a32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a36:	4a2c      	ldr	r2, [pc, #176]	; (8005ae8 <HAL_RCC_OscConfig+0x4b8>)
 8005a38:	f043 0301 	orr.w	r3, r3, #1
 8005a3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a40:	f7fc ff72 	bl	8002928 <HAL_GetTick>
 8005a44:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a46:	e008      	b.n	8005a5a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a48:	f7fc ff6e 	bl	8002928 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e0fa      	b.n	8005c50 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a5a:	4b23      	ldr	r3, [pc, #140]	; (8005ae8 <HAL_RCC_OscConfig+0x4b8>)
 8005a5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a60:	f003 0302 	and.w	r3, r3, #2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d0ef      	beq.n	8005a48 <HAL_RCC_OscConfig+0x418>
 8005a68:	e01b      	b.n	8005aa2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a6a:	4b1f      	ldr	r3, [pc, #124]	; (8005ae8 <HAL_RCC_OscConfig+0x4b8>)
 8005a6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a70:	4a1d      	ldr	r2, [pc, #116]	; (8005ae8 <HAL_RCC_OscConfig+0x4b8>)
 8005a72:	f023 0301 	bic.w	r3, r3, #1
 8005a76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a7a:	f7fc ff55 	bl	8002928 <HAL_GetTick>
 8005a7e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a80:	e008      	b.n	8005a94 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a82:	f7fc ff51 	bl	8002928 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d901      	bls.n	8005a94 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e0dd      	b.n	8005c50 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a94:	4b14      	ldr	r3, [pc, #80]	; (8005ae8 <HAL_RCC_OscConfig+0x4b8>)
 8005a96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1ef      	bne.n	8005a82 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f000 80d1 	beq.w	8005c4e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005aac:	4b0e      	ldr	r3, [pc, #56]	; (8005ae8 <HAL_RCC_OscConfig+0x4b8>)
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f003 030c 	and.w	r3, r3, #12
 8005ab4:	2b0c      	cmp	r3, #12
 8005ab6:	f000 808b 	beq.w	8005bd0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d15e      	bne.n	8005b80 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ac2:	4b09      	ldr	r3, [pc, #36]	; (8005ae8 <HAL_RCC_OscConfig+0x4b8>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a08      	ldr	r2, [pc, #32]	; (8005ae8 <HAL_RCC_OscConfig+0x4b8>)
 8005ac8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ace:	f7fc ff2b 	bl	8002928 <HAL_GetTick>
 8005ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ad4:	e00c      	b.n	8005af0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ad6:	f7fc ff27 	bl	8002928 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d905      	bls.n	8005af0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e0b3      	b.n	8005c50 <HAL_RCC_OscConfig+0x620>
 8005ae8:	40021000 	.word	0x40021000
 8005aec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005af0:	4b59      	ldr	r3, [pc, #356]	; (8005c58 <HAL_RCC_OscConfig+0x628>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1ec      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005afc:	4b56      	ldr	r3, [pc, #344]	; (8005c58 <HAL_RCC_OscConfig+0x628>)
 8005afe:	68da      	ldr	r2, [r3, #12]
 8005b00:	4b56      	ldr	r3, [pc, #344]	; (8005c5c <HAL_RCC_OscConfig+0x62c>)
 8005b02:	4013      	ands	r3, r2
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	6a11      	ldr	r1, [r2, #32]
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b0c:	3a01      	subs	r2, #1
 8005b0e:	0112      	lsls	r2, r2, #4
 8005b10:	4311      	orrs	r1, r2
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005b16:	0212      	lsls	r2, r2, #8
 8005b18:	4311      	orrs	r1, r2
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005b1e:	0852      	lsrs	r2, r2, #1
 8005b20:	3a01      	subs	r2, #1
 8005b22:	0552      	lsls	r2, r2, #21
 8005b24:	4311      	orrs	r1, r2
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b2a:	0852      	lsrs	r2, r2, #1
 8005b2c:	3a01      	subs	r2, #1
 8005b2e:	0652      	lsls	r2, r2, #25
 8005b30:	4311      	orrs	r1, r2
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005b36:	06d2      	lsls	r2, r2, #27
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	4947      	ldr	r1, [pc, #284]	; (8005c58 <HAL_RCC_OscConfig+0x628>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b40:	4b45      	ldr	r3, [pc, #276]	; (8005c58 <HAL_RCC_OscConfig+0x628>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a44      	ldr	r2, [pc, #272]	; (8005c58 <HAL_RCC_OscConfig+0x628>)
 8005b46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b4a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b4c:	4b42      	ldr	r3, [pc, #264]	; (8005c58 <HAL_RCC_OscConfig+0x628>)
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	4a41      	ldr	r2, [pc, #260]	; (8005c58 <HAL_RCC_OscConfig+0x628>)
 8005b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b56:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b58:	f7fc fee6 	bl	8002928 <HAL_GetTick>
 8005b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b5e:	e008      	b.n	8005b72 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b60:	f7fc fee2 	bl	8002928 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d901      	bls.n	8005b72 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e06e      	b.n	8005c50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b72:	4b39      	ldr	r3, [pc, #228]	; (8005c58 <HAL_RCC_OscConfig+0x628>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d0f0      	beq.n	8005b60 <HAL_RCC_OscConfig+0x530>
 8005b7e:	e066      	b.n	8005c4e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b80:	4b35      	ldr	r3, [pc, #212]	; (8005c58 <HAL_RCC_OscConfig+0x628>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a34      	ldr	r2, [pc, #208]	; (8005c58 <HAL_RCC_OscConfig+0x628>)
 8005b86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b8a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005b8c:	4b32      	ldr	r3, [pc, #200]	; (8005c58 <HAL_RCC_OscConfig+0x628>)
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	4a31      	ldr	r2, [pc, #196]	; (8005c58 <HAL_RCC_OscConfig+0x628>)
 8005b92:	f023 0303 	bic.w	r3, r3, #3
 8005b96:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005b98:	4b2f      	ldr	r3, [pc, #188]	; (8005c58 <HAL_RCC_OscConfig+0x628>)
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	4a2e      	ldr	r2, [pc, #184]	; (8005c58 <HAL_RCC_OscConfig+0x628>)
 8005b9e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ba6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba8:	f7fc febe 	bl	8002928 <HAL_GetTick>
 8005bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bae:	e008      	b.n	8005bc2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bb0:	f7fc feba 	bl	8002928 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d901      	bls.n	8005bc2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e046      	b.n	8005c50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bc2:	4b25      	ldr	r3, [pc, #148]	; (8005c58 <HAL_RCC_OscConfig+0x628>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1f0      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x580>
 8005bce:	e03e      	b.n	8005c4e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d101      	bne.n	8005bdc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e039      	b.n	8005c50 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005bdc:	4b1e      	ldr	r3, [pc, #120]	; (8005c58 <HAL_RCC_OscConfig+0x628>)
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f003 0203 	and.w	r2, r3, #3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a1b      	ldr	r3, [r3, #32]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d12c      	bne.n	8005c4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d123      	bne.n	8005c4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d11b      	bne.n	8005c4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d113      	bne.n	8005c4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2c:	085b      	lsrs	r3, r3, #1
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d109      	bne.n	8005c4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c40:	085b      	lsrs	r3, r3, #1
 8005c42:	3b01      	subs	r3, #1
 8005c44:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d001      	beq.n	8005c4e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e000      	b.n	8005c50 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3720      	adds	r7, #32
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	40021000 	.word	0x40021000
 8005c5c:	019f800c 	.word	0x019f800c

08005c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d101      	bne.n	8005c78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e11e      	b.n	8005eb6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c78:	4b91      	ldr	r3, [pc, #580]	; (8005ec0 <HAL_RCC_ClockConfig+0x260>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 030f 	and.w	r3, r3, #15
 8005c80:	683a      	ldr	r2, [r7, #0]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d910      	bls.n	8005ca8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c86:	4b8e      	ldr	r3, [pc, #568]	; (8005ec0 <HAL_RCC_ClockConfig+0x260>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f023 020f 	bic.w	r2, r3, #15
 8005c8e:	498c      	ldr	r1, [pc, #560]	; (8005ec0 <HAL_RCC_ClockConfig+0x260>)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c96:	4b8a      	ldr	r3, [pc, #552]	; (8005ec0 <HAL_RCC_ClockConfig+0x260>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 030f 	and.w	r3, r3, #15
 8005c9e:	683a      	ldr	r2, [r7, #0]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d001      	beq.n	8005ca8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e106      	b.n	8005eb6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d073      	beq.n	8005d9c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	2b03      	cmp	r3, #3
 8005cba:	d129      	bne.n	8005d10 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cbc:	4b81      	ldr	r3, [pc, #516]	; (8005ec4 <HAL_RCC_ClockConfig+0x264>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d101      	bne.n	8005ccc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e0f4      	b.n	8005eb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005ccc:	f000 f9d0 	bl	8006070 <RCC_GetSysClockFreqFromPLLSource>
 8005cd0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	4a7c      	ldr	r2, [pc, #496]	; (8005ec8 <HAL_RCC_ClockConfig+0x268>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d93f      	bls.n	8005d5a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005cda:	4b7a      	ldr	r3, [pc, #488]	; (8005ec4 <HAL_RCC_ClockConfig+0x264>)
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d009      	beq.n	8005cfa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d033      	beq.n	8005d5a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d12f      	bne.n	8005d5a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005cfa:	4b72      	ldr	r3, [pc, #456]	; (8005ec4 <HAL_RCC_ClockConfig+0x264>)
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d02:	4a70      	ldr	r2, [pc, #448]	; (8005ec4 <HAL_RCC_ClockConfig+0x264>)
 8005d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d08:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005d0a:	2380      	movs	r3, #128	; 0x80
 8005d0c:	617b      	str	r3, [r7, #20]
 8005d0e:	e024      	b.n	8005d5a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d107      	bne.n	8005d28 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d18:	4b6a      	ldr	r3, [pc, #424]	; (8005ec4 <HAL_RCC_ClockConfig+0x264>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d109      	bne.n	8005d38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e0c6      	b.n	8005eb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d28:	4b66      	ldr	r3, [pc, #408]	; (8005ec4 <HAL_RCC_ClockConfig+0x264>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e0be      	b.n	8005eb6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005d38:	f000 f8ce 	bl	8005ed8 <HAL_RCC_GetSysClockFreq>
 8005d3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	4a61      	ldr	r2, [pc, #388]	; (8005ec8 <HAL_RCC_ClockConfig+0x268>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d909      	bls.n	8005d5a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005d46:	4b5f      	ldr	r3, [pc, #380]	; (8005ec4 <HAL_RCC_ClockConfig+0x264>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d4e:	4a5d      	ldr	r2, [pc, #372]	; (8005ec4 <HAL_RCC_ClockConfig+0x264>)
 8005d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d54:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005d56:	2380      	movs	r3, #128	; 0x80
 8005d58:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d5a:	4b5a      	ldr	r3, [pc, #360]	; (8005ec4 <HAL_RCC_ClockConfig+0x264>)
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f023 0203 	bic.w	r2, r3, #3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	4957      	ldr	r1, [pc, #348]	; (8005ec4 <HAL_RCC_ClockConfig+0x264>)
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d6c:	f7fc fddc 	bl	8002928 <HAL_GetTick>
 8005d70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d72:	e00a      	b.n	8005d8a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d74:	f7fc fdd8 	bl	8002928 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d901      	bls.n	8005d8a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e095      	b.n	8005eb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d8a:	4b4e      	ldr	r3, [pc, #312]	; (8005ec4 <HAL_RCC_ClockConfig+0x264>)
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f003 020c 	and.w	r2, r3, #12
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d1eb      	bne.n	8005d74 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0302 	and.w	r3, r3, #2
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d023      	beq.n	8005df0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0304 	and.w	r3, r3, #4
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d005      	beq.n	8005dc0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005db4:	4b43      	ldr	r3, [pc, #268]	; (8005ec4 <HAL_RCC_ClockConfig+0x264>)
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	4a42      	ldr	r2, [pc, #264]	; (8005ec4 <HAL_RCC_ClockConfig+0x264>)
 8005dba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005dbe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0308 	and.w	r3, r3, #8
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d007      	beq.n	8005ddc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005dcc:	4b3d      	ldr	r3, [pc, #244]	; (8005ec4 <HAL_RCC_ClockConfig+0x264>)
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005dd4:	4a3b      	ldr	r2, [pc, #236]	; (8005ec4 <HAL_RCC_ClockConfig+0x264>)
 8005dd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005dda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ddc:	4b39      	ldr	r3, [pc, #228]	; (8005ec4 <HAL_RCC_ClockConfig+0x264>)
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	4936      	ldr	r1, [pc, #216]	; (8005ec4 <HAL_RCC_ClockConfig+0x264>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	608b      	str	r3, [r1, #8]
 8005dee:	e008      	b.n	8005e02 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	2b80      	cmp	r3, #128	; 0x80
 8005df4:	d105      	bne.n	8005e02 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005df6:	4b33      	ldr	r3, [pc, #204]	; (8005ec4 <HAL_RCC_ClockConfig+0x264>)
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	4a32      	ldr	r2, [pc, #200]	; (8005ec4 <HAL_RCC_ClockConfig+0x264>)
 8005dfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e00:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e02:	4b2f      	ldr	r3, [pc, #188]	; (8005ec0 <HAL_RCC_ClockConfig+0x260>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 030f 	and.w	r3, r3, #15
 8005e0a:	683a      	ldr	r2, [r7, #0]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d21d      	bcs.n	8005e4c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e10:	4b2b      	ldr	r3, [pc, #172]	; (8005ec0 <HAL_RCC_ClockConfig+0x260>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f023 020f 	bic.w	r2, r3, #15
 8005e18:	4929      	ldr	r1, [pc, #164]	; (8005ec0 <HAL_RCC_ClockConfig+0x260>)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005e20:	f7fc fd82 	bl	8002928 <HAL_GetTick>
 8005e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e26:	e00a      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e28:	f7fc fd7e 	bl	8002928 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d901      	bls.n	8005e3e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e03b      	b.n	8005eb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e3e:	4b20      	ldr	r3, [pc, #128]	; (8005ec0 <HAL_RCC_ClockConfig+0x260>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 030f 	and.w	r3, r3, #15
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d1ed      	bne.n	8005e28 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d008      	beq.n	8005e6a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e58:	4b1a      	ldr	r3, [pc, #104]	; (8005ec4 <HAL_RCC_ClockConfig+0x264>)
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	4917      	ldr	r1, [pc, #92]	; (8005ec4 <HAL_RCC_ClockConfig+0x264>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0308 	and.w	r3, r3, #8
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d009      	beq.n	8005e8a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e76:	4b13      	ldr	r3, [pc, #76]	; (8005ec4 <HAL_RCC_ClockConfig+0x264>)
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	00db      	lsls	r3, r3, #3
 8005e84:	490f      	ldr	r1, [pc, #60]	; (8005ec4 <HAL_RCC_ClockConfig+0x264>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e8a:	f000 f825 	bl	8005ed8 <HAL_RCC_GetSysClockFreq>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	4b0c      	ldr	r3, [pc, #48]	; (8005ec4 <HAL_RCC_ClockConfig+0x264>)
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	091b      	lsrs	r3, r3, #4
 8005e96:	f003 030f 	and.w	r3, r3, #15
 8005e9a:	490c      	ldr	r1, [pc, #48]	; (8005ecc <HAL_RCC_ClockConfig+0x26c>)
 8005e9c:	5ccb      	ldrb	r3, [r1, r3]
 8005e9e:	f003 031f 	and.w	r3, r3, #31
 8005ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ea6:	4a0a      	ldr	r2, [pc, #40]	; (8005ed0 <HAL_RCC_ClockConfig+0x270>)
 8005ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005eaa:	4b0a      	ldr	r3, [pc, #40]	; (8005ed4 <HAL_RCC_ClockConfig+0x274>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7fb fc58 	bl	8001764 <HAL_InitTick>
 8005eb4:	4603      	mov	r3, r0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3718      	adds	r7, #24
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	40022000 	.word	0x40022000
 8005ec4:	40021000 	.word	0x40021000
 8005ec8:	04c4b400 	.word	0x04c4b400
 8005ecc:	0800d730 	.word	0x0800d730
 8005ed0:	20000000 	.word	0x20000000
 8005ed4:	200000c0 	.word	0x200000c0

08005ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b087      	sub	sp, #28
 8005edc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005ede:	4b2c      	ldr	r3, [pc, #176]	; (8005f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f003 030c 	and.w	r3, r3, #12
 8005ee6:	2b04      	cmp	r3, #4
 8005ee8:	d102      	bne.n	8005ef0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005eea:	4b2a      	ldr	r3, [pc, #168]	; (8005f94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005eec:	613b      	str	r3, [r7, #16]
 8005eee:	e047      	b.n	8005f80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005ef0:	4b27      	ldr	r3, [pc, #156]	; (8005f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f003 030c 	and.w	r3, r3, #12
 8005ef8:	2b08      	cmp	r3, #8
 8005efa:	d102      	bne.n	8005f02 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005efc:	4b26      	ldr	r3, [pc, #152]	; (8005f98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005efe:	613b      	str	r3, [r7, #16]
 8005f00:	e03e      	b.n	8005f80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005f02:	4b23      	ldr	r3, [pc, #140]	; (8005f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f003 030c 	and.w	r3, r3, #12
 8005f0a:	2b0c      	cmp	r3, #12
 8005f0c:	d136      	bne.n	8005f7c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f0e:	4b20      	ldr	r3, [pc, #128]	; (8005f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f003 0303 	and.w	r3, r3, #3
 8005f16:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f18:	4b1d      	ldr	r3, [pc, #116]	; (8005f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	091b      	lsrs	r3, r3, #4
 8005f1e:	f003 030f 	and.w	r3, r3, #15
 8005f22:	3301      	adds	r3, #1
 8005f24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2b03      	cmp	r3, #3
 8005f2a:	d10c      	bne.n	8005f46 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f2c:	4a1a      	ldr	r2, [pc, #104]	; (8005f98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f34:	4a16      	ldr	r2, [pc, #88]	; (8005f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f36:	68d2      	ldr	r2, [r2, #12]
 8005f38:	0a12      	lsrs	r2, r2, #8
 8005f3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f3e:	fb02 f303 	mul.w	r3, r2, r3
 8005f42:	617b      	str	r3, [r7, #20]
      break;
 8005f44:	e00c      	b.n	8005f60 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f46:	4a13      	ldr	r2, [pc, #76]	; (8005f94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f4e:	4a10      	ldr	r2, [pc, #64]	; (8005f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f50:	68d2      	ldr	r2, [r2, #12]
 8005f52:	0a12      	lsrs	r2, r2, #8
 8005f54:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f58:	fb02 f303 	mul.w	r3, r2, r3
 8005f5c:	617b      	str	r3, [r7, #20]
      break;
 8005f5e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f60:	4b0b      	ldr	r3, [pc, #44]	; (8005f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	0e5b      	lsrs	r3, r3, #25
 8005f66:	f003 0303 	and.w	r3, r3, #3
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	005b      	lsls	r3, r3, #1
 8005f6e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f78:	613b      	str	r3, [r7, #16]
 8005f7a:	e001      	b.n	8005f80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005f80:	693b      	ldr	r3, [r7, #16]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	371c      	adds	r7, #28
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	40021000 	.word	0x40021000
 8005f94:	00f42400 	.word	0x00f42400
 8005f98:	016e3600 	.word	0x016e3600

08005f9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fa0:	4b03      	ldr	r3, [pc, #12]	; (8005fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	20000000 	.word	0x20000000

08005fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005fb8:	f7ff fff0 	bl	8005f9c <HAL_RCC_GetHCLKFreq>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	4b06      	ldr	r3, [pc, #24]	; (8005fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	0a1b      	lsrs	r3, r3, #8
 8005fc4:	f003 0307 	and.w	r3, r3, #7
 8005fc8:	4904      	ldr	r1, [pc, #16]	; (8005fdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005fca:	5ccb      	ldrb	r3, [r1, r3]
 8005fcc:	f003 031f 	and.w	r3, r3, #31
 8005fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	40021000 	.word	0x40021000
 8005fdc:	0800d740 	.word	0x0800d740

08005fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005fe4:	f7ff ffda 	bl	8005f9c <HAL_RCC_GetHCLKFreq>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	4b06      	ldr	r3, [pc, #24]	; (8006004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	0adb      	lsrs	r3, r3, #11
 8005ff0:	f003 0307 	and.w	r3, r3, #7
 8005ff4:	4904      	ldr	r1, [pc, #16]	; (8006008 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ff6:	5ccb      	ldrb	r3, [r1, r3]
 8005ff8:	f003 031f 	and.w	r3, r3, #31
 8005ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006000:	4618      	mov	r0, r3
 8006002:	bd80      	pop	{r7, pc}
 8006004:	40021000 	.word	0x40021000
 8006008:	0800d740 	.word	0x0800d740

0800600c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	220f      	movs	r2, #15
 800601a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800601c:	4b12      	ldr	r3, [pc, #72]	; (8006068 <HAL_RCC_GetClockConfig+0x5c>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f003 0203 	and.w	r2, r3, #3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006028:	4b0f      	ldr	r3, [pc, #60]	; (8006068 <HAL_RCC_GetClockConfig+0x5c>)
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006034:	4b0c      	ldr	r3, [pc, #48]	; (8006068 <HAL_RCC_GetClockConfig+0x5c>)
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006040:	4b09      	ldr	r3, [pc, #36]	; (8006068 <HAL_RCC_GetClockConfig+0x5c>)
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	08db      	lsrs	r3, r3, #3
 8006046:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800604e:	4b07      	ldr	r3, [pc, #28]	; (800606c <HAL_RCC_GetClockConfig+0x60>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 020f 	and.w	r2, r3, #15
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	601a      	str	r2, [r3, #0]
}
 800605a:	bf00      	nop
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	40021000 	.word	0x40021000
 800606c:	40022000 	.word	0x40022000

08006070 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006070:	b480      	push	{r7}
 8006072:	b087      	sub	sp, #28
 8006074:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006076:	4b1e      	ldr	r3, [pc, #120]	; (80060f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	f003 0303 	and.w	r3, r3, #3
 800607e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006080:	4b1b      	ldr	r3, [pc, #108]	; (80060f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	091b      	lsrs	r3, r3, #4
 8006086:	f003 030f 	and.w	r3, r3, #15
 800608a:	3301      	adds	r3, #1
 800608c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	2b03      	cmp	r3, #3
 8006092:	d10c      	bne.n	80060ae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006094:	4a17      	ldr	r2, [pc, #92]	; (80060f4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	fbb2 f3f3 	udiv	r3, r2, r3
 800609c:	4a14      	ldr	r2, [pc, #80]	; (80060f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800609e:	68d2      	ldr	r2, [r2, #12]
 80060a0:	0a12      	lsrs	r2, r2, #8
 80060a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80060a6:	fb02 f303 	mul.w	r3, r2, r3
 80060aa:	617b      	str	r3, [r7, #20]
    break;
 80060ac:	e00c      	b.n	80060c8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060ae:	4a12      	ldr	r2, [pc, #72]	; (80060f8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b6:	4a0e      	ldr	r2, [pc, #56]	; (80060f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060b8:	68d2      	ldr	r2, [r2, #12]
 80060ba:	0a12      	lsrs	r2, r2, #8
 80060bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80060c0:	fb02 f303 	mul.w	r3, r2, r3
 80060c4:	617b      	str	r3, [r7, #20]
    break;
 80060c6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80060c8:	4b09      	ldr	r3, [pc, #36]	; (80060f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	0e5b      	lsrs	r3, r3, #25
 80060ce:	f003 0303 	and.w	r3, r3, #3
 80060d2:	3301      	adds	r3, #1
 80060d4:	005b      	lsls	r3, r3, #1
 80060d6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80060e2:	687b      	ldr	r3, [r7, #4]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	371c      	adds	r7, #28
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr
 80060f0:	40021000 	.word	0x40021000
 80060f4:	016e3600 	.word	0x016e3600
 80060f8:	00f42400 	.word	0x00f42400

080060fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006104:	2300      	movs	r3, #0
 8006106:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006108:	2300      	movs	r3, #0
 800610a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006114:	2b00      	cmp	r3, #0
 8006116:	f000 8098 	beq.w	800624a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800611a:	2300      	movs	r3, #0
 800611c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800611e:	4b43      	ldr	r3, [pc, #268]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10d      	bne.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800612a:	4b40      	ldr	r3, [pc, #256]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800612c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800612e:	4a3f      	ldr	r2, [pc, #252]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006134:	6593      	str	r3, [r2, #88]	; 0x58
 8006136:	4b3d      	ldr	r3, [pc, #244]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800613a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800613e:	60bb      	str	r3, [r7, #8]
 8006140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006142:	2301      	movs	r3, #1
 8006144:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006146:	4b3a      	ldr	r3, [pc, #232]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a39      	ldr	r2, [pc, #228]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800614c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006150:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006152:	f7fc fbe9 	bl	8002928 <HAL_GetTick>
 8006156:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006158:	e009      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800615a:	f7fc fbe5 	bl	8002928 <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	2b02      	cmp	r3, #2
 8006166:	d902      	bls.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	74fb      	strb	r3, [r7, #19]
        break;
 800616c:	e005      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800616e:	4b30      	ldr	r3, [pc, #192]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006176:	2b00      	cmp	r3, #0
 8006178:	d0ef      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800617a:	7cfb      	ldrb	r3, [r7, #19]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d159      	bne.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006180:	4b2a      	ldr	r3, [pc, #168]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800618a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d01e      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	429a      	cmp	r2, r3
 800619a:	d019      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800619c:	4b23      	ldr	r3, [pc, #140]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800619e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061a8:	4b20      	ldr	r3, [pc, #128]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ae:	4a1f      	ldr	r2, [pc, #124]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061b8:	4b1c      	ldr	r3, [pc, #112]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061be:	4a1b      	ldr	r2, [pc, #108]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80061c8:	4a18      	ldr	r2, [pc, #96]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d016      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061da:	f7fc fba5 	bl	8002928 <HAL_GetTick>
 80061de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061e0:	e00b      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061e2:	f7fc fba1 	bl	8002928 <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d902      	bls.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	74fb      	strb	r3, [r7, #19]
            break;
 80061f8:	e006      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061fa:	4b0c      	ldr	r3, [pc, #48]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006200:	f003 0302 	and.w	r3, r3, #2
 8006204:	2b00      	cmp	r3, #0
 8006206:	d0ec      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006208:	7cfb      	ldrb	r3, [r7, #19]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10b      	bne.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800620e:	4b07      	ldr	r3, [pc, #28]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006214:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800621c:	4903      	ldr	r1, [pc, #12]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800621e:	4313      	orrs	r3, r2
 8006220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006224:	e008      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006226:	7cfb      	ldrb	r3, [r7, #19]
 8006228:	74bb      	strb	r3, [r7, #18]
 800622a:	e005      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800622c:	40021000 	.word	0x40021000
 8006230:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006234:	7cfb      	ldrb	r3, [r7, #19]
 8006236:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006238:	7c7b      	ldrb	r3, [r7, #17]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d105      	bne.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800623e:	4ba7      	ldr	r3, [pc, #668]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006242:	4aa6      	ldr	r2, [pc, #664]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006248:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00a      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006256:	4ba1      	ldr	r3, [pc, #644]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800625c:	f023 0203 	bic.w	r2, r3, #3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	499d      	ldr	r1, [pc, #628]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006266:	4313      	orrs	r3, r2
 8006268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0302 	and.w	r3, r3, #2
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00a      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006278:	4b98      	ldr	r3, [pc, #608]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800627a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800627e:	f023 020c 	bic.w	r2, r3, #12
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	4995      	ldr	r1, [pc, #596]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006288:	4313      	orrs	r3, r2
 800628a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0304 	and.w	r3, r3, #4
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00a      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800629a:	4b90      	ldr	r3, [pc, #576]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800629c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	498c      	ldr	r1, [pc, #560]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0308 	and.w	r3, r3, #8
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00a      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80062bc:	4b87      	ldr	r3, [pc, #540]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	4984      	ldr	r1, [pc, #528]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062cc:	4313      	orrs	r3, r2
 80062ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0310 	and.w	r3, r3, #16
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00a      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80062de:	4b7f      	ldr	r3, [pc, #508]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	497b      	ldr	r1, [pc, #492]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0320 	and.w	r3, r3, #32
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00a      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006300:	4b76      	ldr	r3, [pc, #472]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006306:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	4973      	ldr	r1, [pc, #460]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006310:	4313      	orrs	r3, r2
 8006312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00a      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006322:	4b6e      	ldr	r3, [pc, #440]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006328:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	496a      	ldr	r1, [pc, #424]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006332:	4313      	orrs	r3, r2
 8006334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00a      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006344:	4b65      	ldr	r3, [pc, #404]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800634a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	4962      	ldr	r1, [pc, #392]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006354:	4313      	orrs	r3, r2
 8006356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00a      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006366:	4b5d      	ldr	r3, [pc, #372]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800636c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006374:	4959      	ldr	r1, [pc, #356]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006376:	4313      	orrs	r3, r2
 8006378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00a      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006388:	4b54      	ldr	r3, [pc, #336]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800638a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800638e:	f023 0203 	bic.w	r2, r3, #3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006396:	4951      	ldr	r1, [pc, #324]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006398:	4313      	orrs	r3, r2
 800639a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063aa:	4b4c      	ldr	r3, [pc, #304]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b8:	4948      	ldr	r1, [pc, #288]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d015      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063cc:	4b43      	ldr	r3, [pc, #268]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063da:	4940      	ldr	r1, [pc, #256]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063ea:	d105      	bne.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063ec:	4b3b      	ldr	r3, [pc, #236]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	4a3a      	ldr	r2, [pc, #232]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006400:	2b00      	cmp	r3, #0
 8006402:	d015      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006404:	4b35      	ldr	r3, [pc, #212]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800640a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006412:	4932      	ldr	r1, [pc, #200]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006414:	4313      	orrs	r3, r2
 8006416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800641e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006422:	d105      	bne.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006424:	4b2d      	ldr	r3, [pc, #180]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	4a2c      	ldr	r2, [pc, #176]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800642a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800642e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d015      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800643c:	4b27      	ldr	r3, [pc, #156]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800643e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006442:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644a:	4924      	ldr	r1, [pc, #144]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800644c:	4313      	orrs	r3, r2
 800644e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006456:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800645a:	d105      	bne.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800645c:	4b1f      	ldr	r3, [pc, #124]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	4a1e      	ldr	r2, [pc, #120]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006462:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006466:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d015      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006474:	4b19      	ldr	r3, [pc, #100]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800647a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006482:	4916      	ldr	r1, [pc, #88]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006484:	4313      	orrs	r3, r2
 8006486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800648e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006492:	d105      	bne.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006494:	4b11      	ldr	r3, [pc, #68]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	4a10      	ldr	r2, [pc, #64]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800649a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800649e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d019      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064ac:	4b0b      	ldr	r3, [pc, #44]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ba:	4908      	ldr	r1, [pc, #32]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064ca:	d109      	bne.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064cc:	4b03      	ldr	r3, [pc, #12]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	4a02      	ldr	r2, [pc, #8]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064d6:	60d3      	str	r3, [r2, #12]
 80064d8:	e002      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80064da:	bf00      	nop
 80064dc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d015      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80064ec:	4b29      	ldr	r3, [pc, #164]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80064ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064fa:	4926      	ldr	r1, [pc, #152]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006506:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800650a:	d105      	bne.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800650c:	4b21      	ldr	r3, [pc, #132]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	4a20      	ldr	r2, [pc, #128]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006516:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d015      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006524:	4b1b      	ldr	r3, [pc, #108]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800652a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006532:	4918      	ldr	r1, [pc, #96]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006534:	4313      	orrs	r3, r2
 8006536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800653e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006542:	d105      	bne.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006544:	4b13      	ldr	r3, [pc, #76]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	4a12      	ldr	r2, [pc, #72]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800654a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800654e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d015      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800655c:	4b0d      	ldr	r3, [pc, #52]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800655e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006562:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800656a:	490a      	ldr	r1, [pc, #40]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800656c:	4313      	orrs	r3, r2
 800656e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006576:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800657a:	d105      	bne.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800657c:	4b05      	ldr	r3, [pc, #20]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	4a04      	ldr	r2, [pc, #16]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006586:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006588:	7cbb      	ldrb	r3, [r7, #18]
}
 800658a:	4618      	mov	r0, r3
 800658c:	3718      	adds	r7, #24
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	40021000 	.word	0x40021000

08006598 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d101      	bne.n	80065aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e049      	b.n	800663e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d106      	bne.n	80065c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7fb fd06 	bl	8001fd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2202      	movs	r2, #2
 80065c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	3304      	adds	r3, #4
 80065d4:	4619      	mov	r1, r3
 80065d6:	4610      	mov	r0, r2
 80065d8:	f000 ffba 	bl	8007550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3708      	adds	r7, #8
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
	...

08006648 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b01      	cmp	r3, #1
 800665a:	d001      	beq.n	8006660 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e054      	b.n	800670a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2202      	movs	r2, #2
 8006664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68da      	ldr	r2, [r3, #12]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f042 0201 	orr.w	r2, r2, #1
 8006676:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a26      	ldr	r2, [pc, #152]	; (8006718 <HAL_TIM_Base_Start_IT+0xd0>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d022      	beq.n	80066c8 <HAL_TIM_Base_Start_IT+0x80>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800668a:	d01d      	beq.n	80066c8 <HAL_TIM_Base_Start_IT+0x80>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a22      	ldr	r2, [pc, #136]	; (800671c <HAL_TIM_Base_Start_IT+0xd4>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d018      	beq.n	80066c8 <HAL_TIM_Base_Start_IT+0x80>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a21      	ldr	r2, [pc, #132]	; (8006720 <HAL_TIM_Base_Start_IT+0xd8>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d013      	beq.n	80066c8 <HAL_TIM_Base_Start_IT+0x80>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a1f      	ldr	r2, [pc, #124]	; (8006724 <HAL_TIM_Base_Start_IT+0xdc>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d00e      	beq.n	80066c8 <HAL_TIM_Base_Start_IT+0x80>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a1e      	ldr	r2, [pc, #120]	; (8006728 <HAL_TIM_Base_Start_IT+0xe0>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d009      	beq.n	80066c8 <HAL_TIM_Base_Start_IT+0x80>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a1c      	ldr	r2, [pc, #112]	; (800672c <HAL_TIM_Base_Start_IT+0xe4>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d004      	beq.n	80066c8 <HAL_TIM_Base_Start_IT+0x80>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a1b      	ldr	r2, [pc, #108]	; (8006730 <HAL_TIM_Base_Start_IT+0xe8>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d115      	bne.n	80066f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	689a      	ldr	r2, [r3, #8]
 80066ce:	4b19      	ldr	r3, [pc, #100]	; (8006734 <HAL_TIM_Base_Start_IT+0xec>)
 80066d0:	4013      	ands	r3, r2
 80066d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2b06      	cmp	r3, #6
 80066d8:	d015      	beq.n	8006706 <HAL_TIM_Base_Start_IT+0xbe>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066e0:	d011      	beq.n	8006706 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f042 0201 	orr.w	r2, r2, #1
 80066f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066f2:	e008      	b.n	8006706 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f042 0201 	orr.w	r2, r2, #1
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	e000      	b.n	8006708 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006706:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	40012c00 	.word	0x40012c00
 800671c:	40000400 	.word	0x40000400
 8006720:	40000800 	.word	0x40000800
 8006724:	40000c00 	.word	0x40000c00
 8006728:	40013400 	.word	0x40013400
 800672c:	40014000 	.word	0x40014000
 8006730:	40015000 	.word	0x40015000
 8006734:	00010007 	.word	0x00010007

08006738 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d101      	bne.n	800674a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e049      	b.n	80067de <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b00      	cmp	r3, #0
 8006754:	d106      	bne.n	8006764 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7fb fb70 	bl	8001e44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2202      	movs	r2, #2
 8006768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	3304      	adds	r3, #4
 8006774:	4619      	mov	r1, r3
 8006776:	4610      	mov	r0, r2
 8006778:	f000 feea 	bl	8007550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
	...

080067e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d109      	bne.n	800680c <HAL_TIM_PWM_Start+0x24>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b01      	cmp	r3, #1
 8006802:	bf14      	ite	ne
 8006804:	2301      	movne	r3, #1
 8006806:	2300      	moveq	r3, #0
 8006808:	b2db      	uxtb	r3, r3
 800680a:	e03c      	b.n	8006886 <HAL_TIM_PWM_Start+0x9e>
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	2b04      	cmp	r3, #4
 8006810:	d109      	bne.n	8006826 <HAL_TIM_PWM_Start+0x3e>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b01      	cmp	r3, #1
 800681c:	bf14      	ite	ne
 800681e:	2301      	movne	r3, #1
 8006820:	2300      	moveq	r3, #0
 8006822:	b2db      	uxtb	r3, r3
 8006824:	e02f      	b.n	8006886 <HAL_TIM_PWM_Start+0x9e>
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	2b08      	cmp	r3, #8
 800682a:	d109      	bne.n	8006840 <HAL_TIM_PWM_Start+0x58>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2b01      	cmp	r3, #1
 8006836:	bf14      	ite	ne
 8006838:	2301      	movne	r3, #1
 800683a:	2300      	moveq	r3, #0
 800683c:	b2db      	uxtb	r3, r3
 800683e:	e022      	b.n	8006886 <HAL_TIM_PWM_Start+0x9e>
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	2b0c      	cmp	r3, #12
 8006844:	d109      	bne.n	800685a <HAL_TIM_PWM_Start+0x72>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800684c:	b2db      	uxtb	r3, r3
 800684e:	2b01      	cmp	r3, #1
 8006850:	bf14      	ite	ne
 8006852:	2301      	movne	r3, #1
 8006854:	2300      	moveq	r3, #0
 8006856:	b2db      	uxtb	r3, r3
 8006858:	e015      	b.n	8006886 <HAL_TIM_PWM_Start+0x9e>
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	2b10      	cmp	r3, #16
 800685e:	d109      	bne.n	8006874 <HAL_TIM_PWM_Start+0x8c>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b01      	cmp	r3, #1
 800686a:	bf14      	ite	ne
 800686c:	2301      	movne	r3, #1
 800686e:	2300      	moveq	r3, #0
 8006870:	b2db      	uxtb	r3, r3
 8006872:	e008      	b.n	8006886 <HAL_TIM_PWM_Start+0x9e>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800687a:	b2db      	uxtb	r3, r3
 800687c:	2b01      	cmp	r3, #1
 800687e:	bf14      	ite	ne
 8006880:	2301      	movne	r3, #1
 8006882:	2300      	moveq	r3, #0
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d001      	beq.n	800688e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e0a6      	b.n	80069dc <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d104      	bne.n	800689e <HAL_TIM_PWM_Start+0xb6>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2202      	movs	r2, #2
 8006898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800689c:	e023      	b.n	80068e6 <HAL_TIM_PWM_Start+0xfe>
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	2b04      	cmp	r3, #4
 80068a2:	d104      	bne.n	80068ae <HAL_TIM_PWM_Start+0xc6>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2202      	movs	r2, #2
 80068a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068ac:	e01b      	b.n	80068e6 <HAL_TIM_PWM_Start+0xfe>
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	2b08      	cmp	r3, #8
 80068b2:	d104      	bne.n	80068be <HAL_TIM_PWM_Start+0xd6>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2202      	movs	r2, #2
 80068b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068bc:	e013      	b.n	80068e6 <HAL_TIM_PWM_Start+0xfe>
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b0c      	cmp	r3, #12
 80068c2:	d104      	bne.n	80068ce <HAL_TIM_PWM_Start+0xe6>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2202      	movs	r2, #2
 80068c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068cc:	e00b      	b.n	80068e6 <HAL_TIM_PWM_Start+0xfe>
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	2b10      	cmp	r3, #16
 80068d2:	d104      	bne.n	80068de <HAL_TIM_PWM_Start+0xf6>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2202      	movs	r2, #2
 80068d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068dc:	e003      	b.n	80068e6 <HAL_TIM_PWM_Start+0xfe>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2202      	movs	r2, #2
 80068e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2201      	movs	r2, #1
 80068ec:	6839      	ldr	r1, [r7, #0]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f001 fb10 	bl	8007f14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a3a      	ldr	r2, [pc, #232]	; (80069e4 <HAL_TIM_PWM_Start+0x1fc>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d018      	beq.n	8006930 <HAL_TIM_PWM_Start+0x148>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a39      	ldr	r2, [pc, #228]	; (80069e8 <HAL_TIM_PWM_Start+0x200>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d013      	beq.n	8006930 <HAL_TIM_PWM_Start+0x148>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a37      	ldr	r2, [pc, #220]	; (80069ec <HAL_TIM_PWM_Start+0x204>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d00e      	beq.n	8006930 <HAL_TIM_PWM_Start+0x148>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a36      	ldr	r2, [pc, #216]	; (80069f0 <HAL_TIM_PWM_Start+0x208>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d009      	beq.n	8006930 <HAL_TIM_PWM_Start+0x148>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a34      	ldr	r2, [pc, #208]	; (80069f4 <HAL_TIM_PWM_Start+0x20c>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d004      	beq.n	8006930 <HAL_TIM_PWM_Start+0x148>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a33      	ldr	r2, [pc, #204]	; (80069f8 <HAL_TIM_PWM_Start+0x210>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d101      	bne.n	8006934 <HAL_TIM_PWM_Start+0x14c>
 8006930:	2301      	movs	r3, #1
 8006932:	e000      	b.n	8006936 <HAL_TIM_PWM_Start+0x14e>
 8006934:	2300      	movs	r3, #0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d007      	beq.n	800694a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006948:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a25      	ldr	r2, [pc, #148]	; (80069e4 <HAL_TIM_PWM_Start+0x1fc>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d022      	beq.n	800699a <HAL_TIM_PWM_Start+0x1b2>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800695c:	d01d      	beq.n	800699a <HAL_TIM_PWM_Start+0x1b2>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a26      	ldr	r2, [pc, #152]	; (80069fc <HAL_TIM_PWM_Start+0x214>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d018      	beq.n	800699a <HAL_TIM_PWM_Start+0x1b2>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a24      	ldr	r2, [pc, #144]	; (8006a00 <HAL_TIM_PWM_Start+0x218>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d013      	beq.n	800699a <HAL_TIM_PWM_Start+0x1b2>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a23      	ldr	r2, [pc, #140]	; (8006a04 <HAL_TIM_PWM_Start+0x21c>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d00e      	beq.n	800699a <HAL_TIM_PWM_Start+0x1b2>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a19      	ldr	r2, [pc, #100]	; (80069e8 <HAL_TIM_PWM_Start+0x200>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d009      	beq.n	800699a <HAL_TIM_PWM_Start+0x1b2>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a18      	ldr	r2, [pc, #96]	; (80069ec <HAL_TIM_PWM_Start+0x204>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d004      	beq.n	800699a <HAL_TIM_PWM_Start+0x1b2>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a18      	ldr	r2, [pc, #96]	; (80069f8 <HAL_TIM_PWM_Start+0x210>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d115      	bne.n	80069c6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	689a      	ldr	r2, [r3, #8]
 80069a0:	4b19      	ldr	r3, [pc, #100]	; (8006a08 <HAL_TIM_PWM_Start+0x220>)
 80069a2:	4013      	ands	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2b06      	cmp	r3, #6
 80069aa:	d015      	beq.n	80069d8 <HAL_TIM_PWM_Start+0x1f0>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069b2:	d011      	beq.n	80069d8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f042 0201 	orr.w	r2, r2, #1
 80069c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069c4:	e008      	b.n	80069d8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f042 0201 	orr.w	r2, r2, #1
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	e000      	b.n	80069da <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	40012c00 	.word	0x40012c00
 80069e8:	40013400 	.word	0x40013400
 80069ec:	40014000 	.word	0x40014000
 80069f0:	40014400 	.word	0x40014400
 80069f4:	40014800 	.word	0x40014800
 80069f8:	40015000 	.word	0x40015000
 80069fc:	40000400 	.word	0x40000400
 8006a00:	40000800 	.word	0x40000800
 8006a04:	40000c00 	.word	0x40000c00
 8006a08:	00010007 	.word	0x00010007

08006a0c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	6839      	ldr	r1, [r7, #0]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f001 fa78 	bl	8007f14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a40      	ldr	r2, [pc, #256]	; (8006b2c <HAL_TIM_PWM_Stop+0x120>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d018      	beq.n	8006a60 <HAL_TIM_PWM_Stop+0x54>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a3f      	ldr	r2, [pc, #252]	; (8006b30 <HAL_TIM_PWM_Stop+0x124>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d013      	beq.n	8006a60 <HAL_TIM_PWM_Stop+0x54>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a3d      	ldr	r2, [pc, #244]	; (8006b34 <HAL_TIM_PWM_Stop+0x128>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d00e      	beq.n	8006a60 <HAL_TIM_PWM_Stop+0x54>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a3c      	ldr	r2, [pc, #240]	; (8006b38 <HAL_TIM_PWM_Stop+0x12c>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d009      	beq.n	8006a60 <HAL_TIM_PWM_Stop+0x54>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a3a      	ldr	r2, [pc, #232]	; (8006b3c <HAL_TIM_PWM_Stop+0x130>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d004      	beq.n	8006a60 <HAL_TIM_PWM_Stop+0x54>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a39      	ldr	r2, [pc, #228]	; (8006b40 <HAL_TIM_PWM_Stop+0x134>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d101      	bne.n	8006a64 <HAL_TIM_PWM_Stop+0x58>
 8006a60:	2301      	movs	r3, #1
 8006a62:	e000      	b.n	8006a66 <HAL_TIM_PWM_Stop+0x5a>
 8006a64:	2300      	movs	r3, #0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d017      	beq.n	8006a9a <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6a1a      	ldr	r2, [r3, #32]
 8006a70:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a74:	4013      	ands	r3, r2
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10f      	bne.n	8006a9a <HAL_TIM_PWM_Stop+0x8e>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6a1a      	ldr	r2, [r3, #32]
 8006a80:	f244 4344 	movw	r3, #17476	; 0x4444
 8006a84:	4013      	ands	r3, r2
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d107      	bne.n	8006a9a <HAL_TIM_PWM_Stop+0x8e>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6a1a      	ldr	r2, [r3, #32]
 8006aa0:	f241 1311 	movw	r3, #4369	; 0x1111
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10f      	bne.n	8006aca <HAL_TIM_PWM_Stop+0xbe>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6a1a      	ldr	r2, [r3, #32]
 8006ab0:	f244 4344 	movw	r3, #17476	; 0x4444
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d107      	bne.n	8006aca <HAL_TIM_PWM_Stop+0xbe>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f022 0201 	bic.w	r2, r2, #1
 8006ac8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d104      	bne.n	8006ada <HAL_TIM_PWM_Stop+0xce>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ad8:	e023      	b.n	8006b22 <HAL_TIM_PWM_Stop+0x116>
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	2b04      	cmp	r3, #4
 8006ade:	d104      	bne.n	8006aea <HAL_TIM_PWM_Stop+0xde>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ae8:	e01b      	b.n	8006b22 <HAL_TIM_PWM_Stop+0x116>
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	2b08      	cmp	r3, #8
 8006aee:	d104      	bne.n	8006afa <HAL_TIM_PWM_Stop+0xee>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006af8:	e013      	b.n	8006b22 <HAL_TIM_PWM_Stop+0x116>
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	2b0c      	cmp	r3, #12
 8006afe:	d104      	bne.n	8006b0a <HAL_TIM_PWM_Stop+0xfe>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b08:	e00b      	b.n	8006b22 <HAL_TIM_PWM_Stop+0x116>
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	2b10      	cmp	r3, #16
 8006b0e:	d104      	bne.n	8006b1a <HAL_TIM_PWM_Stop+0x10e>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b18:	e003      	b.n	8006b22 <HAL_TIM_PWM_Stop+0x116>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3708      	adds	r7, #8
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	40012c00 	.word	0x40012c00
 8006b30:	40013400 	.word	0x40013400
 8006b34:	40014000 	.word	0x40014000
 8006b38:	40014400 	.word	0x40014400
 8006b3c:	40014800 	.word	0x40014800
 8006b40:	40015000 	.word	0x40015000

08006b44 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d101      	bne.n	8006b58 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	e097      	b.n	8006c88 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d106      	bne.n	8006b72 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f7fb f9eb 	bl	8001f48 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2202      	movs	r2, #2
 8006b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	6812      	ldr	r2, [r2, #0]
 8006b84:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006b88:	f023 0307 	bic.w	r3, r3, #7
 8006b8c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	3304      	adds	r3, #4
 8006b96:	4619      	mov	r1, r3
 8006b98:	4610      	mov	r0, r2
 8006b9a:	f000 fcd9 	bl	8007550 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	699b      	ldr	r3, [r3, #24]
 8006bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	6a1b      	ldr	r3, [r3, #32]
 8006bb4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	697a      	ldr	r2, [r7, #20]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bc6:	f023 0303 	bic.w	r3, r3, #3
 8006bca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	689a      	ldr	r2, [r3, #8]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	699b      	ldr	r3, [r3, #24]
 8006bd4:	021b      	lsls	r3, r3, #8
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	693a      	ldr	r2, [r7, #16]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006be4:	f023 030c 	bic.w	r3, r3, #12
 8006be8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bf0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	68da      	ldr	r2, [r3, #12]
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	69db      	ldr	r3, [r3, #28]
 8006bfe:	021b      	lsls	r3, r3, #8
 8006c00:	4313      	orrs	r3, r2
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	011a      	lsls	r2, r3, #4
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	031b      	lsls	r3, r3, #12
 8006c14:	4313      	orrs	r3, r2
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006c22:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006c2a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	685a      	ldr	r2, [r3, #4]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	011b      	lsls	r3, r3, #4
 8006c36:	4313      	orrs	r3, r2
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3718      	adds	r7, #24
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ca0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ca8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cb0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cb8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d110      	bne.n	8006ce2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cc0:	7bfb      	ldrb	r3, [r7, #15]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d102      	bne.n	8006ccc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006cc6:	7b7b      	ldrb	r3, [r7, #13]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d001      	beq.n	8006cd0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e069      	b.n	8006da4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2202      	movs	r2, #2
 8006cdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ce0:	e031      	b.n	8006d46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	2b04      	cmp	r3, #4
 8006ce6:	d110      	bne.n	8006d0a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ce8:	7bbb      	ldrb	r3, [r7, #14]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d102      	bne.n	8006cf4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006cee:	7b3b      	ldrb	r3, [r7, #12]
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d001      	beq.n	8006cf8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e055      	b.n	8006da4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2202      	movs	r2, #2
 8006d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d08:	e01d      	b.n	8006d46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d0a:	7bfb      	ldrb	r3, [r7, #15]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d108      	bne.n	8006d22 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d10:	7bbb      	ldrb	r3, [r7, #14]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d105      	bne.n	8006d22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d16:	7b7b      	ldrb	r3, [r7, #13]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d102      	bne.n	8006d22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d1c:	7b3b      	ldrb	r3, [r7, #12]
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d001      	beq.n	8006d26 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e03e      	b.n	8006da4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2202      	movs	r2, #2
 8006d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2202      	movs	r2, #2
 8006d32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2202      	movs	r2, #2
 8006d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2202      	movs	r2, #2
 8006d42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d003      	beq.n	8006d54 <HAL_TIM_Encoder_Start+0xc4>
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	2b04      	cmp	r3, #4
 8006d50:	d008      	beq.n	8006d64 <HAL_TIM_Encoder_Start+0xd4>
 8006d52:	e00f      	b.n	8006d74 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f001 f8d9 	bl	8007f14 <TIM_CCxChannelCmd>
      break;
 8006d62:	e016      	b.n	8006d92 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	2104      	movs	r1, #4
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f001 f8d1 	bl	8007f14 <TIM_CCxChannelCmd>
      break;
 8006d72:	e00e      	b.n	8006d92 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	2100      	movs	r1, #0
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f001 f8c9 	bl	8007f14 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2201      	movs	r2, #1
 8006d88:	2104      	movs	r1, #4
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f001 f8c2 	bl	8007f14 <TIM_CCxChannelCmd>
      break;
 8006d90:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f042 0201 	orr.w	r2, r2, #1
 8006da0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	f003 0302 	and.w	r3, r3, #2
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	d122      	bne.n	8006e08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	f003 0302 	and.w	r3, r3, #2
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d11b      	bne.n	8006e08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f06f 0202 	mvn.w	r2, #2
 8006dd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	f003 0303 	and.w	r3, r3, #3
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fb90 	bl	8007514 <HAL_TIM_IC_CaptureCallback>
 8006df4:	e005      	b.n	8006e02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 fb82 	bl	8007500 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 fb93 	bl	8007528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	f003 0304 	and.w	r3, r3, #4
 8006e12:	2b04      	cmp	r3, #4
 8006e14:	d122      	bne.n	8006e5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	f003 0304 	and.w	r3, r3, #4
 8006e20:	2b04      	cmp	r3, #4
 8006e22:	d11b      	bne.n	8006e5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f06f 0204 	mvn.w	r2, #4
 8006e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2202      	movs	r2, #2
 8006e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d003      	beq.n	8006e4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fb66 	bl	8007514 <HAL_TIM_IC_CaptureCallback>
 8006e48:	e005      	b.n	8006e56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 fb58 	bl	8007500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 fb69 	bl	8007528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	f003 0308 	and.w	r3, r3, #8
 8006e66:	2b08      	cmp	r3, #8
 8006e68:	d122      	bne.n	8006eb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	f003 0308 	and.w	r3, r3, #8
 8006e74:	2b08      	cmp	r3, #8
 8006e76:	d11b      	bne.n	8006eb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f06f 0208 	mvn.w	r2, #8
 8006e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2204      	movs	r2, #4
 8006e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	69db      	ldr	r3, [r3, #28]
 8006e8e:	f003 0303 	and.w	r3, r3, #3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d003      	beq.n	8006e9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fb3c 	bl	8007514 <HAL_TIM_IC_CaptureCallback>
 8006e9c:	e005      	b.n	8006eaa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fb2e 	bl	8007500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 fb3f 	bl	8007528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	f003 0310 	and.w	r3, r3, #16
 8006eba:	2b10      	cmp	r3, #16
 8006ebc:	d122      	bne.n	8006f04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	f003 0310 	and.w	r3, r3, #16
 8006ec8:	2b10      	cmp	r3, #16
 8006eca:	d11b      	bne.n	8006f04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f06f 0210 	mvn.w	r2, #16
 8006ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2208      	movs	r2, #8
 8006eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	69db      	ldr	r3, [r3, #28]
 8006ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d003      	beq.n	8006ef2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 fb12 	bl	8007514 <HAL_TIM_IC_CaptureCallback>
 8006ef0:	e005      	b.n	8006efe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 fb04 	bl	8007500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fb15 	bl	8007528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d10e      	bne.n	8006f30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d107      	bne.n	8006f30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f06f 0201 	mvn.w	r2, #1
 8006f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f7fa fbde 	bl	80016ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f3a:	2b80      	cmp	r3, #128	; 0x80
 8006f3c:	d10e      	bne.n	8006f5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f48:	2b80      	cmp	r3, #128	; 0x80
 8006f4a:	d107      	bne.n	8006f5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f001 fb22 	bl	80085a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f6a:	d10e      	bne.n	8006f8a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f76:	2b80      	cmp	r3, #128	; 0x80
 8006f78:	d107      	bne.n	8006f8a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006f82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f001 fb15 	bl	80085b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f94:	2b40      	cmp	r3, #64	; 0x40
 8006f96:	d10e      	bne.n	8006fb6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa2:	2b40      	cmp	r3, #64	; 0x40
 8006fa4:	d107      	bne.n	8006fb6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 fac3 	bl	800753c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	f003 0320 	and.w	r3, r3, #32
 8006fc0:	2b20      	cmp	r3, #32
 8006fc2:	d10e      	bne.n	8006fe2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	f003 0320 	and.w	r3, r3, #32
 8006fce:	2b20      	cmp	r3, #32
 8006fd0:	d107      	bne.n	8006fe2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f06f 0220 	mvn.w	r2, #32
 8006fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f001 fad5 	bl	800858c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ff0:	d10f      	bne.n	8007012 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ffc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007000:	d107      	bne.n	8007012 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800700a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f001 fadb 	bl	80085c8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800701c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007020:	d10f      	bne.n	8007042 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800702c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007030:	d107      	bne.n	8007042 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800703a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f001 facd 	bl	80085dc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800704c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007050:	d10f      	bne.n	8007072 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800705c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007060:	d107      	bne.n	8007072 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800706a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f001 fabf 	bl	80085f0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800707c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007080:	d10f      	bne.n	80070a2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800708c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007090:	d107      	bne.n	80070a2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800709a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f001 fab1 	bl	8008604 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070a2:	bf00      	nop
 80070a4:	3708      	adds	r7, #8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
	...

080070ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b086      	sub	sp, #24
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070b8:	2300      	movs	r3, #0
 80070ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d101      	bne.n	80070ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80070c6:	2302      	movs	r3, #2
 80070c8:	e0ff      	b.n	80072ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2201      	movs	r2, #1
 80070ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2b14      	cmp	r3, #20
 80070d6:	f200 80f0 	bhi.w	80072ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80070da:	a201      	add	r2, pc, #4	; (adr r2, 80070e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80070dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e0:	08007135 	.word	0x08007135
 80070e4:	080072bb 	.word	0x080072bb
 80070e8:	080072bb 	.word	0x080072bb
 80070ec:	080072bb 	.word	0x080072bb
 80070f0:	08007175 	.word	0x08007175
 80070f4:	080072bb 	.word	0x080072bb
 80070f8:	080072bb 	.word	0x080072bb
 80070fc:	080072bb 	.word	0x080072bb
 8007100:	080071b7 	.word	0x080071b7
 8007104:	080072bb 	.word	0x080072bb
 8007108:	080072bb 	.word	0x080072bb
 800710c:	080072bb 	.word	0x080072bb
 8007110:	080071f7 	.word	0x080071f7
 8007114:	080072bb 	.word	0x080072bb
 8007118:	080072bb 	.word	0x080072bb
 800711c:	080072bb 	.word	0x080072bb
 8007120:	08007239 	.word	0x08007239
 8007124:	080072bb 	.word	0x080072bb
 8007128:	080072bb 	.word	0x080072bb
 800712c:	080072bb 	.word	0x080072bb
 8007130:	08007279 	.word	0x08007279
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68b9      	ldr	r1, [r7, #8]
 800713a:	4618      	mov	r0, r3
 800713c:	f000 fab0 	bl	80076a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	699a      	ldr	r2, [r3, #24]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f042 0208 	orr.w	r2, r2, #8
 800714e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	699a      	ldr	r2, [r3, #24]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f022 0204 	bic.w	r2, r2, #4
 800715e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	6999      	ldr	r1, [r3, #24]
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	691a      	ldr	r2, [r3, #16]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	430a      	orrs	r2, r1
 8007170:	619a      	str	r2, [r3, #24]
      break;
 8007172:	e0a5      	b.n	80072c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68b9      	ldr	r1, [r7, #8]
 800717a:	4618      	mov	r0, r3
 800717c:	f000 fb2a 	bl	80077d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	699a      	ldr	r2, [r3, #24]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800718e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	699a      	ldr	r2, [r3, #24]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800719e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	6999      	ldr	r1, [r3, #24]
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	021a      	lsls	r2, r3, #8
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	430a      	orrs	r2, r1
 80071b2:	619a      	str	r2, [r3, #24]
      break;
 80071b4:	e084      	b.n	80072c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68b9      	ldr	r1, [r7, #8]
 80071bc:	4618      	mov	r0, r3
 80071be:	f000 fb9d 	bl	80078fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	69da      	ldr	r2, [r3, #28]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f042 0208 	orr.w	r2, r2, #8
 80071d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	69da      	ldr	r2, [r3, #28]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f022 0204 	bic.w	r2, r2, #4
 80071e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	69d9      	ldr	r1, [r3, #28]
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	691a      	ldr	r2, [r3, #16]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	430a      	orrs	r2, r1
 80071f2:	61da      	str	r2, [r3, #28]
      break;
 80071f4:	e064      	b.n	80072c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68b9      	ldr	r1, [r7, #8]
 80071fc:	4618      	mov	r0, r3
 80071fe:	f000 fc0f 	bl	8007a20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	69da      	ldr	r2, [r3, #28]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	69da      	ldr	r2, [r3, #28]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	69d9      	ldr	r1, [r3, #28]
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	021a      	lsls	r2, r3, #8
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	430a      	orrs	r2, r1
 8007234:	61da      	str	r2, [r3, #28]
      break;
 8007236:	e043      	b.n	80072c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68b9      	ldr	r1, [r7, #8]
 800723e:	4618      	mov	r0, r3
 8007240:	f000 fc82 	bl	8007b48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f042 0208 	orr.w	r2, r2, #8
 8007252:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f022 0204 	bic.w	r2, r2, #4
 8007262:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	691a      	ldr	r2, [r3, #16]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	430a      	orrs	r2, r1
 8007274:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007276:	e023      	b.n	80072c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68b9      	ldr	r1, [r7, #8]
 800727e:	4618      	mov	r0, r3
 8007280:	f000 fccc 	bl	8007c1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007292:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072a2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	021a      	lsls	r2, r3, #8
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	430a      	orrs	r2, r1
 80072b6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80072b8:	e002      	b.n	80072c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	75fb      	strb	r3, [r7, #23]
      break;
 80072be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3718      	adds	r7, #24
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop

080072d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072de:	2300      	movs	r3, #0
 80072e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d101      	bne.n	80072f0 <HAL_TIM_ConfigClockSource+0x1c>
 80072ec:	2302      	movs	r3, #2
 80072ee:	e0f6      	b.n	80074de <HAL_TIM_ConfigClockSource+0x20a>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2202      	movs	r2, #2
 80072fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800730e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007312:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800731a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68ba      	ldr	r2, [r7, #8]
 8007322:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a6f      	ldr	r2, [pc, #444]	; (80074e8 <HAL_TIM_ConfigClockSource+0x214>)
 800732a:	4293      	cmp	r3, r2
 800732c:	f000 80c1 	beq.w	80074b2 <HAL_TIM_ConfigClockSource+0x1de>
 8007330:	4a6d      	ldr	r2, [pc, #436]	; (80074e8 <HAL_TIM_ConfigClockSource+0x214>)
 8007332:	4293      	cmp	r3, r2
 8007334:	f200 80c6 	bhi.w	80074c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007338:	4a6c      	ldr	r2, [pc, #432]	; (80074ec <HAL_TIM_ConfigClockSource+0x218>)
 800733a:	4293      	cmp	r3, r2
 800733c:	f000 80b9 	beq.w	80074b2 <HAL_TIM_ConfigClockSource+0x1de>
 8007340:	4a6a      	ldr	r2, [pc, #424]	; (80074ec <HAL_TIM_ConfigClockSource+0x218>)
 8007342:	4293      	cmp	r3, r2
 8007344:	f200 80be 	bhi.w	80074c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007348:	4a69      	ldr	r2, [pc, #420]	; (80074f0 <HAL_TIM_ConfigClockSource+0x21c>)
 800734a:	4293      	cmp	r3, r2
 800734c:	f000 80b1 	beq.w	80074b2 <HAL_TIM_ConfigClockSource+0x1de>
 8007350:	4a67      	ldr	r2, [pc, #412]	; (80074f0 <HAL_TIM_ConfigClockSource+0x21c>)
 8007352:	4293      	cmp	r3, r2
 8007354:	f200 80b6 	bhi.w	80074c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007358:	4a66      	ldr	r2, [pc, #408]	; (80074f4 <HAL_TIM_ConfigClockSource+0x220>)
 800735a:	4293      	cmp	r3, r2
 800735c:	f000 80a9 	beq.w	80074b2 <HAL_TIM_ConfigClockSource+0x1de>
 8007360:	4a64      	ldr	r2, [pc, #400]	; (80074f4 <HAL_TIM_ConfigClockSource+0x220>)
 8007362:	4293      	cmp	r3, r2
 8007364:	f200 80ae 	bhi.w	80074c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007368:	4a63      	ldr	r2, [pc, #396]	; (80074f8 <HAL_TIM_ConfigClockSource+0x224>)
 800736a:	4293      	cmp	r3, r2
 800736c:	f000 80a1 	beq.w	80074b2 <HAL_TIM_ConfigClockSource+0x1de>
 8007370:	4a61      	ldr	r2, [pc, #388]	; (80074f8 <HAL_TIM_ConfigClockSource+0x224>)
 8007372:	4293      	cmp	r3, r2
 8007374:	f200 80a6 	bhi.w	80074c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007378:	4a60      	ldr	r2, [pc, #384]	; (80074fc <HAL_TIM_ConfigClockSource+0x228>)
 800737a:	4293      	cmp	r3, r2
 800737c:	f000 8099 	beq.w	80074b2 <HAL_TIM_ConfigClockSource+0x1de>
 8007380:	4a5e      	ldr	r2, [pc, #376]	; (80074fc <HAL_TIM_ConfigClockSource+0x228>)
 8007382:	4293      	cmp	r3, r2
 8007384:	f200 809e 	bhi.w	80074c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007388:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800738c:	f000 8091 	beq.w	80074b2 <HAL_TIM_ConfigClockSource+0x1de>
 8007390:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007394:	f200 8096 	bhi.w	80074c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007398:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800739c:	f000 8089 	beq.w	80074b2 <HAL_TIM_ConfigClockSource+0x1de>
 80073a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073a4:	f200 808e 	bhi.w	80074c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80073a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073ac:	d03e      	beq.n	800742c <HAL_TIM_ConfigClockSource+0x158>
 80073ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073b2:	f200 8087 	bhi.w	80074c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80073b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ba:	f000 8086 	beq.w	80074ca <HAL_TIM_ConfigClockSource+0x1f6>
 80073be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073c2:	d87f      	bhi.n	80074c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80073c4:	2b70      	cmp	r3, #112	; 0x70
 80073c6:	d01a      	beq.n	80073fe <HAL_TIM_ConfigClockSource+0x12a>
 80073c8:	2b70      	cmp	r3, #112	; 0x70
 80073ca:	d87b      	bhi.n	80074c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80073cc:	2b60      	cmp	r3, #96	; 0x60
 80073ce:	d050      	beq.n	8007472 <HAL_TIM_ConfigClockSource+0x19e>
 80073d0:	2b60      	cmp	r3, #96	; 0x60
 80073d2:	d877      	bhi.n	80074c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80073d4:	2b50      	cmp	r3, #80	; 0x50
 80073d6:	d03c      	beq.n	8007452 <HAL_TIM_ConfigClockSource+0x17e>
 80073d8:	2b50      	cmp	r3, #80	; 0x50
 80073da:	d873      	bhi.n	80074c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80073dc:	2b40      	cmp	r3, #64	; 0x40
 80073de:	d058      	beq.n	8007492 <HAL_TIM_ConfigClockSource+0x1be>
 80073e0:	2b40      	cmp	r3, #64	; 0x40
 80073e2:	d86f      	bhi.n	80074c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80073e4:	2b30      	cmp	r3, #48	; 0x30
 80073e6:	d064      	beq.n	80074b2 <HAL_TIM_ConfigClockSource+0x1de>
 80073e8:	2b30      	cmp	r3, #48	; 0x30
 80073ea:	d86b      	bhi.n	80074c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80073ec:	2b20      	cmp	r3, #32
 80073ee:	d060      	beq.n	80074b2 <HAL_TIM_ConfigClockSource+0x1de>
 80073f0:	2b20      	cmp	r3, #32
 80073f2:	d867      	bhi.n	80074c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d05c      	beq.n	80074b2 <HAL_TIM_ConfigClockSource+0x1de>
 80073f8:	2b10      	cmp	r3, #16
 80073fa:	d05a      	beq.n	80074b2 <HAL_TIM_ConfigClockSource+0x1de>
 80073fc:	e062      	b.n	80074c4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6818      	ldr	r0, [r3, #0]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	6899      	ldr	r1, [r3, #8]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	685a      	ldr	r2, [r3, #4]
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	f000 fd61 	bl	8007ed4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007420:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	609a      	str	r2, [r3, #8]
      break;
 800742a:	e04f      	b.n	80074cc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6818      	ldr	r0, [r3, #0]
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	6899      	ldr	r1, [r3, #8]
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	685a      	ldr	r2, [r3, #4]
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	f000 fd4a 	bl	8007ed4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	689a      	ldr	r2, [r3, #8]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800744e:	609a      	str	r2, [r3, #8]
      break;
 8007450:	e03c      	b.n	80074cc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6818      	ldr	r0, [r3, #0]
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	6859      	ldr	r1, [r3, #4]
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	461a      	mov	r2, r3
 8007460:	f000 fcbc 	bl	8007ddc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2150      	movs	r1, #80	; 0x50
 800746a:	4618      	mov	r0, r3
 800746c:	f000 fd15 	bl	8007e9a <TIM_ITRx_SetConfig>
      break;
 8007470:	e02c      	b.n	80074cc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6818      	ldr	r0, [r3, #0]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	6859      	ldr	r1, [r3, #4]
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	461a      	mov	r2, r3
 8007480:	f000 fcdb 	bl	8007e3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2160      	movs	r1, #96	; 0x60
 800748a:	4618      	mov	r0, r3
 800748c:	f000 fd05 	bl	8007e9a <TIM_ITRx_SetConfig>
      break;
 8007490:	e01c      	b.n	80074cc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6818      	ldr	r0, [r3, #0]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	6859      	ldr	r1, [r3, #4]
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	461a      	mov	r2, r3
 80074a0:	f000 fc9c 	bl	8007ddc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2140      	movs	r1, #64	; 0x40
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 fcf5 	bl	8007e9a <TIM_ITRx_SetConfig>
      break;
 80074b0:	e00c      	b.n	80074cc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4619      	mov	r1, r3
 80074bc:	4610      	mov	r0, r2
 80074be:	f000 fcec 	bl	8007e9a <TIM_ITRx_SetConfig>
      break;
 80074c2:	e003      	b.n	80074cc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	73fb      	strb	r3, [r7, #15]
      break;
 80074c8:	e000      	b.n	80074cc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80074ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	00100070 	.word	0x00100070
 80074ec:	00100060 	.word	0x00100060
 80074f0:	00100050 	.word	0x00100050
 80074f4:	00100040 	.word	0x00100040
 80074f8:	00100030 	.word	0x00100030
 80074fc:	00100020 	.word	0x00100020

08007500 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a46      	ldr	r2, [pc, #280]	; (800767c <TIM_Base_SetConfig+0x12c>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d017      	beq.n	8007598 <TIM_Base_SetConfig+0x48>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800756e:	d013      	beq.n	8007598 <TIM_Base_SetConfig+0x48>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a43      	ldr	r2, [pc, #268]	; (8007680 <TIM_Base_SetConfig+0x130>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d00f      	beq.n	8007598 <TIM_Base_SetConfig+0x48>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a42      	ldr	r2, [pc, #264]	; (8007684 <TIM_Base_SetConfig+0x134>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d00b      	beq.n	8007598 <TIM_Base_SetConfig+0x48>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a41      	ldr	r2, [pc, #260]	; (8007688 <TIM_Base_SetConfig+0x138>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d007      	beq.n	8007598 <TIM_Base_SetConfig+0x48>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a40      	ldr	r2, [pc, #256]	; (800768c <TIM_Base_SetConfig+0x13c>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d003      	beq.n	8007598 <TIM_Base_SetConfig+0x48>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a3f      	ldr	r2, [pc, #252]	; (8007690 <TIM_Base_SetConfig+0x140>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d108      	bne.n	80075aa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800759e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a33      	ldr	r2, [pc, #204]	; (800767c <TIM_Base_SetConfig+0x12c>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d023      	beq.n	80075fa <TIM_Base_SetConfig+0xaa>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075b8:	d01f      	beq.n	80075fa <TIM_Base_SetConfig+0xaa>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a30      	ldr	r2, [pc, #192]	; (8007680 <TIM_Base_SetConfig+0x130>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d01b      	beq.n	80075fa <TIM_Base_SetConfig+0xaa>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a2f      	ldr	r2, [pc, #188]	; (8007684 <TIM_Base_SetConfig+0x134>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d017      	beq.n	80075fa <TIM_Base_SetConfig+0xaa>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a2e      	ldr	r2, [pc, #184]	; (8007688 <TIM_Base_SetConfig+0x138>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d013      	beq.n	80075fa <TIM_Base_SetConfig+0xaa>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a2d      	ldr	r2, [pc, #180]	; (800768c <TIM_Base_SetConfig+0x13c>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d00f      	beq.n	80075fa <TIM_Base_SetConfig+0xaa>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a2d      	ldr	r2, [pc, #180]	; (8007694 <TIM_Base_SetConfig+0x144>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d00b      	beq.n	80075fa <TIM_Base_SetConfig+0xaa>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a2c      	ldr	r2, [pc, #176]	; (8007698 <TIM_Base_SetConfig+0x148>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d007      	beq.n	80075fa <TIM_Base_SetConfig+0xaa>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a2b      	ldr	r2, [pc, #172]	; (800769c <TIM_Base_SetConfig+0x14c>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d003      	beq.n	80075fa <TIM_Base_SetConfig+0xaa>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a26      	ldr	r2, [pc, #152]	; (8007690 <TIM_Base_SetConfig+0x140>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d108      	bne.n	800760c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	4313      	orrs	r3, r2
 800760a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	4313      	orrs	r3, r2
 8007618:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	689a      	ldr	r2, [r3, #8]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a12      	ldr	r2, [pc, #72]	; (800767c <TIM_Base_SetConfig+0x12c>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d013      	beq.n	8007660 <TIM_Base_SetConfig+0x110>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a14      	ldr	r2, [pc, #80]	; (800768c <TIM_Base_SetConfig+0x13c>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d00f      	beq.n	8007660 <TIM_Base_SetConfig+0x110>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a14      	ldr	r2, [pc, #80]	; (8007694 <TIM_Base_SetConfig+0x144>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d00b      	beq.n	8007660 <TIM_Base_SetConfig+0x110>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a13      	ldr	r2, [pc, #76]	; (8007698 <TIM_Base_SetConfig+0x148>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d007      	beq.n	8007660 <TIM_Base_SetConfig+0x110>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a12      	ldr	r2, [pc, #72]	; (800769c <TIM_Base_SetConfig+0x14c>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d003      	beq.n	8007660 <TIM_Base_SetConfig+0x110>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a0d      	ldr	r2, [pc, #52]	; (8007690 <TIM_Base_SetConfig+0x140>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d103      	bne.n	8007668 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	691a      	ldr	r2, [r3, #16]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	615a      	str	r2, [r3, #20]
}
 800766e:	bf00      	nop
 8007670:	3714      	adds	r7, #20
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	40012c00 	.word	0x40012c00
 8007680:	40000400 	.word	0x40000400
 8007684:	40000800 	.word	0x40000800
 8007688:	40000c00 	.word	0x40000c00
 800768c:	40013400 	.word	0x40013400
 8007690:	40015000 	.word	0x40015000
 8007694:	40014000 	.word	0x40014000
 8007698:	40014400 	.word	0x40014400
 800769c:	40014800 	.word	0x40014800

080076a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b087      	sub	sp, #28
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a1b      	ldr	r3, [r3, #32]
 80076ae:	f023 0201 	bic.w	r2, r3, #1
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a1b      	ldr	r3, [r3, #32]
 80076ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f023 0303 	bic.w	r3, r3, #3
 80076da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	f023 0302 	bic.w	r3, r3, #2
 80076ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	697a      	ldr	r2, [r7, #20]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a30      	ldr	r2, [pc, #192]	; (80077bc <TIM_OC1_SetConfig+0x11c>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d013      	beq.n	8007728 <TIM_OC1_SetConfig+0x88>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a2f      	ldr	r2, [pc, #188]	; (80077c0 <TIM_OC1_SetConfig+0x120>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d00f      	beq.n	8007728 <TIM_OC1_SetConfig+0x88>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a2e      	ldr	r2, [pc, #184]	; (80077c4 <TIM_OC1_SetConfig+0x124>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d00b      	beq.n	8007728 <TIM_OC1_SetConfig+0x88>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a2d      	ldr	r2, [pc, #180]	; (80077c8 <TIM_OC1_SetConfig+0x128>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d007      	beq.n	8007728 <TIM_OC1_SetConfig+0x88>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a2c      	ldr	r2, [pc, #176]	; (80077cc <TIM_OC1_SetConfig+0x12c>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d003      	beq.n	8007728 <TIM_OC1_SetConfig+0x88>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a2b      	ldr	r2, [pc, #172]	; (80077d0 <TIM_OC1_SetConfig+0x130>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d10c      	bne.n	8007742 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	f023 0308 	bic.w	r3, r3, #8
 800772e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	697a      	ldr	r2, [r7, #20]
 8007736:	4313      	orrs	r3, r2
 8007738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	f023 0304 	bic.w	r3, r3, #4
 8007740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a1d      	ldr	r2, [pc, #116]	; (80077bc <TIM_OC1_SetConfig+0x11c>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d013      	beq.n	8007772 <TIM_OC1_SetConfig+0xd2>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a1c      	ldr	r2, [pc, #112]	; (80077c0 <TIM_OC1_SetConfig+0x120>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d00f      	beq.n	8007772 <TIM_OC1_SetConfig+0xd2>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a1b      	ldr	r2, [pc, #108]	; (80077c4 <TIM_OC1_SetConfig+0x124>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d00b      	beq.n	8007772 <TIM_OC1_SetConfig+0xd2>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a1a      	ldr	r2, [pc, #104]	; (80077c8 <TIM_OC1_SetConfig+0x128>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d007      	beq.n	8007772 <TIM_OC1_SetConfig+0xd2>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a19      	ldr	r2, [pc, #100]	; (80077cc <TIM_OC1_SetConfig+0x12c>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d003      	beq.n	8007772 <TIM_OC1_SetConfig+0xd2>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a18      	ldr	r2, [pc, #96]	; (80077d0 <TIM_OC1_SetConfig+0x130>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d111      	bne.n	8007796 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007778:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007780:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	695b      	ldr	r3, [r3, #20]
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	4313      	orrs	r3, r2
 800778a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	4313      	orrs	r3, r2
 8007794:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	693a      	ldr	r2, [r7, #16]
 800779a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	685a      	ldr	r2, [r3, #4]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	697a      	ldr	r2, [r7, #20]
 80077ae:	621a      	str	r2, [r3, #32]
}
 80077b0:	bf00      	nop
 80077b2:	371c      	adds	r7, #28
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr
 80077bc:	40012c00 	.word	0x40012c00
 80077c0:	40013400 	.word	0x40013400
 80077c4:	40014000 	.word	0x40014000
 80077c8:	40014400 	.word	0x40014400
 80077cc:	40014800 	.word	0x40014800
 80077d0:	40015000 	.word	0x40015000

080077d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b087      	sub	sp, #28
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a1b      	ldr	r3, [r3, #32]
 80077e2:	f023 0210 	bic.w	r2, r3, #16
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a1b      	ldr	r3, [r3, #32]
 80077ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	699b      	ldr	r3, [r3, #24]
 80077fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800780e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	021b      	lsls	r3, r3, #8
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	4313      	orrs	r3, r2
 800781a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	f023 0320 	bic.w	r3, r3, #32
 8007822:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	011b      	lsls	r3, r3, #4
 800782a:	697a      	ldr	r2, [r7, #20]
 800782c:	4313      	orrs	r3, r2
 800782e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4a2c      	ldr	r2, [pc, #176]	; (80078e4 <TIM_OC2_SetConfig+0x110>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d007      	beq.n	8007848 <TIM_OC2_SetConfig+0x74>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a2b      	ldr	r2, [pc, #172]	; (80078e8 <TIM_OC2_SetConfig+0x114>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d003      	beq.n	8007848 <TIM_OC2_SetConfig+0x74>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4a2a      	ldr	r2, [pc, #168]	; (80078ec <TIM_OC2_SetConfig+0x118>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d10d      	bne.n	8007864 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800784e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	011b      	lsls	r3, r3, #4
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	4313      	orrs	r3, r2
 800785a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007862:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a1f      	ldr	r2, [pc, #124]	; (80078e4 <TIM_OC2_SetConfig+0x110>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d013      	beq.n	8007894 <TIM_OC2_SetConfig+0xc0>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a1e      	ldr	r2, [pc, #120]	; (80078e8 <TIM_OC2_SetConfig+0x114>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d00f      	beq.n	8007894 <TIM_OC2_SetConfig+0xc0>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a1e      	ldr	r2, [pc, #120]	; (80078f0 <TIM_OC2_SetConfig+0x11c>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d00b      	beq.n	8007894 <TIM_OC2_SetConfig+0xc0>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a1d      	ldr	r2, [pc, #116]	; (80078f4 <TIM_OC2_SetConfig+0x120>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d007      	beq.n	8007894 <TIM_OC2_SetConfig+0xc0>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4a1c      	ldr	r2, [pc, #112]	; (80078f8 <TIM_OC2_SetConfig+0x124>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d003      	beq.n	8007894 <TIM_OC2_SetConfig+0xc0>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a17      	ldr	r2, [pc, #92]	; (80078ec <TIM_OC2_SetConfig+0x118>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d113      	bne.n	80078bc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800789a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	695b      	ldr	r3, [r3, #20]
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	685a      	ldr	r2, [r3, #4]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	697a      	ldr	r2, [r7, #20]
 80078d4:	621a      	str	r2, [r3, #32]
}
 80078d6:	bf00      	nop
 80078d8:	371c      	adds	r7, #28
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	40012c00 	.word	0x40012c00
 80078e8:	40013400 	.word	0x40013400
 80078ec:	40015000 	.word	0x40015000
 80078f0:	40014000 	.word	0x40014000
 80078f4:	40014400 	.word	0x40014400
 80078f8:	40014800 	.word	0x40014800

080078fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b087      	sub	sp, #28
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a1b      	ldr	r3, [r3, #32]
 800790a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a1b      	ldr	r3, [r3, #32]
 8007916:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	69db      	ldr	r3, [r3, #28]
 8007922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800792a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800792e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f023 0303 	bic.w	r3, r3, #3
 8007936:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	4313      	orrs	r3, r2
 8007940:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007948:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	021b      	lsls	r3, r3, #8
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	4313      	orrs	r3, r2
 8007954:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a2b      	ldr	r2, [pc, #172]	; (8007a08 <TIM_OC3_SetConfig+0x10c>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d007      	beq.n	800796e <TIM_OC3_SetConfig+0x72>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a2a      	ldr	r2, [pc, #168]	; (8007a0c <TIM_OC3_SetConfig+0x110>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d003      	beq.n	800796e <TIM_OC3_SetConfig+0x72>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a29      	ldr	r2, [pc, #164]	; (8007a10 <TIM_OC3_SetConfig+0x114>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d10d      	bne.n	800798a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007974:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	021b      	lsls	r3, r3, #8
 800797c:	697a      	ldr	r2, [r7, #20]
 800797e:	4313      	orrs	r3, r2
 8007980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007988:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a1e      	ldr	r2, [pc, #120]	; (8007a08 <TIM_OC3_SetConfig+0x10c>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d013      	beq.n	80079ba <TIM_OC3_SetConfig+0xbe>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a1d      	ldr	r2, [pc, #116]	; (8007a0c <TIM_OC3_SetConfig+0x110>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d00f      	beq.n	80079ba <TIM_OC3_SetConfig+0xbe>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a1d      	ldr	r2, [pc, #116]	; (8007a14 <TIM_OC3_SetConfig+0x118>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d00b      	beq.n	80079ba <TIM_OC3_SetConfig+0xbe>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a1c      	ldr	r2, [pc, #112]	; (8007a18 <TIM_OC3_SetConfig+0x11c>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d007      	beq.n	80079ba <TIM_OC3_SetConfig+0xbe>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a1b      	ldr	r2, [pc, #108]	; (8007a1c <TIM_OC3_SetConfig+0x120>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d003      	beq.n	80079ba <TIM_OC3_SetConfig+0xbe>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a16      	ldr	r2, [pc, #88]	; (8007a10 <TIM_OC3_SetConfig+0x114>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d113      	bne.n	80079e2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	011b      	lsls	r3, r3, #4
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	011b      	lsls	r3, r3, #4
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	4313      	orrs	r3, r2
 80079e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	693a      	ldr	r2, [r7, #16]
 80079e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	685a      	ldr	r2, [r3, #4]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	697a      	ldr	r2, [r7, #20]
 80079fa:	621a      	str	r2, [r3, #32]
}
 80079fc:	bf00      	nop
 80079fe:	371c      	adds	r7, #28
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr
 8007a08:	40012c00 	.word	0x40012c00
 8007a0c:	40013400 	.word	0x40013400
 8007a10:	40015000 	.word	0x40015000
 8007a14:	40014000 	.word	0x40014000
 8007a18:	40014400 	.word	0x40014400
 8007a1c:	40014800 	.word	0x40014800

08007a20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b087      	sub	sp, #28
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	69db      	ldr	r3, [r3, #28]
 8007a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	021b      	lsls	r3, r3, #8
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	031b      	lsls	r3, r3, #12
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a2c      	ldr	r2, [pc, #176]	; (8007b30 <TIM_OC4_SetConfig+0x110>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d007      	beq.n	8007a94 <TIM_OC4_SetConfig+0x74>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a2b      	ldr	r2, [pc, #172]	; (8007b34 <TIM_OC4_SetConfig+0x114>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d003      	beq.n	8007a94 <TIM_OC4_SetConfig+0x74>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a2a      	ldr	r2, [pc, #168]	; (8007b38 <TIM_OC4_SetConfig+0x118>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d10d      	bne.n	8007ab0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	031b      	lsls	r3, r3, #12
 8007aa2:	697a      	ldr	r2, [r7, #20]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007aae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a1f      	ldr	r2, [pc, #124]	; (8007b30 <TIM_OC4_SetConfig+0x110>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d013      	beq.n	8007ae0 <TIM_OC4_SetConfig+0xc0>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a1e      	ldr	r2, [pc, #120]	; (8007b34 <TIM_OC4_SetConfig+0x114>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d00f      	beq.n	8007ae0 <TIM_OC4_SetConfig+0xc0>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a1e      	ldr	r2, [pc, #120]	; (8007b3c <TIM_OC4_SetConfig+0x11c>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d00b      	beq.n	8007ae0 <TIM_OC4_SetConfig+0xc0>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a1d      	ldr	r2, [pc, #116]	; (8007b40 <TIM_OC4_SetConfig+0x120>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d007      	beq.n	8007ae0 <TIM_OC4_SetConfig+0xc0>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4a1c      	ldr	r2, [pc, #112]	; (8007b44 <TIM_OC4_SetConfig+0x124>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d003      	beq.n	8007ae0 <TIM_OC4_SetConfig+0xc0>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4a17      	ldr	r2, [pc, #92]	; (8007b38 <TIM_OC4_SetConfig+0x118>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d113      	bne.n	8007b08 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ae6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007aee:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	695b      	ldr	r3, [r3, #20]
 8007af4:	019b      	lsls	r3, r3, #6
 8007af6:	693a      	ldr	r2, [r7, #16]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	019b      	lsls	r3, r3, #6
 8007b02:	693a      	ldr	r2, [r7, #16]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	693a      	ldr	r2, [r7, #16]
 8007b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	685a      	ldr	r2, [r3, #4]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	697a      	ldr	r2, [r7, #20]
 8007b20:	621a      	str	r2, [r3, #32]
}
 8007b22:	bf00      	nop
 8007b24:	371c      	adds	r7, #28
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	40012c00 	.word	0x40012c00
 8007b34:	40013400 	.word	0x40013400
 8007b38:	40015000 	.word	0x40015000
 8007b3c:	40014000 	.word	0x40014000
 8007b40:	40014400 	.word	0x40014400
 8007b44:	40014800 	.word	0x40014800

08007b48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b087      	sub	sp, #28
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a1b      	ldr	r3, [r3, #32]
 8007b56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007b8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	041b      	lsls	r3, r3, #16
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a19      	ldr	r2, [pc, #100]	; (8007c04 <TIM_OC5_SetConfig+0xbc>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d013      	beq.n	8007bca <TIM_OC5_SetConfig+0x82>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a18      	ldr	r2, [pc, #96]	; (8007c08 <TIM_OC5_SetConfig+0xc0>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d00f      	beq.n	8007bca <TIM_OC5_SetConfig+0x82>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a17      	ldr	r2, [pc, #92]	; (8007c0c <TIM_OC5_SetConfig+0xc4>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d00b      	beq.n	8007bca <TIM_OC5_SetConfig+0x82>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a16      	ldr	r2, [pc, #88]	; (8007c10 <TIM_OC5_SetConfig+0xc8>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d007      	beq.n	8007bca <TIM_OC5_SetConfig+0x82>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a15      	ldr	r2, [pc, #84]	; (8007c14 <TIM_OC5_SetConfig+0xcc>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d003      	beq.n	8007bca <TIM_OC5_SetConfig+0x82>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a14      	ldr	r2, [pc, #80]	; (8007c18 <TIM_OC5_SetConfig+0xd0>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d109      	bne.n	8007bde <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bd0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	695b      	ldr	r3, [r3, #20]
 8007bd6:	021b      	lsls	r3, r3, #8
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	697a      	ldr	r2, [r7, #20]
 8007be2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	685a      	ldr	r2, [r3, #4]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	621a      	str	r2, [r3, #32]
}
 8007bf8:	bf00      	nop
 8007bfa:	371c      	adds	r7, #28
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr
 8007c04:	40012c00 	.word	0x40012c00
 8007c08:	40013400 	.word	0x40013400
 8007c0c:	40014000 	.word	0x40014000
 8007c10:	40014400 	.word	0x40014400
 8007c14:	40014800 	.word	0x40014800
 8007c18:	40015000 	.word	0x40015000

08007c1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b087      	sub	sp, #28
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a1b      	ldr	r3, [r3, #32]
 8007c2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a1b      	ldr	r3, [r3, #32]
 8007c36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	021b      	lsls	r3, r3, #8
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	051b      	lsls	r3, r3, #20
 8007c6a:	693a      	ldr	r2, [r7, #16]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	4a1a      	ldr	r2, [pc, #104]	; (8007cdc <TIM_OC6_SetConfig+0xc0>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d013      	beq.n	8007ca0 <TIM_OC6_SetConfig+0x84>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4a19      	ldr	r2, [pc, #100]	; (8007ce0 <TIM_OC6_SetConfig+0xc4>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d00f      	beq.n	8007ca0 <TIM_OC6_SetConfig+0x84>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4a18      	ldr	r2, [pc, #96]	; (8007ce4 <TIM_OC6_SetConfig+0xc8>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d00b      	beq.n	8007ca0 <TIM_OC6_SetConfig+0x84>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a17      	ldr	r2, [pc, #92]	; (8007ce8 <TIM_OC6_SetConfig+0xcc>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d007      	beq.n	8007ca0 <TIM_OC6_SetConfig+0x84>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a16      	ldr	r2, [pc, #88]	; (8007cec <TIM_OC6_SetConfig+0xd0>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d003      	beq.n	8007ca0 <TIM_OC6_SetConfig+0x84>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a15      	ldr	r2, [pc, #84]	; (8007cf0 <TIM_OC6_SetConfig+0xd4>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d109      	bne.n	8007cb4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ca6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	695b      	ldr	r3, [r3, #20]
 8007cac:	029b      	lsls	r3, r3, #10
 8007cae:	697a      	ldr	r2, [r7, #20]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	697a      	ldr	r2, [r7, #20]
 8007cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	685a      	ldr	r2, [r3, #4]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	693a      	ldr	r2, [r7, #16]
 8007ccc:	621a      	str	r2, [r3, #32]
}
 8007cce:	bf00      	nop
 8007cd0:	371c      	adds	r7, #28
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	40012c00 	.word	0x40012c00
 8007ce0:	40013400 	.word	0x40013400
 8007ce4:	40014000 	.word	0x40014000
 8007ce8:	40014400 	.word	0x40014400
 8007cec:	40014800 	.word	0x40014800
 8007cf0:	40015000 	.word	0x40015000

08007cf4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b087      	sub	sp, #28
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	607a      	str	r2, [r7, #4]
 8007d00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6a1b      	ldr	r3, [r3, #32]
 8007d06:	f023 0201 	bic.w	r2, r3, #1
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6a1b      	ldr	r3, [r3, #32]
 8007d18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	4a28      	ldr	r2, [pc, #160]	; (8007dc0 <TIM_TI1_SetConfig+0xcc>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d01b      	beq.n	8007d5a <TIM_TI1_SetConfig+0x66>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d28:	d017      	beq.n	8007d5a <TIM_TI1_SetConfig+0x66>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	4a25      	ldr	r2, [pc, #148]	; (8007dc4 <TIM_TI1_SetConfig+0xd0>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d013      	beq.n	8007d5a <TIM_TI1_SetConfig+0x66>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	4a24      	ldr	r2, [pc, #144]	; (8007dc8 <TIM_TI1_SetConfig+0xd4>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d00f      	beq.n	8007d5a <TIM_TI1_SetConfig+0x66>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	4a23      	ldr	r2, [pc, #140]	; (8007dcc <TIM_TI1_SetConfig+0xd8>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d00b      	beq.n	8007d5a <TIM_TI1_SetConfig+0x66>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	4a22      	ldr	r2, [pc, #136]	; (8007dd0 <TIM_TI1_SetConfig+0xdc>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d007      	beq.n	8007d5a <TIM_TI1_SetConfig+0x66>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	4a21      	ldr	r2, [pc, #132]	; (8007dd4 <TIM_TI1_SetConfig+0xe0>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d003      	beq.n	8007d5a <TIM_TI1_SetConfig+0x66>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	4a20      	ldr	r2, [pc, #128]	; (8007dd8 <TIM_TI1_SetConfig+0xe4>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d101      	bne.n	8007d5e <TIM_TI1_SetConfig+0x6a>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e000      	b.n	8007d60 <TIM_TI1_SetConfig+0x6c>
 8007d5e:	2300      	movs	r3, #0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d008      	beq.n	8007d76 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	f023 0303 	bic.w	r3, r3, #3
 8007d6a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007d6c:	697a      	ldr	r2, [r7, #20]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	617b      	str	r3, [r7, #20]
 8007d74:	e003      	b.n	8007d7e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	f043 0301 	orr.w	r3, r3, #1
 8007d7c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	011b      	lsls	r3, r3, #4
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	f023 030a 	bic.w	r3, r3, #10
 8007d98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	f003 030a 	and.w	r3, r3, #10
 8007da0:	693a      	ldr	r2, [r7, #16]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	697a      	ldr	r2, [r7, #20]
 8007daa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	693a      	ldr	r2, [r7, #16]
 8007db0:	621a      	str	r2, [r3, #32]
}
 8007db2:	bf00      	nop
 8007db4:	371c      	adds	r7, #28
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	40012c00 	.word	0x40012c00
 8007dc4:	40000400 	.word	0x40000400
 8007dc8:	40000800 	.word	0x40000800
 8007dcc:	40000c00 	.word	0x40000c00
 8007dd0:	40013400 	.word	0x40013400
 8007dd4:	40014000 	.word	0x40014000
 8007dd8:	40015000 	.word	0x40015000

08007ddc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b087      	sub	sp, #28
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6a1b      	ldr	r3, [r3, #32]
 8007dec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6a1b      	ldr	r3, [r3, #32]
 8007df2:	f023 0201 	bic.w	r2, r3, #1
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	699b      	ldr	r3, [r3, #24]
 8007dfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	011b      	lsls	r3, r3, #4
 8007e0c:	693a      	ldr	r2, [r7, #16]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	f023 030a 	bic.w	r3, r3, #10
 8007e18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e1a:	697a      	ldr	r2, [r7, #20]
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	697a      	ldr	r2, [r7, #20]
 8007e2c:	621a      	str	r2, [r3, #32]
}
 8007e2e:	bf00      	nop
 8007e30:	371c      	adds	r7, #28
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr

08007e3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e3a:	b480      	push	{r7}
 8007e3c:	b087      	sub	sp, #28
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	60f8      	str	r0, [r7, #12]
 8007e42:	60b9      	str	r1, [r7, #8]
 8007e44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6a1b      	ldr	r3, [r3, #32]
 8007e4a:	f023 0210 	bic.w	r2, r3, #16
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	699b      	ldr	r3, [r3, #24]
 8007e56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6a1b      	ldr	r3, [r3, #32]
 8007e5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	031b      	lsls	r3, r3, #12
 8007e6a:	697a      	ldr	r2, [r7, #20]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	011b      	lsls	r3, r3, #4
 8007e7c:	693a      	ldr	r2, [r7, #16]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	697a      	ldr	r2, [r7, #20]
 8007e86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	693a      	ldr	r2, [r7, #16]
 8007e8c:	621a      	str	r2, [r3, #32]
}
 8007e8e:	bf00      	nop
 8007e90:	371c      	adds	r7, #28
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b085      	sub	sp, #20
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
 8007ea2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007eb6:	683a      	ldr	r2, [r7, #0]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	f043 0307 	orr.w	r3, r3, #7
 8007ec0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	609a      	str	r2, [r3, #8]
}
 8007ec8:	bf00      	nop
 8007eca:	3714      	adds	r7, #20
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b087      	sub	sp, #28
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]
 8007ee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007eee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	021a      	lsls	r2, r3, #8
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	431a      	orrs	r2, r3
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	697a      	ldr	r2, [r7, #20]
 8007f06:	609a      	str	r2, [r3, #8]
}
 8007f08:	bf00      	nop
 8007f0a:	371c      	adds	r7, #28
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b087      	sub	sp, #28
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	f003 031f 	and.w	r3, r3, #31
 8007f26:	2201      	movs	r2, #1
 8007f28:	fa02 f303 	lsl.w	r3, r2, r3
 8007f2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6a1a      	ldr	r2, [r3, #32]
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	43db      	mvns	r3, r3
 8007f36:	401a      	ands	r2, r3
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6a1a      	ldr	r2, [r3, #32]
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	f003 031f 	and.w	r3, r3, #31
 8007f46:	6879      	ldr	r1, [r7, #4]
 8007f48:	fa01 f303 	lsl.w	r3, r1, r3
 8007f4c:	431a      	orrs	r2, r3
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	621a      	str	r2, [r3, #32]
}
 8007f52:	bf00      	nop
 8007f54:	371c      	adds	r7, #28
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr

08007f5e <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b08a      	sub	sp, #40	; 0x28
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
 8007f66:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d101      	bne.n	8007f72 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e0a0      	b.n	80080b4 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d106      	bne.n	8007f8c <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f7f9 ff7c 	bl	8001e84 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2202      	movs	r2, #2
 8007f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	3304      	adds	r3, #4
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	4610      	mov	r0, r2
 8007fa0:	f7ff fad6 	bl	8007550 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6818      	ldr	r0, [r3, #0]
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	6819      	ldr	r1, [r3, #0]
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	2203      	movs	r2, #3
 8007fb2:	f7ff fe9f 	bl	8007cf4 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	699a      	ldr	r2, [r3, #24]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f022 020c 	bic.w	r2, r2, #12
 8007fc4:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	6999      	ldr	r1, [r3, #24]
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	685a      	ldr	r2, [r3, #4]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	430a      	orrs	r2, r1
 8007fd6:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	685a      	ldr	r2, [r3, #4]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007fe6:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	6812      	ldr	r2, [r2, #0]
 8007ff2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ffa:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	689a      	ldr	r2, [r3, #8]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800800a:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	6812      	ldr	r2, [r2, #0]
 8008016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800801a:	f023 0307 	bic.w	r3, r3, #7
 800801e:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	689a      	ldr	r2, [r3, #8]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f042 0204 	orr.w	r2, r2, #4
 800802e:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8008030:	2300      	movs	r3, #0
 8008032:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008034:	2300      	movs	r3, #0
 8008036:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8008038:	2370      	movs	r3, #112	; 0x70
 800803a:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800803c:	2300      	movs	r3, #0
 800803e:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008040:	2300      	movs	r3, #0
 8008042:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008044:	2300      	movs	r3, #0
 8008046:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f107 020c 	add.w	r2, r7, #12
 8008056:	4611      	mov	r1, r2
 8008058:	4618      	mov	r0, r3
 800805a:	f7ff fbbb 	bl	80077d4 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	6812      	ldr	r2, [r2, #0]
 8008068:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800806c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008070:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	685a      	ldr	r2, [r3, #4]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8008080:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2201      	movs	r2, #1
 800808e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2201      	movs	r2, #1
 800809e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2201      	movs	r2, #1
 80080a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2201      	movs	r2, #1
 80080ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3728      	adds	r7, #40	; 0x28
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d109      	bne.n	80080e0 <HAL_TIMEx_PWMN_Start+0x24>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	bf14      	ite	ne
 80080d8:	2301      	movne	r3, #1
 80080da:	2300      	moveq	r3, #0
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	e022      	b.n	8008126 <HAL_TIMEx_PWMN_Start+0x6a>
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	2b04      	cmp	r3, #4
 80080e4:	d109      	bne.n	80080fa <HAL_TIMEx_PWMN_Start+0x3e>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	bf14      	ite	ne
 80080f2:	2301      	movne	r3, #1
 80080f4:	2300      	moveq	r3, #0
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	e015      	b.n	8008126 <HAL_TIMEx_PWMN_Start+0x6a>
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	2b08      	cmp	r3, #8
 80080fe:	d109      	bne.n	8008114 <HAL_TIMEx_PWMN_Start+0x58>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008106:	b2db      	uxtb	r3, r3
 8008108:	2b01      	cmp	r3, #1
 800810a:	bf14      	ite	ne
 800810c:	2301      	movne	r3, #1
 800810e:	2300      	moveq	r3, #0
 8008110:	b2db      	uxtb	r3, r3
 8008112:	e008      	b.n	8008126 <HAL_TIMEx_PWMN_Start+0x6a>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800811a:	b2db      	uxtb	r3, r3
 800811c:	2b01      	cmp	r3, #1
 800811e:	bf14      	ite	ne
 8008120:	2301      	movne	r3, #1
 8008122:	2300      	moveq	r3, #0
 8008124:	b2db      	uxtb	r3, r3
 8008126:	2b00      	cmp	r3, #0
 8008128:	d001      	beq.n	800812e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	e073      	b.n	8008216 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d104      	bne.n	800813e <HAL_TIMEx_PWMN_Start+0x82>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2202      	movs	r2, #2
 8008138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800813c:	e013      	b.n	8008166 <HAL_TIMEx_PWMN_Start+0xaa>
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	2b04      	cmp	r3, #4
 8008142:	d104      	bne.n	800814e <HAL_TIMEx_PWMN_Start+0x92>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2202      	movs	r2, #2
 8008148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800814c:	e00b      	b.n	8008166 <HAL_TIMEx_PWMN_Start+0xaa>
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	2b08      	cmp	r3, #8
 8008152:	d104      	bne.n	800815e <HAL_TIMEx_PWMN_Start+0xa2>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2202      	movs	r2, #2
 8008158:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800815c:	e003      	b.n	8008166 <HAL_TIMEx_PWMN_Start+0xaa>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2202      	movs	r2, #2
 8008162:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2204      	movs	r2, #4
 800816c:	6839      	ldr	r1, [r7, #0]
 800816e:	4618      	mov	r0, r3
 8008170:	f000 fa52 	bl	8008618 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008182:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a25      	ldr	r2, [pc, #148]	; (8008220 <HAL_TIMEx_PWMN_Start+0x164>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d022      	beq.n	80081d4 <HAL_TIMEx_PWMN_Start+0x118>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008196:	d01d      	beq.n	80081d4 <HAL_TIMEx_PWMN_Start+0x118>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a21      	ldr	r2, [pc, #132]	; (8008224 <HAL_TIMEx_PWMN_Start+0x168>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d018      	beq.n	80081d4 <HAL_TIMEx_PWMN_Start+0x118>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a20      	ldr	r2, [pc, #128]	; (8008228 <HAL_TIMEx_PWMN_Start+0x16c>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d013      	beq.n	80081d4 <HAL_TIMEx_PWMN_Start+0x118>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a1e      	ldr	r2, [pc, #120]	; (800822c <HAL_TIMEx_PWMN_Start+0x170>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d00e      	beq.n	80081d4 <HAL_TIMEx_PWMN_Start+0x118>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a1d      	ldr	r2, [pc, #116]	; (8008230 <HAL_TIMEx_PWMN_Start+0x174>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d009      	beq.n	80081d4 <HAL_TIMEx_PWMN_Start+0x118>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a1b      	ldr	r2, [pc, #108]	; (8008234 <HAL_TIMEx_PWMN_Start+0x178>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d004      	beq.n	80081d4 <HAL_TIMEx_PWMN_Start+0x118>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a1a      	ldr	r2, [pc, #104]	; (8008238 <HAL_TIMEx_PWMN_Start+0x17c>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d115      	bne.n	8008200 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	689a      	ldr	r2, [r3, #8]
 80081da:	4b18      	ldr	r3, [pc, #96]	; (800823c <HAL_TIMEx_PWMN_Start+0x180>)
 80081dc:	4013      	ands	r3, r2
 80081de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2b06      	cmp	r3, #6
 80081e4:	d015      	beq.n	8008212 <HAL_TIMEx_PWMN_Start+0x156>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081ec:	d011      	beq.n	8008212 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f042 0201 	orr.w	r2, r2, #1
 80081fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081fe:	e008      	b.n	8008212 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f042 0201 	orr.w	r2, r2, #1
 800820e:	601a      	str	r2, [r3, #0]
 8008210:	e000      	b.n	8008214 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008212:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008214:	2300      	movs	r3, #0
}
 8008216:	4618      	mov	r0, r3
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	40012c00 	.word	0x40012c00
 8008224:	40000400 	.word	0x40000400
 8008228:	40000800 	.word	0x40000800
 800822c:	40000c00 	.word	0x40000c00
 8008230:	40013400 	.word	0x40013400
 8008234:	40014000 	.word	0x40014000
 8008238:	40015000 	.word	0x40015000
 800823c:	00010007 	.word	0x00010007

08008240 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2200      	movs	r2, #0
 8008250:	6839      	ldr	r1, [r7, #0]
 8008252:	4618      	mov	r0, r3
 8008254:	f000 f9e0 	bl	8008618 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	6a1a      	ldr	r2, [r3, #32]
 800825e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008262:	4013      	ands	r3, r2
 8008264:	2b00      	cmp	r3, #0
 8008266:	d10f      	bne.n	8008288 <HAL_TIMEx_PWMN_Stop+0x48>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	6a1a      	ldr	r2, [r3, #32]
 800826e:	f244 4344 	movw	r3, #17476	; 0x4444
 8008272:	4013      	ands	r3, r2
 8008274:	2b00      	cmp	r3, #0
 8008276:	d107      	bne.n	8008288 <HAL_TIMEx_PWMN_Stop+0x48>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008286:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	6a1a      	ldr	r2, [r3, #32]
 800828e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008292:	4013      	ands	r3, r2
 8008294:	2b00      	cmp	r3, #0
 8008296:	d10f      	bne.n	80082b8 <HAL_TIMEx_PWMN_Stop+0x78>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	6a1a      	ldr	r2, [r3, #32]
 800829e:	f244 4344 	movw	r3, #17476	; 0x4444
 80082a2:	4013      	ands	r3, r2
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d107      	bne.n	80082b8 <HAL_TIMEx_PWMN_Stop+0x78>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f022 0201 	bic.w	r2, r2, #1
 80082b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d104      	bne.n	80082c8 <HAL_TIMEx_PWMN_Stop+0x88>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2201      	movs	r2, #1
 80082c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082c6:	e013      	b.n	80082f0 <HAL_TIMEx_PWMN_Stop+0xb0>
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	2b04      	cmp	r3, #4
 80082cc:	d104      	bne.n	80082d8 <HAL_TIMEx_PWMN_Stop+0x98>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082d6:	e00b      	b.n	80082f0 <HAL_TIMEx_PWMN_Stop+0xb0>
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	2b08      	cmp	r3, #8
 80082dc:	d104      	bne.n	80082e8 <HAL_TIMEx_PWMN_Stop+0xa8>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80082e6:	e003      	b.n	80082f0 <HAL_TIMEx_PWMN_Stop+0xb0>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3708      	adds	r7, #8
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
	...

080082fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800830c:	2b01      	cmp	r3, #1
 800830e:	d101      	bne.n	8008314 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008310:	2302      	movs	r3, #2
 8008312:	e074      	b.n	80083fe <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2202      	movs	r2, #2
 8008320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a34      	ldr	r2, [pc, #208]	; (800840c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d009      	beq.n	8008352 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a33      	ldr	r2, [pc, #204]	; (8008410 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d004      	beq.n	8008352 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a31      	ldr	r2, [pc, #196]	; (8008414 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d108      	bne.n	8008364 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008358:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	4313      	orrs	r3, r2
 8008362:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800836a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800836e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	4313      	orrs	r3, r2
 8008378:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a21      	ldr	r2, [pc, #132]	; (800840c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d022      	beq.n	80083d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008394:	d01d      	beq.n	80083d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a1f      	ldr	r2, [pc, #124]	; (8008418 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d018      	beq.n	80083d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a1d      	ldr	r2, [pc, #116]	; (800841c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d013      	beq.n	80083d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a1c      	ldr	r2, [pc, #112]	; (8008420 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d00e      	beq.n	80083d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a15      	ldr	r2, [pc, #84]	; (8008410 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d009      	beq.n	80083d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a18      	ldr	r2, [pc, #96]	; (8008424 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d004      	beq.n	80083d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a11      	ldr	r2, [pc, #68]	; (8008414 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d10c      	bne.n	80083ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	68ba      	ldr	r2, [r7, #8]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68ba      	ldr	r2, [r7, #8]
 80083ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3714      	adds	r7, #20
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	40012c00 	.word	0x40012c00
 8008410:	40013400 	.word	0x40013400
 8008414:	40015000 	.word	0x40015000
 8008418:	40000400 	.word	0x40000400
 800841c:	40000800 	.word	0x40000800
 8008420:	40000c00 	.word	0x40000c00
 8008424:	40014000 	.word	0x40014000

08008428 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008432:	2300      	movs	r3, #0
 8008434:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800843c:	2b01      	cmp	r3, #1
 800843e:	d101      	bne.n	8008444 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008440:	2302      	movs	r3, #2
 8008442:	e096      	b.n	8008572 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	4313      	orrs	r3, r2
 8008458:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	4313      	orrs	r3, r2
 8008466:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	4313      	orrs	r3, r2
 8008474:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4313      	orrs	r3, r2
 8008482:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	4313      	orrs	r3, r2
 8008490:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	695b      	ldr	r3, [r3, #20]
 800849c:	4313      	orrs	r3, r2
 800849e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084aa:	4313      	orrs	r3, r2
 80084ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	699b      	ldr	r3, [r3, #24]
 80084b8:	041b      	lsls	r3, r3, #16
 80084ba:	4313      	orrs	r3, r2
 80084bc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a2f      	ldr	r2, [pc, #188]	; (8008580 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d009      	beq.n	80084dc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a2d      	ldr	r2, [pc, #180]	; (8008584 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d004      	beq.n	80084dc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a2c      	ldr	r2, [pc, #176]	; (8008588 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d106      	bne.n	80084ea <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	69db      	ldr	r3, [r3, #28]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a24      	ldr	r2, [pc, #144]	; (8008580 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d009      	beq.n	8008508 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a22      	ldr	r2, [pc, #136]	; (8008584 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d004      	beq.n	8008508 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a21      	ldr	r2, [pc, #132]	; (8008588 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d12b      	bne.n	8008560 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008512:	051b      	lsls	r3, r3, #20
 8008514:	4313      	orrs	r3, r2
 8008516:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	6a1b      	ldr	r3, [r3, #32]
 8008522:	4313      	orrs	r3, r2
 8008524:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008530:	4313      	orrs	r3, r2
 8008532:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a11      	ldr	r2, [pc, #68]	; (8008580 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d009      	beq.n	8008552 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a10      	ldr	r2, [pc, #64]	; (8008584 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d004      	beq.n	8008552 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a0e      	ldr	r2, [pc, #56]	; (8008588 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d106      	bne.n	8008560 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855c:	4313      	orrs	r3, r2
 800855e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	3714      	adds	r7, #20
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	40012c00 	.word	0x40012c00
 8008584:	40013400 	.word	0x40013400
 8008588:	40015000 	.word	0x40015000

0800858c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008594:	bf00      	nop
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085a8:	bf00      	nop
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800860c:	bf00      	nop
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008618:	b480      	push	{r7}
 800861a:	b087      	sub	sp, #28
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	f003 031f 	and.w	r3, r3, #31
 800862a:	2204      	movs	r2, #4
 800862c:	fa02 f303 	lsl.w	r3, r2, r3
 8008630:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6a1a      	ldr	r2, [r3, #32]
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	43db      	mvns	r3, r3
 800863a:	401a      	ands	r2, r3
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6a1a      	ldr	r2, [r3, #32]
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	f003 031f 	and.w	r3, r3, #31
 800864a:	6879      	ldr	r1, [r7, #4]
 800864c:	fa01 f303 	lsl.w	r3, r1, r3
 8008650:	431a      	orrs	r2, r3
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	621a      	str	r2, [r3, #32]
}
 8008656:	bf00      	nop
 8008658:	371c      	adds	r7, #28
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr

08008662 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b082      	sub	sp, #8
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d101      	bne.n	8008674 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	e042      	b.n	80086fa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800867a:	2b00      	cmp	r3, #0
 800867c:	d106      	bne.n	800868c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f7f9 fdc8 	bl	800221c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2224      	movs	r2, #36	; 0x24
 8008690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f022 0201 	bic.w	r2, r2, #1
 80086a2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 fc51 	bl	8008f4c <UART_SetConfig>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d101      	bne.n	80086b4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e022      	b.n	80086fa <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d002      	beq.n	80086c2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 ff41 	bl	8009544 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	685a      	ldr	r2, [r3, #4]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80086d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	689a      	ldr	r2, [r3, #8]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80086e0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f042 0201 	orr.w	r2, r2, #1
 80086f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 ffc8 	bl	8009688 <UART_CheckIdleState>
 80086f8:	4603      	mov	r3, r0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b08a      	sub	sp, #40	; 0x28
 8008706:	af02      	add	r7, sp, #8
 8008708:	60f8      	str	r0, [r7, #12]
 800870a:	60b9      	str	r1, [r7, #8]
 800870c:	603b      	str	r3, [r7, #0]
 800870e:	4613      	mov	r3, r2
 8008710:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008718:	2b20      	cmp	r3, #32
 800871a:	f040 8083 	bne.w	8008824 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d002      	beq.n	800872a <HAL_UART_Transmit+0x28>
 8008724:	88fb      	ldrh	r3, [r7, #6]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d101      	bne.n	800872e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	e07b      	b.n	8008826 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008734:	2b01      	cmp	r3, #1
 8008736:	d101      	bne.n	800873c <HAL_UART_Transmit+0x3a>
 8008738:	2302      	movs	r3, #2
 800873a:	e074      	b.n	8008826 <HAL_UART_Transmit+0x124>
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2200      	movs	r2, #0
 8008748:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2221      	movs	r2, #33	; 0x21
 8008750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008754:	f7fa f8e8 	bl	8002928 <HAL_GetTick>
 8008758:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	88fa      	ldrh	r2, [r7, #6]
 800875e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	88fa      	ldrh	r2, [r7, #6]
 8008766:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008772:	d108      	bne.n	8008786 <HAL_UART_Transmit+0x84>
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d104      	bne.n	8008786 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800877c:	2300      	movs	r3, #0
 800877e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	61bb      	str	r3, [r7, #24]
 8008784:	e003      	b.n	800878e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800878a:	2300      	movs	r3, #0
 800878c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008796:	e02c      	b.n	80087f2 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	9300      	str	r3, [sp, #0]
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	2200      	movs	r2, #0
 80087a0:	2180      	movs	r1, #128	; 0x80
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f000 ffbb 	bl	800971e <UART_WaitOnFlagUntilTimeout>
 80087a8:	4603      	mov	r3, r0
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d001      	beq.n	80087b2 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80087ae:	2303      	movs	r3, #3
 80087b0:	e039      	b.n	8008826 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d10b      	bne.n	80087d0 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80087b8:	69bb      	ldr	r3, [r7, #24]
 80087ba:	881b      	ldrh	r3, [r3, #0]
 80087bc:	461a      	mov	r2, r3
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	3302      	adds	r3, #2
 80087cc:	61bb      	str	r3, [r7, #24]
 80087ce:	e007      	b.n	80087e0 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	781a      	ldrb	r2, [r3, #0]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	3301      	adds	r3, #1
 80087de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	3b01      	subs	r3, #1
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1cc      	bne.n	8008798 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	9300      	str	r3, [sp, #0]
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	2200      	movs	r2, #0
 8008806:	2140      	movs	r1, #64	; 0x40
 8008808:	68f8      	ldr	r0, [r7, #12]
 800880a:	f000 ff88 	bl	800971e <UART_WaitOnFlagUntilTimeout>
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d001      	beq.n	8008818 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008814:	2303      	movs	r3, #3
 8008816:	e006      	b.n	8008826 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2220      	movs	r2, #32
 800881c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008820:	2300      	movs	r3, #0
 8008822:	e000      	b.n	8008826 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008824:	2302      	movs	r3, #2
  }
}
 8008826:	4618      	mov	r0, r3
 8008828:	3720      	adds	r7, #32
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
	...

08008830 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b08a      	sub	sp, #40	; 0x28
 8008834:	af00      	add	r7, sp, #0
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	60b9      	str	r1, [r7, #8]
 800883a:	4613      	mov	r3, r2
 800883c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008844:	2b20      	cmp	r3, #32
 8008846:	d142      	bne.n	80088ce <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d002      	beq.n	8008854 <HAL_UART_Receive_IT+0x24>
 800884e:	88fb      	ldrh	r3, [r7, #6]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d101      	bne.n	8008858 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	e03b      	b.n	80088d0 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800885e:	2b01      	cmp	r3, #1
 8008860:	d101      	bne.n	8008866 <HAL_UART_Receive_IT+0x36>
 8008862:	2302      	movs	r3, #2
 8008864:	e034      	b.n	80088d0 <HAL_UART_Receive_IT+0xa0>
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2201      	movs	r2, #1
 800886a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a17      	ldr	r2, [pc, #92]	; (80088d8 <HAL_UART_Receive_IT+0xa8>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d01f      	beq.n	80088be <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008888:	2b00      	cmp	r3, #0
 800888a:	d018      	beq.n	80088be <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	e853 3f00 	ldrex	r3, [r3]
 8008898:	613b      	str	r3, [r7, #16]
   return(result);
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80088a0:	627b      	str	r3, [r7, #36]	; 0x24
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	461a      	mov	r2, r3
 80088a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088aa:	623b      	str	r3, [r7, #32]
 80088ac:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ae:	69f9      	ldr	r1, [r7, #28]
 80088b0:	6a3a      	ldr	r2, [r7, #32]
 80088b2:	e841 2300 	strex	r3, r2, [r1]
 80088b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1e6      	bne.n	800888c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80088be:	88fb      	ldrh	r3, [r7, #6]
 80088c0:	461a      	mov	r2, r3
 80088c2:	68b9      	ldr	r1, [r7, #8]
 80088c4:	68f8      	ldr	r0, [r7, #12]
 80088c6:	f000 fff3 	bl	80098b0 <UART_Start_Receive_IT>
 80088ca:	4603      	mov	r3, r0
 80088cc:	e000      	b.n	80088d0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80088ce:	2302      	movs	r3, #2
  }
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3728      	adds	r7, #40	; 0x28
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	40008000 	.word	0x40008000

080088dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b0ba      	sub	sp, #232	; 0xe8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	69db      	ldr	r3, [r3, #28]
 80088ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	689b      	ldr	r3, [r3, #8]
 80088fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008902:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008906:	f640 030f 	movw	r3, #2063	; 0x80f
 800890a:	4013      	ands	r3, r2
 800890c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008910:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008914:	2b00      	cmp	r3, #0
 8008916:	d11b      	bne.n	8008950 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800891c:	f003 0320 	and.w	r3, r3, #32
 8008920:	2b00      	cmp	r3, #0
 8008922:	d015      	beq.n	8008950 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008928:	f003 0320 	and.w	r3, r3, #32
 800892c:	2b00      	cmp	r3, #0
 800892e:	d105      	bne.n	800893c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008938:	2b00      	cmp	r3, #0
 800893a:	d009      	beq.n	8008950 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008940:	2b00      	cmp	r3, #0
 8008942:	f000 82d6 	beq.w	8008ef2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	4798      	blx	r3
      }
      return;
 800894e:	e2d0      	b.n	8008ef2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008950:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008954:	2b00      	cmp	r3, #0
 8008956:	f000 811f 	beq.w	8008b98 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800895a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800895e:	4b8b      	ldr	r3, [pc, #556]	; (8008b8c <HAL_UART_IRQHandler+0x2b0>)
 8008960:	4013      	ands	r3, r2
 8008962:	2b00      	cmp	r3, #0
 8008964:	d106      	bne.n	8008974 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008966:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800896a:	4b89      	ldr	r3, [pc, #548]	; (8008b90 <HAL_UART_IRQHandler+0x2b4>)
 800896c:	4013      	ands	r3, r2
 800896e:	2b00      	cmp	r3, #0
 8008970:	f000 8112 	beq.w	8008b98 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008978:	f003 0301 	and.w	r3, r3, #1
 800897c:	2b00      	cmp	r3, #0
 800897e:	d011      	beq.n	80089a4 <HAL_UART_IRQHandler+0xc8>
 8008980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00b      	beq.n	80089a4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2201      	movs	r2, #1
 8008992:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800899a:	f043 0201 	orr.w	r2, r3, #1
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089a8:	f003 0302 	and.w	r3, r3, #2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d011      	beq.n	80089d4 <HAL_UART_IRQHandler+0xf8>
 80089b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089b4:	f003 0301 	and.w	r3, r3, #1
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d00b      	beq.n	80089d4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2202      	movs	r2, #2
 80089c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089ca:	f043 0204 	orr.w	r2, r3, #4
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089d8:	f003 0304 	and.w	r3, r3, #4
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d011      	beq.n	8008a04 <HAL_UART_IRQHandler+0x128>
 80089e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089e4:	f003 0301 	and.w	r3, r3, #1
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d00b      	beq.n	8008a04 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2204      	movs	r2, #4
 80089f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089fa:	f043 0202 	orr.w	r2, r3, #2
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a08:	f003 0308 	and.w	r3, r3, #8
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d017      	beq.n	8008a40 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a14:	f003 0320 	and.w	r3, r3, #32
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d105      	bne.n	8008a28 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008a1c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008a20:	4b5a      	ldr	r3, [pc, #360]	; (8008b8c <HAL_UART_IRQHandler+0x2b0>)
 8008a22:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d00b      	beq.n	8008a40 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2208      	movs	r2, #8
 8008a2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a36:	f043 0208 	orr.w	r2, r3, #8
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d012      	beq.n	8008a72 <HAL_UART_IRQHandler+0x196>
 8008a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00c      	beq.n	8008a72 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a68:	f043 0220 	orr.w	r2, r3, #32
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f000 823c 	beq.w	8008ef6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a82:	f003 0320 	and.w	r3, r3, #32
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d013      	beq.n	8008ab2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a8e:	f003 0320 	and.w	r3, r3, #32
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d105      	bne.n	8008aa2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008a96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d007      	beq.n	8008ab2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d003      	beq.n	8008ab2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ab8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ac6:	2b40      	cmp	r3, #64	; 0x40
 8008ac8:	d005      	beq.n	8008ad6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008aca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ace:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d04f      	beq.n	8008b76 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f001 f814 	bl	8009b04 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ae6:	2b40      	cmp	r3, #64	; 0x40
 8008ae8:	d141      	bne.n	8008b6e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	3308      	adds	r3, #8
 8008af0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008af8:	e853 3f00 	ldrex	r3, [r3]
 8008afc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008b00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	3308      	adds	r3, #8
 8008b12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008b16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008b1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008b22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008b26:	e841 2300 	strex	r3, r2, [r1]
 8008b2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008b2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d1d9      	bne.n	8008aea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d013      	beq.n	8008b66 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b42:	4a14      	ldr	r2, [pc, #80]	; (8008b94 <HAL_UART_IRQHandler+0x2b8>)
 8008b44:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fc f948 	bl	8004de0 <HAL_DMA_Abort_IT>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d017      	beq.n	8008b86 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008b60:	4610      	mov	r0, r2
 8008b62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b64:	e00f      	b.n	8008b86 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 f9da 	bl	8008f20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b6c:	e00b      	b.n	8008b86 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f9d6 	bl	8008f20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b74:	e007      	b.n	8008b86 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 f9d2 	bl	8008f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008b84:	e1b7      	b.n	8008ef6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b86:	bf00      	nop
    return;
 8008b88:	e1b5      	b.n	8008ef6 <HAL_UART_IRQHandler+0x61a>
 8008b8a:	bf00      	nop
 8008b8c:	10000001 	.word	0x10000001
 8008b90:	04000120 	.word	0x04000120
 8008b94:	08009bd1 	.word	0x08009bd1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	f040 814a 	bne.w	8008e36 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ba6:	f003 0310 	and.w	r3, r3, #16
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	f000 8143 	beq.w	8008e36 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bb4:	f003 0310 	and.w	r3, r3, #16
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f000 813c 	beq.w	8008e36 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2210      	movs	r2, #16
 8008bc4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bd0:	2b40      	cmp	r3, #64	; 0x40
 8008bd2:	f040 80b5 	bne.w	8008d40 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008be2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	f000 8187 	beq.w	8008efa <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008bf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	f080 817f 	bcs.w	8008efa <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c02:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 0320 	and.w	r3, r3, #32
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	f040 8086 	bne.w	8008d24 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c24:	e853 3f00 	ldrex	r3, [r3]
 8008c28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008c2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008c42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008c46:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008c4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008c52:	e841 2300 	strex	r3, r2, [r1]
 8008c56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008c5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d1da      	bne.n	8008c18 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	3308      	adds	r3, #8
 8008c68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c6c:	e853 3f00 	ldrex	r3, [r3]
 8008c70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008c72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c74:	f023 0301 	bic.w	r3, r3, #1
 8008c78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	3308      	adds	r3, #8
 8008c82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008c86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008c8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008c8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008c92:	e841 2300 	strex	r3, r2, [r1]
 8008c96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008c98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d1e1      	bne.n	8008c62 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	3308      	adds	r3, #8
 8008ca4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ca8:	e853 3f00 	ldrex	r3, [r3]
 8008cac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	3308      	adds	r3, #8
 8008cbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008cc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008cc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008cc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008cca:	e841 2300 	strex	r3, r2, [r1]
 8008cce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008cd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1e3      	bne.n	8008c9e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2220      	movs	r2, #32
 8008cda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cec:	e853 3f00 	ldrex	r3, [r3]
 8008cf0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cf4:	f023 0310 	bic.w	r3, r3, #16
 8008cf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	461a      	mov	r2, r3
 8008d02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d06:	65bb      	str	r3, [r7, #88]	; 0x58
 8008d08:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008d0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d0e:	e841 2300 	strex	r3, r2, [r1]
 8008d12:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008d14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1e4      	bne.n	8008ce4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7fc f805 	bl	8004d2e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	1ad3      	subs	r3, r2, r3
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	4619      	mov	r1, r3
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 f8fb 	bl	8008f34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008d3e:	e0dc      	b.n	8008efa <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	1ad3      	subs	r3, r2, r3
 8008d50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f000 80ce 	beq.w	8008efe <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8008d62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	f000 80c9 	beq.w	8008efe <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d74:	e853 3f00 	ldrex	r3, [r3]
 8008d78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	461a      	mov	r2, r3
 8008d8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008d8e:	647b      	str	r3, [r7, #68]	; 0x44
 8008d90:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d96:	e841 2300 	strex	r3, r2, [r1]
 8008d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1e4      	bne.n	8008d6c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	3308      	adds	r3, #8
 8008da8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dac:	e853 3f00 	ldrex	r3, [r3]
 8008db0:	623b      	str	r3, [r7, #32]
   return(result);
 8008db2:	6a3b      	ldr	r3, [r7, #32]
 8008db4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008db8:	f023 0301 	bic.w	r3, r3, #1
 8008dbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	3308      	adds	r3, #8
 8008dc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008dca:	633a      	str	r2, [r7, #48]	; 0x30
 8008dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dd2:	e841 2300 	strex	r3, r2, [r1]
 8008dd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1e1      	bne.n	8008da2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2220      	movs	r2, #32
 8008de2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	e853 3f00 	ldrex	r3, [r3]
 8008dfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f023 0310 	bic.w	r3, r3, #16
 8008e06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	461a      	mov	r2, r3
 8008e10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008e14:	61fb      	str	r3, [r7, #28]
 8008e16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e18:	69b9      	ldr	r1, [r7, #24]
 8008e1a:	69fa      	ldr	r2, [r7, #28]
 8008e1c:	e841 2300 	strex	r3, r2, [r1]
 8008e20:	617b      	str	r3, [r7, #20]
   return(result);
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d1e4      	bne.n	8008df2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008e28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f880 	bl	8008f34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008e34:	e063      	b.n	8008efe <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00e      	beq.n	8008e60 <HAL_UART_IRQHandler+0x584>
 8008e42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d008      	beq.n	8008e60 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008e56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f001 fb57 	bl	800a50c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008e5e:	e051      	b.n	8008f04 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d014      	beq.n	8008e96 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d105      	bne.n	8008e84 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008e78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d008      	beq.n	8008e96 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d03a      	beq.n	8008f02 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	4798      	blx	r3
    }
    return;
 8008e94:	e035      	b.n	8008f02 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d009      	beq.n	8008eb6 <HAL_UART_IRQHandler+0x5da>
 8008ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d003      	beq.n	8008eb6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 fea4 	bl	8009bfc <UART_EndTransmit_IT>
    return;
 8008eb4:	e026      	b.n	8008f04 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d009      	beq.n	8008ed6 <HAL_UART_IRQHandler+0x5fa>
 8008ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ec6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d003      	beq.n	8008ed6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f001 fb30 	bl	800a534 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ed4:	e016      	b.n	8008f04 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d010      	beq.n	8008f04 <HAL_UART_IRQHandler+0x628>
 8008ee2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	da0c      	bge.n	8008f04 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f001 fb18 	bl	800a520 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ef0:	e008      	b.n	8008f04 <HAL_UART_IRQHandler+0x628>
      return;
 8008ef2:	bf00      	nop
 8008ef4:	e006      	b.n	8008f04 <HAL_UART_IRQHandler+0x628>
    return;
 8008ef6:	bf00      	nop
 8008ef8:	e004      	b.n	8008f04 <HAL_UART_IRQHandler+0x628>
      return;
 8008efa:	bf00      	nop
 8008efc:	e002      	b.n	8008f04 <HAL_UART_IRQHandler+0x628>
      return;
 8008efe:	bf00      	nop
 8008f00:	e000      	b.n	8008f04 <HAL_UART_IRQHandler+0x628>
    return;
 8008f02:	bf00      	nop
  }
}
 8008f04:	37e8      	adds	r7, #232	; 0xe8
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop

08008f0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008f14:	bf00      	nop
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008f28:	bf00      	nop
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008f40:	bf00      	nop
 8008f42:	370c      	adds	r7, #12
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr

08008f4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f50:	b08c      	sub	sp, #48	; 0x30
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f56:	2300      	movs	r3, #0
 8008f58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	689a      	ldr	r2, [r3, #8]
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	691b      	ldr	r3, [r3, #16]
 8008f64:	431a      	orrs	r2, r3
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	695b      	ldr	r3, [r3, #20]
 8008f6a:	431a      	orrs	r2, r3
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	69db      	ldr	r3, [r3, #28]
 8008f70:	4313      	orrs	r3, r2
 8008f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	4baa      	ldr	r3, [pc, #680]	; (8009224 <UART_SetConfig+0x2d8>)
 8008f7c:	4013      	ands	r3, r2
 8008f7e:	697a      	ldr	r2, [r7, #20]
 8008f80:	6812      	ldr	r2, [r2, #0]
 8008f82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f84:	430b      	orrs	r3, r1
 8008f86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	68da      	ldr	r2, [r3, #12]
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	430a      	orrs	r2, r1
 8008f9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	699b      	ldr	r3, [r3, #24]
 8008fa2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a9f      	ldr	r2, [pc, #636]	; (8009228 <UART_SetConfig+0x2dc>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d004      	beq.n	8008fb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	6a1b      	ldr	r3, [r3, #32]
 8008fb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008fc2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008fc6:	697a      	ldr	r2, [r7, #20]
 8008fc8:	6812      	ldr	r2, [r2, #0]
 8008fca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008fcc:	430b      	orrs	r3, r1
 8008fce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd6:	f023 010f 	bic.w	r1, r3, #15
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	430a      	orrs	r2, r1
 8008fe4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a90      	ldr	r2, [pc, #576]	; (800922c <UART_SetConfig+0x2e0>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d125      	bne.n	800903c <UART_SetConfig+0xf0>
 8008ff0:	4b8f      	ldr	r3, [pc, #572]	; (8009230 <UART_SetConfig+0x2e4>)
 8008ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ff6:	f003 0303 	and.w	r3, r3, #3
 8008ffa:	2b03      	cmp	r3, #3
 8008ffc:	d81a      	bhi.n	8009034 <UART_SetConfig+0xe8>
 8008ffe:	a201      	add	r2, pc, #4	; (adr r2, 8009004 <UART_SetConfig+0xb8>)
 8009000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009004:	08009015 	.word	0x08009015
 8009008:	08009025 	.word	0x08009025
 800900c:	0800901d 	.word	0x0800901d
 8009010:	0800902d 	.word	0x0800902d
 8009014:	2301      	movs	r3, #1
 8009016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800901a:	e116      	b.n	800924a <UART_SetConfig+0x2fe>
 800901c:	2302      	movs	r3, #2
 800901e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009022:	e112      	b.n	800924a <UART_SetConfig+0x2fe>
 8009024:	2304      	movs	r3, #4
 8009026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800902a:	e10e      	b.n	800924a <UART_SetConfig+0x2fe>
 800902c:	2308      	movs	r3, #8
 800902e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009032:	e10a      	b.n	800924a <UART_SetConfig+0x2fe>
 8009034:	2310      	movs	r3, #16
 8009036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800903a:	e106      	b.n	800924a <UART_SetConfig+0x2fe>
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a7c      	ldr	r2, [pc, #496]	; (8009234 <UART_SetConfig+0x2e8>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d138      	bne.n	80090b8 <UART_SetConfig+0x16c>
 8009046:	4b7a      	ldr	r3, [pc, #488]	; (8009230 <UART_SetConfig+0x2e4>)
 8009048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800904c:	f003 030c 	and.w	r3, r3, #12
 8009050:	2b0c      	cmp	r3, #12
 8009052:	d82d      	bhi.n	80090b0 <UART_SetConfig+0x164>
 8009054:	a201      	add	r2, pc, #4	; (adr r2, 800905c <UART_SetConfig+0x110>)
 8009056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800905a:	bf00      	nop
 800905c:	08009091 	.word	0x08009091
 8009060:	080090b1 	.word	0x080090b1
 8009064:	080090b1 	.word	0x080090b1
 8009068:	080090b1 	.word	0x080090b1
 800906c:	080090a1 	.word	0x080090a1
 8009070:	080090b1 	.word	0x080090b1
 8009074:	080090b1 	.word	0x080090b1
 8009078:	080090b1 	.word	0x080090b1
 800907c:	08009099 	.word	0x08009099
 8009080:	080090b1 	.word	0x080090b1
 8009084:	080090b1 	.word	0x080090b1
 8009088:	080090b1 	.word	0x080090b1
 800908c:	080090a9 	.word	0x080090a9
 8009090:	2300      	movs	r3, #0
 8009092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009096:	e0d8      	b.n	800924a <UART_SetConfig+0x2fe>
 8009098:	2302      	movs	r3, #2
 800909a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800909e:	e0d4      	b.n	800924a <UART_SetConfig+0x2fe>
 80090a0:	2304      	movs	r3, #4
 80090a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80090a6:	e0d0      	b.n	800924a <UART_SetConfig+0x2fe>
 80090a8:	2308      	movs	r3, #8
 80090aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80090ae:	e0cc      	b.n	800924a <UART_SetConfig+0x2fe>
 80090b0:	2310      	movs	r3, #16
 80090b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80090b6:	e0c8      	b.n	800924a <UART_SetConfig+0x2fe>
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a5e      	ldr	r2, [pc, #376]	; (8009238 <UART_SetConfig+0x2ec>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d125      	bne.n	800910e <UART_SetConfig+0x1c2>
 80090c2:	4b5b      	ldr	r3, [pc, #364]	; (8009230 <UART_SetConfig+0x2e4>)
 80090c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80090cc:	2b30      	cmp	r3, #48	; 0x30
 80090ce:	d016      	beq.n	80090fe <UART_SetConfig+0x1b2>
 80090d0:	2b30      	cmp	r3, #48	; 0x30
 80090d2:	d818      	bhi.n	8009106 <UART_SetConfig+0x1ba>
 80090d4:	2b20      	cmp	r3, #32
 80090d6:	d00a      	beq.n	80090ee <UART_SetConfig+0x1a2>
 80090d8:	2b20      	cmp	r3, #32
 80090da:	d814      	bhi.n	8009106 <UART_SetConfig+0x1ba>
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d002      	beq.n	80090e6 <UART_SetConfig+0x19a>
 80090e0:	2b10      	cmp	r3, #16
 80090e2:	d008      	beq.n	80090f6 <UART_SetConfig+0x1aa>
 80090e4:	e00f      	b.n	8009106 <UART_SetConfig+0x1ba>
 80090e6:	2300      	movs	r3, #0
 80090e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80090ec:	e0ad      	b.n	800924a <UART_SetConfig+0x2fe>
 80090ee:	2302      	movs	r3, #2
 80090f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80090f4:	e0a9      	b.n	800924a <UART_SetConfig+0x2fe>
 80090f6:	2304      	movs	r3, #4
 80090f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80090fc:	e0a5      	b.n	800924a <UART_SetConfig+0x2fe>
 80090fe:	2308      	movs	r3, #8
 8009100:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009104:	e0a1      	b.n	800924a <UART_SetConfig+0x2fe>
 8009106:	2310      	movs	r3, #16
 8009108:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800910c:	e09d      	b.n	800924a <UART_SetConfig+0x2fe>
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a4a      	ldr	r2, [pc, #296]	; (800923c <UART_SetConfig+0x2f0>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d125      	bne.n	8009164 <UART_SetConfig+0x218>
 8009118:	4b45      	ldr	r3, [pc, #276]	; (8009230 <UART_SetConfig+0x2e4>)
 800911a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800911e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009122:	2bc0      	cmp	r3, #192	; 0xc0
 8009124:	d016      	beq.n	8009154 <UART_SetConfig+0x208>
 8009126:	2bc0      	cmp	r3, #192	; 0xc0
 8009128:	d818      	bhi.n	800915c <UART_SetConfig+0x210>
 800912a:	2b80      	cmp	r3, #128	; 0x80
 800912c:	d00a      	beq.n	8009144 <UART_SetConfig+0x1f8>
 800912e:	2b80      	cmp	r3, #128	; 0x80
 8009130:	d814      	bhi.n	800915c <UART_SetConfig+0x210>
 8009132:	2b00      	cmp	r3, #0
 8009134:	d002      	beq.n	800913c <UART_SetConfig+0x1f0>
 8009136:	2b40      	cmp	r3, #64	; 0x40
 8009138:	d008      	beq.n	800914c <UART_SetConfig+0x200>
 800913a:	e00f      	b.n	800915c <UART_SetConfig+0x210>
 800913c:	2300      	movs	r3, #0
 800913e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009142:	e082      	b.n	800924a <UART_SetConfig+0x2fe>
 8009144:	2302      	movs	r3, #2
 8009146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800914a:	e07e      	b.n	800924a <UART_SetConfig+0x2fe>
 800914c:	2304      	movs	r3, #4
 800914e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009152:	e07a      	b.n	800924a <UART_SetConfig+0x2fe>
 8009154:	2308      	movs	r3, #8
 8009156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800915a:	e076      	b.n	800924a <UART_SetConfig+0x2fe>
 800915c:	2310      	movs	r3, #16
 800915e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009162:	e072      	b.n	800924a <UART_SetConfig+0x2fe>
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a35      	ldr	r2, [pc, #212]	; (8009240 <UART_SetConfig+0x2f4>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d12a      	bne.n	80091c4 <UART_SetConfig+0x278>
 800916e:	4b30      	ldr	r3, [pc, #192]	; (8009230 <UART_SetConfig+0x2e4>)
 8009170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009174:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009178:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800917c:	d01a      	beq.n	80091b4 <UART_SetConfig+0x268>
 800917e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009182:	d81b      	bhi.n	80091bc <UART_SetConfig+0x270>
 8009184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009188:	d00c      	beq.n	80091a4 <UART_SetConfig+0x258>
 800918a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800918e:	d815      	bhi.n	80091bc <UART_SetConfig+0x270>
 8009190:	2b00      	cmp	r3, #0
 8009192:	d003      	beq.n	800919c <UART_SetConfig+0x250>
 8009194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009198:	d008      	beq.n	80091ac <UART_SetConfig+0x260>
 800919a:	e00f      	b.n	80091bc <UART_SetConfig+0x270>
 800919c:	2300      	movs	r3, #0
 800919e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091a2:	e052      	b.n	800924a <UART_SetConfig+0x2fe>
 80091a4:	2302      	movs	r3, #2
 80091a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091aa:	e04e      	b.n	800924a <UART_SetConfig+0x2fe>
 80091ac:	2304      	movs	r3, #4
 80091ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091b2:	e04a      	b.n	800924a <UART_SetConfig+0x2fe>
 80091b4:	2308      	movs	r3, #8
 80091b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091ba:	e046      	b.n	800924a <UART_SetConfig+0x2fe>
 80091bc:	2310      	movs	r3, #16
 80091be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091c2:	e042      	b.n	800924a <UART_SetConfig+0x2fe>
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a17      	ldr	r2, [pc, #92]	; (8009228 <UART_SetConfig+0x2dc>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d13a      	bne.n	8009244 <UART_SetConfig+0x2f8>
 80091ce:	4b18      	ldr	r3, [pc, #96]	; (8009230 <UART_SetConfig+0x2e4>)
 80091d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80091d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80091dc:	d01a      	beq.n	8009214 <UART_SetConfig+0x2c8>
 80091de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80091e2:	d81b      	bhi.n	800921c <UART_SetConfig+0x2d0>
 80091e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091e8:	d00c      	beq.n	8009204 <UART_SetConfig+0x2b8>
 80091ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091ee:	d815      	bhi.n	800921c <UART_SetConfig+0x2d0>
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d003      	beq.n	80091fc <UART_SetConfig+0x2b0>
 80091f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091f8:	d008      	beq.n	800920c <UART_SetConfig+0x2c0>
 80091fa:	e00f      	b.n	800921c <UART_SetConfig+0x2d0>
 80091fc:	2300      	movs	r3, #0
 80091fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009202:	e022      	b.n	800924a <UART_SetConfig+0x2fe>
 8009204:	2302      	movs	r3, #2
 8009206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800920a:	e01e      	b.n	800924a <UART_SetConfig+0x2fe>
 800920c:	2304      	movs	r3, #4
 800920e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009212:	e01a      	b.n	800924a <UART_SetConfig+0x2fe>
 8009214:	2308      	movs	r3, #8
 8009216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800921a:	e016      	b.n	800924a <UART_SetConfig+0x2fe>
 800921c:	2310      	movs	r3, #16
 800921e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009222:	e012      	b.n	800924a <UART_SetConfig+0x2fe>
 8009224:	cfff69f3 	.word	0xcfff69f3
 8009228:	40008000 	.word	0x40008000
 800922c:	40013800 	.word	0x40013800
 8009230:	40021000 	.word	0x40021000
 8009234:	40004400 	.word	0x40004400
 8009238:	40004800 	.word	0x40004800
 800923c:	40004c00 	.word	0x40004c00
 8009240:	40005000 	.word	0x40005000
 8009244:	2310      	movs	r3, #16
 8009246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4aae      	ldr	r2, [pc, #696]	; (8009508 <UART_SetConfig+0x5bc>)
 8009250:	4293      	cmp	r3, r2
 8009252:	f040 8097 	bne.w	8009384 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009256:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800925a:	2b08      	cmp	r3, #8
 800925c:	d823      	bhi.n	80092a6 <UART_SetConfig+0x35a>
 800925e:	a201      	add	r2, pc, #4	; (adr r2, 8009264 <UART_SetConfig+0x318>)
 8009260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009264:	08009289 	.word	0x08009289
 8009268:	080092a7 	.word	0x080092a7
 800926c:	08009291 	.word	0x08009291
 8009270:	080092a7 	.word	0x080092a7
 8009274:	08009297 	.word	0x08009297
 8009278:	080092a7 	.word	0x080092a7
 800927c:	080092a7 	.word	0x080092a7
 8009280:	080092a7 	.word	0x080092a7
 8009284:	0800929f 	.word	0x0800929f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009288:	f7fc fe94 	bl	8005fb4 <HAL_RCC_GetPCLK1Freq>
 800928c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800928e:	e010      	b.n	80092b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009290:	4b9e      	ldr	r3, [pc, #632]	; (800950c <UART_SetConfig+0x5c0>)
 8009292:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009294:	e00d      	b.n	80092b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009296:	f7fc fe1f 	bl	8005ed8 <HAL_RCC_GetSysClockFreq>
 800929a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800929c:	e009      	b.n	80092b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800929e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80092a4:	e005      	b.n	80092b2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80092a6:	2300      	movs	r3, #0
 80092a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80092b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80092b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f000 8130 	beq.w	800951a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092be:	4a94      	ldr	r2, [pc, #592]	; (8009510 <UART_SetConfig+0x5c4>)
 80092c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092c4:	461a      	mov	r2, r3
 80092c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80092cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	685a      	ldr	r2, [r3, #4]
 80092d2:	4613      	mov	r3, r2
 80092d4:	005b      	lsls	r3, r3, #1
 80092d6:	4413      	add	r3, r2
 80092d8:	69ba      	ldr	r2, [r7, #24]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d305      	bcc.n	80092ea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092e4:	69ba      	ldr	r2, [r7, #24]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d903      	bls.n	80092f2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
 80092ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80092f0:	e113      	b.n	800951a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f4:	2200      	movs	r2, #0
 80092f6:	60bb      	str	r3, [r7, #8]
 80092f8:	60fa      	str	r2, [r7, #12]
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092fe:	4a84      	ldr	r2, [pc, #528]	; (8009510 <UART_SetConfig+0x5c4>)
 8009300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009304:	b29b      	uxth	r3, r3
 8009306:	2200      	movs	r2, #0
 8009308:	603b      	str	r3, [r7, #0]
 800930a:	607a      	str	r2, [r7, #4]
 800930c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009310:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009314:	f7f7 fcd0 	bl	8000cb8 <__aeabi_uldivmod>
 8009318:	4602      	mov	r2, r0
 800931a:	460b      	mov	r3, r1
 800931c:	4610      	mov	r0, r2
 800931e:	4619      	mov	r1, r3
 8009320:	f04f 0200 	mov.w	r2, #0
 8009324:	f04f 0300 	mov.w	r3, #0
 8009328:	020b      	lsls	r3, r1, #8
 800932a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800932e:	0202      	lsls	r2, r0, #8
 8009330:	6979      	ldr	r1, [r7, #20]
 8009332:	6849      	ldr	r1, [r1, #4]
 8009334:	0849      	lsrs	r1, r1, #1
 8009336:	2000      	movs	r0, #0
 8009338:	460c      	mov	r4, r1
 800933a:	4605      	mov	r5, r0
 800933c:	eb12 0804 	adds.w	r8, r2, r4
 8009340:	eb43 0905 	adc.w	r9, r3, r5
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	469a      	mov	sl, r3
 800934c:	4693      	mov	fp, r2
 800934e:	4652      	mov	r2, sl
 8009350:	465b      	mov	r3, fp
 8009352:	4640      	mov	r0, r8
 8009354:	4649      	mov	r1, r9
 8009356:	f7f7 fcaf 	bl	8000cb8 <__aeabi_uldivmod>
 800935a:	4602      	mov	r2, r0
 800935c:	460b      	mov	r3, r1
 800935e:	4613      	mov	r3, r2
 8009360:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009362:	6a3b      	ldr	r3, [r7, #32]
 8009364:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009368:	d308      	bcc.n	800937c <UART_SetConfig+0x430>
 800936a:	6a3b      	ldr	r3, [r7, #32]
 800936c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009370:	d204      	bcs.n	800937c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	6a3a      	ldr	r2, [r7, #32]
 8009378:	60da      	str	r2, [r3, #12]
 800937a:	e0ce      	b.n	800951a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009382:	e0ca      	b.n	800951a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	69db      	ldr	r3, [r3, #28]
 8009388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800938c:	d166      	bne.n	800945c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800938e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009392:	2b08      	cmp	r3, #8
 8009394:	d827      	bhi.n	80093e6 <UART_SetConfig+0x49a>
 8009396:	a201      	add	r2, pc, #4	; (adr r2, 800939c <UART_SetConfig+0x450>)
 8009398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800939c:	080093c1 	.word	0x080093c1
 80093a0:	080093c9 	.word	0x080093c9
 80093a4:	080093d1 	.word	0x080093d1
 80093a8:	080093e7 	.word	0x080093e7
 80093ac:	080093d7 	.word	0x080093d7
 80093b0:	080093e7 	.word	0x080093e7
 80093b4:	080093e7 	.word	0x080093e7
 80093b8:	080093e7 	.word	0x080093e7
 80093bc:	080093df 	.word	0x080093df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093c0:	f7fc fdf8 	bl	8005fb4 <HAL_RCC_GetPCLK1Freq>
 80093c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80093c6:	e014      	b.n	80093f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093c8:	f7fc fe0a 	bl	8005fe0 <HAL_RCC_GetPCLK2Freq>
 80093cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80093ce:	e010      	b.n	80093f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093d0:	4b4e      	ldr	r3, [pc, #312]	; (800950c <UART_SetConfig+0x5c0>)
 80093d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80093d4:	e00d      	b.n	80093f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093d6:	f7fc fd7f 	bl	8005ed8 <HAL_RCC_GetSysClockFreq>
 80093da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80093dc:	e009      	b.n	80093f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80093e4:	e005      	b.n	80093f2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80093e6:	2300      	movs	r3, #0
 80093e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80093f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80093f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f000 8090 	beq.w	800951a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fe:	4a44      	ldr	r2, [pc, #272]	; (8009510 <UART_SetConfig+0x5c4>)
 8009400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009404:	461a      	mov	r2, r3
 8009406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009408:	fbb3 f3f2 	udiv	r3, r3, r2
 800940c:	005a      	lsls	r2, r3, #1
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	085b      	lsrs	r3, r3, #1
 8009414:	441a      	add	r2, r3
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	fbb2 f3f3 	udiv	r3, r2, r3
 800941e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009420:	6a3b      	ldr	r3, [r7, #32]
 8009422:	2b0f      	cmp	r3, #15
 8009424:	d916      	bls.n	8009454 <UART_SetConfig+0x508>
 8009426:	6a3b      	ldr	r3, [r7, #32]
 8009428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800942c:	d212      	bcs.n	8009454 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800942e:	6a3b      	ldr	r3, [r7, #32]
 8009430:	b29b      	uxth	r3, r3
 8009432:	f023 030f 	bic.w	r3, r3, #15
 8009436:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009438:	6a3b      	ldr	r3, [r7, #32]
 800943a:	085b      	lsrs	r3, r3, #1
 800943c:	b29b      	uxth	r3, r3
 800943e:	f003 0307 	and.w	r3, r3, #7
 8009442:	b29a      	uxth	r2, r3
 8009444:	8bfb      	ldrh	r3, [r7, #30]
 8009446:	4313      	orrs	r3, r2
 8009448:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	8bfa      	ldrh	r2, [r7, #30]
 8009450:	60da      	str	r2, [r3, #12]
 8009452:	e062      	b.n	800951a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009454:	2301      	movs	r3, #1
 8009456:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800945a:	e05e      	b.n	800951a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800945c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009460:	2b08      	cmp	r3, #8
 8009462:	d828      	bhi.n	80094b6 <UART_SetConfig+0x56a>
 8009464:	a201      	add	r2, pc, #4	; (adr r2, 800946c <UART_SetConfig+0x520>)
 8009466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800946a:	bf00      	nop
 800946c:	08009491 	.word	0x08009491
 8009470:	08009499 	.word	0x08009499
 8009474:	080094a1 	.word	0x080094a1
 8009478:	080094b7 	.word	0x080094b7
 800947c:	080094a7 	.word	0x080094a7
 8009480:	080094b7 	.word	0x080094b7
 8009484:	080094b7 	.word	0x080094b7
 8009488:	080094b7 	.word	0x080094b7
 800948c:	080094af 	.word	0x080094af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009490:	f7fc fd90 	bl	8005fb4 <HAL_RCC_GetPCLK1Freq>
 8009494:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009496:	e014      	b.n	80094c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009498:	f7fc fda2 	bl	8005fe0 <HAL_RCC_GetPCLK2Freq>
 800949c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800949e:	e010      	b.n	80094c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80094a0:	4b1a      	ldr	r3, [pc, #104]	; (800950c <UART_SetConfig+0x5c0>)
 80094a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80094a4:	e00d      	b.n	80094c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80094a6:	f7fc fd17 	bl	8005ed8 <HAL_RCC_GetSysClockFreq>
 80094aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80094ac:	e009      	b.n	80094c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80094b4:	e005      	b.n	80094c2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80094b6:	2300      	movs	r3, #0
 80094b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80094c0:	bf00      	nop
    }

    if (pclk != 0U)
 80094c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d028      	beq.n	800951a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094cc:	4a10      	ldr	r2, [pc, #64]	; (8009510 <UART_SetConfig+0x5c4>)
 80094ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094d2:	461a      	mov	r2, r3
 80094d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	085b      	lsrs	r3, r3, #1
 80094e0:	441a      	add	r2, r3
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80094ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094ec:	6a3b      	ldr	r3, [r7, #32]
 80094ee:	2b0f      	cmp	r3, #15
 80094f0:	d910      	bls.n	8009514 <UART_SetConfig+0x5c8>
 80094f2:	6a3b      	ldr	r3, [r7, #32]
 80094f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094f8:	d20c      	bcs.n	8009514 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80094fa:	6a3b      	ldr	r3, [r7, #32]
 80094fc:	b29a      	uxth	r2, r3
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	60da      	str	r2, [r3, #12]
 8009504:	e009      	b.n	800951a <UART_SetConfig+0x5ce>
 8009506:	bf00      	nop
 8009508:	40008000 	.word	0x40008000
 800950c:	00f42400 	.word	0x00f42400
 8009510:	0800d748 	.word	0x0800d748
      }
      else
      {
        ret = HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	2201      	movs	r2, #1
 800951e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	2201      	movs	r2, #1
 8009526:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	2200      	movs	r2, #0
 800952e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	2200      	movs	r2, #0
 8009534:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009536:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800953a:	4618      	mov	r0, r3
 800953c:	3730      	adds	r7, #48	; 0x30
 800953e:	46bd      	mov	sp, r7
 8009540:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009544 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009550:	f003 0301 	and.w	r3, r3, #1
 8009554:	2b00      	cmp	r3, #0
 8009556:	d00a      	beq.n	800956e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	430a      	orrs	r2, r1
 800956c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009572:	f003 0302 	and.w	r3, r3, #2
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00a      	beq.n	8009590 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	430a      	orrs	r2, r1
 800958e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009594:	f003 0304 	and.w	r3, r3, #4
 8009598:	2b00      	cmp	r3, #0
 800959a:	d00a      	beq.n	80095b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	430a      	orrs	r2, r1
 80095b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095b6:	f003 0308 	and.w	r3, r3, #8
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d00a      	beq.n	80095d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	430a      	orrs	r2, r1
 80095d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d8:	f003 0310 	and.w	r3, r3, #16
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d00a      	beq.n	80095f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	430a      	orrs	r2, r1
 80095f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095fa:	f003 0320 	and.w	r3, r3, #32
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d00a      	beq.n	8009618 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	430a      	orrs	r2, r1
 8009616:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800961c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009620:	2b00      	cmp	r3, #0
 8009622:	d01a      	beq.n	800965a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	430a      	orrs	r2, r1
 8009638:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800963e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009642:	d10a      	bne.n	800965a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	430a      	orrs	r2, r1
 8009658:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800965e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009662:	2b00      	cmp	r3, #0
 8009664:	d00a      	beq.n	800967c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	430a      	orrs	r2, r1
 800967a:	605a      	str	r2, [r3, #4]
  }
}
 800967c:	bf00      	nop
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b086      	sub	sp, #24
 800968c:	af02      	add	r7, sp, #8
 800968e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009698:	f7f9 f946 	bl	8002928 <HAL_GetTick>
 800969c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f003 0308 	and.w	r3, r3, #8
 80096a8:	2b08      	cmp	r3, #8
 80096aa:	d10e      	bne.n	80096ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80096b0:	9300      	str	r3, [sp, #0]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2200      	movs	r2, #0
 80096b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 f82f 	bl	800971e <UART_WaitOnFlagUntilTimeout>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d001      	beq.n	80096ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096c6:	2303      	movs	r3, #3
 80096c8:	e025      	b.n	8009716 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f003 0304 	and.w	r3, r3, #4
 80096d4:	2b04      	cmp	r3, #4
 80096d6:	d10e      	bne.n	80096f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80096dc:	9300      	str	r3, [sp, #0]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2200      	movs	r2, #0
 80096e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 f819 	bl	800971e <UART_WaitOnFlagUntilTimeout>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d001      	beq.n	80096f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096f2:	2303      	movs	r3, #3
 80096f4:	e00f      	b.n	8009716 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2220      	movs	r2, #32
 80096fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2220      	movs	r2, #32
 8009702:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}

0800971e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b09c      	sub	sp, #112	; 0x70
 8009722:	af00      	add	r7, sp, #0
 8009724:	60f8      	str	r0, [r7, #12]
 8009726:	60b9      	str	r1, [r7, #8]
 8009728:	603b      	str	r3, [r7, #0]
 800972a:	4613      	mov	r3, r2
 800972c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800972e:	e0a9      	b.n	8009884 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009730:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009736:	f000 80a5 	beq.w	8009884 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800973a:	f7f9 f8f5 	bl	8002928 <HAL_GetTick>
 800973e:	4602      	mov	r2, r0
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	1ad3      	subs	r3, r2, r3
 8009744:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009746:	429a      	cmp	r2, r3
 8009748:	d302      	bcc.n	8009750 <UART_WaitOnFlagUntilTimeout+0x32>
 800974a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800974c:	2b00      	cmp	r3, #0
 800974e:	d140      	bne.n	80097d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009758:	e853 3f00 	ldrex	r3, [r3]
 800975c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800975e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009760:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009764:	667b      	str	r3, [r7, #100]	; 0x64
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	461a      	mov	r2, r3
 800976c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800976e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009770:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009772:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009774:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009776:	e841 2300 	strex	r3, r2, [r1]
 800977a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800977c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800977e:	2b00      	cmp	r3, #0
 8009780:	d1e6      	bne.n	8009750 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	3308      	adds	r3, #8
 8009788:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800978c:	e853 3f00 	ldrex	r3, [r3]
 8009790:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009794:	f023 0301 	bic.w	r3, r3, #1
 8009798:	663b      	str	r3, [r7, #96]	; 0x60
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	3308      	adds	r3, #8
 80097a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80097a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80097a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80097a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097aa:	e841 2300 	strex	r3, r2, [r1]
 80097ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80097b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1e5      	bne.n	8009782 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2220      	movs	r2, #32
 80097ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2220      	movs	r2, #32
 80097c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2200      	movs	r2, #0
 80097ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80097ce:	2303      	movs	r3, #3
 80097d0:	e069      	b.n	80098a6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f003 0304 	and.w	r3, r3, #4
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d051      	beq.n	8009884 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	69db      	ldr	r3, [r3, #28]
 80097e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097ee:	d149      	bne.n	8009884 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80097f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009802:	e853 3f00 	ldrex	r3, [r3]
 8009806:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800980e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	461a      	mov	r2, r3
 8009816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009818:	637b      	str	r3, [r7, #52]	; 0x34
 800981a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800981e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009820:	e841 2300 	strex	r3, r2, [r1]
 8009824:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009828:	2b00      	cmp	r3, #0
 800982a:	d1e6      	bne.n	80097fa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	3308      	adds	r3, #8
 8009832:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	e853 3f00 	ldrex	r3, [r3]
 800983a:	613b      	str	r3, [r7, #16]
   return(result);
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	f023 0301 	bic.w	r3, r3, #1
 8009842:	66bb      	str	r3, [r7, #104]	; 0x68
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	3308      	adds	r3, #8
 800984a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800984c:	623a      	str	r2, [r7, #32]
 800984e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009850:	69f9      	ldr	r1, [r7, #28]
 8009852:	6a3a      	ldr	r2, [r7, #32]
 8009854:	e841 2300 	strex	r3, r2, [r1]
 8009858:	61bb      	str	r3, [r7, #24]
   return(result);
 800985a:	69bb      	ldr	r3, [r7, #24]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d1e5      	bne.n	800982c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2220      	movs	r2, #32
 8009864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2220      	movs	r2, #32
 800986c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2220      	movs	r2, #32
 8009874:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2200      	movs	r2, #0
 800987c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009880:	2303      	movs	r3, #3
 8009882:	e010      	b.n	80098a6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	69da      	ldr	r2, [r3, #28]
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	4013      	ands	r3, r2
 800988e:	68ba      	ldr	r2, [r7, #8]
 8009890:	429a      	cmp	r2, r3
 8009892:	bf0c      	ite	eq
 8009894:	2301      	moveq	r3, #1
 8009896:	2300      	movne	r3, #0
 8009898:	b2db      	uxtb	r3, r3
 800989a:	461a      	mov	r2, r3
 800989c:	79fb      	ldrb	r3, [r7, #7]
 800989e:	429a      	cmp	r2, r3
 80098a0:	f43f af46 	beq.w	8009730 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3770      	adds	r7, #112	; 0x70
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
	...

080098b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b0a3      	sub	sp, #140	; 0x8c
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	4613      	mov	r3, r2
 80098bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	68ba      	ldr	r2, [r7, #8]
 80098c2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	88fa      	ldrh	r2, [r7, #6]
 80098c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	88fa      	ldrh	r2, [r7, #6]
 80098d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2200      	movs	r2, #0
 80098d8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098e2:	d10e      	bne.n	8009902 <UART_Start_Receive_IT+0x52>
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	691b      	ldr	r3, [r3, #16]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d105      	bne.n	80098f8 <UART_Start_Receive_IT+0x48>
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f240 12ff 	movw	r2, #511	; 0x1ff
 80098f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80098f6:	e02d      	b.n	8009954 <UART_Start_Receive_IT+0xa4>
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	22ff      	movs	r2, #255	; 0xff
 80098fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009900:	e028      	b.n	8009954 <UART_Start_Receive_IT+0xa4>
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d10d      	bne.n	8009926 <UART_Start_Receive_IT+0x76>
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	691b      	ldr	r3, [r3, #16]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d104      	bne.n	800991c <UART_Start_Receive_IT+0x6c>
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	22ff      	movs	r2, #255	; 0xff
 8009916:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800991a:	e01b      	b.n	8009954 <UART_Start_Receive_IT+0xa4>
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	227f      	movs	r2, #127	; 0x7f
 8009920:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009924:	e016      	b.n	8009954 <UART_Start_Receive_IT+0xa4>
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800992e:	d10d      	bne.n	800994c <UART_Start_Receive_IT+0x9c>
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	691b      	ldr	r3, [r3, #16]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d104      	bne.n	8009942 <UART_Start_Receive_IT+0x92>
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	227f      	movs	r2, #127	; 0x7f
 800993c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009940:	e008      	b.n	8009954 <UART_Start_Receive_IT+0xa4>
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	223f      	movs	r2, #63	; 0x3f
 8009946:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800994a:	e003      	b.n	8009954 <UART_Start_Receive_IT+0xa4>
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2200      	movs	r2, #0
 8009950:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2200      	movs	r2, #0
 8009958:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2222      	movs	r2, #34	; 0x22
 8009960:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	3308      	adds	r3, #8
 800996a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800996e:	e853 3f00 	ldrex	r3, [r3]
 8009972:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009974:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009976:	f043 0301 	orr.w	r3, r3, #1
 800997a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	3308      	adds	r3, #8
 8009984:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009988:	673a      	str	r2, [r7, #112]	; 0x70
 800998a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800998e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009990:	e841 2300 	strex	r3, r2, [r1]
 8009994:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8009996:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009998:	2b00      	cmp	r3, #0
 800999a:	d1e3      	bne.n	8009964 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099a4:	d153      	bne.n	8009a4e <UART_Start_Receive_IT+0x19e>
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80099ac:	88fa      	ldrh	r2, [r7, #6]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d34d      	bcc.n	8009a4e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099ba:	d107      	bne.n	80099cc <UART_Start_Receive_IT+0x11c>
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	691b      	ldr	r3, [r3, #16]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d103      	bne.n	80099cc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	4a4b      	ldr	r2, [pc, #300]	; (8009af4 <UART_Start_Receive_IT+0x244>)
 80099c8:	671a      	str	r2, [r3, #112]	; 0x70
 80099ca:	e002      	b.n	80099d2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	4a4a      	ldr	r2, [pc, #296]	; (8009af8 <UART_Start_Receive_IT+0x248>)
 80099d0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2200      	movs	r2, #0
 80099d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d01a      	beq.n	8009a18 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099ea:	e853 3f00 	ldrex	r3, [r3]
 80099ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80099f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	461a      	mov	r2, r3
 8009a00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009a04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a06:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a08:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009a0a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009a0c:	e841 2300 	strex	r3, r2, [r1]
 8009a10:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009a12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d1e4      	bne.n	80099e2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	3308      	adds	r3, #8
 8009a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a22:	e853 3f00 	ldrex	r3, [r3]
 8009a26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	3308      	adds	r3, #8
 8009a36:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009a38:	64ba      	str	r2, [r7, #72]	; 0x48
 8009a3a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a3c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009a3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a40:	e841 2300 	strex	r3, r2, [r1]
 8009a44:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d1e5      	bne.n	8009a18 <UART_Start_Receive_IT+0x168>
 8009a4c:	e04a      	b.n	8009ae4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a56:	d107      	bne.n	8009a68 <UART_Start_Receive_IT+0x1b8>
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	691b      	ldr	r3, [r3, #16]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d103      	bne.n	8009a68 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	4a26      	ldr	r2, [pc, #152]	; (8009afc <UART_Start_Receive_IT+0x24c>)
 8009a64:	671a      	str	r2, [r3, #112]	; 0x70
 8009a66:	e002      	b.n	8009a6e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	4a25      	ldr	r2, [pc, #148]	; (8009b00 <UART_Start_Receive_IT+0x250>)
 8009a6c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2200      	movs	r2, #0
 8009a72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	691b      	ldr	r3, [r3, #16]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d019      	beq.n	8009ab2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a86:	e853 3f00 	ldrex	r3, [r3]
 8009a8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009a92:	677b      	str	r3, [r7, #116]	; 0x74
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	461a      	mov	r2, r3
 8009a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8009a9e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009aa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009aa4:	e841 2300 	strex	r3, r2, [r1]
 8009aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d1e6      	bne.n	8009a7e <UART_Start_Receive_IT+0x1ce>
 8009ab0:	e018      	b.n	8009ae4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	e853 3f00 	ldrex	r3, [r3]
 8009abe:	613b      	str	r3, [r7, #16]
   return(result);
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	f043 0320 	orr.w	r3, r3, #32
 8009ac6:	67bb      	str	r3, [r7, #120]	; 0x78
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	461a      	mov	r2, r3
 8009ace:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ad0:	623b      	str	r3, [r7, #32]
 8009ad2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad4:	69f9      	ldr	r1, [r7, #28]
 8009ad6:	6a3a      	ldr	r2, [r7, #32]
 8009ad8:	e841 2300 	strex	r3, r2, [r1]
 8009adc:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d1e6      	bne.n	8009ab2 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8009ae4:	2300      	movs	r3, #0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	378c      	adds	r7, #140	; 0x8c
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop
 8009af4:	0800a20d 	.word	0x0800a20d
 8009af8:	08009f15 	.word	0x08009f15
 8009afc:	08009db3 	.word	0x08009db3
 8009b00:	08009c53 	.word	0x08009c53

08009b04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b095      	sub	sp, #84	; 0x54
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b14:	e853 3f00 	ldrex	r3, [r3]
 8009b18:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	461a      	mov	r2, r3
 8009b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b2a:	643b      	str	r3, [r7, #64]	; 0x40
 8009b2c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b32:	e841 2300 	strex	r3, r2, [r1]
 8009b36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d1e6      	bne.n	8009b0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	3308      	adds	r3, #8
 8009b44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b46:	6a3b      	ldr	r3, [r7, #32]
 8009b48:	e853 3f00 	ldrex	r3, [r3]
 8009b4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b54:	f023 0301 	bic.w	r3, r3, #1
 8009b58:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	3308      	adds	r3, #8
 8009b60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b6a:	e841 2300 	strex	r3, r2, [r1]
 8009b6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d1e3      	bne.n	8009b3e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	d118      	bne.n	8009bb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	e853 3f00 	ldrex	r3, [r3]
 8009b8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	f023 0310 	bic.w	r3, r3, #16
 8009b92:	647b      	str	r3, [r7, #68]	; 0x44
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	461a      	mov	r2, r3
 8009b9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b9c:	61bb      	str	r3, [r7, #24]
 8009b9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba0:	6979      	ldr	r1, [r7, #20]
 8009ba2:	69ba      	ldr	r2, [r7, #24]
 8009ba4:	e841 2300 	strex	r3, r2, [r1]
 8009ba8:	613b      	str	r3, [r7, #16]
   return(result);
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d1e6      	bne.n	8009b7e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2220      	movs	r2, #32
 8009bb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009bc4:	bf00      	nop
 8009bc6:	3754      	adds	r7, #84	; 0x54
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b084      	sub	sp, #16
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bdc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2200      	movs	r2, #0
 8009be2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2200      	movs	r2, #0
 8009bea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f7ff f996 	bl	8008f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bf4:	bf00      	nop
 8009bf6:	3710      	adds	r7, #16
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b088      	sub	sp, #32
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	e853 3f00 	ldrex	r3, [r3]
 8009c10:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c18:	61fb      	str	r3, [r7, #28]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	461a      	mov	r2, r3
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	61bb      	str	r3, [r7, #24]
 8009c24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c26:	6979      	ldr	r1, [r7, #20]
 8009c28:	69ba      	ldr	r2, [r7, #24]
 8009c2a:	e841 2300 	strex	r3, r2, [r1]
 8009c2e:	613b      	str	r3, [r7, #16]
   return(result);
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d1e6      	bne.n	8009c04 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2220      	movs	r2, #32
 8009c3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2200      	movs	r2, #0
 8009c42:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f7ff f961 	bl	8008f0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c4a:	bf00      	nop
 8009c4c:	3720      	adds	r7, #32
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}

08009c52 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009c52:	b580      	push	{r7, lr}
 8009c54:	b096      	sub	sp, #88	; 0x58
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009c60:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c6a:	2b22      	cmp	r3, #34	; 0x22
 8009c6c:	f040 8095 	bne.w	8009d9a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c76:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009c7a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009c7e:	b2d9      	uxtb	r1, r3
 8009c80:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009c84:	b2da      	uxtb	r2, r3
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c8a:	400a      	ands	r2, r1
 8009c8c:	b2d2      	uxtb	r2, r2
 8009c8e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c94:	1c5a      	adds	r2, r3, #1
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	3b01      	subs	r3, #1
 8009ca4:	b29a      	uxth	r2, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d178      	bne.n	8009daa <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc0:	e853 3f00 	ldrex	r3, [r3]
 8009cc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ccc:	653b      	str	r3, [r7, #80]	; 0x50
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cd6:	647b      	str	r3, [r7, #68]	; 0x44
 8009cd8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009cdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009cde:	e841 2300 	strex	r3, r2, [r1]
 8009ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d1e6      	bne.n	8009cb8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	3308      	adds	r3, #8
 8009cf0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf4:	e853 3f00 	ldrex	r3, [r3]
 8009cf8:	623b      	str	r3, [r7, #32]
   return(result);
 8009cfa:	6a3b      	ldr	r3, [r7, #32]
 8009cfc:	f023 0301 	bic.w	r3, r3, #1
 8009d00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	3308      	adds	r3, #8
 8009d08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d0a:	633a      	str	r2, [r7, #48]	; 0x30
 8009d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d12:	e841 2300 	strex	r3, r2, [r1]
 8009d16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d1e5      	bne.n	8009cea <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2220      	movs	r2, #32
 8009d22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d12e      	bne.n	8009d92 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2200      	movs	r2, #0
 8009d38:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	e853 3f00 	ldrex	r3, [r3]
 8009d46:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f023 0310 	bic.w	r3, r3, #16
 8009d4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	461a      	mov	r2, r3
 8009d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d58:	61fb      	str	r3, [r7, #28]
 8009d5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5c:	69b9      	ldr	r1, [r7, #24]
 8009d5e:	69fa      	ldr	r2, [r7, #28]
 8009d60:	e841 2300 	strex	r3, r2, [r1]
 8009d64:	617b      	str	r3, [r7, #20]
   return(result);
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d1e6      	bne.n	8009d3a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	69db      	ldr	r3, [r3, #28]
 8009d72:	f003 0310 	and.w	r3, r3, #16
 8009d76:	2b10      	cmp	r3, #16
 8009d78:	d103      	bne.n	8009d82 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	2210      	movs	r2, #16
 8009d80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d88:	4619      	mov	r1, r3
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f7ff f8d2 	bl	8008f34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d90:	e00b      	b.n	8009daa <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f7f8 fd5e 	bl	8002854 <HAL_UART_RxCpltCallback>
}
 8009d98:	e007      	b.n	8009daa <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	699a      	ldr	r2, [r3, #24]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f042 0208 	orr.w	r2, r2, #8
 8009da8:	619a      	str	r2, [r3, #24]
}
 8009daa:	bf00      	nop
 8009dac:	3758      	adds	r7, #88	; 0x58
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b096      	sub	sp, #88	; 0x58
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009dc0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dca:	2b22      	cmp	r3, #34	; 0x22
 8009dcc:	f040 8095 	bne.w	8009efa <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dde:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009de0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009de4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009de8:	4013      	ands	r3, r2
 8009dea:	b29a      	uxth	r2, r3
 8009dec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dee:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009df4:	1c9a      	adds	r2, r3, #2
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e00:	b29b      	uxth	r3, r3
 8009e02:	3b01      	subs	r3, #1
 8009e04:	b29a      	uxth	r2, r3
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d178      	bne.n	8009f0a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e20:	e853 3f00 	ldrex	r3, [r3]
 8009e24:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	461a      	mov	r2, r3
 8009e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e36:	643b      	str	r3, [r7, #64]	; 0x40
 8009e38:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e3e:	e841 2300 	strex	r3, r2, [r1]
 8009e42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d1e6      	bne.n	8009e18 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	3308      	adds	r3, #8
 8009e50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e52:	6a3b      	ldr	r3, [r7, #32]
 8009e54:	e853 3f00 	ldrex	r3, [r3]
 8009e58:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	f023 0301 	bic.w	r3, r3, #1
 8009e60:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	3308      	adds	r3, #8
 8009e68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009e6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e72:	e841 2300 	strex	r3, r2, [r1]
 8009e76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d1e5      	bne.n	8009e4a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2220      	movs	r2, #32
 8009e82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	d12e      	bne.n	8009ef2 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	e853 3f00 	ldrex	r3, [r3]
 8009ea6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	f023 0310 	bic.w	r3, r3, #16
 8009eae:	647b      	str	r3, [r7, #68]	; 0x44
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009eb8:	61bb      	str	r3, [r7, #24]
 8009eba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ebc:	6979      	ldr	r1, [r7, #20]
 8009ebe:	69ba      	ldr	r2, [r7, #24]
 8009ec0:	e841 2300 	strex	r3, r2, [r1]
 8009ec4:	613b      	str	r3, [r7, #16]
   return(result);
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d1e6      	bne.n	8009e9a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	69db      	ldr	r3, [r3, #28]
 8009ed2:	f003 0310 	and.w	r3, r3, #16
 8009ed6:	2b10      	cmp	r3, #16
 8009ed8:	d103      	bne.n	8009ee2 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2210      	movs	r2, #16
 8009ee0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009ee8:	4619      	mov	r1, r3
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f7ff f822 	bl	8008f34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ef0:	e00b      	b.n	8009f0a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f7f8 fcae 	bl	8002854 <HAL_UART_RxCpltCallback>
}
 8009ef8:	e007      	b.n	8009f0a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	699a      	ldr	r2, [r3, #24]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f042 0208 	orr.w	r2, r2, #8
 8009f08:	619a      	str	r2, [r3, #24]
}
 8009f0a:	bf00      	nop
 8009f0c:	3758      	adds	r7, #88	; 0x58
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
	...

08009f14 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b0a6      	sub	sp, #152	; 0x98
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009f22:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	69db      	ldr	r3, [r3, #28]
 8009f2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f4a:	2b22      	cmp	r3, #34	; 0x22
 8009f4c:	f040 814f 	bne.w	800a1ee <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009f56:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f5a:	e0f6      	b.n	800a14a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f62:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009f66:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009f6a:	b2d9      	uxtb	r1, r3
 8009f6c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009f70:	b2da      	uxtb	r2, r3
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f76:	400a      	ands	r2, r1
 8009f78:	b2d2      	uxtb	r2, r2
 8009f7a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f80:	1c5a      	adds	r2, r3, #1
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	3b01      	subs	r3, #1
 8009f90:	b29a      	uxth	r2, r3
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	69db      	ldr	r3, [r3, #28]
 8009f9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009fa2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009fa6:	f003 0307 	and.w	r3, r3, #7
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d053      	beq.n	800a056 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009fae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009fb2:	f003 0301 	and.w	r3, r3, #1
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d011      	beq.n	8009fde <UART_RxISR_8BIT_FIFOEN+0xca>
 8009fba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d00b      	beq.n	8009fde <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	2201      	movs	r2, #1
 8009fcc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fd4:	f043 0201 	orr.w	r2, r3, #1
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fde:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009fe2:	f003 0302 	and.w	r3, r3, #2
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d011      	beq.n	800a00e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009fea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009fee:	f003 0301 	and.w	r3, r3, #1
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d00b      	beq.n	800a00e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2202      	movs	r2, #2
 8009ffc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a004:	f043 0204 	orr.w	r2, r3, #4
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a00e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a012:	f003 0304 	and.w	r3, r3, #4
 800a016:	2b00      	cmp	r3, #0
 800a018:	d011      	beq.n	800a03e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a01a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a01e:	f003 0301 	and.w	r3, r3, #1
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00b      	beq.n	800a03e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	2204      	movs	r2, #4
 800a02c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a034:	f043 0202 	orr.w	r2, r3, #2
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a044:	2b00      	cmp	r3, #0
 800a046:	d006      	beq.n	800a056 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f7fe ff69 	bl	8008f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2200      	movs	r2, #0
 800a052:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d173      	bne.n	800a14a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a068:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a06a:	e853 3f00 	ldrex	r3, [r3]
 800a06e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800a070:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a072:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a076:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	461a      	mov	r2, r3
 800a080:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a084:	66bb      	str	r3, [r7, #104]	; 0x68
 800a086:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a088:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a08a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a08c:	e841 2300 	strex	r3, r2, [r1]
 800a090:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a092:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a094:	2b00      	cmp	r3, #0
 800a096:	d1e4      	bne.n	800a062 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	3308      	adds	r3, #8
 800a09e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0a2:	e853 3f00 	ldrex	r3, [r3]
 800a0a6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a0a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a0ae:	f023 0301 	bic.w	r3, r3, #1
 800a0b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	3308      	adds	r3, #8
 800a0ba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a0bc:	657a      	str	r2, [r7, #84]	; 0x54
 800a0be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a0c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a0c4:	e841 2300 	strex	r3, r2, [r1]
 800a0c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a0ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d1e3      	bne.n	800a098 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2220      	movs	r2, #32
 800a0d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d12e      	bne.n	800a144 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0f4:	e853 3f00 	ldrex	r3, [r3]
 800a0f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0fc:	f023 0310 	bic.w	r3, r3, #16
 800a100:	67bb      	str	r3, [r7, #120]	; 0x78
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	461a      	mov	r2, r3
 800a108:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a10a:	643b      	str	r3, [r7, #64]	; 0x40
 800a10c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a10e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a110:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a112:	e841 2300 	strex	r3, r2, [r1]
 800a116:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d1e6      	bne.n	800a0ec <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	69db      	ldr	r3, [r3, #28]
 800a124:	f003 0310 	and.w	r3, r3, #16
 800a128:	2b10      	cmp	r3, #16
 800a12a:	d103      	bne.n	800a134 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2210      	movs	r2, #16
 800a132:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a13a:	4619      	mov	r1, r3
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f7fe fef9 	bl	8008f34 <HAL_UARTEx_RxEventCallback>
 800a142:	e002      	b.n	800a14a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f7f8 fb85 	bl	8002854 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a14a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d006      	beq.n	800a160 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800a152:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a156:	f003 0320 	and.w	r3, r3, #32
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	f47f aefe 	bne.w	8009f5c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a166:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a16a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d045      	beq.n	800a1fe <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a178:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d23e      	bcs.n	800a1fe <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	3308      	adds	r3, #8
 800a186:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a188:	6a3b      	ldr	r3, [r7, #32]
 800a18a:	e853 3f00 	ldrex	r3, [r3]
 800a18e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a190:	69fb      	ldr	r3, [r7, #28]
 800a192:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a196:	673b      	str	r3, [r7, #112]	; 0x70
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	3308      	adds	r3, #8
 800a19e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a1a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a1a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1a8:	e841 2300 	strex	r3, r2, [r1]
 800a1ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d1e5      	bne.n	800a180 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4a14      	ldr	r2, [pc, #80]	; (800a208 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800a1b8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	e853 3f00 	ldrex	r3, [r3]
 800a1c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	f043 0320 	orr.w	r3, r3, #32
 800a1ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1d8:	61bb      	str	r3, [r7, #24]
 800a1da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1dc:	6979      	ldr	r1, [r7, #20]
 800a1de:	69ba      	ldr	r2, [r7, #24]
 800a1e0:	e841 2300 	strex	r3, r2, [r1]
 800a1e4:	613b      	str	r3, [r7, #16]
   return(result);
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d1e6      	bne.n	800a1ba <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a1ec:	e007      	b.n	800a1fe <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	699a      	ldr	r2, [r3, #24]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f042 0208 	orr.w	r2, r2, #8
 800a1fc:	619a      	str	r2, [r3, #24]
}
 800a1fe:	bf00      	nop
 800a200:	3798      	adds	r7, #152	; 0x98
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	08009c53 	.word	0x08009c53

0800a20c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b0a8      	sub	sp, #160	; 0xa0
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a21a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	69db      	ldr	r3, [r3, #28]
 800a224:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a242:	2b22      	cmp	r3, #34	; 0x22
 800a244:	f040 8153 	bne.w	800a4ee <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a24e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a252:	e0fa      	b.n	800a44a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a262:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800a266:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800a26a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a26e:	4013      	ands	r3, r2
 800a270:	b29a      	uxth	r2, r3
 800a272:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a276:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a27c:	1c9a      	adds	r2, r3, #2
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a288:	b29b      	uxth	r3, r3
 800a28a:	3b01      	subs	r3, #1
 800a28c:	b29a      	uxth	r2, r3
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	69db      	ldr	r3, [r3, #28]
 800a29a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a29e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2a2:	f003 0307 	and.w	r3, r3, #7
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d053      	beq.n	800a352 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a2aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2ae:	f003 0301 	and.w	r3, r3, #1
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d011      	beq.n	800a2da <UART_RxISR_16BIT_FIFOEN+0xce>
 800a2b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a2ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00b      	beq.n	800a2da <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2d0:	f043 0201 	orr.w	r2, r3, #1
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a2da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2de:	f003 0302 	and.w	r3, r3, #2
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d011      	beq.n	800a30a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a2e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a2ea:	f003 0301 	and.w	r3, r3, #1
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d00b      	beq.n	800a30a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2202      	movs	r2, #2
 800a2f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a300:	f043 0204 	orr.w	r2, r3, #4
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a30a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a30e:	f003 0304 	and.w	r3, r3, #4
 800a312:	2b00      	cmp	r3, #0
 800a314:	d011      	beq.n	800a33a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a316:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a31a:	f003 0301 	and.w	r3, r3, #1
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d00b      	beq.n	800a33a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	2204      	movs	r2, #4
 800a328:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a330:	f043 0202 	orr.w	r2, r3, #2
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a340:	2b00      	cmp	r3, #0
 800a342:	d006      	beq.n	800a352 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f7fe fdeb 	bl	8008f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a358:	b29b      	uxth	r3, r3
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d175      	bne.n	800a44a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a364:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a366:	e853 3f00 	ldrex	r3, [r3]
 800a36a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a36c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a36e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a372:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	461a      	mov	r2, r3
 800a37c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a380:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a382:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a384:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a386:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a388:	e841 2300 	strex	r3, r2, [r1]
 800a38c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a38e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a390:	2b00      	cmp	r3, #0
 800a392:	d1e4      	bne.n	800a35e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	3308      	adds	r3, #8
 800a39a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a39c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a39e:	e853 3f00 	ldrex	r3, [r3]
 800a3a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a3a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a3aa:	f023 0301 	bic.w	r3, r3, #1
 800a3ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	3308      	adds	r3, #8
 800a3b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a3bc:	65ba      	str	r2, [r7, #88]	; 0x58
 800a3be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a3c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a3c4:	e841 2300 	strex	r3, r2, [r1]
 800a3c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a3ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d1e1      	bne.n	800a394 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2220      	movs	r2, #32
 800a3d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3e2:	2b01      	cmp	r3, #1
 800a3e4:	d12e      	bne.n	800a444 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f4:	e853 3f00 	ldrex	r3, [r3]
 800a3f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a3fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3fc:	f023 0310 	bic.w	r3, r3, #16
 800a400:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	461a      	mov	r2, r3
 800a408:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a40a:	647b      	str	r3, [r7, #68]	; 0x44
 800a40c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a40e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a410:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a412:	e841 2300 	strex	r3, r2, [r1]
 800a416:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d1e6      	bne.n	800a3ec <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	69db      	ldr	r3, [r3, #28]
 800a424:	f003 0310 	and.w	r3, r3, #16
 800a428:	2b10      	cmp	r3, #16
 800a42a:	d103      	bne.n	800a434 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	2210      	movs	r2, #16
 800a432:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a43a:	4619      	mov	r1, r3
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f7fe fd79 	bl	8008f34 <HAL_UARTEx_RxEventCallback>
 800a442:	e002      	b.n	800a44a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f7f8 fa05 	bl	8002854 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a44a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d006      	beq.n	800a460 <UART_RxISR_16BIT_FIFOEN+0x254>
 800a452:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a456:	f003 0320 	and.w	r3, r3, #32
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	f47f aefa 	bne.w	800a254 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a466:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a46a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d045      	beq.n	800a4fe <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a478:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d23e      	bcs.n	800a4fe <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	3308      	adds	r3, #8
 800a486:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48a:	e853 3f00 	ldrex	r3, [r3]
 800a48e:	623b      	str	r3, [r7, #32]
   return(result);
 800a490:	6a3b      	ldr	r3, [r7, #32]
 800a492:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a496:	677b      	str	r3, [r7, #116]	; 0x74
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	3308      	adds	r3, #8
 800a49e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a4a0:	633a      	str	r2, [r7, #48]	; 0x30
 800a4a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4a8:	e841 2300 	strex	r3, r2, [r1]
 800a4ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d1e5      	bne.n	800a480 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	4a14      	ldr	r2, [pc, #80]	; (800a508 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800a4b8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	e853 3f00 	ldrex	r3, [r3]
 800a4c6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f043 0320 	orr.w	r3, r3, #32
 800a4ce:	673b      	str	r3, [r7, #112]	; 0x70
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a4d8:	61fb      	str	r3, [r7, #28]
 800a4da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4dc:	69b9      	ldr	r1, [r7, #24]
 800a4de:	69fa      	ldr	r2, [r7, #28]
 800a4e0:	e841 2300 	strex	r3, r2, [r1]
 800a4e4:	617b      	str	r3, [r7, #20]
   return(result);
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d1e6      	bne.n	800a4ba <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a4ec:	e007      	b.n	800a4fe <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	699a      	ldr	r2, [r3, #24]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f042 0208 	orr.w	r2, r2, #8
 800a4fc:	619a      	str	r2, [r3, #24]
}
 800a4fe:	bf00      	nop
 800a500:	37a0      	adds	r7, #160	; 0xa0
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	08009db3 	.word	0x08009db3

0800a50c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a514:	bf00      	nop
 800a516:	370c      	adds	r7, #12
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a520:	b480      	push	{r7}
 800a522:	b083      	sub	sp, #12
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a528:	bf00      	nop
 800a52a:	370c      	adds	r7, #12
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a53c:	bf00      	nop
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a548:	b480      	push	{r7}
 800a54a:	b085      	sub	sp, #20
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a556:	2b01      	cmp	r3, #1
 800a558:	d101      	bne.n	800a55e <HAL_UARTEx_DisableFifoMode+0x16>
 800a55a:	2302      	movs	r3, #2
 800a55c:	e027      	b.n	800a5ae <HAL_UARTEx_DisableFifoMode+0x66>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2201      	movs	r2, #1
 800a562:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2224      	movs	r2, #36	; 0x24
 800a56a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f022 0201 	bic.w	r2, r2, #1
 800a584:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a58c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2200      	movs	r2, #0
 800a592:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2220      	movs	r2, #32
 800a5a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a5ac:	2300      	movs	r3, #0
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3714      	adds	r7, #20
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr

0800a5ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b084      	sub	sp, #16
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
 800a5c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	d101      	bne.n	800a5d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a5ce:	2302      	movs	r3, #2
 800a5d0:	e02d      	b.n	800a62e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2224      	movs	r2, #36	; 0x24
 800a5de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f022 0201 	bic.w	r2, r2, #1
 800a5f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	683a      	ldr	r2, [r7, #0]
 800a60a:	430a      	orrs	r2, r1
 800a60c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 f850 	bl	800a6b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	68fa      	ldr	r2, [r7, #12]
 800a61a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2220      	movs	r2, #32
 800a620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a62c:	2300      	movs	r3, #0
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3710      	adds	r7, #16
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}

0800a636 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a636:	b580      	push	{r7, lr}
 800a638:	b084      	sub	sp, #16
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
 800a63e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a646:	2b01      	cmp	r3, #1
 800a648:	d101      	bne.n	800a64e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a64a:	2302      	movs	r3, #2
 800a64c:	e02d      	b.n	800a6aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2201      	movs	r2, #1
 800a652:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2224      	movs	r2, #36	; 0x24
 800a65a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f022 0201 	bic.w	r2, r2, #1
 800a674:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	683a      	ldr	r2, [r7, #0]
 800a686:	430a      	orrs	r2, r1
 800a688:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 f812 	bl	800a6b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	68fa      	ldr	r2, [r7, #12]
 800a696:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2220      	movs	r2, #32
 800a69c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a6a8:	2300      	movs	r3, #0
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3710      	adds	r7, #16
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
	...

0800a6b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b085      	sub	sp, #20
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d108      	bne.n	800a6d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a6d4:	e031      	b.n	800a73a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a6d6:	2308      	movs	r3, #8
 800a6d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a6da:	2308      	movs	r3, #8
 800a6dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	689b      	ldr	r3, [r3, #8]
 800a6e4:	0e5b      	lsrs	r3, r3, #25
 800a6e6:	b2db      	uxtb	r3, r3
 800a6e8:	f003 0307 	and.w	r3, r3, #7
 800a6ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	0f5b      	lsrs	r3, r3, #29
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	f003 0307 	and.w	r3, r3, #7
 800a6fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6fe:	7bbb      	ldrb	r3, [r7, #14]
 800a700:	7b3a      	ldrb	r2, [r7, #12]
 800a702:	4911      	ldr	r1, [pc, #68]	; (800a748 <UARTEx_SetNbDataToProcess+0x94>)
 800a704:	5c8a      	ldrb	r2, [r1, r2]
 800a706:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a70a:	7b3a      	ldrb	r2, [r7, #12]
 800a70c:	490f      	ldr	r1, [pc, #60]	; (800a74c <UARTEx_SetNbDataToProcess+0x98>)
 800a70e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a710:	fb93 f3f2 	sdiv	r3, r3, r2
 800a714:	b29a      	uxth	r2, r3
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a71c:	7bfb      	ldrb	r3, [r7, #15]
 800a71e:	7b7a      	ldrb	r2, [r7, #13]
 800a720:	4909      	ldr	r1, [pc, #36]	; (800a748 <UARTEx_SetNbDataToProcess+0x94>)
 800a722:	5c8a      	ldrb	r2, [r1, r2]
 800a724:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a728:	7b7a      	ldrb	r2, [r7, #13]
 800a72a:	4908      	ldr	r1, [pc, #32]	; (800a74c <UARTEx_SetNbDataToProcess+0x98>)
 800a72c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a72e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a732:	b29a      	uxth	r2, r3
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a73a:	bf00      	nop
 800a73c:	3714      	adds	r7, #20
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr
 800a746:	bf00      	nop
 800a748:	0800d760 	.word	0x0800d760
 800a74c:	0800d768 	.word	0x0800d768

0800a750 <atoi>:
 800a750:	220a      	movs	r2, #10
 800a752:	2100      	movs	r1, #0
 800a754:	f000 b882 	b.w	800a85c <strtol>

0800a758 <_strtol_l.constprop.0>:
 800a758:	2b01      	cmp	r3, #1
 800a75a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a75e:	d001      	beq.n	800a764 <_strtol_l.constprop.0+0xc>
 800a760:	2b24      	cmp	r3, #36	; 0x24
 800a762:	d906      	bls.n	800a772 <_strtol_l.constprop.0+0x1a>
 800a764:	f000 fee0 	bl	800b528 <__errno>
 800a768:	2316      	movs	r3, #22
 800a76a:	6003      	str	r3, [r0, #0]
 800a76c:	2000      	movs	r0, #0
 800a76e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a772:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a858 <_strtol_l.constprop.0+0x100>
 800a776:	460d      	mov	r5, r1
 800a778:	462e      	mov	r6, r5
 800a77a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a77e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a782:	f017 0708 	ands.w	r7, r7, #8
 800a786:	d1f7      	bne.n	800a778 <_strtol_l.constprop.0+0x20>
 800a788:	2c2d      	cmp	r4, #45	; 0x2d
 800a78a:	d132      	bne.n	800a7f2 <_strtol_l.constprop.0+0x9a>
 800a78c:	782c      	ldrb	r4, [r5, #0]
 800a78e:	2701      	movs	r7, #1
 800a790:	1cb5      	adds	r5, r6, #2
 800a792:	2b00      	cmp	r3, #0
 800a794:	d05b      	beq.n	800a84e <_strtol_l.constprop.0+0xf6>
 800a796:	2b10      	cmp	r3, #16
 800a798:	d109      	bne.n	800a7ae <_strtol_l.constprop.0+0x56>
 800a79a:	2c30      	cmp	r4, #48	; 0x30
 800a79c:	d107      	bne.n	800a7ae <_strtol_l.constprop.0+0x56>
 800a79e:	782c      	ldrb	r4, [r5, #0]
 800a7a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a7a4:	2c58      	cmp	r4, #88	; 0x58
 800a7a6:	d14d      	bne.n	800a844 <_strtol_l.constprop.0+0xec>
 800a7a8:	786c      	ldrb	r4, [r5, #1]
 800a7aa:	2310      	movs	r3, #16
 800a7ac:	3502      	adds	r5, #2
 800a7ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a7b2:	f108 38ff 	add.w	r8, r8, #4294967295
 800a7b6:	f04f 0e00 	mov.w	lr, #0
 800a7ba:	fbb8 f9f3 	udiv	r9, r8, r3
 800a7be:	4676      	mov	r6, lr
 800a7c0:	fb03 8a19 	mls	sl, r3, r9, r8
 800a7c4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a7c8:	f1bc 0f09 	cmp.w	ip, #9
 800a7cc:	d816      	bhi.n	800a7fc <_strtol_l.constprop.0+0xa4>
 800a7ce:	4664      	mov	r4, ip
 800a7d0:	42a3      	cmp	r3, r4
 800a7d2:	dd24      	ble.n	800a81e <_strtol_l.constprop.0+0xc6>
 800a7d4:	f1be 3fff 	cmp.w	lr, #4294967295
 800a7d8:	d008      	beq.n	800a7ec <_strtol_l.constprop.0+0x94>
 800a7da:	45b1      	cmp	r9, r6
 800a7dc:	d31c      	bcc.n	800a818 <_strtol_l.constprop.0+0xc0>
 800a7de:	d101      	bne.n	800a7e4 <_strtol_l.constprop.0+0x8c>
 800a7e0:	45a2      	cmp	sl, r4
 800a7e2:	db19      	blt.n	800a818 <_strtol_l.constprop.0+0xc0>
 800a7e4:	fb06 4603 	mla	r6, r6, r3, r4
 800a7e8:	f04f 0e01 	mov.w	lr, #1
 800a7ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7f0:	e7e8      	b.n	800a7c4 <_strtol_l.constprop.0+0x6c>
 800a7f2:	2c2b      	cmp	r4, #43	; 0x2b
 800a7f4:	bf04      	itt	eq
 800a7f6:	782c      	ldrbeq	r4, [r5, #0]
 800a7f8:	1cb5      	addeq	r5, r6, #2
 800a7fa:	e7ca      	b.n	800a792 <_strtol_l.constprop.0+0x3a>
 800a7fc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a800:	f1bc 0f19 	cmp.w	ip, #25
 800a804:	d801      	bhi.n	800a80a <_strtol_l.constprop.0+0xb2>
 800a806:	3c37      	subs	r4, #55	; 0x37
 800a808:	e7e2      	b.n	800a7d0 <_strtol_l.constprop.0+0x78>
 800a80a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a80e:	f1bc 0f19 	cmp.w	ip, #25
 800a812:	d804      	bhi.n	800a81e <_strtol_l.constprop.0+0xc6>
 800a814:	3c57      	subs	r4, #87	; 0x57
 800a816:	e7db      	b.n	800a7d0 <_strtol_l.constprop.0+0x78>
 800a818:	f04f 3eff 	mov.w	lr, #4294967295
 800a81c:	e7e6      	b.n	800a7ec <_strtol_l.constprop.0+0x94>
 800a81e:	f1be 3fff 	cmp.w	lr, #4294967295
 800a822:	d105      	bne.n	800a830 <_strtol_l.constprop.0+0xd8>
 800a824:	2322      	movs	r3, #34	; 0x22
 800a826:	6003      	str	r3, [r0, #0]
 800a828:	4646      	mov	r6, r8
 800a82a:	b942      	cbnz	r2, 800a83e <_strtol_l.constprop.0+0xe6>
 800a82c:	4630      	mov	r0, r6
 800a82e:	e79e      	b.n	800a76e <_strtol_l.constprop.0+0x16>
 800a830:	b107      	cbz	r7, 800a834 <_strtol_l.constprop.0+0xdc>
 800a832:	4276      	negs	r6, r6
 800a834:	2a00      	cmp	r2, #0
 800a836:	d0f9      	beq.n	800a82c <_strtol_l.constprop.0+0xd4>
 800a838:	f1be 0f00 	cmp.w	lr, #0
 800a83c:	d000      	beq.n	800a840 <_strtol_l.constprop.0+0xe8>
 800a83e:	1e69      	subs	r1, r5, #1
 800a840:	6011      	str	r1, [r2, #0]
 800a842:	e7f3      	b.n	800a82c <_strtol_l.constprop.0+0xd4>
 800a844:	2430      	movs	r4, #48	; 0x30
 800a846:	2b00      	cmp	r3, #0
 800a848:	d1b1      	bne.n	800a7ae <_strtol_l.constprop.0+0x56>
 800a84a:	2308      	movs	r3, #8
 800a84c:	e7af      	b.n	800a7ae <_strtol_l.constprop.0+0x56>
 800a84e:	2c30      	cmp	r4, #48	; 0x30
 800a850:	d0a5      	beq.n	800a79e <_strtol_l.constprop.0+0x46>
 800a852:	230a      	movs	r3, #10
 800a854:	e7ab      	b.n	800a7ae <_strtol_l.constprop.0+0x56>
 800a856:	bf00      	nop
 800a858:	0800d771 	.word	0x0800d771

0800a85c <strtol>:
 800a85c:	4613      	mov	r3, r2
 800a85e:	460a      	mov	r2, r1
 800a860:	4601      	mov	r1, r0
 800a862:	4802      	ldr	r0, [pc, #8]	; (800a86c <strtol+0x10>)
 800a864:	6800      	ldr	r0, [r0, #0]
 800a866:	f7ff bf77 	b.w	800a758 <_strtol_l.constprop.0>
 800a86a:	bf00      	nop
 800a86c:	20000120 	.word	0x20000120

0800a870 <__cvt>:
 800a870:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a874:	ec55 4b10 	vmov	r4, r5, d0
 800a878:	2d00      	cmp	r5, #0
 800a87a:	460e      	mov	r6, r1
 800a87c:	4619      	mov	r1, r3
 800a87e:	462b      	mov	r3, r5
 800a880:	bfbb      	ittet	lt
 800a882:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a886:	461d      	movlt	r5, r3
 800a888:	2300      	movge	r3, #0
 800a88a:	232d      	movlt	r3, #45	; 0x2d
 800a88c:	700b      	strb	r3, [r1, #0]
 800a88e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a890:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a894:	4691      	mov	r9, r2
 800a896:	f023 0820 	bic.w	r8, r3, #32
 800a89a:	bfbc      	itt	lt
 800a89c:	4622      	movlt	r2, r4
 800a89e:	4614      	movlt	r4, r2
 800a8a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a8a4:	d005      	beq.n	800a8b2 <__cvt+0x42>
 800a8a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a8aa:	d100      	bne.n	800a8ae <__cvt+0x3e>
 800a8ac:	3601      	adds	r6, #1
 800a8ae:	2102      	movs	r1, #2
 800a8b0:	e000      	b.n	800a8b4 <__cvt+0x44>
 800a8b2:	2103      	movs	r1, #3
 800a8b4:	ab03      	add	r3, sp, #12
 800a8b6:	9301      	str	r3, [sp, #4]
 800a8b8:	ab02      	add	r3, sp, #8
 800a8ba:	9300      	str	r3, [sp, #0]
 800a8bc:	ec45 4b10 	vmov	d0, r4, r5
 800a8c0:	4653      	mov	r3, sl
 800a8c2:	4632      	mov	r2, r6
 800a8c4:	f000 ff04 	bl	800b6d0 <_dtoa_r>
 800a8c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a8cc:	4607      	mov	r7, r0
 800a8ce:	d102      	bne.n	800a8d6 <__cvt+0x66>
 800a8d0:	f019 0f01 	tst.w	r9, #1
 800a8d4:	d022      	beq.n	800a91c <__cvt+0xac>
 800a8d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a8da:	eb07 0906 	add.w	r9, r7, r6
 800a8de:	d110      	bne.n	800a902 <__cvt+0x92>
 800a8e0:	783b      	ldrb	r3, [r7, #0]
 800a8e2:	2b30      	cmp	r3, #48	; 0x30
 800a8e4:	d10a      	bne.n	800a8fc <__cvt+0x8c>
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	4629      	mov	r1, r5
 800a8ee:	f7f6 f923 	bl	8000b38 <__aeabi_dcmpeq>
 800a8f2:	b918      	cbnz	r0, 800a8fc <__cvt+0x8c>
 800a8f4:	f1c6 0601 	rsb	r6, r6, #1
 800a8f8:	f8ca 6000 	str.w	r6, [sl]
 800a8fc:	f8da 3000 	ldr.w	r3, [sl]
 800a900:	4499      	add	r9, r3
 800a902:	2200      	movs	r2, #0
 800a904:	2300      	movs	r3, #0
 800a906:	4620      	mov	r0, r4
 800a908:	4629      	mov	r1, r5
 800a90a:	f7f6 f915 	bl	8000b38 <__aeabi_dcmpeq>
 800a90e:	b108      	cbz	r0, 800a914 <__cvt+0xa4>
 800a910:	f8cd 900c 	str.w	r9, [sp, #12]
 800a914:	2230      	movs	r2, #48	; 0x30
 800a916:	9b03      	ldr	r3, [sp, #12]
 800a918:	454b      	cmp	r3, r9
 800a91a:	d307      	bcc.n	800a92c <__cvt+0xbc>
 800a91c:	9b03      	ldr	r3, [sp, #12]
 800a91e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a920:	1bdb      	subs	r3, r3, r7
 800a922:	4638      	mov	r0, r7
 800a924:	6013      	str	r3, [r2, #0]
 800a926:	b004      	add	sp, #16
 800a928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a92c:	1c59      	adds	r1, r3, #1
 800a92e:	9103      	str	r1, [sp, #12]
 800a930:	701a      	strb	r2, [r3, #0]
 800a932:	e7f0      	b.n	800a916 <__cvt+0xa6>

0800a934 <__exponent>:
 800a934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a936:	4603      	mov	r3, r0
 800a938:	2900      	cmp	r1, #0
 800a93a:	bfb8      	it	lt
 800a93c:	4249      	neglt	r1, r1
 800a93e:	f803 2b02 	strb.w	r2, [r3], #2
 800a942:	bfb4      	ite	lt
 800a944:	222d      	movlt	r2, #45	; 0x2d
 800a946:	222b      	movge	r2, #43	; 0x2b
 800a948:	2909      	cmp	r1, #9
 800a94a:	7042      	strb	r2, [r0, #1]
 800a94c:	dd2a      	ble.n	800a9a4 <__exponent+0x70>
 800a94e:	f10d 0207 	add.w	r2, sp, #7
 800a952:	4617      	mov	r7, r2
 800a954:	260a      	movs	r6, #10
 800a956:	4694      	mov	ip, r2
 800a958:	fb91 f5f6 	sdiv	r5, r1, r6
 800a95c:	fb06 1415 	mls	r4, r6, r5, r1
 800a960:	3430      	adds	r4, #48	; 0x30
 800a962:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a966:	460c      	mov	r4, r1
 800a968:	2c63      	cmp	r4, #99	; 0x63
 800a96a:	f102 32ff 	add.w	r2, r2, #4294967295
 800a96e:	4629      	mov	r1, r5
 800a970:	dcf1      	bgt.n	800a956 <__exponent+0x22>
 800a972:	3130      	adds	r1, #48	; 0x30
 800a974:	f1ac 0402 	sub.w	r4, ip, #2
 800a978:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a97c:	1c41      	adds	r1, r0, #1
 800a97e:	4622      	mov	r2, r4
 800a980:	42ba      	cmp	r2, r7
 800a982:	d30a      	bcc.n	800a99a <__exponent+0x66>
 800a984:	f10d 0209 	add.w	r2, sp, #9
 800a988:	eba2 020c 	sub.w	r2, r2, ip
 800a98c:	42bc      	cmp	r4, r7
 800a98e:	bf88      	it	hi
 800a990:	2200      	movhi	r2, #0
 800a992:	4413      	add	r3, r2
 800a994:	1a18      	subs	r0, r3, r0
 800a996:	b003      	add	sp, #12
 800a998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a99a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a99e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a9a2:	e7ed      	b.n	800a980 <__exponent+0x4c>
 800a9a4:	2330      	movs	r3, #48	; 0x30
 800a9a6:	3130      	adds	r1, #48	; 0x30
 800a9a8:	7083      	strb	r3, [r0, #2]
 800a9aa:	70c1      	strb	r1, [r0, #3]
 800a9ac:	1d03      	adds	r3, r0, #4
 800a9ae:	e7f1      	b.n	800a994 <__exponent+0x60>

0800a9b0 <_printf_float>:
 800a9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b4:	ed2d 8b02 	vpush	{d8}
 800a9b8:	b08d      	sub	sp, #52	; 0x34
 800a9ba:	460c      	mov	r4, r1
 800a9bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a9c0:	4616      	mov	r6, r2
 800a9c2:	461f      	mov	r7, r3
 800a9c4:	4605      	mov	r5, r0
 800a9c6:	f000 fd65 	bl	800b494 <_localeconv_r>
 800a9ca:	f8d0 a000 	ldr.w	sl, [r0]
 800a9ce:	4650      	mov	r0, sl
 800a9d0:	f7f5 fc86 	bl	80002e0 <strlen>
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	930a      	str	r3, [sp, #40]	; 0x28
 800a9d8:	6823      	ldr	r3, [r4, #0]
 800a9da:	9305      	str	r3, [sp, #20]
 800a9dc:	f8d8 3000 	ldr.w	r3, [r8]
 800a9e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a9e4:	3307      	adds	r3, #7
 800a9e6:	f023 0307 	bic.w	r3, r3, #7
 800a9ea:	f103 0208 	add.w	r2, r3, #8
 800a9ee:	f8c8 2000 	str.w	r2, [r8]
 800a9f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a9f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a9fa:	9307      	str	r3, [sp, #28]
 800a9fc:	f8cd 8018 	str.w	r8, [sp, #24]
 800aa00:	ee08 0a10 	vmov	s16, r0
 800aa04:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800aa08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa0c:	4b9e      	ldr	r3, [pc, #632]	; (800ac88 <_printf_float+0x2d8>)
 800aa0e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa12:	f7f6 f8c3 	bl	8000b9c <__aeabi_dcmpun>
 800aa16:	bb88      	cbnz	r0, 800aa7c <_printf_float+0xcc>
 800aa18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa1c:	4b9a      	ldr	r3, [pc, #616]	; (800ac88 <_printf_float+0x2d8>)
 800aa1e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa22:	f7f6 f89d 	bl	8000b60 <__aeabi_dcmple>
 800aa26:	bb48      	cbnz	r0, 800aa7c <_printf_float+0xcc>
 800aa28:	2200      	movs	r2, #0
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	4640      	mov	r0, r8
 800aa2e:	4649      	mov	r1, r9
 800aa30:	f7f6 f88c 	bl	8000b4c <__aeabi_dcmplt>
 800aa34:	b110      	cbz	r0, 800aa3c <_printf_float+0x8c>
 800aa36:	232d      	movs	r3, #45	; 0x2d
 800aa38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa3c:	4a93      	ldr	r2, [pc, #588]	; (800ac8c <_printf_float+0x2dc>)
 800aa3e:	4b94      	ldr	r3, [pc, #592]	; (800ac90 <_printf_float+0x2e0>)
 800aa40:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800aa44:	bf94      	ite	ls
 800aa46:	4690      	movls	r8, r2
 800aa48:	4698      	movhi	r8, r3
 800aa4a:	2303      	movs	r3, #3
 800aa4c:	6123      	str	r3, [r4, #16]
 800aa4e:	9b05      	ldr	r3, [sp, #20]
 800aa50:	f023 0304 	bic.w	r3, r3, #4
 800aa54:	6023      	str	r3, [r4, #0]
 800aa56:	f04f 0900 	mov.w	r9, #0
 800aa5a:	9700      	str	r7, [sp, #0]
 800aa5c:	4633      	mov	r3, r6
 800aa5e:	aa0b      	add	r2, sp, #44	; 0x2c
 800aa60:	4621      	mov	r1, r4
 800aa62:	4628      	mov	r0, r5
 800aa64:	f000 f9da 	bl	800ae1c <_printf_common>
 800aa68:	3001      	adds	r0, #1
 800aa6a:	f040 8090 	bne.w	800ab8e <_printf_float+0x1de>
 800aa6e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa72:	b00d      	add	sp, #52	; 0x34
 800aa74:	ecbd 8b02 	vpop	{d8}
 800aa78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa7c:	4642      	mov	r2, r8
 800aa7e:	464b      	mov	r3, r9
 800aa80:	4640      	mov	r0, r8
 800aa82:	4649      	mov	r1, r9
 800aa84:	f7f6 f88a 	bl	8000b9c <__aeabi_dcmpun>
 800aa88:	b140      	cbz	r0, 800aa9c <_printf_float+0xec>
 800aa8a:	464b      	mov	r3, r9
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	bfbc      	itt	lt
 800aa90:	232d      	movlt	r3, #45	; 0x2d
 800aa92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aa96:	4a7f      	ldr	r2, [pc, #508]	; (800ac94 <_printf_float+0x2e4>)
 800aa98:	4b7f      	ldr	r3, [pc, #508]	; (800ac98 <_printf_float+0x2e8>)
 800aa9a:	e7d1      	b.n	800aa40 <_printf_float+0x90>
 800aa9c:	6863      	ldr	r3, [r4, #4]
 800aa9e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800aaa2:	9206      	str	r2, [sp, #24]
 800aaa4:	1c5a      	adds	r2, r3, #1
 800aaa6:	d13f      	bne.n	800ab28 <_printf_float+0x178>
 800aaa8:	2306      	movs	r3, #6
 800aaaa:	6063      	str	r3, [r4, #4]
 800aaac:	9b05      	ldr	r3, [sp, #20]
 800aaae:	6861      	ldr	r1, [r4, #4]
 800aab0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800aab4:	2300      	movs	r3, #0
 800aab6:	9303      	str	r3, [sp, #12]
 800aab8:	ab0a      	add	r3, sp, #40	; 0x28
 800aaba:	e9cd b301 	strd	fp, r3, [sp, #4]
 800aabe:	ab09      	add	r3, sp, #36	; 0x24
 800aac0:	ec49 8b10 	vmov	d0, r8, r9
 800aac4:	9300      	str	r3, [sp, #0]
 800aac6:	6022      	str	r2, [r4, #0]
 800aac8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aacc:	4628      	mov	r0, r5
 800aace:	f7ff fecf 	bl	800a870 <__cvt>
 800aad2:	9b06      	ldr	r3, [sp, #24]
 800aad4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aad6:	2b47      	cmp	r3, #71	; 0x47
 800aad8:	4680      	mov	r8, r0
 800aada:	d108      	bne.n	800aaee <_printf_float+0x13e>
 800aadc:	1cc8      	adds	r0, r1, #3
 800aade:	db02      	blt.n	800aae6 <_printf_float+0x136>
 800aae0:	6863      	ldr	r3, [r4, #4]
 800aae2:	4299      	cmp	r1, r3
 800aae4:	dd41      	ble.n	800ab6a <_printf_float+0x1ba>
 800aae6:	f1ab 0302 	sub.w	r3, fp, #2
 800aaea:	fa5f fb83 	uxtb.w	fp, r3
 800aaee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aaf2:	d820      	bhi.n	800ab36 <_printf_float+0x186>
 800aaf4:	3901      	subs	r1, #1
 800aaf6:	465a      	mov	r2, fp
 800aaf8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800aafc:	9109      	str	r1, [sp, #36]	; 0x24
 800aafe:	f7ff ff19 	bl	800a934 <__exponent>
 800ab02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab04:	1813      	adds	r3, r2, r0
 800ab06:	2a01      	cmp	r2, #1
 800ab08:	4681      	mov	r9, r0
 800ab0a:	6123      	str	r3, [r4, #16]
 800ab0c:	dc02      	bgt.n	800ab14 <_printf_float+0x164>
 800ab0e:	6822      	ldr	r2, [r4, #0]
 800ab10:	07d2      	lsls	r2, r2, #31
 800ab12:	d501      	bpl.n	800ab18 <_printf_float+0x168>
 800ab14:	3301      	adds	r3, #1
 800ab16:	6123      	str	r3, [r4, #16]
 800ab18:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d09c      	beq.n	800aa5a <_printf_float+0xaa>
 800ab20:	232d      	movs	r3, #45	; 0x2d
 800ab22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab26:	e798      	b.n	800aa5a <_printf_float+0xaa>
 800ab28:	9a06      	ldr	r2, [sp, #24]
 800ab2a:	2a47      	cmp	r2, #71	; 0x47
 800ab2c:	d1be      	bne.n	800aaac <_printf_float+0xfc>
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d1bc      	bne.n	800aaac <_printf_float+0xfc>
 800ab32:	2301      	movs	r3, #1
 800ab34:	e7b9      	b.n	800aaaa <_printf_float+0xfa>
 800ab36:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ab3a:	d118      	bne.n	800ab6e <_printf_float+0x1be>
 800ab3c:	2900      	cmp	r1, #0
 800ab3e:	6863      	ldr	r3, [r4, #4]
 800ab40:	dd0b      	ble.n	800ab5a <_printf_float+0x1aa>
 800ab42:	6121      	str	r1, [r4, #16]
 800ab44:	b913      	cbnz	r3, 800ab4c <_printf_float+0x19c>
 800ab46:	6822      	ldr	r2, [r4, #0]
 800ab48:	07d0      	lsls	r0, r2, #31
 800ab4a:	d502      	bpl.n	800ab52 <_printf_float+0x1a2>
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	440b      	add	r3, r1
 800ab50:	6123      	str	r3, [r4, #16]
 800ab52:	65a1      	str	r1, [r4, #88]	; 0x58
 800ab54:	f04f 0900 	mov.w	r9, #0
 800ab58:	e7de      	b.n	800ab18 <_printf_float+0x168>
 800ab5a:	b913      	cbnz	r3, 800ab62 <_printf_float+0x1b2>
 800ab5c:	6822      	ldr	r2, [r4, #0]
 800ab5e:	07d2      	lsls	r2, r2, #31
 800ab60:	d501      	bpl.n	800ab66 <_printf_float+0x1b6>
 800ab62:	3302      	adds	r3, #2
 800ab64:	e7f4      	b.n	800ab50 <_printf_float+0x1a0>
 800ab66:	2301      	movs	r3, #1
 800ab68:	e7f2      	b.n	800ab50 <_printf_float+0x1a0>
 800ab6a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ab6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab70:	4299      	cmp	r1, r3
 800ab72:	db05      	blt.n	800ab80 <_printf_float+0x1d0>
 800ab74:	6823      	ldr	r3, [r4, #0]
 800ab76:	6121      	str	r1, [r4, #16]
 800ab78:	07d8      	lsls	r0, r3, #31
 800ab7a:	d5ea      	bpl.n	800ab52 <_printf_float+0x1a2>
 800ab7c:	1c4b      	adds	r3, r1, #1
 800ab7e:	e7e7      	b.n	800ab50 <_printf_float+0x1a0>
 800ab80:	2900      	cmp	r1, #0
 800ab82:	bfd4      	ite	le
 800ab84:	f1c1 0202 	rsble	r2, r1, #2
 800ab88:	2201      	movgt	r2, #1
 800ab8a:	4413      	add	r3, r2
 800ab8c:	e7e0      	b.n	800ab50 <_printf_float+0x1a0>
 800ab8e:	6823      	ldr	r3, [r4, #0]
 800ab90:	055a      	lsls	r2, r3, #21
 800ab92:	d407      	bmi.n	800aba4 <_printf_float+0x1f4>
 800ab94:	6923      	ldr	r3, [r4, #16]
 800ab96:	4642      	mov	r2, r8
 800ab98:	4631      	mov	r1, r6
 800ab9a:	4628      	mov	r0, r5
 800ab9c:	47b8      	blx	r7
 800ab9e:	3001      	adds	r0, #1
 800aba0:	d12c      	bne.n	800abfc <_printf_float+0x24c>
 800aba2:	e764      	b.n	800aa6e <_printf_float+0xbe>
 800aba4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aba8:	f240 80e0 	bls.w	800ad6c <_printf_float+0x3bc>
 800abac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800abb0:	2200      	movs	r2, #0
 800abb2:	2300      	movs	r3, #0
 800abb4:	f7f5 ffc0 	bl	8000b38 <__aeabi_dcmpeq>
 800abb8:	2800      	cmp	r0, #0
 800abba:	d034      	beq.n	800ac26 <_printf_float+0x276>
 800abbc:	4a37      	ldr	r2, [pc, #220]	; (800ac9c <_printf_float+0x2ec>)
 800abbe:	2301      	movs	r3, #1
 800abc0:	4631      	mov	r1, r6
 800abc2:	4628      	mov	r0, r5
 800abc4:	47b8      	blx	r7
 800abc6:	3001      	adds	r0, #1
 800abc8:	f43f af51 	beq.w	800aa6e <_printf_float+0xbe>
 800abcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800abd0:	429a      	cmp	r2, r3
 800abd2:	db02      	blt.n	800abda <_printf_float+0x22a>
 800abd4:	6823      	ldr	r3, [r4, #0]
 800abd6:	07d8      	lsls	r0, r3, #31
 800abd8:	d510      	bpl.n	800abfc <_printf_float+0x24c>
 800abda:	ee18 3a10 	vmov	r3, s16
 800abde:	4652      	mov	r2, sl
 800abe0:	4631      	mov	r1, r6
 800abe2:	4628      	mov	r0, r5
 800abe4:	47b8      	blx	r7
 800abe6:	3001      	adds	r0, #1
 800abe8:	f43f af41 	beq.w	800aa6e <_printf_float+0xbe>
 800abec:	f04f 0800 	mov.w	r8, #0
 800abf0:	f104 091a 	add.w	r9, r4, #26
 800abf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abf6:	3b01      	subs	r3, #1
 800abf8:	4543      	cmp	r3, r8
 800abfa:	dc09      	bgt.n	800ac10 <_printf_float+0x260>
 800abfc:	6823      	ldr	r3, [r4, #0]
 800abfe:	079b      	lsls	r3, r3, #30
 800ac00:	f100 8107 	bmi.w	800ae12 <_printf_float+0x462>
 800ac04:	68e0      	ldr	r0, [r4, #12]
 800ac06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac08:	4298      	cmp	r0, r3
 800ac0a:	bfb8      	it	lt
 800ac0c:	4618      	movlt	r0, r3
 800ac0e:	e730      	b.n	800aa72 <_printf_float+0xc2>
 800ac10:	2301      	movs	r3, #1
 800ac12:	464a      	mov	r2, r9
 800ac14:	4631      	mov	r1, r6
 800ac16:	4628      	mov	r0, r5
 800ac18:	47b8      	blx	r7
 800ac1a:	3001      	adds	r0, #1
 800ac1c:	f43f af27 	beq.w	800aa6e <_printf_float+0xbe>
 800ac20:	f108 0801 	add.w	r8, r8, #1
 800ac24:	e7e6      	b.n	800abf4 <_printf_float+0x244>
 800ac26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	dc39      	bgt.n	800aca0 <_printf_float+0x2f0>
 800ac2c:	4a1b      	ldr	r2, [pc, #108]	; (800ac9c <_printf_float+0x2ec>)
 800ac2e:	2301      	movs	r3, #1
 800ac30:	4631      	mov	r1, r6
 800ac32:	4628      	mov	r0, r5
 800ac34:	47b8      	blx	r7
 800ac36:	3001      	adds	r0, #1
 800ac38:	f43f af19 	beq.w	800aa6e <_printf_float+0xbe>
 800ac3c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ac40:	4313      	orrs	r3, r2
 800ac42:	d102      	bne.n	800ac4a <_printf_float+0x29a>
 800ac44:	6823      	ldr	r3, [r4, #0]
 800ac46:	07d9      	lsls	r1, r3, #31
 800ac48:	d5d8      	bpl.n	800abfc <_printf_float+0x24c>
 800ac4a:	ee18 3a10 	vmov	r3, s16
 800ac4e:	4652      	mov	r2, sl
 800ac50:	4631      	mov	r1, r6
 800ac52:	4628      	mov	r0, r5
 800ac54:	47b8      	blx	r7
 800ac56:	3001      	adds	r0, #1
 800ac58:	f43f af09 	beq.w	800aa6e <_printf_float+0xbe>
 800ac5c:	f04f 0900 	mov.w	r9, #0
 800ac60:	f104 0a1a 	add.w	sl, r4, #26
 800ac64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac66:	425b      	negs	r3, r3
 800ac68:	454b      	cmp	r3, r9
 800ac6a:	dc01      	bgt.n	800ac70 <_printf_float+0x2c0>
 800ac6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac6e:	e792      	b.n	800ab96 <_printf_float+0x1e6>
 800ac70:	2301      	movs	r3, #1
 800ac72:	4652      	mov	r2, sl
 800ac74:	4631      	mov	r1, r6
 800ac76:	4628      	mov	r0, r5
 800ac78:	47b8      	blx	r7
 800ac7a:	3001      	adds	r0, #1
 800ac7c:	f43f aef7 	beq.w	800aa6e <_printf_float+0xbe>
 800ac80:	f109 0901 	add.w	r9, r9, #1
 800ac84:	e7ee      	b.n	800ac64 <_printf_float+0x2b4>
 800ac86:	bf00      	nop
 800ac88:	7fefffff 	.word	0x7fefffff
 800ac8c:	0800d871 	.word	0x0800d871
 800ac90:	0800d875 	.word	0x0800d875
 800ac94:	0800d879 	.word	0x0800d879
 800ac98:	0800d87d 	.word	0x0800d87d
 800ac9c:	0800d881 	.word	0x0800d881
 800aca0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aca2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aca4:	429a      	cmp	r2, r3
 800aca6:	bfa8      	it	ge
 800aca8:	461a      	movge	r2, r3
 800acaa:	2a00      	cmp	r2, #0
 800acac:	4691      	mov	r9, r2
 800acae:	dc37      	bgt.n	800ad20 <_printf_float+0x370>
 800acb0:	f04f 0b00 	mov.w	fp, #0
 800acb4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800acb8:	f104 021a 	add.w	r2, r4, #26
 800acbc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800acbe:	9305      	str	r3, [sp, #20]
 800acc0:	eba3 0309 	sub.w	r3, r3, r9
 800acc4:	455b      	cmp	r3, fp
 800acc6:	dc33      	bgt.n	800ad30 <_printf_float+0x380>
 800acc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800accc:	429a      	cmp	r2, r3
 800acce:	db3b      	blt.n	800ad48 <_printf_float+0x398>
 800acd0:	6823      	ldr	r3, [r4, #0]
 800acd2:	07da      	lsls	r2, r3, #31
 800acd4:	d438      	bmi.n	800ad48 <_printf_float+0x398>
 800acd6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800acda:	eba2 0903 	sub.w	r9, r2, r3
 800acde:	9b05      	ldr	r3, [sp, #20]
 800ace0:	1ad2      	subs	r2, r2, r3
 800ace2:	4591      	cmp	r9, r2
 800ace4:	bfa8      	it	ge
 800ace6:	4691      	movge	r9, r2
 800ace8:	f1b9 0f00 	cmp.w	r9, #0
 800acec:	dc35      	bgt.n	800ad5a <_printf_float+0x3aa>
 800acee:	f04f 0800 	mov.w	r8, #0
 800acf2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800acf6:	f104 0a1a 	add.w	sl, r4, #26
 800acfa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800acfe:	1a9b      	subs	r3, r3, r2
 800ad00:	eba3 0309 	sub.w	r3, r3, r9
 800ad04:	4543      	cmp	r3, r8
 800ad06:	f77f af79 	ble.w	800abfc <_printf_float+0x24c>
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	4652      	mov	r2, sl
 800ad0e:	4631      	mov	r1, r6
 800ad10:	4628      	mov	r0, r5
 800ad12:	47b8      	blx	r7
 800ad14:	3001      	adds	r0, #1
 800ad16:	f43f aeaa 	beq.w	800aa6e <_printf_float+0xbe>
 800ad1a:	f108 0801 	add.w	r8, r8, #1
 800ad1e:	e7ec      	b.n	800acfa <_printf_float+0x34a>
 800ad20:	4613      	mov	r3, r2
 800ad22:	4631      	mov	r1, r6
 800ad24:	4642      	mov	r2, r8
 800ad26:	4628      	mov	r0, r5
 800ad28:	47b8      	blx	r7
 800ad2a:	3001      	adds	r0, #1
 800ad2c:	d1c0      	bne.n	800acb0 <_printf_float+0x300>
 800ad2e:	e69e      	b.n	800aa6e <_printf_float+0xbe>
 800ad30:	2301      	movs	r3, #1
 800ad32:	4631      	mov	r1, r6
 800ad34:	4628      	mov	r0, r5
 800ad36:	9205      	str	r2, [sp, #20]
 800ad38:	47b8      	blx	r7
 800ad3a:	3001      	adds	r0, #1
 800ad3c:	f43f ae97 	beq.w	800aa6e <_printf_float+0xbe>
 800ad40:	9a05      	ldr	r2, [sp, #20]
 800ad42:	f10b 0b01 	add.w	fp, fp, #1
 800ad46:	e7b9      	b.n	800acbc <_printf_float+0x30c>
 800ad48:	ee18 3a10 	vmov	r3, s16
 800ad4c:	4652      	mov	r2, sl
 800ad4e:	4631      	mov	r1, r6
 800ad50:	4628      	mov	r0, r5
 800ad52:	47b8      	blx	r7
 800ad54:	3001      	adds	r0, #1
 800ad56:	d1be      	bne.n	800acd6 <_printf_float+0x326>
 800ad58:	e689      	b.n	800aa6e <_printf_float+0xbe>
 800ad5a:	9a05      	ldr	r2, [sp, #20]
 800ad5c:	464b      	mov	r3, r9
 800ad5e:	4442      	add	r2, r8
 800ad60:	4631      	mov	r1, r6
 800ad62:	4628      	mov	r0, r5
 800ad64:	47b8      	blx	r7
 800ad66:	3001      	adds	r0, #1
 800ad68:	d1c1      	bne.n	800acee <_printf_float+0x33e>
 800ad6a:	e680      	b.n	800aa6e <_printf_float+0xbe>
 800ad6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad6e:	2a01      	cmp	r2, #1
 800ad70:	dc01      	bgt.n	800ad76 <_printf_float+0x3c6>
 800ad72:	07db      	lsls	r3, r3, #31
 800ad74:	d53a      	bpl.n	800adec <_printf_float+0x43c>
 800ad76:	2301      	movs	r3, #1
 800ad78:	4642      	mov	r2, r8
 800ad7a:	4631      	mov	r1, r6
 800ad7c:	4628      	mov	r0, r5
 800ad7e:	47b8      	blx	r7
 800ad80:	3001      	adds	r0, #1
 800ad82:	f43f ae74 	beq.w	800aa6e <_printf_float+0xbe>
 800ad86:	ee18 3a10 	vmov	r3, s16
 800ad8a:	4652      	mov	r2, sl
 800ad8c:	4631      	mov	r1, r6
 800ad8e:	4628      	mov	r0, r5
 800ad90:	47b8      	blx	r7
 800ad92:	3001      	adds	r0, #1
 800ad94:	f43f ae6b 	beq.w	800aa6e <_printf_float+0xbe>
 800ad98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	2300      	movs	r3, #0
 800ada0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ada4:	f7f5 fec8 	bl	8000b38 <__aeabi_dcmpeq>
 800ada8:	b9d8      	cbnz	r0, 800ade2 <_printf_float+0x432>
 800adaa:	f10a 33ff 	add.w	r3, sl, #4294967295
 800adae:	f108 0201 	add.w	r2, r8, #1
 800adb2:	4631      	mov	r1, r6
 800adb4:	4628      	mov	r0, r5
 800adb6:	47b8      	blx	r7
 800adb8:	3001      	adds	r0, #1
 800adba:	d10e      	bne.n	800adda <_printf_float+0x42a>
 800adbc:	e657      	b.n	800aa6e <_printf_float+0xbe>
 800adbe:	2301      	movs	r3, #1
 800adc0:	4652      	mov	r2, sl
 800adc2:	4631      	mov	r1, r6
 800adc4:	4628      	mov	r0, r5
 800adc6:	47b8      	blx	r7
 800adc8:	3001      	adds	r0, #1
 800adca:	f43f ae50 	beq.w	800aa6e <_printf_float+0xbe>
 800adce:	f108 0801 	add.w	r8, r8, #1
 800add2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800add4:	3b01      	subs	r3, #1
 800add6:	4543      	cmp	r3, r8
 800add8:	dcf1      	bgt.n	800adbe <_printf_float+0x40e>
 800adda:	464b      	mov	r3, r9
 800addc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ade0:	e6da      	b.n	800ab98 <_printf_float+0x1e8>
 800ade2:	f04f 0800 	mov.w	r8, #0
 800ade6:	f104 0a1a 	add.w	sl, r4, #26
 800adea:	e7f2      	b.n	800add2 <_printf_float+0x422>
 800adec:	2301      	movs	r3, #1
 800adee:	4642      	mov	r2, r8
 800adf0:	e7df      	b.n	800adb2 <_printf_float+0x402>
 800adf2:	2301      	movs	r3, #1
 800adf4:	464a      	mov	r2, r9
 800adf6:	4631      	mov	r1, r6
 800adf8:	4628      	mov	r0, r5
 800adfa:	47b8      	blx	r7
 800adfc:	3001      	adds	r0, #1
 800adfe:	f43f ae36 	beq.w	800aa6e <_printf_float+0xbe>
 800ae02:	f108 0801 	add.w	r8, r8, #1
 800ae06:	68e3      	ldr	r3, [r4, #12]
 800ae08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae0a:	1a5b      	subs	r3, r3, r1
 800ae0c:	4543      	cmp	r3, r8
 800ae0e:	dcf0      	bgt.n	800adf2 <_printf_float+0x442>
 800ae10:	e6f8      	b.n	800ac04 <_printf_float+0x254>
 800ae12:	f04f 0800 	mov.w	r8, #0
 800ae16:	f104 0919 	add.w	r9, r4, #25
 800ae1a:	e7f4      	b.n	800ae06 <_printf_float+0x456>

0800ae1c <_printf_common>:
 800ae1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae20:	4616      	mov	r6, r2
 800ae22:	4699      	mov	r9, r3
 800ae24:	688a      	ldr	r2, [r1, #8]
 800ae26:	690b      	ldr	r3, [r1, #16]
 800ae28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	bfb8      	it	lt
 800ae30:	4613      	movlt	r3, r2
 800ae32:	6033      	str	r3, [r6, #0]
 800ae34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae38:	4607      	mov	r7, r0
 800ae3a:	460c      	mov	r4, r1
 800ae3c:	b10a      	cbz	r2, 800ae42 <_printf_common+0x26>
 800ae3e:	3301      	adds	r3, #1
 800ae40:	6033      	str	r3, [r6, #0]
 800ae42:	6823      	ldr	r3, [r4, #0]
 800ae44:	0699      	lsls	r1, r3, #26
 800ae46:	bf42      	ittt	mi
 800ae48:	6833      	ldrmi	r3, [r6, #0]
 800ae4a:	3302      	addmi	r3, #2
 800ae4c:	6033      	strmi	r3, [r6, #0]
 800ae4e:	6825      	ldr	r5, [r4, #0]
 800ae50:	f015 0506 	ands.w	r5, r5, #6
 800ae54:	d106      	bne.n	800ae64 <_printf_common+0x48>
 800ae56:	f104 0a19 	add.w	sl, r4, #25
 800ae5a:	68e3      	ldr	r3, [r4, #12]
 800ae5c:	6832      	ldr	r2, [r6, #0]
 800ae5e:	1a9b      	subs	r3, r3, r2
 800ae60:	42ab      	cmp	r3, r5
 800ae62:	dc26      	bgt.n	800aeb2 <_printf_common+0x96>
 800ae64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ae68:	1e13      	subs	r3, r2, #0
 800ae6a:	6822      	ldr	r2, [r4, #0]
 800ae6c:	bf18      	it	ne
 800ae6e:	2301      	movne	r3, #1
 800ae70:	0692      	lsls	r2, r2, #26
 800ae72:	d42b      	bmi.n	800aecc <_printf_common+0xb0>
 800ae74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae78:	4649      	mov	r1, r9
 800ae7a:	4638      	mov	r0, r7
 800ae7c:	47c0      	blx	r8
 800ae7e:	3001      	adds	r0, #1
 800ae80:	d01e      	beq.n	800aec0 <_printf_common+0xa4>
 800ae82:	6823      	ldr	r3, [r4, #0]
 800ae84:	6922      	ldr	r2, [r4, #16]
 800ae86:	f003 0306 	and.w	r3, r3, #6
 800ae8a:	2b04      	cmp	r3, #4
 800ae8c:	bf02      	ittt	eq
 800ae8e:	68e5      	ldreq	r5, [r4, #12]
 800ae90:	6833      	ldreq	r3, [r6, #0]
 800ae92:	1aed      	subeq	r5, r5, r3
 800ae94:	68a3      	ldr	r3, [r4, #8]
 800ae96:	bf0c      	ite	eq
 800ae98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae9c:	2500      	movne	r5, #0
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	bfc4      	itt	gt
 800aea2:	1a9b      	subgt	r3, r3, r2
 800aea4:	18ed      	addgt	r5, r5, r3
 800aea6:	2600      	movs	r6, #0
 800aea8:	341a      	adds	r4, #26
 800aeaa:	42b5      	cmp	r5, r6
 800aeac:	d11a      	bne.n	800aee4 <_printf_common+0xc8>
 800aeae:	2000      	movs	r0, #0
 800aeb0:	e008      	b.n	800aec4 <_printf_common+0xa8>
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	4652      	mov	r2, sl
 800aeb6:	4649      	mov	r1, r9
 800aeb8:	4638      	mov	r0, r7
 800aeba:	47c0      	blx	r8
 800aebc:	3001      	adds	r0, #1
 800aebe:	d103      	bne.n	800aec8 <_printf_common+0xac>
 800aec0:	f04f 30ff 	mov.w	r0, #4294967295
 800aec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aec8:	3501      	adds	r5, #1
 800aeca:	e7c6      	b.n	800ae5a <_printf_common+0x3e>
 800aecc:	18e1      	adds	r1, r4, r3
 800aece:	1c5a      	adds	r2, r3, #1
 800aed0:	2030      	movs	r0, #48	; 0x30
 800aed2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aed6:	4422      	add	r2, r4
 800aed8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aedc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aee0:	3302      	adds	r3, #2
 800aee2:	e7c7      	b.n	800ae74 <_printf_common+0x58>
 800aee4:	2301      	movs	r3, #1
 800aee6:	4622      	mov	r2, r4
 800aee8:	4649      	mov	r1, r9
 800aeea:	4638      	mov	r0, r7
 800aeec:	47c0      	blx	r8
 800aeee:	3001      	adds	r0, #1
 800aef0:	d0e6      	beq.n	800aec0 <_printf_common+0xa4>
 800aef2:	3601      	adds	r6, #1
 800aef4:	e7d9      	b.n	800aeaa <_printf_common+0x8e>
	...

0800aef8 <_printf_i>:
 800aef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aefc:	7e0f      	ldrb	r7, [r1, #24]
 800aefe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800af00:	2f78      	cmp	r7, #120	; 0x78
 800af02:	4691      	mov	r9, r2
 800af04:	4680      	mov	r8, r0
 800af06:	460c      	mov	r4, r1
 800af08:	469a      	mov	sl, r3
 800af0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800af0e:	d807      	bhi.n	800af20 <_printf_i+0x28>
 800af10:	2f62      	cmp	r7, #98	; 0x62
 800af12:	d80a      	bhi.n	800af2a <_printf_i+0x32>
 800af14:	2f00      	cmp	r7, #0
 800af16:	f000 80d4 	beq.w	800b0c2 <_printf_i+0x1ca>
 800af1a:	2f58      	cmp	r7, #88	; 0x58
 800af1c:	f000 80c0 	beq.w	800b0a0 <_printf_i+0x1a8>
 800af20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af28:	e03a      	b.n	800afa0 <_printf_i+0xa8>
 800af2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af2e:	2b15      	cmp	r3, #21
 800af30:	d8f6      	bhi.n	800af20 <_printf_i+0x28>
 800af32:	a101      	add	r1, pc, #4	; (adr r1, 800af38 <_printf_i+0x40>)
 800af34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af38:	0800af91 	.word	0x0800af91
 800af3c:	0800afa5 	.word	0x0800afa5
 800af40:	0800af21 	.word	0x0800af21
 800af44:	0800af21 	.word	0x0800af21
 800af48:	0800af21 	.word	0x0800af21
 800af4c:	0800af21 	.word	0x0800af21
 800af50:	0800afa5 	.word	0x0800afa5
 800af54:	0800af21 	.word	0x0800af21
 800af58:	0800af21 	.word	0x0800af21
 800af5c:	0800af21 	.word	0x0800af21
 800af60:	0800af21 	.word	0x0800af21
 800af64:	0800b0a9 	.word	0x0800b0a9
 800af68:	0800afd1 	.word	0x0800afd1
 800af6c:	0800b063 	.word	0x0800b063
 800af70:	0800af21 	.word	0x0800af21
 800af74:	0800af21 	.word	0x0800af21
 800af78:	0800b0cb 	.word	0x0800b0cb
 800af7c:	0800af21 	.word	0x0800af21
 800af80:	0800afd1 	.word	0x0800afd1
 800af84:	0800af21 	.word	0x0800af21
 800af88:	0800af21 	.word	0x0800af21
 800af8c:	0800b06b 	.word	0x0800b06b
 800af90:	682b      	ldr	r3, [r5, #0]
 800af92:	1d1a      	adds	r2, r3, #4
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	602a      	str	r2, [r5, #0]
 800af98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800afa0:	2301      	movs	r3, #1
 800afa2:	e09f      	b.n	800b0e4 <_printf_i+0x1ec>
 800afa4:	6820      	ldr	r0, [r4, #0]
 800afa6:	682b      	ldr	r3, [r5, #0]
 800afa8:	0607      	lsls	r7, r0, #24
 800afaa:	f103 0104 	add.w	r1, r3, #4
 800afae:	6029      	str	r1, [r5, #0]
 800afb0:	d501      	bpl.n	800afb6 <_printf_i+0xbe>
 800afb2:	681e      	ldr	r6, [r3, #0]
 800afb4:	e003      	b.n	800afbe <_printf_i+0xc6>
 800afb6:	0646      	lsls	r6, r0, #25
 800afb8:	d5fb      	bpl.n	800afb2 <_printf_i+0xba>
 800afba:	f9b3 6000 	ldrsh.w	r6, [r3]
 800afbe:	2e00      	cmp	r6, #0
 800afc0:	da03      	bge.n	800afca <_printf_i+0xd2>
 800afc2:	232d      	movs	r3, #45	; 0x2d
 800afc4:	4276      	negs	r6, r6
 800afc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afca:	485a      	ldr	r0, [pc, #360]	; (800b134 <_printf_i+0x23c>)
 800afcc:	230a      	movs	r3, #10
 800afce:	e012      	b.n	800aff6 <_printf_i+0xfe>
 800afd0:	682b      	ldr	r3, [r5, #0]
 800afd2:	6820      	ldr	r0, [r4, #0]
 800afd4:	1d19      	adds	r1, r3, #4
 800afd6:	6029      	str	r1, [r5, #0]
 800afd8:	0605      	lsls	r5, r0, #24
 800afda:	d501      	bpl.n	800afe0 <_printf_i+0xe8>
 800afdc:	681e      	ldr	r6, [r3, #0]
 800afde:	e002      	b.n	800afe6 <_printf_i+0xee>
 800afe0:	0641      	lsls	r1, r0, #25
 800afe2:	d5fb      	bpl.n	800afdc <_printf_i+0xe4>
 800afe4:	881e      	ldrh	r6, [r3, #0]
 800afe6:	4853      	ldr	r0, [pc, #332]	; (800b134 <_printf_i+0x23c>)
 800afe8:	2f6f      	cmp	r7, #111	; 0x6f
 800afea:	bf0c      	ite	eq
 800afec:	2308      	moveq	r3, #8
 800afee:	230a      	movne	r3, #10
 800aff0:	2100      	movs	r1, #0
 800aff2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aff6:	6865      	ldr	r5, [r4, #4]
 800aff8:	60a5      	str	r5, [r4, #8]
 800affa:	2d00      	cmp	r5, #0
 800affc:	bfa2      	ittt	ge
 800affe:	6821      	ldrge	r1, [r4, #0]
 800b000:	f021 0104 	bicge.w	r1, r1, #4
 800b004:	6021      	strge	r1, [r4, #0]
 800b006:	b90e      	cbnz	r6, 800b00c <_printf_i+0x114>
 800b008:	2d00      	cmp	r5, #0
 800b00a:	d04b      	beq.n	800b0a4 <_printf_i+0x1ac>
 800b00c:	4615      	mov	r5, r2
 800b00e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b012:	fb03 6711 	mls	r7, r3, r1, r6
 800b016:	5dc7      	ldrb	r7, [r0, r7]
 800b018:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b01c:	4637      	mov	r7, r6
 800b01e:	42bb      	cmp	r3, r7
 800b020:	460e      	mov	r6, r1
 800b022:	d9f4      	bls.n	800b00e <_printf_i+0x116>
 800b024:	2b08      	cmp	r3, #8
 800b026:	d10b      	bne.n	800b040 <_printf_i+0x148>
 800b028:	6823      	ldr	r3, [r4, #0]
 800b02a:	07de      	lsls	r6, r3, #31
 800b02c:	d508      	bpl.n	800b040 <_printf_i+0x148>
 800b02e:	6923      	ldr	r3, [r4, #16]
 800b030:	6861      	ldr	r1, [r4, #4]
 800b032:	4299      	cmp	r1, r3
 800b034:	bfde      	ittt	le
 800b036:	2330      	movle	r3, #48	; 0x30
 800b038:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b03c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b040:	1b52      	subs	r2, r2, r5
 800b042:	6122      	str	r2, [r4, #16]
 800b044:	f8cd a000 	str.w	sl, [sp]
 800b048:	464b      	mov	r3, r9
 800b04a:	aa03      	add	r2, sp, #12
 800b04c:	4621      	mov	r1, r4
 800b04e:	4640      	mov	r0, r8
 800b050:	f7ff fee4 	bl	800ae1c <_printf_common>
 800b054:	3001      	adds	r0, #1
 800b056:	d14a      	bne.n	800b0ee <_printf_i+0x1f6>
 800b058:	f04f 30ff 	mov.w	r0, #4294967295
 800b05c:	b004      	add	sp, #16
 800b05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b062:	6823      	ldr	r3, [r4, #0]
 800b064:	f043 0320 	orr.w	r3, r3, #32
 800b068:	6023      	str	r3, [r4, #0]
 800b06a:	4833      	ldr	r0, [pc, #204]	; (800b138 <_printf_i+0x240>)
 800b06c:	2778      	movs	r7, #120	; 0x78
 800b06e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b072:	6823      	ldr	r3, [r4, #0]
 800b074:	6829      	ldr	r1, [r5, #0]
 800b076:	061f      	lsls	r7, r3, #24
 800b078:	f851 6b04 	ldr.w	r6, [r1], #4
 800b07c:	d402      	bmi.n	800b084 <_printf_i+0x18c>
 800b07e:	065f      	lsls	r7, r3, #25
 800b080:	bf48      	it	mi
 800b082:	b2b6      	uxthmi	r6, r6
 800b084:	07df      	lsls	r7, r3, #31
 800b086:	bf48      	it	mi
 800b088:	f043 0320 	orrmi.w	r3, r3, #32
 800b08c:	6029      	str	r1, [r5, #0]
 800b08e:	bf48      	it	mi
 800b090:	6023      	strmi	r3, [r4, #0]
 800b092:	b91e      	cbnz	r6, 800b09c <_printf_i+0x1a4>
 800b094:	6823      	ldr	r3, [r4, #0]
 800b096:	f023 0320 	bic.w	r3, r3, #32
 800b09a:	6023      	str	r3, [r4, #0]
 800b09c:	2310      	movs	r3, #16
 800b09e:	e7a7      	b.n	800aff0 <_printf_i+0xf8>
 800b0a0:	4824      	ldr	r0, [pc, #144]	; (800b134 <_printf_i+0x23c>)
 800b0a2:	e7e4      	b.n	800b06e <_printf_i+0x176>
 800b0a4:	4615      	mov	r5, r2
 800b0a6:	e7bd      	b.n	800b024 <_printf_i+0x12c>
 800b0a8:	682b      	ldr	r3, [r5, #0]
 800b0aa:	6826      	ldr	r6, [r4, #0]
 800b0ac:	6961      	ldr	r1, [r4, #20]
 800b0ae:	1d18      	adds	r0, r3, #4
 800b0b0:	6028      	str	r0, [r5, #0]
 800b0b2:	0635      	lsls	r5, r6, #24
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	d501      	bpl.n	800b0bc <_printf_i+0x1c4>
 800b0b8:	6019      	str	r1, [r3, #0]
 800b0ba:	e002      	b.n	800b0c2 <_printf_i+0x1ca>
 800b0bc:	0670      	lsls	r0, r6, #25
 800b0be:	d5fb      	bpl.n	800b0b8 <_printf_i+0x1c0>
 800b0c0:	8019      	strh	r1, [r3, #0]
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	6123      	str	r3, [r4, #16]
 800b0c6:	4615      	mov	r5, r2
 800b0c8:	e7bc      	b.n	800b044 <_printf_i+0x14c>
 800b0ca:	682b      	ldr	r3, [r5, #0]
 800b0cc:	1d1a      	adds	r2, r3, #4
 800b0ce:	602a      	str	r2, [r5, #0]
 800b0d0:	681d      	ldr	r5, [r3, #0]
 800b0d2:	6862      	ldr	r2, [r4, #4]
 800b0d4:	2100      	movs	r1, #0
 800b0d6:	4628      	mov	r0, r5
 800b0d8:	f7f5 f8b2 	bl	8000240 <memchr>
 800b0dc:	b108      	cbz	r0, 800b0e2 <_printf_i+0x1ea>
 800b0de:	1b40      	subs	r0, r0, r5
 800b0e0:	6060      	str	r0, [r4, #4]
 800b0e2:	6863      	ldr	r3, [r4, #4]
 800b0e4:	6123      	str	r3, [r4, #16]
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0ec:	e7aa      	b.n	800b044 <_printf_i+0x14c>
 800b0ee:	6923      	ldr	r3, [r4, #16]
 800b0f0:	462a      	mov	r2, r5
 800b0f2:	4649      	mov	r1, r9
 800b0f4:	4640      	mov	r0, r8
 800b0f6:	47d0      	blx	sl
 800b0f8:	3001      	adds	r0, #1
 800b0fa:	d0ad      	beq.n	800b058 <_printf_i+0x160>
 800b0fc:	6823      	ldr	r3, [r4, #0]
 800b0fe:	079b      	lsls	r3, r3, #30
 800b100:	d413      	bmi.n	800b12a <_printf_i+0x232>
 800b102:	68e0      	ldr	r0, [r4, #12]
 800b104:	9b03      	ldr	r3, [sp, #12]
 800b106:	4298      	cmp	r0, r3
 800b108:	bfb8      	it	lt
 800b10a:	4618      	movlt	r0, r3
 800b10c:	e7a6      	b.n	800b05c <_printf_i+0x164>
 800b10e:	2301      	movs	r3, #1
 800b110:	4632      	mov	r2, r6
 800b112:	4649      	mov	r1, r9
 800b114:	4640      	mov	r0, r8
 800b116:	47d0      	blx	sl
 800b118:	3001      	adds	r0, #1
 800b11a:	d09d      	beq.n	800b058 <_printf_i+0x160>
 800b11c:	3501      	adds	r5, #1
 800b11e:	68e3      	ldr	r3, [r4, #12]
 800b120:	9903      	ldr	r1, [sp, #12]
 800b122:	1a5b      	subs	r3, r3, r1
 800b124:	42ab      	cmp	r3, r5
 800b126:	dcf2      	bgt.n	800b10e <_printf_i+0x216>
 800b128:	e7eb      	b.n	800b102 <_printf_i+0x20a>
 800b12a:	2500      	movs	r5, #0
 800b12c:	f104 0619 	add.w	r6, r4, #25
 800b130:	e7f5      	b.n	800b11e <_printf_i+0x226>
 800b132:	bf00      	nop
 800b134:	0800d883 	.word	0x0800d883
 800b138:	0800d894 	.word	0x0800d894

0800b13c <std>:
 800b13c:	2300      	movs	r3, #0
 800b13e:	b510      	push	{r4, lr}
 800b140:	4604      	mov	r4, r0
 800b142:	e9c0 3300 	strd	r3, r3, [r0]
 800b146:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b14a:	6083      	str	r3, [r0, #8]
 800b14c:	8181      	strh	r1, [r0, #12]
 800b14e:	6643      	str	r3, [r0, #100]	; 0x64
 800b150:	81c2      	strh	r2, [r0, #14]
 800b152:	6183      	str	r3, [r0, #24]
 800b154:	4619      	mov	r1, r3
 800b156:	2208      	movs	r2, #8
 800b158:	305c      	adds	r0, #92	; 0x5c
 800b15a:	f000 f936 	bl	800b3ca <memset>
 800b15e:	4b05      	ldr	r3, [pc, #20]	; (800b174 <std+0x38>)
 800b160:	6263      	str	r3, [r4, #36]	; 0x24
 800b162:	4b05      	ldr	r3, [pc, #20]	; (800b178 <std+0x3c>)
 800b164:	62a3      	str	r3, [r4, #40]	; 0x28
 800b166:	4b05      	ldr	r3, [pc, #20]	; (800b17c <std+0x40>)
 800b168:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b16a:	4b05      	ldr	r3, [pc, #20]	; (800b180 <std+0x44>)
 800b16c:	6224      	str	r4, [r4, #32]
 800b16e:	6323      	str	r3, [r4, #48]	; 0x30
 800b170:	bd10      	pop	{r4, pc}
 800b172:	bf00      	nop
 800b174:	0800b345 	.word	0x0800b345
 800b178:	0800b367 	.word	0x0800b367
 800b17c:	0800b39f 	.word	0x0800b39f
 800b180:	0800b3c3 	.word	0x0800b3c3

0800b184 <stdio_exit_handler>:
 800b184:	4a02      	ldr	r2, [pc, #8]	; (800b190 <stdio_exit_handler+0xc>)
 800b186:	4903      	ldr	r1, [pc, #12]	; (800b194 <stdio_exit_handler+0x10>)
 800b188:	4803      	ldr	r0, [pc, #12]	; (800b198 <stdio_exit_handler+0x14>)
 800b18a:	f000 b869 	b.w	800b260 <_fwalk_sglue>
 800b18e:	bf00      	nop
 800b190:	200000c8 	.word	0x200000c8
 800b194:	0800cf69 	.word	0x0800cf69
 800b198:	200000d4 	.word	0x200000d4

0800b19c <cleanup_stdio>:
 800b19c:	6841      	ldr	r1, [r0, #4]
 800b19e:	4b0c      	ldr	r3, [pc, #48]	; (800b1d0 <cleanup_stdio+0x34>)
 800b1a0:	4299      	cmp	r1, r3
 800b1a2:	b510      	push	{r4, lr}
 800b1a4:	4604      	mov	r4, r0
 800b1a6:	d001      	beq.n	800b1ac <cleanup_stdio+0x10>
 800b1a8:	f001 fede 	bl	800cf68 <_fflush_r>
 800b1ac:	68a1      	ldr	r1, [r4, #8]
 800b1ae:	4b09      	ldr	r3, [pc, #36]	; (800b1d4 <cleanup_stdio+0x38>)
 800b1b0:	4299      	cmp	r1, r3
 800b1b2:	d002      	beq.n	800b1ba <cleanup_stdio+0x1e>
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	f001 fed7 	bl	800cf68 <_fflush_r>
 800b1ba:	68e1      	ldr	r1, [r4, #12]
 800b1bc:	4b06      	ldr	r3, [pc, #24]	; (800b1d8 <cleanup_stdio+0x3c>)
 800b1be:	4299      	cmp	r1, r3
 800b1c0:	d004      	beq.n	800b1cc <cleanup_stdio+0x30>
 800b1c2:	4620      	mov	r0, r4
 800b1c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1c8:	f001 bece 	b.w	800cf68 <_fflush_r>
 800b1cc:	bd10      	pop	{r4, pc}
 800b1ce:	bf00      	nop
 800b1d0:	20000814 	.word	0x20000814
 800b1d4:	2000087c 	.word	0x2000087c
 800b1d8:	200008e4 	.word	0x200008e4

0800b1dc <global_stdio_init.part.0>:
 800b1dc:	b510      	push	{r4, lr}
 800b1de:	4b0b      	ldr	r3, [pc, #44]	; (800b20c <global_stdio_init.part.0+0x30>)
 800b1e0:	4c0b      	ldr	r4, [pc, #44]	; (800b210 <global_stdio_init.part.0+0x34>)
 800b1e2:	4a0c      	ldr	r2, [pc, #48]	; (800b214 <global_stdio_init.part.0+0x38>)
 800b1e4:	601a      	str	r2, [r3, #0]
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	2104      	movs	r1, #4
 800b1ec:	f7ff ffa6 	bl	800b13c <std>
 800b1f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	2109      	movs	r1, #9
 800b1f8:	f7ff ffa0 	bl	800b13c <std>
 800b1fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b200:	2202      	movs	r2, #2
 800b202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b206:	2112      	movs	r1, #18
 800b208:	f7ff bf98 	b.w	800b13c <std>
 800b20c:	2000094c 	.word	0x2000094c
 800b210:	20000814 	.word	0x20000814
 800b214:	0800b185 	.word	0x0800b185

0800b218 <__sfp_lock_acquire>:
 800b218:	4801      	ldr	r0, [pc, #4]	; (800b220 <__sfp_lock_acquire+0x8>)
 800b21a:	f000 b9af 	b.w	800b57c <__retarget_lock_acquire_recursive>
 800b21e:	bf00      	nop
 800b220:	20000955 	.word	0x20000955

0800b224 <__sfp_lock_release>:
 800b224:	4801      	ldr	r0, [pc, #4]	; (800b22c <__sfp_lock_release+0x8>)
 800b226:	f000 b9aa 	b.w	800b57e <__retarget_lock_release_recursive>
 800b22a:	bf00      	nop
 800b22c:	20000955 	.word	0x20000955

0800b230 <__sinit>:
 800b230:	b510      	push	{r4, lr}
 800b232:	4604      	mov	r4, r0
 800b234:	f7ff fff0 	bl	800b218 <__sfp_lock_acquire>
 800b238:	6a23      	ldr	r3, [r4, #32]
 800b23a:	b11b      	cbz	r3, 800b244 <__sinit+0x14>
 800b23c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b240:	f7ff bff0 	b.w	800b224 <__sfp_lock_release>
 800b244:	4b04      	ldr	r3, [pc, #16]	; (800b258 <__sinit+0x28>)
 800b246:	6223      	str	r3, [r4, #32]
 800b248:	4b04      	ldr	r3, [pc, #16]	; (800b25c <__sinit+0x2c>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d1f5      	bne.n	800b23c <__sinit+0xc>
 800b250:	f7ff ffc4 	bl	800b1dc <global_stdio_init.part.0>
 800b254:	e7f2      	b.n	800b23c <__sinit+0xc>
 800b256:	bf00      	nop
 800b258:	0800b19d 	.word	0x0800b19d
 800b25c:	2000094c 	.word	0x2000094c

0800b260 <_fwalk_sglue>:
 800b260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b264:	4607      	mov	r7, r0
 800b266:	4688      	mov	r8, r1
 800b268:	4614      	mov	r4, r2
 800b26a:	2600      	movs	r6, #0
 800b26c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b270:	f1b9 0901 	subs.w	r9, r9, #1
 800b274:	d505      	bpl.n	800b282 <_fwalk_sglue+0x22>
 800b276:	6824      	ldr	r4, [r4, #0]
 800b278:	2c00      	cmp	r4, #0
 800b27a:	d1f7      	bne.n	800b26c <_fwalk_sglue+0xc>
 800b27c:	4630      	mov	r0, r6
 800b27e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b282:	89ab      	ldrh	r3, [r5, #12]
 800b284:	2b01      	cmp	r3, #1
 800b286:	d907      	bls.n	800b298 <_fwalk_sglue+0x38>
 800b288:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b28c:	3301      	adds	r3, #1
 800b28e:	d003      	beq.n	800b298 <_fwalk_sglue+0x38>
 800b290:	4629      	mov	r1, r5
 800b292:	4638      	mov	r0, r7
 800b294:	47c0      	blx	r8
 800b296:	4306      	orrs	r6, r0
 800b298:	3568      	adds	r5, #104	; 0x68
 800b29a:	e7e9      	b.n	800b270 <_fwalk_sglue+0x10>

0800b29c <sniprintf>:
 800b29c:	b40c      	push	{r2, r3}
 800b29e:	b530      	push	{r4, r5, lr}
 800b2a0:	4b17      	ldr	r3, [pc, #92]	; (800b300 <sniprintf+0x64>)
 800b2a2:	1e0c      	subs	r4, r1, #0
 800b2a4:	681d      	ldr	r5, [r3, #0]
 800b2a6:	b09d      	sub	sp, #116	; 0x74
 800b2a8:	da08      	bge.n	800b2bc <sniprintf+0x20>
 800b2aa:	238b      	movs	r3, #139	; 0x8b
 800b2ac:	602b      	str	r3, [r5, #0]
 800b2ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b2b2:	b01d      	add	sp, #116	; 0x74
 800b2b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2b8:	b002      	add	sp, #8
 800b2ba:	4770      	bx	lr
 800b2bc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b2c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b2c4:	bf14      	ite	ne
 800b2c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b2ca:	4623      	moveq	r3, r4
 800b2cc:	9304      	str	r3, [sp, #16]
 800b2ce:	9307      	str	r3, [sp, #28]
 800b2d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b2d4:	9002      	str	r0, [sp, #8]
 800b2d6:	9006      	str	r0, [sp, #24]
 800b2d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b2dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b2de:	ab21      	add	r3, sp, #132	; 0x84
 800b2e0:	a902      	add	r1, sp, #8
 800b2e2:	4628      	mov	r0, r5
 800b2e4:	9301      	str	r3, [sp, #4]
 800b2e6:	f001 fcbb 	bl	800cc60 <_svfiprintf_r>
 800b2ea:	1c43      	adds	r3, r0, #1
 800b2ec:	bfbc      	itt	lt
 800b2ee:	238b      	movlt	r3, #139	; 0x8b
 800b2f0:	602b      	strlt	r3, [r5, #0]
 800b2f2:	2c00      	cmp	r4, #0
 800b2f4:	d0dd      	beq.n	800b2b2 <sniprintf+0x16>
 800b2f6:	9b02      	ldr	r3, [sp, #8]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	701a      	strb	r2, [r3, #0]
 800b2fc:	e7d9      	b.n	800b2b2 <sniprintf+0x16>
 800b2fe:	bf00      	nop
 800b300:	20000120 	.word	0x20000120

0800b304 <siprintf>:
 800b304:	b40e      	push	{r1, r2, r3}
 800b306:	b500      	push	{lr}
 800b308:	b09c      	sub	sp, #112	; 0x70
 800b30a:	ab1d      	add	r3, sp, #116	; 0x74
 800b30c:	9002      	str	r0, [sp, #8]
 800b30e:	9006      	str	r0, [sp, #24]
 800b310:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b314:	4809      	ldr	r0, [pc, #36]	; (800b33c <siprintf+0x38>)
 800b316:	9107      	str	r1, [sp, #28]
 800b318:	9104      	str	r1, [sp, #16]
 800b31a:	4909      	ldr	r1, [pc, #36]	; (800b340 <siprintf+0x3c>)
 800b31c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b320:	9105      	str	r1, [sp, #20]
 800b322:	6800      	ldr	r0, [r0, #0]
 800b324:	9301      	str	r3, [sp, #4]
 800b326:	a902      	add	r1, sp, #8
 800b328:	f001 fc9a 	bl	800cc60 <_svfiprintf_r>
 800b32c:	9b02      	ldr	r3, [sp, #8]
 800b32e:	2200      	movs	r2, #0
 800b330:	701a      	strb	r2, [r3, #0]
 800b332:	b01c      	add	sp, #112	; 0x70
 800b334:	f85d eb04 	ldr.w	lr, [sp], #4
 800b338:	b003      	add	sp, #12
 800b33a:	4770      	bx	lr
 800b33c:	20000120 	.word	0x20000120
 800b340:	ffff0208 	.word	0xffff0208

0800b344 <__sread>:
 800b344:	b510      	push	{r4, lr}
 800b346:	460c      	mov	r4, r1
 800b348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b34c:	f000 f8c8 	bl	800b4e0 <_read_r>
 800b350:	2800      	cmp	r0, #0
 800b352:	bfab      	itete	ge
 800b354:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b356:	89a3      	ldrhlt	r3, [r4, #12]
 800b358:	181b      	addge	r3, r3, r0
 800b35a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b35e:	bfac      	ite	ge
 800b360:	6563      	strge	r3, [r4, #84]	; 0x54
 800b362:	81a3      	strhlt	r3, [r4, #12]
 800b364:	bd10      	pop	{r4, pc}

0800b366 <__swrite>:
 800b366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b36a:	461f      	mov	r7, r3
 800b36c:	898b      	ldrh	r3, [r1, #12]
 800b36e:	05db      	lsls	r3, r3, #23
 800b370:	4605      	mov	r5, r0
 800b372:	460c      	mov	r4, r1
 800b374:	4616      	mov	r6, r2
 800b376:	d505      	bpl.n	800b384 <__swrite+0x1e>
 800b378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b37c:	2302      	movs	r3, #2
 800b37e:	2200      	movs	r2, #0
 800b380:	f000 f89c 	bl	800b4bc <_lseek_r>
 800b384:	89a3      	ldrh	r3, [r4, #12]
 800b386:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b38a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b38e:	81a3      	strh	r3, [r4, #12]
 800b390:	4632      	mov	r2, r6
 800b392:	463b      	mov	r3, r7
 800b394:	4628      	mov	r0, r5
 800b396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b39a:	f000 b8b3 	b.w	800b504 <_write_r>

0800b39e <__sseek>:
 800b39e:	b510      	push	{r4, lr}
 800b3a0:	460c      	mov	r4, r1
 800b3a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3a6:	f000 f889 	bl	800b4bc <_lseek_r>
 800b3aa:	1c43      	adds	r3, r0, #1
 800b3ac:	89a3      	ldrh	r3, [r4, #12]
 800b3ae:	bf15      	itete	ne
 800b3b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b3b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b3b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b3ba:	81a3      	strheq	r3, [r4, #12]
 800b3bc:	bf18      	it	ne
 800b3be:	81a3      	strhne	r3, [r4, #12]
 800b3c0:	bd10      	pop	{r4, pc}

0800b3c2 <__sclose>:
 800b3c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3c6:	f000 b869 	b.w	800b49c <_close_r>

0800b3ca <memset>:
 800b3ca:	4402      	add	r2, r0
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d100      	bne.n	800b3d4 <memset+0xa>
 800b3d2:	4770      	bx	lr
 800b3d4:	f803 1b01 	strb.w	r1, [r3], #1
 800b3d8:	e7f9      	b.n	800b3ce <memset+0x4>
	...

0800b3dc <strtok>:
 800b3dc:	4b16      	ldr	r3, [pc, #88]	; (800b438 <strtok+0x5c>)
 800b3de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3e0:	681e      	ldr	r6, [r3, #0]
 800b3e2:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800b3e4:	4605      	mov	r5, r0
 800b3e6:	b9fc      	cbnz	r4, 800b428 <strtok+0x4c>
 800b3e8:	2050      	movs	r0, #80	; 0x50
 800b3ea:	9101      	str	r1, [sp, #4]
 800b3ec:	f000 ffae 	bl	800c34c <malloc>
 800b3f0:	9901      	ldr	r1, [sp, #4]
 800b3f2:	6470      	str	r0, [r6, #68]	; 0x44
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	b920      	cbnz	r0, 800b402 <strtok+0x26>
 800b3f8:	4b10      	ldr	r3, [pc, #64]	; (800b43c <strtok+0x60>)
 800b3fa:	4811      	ldr	r0, [pc, #68]	; (800b440 <strtok+0x64>)
 800b3fc:	215b      	movs	r1, #91	; 0x5b
 800b3fe:	f000 f8bf 	bl	800b580 <__assert_func>
 800b402:	e9c0 4400 	strd	r4, r4, [r0]
 800b406:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b40a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b40e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b412:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b416:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b41a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b41e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b422:	6184      	str	r4, [r0, #24]
 800b424:	7704      	strb	r4, [r0, #28]
 800b426:	6244      	str	r4, [r0, #36]	; 0x24
 800b428:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800b42a:	2301      	movs	r3, #1
 800b42c:	4628      	mov	r0, r5
 800b42e:	b002      	add	sp, #8
 800b430:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b434:	f000 b806 	b.w	800b444 <__strtok_r>
 800b438:	20000120 	.word	0x20000120
 800b43c:	0800d8a5 	.word	0x0800d8a5
 800b440:	0800d8bc 	.word	0x0800d8bc

0800b444 <__strtok_r>:
 800b444:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b446:	b908      	cbnz	r0, 800b44c <__strtok_r+0x8>
 800b448:	6810      	ldr	r0, [r2, #0]
 800b44a:	b188      	cbz	r0, 800b470 <__strtok_r+0x2c>
 800b44c:	4604      	mov	r4, r0
 800b44e:	4620      	mov	r0, r4
 800b450:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b454:	460f      	mov	r7, r1
 800b456:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b45a:	b91e      	cbnz	r6, 800b464 <__strtok_r+0x20>
 800b45c:	b965      	cbnz	r5, 800b478 <__strtok_r+0x34>
 800b45e:	6015      	str	r5, [r2, #0]
 800b460:	4628      	mov	r0, r5
 800b462:	e005      	b.n	800b470 <__strtok_r+0x2c>
 800b464:	42b5      	cmp	r5, r6
 800b466:	d1f6      	bne.n	800b456 <__strtok_r+0x12>
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d1f0      	bne.n	800b44e <__strtok_r+0xa>
 800b46c:	6014      	str	r4, [r2, #0]
 800b46e:	7003      	strb	r3, [r0, #0]
 800b470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b472:	461c      	mov	r4, r3
 800b474:	e00c      	b.n	800b490 <__strtok_r+0x4c>
 800b476:	b915      	cbnz	r5, 800b47e <__strtok_r+0x3a>
 800b478:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b47c:	460e      	mov	r6, r1
 800b47e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b482:	42ab      	cmp	r3, r5
 800b484:	d1f7      	bne.n	800b476 <__strtok_r+0x32>
 800b486:	2b00      	cmp	r3, #0
 800b488:	d0f3      	beq.n	800b472 <__strtok_r+0x2e>
 800b48a:	2300      	movs	r3, #0
 800b48c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b490:	6014      	str	r4, [r2, #0]
 800b492:	e7ed      	b.n	800b470 <__strtok_r+0x2c>

0800b494 <_localeconv_r>:
 800b494:	4800      	ldr	r0, [pc, #0]	; (800b498 <_localeconv_r+0x4>)
 800b496:	4770      	bx	lr
 800b498:	20000214 	.word	0x20000214

0800b49c <_close_r>:
 800b49c:	b538      	push	{r3, r4, r5, lr}
 800b49e:	4d06      	ldr	r5, [pc, #24]	; (800b4b8 <_close_r+0x1c>)
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	4604      	mov	r4, r0
 800b4a4:	4608      	mov	r0, r1
 800b4a6:	602b      	str	r3, [r5, #0]
 800b4a8:	f7f6 faab 	bl	8001a02 <_close>
 800b4ac:	1c43      	adds	r3, r0, #1
 800b4ae:	d102      	bne.n	800b4b6 <_close_r+0x1a>
 800b4b0:	682b      	ldr	r3, [r5, #0]
 800b4b2:	b103      	cbz	r3, 800b4b6 <_close_r+0x1a>
 800b4b4:	6023      	str	r3, [r4, #0]
 800b4b6:	bd38      	pop	{r3, r4, r5, pc}
 800b4b8:	20000950 	.word	0x20000950

0800b4bc <_lseek_r>:
 800b4bc:	b538      	push	{r3, r4, r5, lr}
 800b4be:	4d07      	ldr	r5, [pc, #28]	; (800b4dc <_lseek_r+0x20>)
 800b4c0:	4604      	mov	r4, r0
 800b4c2:	4608      	mov	r0, r1
 800b4c4:	4611      	mov	r1, r2
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	602a      	str	r2, [r5, #0]
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	f7f6 fac0 	bl	8001a50 <_lseek>
 800b4d0:	1c43      	adds	r3, r0, #1
 800b4d2:	d102      	bne.n	800b4da <_lseek_r+0x1e>
 800b4d4:	682b      	ldr	r3, [r5, #0]
 800b4d6:	b103      	cbz	r3, 800b4da <_lseek_r+0x1e>
 800b4d8:	6023      	str	r3, [r4, #0]
 800b4da:	bd38      	pop	{r3, r4, r5, pc}
 800b4dc:	20000950 	.word	0x20000950

0800b4e0 <_read_r>:
 800b4e0:	b538      	push	{r3, r4, r5, lr}
 800b4e2:	4d07      	ldr	r5, [pc, #28]	; (800b500 <_read_r+0x20>)
 800b4e4:	4604      	mov	r4, r0
 800b4e6:	4608      	mov	r0, r1
 800b4e8:	4611      	mov	r1, r2
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	602a      	str	r2, [r5, #0]
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	f7f6 fa4e 	bl	8001990 <_read>
 800b4f4:	1c43      	adds	r3, r0, #1
 800b4f6:	d102      	bne.n	800b4fe <_read_r+0x1e>
 800b4f8:	682b      	ldr	r3, [r5, #0]
 800b4fa:	b103      	cbz	r3, 800b4fe <_read_r+0x1e>
 800b4fc:	6023      	str	r3, [r4, #0]
 800b4fe:	bd38      	pop	{r3, r4, r5, pc}
 800b500:	20000950 	.word	0x20000950

0800b504 <_write_r>:
 800b504:	b538      	push	{r3, r4, r5, lr}
 800b506:	4d07      	ldr	r5, [pc, #28]	; (800b524 <_write_r+0x20>)
 800b508:	4604      	mov	r4, r0
 800b50a:	4608      	mov	r0, r1
 800b50c:	4611      	mov	r1, r2
 800b50e:	2200      	movs	r2, #0
 800b510:	602a      	str	r2, [r5, #0]
 800b512:	461a      	mov	r2, r3
 800b514:	f7f6 fa59 	bl	80019ca <_write>
 800b518:	1c43      	adds	r3, r0, #1
 800b51a:	d102      	bne.n	800b522 <_write_r+0x1e>
 800b51c:	682b      	ldr	r3, [r5, #0]
 800b51e:	b103      	cbz	r3, 800b522 <_write_r+0x1e>
 800b520:	6023      	str	r3, [r4, #0]
 800b522:	bd38      	pop	{r3, r4, r5, pc}
 800b524:	20000950 	.word	0x20000950

0800b528 <__errno>:
 800b528:	4b01      	ldr	r3, [pc, #4]	; (800b530 <__errno+0x8>)
 800b52a:	6818      	ldr	r0, [r3, #0]
 800b52c:	4770      	bx	lr
 800b52e:	bf00      	nop
 800b530:	20000120 	.word	0x20000120

0800b534 <__libc_init_array>:
 800b534:	b570      	push	{r4, r5, r6, lr}
 800b536:	4d0d      	ldr	r5, [pc, #52]	; (800b56c <__libc_init_array+0x38>)
 800b538:	4c0d      	ldr	r4, [pc, #52]	; (800b570 <__libc_init_array+0x3c>)
 800b53a:	1b64      	subs	r4, r4, r5
 800b53c:	10a4      	asrs	r4, r4, #2
 800b53e:	2600      	movs	r6, #0
 800b540:	42a6      	cmp	r6, r4
 800b542:	d109      	bne.n	800b558 <__libc_init_array+0x24>
 800b544:	4d0b      	ldr	r5, [pc, #44]	; (800b574 <__libc_init_array+0x40>)
 800b546:	4c0c      	ldr	r4, [pc, #48]	; (800b578 <__libc_init_array+0x44>)
 800b548:	f002 f894 	bl	800d674 <_init>
 800b54c:	1b64      	subs	r4, r4, r5
 800b54e:	10a4      	asrs	r4, r4, #2
 800b550:	2600      	movs	r6, #0
 800b552:	42a6      	cmp	r6, r4
 800b554:	d105      	bne.n	800b562 <__libc_init_array+0x2e>
 800b556:	bd70      	pop	{r4, r5, r6, pc}
 800b558:	f855 3b04 	ldr.w	r3, [r5], #4
 800b55c:	4798      	blx	r3
 800b55e:	3601      	adds	r6, #1
 800b560:	e7ee      	b.n	800b540 <__libc_init_array+0xc>
 800b562:	f855 3b04 	ldr.w	r3, [r5], #4
 800b566:	4798      	blx	r3
 800b568:	3601      	adds	r6, #1
 800b56a:	e7f2      	b.n	800b552 <__libc_init_array+0x1e>
 800b56c:	0800db48 	.word	0x0800db48
 800b570:	0800db48 	.word	0x0800db48
 800b574:	0800db48 	.word	0x0800db48
 800b578:	0800db4c 	.word	0x0800db4c

0800b57c <__retarget_lock_acquire_recursive>:
 800b57c:	4770      	bx	lr

0800b57e <__retarget_lock_release_recursive>:
 800b57e:	4770      	bx	lr

0800b580 <__assert_func>:
 800b580:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b582:	4614      	mov	r4, r2
 800b584:	461a      	mov	r2, r3
 800b586:	4b09      	ldr	r3, [pc, #36]	; (800b5ac <__assert_func+0x2c>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4605      	mov	r5, r0
 800b58c:	68d8      	ldr	r0, [r3, #12]
 800b58e:	b14c      	cbz	r4, 800b5a4 <__assert_func+0x24>
 800b590:	4b07      	ldr	r3, [pc, #28]	; (800b5b0 <__assert_func+0x30>)
 800b592:	9100      	str	r1, [sp, #0]
 800b594:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b598:	4906      	ldr	r1, [pc, #24]	; (800b5b4 <__assert_func+0x34>)
 800b59a:	462b      	mov	r3, r5
 800b59c:	f001 fd0c 	bl	800cfb8 <fiprintf>
 800b5a0:	f001 fd54 	bl	800d04c <abort>
 800b5a4:	4b04      	ldr	r3, [pc, #16]	; (800b5b8 <__assert_func+0x38>)
 800b5a6:	461c      	mov	r4, r3
 800b5a8:	e7f3      	b.n	800b592 <__assert_func+0x12>
 800b5aa:	bf00      	nop
 800b5ac:	20000120 	.word	0x20000120
 800b5b0:	0800d916 	.word	0x0800d916
 800b5b4:	0800d923 	.word	0x0800d923
 800b5b8:	0800d951 	.word	0x0800d951

0800b5bc <quorem>:
 800b5bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c0:	6903      	ldr	r3, [r0, #16]
 800b5c2:	690c      	ldr	r4, [r1, #16]
 800b5c4:	42a3      	cmp	r3, r4
 800b5c6:	4607      	mov	r7, r0
 800b5c8:	db7e      	blt.n	800b6c8 <quorem+0x10c>
 800b5ca:	3c01      	subs	r4, #1
 800b5cc:	f101 0814 	add.w	r8, r1, #20
 800b5d0:	f100 0514 	add.w	r5, r0, #20
 800b5d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b5d8:	9301      	str	r3, [sp, #4]
 800b5da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b5de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b5ea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b5ee:	fbb2 f6f3 	udiv	r6, r2, r3
 800b5f2:	d331      	bcc.n	800b658 <quorem+0x9c>
 800b5f4:	f04f 0e00 	mov.w	lr, #0
 800b5f8:	4640      	mov	r0, r8
 800b5fa:	46ac      	mov	ip, r5
 800b5fc:	46f2      	mov	sl, lr
 800b5fe:	f850 2b04 	ldr.w	r2, [r0], #4
 800b602:	b293      	uxth	r3, r2
 800b604:	fb06 e303 	mla	r3, r6, r3, lr
 800b608:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b60c:	0c1a      	lsrs	r2, r3, #16
 800b60e:	b29b      	uxth	r3, r3
 800b610:	ebaa 0303 	sub.w	r3, sl, r3
 800b614:	f8dc a000 	ldr.w	sl, [ip]
 800b618:	fa13 f38a 	uxtah	r3, r3, sl
 800b61c:	fb06 220e 	mla	r2, r6, lr, r2
 800b620:	9300      	str	r3, [sp, #0]
 800b622:	9b00      	ldr	r3, [sp, #0]
 800b624:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b628:	b292      	uxth	r2, r2
 800b62a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b62e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b632:	f8bd 3000 	ldrh.w	r3, [sp]
 800b636:	4581      	cmp	r9, r0
 800b638:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b63c:	f84c 3b04 	str.w	r3, [ip], #4
 800b640:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b644:	d2db      	bcs.n	800b5fe <quorem+0x42>
 800b646:	f855 300b 	ldr.w	r3, [r5, fp]
 800b64a:	b92b      	cbnz	r3, 800b658 <quorem+0x9c>
 800b64c:	9b01      	ldr	r3, [sp, #4]
 800b64e:	3b04      	subs	r3, #4
 800b650:	429d      	cmp	r5, r3
 800b652:	461a      	mov	r2, r3
 800b654:	d32c      	bcc.n	800b6b0 <quorem+0xf4>
 800b656:	613c      	str	r4, [r7, #16]
 800b658:	4638      	mov	r0, r7
 800b65a:	f001 f9a7 	bl	800c9ac <__mcmp>
 800b65e:	2800      	cmp	r0, #0
 800b660:	db22      	blt.n	800b6a8 <quorem+0xec>
 800b662:	3601      	adds	r6, #1
 800b664:	4629      	mov	r1, r5
 800b666:	2000      	movs	r0, #0
 800b668:	f858 2b04 	ldr.w	r2, [r8], #4
 800b66c:	f8d1 c000 	ldr.w	ip, [r1]
 800b670:	b293      	uxth	r3, r2
 800b672:	1ac3      	subs	r3, r0, r3
 800b674:	0c12      	lsrs	r2, r2, #16
 800b676:	fa13 f38c 	uxtah	r3, r3, ip
 800b67a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b67e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b682:	b29b      	uxth	r3, r3
 800b684:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b688:	45c1      	cmp	r9, r8
 800b68a:	f841 3b04 	str.w	r3, [r1], #4
 800b68e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b692:	d2e9      	bcs.n	800b668 <quorem+0xac>
 800b694:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b698:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b69c:	b922      	cbnz	r2, 800b6a8 <quorem+0xec>
 800b69e:	3b04      	subs	r3, #4
 800b6a0:	429d      	cmp	r5, r3
 800b6a2:	461a      	mov	r2, r3
 800b6a4:	d30a      	bcc.n	800b6bc <quorem+0x100>
 800b6a6:	613c      	str	r4, [r7, #16]
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	b003      	add	sp, #12
 800b6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6b0:	6812      	ldr	r2, [r2, #0]
 800b6b2:	3b04      	subs	r3, #4
 800b6b4:	2a00      	cmp	r2, #0
 800b6b6:	d1ce      	bne.n	800b656 <quorem+0x9a>
 800b6b8:	3c01      	subs	r4, #1
 800b6ba:	e7c9      	b.n	800b650 <quorem+0x94>
 800b6bc:	6812      	ldr	r2, [r2, #0]
 800b6be:	3b04      	subs	r3, #4
 800b6c0:	2a00      	cmp	r2, #0
 800b6c2:	d1f0      	bne.n	800b6a6 <quorem+0xea>
 800b6c4:	3c01      	subs	r4, #1
 800b6c6:	e7eb      	b.n	800b6a0 <quorem+0xe4>
 800b6c8:	2000      	movs	r0, #0
 800b6ca:	e7ee      	b.n	800b6aa <quorem+0xee>
 800b6cc:	0000      	movs	r0, r0
	...

0800b6d0 <_dtoa_r>:
 800b6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d4:	ed2d 8b04 	vpush	{d8-d9}
 800b6d8:	69c5      	ldr	r5, [r0, #28]
 800b6da:	b093      	sub	sp, #76	; 0x4c
 800b6dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b6e0:	ec57 6b10 	vmov	r6, r7, d0
 800b6e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b6e8:	9107      	str	r1, [sp, #28]
 800b6ea:	4604      	mov	r4, r0
 800b6ec:	920a      	str	r2, [sp, #40]	; 0x28
 800b6ee:	930d      	str	r3, [sp, #52]	; 0x34
 800b6f0:	b975      	cbnz	r5, 800b710 <_dtoa_r+0x40>
 800b6f2:	2010      	movs	r0, #16
 800b6f4:	f000 fe2a 	bl	800c34c <malloc>
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	61e0      	str	r0, [r4, #28]
 800b6fc:	b920      	cbnz	r0, 800b708 <_dtoa_r+0x38>
 800b6fe:	4bae      	ldr	r3, [pc, #696]	; (800b9b8 <_dtoa_r+0x2e8>)
 800b700:	21ef      	movs	r1, #239	; 0xef
 800b702:	48ae      	ldr	r0, [pc, #696]	; (800b9bc <_dtoa_r+0x2ec>)
 800b704:	f7ff ff3c 	bl	800b580 <__assert_func>
 800b708:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b70c:	6005      	str	r5, [r0, #0]
 800b70e:	60c5      	str	r5, [r0, #12]
 800b710:	69e3      	ldr	r3, [r4, #28]
 800b712:	6819      	ldr	r1, [r3, #0]
 800b714:	b151      	cbz	r1, 800b72c <_dtoa_r+0x5c>
 800b716:	685a      	ldr	r2, [r3, #4]
 800b718:	604a      	str	r2, [r1, #4]
 800b71a:	2301      	movs	r3, #1
 800b71c:	4093      	lsls	r3, r2
 800b71e:	608b      	str	r3, [r1, #8]
 800b720:	4620      	mov	r0, r4
 800b722:	f000 ff07 	bl	800c534 <_Bfree>
 800b726:	69e3      	ldr	r3, [r4, #28]
 800b728:	2200      	movs	r2, #0
 800b72a:	601a      	str	r2, [r3, #0]
 800b72c:	1e3b      	subs	r3, r7, #0
 800b72e:	bfbb      	ittet	lt
 800b730:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b734:	9303      	strlt	r3, [sp, #12]
 800b736:	2300      	movge	r3, #0
 800b738:	2201      	movlt	r2, #1
 800b73a:	bfac      	ite	ge
 800b73c:	f8c8 3000 	strge.w	r3, [r8]
 800b740:	f8c8 2000 	strlt.w	r2, [r8]
 800b744:	4b9e      	ldr	r3, [pc, #632]	; (800b9c0 <_dtoa_r+0x2f0>)
 800b746:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b74a:	ea33 0308 	bics.w	r3, r3, r8
 800b74e:	d11b      	bne.n	800b788 <_dtoa_r+0xb8>
 800b750:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b752:	f242 730f 	movw	r3, #9999	; 0x270f
 800b756:	6013      	str	r3, [r2, #0]
 800b758:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b75c:	4333      	orrs	r3, r6
 800b75e:	f000 8593 	beq.w	800c288 <_dtoa_r+0xbb8>
 800b762:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b764:	b963      	cbnz	r3, 800b780 <_dtoa_r+0xb0>
 800b766:	4b97      	ldr	r3, [pc, #604]	; (800b9c4 <_dtoa_r+0x2f4>)
 800b768:	e027      	b.n	800b7ba <_dtoa_r+0xea>
 800b76a:	4b97      	ldr	r3, [pc, #604]	; (800b9c8 <_dtoa_r+0x2f8>)
 800b76c:	9300      	str	r3, [sp, #0]
 800b76e:	3308      	adds	r3, #8
 800b770:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b772:	6013      	str	r3, [r2, #0]
 800b774:	9800      	ldr	r0, [sp, #0]
 800b776:	b013      	add	sp, #76	; 0x4c
 800b778:	ecbd 8b04 	vpop	{d8-d9}
 800b77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b780:	4b90      	ldr	r3, [pc, #576]	; (800b9c4 <_dtoa_r+0x2f4>)
 800b782:	9300      	str	r3, [sp, #0]
 800b784:	3303      	adds	r3, #3
 800b786:	e7f3      	b.n	800b770 <_dtoa_r+0xa0>
 800b788:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b78c:	2200      	movs	r2, #0
 800b78e:	ec51 0b17 	vmov	r0, r1, d7
 800b792:	eeb0 8a47 	vmov.f32	s16, s14
 800b796:	eef0 8a67 	vmov.f32	s17, s15
 800b79a:	2300      	movs	r3, #0
 800b79c:	f7f5 f9cc 	bl	8000b38 <__aeabi_dcmpeq>
 800b7a0:	4681      	mov	r9, r0
 800b7a2:	b160      	cbz	r0, 800b7be <_dtoa_r+0xee>
 800b7a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	6013      	str	r3, [r2, #0]
 800b7aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	f000 8568 	beq.w	800c282 <_dtoa_r+0xbb2>
 800b7b2:	4b86      	ldr	r3, [pc, #536]	; (800b9cc <_dtoa_r+0x2fc>)
 800b7b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b7b6:	6013      	str	r3, [r2, #0]
 800b7b8:	3b01      	subs	r3, #1
 800b7ba:	9300      	str	r3, [sp, #0]
 800b7bc:	e7da      	b.n	800b774 <_dtoa_r+0xa4>
 800b7be:	aa10      	add	r2, sp, #64	; 0x40
 800b7c0:	a911      	add	r1, sp, #68	; 0x44
 800b7c2:	4620      	mov	r0, r4
 800b7c4:	eeb0 0a48 	vmov.f32	s0, s16
 800b7c8:	eef0 0a68 	vmov.f32	s1, s17
 800b7cc:	f001 f994 	bl	800caf8 <__d2b>
 800b7d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b7d4:	4682      	mov	sl, r0
 800b7d6:	2d00      	cmp	r5, #0
 800b7d8:	d07f      	beq.n	800b8da <_dtoa_r+0x20a>
 800b7da:	ee18 3a90 	vmov	r3, s17
 800b7de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7e2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b7e6:	ec51 0b18 	vmov	r0, r1, d8
 800b7ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b7ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b7f2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	4b75      	ldr	r3, [pc, #468]	; (800b9d0 <_dtoa_r+0x300>)
 800b7fc:	f7f4 fd7c 	bl	80002f8 <__aeabi_dsub>
 800b800:	a367      	add	r3, pc, #412	; (adr r3, 800b9a0 <_dtoa_r+0x2d0>)
 800b802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b806:	f7f4 ff2f 	bl	8000668 <__aeabi_dmul>
 800b80a:	a367      	add	r3, pc, #412	; (adr r3, 800b9a8 <_dtoa_r+0x2d8>)
 800b80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b810:	f7f4 fd74 	bl	80002fc <__adddf3>
 800b814:	4606      	mov	r6, r0
 800b816:	4628      	mov	r0, r5
 800b818:	460f      	mov	r7, r1
 800b81a:	f7f4 febb 	bl	8000594 <__aeabi_i2d>
 800b81e:	a364      	add	r3, pc, #400	; (adr r3, 800b9b0 <_dtoa_r+0x2e0>)
 800b820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b824:	f7f4 ff20 	bl	8000668 <__aeabi_dmul>
 800b828:	4602      	mov	r2, r0
 800b82a:	460b      	mov	r3, r1
 800b82c:	4630      	mov	r0, r6
 800b82e:	4639      	mov	r1, r7
 800b830:	f7f4 fd64 	bl	80002fc <__adddf3>
 800b834:	4606      	mov	r6, r0
 800b836:	460f      	mov	r7, r1
 800b838:	f7f5 f9c6 	bl	8000bc8 <__aeabi_d2iz>
 800b83c:	2200      	movs	r2, #0
 800b83e:	4683      	mov	fp, r0
 800b840:	2300      	movs	r3, #0
 800b842:	4630      	mov	r0, r6
 800b844:	4639      	mov	r1, r7
 800b846:	f7f5 f981 	bl	8000b4c <__aeabi_dcmplt>
 800b84a:	b148      	cbz	r0, 800b860 <_dtoa_r+0x190>
 800b84c:	4658      	mov	r0, fp
 800b84e:	f7f4 fea1 	bl	8000594 <__aeabi_i2d>
 800b852:	4632      	mov	r2, r6
 800b854:	463b      	mov	r3, r7
 800b856:	f7f5 f96f 	bl	8000b38 <__aeabi_dcmpeq>
 800b85a:	b908      	cbnz	r0, 800b860 <_dtoa_r+0x190>
 800b85c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b860:	f1bb 0f16 	cmp.w	fp, #22
 800b864:	d857      	bhi.n	800b916 <_dtoa_r+0x246>
 800b866:	4b5b      	ldr	r3, [pc, #364]	; (800b9d4 <_dtoa_r+0x304>)
 800b868:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b870:	ec51 0b18 	vmov	r0, r1, d8
 800b874:	f7f5 f96a 	bl	8000b4c <__aeabi_dcmplt>
 800b878:	2800      	cmp	r0, #0
 800b87a:	d04e      	beq.n	800b91a <_dtoa_r+0x24a>
 800b87c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b880:	2300      	movs	r3, #0
 800b882:	930c      	str	r3, [sp, #48]	; 0x30
 800b884:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b886:	1b5b      	subs	r3, r3, r5
 800b888:	1e5a      	subs	r2, r3, #1
 800b88a:	bf45      	ittet	mi
 800b88c:	f1c3 0301 	rsbmi	r3, r3, #1
 800b890:	9305      	strmi	r3, [sp, #20]
 800b892:	2300      	movpl	r3, #0
 800b894:	2300      	movmi	r3, #0
 800b896:	9206      	str	r2, [sp, #24]
 800b898:	bf54      	ite	pl
 800b89a:	9305      	strpl	r3, [sp, #20]
 800b89c:	9306      	strmi	r3, [sp, #24]
 800b89e:	f1bb 0f00 	cmp.w	fp, #0
 800b8a2:	db3c      	blt.n	800b91e <_dtoa_r+0x24e>
 800b8a4:	9b06      	ldr	r3, [sp, #24]
 800b8a6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b8aa:	445b      	add	r3, fp
 800b8ac:	9306      	str	r3, [sp, #24]
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	9308      	str	r3, [sp, #32]
 800b8b2:	9b07      	ldr	r3, [sp, #28]
 800b8b4:	2b09      	cmp	r3, #9
 800b8b6:	d868      	bhi.n	800b98a <_dtoa_r+0x2ba>
 800b8b8:	2b05      	cmp	r3, #5
 800b8ba:	bfc4      	itt	gt
 800b8bc:	3b04      	subgt	r3, #4
 800b8be:	9307      	strgt	r3, [sp, #28]
 800b8c0:	9b07      	ldr	r3, [sp, #28]
 800b8c2:	f1a3 0302 	sub.w	r3, r3, #2
 800b8c6:	bfcc      	ite	gt
 800b8c8:	2500      	movgt	r5, #0
 800b8ca:	2501      	movle	r5, #1
 800b8cc:	2b03      	cmp	r3, #3
 800b8ce:	f200 8085 	bhi.w	800b9dc <_dtoa_r+0x30c>
 800b8d2:	e8df f003 	tbb	[pc, r3]
 800b8d6:	3b2e      	.short	0x3b2e
 800b8d8:	5839      	.short	0x5839
 800b8da:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b8de:	441d      	add	r5, r3
 800b8e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b8e4:	2b20      	cmp	r3, #32
 800b8e6:	bfc1      	itttt	gt
 800b8e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b8ec:	fa08 f803 	lslgt.w	r8, r8, r3
 800b8f0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b8f4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b8f8:	bfd6      	itet	le
 800b8fa:	f1c3 0320 	rsble	r3, r3, #32
 800b8fe:	ea48 0003 	orrgt.w	r0, r8, r3
 800b902:	fa06 f003 	lslle.w	r0, r6, r3
 800b906:	f7f4 fe35 	bl	8000574 <__aeabi_ui2d>
 800b90a:	2201      	movs	r2, #1
 800b90c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b910:	3d01      	subs	r5, #1
 800b912:	920e      	str	r2, [sp, #56]	; 0x38
 800b914:	e76f      	b.n	800b7f6 <_dtoa_r+0x126>
 800b916:	2301      	movs	r3, #1
 800b918:	e7b3      	b.n	800b882 <_dtoa_r+0x1b2>
 800b91a:	900c      	str	r0, [sp, #48]	; 0x30
 800b91c:	e7b2      	b.n	800b884 <_dtoa_r+0x1b4>
 800b91e:	9b05      	ldr	r3, [sp, #20]
 800b920:	eba3 030b 	sub.w	r3, r3, fp
 800b924:	9305      	str	r3, [sp, #20]
 800b926:	f1cb 0300 	rsb	r3, fp, #0
 800b92a:	9308      	str	r3, [sp, #32]
 800b92c:	2300      	movs	r3, #0
 800b92e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b930:	e7bf      	b.n	800b8b2 <_dtoa_r+0x1e2>
 800b932:	2300      	movs	r3, #0
 800b934:	9309      	str	r3, [sp, #36]	; 0x24
 800b936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b938:	2b00      	cmp	r3, #0
 800b93a:	dc52      	bgt.n	800b9e2 <_dtoa_r+0x312>
 800b93c:	2301      	movs	r3, #1
 800b93e:	9301      	str	r3, [sp, #4]
 800b940:	9304      	str	r3, [sp, #16]
 800b942:	461a      	mov	r2, r3
 800b944:	920a      	str	r2, [sp, #40]	; 0x28
 800b946:	e00b      	b.n	800b960 <_dtoa_r+0x290>
 800b948:	2301      	movs	r3, #1
 800b94a:	e7f3      	b.n	800b934 <_dtoa_r+0x264>
 800b94c:	2300      	movs	r3, #0
 800b94e:	9309      	str	r3, [sp, #36]	; 0x24
 800b950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b952:	445b      	add	r3, fp
 800b954:	9301      	str	r3, [sp, #4]
 800b956:	3301      	adds	r3, #1
 800b958:	2b01      	cmp	r3, #1
 800b95a:	9304      	str	r3, [sp, #16]
 800b95c:	bfb8      	it	lt
 800b95e:	2301      	movlt	r3, #1
 800b960:	69e0      	ldr	r0, [r4, #28]
 800b962:	2100      	movs	r1, #0
 800b964:	2204      	movs	r2, #4
 800b966:	f102 0614 	add.w	r6, r2, #20
 800b96a:	429e      	cmp	r6, r3
 800b96c:	d93d      	bls.n	800b9ea <_dtoa_r+0x31a>
 800b96e:	6041      	str	r1, [r0, #4]
 800b970:	4620      	mov	r0, r4
 800b972:	f000 fd9f 	bl	800c4b4 <_Balloc>
 800b976:	9000      	str	r0, [sp, #0]
 800b978:	2800      	cmp	r0, #0
 800b97a:	d139      	bne.n	800b9f0 <_dtoa_r+0x320>
 800b97c:	4b16      	ldr	r3, [pc, #88]	; (800b9d8 <_dtoa_r+0x308>)
 800b97e:	4602      	mov	r2, r0
 800b980:	f240 11af 	movw	r1, #431	; 0x1af
 800b984:	e6bd      	b.n	800b702 <_dtoa_r+0x32>
 800b986:	2301      	movs	r3, #1
 800b988:	e7e1      	b.n	800b94e <_dtoa_r+0x27e>
 800b98a:	2501      	movs	r5, #1
 800b98c:	2300      	movs	r3, #0
 800b98e:	9307      	str	r3, [sp, #28]
 800b990:	9509      	str	r5, [sp, #36]	; 0x24
 800b992:	f04f 33ff 	mov.w	r3, #4294967295
 800b996:	9301      	str	r3, [sp, #4]
 800b998:	9304      	str	r3, [sp, #16]
 800b99a:	2200      	movs	r2, #0
 800b99c:	2312      	movs	r3, #18
 800b99e:	e7d1      	b.n	800b944 <_dtoa_r+0x274>
 800b9a0:	636f4361 	.word	0x636f4361
 800b9a4:	3fd287a7 	.word	0x3fd287a7
 800b9a8:	8b60c8b3 	.word	0x8b60c8b3
 800b9ac:	3fc68a28 	.word	0x3fc68a28
 800b9b0:	509f79fb 	.word	0x509f79fb
 800b9b4:	3fd34413 	.word	0x3fd34413
 800b9b8:	0800d8a5 	.word	0x0800d8a5
 800b9bc:	0800d95f 	.word	0x0800d95f
 800b9c0:	7ff00000 	.word	0x7ff00000
 800b9c4:	0800d95b 	.word	0x0800d95b
 800b9c8:	0800d952 	.word	0x0800d952
 800b9cc:	0800d882 	.word	0x0800d882
 800b9d0:	3ff80000 	.word	0x3ff80000
 800b9d4:	0800da50 	.word	0x0800da50
 800b9d8:	0800d9b7 	.word	0x0800d9b7
 800b9dc:	2301      	movs	r3, #1
 800b9de:	9309      	str	r3, [sp, #36]	; 0x24
 800b9e0:	e7d7      	b.n	800b992 <_dtoa_r+0x2c2>
 800b9e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9e4:	9301      	str	r3, [sp, #4]
 800b9e6:	9304      	str	r3, [sp, #16]
 800b9e8:	e7ba      	b.n	800b960 <_dtoa_r+0x290>
 800b9ea:	3101      	adds	r1, #1
 800b9ec:	0052      	lsls	r2, r2, #1
 800b9ee:	e7ba      	b.n	800b966 <_dtoa_r+0x296>
 800b9f0:	69e3      	ldr	r3, [r4, #28]
 800b9f2:	9a00      	ldr	r2, [sp, #0]
 800b9f4:	601a      	str	r2, [r3, #0]
 800b9f6:	9b04      	ldr	r3, [sp, #16]
 800b9f8:	2b0e      	cmp	r3, #14
 800b9fa:	f200 80a8 	bhi.w	800bb4e <_dtoa_r+0x47e>
 800b9fe:	2d00      	cmp	r5, #0
 800ba00:	f000 80a5 	beq.w	800bb4e <_dtoa_r+0x47e>
 800ba04:	f1bb 0f00 	cmp.w	fp, #0
 800ba08:	dd38      	ble.n	800ba7c <_dtoa_r+0x3ac>
 800ba0a:	4bc0      	ldr	r3, [pc, #768]	; (800bd0c <_dtoa_r+0x63c>)
 800ba0c:	f00b 020f 	and.w	r2, fp, #15
 800ba10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba14:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ba18:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ba1c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ba20:	d019      	beq.n	800ba56 <_dtoa_r+0x386>
 800ba22:	4bbb      	ldr	r3, [pc, #748]	; (800bd10 <_dtoa_r+0x640>)
 800ba24:	ec51 0b18 	vmov	r0, r1, d8
 800ba28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ba2c:	f7f4 ff46 	bl	80008bc <__aeabi_ddiv>
 800ba30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba34:	f008 080f 	and.w	r8, r8, #15
 800ba38:	2503      	movs	r5, #3
 800ba3a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800bd10 <_dtoa_r+0x640>
 800ba3e:	f1b8 0f00 	cmp.w	r8, #0
 800ba42:	d10a      	bne.n	800ba5a <_dtoa_r+0x38a>
 800ba44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba48:	4632      	mov	r2, r6
 800ba4a:	463b      	mov	r3, r7
 800ba4c:	f7f4 ff36 	bl	80008bc <__aeabi_ddiv>
 800ba50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba54:	e02b      	b.n	800baae <_dtoa_r+0x3de>
 800ba56:	2502      	movs	r5, #2
 800ba58:	e7ef      	b.n	800ba3a <_dtoa_r+0x36a>
 800ba5a:	f018 0f01 	tst.w	r8, #1
 800ba5e:	d008      	beq.n	800ba72 <_dtoa_r+0x3a2>
 800ba60:	4630      	mov	r0, r6
 800ba62:	4639      	mov	r1, r7
 800ba64:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ba68:	f7f4 fdfe 	bl	8000668 <__aeabi_dmul>
 800ba6c:	3501      	adds	r5, #1
 800ba6e:	4606      	mov	r6, r0
 800ba70:	460f      	mov	r7, r1
 800ba72:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ba76:	f109 0908 	add.w	r9, r9, #8
 800ba7a:	e7e0      	b.n	800ba3e <_dtoa_r+0x36e>
 800ba7c:	f000 809f 	beq.w	800bbbe <_dtoa_r+0x4ee>
 800ba80:	f1cb 0600 	rsb	r6, fp, #0
 800ba84:	4ba1      	ldr	r3, [pc, #644]	; (800bd0c <_dtoa_r+0x63c>)
 800ba86:	4fa2      	ldr	r7, [pc, #648]	; (800bd10 <_dtoa_r+0x640>)
 800ba88:	f006 020f 	and.w	r2, r6, #15
 800ba8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba94:	ec51 0b18 	vmov	r0, r1, d8
 800ba98:	f7f4 fde6 	bl	8000668 <__aeabi_dmul>
 800ba9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800baa0:	1136      	asrs	r6, r6, #4
 800baa2:	2300      	movs	r3, #0
 800baa4:	2502      	movs	r5, #2
 800baa6:	2e00      	cmp	r6, #0
 800baa8:	d17e      	bne.n	800bba8 <_dtoa_r+0x4d8>
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d1d0      	bne.n	800ba50 <_dtoa_r+0x380>
 800baae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bab0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	f000 8084 	beq.w	800bbc2 <_dtoa_r+0x4f2>
 800baba:	4b96      	ldr	r3, [pc, #600]	; (800bd14 <_dtoa_r+0x644>)
 800babc:	2200      	movs	r2, #0
 800babe:	4640      	mov	r0, r8
 800bac0:	4649      	mov	r1, r9
 800bac2:	f7f5 f843 	bl	8000b4c <__aeabi_dcmplt>
 800bac6:	2800      	cmp	r0, #0
 800bac8:	d07b      	beq.n	800bbc2 <_dtoa_r+0x4f2>
 800baca:	9b04      	ldr	r3, [sp, #16]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d078      	beq.n	800bbc2 <_dtoa_r+0x4f2>
 800bad0:	9b01      	ldr	r3, [sp, #4]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	dd39      	ble.n	800bb4a <_dtoa_r+0x47a>
 800bad6:	4b90      	ldr	r3, [pc, #576]	; (800bd18 <_dtoa_r+0x648>)
 800bad8:	2200      	movs	r2, #0
 800bada:	4640      	mov	r0, r8
 800badc:	4649      	mov	r1, r9
 800bade:	f7f4 fdc3 	bl	8000668 <__aeabi_dmul>
 800bae2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bae6:	9e01      	ldr	r6, [sp, #4]
 800bae8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800baec:	3501      	adds	r5, #1
 800baee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800baf2:	4628      	mov	r0, r5
 800baf4:	f7f4 fd4e 	bl	8000594 <__aeabi_i2d>
 800baf8:	4642      	mov	r2, r8
 800bafa:	464b      	mov	r3, r9
 800bafc:	f7f4 fdb4 	bl	8000668 <__aeabi_dmul>
 800bb00:	4b86      	ldr	r3, [pc, #536]	; (800bd1c <_dtoa_r+0x64c>)
 800bb02:	2200      	movs	r2, #0
 800bb04:	f7f4 fbfa 	bl	80002fc <__adddf3>
 800bb08:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bb0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb10:	9303      	str	r3, [sp, #12]
 800bb12:	2e00      	cmp	r6, #0
 800bb14:	d158      	bne.n	800bbc8 <_dtoa_r+0x4f8>
 800bb16:	4b82      	ldr	r3, [pc, #520]	; (800bd20 <_dtoa_r+0x650>)
 800bb18:	2200      	movs	r2, #0
 800bb1a:	4640      	mov	r0, r8
 800bb1c:	4649      	mov	r1, r9
 800bb1e:	f7f4 fbeb 	bl	80002f8 <__aeabi_dsub>
 800bb22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb26:	4680      	mov	r8, r0
 800bb28:	4689      	mov	r9, r1
 800bb2a:	f7f5 f82d 	bl	8000b88 <__aeabi_dcmpgt>
 800bb2e:	2800      	cmp	r0, #0
 800bb30:	f040 8296 	bne.w	800c060 <_dtoa_r+0x990>
 800bb34:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bb38:	4640      	mov	r0, r8
 800bb3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb3e:	4649      	mov	r1, r9
 800bb40:	f7f5 f804 	bl	8000b4c <__aeabi_dcmplt>
 800bb44:	2800      	cmp	r0, #0
 800bb46:	f040 8289 	bne.w	800c05c <_dtoa_r+0x98c>
 800bb4a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bb4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	f2c0 814e 	blt.w	800bdf2 <_dtoa_r+0x722>
 800bb56:	f1bb 0f0e 	cmp.w	fp, #14
 800bb5a:	f300 814a 	bgt.w	800bdf2 <_dtoa_r+0x722>
 800bb5e:	4b6b      	ldr	r3, [pc, #428]	; (800bd0c <_dtoa_r+0x63c>)
 800bb60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bb64:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	f280 80dc 	bge.w	800bd28 <_dtoa_r+0x658>
 800bb70:	9b04      	ldr	r3, [sp, #16]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	f300 80d8 	bgt.w	800bd28 <_dtoa_r+0x658>
 800bb78:	f040 826f 	bne.w	800c05a <_dtoa_r+0x98a>
 800bb7c:	4b68      	ldr	r3, [pc, #416]	; (800bd20 <_dtoa_r+0x650>)
 800bb7e:	2200      	movs	r2, #0
 800bb80:	4640      	mov	r0, r8
 800bb82:	4649      	mov	r1, r9
 800bb84:	f7f4 fd70 	bl	8000668 <__aeabi_dmul>
 800bb88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb8c:	f7f4 fff2 	bl	8000b74 <__aeabi_dcmpge>
 800bb90:	9e04      	ldr	r6, [sp, #16]
 800bb92:	4637      	mov	r7, r6
 800bb94:	2800      	cmp	r0, #0
 800bb96:	f040 8245 	bne.w	800c024 <_dtoa_r+0x954>
 800bb9a:	9d00      	ldr	r5, [sp, #0]
 800bb9c:	2331      	movs	r3, #49	; 0x31
 800bb9e:	f805 3b01 	strb.w	r3, [r5], #1
 800bba2:	f10b 0b01 	add.w	fp, fp, #1
 800bba6:	e241      	b.n	800c02c <_dtoa_r+0x95c>
 800bba8:	07f2      	lsls	r2, r6, #31
 800bbaa:	d505      	bpl.n	800bbb8 <_dtoa_r+0x4e8>
 800bbac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbb0:	f7f4 fd5a 	bl	8000668 <__aeabi_dmul>
 800bbb4:	3501      	adds	r5, #1
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	1076      	asrs	r6, r6, #1
 800bbba:	3708      	adds	r7, #8
 800bbbc:	e773      	b.n	800baa6 <_dtoa_r+0x3d6>
 800bbbe:	2502      	movs	r5, #2
 800bbc0:	e775      	b.n	800baae <_dtoa_r+0x3de>
 800bbc2:	9e04      	ldr	r6, [sp, #16]
 800bbc4:	465f      	mov	r7, fp
 800bbc6:	e792      	b.n	800baee <_dtoa_r+0x41e>
 800bbc8:	9900      	ldr	r1, [sp, #0]
 800bbca:	4b50      	ldr	r3, [pc, #320]	; (800bd0c <_dtoa_r+0x63c>)
 800bbcc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bbd0:	4431      	add	r1, r6
 800bbd2:	9102      	str	r1, [sp, #8]
 800bbd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bbd6:	eeb0 9a47 	vmov.f32	s18, s14
 800bbda:	eef0 9a67 	vmov.f32	s19, s15
 800bbde:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bbe2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bbe6:	2900      	cmp	r1, #0
 800bbe8:	d044      	beq.n	800bc74 <_dtoa_r+0x5a4>
 800bbea:	494e      	ldr	r1, [pc, #312]	; (800bd24 <_dtoa_r+0x654>)
 800bbec:	2000      	movs	r0, #0
 800bbee:	f7f4 fe65 	bl	80008bc <__aeabi_ddiv>
 800bbf2:	ec53 2b19 	vmov	r2, r3, d9
 800bbf6:	f7f4 fb7f 	bl	80002f8 <__aeabi_dsub>
 800bbfa:	9d00      	ldr	r5, [sp, #0]
 800bbfc:	ec41 0b19 	vmov	d9, r0, r1
 800bc00:	4649      	mov	r1, r9
 800bc02:	4640      	mov	r0, r8
 800bc04:	f7f4 ffe0 	bl	8000bc8 <__aeabi_d2iz>
 800bc08:	4606      	mov	r6, r0
 800bc0a:	f7f4 fcc3 	bl	8000594 <__aeabi_i2d>
 800bc0e:	4602      	mov	r2, r0
 800bc10:	460b      	mov	r3, r1
 800bc12:	4640      	mov	r0, r8
 800bc14:	4649      	mov	r1, r9
 800bc16:	f7f4 fb6f 	bl	80002f8 <__aeabi_dsub>
 800bc1a:	3630      	adds	r6, #48	; 0x30
 800bc1c:	f805 6b01 	strb.w	r6, [r5], #1
 800bc20:	ec53 2b19 	vmov	r2, r3, d9
 800bc24:	4680      	mov	r8, r0
 800bc26:	4689      	mov	r9, r1
 800bc28:	f7f4 ff90 	bl	8000b4c <__aeabi_dcmplt>
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	d164      	bne.n	800bcfa <_dtoa_r+0x62a>
 800bc30:	4642      	mov	r2, r8
 800bc32:	464b      	mov	r3, r9
 800bc34:	4937      	ldr	r1, [pc, #220]	; (800bd14 <_dtoa_r+0x644>)
 800bc36:	2000      	movs	r0, #0
 800bc38:	f7f4 fb5e 	bl	80002f8 <__aeabi_dsub>
 800bc3c:	ec53 2b19 	vmov	r2, r3, d9
 800bc40:	f7f4 ff84 	bl	8000b4c <__aeabi_dcmplt>
 800bc44:	2800      	cmp	r0, #0
 800bc46:	f040 80b6 	bne.w	800bdb6 <_dtoa_r+0x6e6>
 800bc4a:	9b02      	ldr	r3, [sp, #8]
 800bc4c:	429d      	cmp	r5, r3
 800bc4e:	f43f af7c 	beq.w	800bb4a <_dtoa_r+0x47a>
 800bc52:	4b31      	ldr	r3, [pc, #196]	; (800bd18 <_dtoa_r+0x648>)
 800bc54:	ec51 0b19 	vmov	r0, r1, d9
 800bc58:	2200      	movs	r2, #0
 800bc5a:	f7f4 fd05 	bl	8000668 <__aeabi_dmul>
 800bc5e:	4b2e      	ldr	r3, [pc, #184]	; (800bd18 <_dtoa_r+0x648>)
 800bc60:	ec41 0b19 	vmov	d9, r0, r1
 800bc64:	2200      	movs	r2, #0
 800bc66:	4640      	mov	r0, r8
 800bc68:	4649      	mov	r1, r9
 800bc6a:	f7f4 fcfd 	bl	8000668 <__aeabi_dmul>
 800bc6e:	4680      	mov	r8, r0
 800bc70:	4689      	mov	r9, r1
 800bc72:	e7c5      	b.n	800bc00 <_dtoa_r+0x530>
 800bc74:	ec51 0b17 	vmov	r0, r1, d7
 800bc78:	f7f4 fcf6 	bl	8000668 <__aeabi_dmul>
 800bc7c:	9b02      	ldr	r3, [sp, #8]
 800bc7e:	9d00      	ldr	r5, [sp, #0]
 800bc80:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc82:	ec41 0b19 	vmov	d9, r0, r1
 800bc86:	4649      	mov	r1, r9
 800bc88:	4640      	mov	r0, r8
 800bc8a:	f7f4 ff9d 	bl	8000bc8 <__aeabi_d2iz>
 800bc8e:	4606      	mov	r6, r0
 800bc90:	f7f4 fc80 	bl	8000594 <__aeabi_i2d>
 800bc94:	3630      	adds	r6, #48	; 0x30
 800bc96:	4602      	mov	r2, r0
 800bc98:	460b      	mov	r3, r1
 800bc9a:	4640      	mov	r0, r8
 800bc9c:	4649      	mov	r1, r9
 800bc9e:	f7f4 fb2b 	bl	80002f8 <__aeabi_dsub>
 800bca2:	f805 6b01 	strb.w	r6, [r5], #1
 800bca6:	9b02      	ldr	r3, [sp, #8]
 800bca8:	429d      	cmp	r5, r3
 800bcaa:	4680      	mov	r8, r0
 800bcac:	4689      	mov	r9, r1
 800bcae:	f04f 0200 	mov.w	r2, #0
 800bcb2:	d124      	bne.n	800bcfe <_dtoa_r+0x62e>
 800bcb4:	4b1b      	ldr	r3, [pc, #108]	; (800bd24 <_dtoa_r+0x654>)
 800bcb6:	ec51 0b19 	vmov	r0, r1, d9
 800bcba:	f7f4 fb1f 	bl	80002fc <__adddf3>
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	4640      	mov	r0, r8
 800bcc4:	4649      	mov	r1, r9
 800bcc6:	f7f4 ff5f 	bl	8000b88 <__aeabi_dcmpgt>
 800bcca:	2800      	cmp	r0, #0
 800bccc:	d173      	bne.n	800bdb6 <_dtoa_r+0x6e6>
 800bcce:	ec53 2b19 	vmov	r2, r3, d9
 800bcd2:	4914      	ldr	r1, [pc, #80]	; (800bd24 <_dtoa_r+0x654>)
 800bcd4:	2000      	movs	r0, #0
 800bcd6:	f7f4 fb0f 	bl	80002f8 <__aeabi_dsub>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	460b      	mov	r3, r1
 800bcde:	4640      	mov	r0, r8
 800bce0:	4649      	mov	r1, r9
 800bce2:	f7f4 ff33 	bl	8000b4c <__aeabi_dcmplt>
 800bce6:	2800      	cmp	r0, #0
 800bce8:	f43f af2f 	beq.w	800bb4a <_dtoa_r+0x47a>
 800bcec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bcee:	1e6b      	subs	r3, r5, #1
 800bcf0:	930f      	str	r3, [sp, #60]	; 0x3c
 800bcf2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bcf6:	2b30      	cmp	r3, #48	; 0x30
 800bcf8:	d0f8      	beq.n	800bcec <_dtoa_r+0x61c>
 800bcfa:	46bb      	mov	fp, r7
 800bcfc:	e04a      	b.n	800bd94 <_dtoa_r+0x6c4>
 800bcfe:	4b06      	ldr	r3, [pc, #24]	; (800bd18 <_dtoa_r+0x648>)
 800bd00:	f7f4 fcb2 	bl	8000668 <__aeabi_dmul>
 800bd04:	4680      	mov	r8, r0
 800bd06:	4689      	mov	r9, r1
 800bd08:	e7bd      	b.n	800bc86 <_dtoa_r+0x5b6>
 800bd0a:	bf00      	nop
 800bd0c:	0800da50 	.word	0x0800da50
 800bd10:	0800da28 	.word	0x0800da28
 800bd14:	3ff00000 	.word	0x3ff00000
 800bd18:	40240000 	.word	0x40240000
 800bd1c:	401c0000 	.word	0x401c0000
 800bd20:	40140000 	.word	0x40140000
 800bd24:	3fe00000 	.word	0x3fe00000
 800bd28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bd2c:	9d00      	ldr	r5, [sp, #0]
 800bd2e:	4642      	mov	r2, r8
 800bd30:	464b      	mov	r3, r9
 800bd32:	4630      	mov	r0, r6
 800bd34:	4639      	mov	r1, r7
 800bd36:	f7f4 fdc1 	bl	80008bc <__aeabi_ddiv>
 800bd3a:	f7f4 ff45 	bl	8000bc8 <__aeabi_d2iz>
 800bd3e:	9001      	str	r0, [sp, #4]
 800bd40:	f7f4 fc28 	bl	8000594 <__aeabi_i2d>
 800bd44:	4642      	mov	r2, r8
 800bd46:	464b      	mov	r3, r9
 800bd48:	f7f4 fc8e 	bl	8000668 <__aeabi_dmul>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	460b      	mov	r3, r1
 800bd50:	4630      	mov	r0, r6
 800bd52:	4639      	mov	r1, r7
 800bd54:	f7f4 fad0 	bl	80002f8 <__aeabi_dsub>
 800bd58:	9e01      	ldr	r6, [sp, #4]
 800bd5a:	9f04      	ldr	r7, [sp, #16]
 800bd5c:	3630      	adds	r6, #48	; 0x30
 800bd5e:	f805 6b01 	strb.w	r6, [r5], #1
 800bd62:	9e00      	ldr	r6, [sp, #0]
 800bd64:	1bae      	subs	r6, r5, r6
 800bd66:	42b7      	cmp	r7, r6
 800bd68:	4602      	mov	r2, r0
 800bd6a:	460b      	mov	r3, r1
 800bd6c:	d134      	bne.n	800bdd8 <_dtoa_r+0x708>
 800bd6e:	f7f4 fac5 	bl	80002fc <__adddf3>
 800bd72:	4642      	mov	r2, r8
 800bd74:	464b      	mov	r3, r9
 800bd76:	4606      	mov	r6, r0
 800bd78:	460f      	mov	r7, r1
 800bd7a:	f7f4 ff05 	bl	8000b88 <__aeabi_dcmpgt>
 800bd7e:	b9c8      	cbnz	r0, 800bdb4 <_dtoa_r+0x6e4>
 800bd80:	4642      	mov	r2, r8
 800bd82:	464b      	mov	r3, r9
 800bd84:	4630      	mov	r0, r6
 800bd86:	4639      	mov	r1, r7
 800bd88:	f7f4 fed6 	bl	8000b38 <__aeabi_dcmpeq>
 800bd8c:	b110      	cbz	r0, 800bd94 <_dtoa_r+0x6c4>
 800bd8e:	9b01      	ldr	r3, [sp, #4]
 800bd90:	07db      	lsls	r3, r3, #31
 800bd92:	d40f      	bmi.n	800bdb4 <_dtoa_r+0x6e4>
 800bd94:	4651      	mov	r1, sl
 800bd96:	4620      	mov	r0, r4
 800bd98:	f000 fbcc 	bl	800c534 <_Bfree>
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bda0:	702b      	strb	r3, [r5, #0]
 800bda2:	f10b 0301 	add.w	r3, fp, #1
 800bda6:	6013      	str	r3, [r2, #0]
 800bda8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	f43f ace2 	beq.w	800b774 <_dtoa_r+0xa4>
 800bdb0:	601d      	str	r5, [r3, #0]
 800bdb2:	e4df      	b.n	800b774 <_dtoa_r+0xa4>
 800bdb4:	465f      	mov	r7, fp
 800bdb6:	462b      	mov	r3, r5
 800bdb8:	461d      	mov	r5, r3
 800bdba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bdbe:	2a39      	cmp	r2, #57	; 0x39
 800bdc0:	d106      	bne.n	800bdd0 <_dtoa_r+0x700>
 800bdc2:	9a00      	ldr	r2, [sp, #0]
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d1f7      	bne.n	800bdb8 <_dtoa_r+0x6e8>
 800bdc8:	9900      	ldr	r1, [sp, #0]
 800bdca:	2230      	movs	r2, #48	; 0x30
 800bdcc:	3701      	adds	r7, #1
 800bdce:	700a      	strb	r2, [r1, #0]
 800bdd0:	781a      	ldrb	r2, [r3, #0]
 800bdd2:	3201      	adds	r2, #1
 800bdd4:	701a      	strb	r2, [r3, #0]
 800bdd6:	e790      	b.n	800bcfa <_dtoa_r+0x62a>
 800bdd8:	4ba3      	ldr	r3, [pc, #652]	; (800c068 <_dtoa_r+0x998>)
 800bdda:	2200      	movs	r2, #0
 800bddc:	f7f4 fc44 	bl	8000668 <__aeabi_dmul>
 800bde0:	2200      	movs	r2, #0
 800bde2:	2300      	movs	r3, #0
 800bde4:	4606      	mov	r6, r0
 800bde6:	460f      	mov	r7, r1
 800bde8:	f7f4 fea6 	bl	8000b38 <__aeabi_dcmpeq>
 800bdec:	2800      	cmp	r0, #0
 800bdee:	d09e      	beq.n	800bd2e <_dtoa_r+0x65e>
 800bdf0:	e7d0      	b.n	800bd94 <_dtoa_r+0x6c4>
 800bdf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdf4:	2a00      	cmp	r2, #0
 800bdf6:	f000 80ca 	beq.w	800bf8e <_dtoa_r+0x8be>
 800bdfa:	9a07      	ldr	r2, [sp, #28]
 800bdfc:	2a01      	cmp	r2, #1
 800bdfe:	f300 80ad 	bgt.w	800bf5c <_dtoa_r+0x88c>
 800be02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be04:	2a00      	cmp	r2, #0
 800be06:	f000 80a5 	beq.w	800bf54 <_dtoa_r+0x884>
 800be0a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800be0e:	9e08      	ldr	r6, [sp, #32]
 800be10:	9d05      	ldr	r5, [sp, #20]
 800be12:	9a05      	ldr	r2, [sp, #20]
 800be14:	441a      	add	r2, r3
 800be16:	9205      	str	r2, [sp, #20]
 800be18:	9a06      	ldr	r2, [sp, #24]
 800be1a:	2101      	movs	r1, #1
 800be1c:	441a      	add	r2, r3
 800be1e:	4620      	mov	r0, r4
 800be20:	9206      	str	r2, [sp, #24]
 800be22:	f000 fc3d 	bl	800c6a0 <__i2b>
 800be26:	4607      	mov	r7, r0
 800be28:	b165      	cbz	r5, 800be44 <_dtoa_r+0x774>
 800be2a:	9b06      	ldr	r3, [sp, #24]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	dd09      	ble.n	800be44 <_dtoa_r+0x774>
 800be30:	42ab      	cmp	r3, r5
 800be32:	9a05      	ldr	r2, [sp, #20]
 800be34:	bfa8      	it	ge
 800be36:	462b      	movge	r3, r5
 800be38:	1ad2      	subs	r2, r2, r3
 800be3a:	9205      	str	r2, [sp, #20]
 800be3c:	9a06      	ldr	r2, [sp, #24]
 800be3e:	1aed      	subs	r5, r5, r3
 800be40:	1ad3      	subs	r3, r2, r3
 800be42:	9306      	str	r3, [sp, #24]
 800be44:	9b08      	ldr	r3, [sp, #32]
 800be46:	b1f3      	cbz	r3, 800be86 <_dtoa_r+0x7b6>
 800be48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	f000 80a3 	beq.w	800bf96 <_dtoa_r+0x8c6>
 800be50:	2e00      	cmp	r6, #0
 800be52:	dd10      	ble.n	800be76 <_dtoa_r+0x7a6>
 800be54:	4639      	mov	r1, r7
 800be56:	4632      	mov	r2, r6
 800be58:	4620      	mov	r0, r4
 800be5a:	f000 fce1 	bl	800c820 <__pow5mult>
 800be5e:	4652      	mov	r2, sl
 800be60:	4601      	mov	r1, r0
 800be62:	4607      	mov	r7, r0
 800be64:	4620      	mov	r0, r4
 800be66:	f000 fc31 	bl	800c6cc <__multiply>
 800be6a:	4651      	mov	r1, sl
 800be6c:	4680      	mov	r8, r0
 800be6e:	4620      	mov	r0, r4
 800be70:	f000 fb60 	bl	800c534 <_Bfree>
 800be74:	46c2      	mov	sl, r8
 800be76:	9b08      	ldr	r3, [sp, #32]
 800be78:	1b9a      	subs	r2, r3, r6
 800be7a:	d004      	beq.n	800be86 <_dtoa_r+0x7b6>
 800be7c:	4651      	mov	r1, sl
 800be7e:	4620      	mov	r0, r4
 800be80:	f000 fcce 	bl	800c820 <__pow5mult>
 800be84:	4682      	mov	sl, r0
 800be86:	2101      	movs	r1, #1
 800be88:	4620      	mov	r0, r4
 800be8a:	f000 fc09 	bl	800c6a0 <__i2b>
 800be8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be90:	2b00      	cmp	r3, #0
 800be92:	4606      	mov	r6, r0
 800be94:	f340 8081 	ble.w	800bf9a <_dtoa_r+0x8ca>
 800be98:	461a      	mov	r2, r3
 800be9a:	4601      	mov	r1, r0
 800be9c:	4620      	mov	r0, r4
 800be9e:	f000 fcbf 	bl	800c820 <__pow5mult>
 800bea2:	9b07      	ldr	r3, [sp, #28]
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	4606      	mov	r6, r0
 800bea8:	dd7a      	ble.n	800bfa0 <_dtoa_r+0x8d0>
 800beaa:	f04f 0800 	mov.w	r8, #0
 800beae:	6933      	ldr	r3, [r6, #16]
 800beb0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800beb4:	6918      	ldr	r0, [r3, #16]
 800beb6:	f000 fba5 	bl	800c604 <__hi0bits>
 800beba:	f1c0 0020 	rsb	r0, r0, #32
 800bebe:	9b06      	ldr	r3, [sp, #24]
 800bec0:	4418      	add	r0, r3
 800bec2:	f010 001f 	ands.w	r0, r0, #31
 800bec6:	f000 8094 	beq.w	800bff2 <_dtoa_r+0x922>
 800beca:	f1c0 0320 	rsb	r3, r0, #32
 800bece:	2b04      	cmp	r3, #4
 800bed0:	f340 8085 	ble.w	800bfde <_dtoa_r+0x90e>
 800bed4:	9b05      	ldr	r3, [sp, #20]
 800bed6:	f1c0 001c 	rsb	r0, r0, #28
 800beda:	4403      	add	r3, r0
 800bedc:	9305      	str	r3, [sp, #20]
 800bede:	9b06      	ldr	r3, [sp, #24]
 800bee0:	4403      	add	r3, r0
 800bee2:	4405      	add	r5, r0
 800bee4:	9306      	str	r3, [sp, #24]
 800bee6:	9b05      	ldr	r3, [sp, #20]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	dd05      	ble.n	800bef8 <_dtoa_r+0x828>
 800beec:	4651      	mov	r1, sl
 800beee:	461a      	mov	r2, r3
 800bef0:	4620      	mov	r0, r4
 800bef2:	f000 fcef 	bl	800c8d4 <__lshift>
 800bef6:	4682      	mov	sl, r0
 800bef8:	9b06      	ldr	r3, [sp, #24]
 800befa:	2b00      	cmp	r3, #0
 800befc:	dd05      	ble.n	800bf0a <_dtoa_r+0x83a>
 800befe:	4631      	mov	r1, r6
 800bf00:	461a      	mov	r2, r3
 800bf02:	4620      	mov	r0, r4
 800bf04:	f000 fce6 	bl	800c8d4 <__lshift>
 800bf08:	4606      	mov	r6, r0
 800bf0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d072      	beq.n	800bff6 <_dtoa_r+0x926>
 800bf10:	4631      	mov	r1, r6
 800bf12:	4650      	mov	r0, sl
 800bf14:	f000 fd4a 	bl	800c9ac <__mcmp>
 800bf18:	2800      	cmp	r0, #0
 800bf1a:	da6c      	bge.n	800bff6 <_dtoa_r+0x926>
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	4651      	mov	r1, sl
 800bf20:	220a      	movs	r2, #10
 800bf22:	4620      	mov	r0, r4
 800bf24:	f000 fb28 	bl	800c578 <__multadd>
 800bf28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bf2e:	4682      	mov	sl, r0
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	f000 81b0 	beq.w	800c296 <_dtoa_r+0xbc6>
 800bf36:	2300      	movs	r3, #0
 800bf38:	4639      	mov	r1, r7
 800bf3a:	220a      	movs	r2, #10
 800bf3c:	4620      	mov	r0, r4
 800bf3e:	f000 fb1b 	bl	800c578 <__multadd>
 800bf42:	9b01      	ldr	r3, [sp, #4]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	4607      	mov	r7, r0
 800bf48:	f300 8096 	bgt.w	800c078 <_dtoa_r+0x9a8>
 800bf4c:	9b07      	ldr	r3, [sp, #28]
 800bf4e:	2b02      	cmp	r3, #2
 800bf50:	dc59      	bgt.n	800c006 <_dtoa_r+0x936>
 800bf52:	e091      	b.n	800c078 <_dtoa_r+0x9a8>
 800bf54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bf5a:	e758      	b.n	800be0e <_dtoa_r+0x73e>
 800bf5c:	9b04      	ldr	r3, [sp, #16]
 800bf5e:	1e5e      	subs	r6, r3, #1
 800bf60:	9b08      	ldr	r3, [sp, #32]
 800bf62:	42b3      	cmp	r3, r6
 800bf64:	bfbf      	itttt	lt
 800bf66:	9b08      	ldrlt	r3, [sp, #32]
 800bf68:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800bf6a:	9608      	strlt	r6, [sp, #32]
 800bf6c:	1af3      	sublt	r3, r6, r3
 800bf6e:	bfb4      	ite	lt
 800bf70:	18d2      	addlt	r2, r2, r3
 800bf72:	1b9e      	subge	r6, r3, r6
 800bf74:	9b04      	ldr	r3, [sp, #16]
 800bf76:	bfbc      	itt	lt
 800bf78:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800bf7a:	2600      	movlt	r6, #0
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	bfb7      	itett	lt
 800bf80:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800bf84:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800bf88:	1a9d      	sublt	r5, r3, r2
 800bf8a:	2300      	movlt	r3, #0
 800bf8c:	e741      	b.n	800be12 <_dtoa_r+0x742>
 800bf8e:	9e08      	ldr	r6, [sp, #32]
 800bf90:	9d05      	ldr	r5, [sp, #20]
 800bf92:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bf94:	e748      	b.n	800be28 <_dtoa_r+0x758>
 800bf96:	9a08      	ldr	r2, [sp, #32]
 800bf98:	e770      	b.n	800be7c <_dtoa_r+0x7ac>
 800bf9a:	9b07      	ldr	r3, [sp, #28]
 800bf9c:	2b01      	cmp	r3, #1
 800bf9e:	dc19      	bgt.n	800bfd4 <_dtoa_r+0x904>
 800bfa0:	9b02      	ldr	r3, [sp, #8]
 800bfa2:	b9bb      	cbnz	r3, 800bfd4 <_dtoa_r+0x904>
 800bfa4:	9b03      	ldr	r3, [sp, #12]
 800bfa6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bfaa:	b99b      	cbnz	r3, 800bfd4 <_dtoa_r+0x904>
 800bfac:	9b03      	ldr	r3, [sp, #12]
 800bfae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bfb2:	0d1b      	lsrs	r3, r3, #20
 800bfb4:	051b      	lsls	r3, r3, #20
 800bfb6:	b183      	cbz	r3, 800bfda <_dtoa_r+0x90a>
 800bfb8:	9b05      	ldr	r3, [sp, #20]
 800bfba:	3301      	adds	r3, #1
 800bfbc:	9305      	str	r3, [sp, #20]
 800bfbe:	9b06      	ldr	r3, [sp, #24]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	9306      	str	r3, [sp, #24]
 800bfc4:	f04f 0801 	mov.w	r8, #1
 800bfc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	f47f af6f 	bne.w	800beae <_dtoa_r+0x7de>
 800bfd0:	2001      	movs	r0, #1
 800bfd2:	e774      	b.n	800bebe <_dtoa_r+0x7ee>
 800bfd4:	f04f 0800 	mov.w	r8, #0
 800bfd8:	e7f6      	b.n	800bfc8 <_dtoa_r+0x8f8>
 800bfda:	4698      	mov	r8, r3
 800bfdc:	e7f4      	b.n	800bfc8 <_dtoa_r+0x8f8>
 800bfde:	d082      	beq.n	800bee6 <_dtoa_r+0x816>
 800bfe0:	9a05      	ldr	r2, [sp, #20]
 800bfe2:	331c      	adds	r3, #28
 800bfe4:	441a      	add	r2, r3
 800bfe6:	9205      	str	r2, [sp, #20]
 800bfe8:	9a06      	ldr	r2, [sp, #24]
 800bfea:	441a      	add	r2, r3
 800bfec:	441d      	add	r5, r3
 800bfee:	9206      	str	r2, [sp, #24]
 800bff0:	e779      	b.n	800bee6 <_dtoa_r+0x816>
 800bff2:	4603      	mov	r3, r0
 800bff4:	e7f4      	b.n	800bfe0 <_dtoa_r+0x910>
 800bff6:	9b04      	ldr	r3, [sp, #16]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	dc37      	bgt.n	800c06c <_dtoa_r+0x99c>
 800bffc:	9b07      	ldr	r3, [sp, #28]
 800bffe:	2b02      	cmp	r3, #2
 800c000:	dd34      	ble.n	800c06c <_dtoa_r+0x99c>
 800c002:	9b04      	ldr	r3, [sp, #16]
 800c004:	9301      	str	r3, [sp, #4]
 800c006:	9b01      	ldr	r3, [sp, #4]
 800c008:	b963      	cbnz	r3, 800c024 <_dtoa_r+0x954>
 800c00a:	4631      	mov	r1, r6
 800c00c:	2205      	movs	r2, #5
 800c00e:	4620      	mov	r0, r4
 800c010:	f000 fab2 	bl	800c578 <__multadd>
 800c014:	4601      	mov	r1, r0
 800c016:	4606      	mov	r6, r0
 800c018:	4650      	mov	r0, sl
 800c01a:	f000 fcc7 	bl	800c9ac <__mcmp>
 800c01e:	2800      	cmp	r0, #0
 800c020:	f73f adbb 	bgt.w	800bb9a <_dtoa_r+0x4ca>
 800c024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c026:	9d00      	ldr	r5, [sp, #0]
 800c028:	ea6f 0b03 	mvn.w	fp, r3
 800c02c:	f04f 0800 	mov.w	r8, #0
 800c030:	4631      	mov	r1, r6
 800c032:	4620      	mov	r0, r4
 800c034:	f000 fa7e 	bl	800c534 <_Bfree>
 800c038:	2f00      	cmp	r7, #0
 800c03a:	f43f aeab 	beq.w	800bd94 <_dtoa_r+0x6c4>
 800c03e:	f1b8 0f00 	cmp.w	r8, #0
 800c042:	d005      	beq.n	800c050 <_dtoa_r+0x980>
 800c044:	45b8      	cmp	r8, r7
 800c046:	d003      	beq.n	800c050 <_dtoa_r+0x980>
 800c048:	4641      	mov	r1, r8
 800c04a:	4620      	mov	r0, r4
 800c04c:	f000 fa72 	bl	800c534 <_Bfree>
 800c050:	4639      	mov	r1, r7
 800c052:	4620      	mov	r0, r4
 800c054:	f000 fa6e 	bl	800c534 <_Bfree>
 800c058:	e69c      	b.n	800bd94 <_dtoa_r+0x6c4>
 800c05a:	2600      	movs	r6, #0
 800c05c:	4637      	mov	r7, r6
 800c05e:	e7e1      	b.n	800c024 <_dtoa_r+0x954>
 800c060:	46bb      	mov	fp, r7
 800c062:	4637      	mov	r7, r6
 800c064:	e599      	b.n	800bb9a <_dtoa_r+0x4ca>
 800c066:	bf00      	nop
 800c068:	40240000 	.word	0x40240000
 800c06c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c06e:	2b00      	cmp	r3, #0
 800c070:	f000 80c8 	beq.w	800c204 <_dtoa_r+0xb34>
 800c074:	9b04      	ldr	r3, [sp, #16]
 800c076:	9301      	str	r3, [sp, #4]
 800c078:	2d00      	cmp	r5, #0
 800c07a:	dd05      	ble.n	800c088 <_dtoa_r+0x9b8>
 800c07c:	4639      	mov	r1, r7
 800c07e:	462a      	mov	r2, r5
 800c080:	4620      	mov	r0, r4
 800c082:	f000 fc27 	bl	800c8d4 <__lshift>
 800c086:	4607      	mov	r7, r0
 800c088:	f1b8 0f00 	cmp.w	r8, #0
 800c08c:	d05b      	beq.n	800c146 <_dtoa_r+0xa76>
 800c08e:	6879      	ldr	r1, [r7, #4]
 800c090:	4620      	mov	r0, r4
 800c092:	f000 fa0f 	bl	800c4b4 <_Balloc>
 800c096:	4605      	mov	r5, r0
 800c098:	b928      	cbnz	r0, 800c0a6 <_dtoa_r+0x9d6>
 800c09a:	4b83      	ldr	r3, [pc, #524]	; (800c2a8 <_dtoa_r+0xbd8>)
 800c09c:	4602      	mov	r2, r0
 800c09e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c0a2:	f7ff bb2e 	b.w	800b702 <_dtoa_r+0x32>
 800c0a6:	693a      	ldr	r2, [r7, #16]
 800c0a8:	3202      	adds	r2, #2
 800c0aa:	0092      	lsls	r2, r2, #2
 800c0ac:	f107 010c 	add.w	r1, r7, #12
 800c0b0:	300c      	adds	r0, #12
 800c0b2:	f000 ffbd 	bl	800d030 <memcpy>
 800c0b6:	2201      	movs	r2, #1
 800c0b8:	4629      	mov	r1, r5
 800c0ba:	4620      	mov	r0, r4
 800c0bc:	f000 fc0a 	bl	800c8d4 <__lshift>
 800c0c0:	9b00      	ldr	r3, [sp, #0]
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	9304      	str	r3, [sp, #16]
 800c0c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0ca:	4413      	add	r3, r2
 800c0cc:	9308      	str	r3, [sp, #32]
 800c0ce:	9b02      	ldr	r3, [sp, #8]
 800c0d0:	f003 0301 	and.w	r3, r3, #1
 800c0d4:	46b8      	mov	r8, r7
 800c0d6:	9306      	str	r3, [sp, #24]
 800c0d8:	4607      	mov	r7, r0
 800c0da:	9b04      	ldr	r3, [sp, #16]
 800c0dc:	4631      	mov	r1, r6
 800c0de:	3b01      	subs	r3, #1
 800c0e0:	4650      	mov	r0, sl
 800c0e2:	9301      	str	r3, [sp, #4]
 800c0e4:	f7ff fa6a 	bl	800b5bc <quorem>
 800c0e8:	4641      	mov	r1, r8
 800c0ea:	9002      	str	r0, [sp, #8]
 800c0ec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c0f0:	4650      	mov	r0, sl
 800c0f2:	f000 fc5b 	bl	800c9ac <__mcmp>
 800c0f6:	463a      	mov	r2, r7
 800c0f8:	9005      	str	r0, [sp, #20]
 800c0fa:	4631      	mov	r1, r6
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	f000 fc71 	bl	800c9e4 <__mdiff>
 800c102:	68c2      	ldr	r2, [r0, #12]
 800c104:	4605      	mov	r5, r0
 800c106:	bb02      	cbnz	r2, 800c14a <_dtoa_r+0xa7a>
 800c108:	4601      	mov	r1, r0
 800c10a:	4650      	mov	r0, sl
 800c10c:	f000 fc4e 	bl	800c9ac <__mcmp>
 800c110:	4602      	mov	r2, r0
 800c112:	4629      	mov	r1, r5
 800c114:	4620      	mov	r0, r4
 800c116:	9209      	str	r2, [sp, #36]	; 0x24
 800c118:	f000 fa0c 	bl	800c534 <_Bfree>
 800c11c:	9b07      	ldr	r3, [sp, #28]
 800c11e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c120:	9d04      	ldr	r5, [sp, #16]
 800c122:	ea43 0102 	orr.w	r1, r3, r2
 800c126:	9b06      	ldr	r3, [sp, #24]
 800c128:	4319      	orrs	r1, r3
 800c12a:	d110      	bne.n	800c14e <_dtoa_r+0xa7e>
 800c12c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c130:	d029      	beq.n	800c186 <_dtoa_r+0xab6>
 800c132:	9b05      	ldr	r3, [sp, #20]
 800c134:	2b00      	cmp	r3, #0
 800c136:	dd02      	ble.n	800c13e <_dtoa_r+0xa6e>
 800c138:	9b02      	ldr	r3, [sp, #8]
 800c13a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c13e:	9b01      	ldr	r3, [sp, #4]
 800c140:	f883 9000 	strb.w	r9, [r3]
 800c144:	e774      	b.n	800c030 <_dtoa_r+0x960>
 800c146:	4638      	mov	r0, r7
 800c148:	e7ba      	b.n	800c0c0 <_dtoa_r+0x9f0>
 800c14a:	2201      	movs	r2, #1
 800c14c:	e7e1      	b.n	800c112 <_dtoa_r+0xa42>
 800c14e:	9b05      	ldr	r3, [sp, #20]
 800c150:	2b00      	cmp	r3, #0
 800c152:	db04      	blt.n	800c15e <_dtoa_r+0xa8e>
 800c154:	9907      	ldr	r1, [sp, #28]
 800c156:	430b      	orrs	r3, r1
 800c158:	9906      	ldr	r1, [sp, #24]
 800c15a:	430b      	orrs	r3, r1
 800c15c:	d120      	bne.n	800c1a0 <_dtoa_r+0xad0>
 800c15e:	2a00      	cmp	r2, #0
 800c160:	dded      	ble.n	800c13e <_dtoa_r+0xa6e>
 800c162:	4651      	mov	r1, sl
 800c164:	2201      	movs	r2, #1
 800c166:	4620      	mov	r0, r4
 800c168:	f000 fbb4 	bl	800c8d4 <__lshift>
 800c16c:	4631      	mov	r1, r6
 800c16e:	4682      	mov	sl, r0
 800c170:	f000 fc1c 	bl	800c9ac <__mcmp>
 800c174:	2800      	cmp	r0, #0
 800c176:	dc03      	bgt.n	800c180 <_dtoa_r+0xab0>
 800c178:	d1e1      	bne.n	800c13e <_dtoa_r+0xa6e>
 800c17a:	f019 0f01 	tst.w	r9, #1
 800c17e:	d0de      	beq.n	800c13e <_dtoa_r+0xa6e>
 800c180:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c184:	d1d8      	bne.n	800c138 <_dtoa_r+0xa68>
 800c186:	9a01      	ldr	r2, [sp, #4]
 800c188:	2339      	movs	r3, #57	; 0x39
 800c18a:	7013      	strb	r3, [r2, #0]
 800c18c:	462b      	mov	r3, r5
 800c18e:	461d      	mov	r5, r3
 800c190:	3b01      	subs	r3, #1
 800c192:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c196:	2a39      	cmp	r2, #57	; 0x39
 800c198:	d06c      	beq.n	800c274 <_dtoa_r+0xba4>
 800c19a:	3201      	adds	r2, #1
 800c19c:	701a      	strb	r2, [r3, #0]
 800c19e:	e747      	b.n	800c030 <_dtoa_r+0x960>
 800c1a0:	2a00      	cmp	r2, #0
 800c1a2:	dd07      	ble.n	800c1b4 <_dtoa_r+0xae4>
 800c1a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c1a8:	d0ed      	beq.n	800c186 <_dtoa_r+0xab6>
 800c1aa:	9a01      	ldr	r2, [sp, #4]
 800c1ac:	f109 0301 	add.w	r3, r9, #1
 800c1b0:	7013      	strb	r3, [r2, #0]
 800c1b2:	e73d      	b.n	800c030 <_dtoa_r+0x960>
 800c1b4:	9b04      	ldr	r3, [sp, #16]
 800c1b6:	9a08      	ldr	r2, [sp, #32]
 800c1b8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d043      	beq.n	800c248 <_dtoa_r+0xb78>
 800c1c0:	4651      	mov	r1, sl
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	220a      	movs	r2, #10
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	f000 f9d6 	bl	800c578 <__multadd>
 800c1cc:	45b8      	cmp	r8, r7
 800c1ce:	4682      	mov	sl, r0
 800c1d0:	f04f 0300 	mov.w	r3, #0
 800c1d4:	f04f 020a 	mov.w	r2, #10
 800c1d8:	4641      	mov	r1, r8
 800c1da:	4620      	mov	r0, r4
 800c1dc:	d107      	bne.n	800c1ee <_dtoa_r+0xb1e>
 800c1de:	f000 f9cb 	bl	800c578 <__multadd>
 800c1e2:	4680      	mov	r8, r0
 800c1e4:	4607      	mov	r7, r0
 800c1e6:	9b04      	ldr	r3, [sp, #16]
 800c1e8:	3301      	adds	r3, #1
 800c1ea:	9304      	str	r3, [sp, #16]
 800c1ec:	e775      	b.n	800c0da <_dtoa_r+0xa0a>
 800c1ee:	f000 f9c3 	bl	800c578 <__multadd>
 800c1f2:	4639      	mov	r1, r7
 800c1f4:	4680      	mov	r8, r0
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	220a      	movs	r2, #10
 800c1fa:	4620      	mov	r0, r4
 800c1fc:	f000 f9bc 	bl	800c578 <__multadd>
 800c200:	4607      	mov	r7, r0
 800c202:	e7f0      	b.n	800c1e6 <_dtoa_r+0xb16>
 800c204:	9b04      	ldr	r3, [sp, #16]
 800c206:	9301      	str	r3, [sp, #4]
 800c208:	9d00      	ldr	r5, [sp, #0]
 800c20a:	4631      	mov	r1, r6
 800c20c:	4650      	mov	r0, sl
 800c20e:	f7ff f9d5 	bl	800b5bc <quorem>
 800c212:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c216:	9b00      	ldr	r3, [sp, #0]
 800c218:	f805 9b01 	strb.w	r9, [r5], #1
 800c21c:	1aea      	subs	r2, r5, r3
 800c21e:	9b01      	ldr	r3, [sp, #4]
 800c220:	4293      	cmp	r3, r2
 800c222:	dd07      	ble.n	800c234 <_dtoa_r+0xb64>
 800c224:	4651      	mov	r1, sl
 800c226:	2300      	movs	r3, #0
 800c228:	220a      	movs	r2, #10
 800c22a:	4620      	mov	r0, r4
 800c22c:	f000 f9a4 	bl	800c578 <__multadd>
 800c230:	4682      	mov	sl, r0
 800c232:	e7ea      	b.n	800c20a <_dtoa_r+0xb3a>
 800c234:	9b01      	ldr	r3, [sp, #4]
 800c236:	2b00      	cmp	r3, #0
 800c238:	bfc8      	it	gt
 800c23a:	461d      	movgt	r5, r3
 800c23c:	9b00      	ldr	r3, [sp, #0]
 800c23e:	bfd8      	it	le
 800c240:	2501      	movle	r5, #1
 800c242:	441d      	add	r5, r3
 800c244:	f04f 0800 	mov.w	r8, #0
 800c248:	4651      	mov	r1, sl
 800c24a:	2201      	movs	r2, #1
 800c24c:	4620      	mov	r0, r4
 800c24e:	f000 fb41 	bl	800c8d4 <__lshift>
 800c252:	4631      	mov	r1, r6
 800c254:	4682      	mov	sl, r0
 800c256:	f000 fba9 	bl	800c9ac <__mcmp>
 800c25a:	2800      	cmp	r0, #0
 800c25c:	dc96      	bgt.n	800c18c <_dtoa_r+0xabc>
 800c25e:	d102      	bne.n	800c266 <_dtoa_r+0xb96>
 800c260:	f019 0f01 	tst.w	r9, #1
 800c264:	d192      	bne.n	800c18c <_dtoa_r+0xabc>
 800c266:	462b      	mov	r3, r5
 800c268:	461d      	mov	r5, r3
 800c26a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c26e:	2a30      	cmp	r2, #48	; 0x30
 800c270:	d0fa      	beq.n	800c268 <_dtoa_r+0xb98>
 800c272:	e6dd      	b.n	800c030 <_dtoa_r+0x960>
 800c274:	9a00      	ldr	r2, [sp, #0]
 800c276:	429a      	cmp	r2, r3
 800c278:	d189      	bne.n	800c18e <_dtoa_r+0xabe>
 800c27a:	f10b 0b01 	add.w	fp, fp, #1
 800c27e:	2331      	movs	r3, #49	; 0x31
 800c280:	e796      	b.n	800c1b0 <_dtoa_r+0xae0>
 800c282:	4b0a      	ldr	r3, [pc, #40]	; (800c2ac <_dtoa_r+0xbdc>)
 800c284:	f7ff ba99 	b.w	800b7ba <_dtoa_r+0xea>
 800c288:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	f47f aa6d 	bne.w	800b76a <_dtoa_r+0x9a>
 800c290:	4b07      	ldr	r3, [pc, #28]	; (800c2b0 <_dtoa_r+0xbe0>)
 800c292:	f7ff ba92 	b.w	800b7ba <_dtoa_r+0xea>
 800c296:	9b01      	ldr	r3, [sp, #4]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	dcb5      	bgt.n	800c208 <_dtoa_r+0xb38>
 800c29c:	9b07      	ldr	r3, [sp, #28]
 800c29e:	2b02      	cmp	r3, #2
 800c2a0:	f73f aeb1 	bgt.w	800c006 <_dtoa_r+0x936>
 800c2a4:	e7b0      	b.n	800c208 <_dtoa_r+0xb38>
 800c2a6:	bf00      	nop
 800c2a8:	0800d9b7 	.word	0x0800d9b7
 800c2ac:	0800d881 	.word	0x0800d881
 800c2b0:	0800d952 	.word	0x0800d952

0800c2b4 <_free_r>:
 800c2b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c2b6:	2900      	cmp	r1, #0
 800c2b8:	d044      	beq.n	800c344 <_free_r+0x90>
 800c2ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2be:	9001      	str	r0, [sp, #4]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	f1a1 0404 	sub.w	r4, r1, #4
 800c2c6:	bfb8      	it	lt
 800c2c8:	18e4      	addlt	r4, r4, r3
 800c2ca:	f000 f8e7 	bl	800c49c <__malloc_lock>
 800c2ce:	4a1e      	ldr	r2, [pc, #120]	; (800c348 <_free_r+0x94>)
 800c2d0:	9801      	ldr	r0, [sp, #4]
 800c2d2:	6813      	ldr	r3, [r2, #0]
 800c2d4:	b933      	cbnz	r3, 800c2e4 <_free_r+0x30>
 800c2d6:	6063      	str	r3, [r4, #4]
 800c2d8:	6014      	str	r4, [r2, #0]
 800c2da:	b003      	add	sp, #12
 800c2dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2e0:	f000 b8e2 	b.w	800c4a8 <__malloc_unlock>
 800c2e4:	42a3      	cmp	r3, r4
 800c2e6:	d908      	bls.n	800c2fa <_free_r+0x46>
 800c2e8:	6825      	ldr	r5, [r4, #0]
 800c2ea:	1961      	adds	r1, r4, r5
 800c2ec:	428b      	cmp	r3, r1
 800c2ee:	bf01      	itttt	eq
 800c2f0:	6819      	ldreq	r1, [r3, #0]
 800c2f2:	685b      	ldreq	r3, [r3, #4]
 800c2f4:	1949      	addeq	r1, r1, r5
 800c2f6:	6021      	streq	r1, [r4, #0]
 800c2f8:	e7ed      	b.n	800c2d6 <_free_r+0x22>
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	b10b      	cbz	r3, 800c304 <_free_r+0x50>
 800c300:	42a3      	cmp	r3, r4
 800c302:	d9fa      	bls.n	800c2fa <_free_r+0x46>
 800c304:	6811      	ldr	r1, [r2, #0]
 800c306:	1855      	adds	r5, r2, r1
 800c308:	42a5      	cmp	r5, r4
 800c30a:	d10b      	bne.n	800c324 <_free_r+0x70>
 800c30c:	6824      	ldr	r4, [r4, #0]
 800c30e:	4421      	add	r1, r4
 800c310:	1854      	adds	r4, r2, r1
 800c312:	42a3      	cmp	r3, r4
 800c314:	6011      	str	r1, [r2, #0]
 800c316:	d1e0      	bne.n	800c2da <_free_r+0x26>
 800c318:	681c      	ldr	r4, [r3, #0]
 800c31a:	685b      	ldr	r3, [r3, #4]
 800c31c:	6053      	str	r3, [r2, #4]
 800c31e:	440c      	add	r4, r1
 800c320:	6014      	str	r4, [r2, #0]
 800c322:	e7da      	b.n	800c2da <_free_r+0x26>
 800c324:	d902      	bls.n	800c32c <_free_r+0x78>
 800c326:	230c      	movs	r3, #12
 800c328:	6003      	str	r3, [r0, #0]
 800c32a:	e7d6      	b.n	800c2da <_free_r+0x26>
 800c32c:	6825      	ldr	r5, [r4, #0]
 800c32e:	1961      	adds	r1, r4, r5
 800c330:	428b      	cmp	r3, r1
 800c332:	bf04      	itt	eq
 800c334:	6819      	ldreq	r1, [r3, #0]
 800c336:	685b      	ldreq	r3, [r3, #4]
 800c338:	6063      	str	r3, [r4, #4]
 800c33a:	bf04      	itt	eq
 800c33c:	1949      	addeq	r1, r1, r5
 800c33e:	6021      	streq	r1, [r4, #0]
 800c340:	6054      	str	r4, [r2, #4]
 800c342:	e7ca      	b.n	800c2da <_free_r+0x26>
 800c344:	b003      	add	sp, #12
 800c346:	bd30      	pop	{r4, r5, pc}
 800c348:	20000958 	.word	0x20000958

0800c34c <malloc>:
 800c34c:	4b02      	ldr	r3, [pc, #8]	; (800c358 <malloc+0xc>)
 800c34e:	4601      	mov	r1, r0
 800c350:	6818      	ldr	r0, [r3, #0]
 800c352:	f000 b823 	b.w	800c39c <_malloc_r>
 800c356:	bf00      	nop
 800c358:	20000120 	.word	0x20000120

0800c35c <sbrk_aligned>:
 800c35c:	b570      	push	{r4, r5, r6, lr}
 800c35e:	4e0e      	ldr	r6, [pc, #56]	; (800c398 <sbrk_aligned+0x3c>)
 800c360:	460c      	mov	r4, r1
 800c362:	6831      	ldr	r1, [r6, #0]
 800c364:	4605      	mov	r5, r0
 800c366:	b911      	cbnz	r1, 800c36e <sbrk_aligned+0x12>
 800c368:	f000 fe52 	bl	800d010 <_sbrk_r>
 800c36c:	6030      	str	r0, [r6, #0]
 800c36e:	4621      	mov	r1, r4
 800c370:	4628      	mov	r0, r5
 800c372:	f000 fe4d 	bl	800d010 <_sbrk_r>
 800c376:	1c43      	adds	r3, r0, #1
 800c378:	d00a      	beq.n	800c390 <sbrk_aligned+0x34>
 800c37a:	1cc4      	adds	r4, r0, #3
 800c37c:	f024 0403 	bic.w	r4, r4, #3
 800c380:	42a0      	cmp	r0, r4
 800c382:	d007      	beq.n	800c394 <sbrk_aligned+0x38>
 800c384:	1a21      	subs	r1, r4, r0
 800c386:	4628      	mov	r0, r5
 800c388:	f000 fe42 	bl	800d010 <_sbrk_r>
 800c38c:	3001      	adds	r0, #1
 800c38e:	d101      	bne.n	800c394 <sbrk_aligned+0x38>
 800c390:	f04f 34ff 	mov.w	r4, #4294967295
 800c394:	4620      	mov	r0, r4
 800c396:	bd70      	pop	{r4, r5, r6, pc}
 800c398:	2000095c 	.word	0x2000095c

0800c39c <_malloc_r>:
 800c39c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3a0:	1ccd      	adds	r5, r1, #3
 800c3a2:	f025 0503 	bic.w	r5, r5, #3
 800c3a6:	3508      	adds	r5, #8
 800c3a8:	2d0c      	cmp	r5, #12
 800c3aa:	bf38      	it	cc
 800c3ac:	250c      	movcc	r5, #12
 800c3ae:	2d00      	cmp	r5, #0
 800c3b0:	4607      	mov	r7, r0
 800c3b2:	db01      	blt.n	800c3b8 <_malloc_r+0x1c>
 800c3b4:	42a9      	cmp	r1, r5
 800c3b6:	d905      	bls.n	800c3c4 <_malloc_r+0x28>
 800c3b8:	230c      	movs	r3, #12
 800c3ba:	603b      	str	r3, [r7, #0]
 800c3bc:	2600      	movs	r6, #0
 800c3be:	4630      	mov	r0, r6
 800c3c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c498 <_malloc_r+0xfc>
 800c3c8:	f000 f868 	bl	800c49c <__malloc_lock>
 800c3cc:	f8d8 3000 	ldr.w	r3, [r8]
 800c3d0:	461c      	mov	r4, r3
 800c3d2:	bb5c      	cbnz	r4, 800c42c <_malloc_r+0x90>
 800c3d4:	4629      	mov	r1, r5
 800c3d6:	4638      	mov	r0, r7
 800c3d8:	f7ff ffc0 	bl	800c35c <sbrk_aligned>
 800c3dc:	1c43      	adds	r3, r0, #1
 800c3de:	4604      	mov	r4, r0
 800c3e0:	d155      	bne.n	800c48e <_malloc_r+0xf2>
 800c3e2:	f8d8 4000 	ldr.w	r4, [r8]
 800c3e6:	4626      	mov	r6, r4
 800c3e8:	2e00      	cmp	r6, #0
 800c3ea:	d145      	bne.n	800c478 <_malloc_r+0xdc>
 800c3ec:	2c00      	cmp	r4, #0
 800c3ee:	d048      	beq.n	800c482 <_malloc_r+0xe6>
 800c3f0:	6823      	ldr	r3, [r4, #0]
 800c3f2:	4631      	mov	r1, r6
 800c3f4:	4638      	mov	r0, r7
 800c3f6:	eb04 0903 	add.w	r9, r4, r3
 800c3fa:	f000 fe09 	bl	800d010 <_sbrk_r>
 800c3fe:	4581      	cmp	r9, r0
 800c400:	d13f      	bne.n	800c482 <_malloc_r+0xe6>
 800c402:	6821      	ldr	r1, [r4, #0]
 800c404:	1a6d      	subs	r5, r5, r1
 800c406:	4629      	mov	r1, r5
 800c408:	4638      	mov	r0, r7
 800c40a:	f7ff ffa7 	bl	800c35c <sbrk_aligned>
 800c40e:	3001      	adds	r0, #1
 800c410:	d037      	beq.n	800c482 <_malloc_r+0xe6>
 800c412:	6823      	ldr	r3, [r4, #0]
 800c414:	442b      	add	r3, r5
 800c416:	6023      	str	r3, [r4, #0]
 800c418:	f8d8 3000 	ldr.w	r3, [r8]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d038      	beq.n	800c492 <_malloc_r+0xf6>
 800c420:	685a      	ldr	r2, [r3, #4]
 800c422:	42a2      	cmp	r2, r4
 800c424:	d12b      	bne.n	800c47e <_malloc_r+0xe2>
 800c426:	2200      	movs	r2, #0
 800c428:	605a      	str	r2, [r3, #4]
 800c42a:	e00f      	b.n	800c44c <_malloc_r+0xb0>
 800c42c:	6822      	ldr	r2, [r4, #0]
 800c42e:	1b52      	subs	r2, r2, r5
 800c430:	d41f      	bmi.n	800c472 <_malloc_r+0xd6>
 800c432:	2a0b      	cmp	r2, #11
 800c434:	d917      	bls.n	800c466 <_malloc_r+0xca>
 800c436:	1961      	adds	r1, r4, r5
 800c438:	42a3      	cmp	r3, r4
 800c43a:	6025      	str	r5, [r4, #0]
 800c43c:	bf18      	it	ne
 800c43e:	6059      	strne	r1, [r3, #4]
 800c440:	6863      	ldr	r3, [r4, #4]
 800c442:	bf08      	it	eq
 800c444:	f8c8 1000 	streq.w	r1, [r8]
 800c448:	5162      	str	r2, [r4, r5]
 800c44a:	604b      	str	r3, [r1, #4]
 800c44c:	4638      	mov	r0, r7
 800c44e:	f104 060b 	add.w	r6, r4, #11
 800c452:	f000 f829 	bl	800c4a8 <__malloc_unlock>
 800c456:	f026 0607 	bic.w	r6, r6, #7
 800c45a:	1d23      	adds	r3, r4, #4
 800c45c:	1af2      	subs	r2, r6, r3
 800c45e:	d0ae      	beq.n	800c3be <_malloc_r+0x22>
 800c460:	1b9b      	subs	r3, r3, r6
 800c462:	50a3      	str	r3, [r4, r2]
 800c464:	e7ab      	b.n	800c3be <_malloc_r+0x22>
 800c466:	42a3      	cmp	r3, r4
 800c468:	6862      	ldr	r2, [r4, #4]
 800c46a:	d1dd      	bne.n	800c428 <_malloc_r+0x8c>
 800c46c:	f8c8 2000 	str.w	r2, [r8]
 800c470:	e7ec      	b.n	800c44c <_malloc_r+0xb0>
 800c472:	4623      	mov	r3, r4
 800c474:	6864      	ldr	r4, [r4, #4]
 800c476:	e7ac      	b.n	800c3d2 <_malloc_r+0x36>
 800c478:	4634      	mov	r4, r6
 800c47a:	6876      	ldr	r6, [r6, #4]
 800c47c:	e7b4      	b.n	800c3e8 <_malloc_r+0x4c>
 800c47e:	4613      	mov	r3, r2
 800c480:	e7cc      	b.n	800c41c <_malloc_r+0x80>
 800c482:	230c      	movs	r3, #12
 800c484:	603b      	str	r3, [r7, #0]
 800c486:	4638      	mov	r0, r7
 800c488:	f000 f80e 	bl	800c4a8 <__malloc_unlock>
 800c48c:	e797      	b.n	800c3be <_malloc_r+0x22>
 800c48e:	6025      	str	r5, [r4, #0]
 800c490:	e7dc      	b.n	800c44c <_malloc_r+0xb0>
 800c492:	605b      	str	r3, [r3, #4]
 800c494:	deff      	udf	#255	; 0xff
 800c496:	bf00      	nop
 800c498:	20000958 	.word	0x20000958

0800c49c <__malloc_lock>:
 800c49c:	4801      	ldr	r0, [pc, #4]	; (800c4a4 <__malloc_lock+0x8>)
 800c49e:	f7ff b86d 	b.w	800b57c <__retarget_lock_acquire_recursive>
 800c4a2:	bf00      	nop
 800c4a4:	20000954 	.word	0x20000954

0800c4a8 <__malloc_unlock>:
 800c4a8:	4801      	ldr	r0, [pc, #4]	; (800c4b0 <__malloc_unlock+0x8>)
 800c4aa:	f7ff b868 	b.w	800b57e <__retarget_lock_release_recursive>
 800c4ae:	bf00      	nop
 800c4b0:	20000954 	.word	0x20000954

0800c4b4 <_Balloc>:
 800c4b4:	b570      	push	{r4, r5, r6, lr}
 800c4b6:	69c6      	ldr	r6, [r0, #28]
 800c4b8:	4604      	mov	r4, r0
 800c4ba:	460d      	mov	r5, r1
 800c4bc:	b976      	cbnz	r6, 800c4dc <_Balloc+0x28>
 800c4be:	2010      	movs	r0, #16
 800c4c0:	f7ff ff44 	bl	800c34c <malloc>
 800c4c4:	4602      	mov	r2, r0
 800c4c6:	61e0      	str	r0, [r4, #28]
 800c4c8:	b920      	cbnz	r0, 800c4d4 <_Balloc+0x20>
 800c4ca:	4b18      	ldr	r3, [pc, #96]	; (800c52c <_Balloc+0x78>)
 800c4cc:	4818      	ldr	r0, [pc, #96]	; (800c530 <_Balloc+0x7c>)
 800c4ce:	216b      	movs	r1, #107	; 0x6b
 800c4d0:	f7ff f856 	bl	800b580 <__assert_func>
 800c4d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4d8:	6006      	str	r6, [r0, #0]
 800c4da:	60c6      	str	r6, [r0, #12]
 800c4dc:	69e6      	ldr	r6, [r4, #28]
 800c4de:	68f3      	ldr	r3, [r6, #12]
 800c4e0:	b183      	cbz	r3, 800c504 <_Balloc+0x50>
 800c4e2:	69e3      	ldr	r3, [r4, #28]
 800c4e4:	68db      	ldr	r3, [r3, #12]
 800c4e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c4ea:	b9b8      	cbnz	r0, 800c51c <_Balloc+0x68>
 800c4ec:	2101      	movs	r1, #1
 800c4ee:	fa01 f605 	lsl.w	r6, r1, r5
 800c4f2:	1d72      	adds	r2, r6, #5
 800c4f4:	0092      	lsls	r2, r2, #2
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	f000 fdaf 	bl	800d05a <_calloc_r>
 800c4fc:	b160      	cbz	r0, 800c518 <_Balloc+0x64>
 800c4fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c502:	e00e      	b.n	800c522 <_Balloc+0x6e>
 800c504:	2221      	movs	r2, #33	; 0x21
 800c506:	2104      	movs	r1, #4
 800c508:	4620      	mov	r0, r4
 800c50a:	f000 fda6 	bl	800d05a <_calloc_r>
 800c50e:	69e3      	ldr	r3, [r4, #28]
 800c510:	60f0      	str	r0, [r6, #12]
 800c512:	68db      	ldr	r3, [r3, #12]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d1e4      	bne.n	800c4e2 <_Balloc+0x2e>
 800c518:	2000      	movs	r0, #0
 800c51a:	bd70      	pop	{r4, r5, r6, pc}
 800c51c:	6802      	ldr	r2, [r0, #0]
 800c51e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c522:	2300      	movs	r3, #0
 800c524:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c528:	e7f7      	b.n	800c51a <_Balloc+0x66>
 800c52a:	bf00      	nop
 800c52c:	0800d8a5 	.word	0x0800d8a5
 800c530:	0800d9c8 	.word	0x0800d9c8

0800c534 <_Bfree>:
 800c534:	b570      	push	{r4, r5, r6, lr}
 800c536:	69c6      	ldr	r6, [r0, #28]
 800c538:	4605      	mov	r5, r0
 800c53a:	460c      	mov	r4, r1
 800c53c:	b976      	cbnz	r6, 800c55c <_Bfree+0x28>
 800c53e:	2010      	movs	r0, #16
 800c540:	f7ff ff04 	bl	800c34c <malloc>
 800c544:	4602      	mov	r2, r0
 800c546:	61e8      	str	r0, [r5, #28]
 800c548:	b920      	cbnz	r0, 800c554 <_Bfree+0x20>
 800c54a:	4b09      	ldr	r3, [pc, #36]	; (800c570 <_Bfree+0x3c>)
 800c54c:	4809      	ldr	r0, [pc, #36]	; (800c574 <_Bfree+0x40>)
 800c54e:	218f      	movs	r1, #143	; 0x8f
 800c550:	f7ff f816 	bl	800b580 <__assert_func>
 800c554:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c558:	6006      	str	r6, [r0, #0]
 800c55a:	60c6      	str	r6, [r0, #12]
 800c55c:	b13c      	cbz	r4, 800c56e <_Bfree+0x3a>
 800c55e:	69eb      	ldr	r3, [r5, #28]
 800c560:	6862      	ldr	r2, [r4, #4]
 800c562:	68db      	ldr	r3, [r3, #12]
 800c564:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c568:	6021      	str	r1, [r4, #0]
 800c56a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c56e:	bd70      	pop	{r4, r5, r6, pc}
 800c570:	0800d8a5 	.word	0x0800d8a5
 800c574:	0800d9c8 	.word	0x0800d9c8

0800c578 <__multadd>:
 800c578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c57c:	690d      	ldr	r5, [r1, #16]
 800c57e:	4607      	mov	r7, r0
 800c580:	460c      	mov	r4, r1
 800c582:	461e      	mov	r6, r3
 800c584:	f101 0c14 	add.w	ip, r1, #20
 800c588:	2000      	movs	r0, #0
 800c58a:	f8dc 3000 	ldr.w	r3, [ip]
 800c58e:	b299      	uxth	r1, r3
 800c590:	fb02 6101 	mla	r1, r2, r1, r6
 800c594:	0c1e      	lsrs	r6, r3, #16
 800c596:	0c0b      	lsrs	r3, r1, #16
 800c598:	fb02 3306 	mla	r3, r2, r6, r3
 800c59c:	b289      	uxth	r1, r1
 800c59e:	3001      	adds	r0, #1
 800c5a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c5a4:	4285      	cmp	r5, r0
 800c5a6:	f84c 1b04 	str.w	r1, [ip], #4
 800c5aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c5ae:	dcec      	bgt.n	800c58a <__multadd+0x12>
 800c5b0:	b30e      	cbz	r6, 800c5f6 <__multadd+0x7e>
 800c5b2:	68a3      	ldr	r3, [r4, #8]
 800c5b4:	42ab      	cmp	r3, r5
 800c5b6:	dc19      	bgt.n	800c5ec <__multadd+0x74>
 800c5b8:	6861      	ldr	r1, [r4, #4]
 800c5ba:	4638      	mov	r0, r7
 800c5bc:	3101      	adds	r1, #1
 800c5be:	f7ff ff79 	bl	800c4b4 <_Balloc>
 800c5c2:	4680      	mov	r8, r0
 800c5c4:	b928      	cbnz	r0, 800c5d2 <__multadd+0x5a>
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	4b0c      	ldr	r3, [pc, #48]	; (800c5fc <__multadd+0x84>)
 800c5ca:	480d      	ldr	r0, [pc, #52]	; (800c600 <__multadd+0x88>)
 800c5cc:	21ba      	movs	r1, #186	; 0xba
 800c5ce:	f7fe ffd7 	bl	800b580 <__assert_func>
 800c5d2:	6922      	ldr	r2, [r4, #16]
 800c5d4:	3202      	adds	r2, #2
 800c5d6:	f104 010c 	add.w	r1, r4, #12
 800c5da:	0092      	lsls	r2, r2, #2
 800c5dc:	300c      	adds	r0, #12
 800c5de:	f000 fd27 	bl	800d030 <memcpy>
 800c5e2:	4621      	mov	r1, r4
 800c5e4:	4638      	mov	r0, r7
 800c5e6:	f7ff ffa5 	bl	800c534 <_Bfree>
 800c5ea:	4644      	mov	r4, r8
 800c5ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c5f0:	3501      	adds	r5, #1
 800c5f2:	615e      	str	r6, [r3, #20]
 800c5f4:	6125      	str	r5, [r4, #16]
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5fc:	0800d9b7 	.word	0x0800d9b7
 800c600:	0800d9c8 	.word	0x0800d9c8

0800c604 <__hi0bits>:
 800c604:	0c03      	lsrs	r3, r0, #16
 800c606:	041b      	lsls	r3, r3, #16
 800c608:	b9d3      	cbnz	r3, 800c640 <__hi0bits+0x3c>
 800c60a:	0400      	lsls	r0, r0, #16
 800c60c:	2310      	movs	r3, #16
 800c60e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c612:	bf04      	itt	eq
 800c614:	0200      	lsleq	r0, r0, #8
 800c616:	3308      	addeq	r3, #8
 800c618:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c61c:	bf04      	itt	eq
 800c61e:	0100      	lsleq	r0, r0, #4
 800c620:	3304      	addeq	r3, #4
 800c622:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c626:	bf04      	itt	eq
 800c628:	0080      	lsleq	r0, r0, #2
 800c62a:	3302      	addeq	r3, #2
 800c62c:	2800      	cmp	r0, #0
 800c62e:	db05      	blt.n	800c63c <__hi0bits+0x38>
 800c630:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c634:	f103 0301 	add.w	r3, r3, #1
 800c638:	bf08      	it	eq
 800c63a:	2320      	moveq	r3, #32
 800c63c:	4618      	mov	r0, r3
 800c63e:	4770      	bx	lr
 800c640:	2300      	movs	r3, #0
 800c642:	e7e4      	b.n	800c60e <__hi0bits+0xa>

0800c644 <__lo0bits>:
 800c644:	6803      	ldr	r3, [r0, #0]
 800c646:	f013 0207 	ands.w	r2, r3, #7
 800c64a:	d00c      	beq.n	800c666 <__lo0bits+0x22>
 800c64c:	07d9      	lsls	r1, r3, #31
 800c64e:	d422      	bmi.n	800c696 <__lo0bits+0x52>
 800c650:	079a      	lsls	r2, r3, #30
 800c652:	bf49      	itett	mi
 800c654:	085b      	lsrmi	r3, r3, #1
 800c656:	089b      	lsrpl	r3, r3, #2
 800c658:	6003      	strmi	r3, [r0, #0]
 800c65a:	2201      	movmi	r2, #1
 800c65c:	bf5c      	itt	pl
 800c65e:	6003      	strpl	r3, [r0, #0]
 800c660:	2202      	movpl	r2, #2
 800c662:	4610      	mov	r0, r2
 800c664:	4770      	bx	lr
 800c666:	b299      	uxth	r1, r3
 800c668:	b909      	cbnz	r1, 800c66e <__lo0bits+0x2a>
 800c66a:	0c1b      	lsrs	r3, r3, #16
 800c66c:	2210      	movs	r2, #16
 800c66e:	b2d9      	uxtb	r1, r3
 800c670:	b909      	cbnz	r1, 800c676 <__lo0bits+0x32>
 800c672:	3208      	adds	r2, #8
 800c674:	0a1b      	lsrs	r3, r3, #8
 800c676:	0719      	lsls	r1, r3, #28
 800c678:	bf04      	itt	eq
 800c67a:	091b      	lsreq	r3, r3, #4
 800c67c:	3204      	addeq	r2, #4
 800c67e:	0799      	lsls	r1, r3, #30
 800c680:	bf04      	itt	eq
 800c682:	089b      	lsreq	r3, r3, #2
 800c684:	3202      	addeq	r2, #2
 800c686:	07d9      	lsls	r1, r3, #31
 800c688:	d403      	bmi.n	800c692 <__lo0bits+0x4e>
 800c68a:	085b      	lsrs	r3, r3, #1
 800c68c:	f102 0201 	add.w	r2, r2, #1
 800c690:	d003      	beq.n	800c69a <__lo0bits+0x56>
 800c692:	6003      	str	r3, [r0, #0]
 800c694:	e7e5      	b.n	800c662 <__lo0bits+0x1e>
 800c696:	2200      	movs	r2, #0
 800c698:	e7e3      	b.n	800c662 <__lo0bits+0x1e>
 800c69a:	2220      	movs	r2, #32
 800c69c:	e7e1      	b.n	800c662 <__lo0bits+0x1e>
	...

0800c6a0 <__i2b>:
 800c6a0:	b510      	push	{r4, lr}
 800c6a2:	460c      	mov	r4, r1
 800c6a4:	2101      	movs	r1, #1
 800c6a6:	f7ff ff05 	bl	800c4b4 <_Balloc>
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	b928      	cbnz	r0, 800c6ba <__i2b+0x1a>
 800c6ae:	4b05      	ldr	r3, [pc, #20]	; (800c6c4 <__i2b+0x24>)
 800c6b0:	4805      	ldr	r0, [pc, #20]	; (800c6c8 <__i2b+0x28>)
 800c6b2:	f240 1145 	movw	r1, #325	; 0x145
 800c6b6:	f7fe ff63 	bl	800b580 <__assert_func>
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	6144      	str	r4, [r0, #20]
 800c6be:	6103      	str	r3, [r0, #16]
 800c6c0:	bd10      	pop	{r4, pc}
 800c6c2:	bf00      	nop
 800c6c4:	0800d9b7 	.word	0x0800d9b7
 800c6c8:	0800d9c8 	.word	0x0800d9c8

0800c6cc <__multiply>:
 800c6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d0:	4691      	mov	r9, r2
 800c6d2:	690a      	ldr	r2, [r1, #16]
 800c6d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	bfb8      	it	lt
 800c6dc:	460b      	movlt	r3, r1
 800c6de:	460c      	mov	r4, r1
 800c6e0:	bfbc      	itt	lt
 800c6e2:	464c      	movlt	r4, r9
 800c6e4:	4699      	movlt	r9, r3
 800c6e6:	6927      	ldr	r7, [r4, #16]
 800c6e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c6ec:	68a3      	ldr	r3, [r4, #8]
 800c6ee:	6861      	ldr	r1, [r4, #4]
 800c6f0:	eb07 060a 	add.w	r6, r7, sl
 800c6f4:	42b3      	cmp	r3, r6
 800c6f6:	b085      	sub	sp, #20
 800c6f8:	bfb8      	it	lt
 800c6fa:	3101      	addlt	r1, #1
 800c6fc:	f7ff feda 	bl	800c4b4 <_Balloc>
 800c700:	b930      	cbnz	r0, 800c710 <__multiply+0x44>
 800c702:	4602      	mov	r2, r0
 800c704:	4b44      	ldr	r3, [pc, #272]	; (800c818 <__multiply+0x14c>)
 800c706:	4845      	ldr	r0, [pc, #276]	; (800c81c <__multiply+0x150>)
 800c708:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c70c:	f7fe ff38 	bl	800b580 <__assert_func>
 800c710:	f100 0514 	add.w	r5, r0, #20
 800c714:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c718:	462b      	mov	r3, r5
 800c71a:	2200      	movs	r2, #0
 800c71c:	4543      	cmp	r3, r8
 800c71e:	d321      	bcc.n	800c764 <__multiply+0x98>
 800c720:	f104 0314 	add.w	r3, r4, #20
 800c724:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c728:	f109 0314 	add.w	r3, r9, #20
 800c72c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c730:	9202      	str	r2, [sp, #8]
 800c732:	1b3a      	subs	r2, r7, r4
 800c734:	3a15      	subs	r2, #21
 800c736:	f022 0203 	bic.w	r2, r2, #3
 800c73a:	3204      	adds	r2, #4
 800c73c:	f104 0115 	add.w	r1, r4, #21
 800c740:	428f      	cmp	r7, r1
 800c742:	bf38      	it	cc
 800c744:	2204      	movcc	r2, #4
 800c746:	9201      	str	r2, [sp, #4]
 800c748:	9a02      	ldr	r2, [sp, #8]
 800c74a:	9303      	str	r3, [sp, #12]
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d80c      	bhi.n	800c76a <__multiply+0x9e>
 800c750:	2e00      	cmp	r6, #0
 800c752:	dd03      	ble.n	800c75c <__multiply+0x90>
 800c754:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d05b      	beq.n	800c814 <__multiply+0x148>
 800c75c:	6106      	str	r6, [r0, #16]
 800c75e:	b005      	add	sp, #20
 800c760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c764:	f843 2b04 	str.w	r2, [r3], #4
 800c768:	e7d8      	b.n	800c71c <__multiply+0x50>
 800c76a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c76e:	f1ba 0f00 	cmp.w	sl, #0
 800c772:	d024      	beq.n	800c7be <__multiply+0xf2>
 800c774:	f104 0e14 	add.w	lr, r4, #20
 800c778:	46a9      	mov	r9, r5
 800c77a:	f04f 0c00 	mov.w	ip, #0
 800c77e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c782:	f8d9 1000 	ldr.w	r1, [r9]
 800c786:	fa1f fb82 	uxth.w	fp, r2
 800c78a:	b289      	uxth	r1, r1
 800c78c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c790:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c794:	f8d9 2000 	ldr.w	r2, [r9]
 800c798:	4461      	add	r1, ip
 800c79a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c79e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c7a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c7a6:	b289      	uxth	r1, r1
 800c7a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c7ac:	4577      	cmp	r7, lr
 800c7ae:	f849 1b04 	str.w	r1, [r9], #4
 800c7b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c7b6:	d8e2      	bhi.n	800c77e <__multiply+0xb2>
 800c7b8:	9a01      	ldr	r2, [sp, #4]
 800c7ba:	f845 c002 	str.w	ip, [r5, r2]
 800c7be:	9a03      	ldr	r2, [sp, #12]
 800c7c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c7c4:	3304      	adds	r3, #4
 800c7c6:	f1b9 0f00 	cmp.w	r9, #0
 800c7ca:	d021      	beq.n	800c810 <__multiply+0x144>
 800c7cc:	6829      	ldr	r1, [r5, #0]
 800c7ce:	f104 0c14 	add.w	ip, r4, #20
 800c7d2:	46ae      	mov	lr, r5
 800c7d4:	f04f 0a00 	mov.w	sl, #0
 800c7d8:	f8bc b000 	ldrh.w	fp, [ip]
 800c7dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c7e0:	fb09 220b 	mla	r2, r9, fp, r2
 800c7e4:	4452      	add	r2, sl
 800c7e6:	b289      	uxth	r1, r1
 800c7e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c7ec:	f84e 1b04 	str.w	r1, [lr], #4
 800c7f0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c7f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c7f8:	f8be 1000 	ldrh.w	r1, [lr]
 800c7fc:	fb09 110a 	mla	r1, r9, sl, r1
 800c800:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c804:	4567      	cmp	r7, ip
 800c806:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c80a:	d8e5      	bhi.n	800c7d8 <__multiply+0x10c>
 800c80c:	9a01      	ldr	r2, [sp, #4]
 800c80e:	50a9      	str	r1, [r5, r2]
 800c810:	3504      	adds	r5, #4
 800c812:	e799      	b.n	800c748 <__multiply+0x7c>
 800c814:	3e01      	subs	r6, #1
 800c816:	e79b      	b.n	800c750 <__multiply+0x84>
 800c818:	0800d9b7 	.word	0x0800d9b7
 800c81c:	0800d9c8 	.word	0x0800d9c8

0800c820 <__pow5mult>:
 800c820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c824:	4615      	mov	r5, r2
 800c826:	f012 0203 	ands.w	r2, r2, #3
 800c82a:	4606      	mov	r6, r0
 800c82c:	460f      	mov	r7, r1
 800c82e:	d007      	beq.n	800c840 <__pow5mult+0x20>
 800c830:	4c25      	ldr	r4, [pc, #148]	; (800c8c8 <__pow5mult+0xa8>)
 800c832:	3a01      	subs	r2, #1
 800c834:	2300      	movs	r3, #0
 800c836:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c83a:	f7ff fe9d 	bl	800c578 <__multadd>
 800c83e:	4607      	mov	r7, r0
 800c840:	10ad      	asrs	r5, r5, #2
 800c842:	d03d      	beq.n	800c8c0 <__pow5mult+0xa0>
 800c844:	69f4      	ldr	r4, [r6, #28]
 800c846:	b97c      	cbnz	r4, 800c868 <__pow5mult+0x48>
 800c848:	2010      	movs	r0, #16
 800c84a:	f7ff fd7f 	bl	800c34c <malloc>
 800c84e:	4602      	mov	r2, r0
 800c850:	61f0      	str	r0, [r6, #28]
 800c852:	b928      	cbnz	r0, 800c860 <__pow5mult+0x40>
 800c854:	4b1d      	ldr	r3, [pc, #116]	; (800c8cc <__pow5mult+0xac>)
 800c856:	481e      	ldr	r0, [pc, #120]	; (800c8d0 <__pow5mult+0xb0>)
 800c858:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c85c:	f7fe fe90 	bl	800b580 <__assert_func>
 800c860:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c864:	6004      	str	r4, [r0, #0]
 800c866:	60c4      	str	r4, [r0, #12]
 800c868:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c86c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c870:	b94c      	cbnz	r4, 800c886 <__pow5mult+0x66>
 800c872:	f240 2171 	movw	r1, #625	; 0x271
 800c876:	4630      	mov	r0, r6
 800c878:	f7ff ff12 	bl	800c6a0 <__i2b>
 800c87c:	2300      	movs	r3, #0
 800c87e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c882:	4604      	mov	r4, r0
 800c884:	6003      	str	r3, [r0, #0]
 800c886:	f04f 0900 	mov.w	r9, #0
 800c88a:	07eb      	lsls	r3, r5, #31
 800c88c:	d50a      	bpl.n	800c8a4 <__pow5mult+0x84>
 800c88e:	4639      	mov	r1, r7
 800c890:	4622      	mov	r2, r4
 800c892:	4630      	mov	r0, r6
 800c894:	f7ff ff1a 	bl	800c6cc <__multiply>
 800c898:	4639      	mov	r1, r7
 800c89a:	4680      	mov	r8, r0
 800c89c:	4630      	mov	r0, r6
 800c89e:	f7ff fe49 	bl	800c534 <_Bfree>
 800c8a2:	4647      	mov	r7, r8
 800c8a4:	106d      	asrs	r5, r5, #1
 800c8a6:	d00b      	beq.n	800c8c0 <__pow5mult+0xa0>
 800c8a8:	6820      	ldr	r0, [r4, #0]
 800c8aa:	b938      	cbnz	r0, 800c8bc <__pow5mult+0x9c>
 800c8ac:	4622      	mov	r2, r4
 800c8ae:	4621      	mov	r1, r4
 800c8b0:	4630      	mov	r0, r6
 800c8b2:	f7ff ff0b 	bl	800c6cc <__multiply>
 800c8b6:	6020      	str	r0, [r4, #0]
 800c8b8:	f8c0 9000 	str.w	r9, [r0]
 800c8bc:	4604      	mov	r4, r0
 800c8be:	e7e4      	b.n	800c88a <__pow5mult+0x6a>
 800c8c0:	4638      	mov	r0, r7
 800c8c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8c6:	bf00      	nop
 800c8c8:	0800db18 	.word	0x0800db18
 800c8cc:	0800d8a5 	.word	0x0800d8a5
 800c8d0:	0800d9c8 	.word	0x0800d9c8

0800c8d4 <__lshift>:
 800c8d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8d8:	460c      	mov	r4, r1
 800c8da:	6849      	ldr	r1, [r1, #4]
 800c8dc:	6923      	ldr	r3, [r4, #16]
 800c8de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c8e2:	68a3      	ldr	r3, [r4, #8]
 800c8e4:	4607      	mov	r7, r0
 800c8e6:	4691      	mov	r9, r2
 800c8e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c8ec:	f108 0601 	add.w	r6, r8, #1
 800c8f0:	42b3      	cmp	r3, r6
 800c8f2:	db0b      	blt.n	800c90c <__lshift+0x38>
 800c8f4:	4638      	mov	r0, r7
 800c8f6:	f7ff fddd 	bl	800c4b4 <_Balloc>
 800c8fa:	4605      	mov	r5, r0
 800c8fc:	b948      	cbnz	r0, 800c912 <__lshift+0x3e>
 800c8fe:	4602      	mov	r2, r0
 800c900:	4b28      	ldr	r3, [pc, #160]	; (800c9a4 <__lshift+0xd0>)
 800c902:	4829      	ldr	r0, [pc, #164]	; (800c9a8 <__lshift+0xd4>)
 800c904:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c908:	f7fe fe3a 	bl	800b580 <__assert_func>
 800c90c:	3101      	adds	r1, #1
 800c90e:	005b      	lsls	r3, r3, #1
 800c910:	e7ee      	b.n	800c8f0 <__lshift+0x1c>
 800c912:	2300      	movs	r3, #0
 800c914:	f100 0114 	add.w	r1, r0, #20
 800c918:	f100 0210 	add.w	r2, r0, #16
 800c91c:	4618      	mov	r0, r3
 800c91e:	4553      	cmp	r3, sl
 800c920:	db33      	blt.n	800c98a <__lshift+0xb6>
 800c922:	6920      	ldr	r0, [r4, #16]
 800c924:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c928:	f104 0314 	add.w	r3, r4, #20
 800c92c:	f019 091f 	ands.w	r9, r9, #31
 800c930:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c934:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c938:	d02b      	beq.n	800c992 <__lshift+0xbe>
 800c93a:	f1c9 0e20 	rsb	lr, r9, #32
 800c93e:	468a      	mov	sl, r1
 800c940:	2200      	movs	r2, #0
 800c942:	6818      	ldr	r0, [r3, #0]
 800c944:	fa00 f009 	lsl.w	r0, r0, r9
 800c948:	4310      	orrs	r0, r2
 800c94a:	f84a 0b04 	str.w	r0, [sl], #4
 800c94e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c952:	459c      	cmp	ip, r3
 800c954:	fa22 f20e 	lsr.w	r2, r2, lr
 800c958:	d8f3      	bhi.n	800c942 <__lshift+0x6e>
 800c95a:	ebac 0304 	sub.w	r3, ip, r4
 800c95e:	3b15      	subs	r3, #21
 800c960:	f023 0303 	bic.w	r3, r3, #3
 800c964:	3304      	adds	r3, #4
 800c966:	f104 0015 	add.w	r0, r4, #21
 800c96a:	4584      	cmp	ip, r0
 800c96c:	bf38      	it	cc
 800c96e:	2304      	movcc	r3, #4
 800c970:	50ca      	str	r2, [r1, r3]
 800c972:	b10a      	cbz	r2, 800c978 <__lshift+0xa4>
 800c974:	f108 0602 	add.w	r6, r8, #2
 800c978:	3e01      	subs	r6, #1
 800c97a:	4638      	mov	r0, r7
 800c97c:	612e      	str	r6, [r5, #16]
 800c97e:	4621      	mov	r1, r4
 800c980:	f7ff fdd8 	bl	800c534 <_Bfree>
 800c984:	4628      	mov	r0, r5
 800c986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c98a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c98e:	3301      	adds	r3, #1
 800c990:	e7c5      	b.n	800c91e <__lshift+0x4a>
 800c992:	3904      	subs	r1, #4
 800c994:	f853 2b04 	ldr.w	r2, [r3], #4
 800c998:	f841 2f04 	str.w	r2, [r1, #4]!
 800c99c:	459c      	cmp	ip, r3
 800c99e:	d8f9      	bhi.n	800c994 <__lshift+0xc0>
 800c9a0:	e7ea      	b.n	800c978 <__lshift+0xa4>
 800c9a2:	bf00      	nop
 800c9a4:	0800d9b7 	.word	0x0800d9b7
 800c9a8:	0800d9c8 	.word	0x0800d9c8

0800c9ac <__mcmp>:
 800c9ac:	b530      	push	{r4, r5, lr}
 800c9ae:	6902      	ldr	r2, [r0, #16]
 800c9b0:	690c      	ldr	r4, [r1, #16]
 800c9b2:	1b12      	subs	r2, r2, r4
 800c9b4:	d10e      	bne.n	800c9d4 <__mcmp+0x28>
 800c9b6:	f100 0314 	add.w	r3, r0, #20
 800c9ba:	3114      	adds	r1, #20
 800c9bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c9c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c9c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c9c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c9cc:	42a5      	cmp	r5, r4
 800c9ce:	d003      	beq.n	800c9d8 <__mcmp+0x2c>
 800c9d0:	d305      	bcc.n	800c9de <__mcmp+0x32>
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	4610      	mov	r0, r2
 800c9d6:	bd30      	pop	{r4, r5, pc}
 800c9d8:	4283      	cmp	r3, r0
 800c9da:	d3f3      	bcc.n	800c9c4 <__mcmp+0x18>
 800c9dc:	e7fa      	b.n	800c9d4 <__mcmp+0x28>
 800c9de:	f04f 32ff 	mov.w	r2, #4294967295
 800c9e2:	e7f7      	b.n	800c9d4 <__mcmp+0x28>

0800c9e4 <__mdiff>:
 800c9e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9e8:	460c      	mov	r4, r1
 800c9ea:	4606      	mov	r6, r0
 800c9ec:	4611      	mov	r1, r2
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	4690      	mov	r8, r2
 800c9f2:	f7ff ffdb 	bl	800c9ac <__mcmp>
 800c9f6:	1e05      	subs	r5, r0, #0
 800c9f8:	d110      	bne.n	800ca1c <__mdiff+0x38>
 800c9fa:	4629      	mov	r1, r5
 800c9fc:	4630      	mov	r0, r6
 800c9fe:	f7ff fd59 	bl	800c4b4 <_Balloc>
 800ca02:	b930      	cbnz	r0, 800ca12 <__mdiff+0x2e>
 800ca04:	4b3a      	ldr	r3, [pc, #232]	; (800caf0 <__mdiff+0x10c>)
 800ca06:	4602      	mov	r2, r0
 800ca08:	f240 2137 	movw	r1, #567	; 0x237
 800ca0c:	4839      	ldr	r0, [pc, #228]	; (800caf4 <__mdiff+0x110>)
 800ca0e:	f7fe fdb7 	bl	800b580 <__assert_func>
 800ca12:	2301      	movs	r3, #1
 800ca14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ca18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca1c:	bfa4      	itt	ge
 800ca1e:	4643      	movge	r3, r8
 800ca20:	46a0      	movge	r8, r4
 800ca22:	4630      	mov	r0, r6
 800ca24:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ca28:	bfa6      	itte	ge
 800ca2a:	461c      	movge	r4, r3
 800ca2c:	2500      	movge	r5, #0
 800ca2e:	2501      	movlt	r5, #1
 800ca30:	f7ff fd40 	bl	800c4b4 <_Balloc>
 800ca34:	b920      	cbnz	r0, 800ca40 <__mdiff+0x5c>
 800ca36:	4b2e      	ldr	r3, [pc, #184]	; (800caf0 <__mdiff+0x10c>)
 800ca38:	4602      	mov	r2, r0
 800ca3a:	f240 2145 	movw	r1, #581	; 0x245
 800ca3e:	e7e5      	b.n	800ca0c <__mdiff+0x28>
 800ca40:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ca44:	6926      	ldr	r6, [r4, #16]
 800ca46:	60c5      	str	r5, [r0, #12]
 800ca48:	f104 0914 	add.w	r9, r4, #20
 800ca4c:	f108 0514 	add.w	r5, r8, #20
 800ca50:	f100 0e14 	add.w	lr, r0, #20
 800ca54:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ca58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ca5c:	f108 0210 	add.w	r2, r8, #16
 800ca60:	46f2      	mov	sl, lr
 800ca62:	2100      	movs	r1, #0
 800ca64:	f859 3b04 	ldr.w	r3, [r9], #4
 800ca68:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ca6c:	fa11 f88b 	uxtah	r8, r1, fp
 800ca70:	b299      	uxth	r1, r3
 800ca72:	0c1b      	lsrs	r3, r3, #16
 800ca74:	eba8 0801 	sub.w	r8, r8, r1
 800ca78:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ca7c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ca80:	fa1f f888 	uxth.w	r8, r8
 800ca84:	1419      	asrs	r1, r3, #16
 800ca86:	454e      	cmp	r6, r9
 800ca88:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ca8c:	f84a 3b04 	str.w	r3, [sl], #4
 800ca90:	d8e8      	bhi.n	800ca64 <__mdiff+0x80>
 800ca92:	1b33      	subs	r3, r6, r4
 800ca94:	3b15      	subs	r3, #21
 800ca96:	f023 0303 	bic.w	r3, r3, #3
 800ca9a:	3304      	adds	r3, #4
 800ca9c:	3415      	adds	r4, #21
 800ca9e:	42a6      	cmp	r6, r4
 800caa0:	bf38      	it	cc
 800caa2:	2304      	movcc	r3, #4
 800caa4:	441d      	add	r5, r3
 800caa6:	4473      	add	r3, lr
 800caa8:	469e      	mov	lr, r3
 800caaa:	462e      	mov	r6, r5
 800caac:	4566      	cmp	r6, ip
 800caae:	d30e      	bcc.n	800cace <__mdiff+0xea>
 800cab0:	f10c 0203 	add.w	r2, ip, #3
 800cab4:	1b52      	subs	r2, r2, r5
 800cab6:	f022 0203 	bic.w	r2, r2, #3
 800caba:	3d03      	subs	r5, #3
 800cabc:	45ac      	cmp	ip, r5
 800cabe:	bf38      	it	cc
 800cac0:	2200      	movcc	r2, #0
 800cac2:	4413      	add	r3, r2
 800cac4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cac8:	b17a      	cbz	r2, 800caea <__mdiff+0x106>
 800caca:	6107      	str	r7, [r0, #16]
 800cacc:	e7a4      	b.n	800ca18 <__mdiff+0x34>
 800cace:	f856 8b04 	ldr.w	r8, [r6], #4
 800cad2:	fa11 f288 	uxtah	r2, r1, r8
 800cad6:	1414      	asrs	r4, r2, #16
 800cad8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cadc:	b292      	uxth	r2, r2
 800cade:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cae2:	f84e 2b04 	str.w	r2, [lr], #4
 800cae6:	1421      	asrs	r1, r4, #16
 800cae8:	e7e0      	b.n	800caac <__mdiff+0xc8>
 800caea:	3f01      	subs	r7, #1
 800caec:	e7ea      	b.n	800cac4 <__mdiff+0xe0>
 800caee:	bf00      	nop
 800caf0:	0800d9b7 	.word	0x0800d9b7
 800caf4:	0800d9c8 	.word	0x0800d9c8

0800caf8 <__d2b>:
 800caf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cafc:	460f      	mov	r7, r1
 800cafe:	2101      	movs	r1, #1
 800cb00:	ec59 8b10 	vmov	r8, r9, d0
 800cb04:	4616      	mov	r6, r2
 800cb06:	f7ff fcd5 	bl	800c4b4 <_Balloc>
 800cb0a:	4604      	mov	r4, r0
 800cb0c:	b930      	cbnz	r0, 800cb1c <__d2b+0x24>
 800cb0e:	4602      	mov	r2, r0
 800cb10:	4b24      	ldr	r3, [pc, #144]	; (800cba4 <__d2b+0xac>)
 800cb12:	4825      	ldr	r0, [pc, #148]	; (800cba8 <__d2b+0xb0>)
 800cb14:	f240 310f 	movw	r1, #783	; 0x30f
 800cb18:	f7fe fd32 	bl	800b580 <__assert_func>
 800cb1c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cb20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb24:	bb2d      	cbnz	r5, 800cb72 <__d2b+0x7a>
 800cb26:	9301      	str	r3, [sp, #4]
 800cb28:	f1b8 0300 	subs.w	r3, r8, #0
 800cb2c:	d026      	beq.n	800cb7c <__d2b+0x84>
 800cb2e:	4668      	mov	r0, sp
 800cb30:	9300      	str	r3, [sp, #0]
 800cb32:	f7ff fd87 	bl	800c644 <__lo0bits>
 800cb36:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cb3a:	b1e8      	cbz	r0, 800cb78 <__d2b+0x80>
 800cb3c:	f1c0 0320 	rsb	r3, r0, #32
 800cb40:	fa02 f303 	lsl.w	r3, r2, r3
 800cb44:	430b      	orrs	r3, r1
 800cb46:	40c2      	lsrs	r2, r0
 800cb48:	6163      	str	r3, [r4, #20]
 800cb4a:	9201      	str	r2, [sp, #4]
 800cb4c:	9b01      	ldr	r3, [sp, #4]
 800cb4e:	61a3      	str	r3, [r4, #24]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	bf14      	ite	ne
 800cb54:	2202      	movne	r2, #2
 800cb56:	2201      	moveq	r2, #1
 800cb58:	6122      	str	r2, [r4, #16]
 800cb5a:	b1bd      	cbz	r5, 800cb8c <__d2b+0x94>
 800cb5c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cb60:	4405      	add	r5, r0
 800cb62:	603d      	str	r5, [r7, #0]
 800cb64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cb68:	6030      	str	r0, [r6, #0]
 800cb6a:	4620      	mov	r0, r4
 800cb6c:	b003      	add	sp, #12
 800cb6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb76:	e7d6      	b.n	800cb26 <__d2b+0x2e>
 800cb78:	6161      	str	r1, [r4, #20]
 800cb7a:	e7e7      	b.n	800cb4c <__d2b+0x54>
 800cb7c:	a801      	add	r0, sp, #4
 800cb7e:	f7ff fd61 	bl	800c644 <__lo0bits>
 800cb82:	9b01      	ldr	r3, [sp, #4]
 800cb84:	6163      	str	r3, [r4, #20]
 800cb86:	3020      	adds	r0, #32
 800cb88:	2201      	movs	r2, #1
 800cb8a:	e7e5      	b.n	800cb58 <__d2b+0x60>
 800cb8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb94:	6038      	str	r0, [r7, #0]
 800cb96:	6918      	ldr	r0, [r3, #16]
 800cb98:	f7ff fd34 	bl	800c604 <__hi0bits>
 800cb9c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cba0:	e7e2      	b.n	800cb68 <__d2b+0x70>
 800cba2:	bf00      	nop
 800cba4:	0800d9b7 	.word	0x0800d9b7
 800cba8:	0800d9c8 	.word	0x0800d9c8

0800cbac <__ssputs_r>:
 800cbac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbb0:	688e      	ldr	r6, [r1, #8]
 800cbb2:	461f      	mov	r7, r3
 800cbb4:	42be      	cmp	r6, r7
 800cbb6:	680b      	ldr	r3, [r1, #0]
 800cbb8:	4682      	mov	sl, r0
 800cbba:	460c      	mov	r4, r1
 800cbbc:	4690      	mov	r8, r2
 800cbbe:	d82c      	bhi.n	800cc1a <__ssputs_r+0x6e>
 800cbc0:	898a      	ldrh	r2, [r1, #12]
 800cbc2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cbc6:	d026      	beq.n	800cc16 <__ssputs_r+0x6a>
 800cbc8:	6965      	ldr	r5, [r4, #20]
 800cbca:	6909      	ldr	r1, [r1, #16]
 800cbcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cbd0:	eba3 0901 	sub.w	r9, r3, r1
 800cbd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cbd8:	1c7b      	adds	r3, r7, #1
 800cbda:	444b      	add	r3, r9
 800cbdc:	106d      	asrs	r5, r5, #1
 800cbde:	429d      	cmp	r5, r3
 800cbe0:	bf38      	it	cc
 800cbe2:	461d      	movcc	r5, r3
 800cbe4:	0553      	lsls	r3, r2, #21
 800cbe6:	d527      	bpl.n	800cc38 <__ssputs_r+0x8c>
 800cbe8:	4629      	mov	r1, r5
 800cbea:	f7ff fbd7 	bl	800c39c <_malloc_r>
 800cbee:	4606      	mov	r6, r0
 800cbf0:	b360      	cbz	r0, 800cc4c <__ssputs_r+0xa0>
 800cbf2:	6921      	ldr	r1, [r4, #16]
 800cbf4:	464a      	mov	r2, r9
 800cbf6:	f000 fa1b 	bl	800d030 <memcpy>
 800cbfa:	89a3      	ldrh	r3, [r4, #12]
 800cbfc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cc00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc04:	81a3      	strh	r3, [r4, #12]
 800cc06:	6126      	str	r6, [r4, #16]
 800cc08:	6165      	str	r5, [r4, #20]
 800cc0a:	444e      	add	r6, r9
 800cc0c:	eba5 0509 	sub.w	r5, r5, r9
 800cc10:	6026      	str	r6, [r4, #0]
 800cc12:	60a5      	str	r5, [r4, #8]
 800cc14:	463e      	mov	r6, r7
 800cc16:	42be      	cmp	r6, r7
 800cc18:	d900      	bls.n	800cc1c <__ssputs_r+0x70>
 800cc1a:	463e      	mov	r6, r7
 800cc1c:	6820      	ldr	r0, [r4, #0]
 800cc1e:	4632      	mov	r2, r6
 800cc20:	4641      	mov	r1, r8
 800cc22:	f000 f9db 	bl	800cfdc <memmove>
 800cc26:	68a3      	ldr	r3, [r4, #8]
 800cc28:	1b9b      	subs	r3, r3, r6
 800cc2a:	60a3      	str	r3, [r4, #8]
 800cc2c:	6823      	ldr	r3, [r4, #0]
 800cc2e:	4433      	add	r3, r6
 800cc30:	6023      	str	r3, [r4, #0]
 800cc32:	2000      	movs	r0, #0
 800cc34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc38:	462a      	mov	r2, r5
 800cc3a:	f000 fa36 	bl	800d0aa <_realloc_r>
 800cc3e:	4606      	mov	r6, r0
 800cc40:	2800      	cmp	r0, #0
 800cc42:	d1e0      	bne.n	800cc06 <__ssputs_r+0x5a>
 800cc44:	6921      	ldr	r1, [r4, #16]
 800cc46:	4650      	mov	r0, sl
 800cc48:	f7ff fb34 	bl	800c2b4 <_free_r>
 800cc4c:	230c      	movs	r3, #12
 800cc4e:	f8ca 3000 	str.w	r3, [sl]
 800cc52:	89a3      	ldrh	r3, [r4, #12]
 800cc54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc58:	81a3      	strh	r3, [r4, #12]
 800cc5a:	f04f 30ff 	mov.w	r0, #4294967295
 800cc5e:	e7e9      	b.n	800cc34 <__ssputs_r+0x88>

0800cc60 <_svfiprintf_r>:
 800cc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc64:	4698      	mov	r8, r3
 800cc66:	898b      	ldrh	r3, [r1, #12]
 800cc68:	061b      	lsls	r3, r3, #24
 800cc6a:	b09d      	sub	sp, #116	; 0x74
 800cc6c:	4607      	mov	r7, r0
 800cc6e:	460d      	mov	r5, r1
 800cc70:	4614      	mov	r4, r2
 800cc72:	d50e      	bpl.n	800cc92 <_svfiprintf_r+0x32>
 800cc74:	690b      	ldr	r3, [r1, #16]
 800cc76:	b963      	cbnz	r3, 800cc92 <_svfiprintf_r+0x32>
 800cc78:	2140      	movs	r1, #64	; 0x40
 800cc7a:	f7ff fb8f 	bl	800c39c <_malloc_r>
 800cc7e:	6028      	str	r0, [r5, #0]
 800cc80:	6128      	str	r0, [r5, #16]
 800cc82:	b920      	cbnz	r0, 800cc8e <_svfiprintf_r+0x2e>
 800cc84:	230c      	movs	r3, #12
 800cc86:	603b      	str	r3, [r7, #0]
 800cc88:	f04f 30ff 	mov.w	r0, #4294967295
 800cc8c:	e0d0      	b.n	800ce30 <_svfiprintf_r+0x1d0>
 800cc8e:	2340      	movs	r3, #64	; 0x40
 800cc90:	616b      	str	r3, [r5, #20]
 800cc92:	2300      	movs	r3, #0
 800cc94:	9309      	str	r3, [sp, #36]	; 0x24
 800cc96:	2320      	movs	r3, #32
 800cc98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc9c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cca0:	2330      	movs	r3, #48	; 0x30
 800cca2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ce48 <_svfiprintf_r+0x1e8>
 800cca6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ccaa:	f04f 0901 	mov.w	r9, #1
 800ccae:	4623      	mov	r3, r4
 800ccb0:	469a      	mov	sl, r3
 800ccb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccb6:	b10a      	cbz	r2, 800ccbc <_svfiprintf_r+0x5c>
 800ccb8:	2a25      	cmp	r2, #37	; 0x25
 800ccba:	d1f9      	bne.n	800ccb0 <_svfiprintf_r+0x50>
 800ccbc:	ebba 0b04 	subs.w	fp, sl, r4
 800ccc0:	d00b      	beq.n	800ccda <_svfiprintf_r+0x7a>
 800ccc2:	465b      	mov	r3, fp
 800ccc4:	4622      	mov	r2, r4
 800ccc6:	4629      	mov	r1, r5
 800ccc8:	4638      	mov	r0, r7
 800ccca:	f7ff ff6f 	bl	800cbac <__ssputs_r>
 800ccce:	3001      	adds	r0, #1
 800ccd0:	f000 80a9 	beq.w	800ce26 <_svfiprintf_r+0x1c6>
 800ccd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ccd6:	445a      	add	r2, fp
 800ccd8:	9209      	str	r2, [sp, #36]	; 0x24
 800ccda:	f89a 3000 	ldrb.w	r3, [sl]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	f000 80a1 	beq.w	800ce26 <_svfiprintf_r+0x1c6>
 800cce4:	2300      	movs	r3, #0
 800cce6:	f04f 32ff 	mov.w	r2, #4294967295
 800ccea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ccee:	f10a 0a01 	add.w	sl, sl, #1
 800ccf2:	9304      	str	r3, [sp, #16]
 800ccf4:	9307      	str	r3, [sp, #28]
 800ccf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ccfa:	931a      	str	r3, [sp, #104]	; 0x68
 800ccfc:	4654      	mov	r4, sl
 800ccfe:	2205      	movs	r2, #5
 800cd00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd04:	4850      	ldr	r0, [pc, #320]	; (800ce48 <_svfiprintf_r+0x1e8>)
 800cd06:	f7f3 fa9b 	bl	8000240 <memchr>
 800cd0a:	9a04      	ldr	r2, [sp, #16]
 800cd0c:	b9d8      	cbnz	r0, 800cd46 <_svfiprintf_r+0xe6>
 800cd0e:	06d0      	lsls	r0, r2, #27
 800cd10:	bf44      	itt	mi
 800cd12:	2320      	movmi	r3, #32
 800cd14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd18:	0711      	lsls	r1, r2, #28
 800cd1a:	bf44      	itt	mi
 800cd1c:	232b      	movmi	r3, #43	; 0x2b
 800cd1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd22:	f89a 3000 	ldrb.w	r3, [sl]
 800cd26:	2b2a      	cmp	r3, #42	; 0x2a
 800cd28:	d015      	beq.n	800cd56 <_svfiprintf_r+0xf6>
 800cd2a:	9a07      	ldr	r2, [sp, #28]
 800cd2c:	4654      	mov	r4, sl
 800cd2e:	2000      	movs	r0, #0
 800cd30:	f04f 0c0a 	mov.w	ip, #10
 800cd34:	4621      	mov	r1, r4
 800cd36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd3a:	3b30      	subs	r3, #48	; 0x30
 800cd3c:	2b09      	cmp	r3, #9
 800cd3e:	d94d      	bls.n	800cddc <_svfiprintf_r+0x17c>
 800cd40:	b1b0      	cbz	r0, 800cd70 <_svfiprintf_r+0x110>
 800cd42:	9207      	str	r2, [sp, #28]
 800cd44:	e014      	b.n	800cd70 <_svfiprintf_r+0x110>
 800cd46:	eba0 0308 	sub.w	r3, r0, r8
 800cd4a:	fa09 f303 	lsl.w	r3, r9, r3
 800cd4e:	4313      	orrs	r3, r2
 800cd50:	9304      	str	r3, [sp, #16]
 800cd52:	46a2      	mov	sl, r4
 800cd54:	e7d2      	b.n	800ccfc <_svfiprintf_r+0x9c>
 800cd56:	9b03      	ldr	r3, [sp, #12]
 800cd58:	1d19      	adds	r1, r3, #4
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	9103      	str	r1, [sp, #12]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	bfbb      	ittet	lt
 800cd62:	425b      	neglt	r3, r3
 800cd64:	f042 0202 	orrlt.w	r2, r2, #2
 800cd68:	9307      	strge	r3, [sp, #28]
 800cd6a:	9307      	strlt	r3, [sp, #28]
 800cd6c:	bfb8      	it	lt
 800cd6e:	9204      	strlt	r2, [sp, #16]
 800cd70:	7823      	ldrb	r3, [r4, #0]
 800cd72:	2b2e      	cmp	r3, #46	; 0x2e
 800cd74:	d10c      	bne.n	800cd90 <_svfiprintf_r+0x130>
 800cd76:	7863      	ldrb	r3, [r4, #1]
 800cd78:	2b2a      	cmp	r3, #42	; 0x2a
 800cd7a:	d134      	bne.n	800cde6 <_svfiprintf_r+0x186>
 800cd7c:	9b03      	ldr	r3, [sp, #12]
 800cd7e:	1d1a      	adds	r2, r3, #4
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	9203      	str	r2, [sp, #12]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	bfb8      	it	lt
 800cd88:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd8c:	3402      	adds	r4, #2
 800cd8e:	9305      	str	r3, [sp, #20]
 800cd90:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ce58 <_svfiprintf_r+0x1f8>
 800cd94:	7821      	ldrb	r1, [r4, #0]
 800cd96:	2203      	movs	r2, #3
 800cd98:	4650      	mov	r0, sl
 800cd9a:	f7f3 fa51 	bl	8000240 <memchr>
 800cd9e:	b138      	cbz	r0, 800cdb0 <_svfiprintf_r+0x150>
 800cda0:	9b04      	ldr	r3, [sp, #16]
 800cda2:	eba0 000a 	sub.w	r0, r0, sl
 800cda6:	2240      	movs	r2, #64	; 0x40
 800cda8:	4082      	lsls	r2, r0
 800cdaa:	4313      	orrs	r3, r2
 800cdac:	3401      	adds	r4, #1
 800cdae:	9304      	str	r3, [sp, #16]
 800cdb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdb4:	4825      	ldr	r0, [pc, #148]	; (800ce4c <_svfiprintf_r+0x1ec>)
 800cdb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cdba:	2206      	movs	r2, #6
 800cdbc:	f7f3 fa40 	bl	8000240 <memchr>
 800cdc0:	2800      	cmp	r0, #0
 800cdc2:	d038      	beq.n	800ce36 <_svfiprintf_r+0x1d6>
 800cdc4:	4b22      	ldr	r3, [pc, #136]	; (800ce50 <_svfiprintf_r+0x1f0>)
 800cdc6:	bb1b      	cbnz	r3, 800ce10 <_svfiprintf_r+0x1b0>
 800cdc8:	9b03      	ldr	r3, [sp, #12]
 800cdca:	3307      	adds	r3, #7
 800cdcc:	f023 0307 	bic.w	r3, r3, #7
 800cdd0:	3308      	adds	r3, #8
 800cdd2:	9303      	str	r3, [sp, #12]
 800cdd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdd6:	4433      	add	r3, r6
 800cdd8:	9309      	str	r3, [sp, #36]	; 0x24
 800cdda:	e768      	b.n	800ccae <_svfiprintf_r+0x4e>
 800cddc:	fb0c 3202 	mla	r2, ip, r2, r3
 800cde0:	460c      	mov	r4, r1
 800cde2:	2001      	movs	r0, #1
 800cde4:	e7a6      	b.n	800cd34 <_svfiprintf_r+0xd4>
 800cde6:	2300      	movs	r3, #0
 800cde8:	3401      	adds	r4, #1
 800cdea:	9305      	str	r3, [sp, #20]
 800cdec:	4619      	mov	r1, r3
 800cdee:	f04f 0c0a 	mov.w	ip, #10
 800cdf2:	4620      	mov	r0, r4
 800cdf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdf8:	3a30      	subs	r2, #48	; 0x30
 800cdfa:	2a09      	cmp	r2, #9
 800cdfc:	d903      	bls.n	800ce06 <_svfiprintf_r+0x1a6>
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d0c6      	beq.n	800cd90 <_svfiprintf_r+0x130>
 800ce02:	9105      	str	r1, [sp, #20]
 800ce04:	e7c4      	b.n	800cd90 <_svfiprintf_r+0x130>
 800ce06:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce0a:	4604      	mov	r4, r0
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	e7f0      	b.n	800cdf2 <_svfiprintf_r+0x192>
 800ce10:	ab03      	add	r3, sp, #12
 800ce12:	9300      	str	r3, [sp, #0]
 800ce14:	462a      	mov	r2, r5
 800ce16:	4b0f      	ldr	r3, [pc, #60]	; (800ce54 <_svfiprintf_r+0x1f4>)
 800ce18:	a904      	add	r1, sp, #16
 800ce1a:	4638      	mov	r0, r7
 800ce1c:	f7fd fdc8 	bl	800a9b0 <_printf_float>
 800ce20:	1c42      	adds	r2, r0, #1
 800ce22:	4606      	mov	r6, r0
 800ce24:	d1d6      	bne.n	800cdd4 <_svfiprintf_r+0x174>
 800ce26:	89ab      	ldrh	r3, [r5, #12]
 800ce28:	065b      	lsls	r3, r3, #25
 800ce2a:	f53f af2d 	bmi.w	800cc88 <_svfiprintf_r+0x28>
 800ce2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce30:	b01d      	add	sp, #116	; 0x74
 800ce32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce36:	ab03      	add	r3, sp, #12
 800ce38:	9300      	str	r3, [sp, #0]
 800ce3a:	462a      	mov	r2, r5
 800ce3c:	4b05      	ldr	r3, [pc, #20]	; (800ce54 <_svfiprintf_r+0x1f4>)
 800ce3e:	a904      	add	r1, sp, #16
 800ce40:	4638      	mov	r0, r7
 800ce42:	f7fe f859 	bl	800aef8 <_printf_i>
 800ce46:	e7eb      	b.n	800ce20 <_svfiprintf_r+0x1c0>
 800ce48:	0800db24 	.word	0x0800db24
 800ce4c:	0800db2e 	.word	0x0800db2e
 800ce50:	0800a9b1 	.word	0x0800a9b1
 800ce54:	0800cbad 	.word	0x0800cbad
 800ce58:	0800db2a 	.word	0x0800db2a

0800ce5c <__sflush_r>:
 800ce5c:	898a      	ldrh	r2, [r1, #12]
 800ce5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce62:	4605      	mov	r5, r0
 800ce64:	0710      	lsls	r0, r2, #28
 800ce66:	460c      	mov	r4, r1
 800ce68:	d458      	bmi.n	800cf1c <__sflush_r+0xc0>
 800ce6a:	684b      	ldr	r3, [r1, #4]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	dc05      	bgt.n	800ce7c <__sflush_r+0x20>
 800ce70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	dc02      	bgt.n	800ce7c <__sflush_r+0x20>
 800ce76:	2000      	movs	r0, #0
 800ce78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce7e:	2e00      	cmp	r6, #0
 800ce80:	d0f9      	beq.n	800ce76 <__sflush_r+0x1a>
 800ce82:	2300      	movs	r3, #0
 800ce84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ce88:	682f      	ldr	r7, [r5, #0]
 800ce8a:	6a21      	ldr	r1, [r4, #32]
 800ce8c:	602b      	str	r3, [r5, #0]
 800ce8e:	d032      	beq.n	800cef6 <__sflush_r+0x9a>
 800ce90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ce92:	89a3      	ldrh	r3, [r4, #12]
 800ce94:	075a      	lsls	r2, r3, #29
 800ce96:	d505      	bpl.n	800cea4 <__sflush_r+0x48>
 800ce98:	6863      	ldr	r3, [r4, #4]
 800ce9a:	1ac0      	subs	r0, r0, r3
 800ce9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce9e:	b10b      	cbz	r3, 800cea4 <__sflush_r+0x48>
 800cea0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cea2:	1ac0      	subs	r0, r0, r3
 800cea4:	2300      	movs	r3, #0
 800cea6:	4602      	mov	r2, r0
 800cea8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ceaa:	6a21      	ldr	r1, [r4, #32]
 800ceac:	4628      	mov	r0, r5
 800ceae:	47b0      	blx	r6
 800ceb0:	1c43      	adds	r3, r0, #1
 800ceb2:	89a3      	ldrh	r3, [r4, #12]
 800ceb4:	d106      	bne.n	800cec4 <__sflush_r+0x68>
 800ceb6:	6829      	ldr	r1, [r5, #0]
 800ceb8:	291d      	cmp	r1, #29
 800ceba:	d82b      	bhi.n	800cf14 <__sflush_r+0xb8>
 800cebc:	4a29      	ldr	r2, [pc, #164]	; (800cf64 <__sflush_r+0x108>)
 800cebe:	410a      	asrs	r2, r1
 800cec0:	07d6      	lsls	r6, r2, #31
 800cec2:	d427      	bmi.n	800cf14 <__sflush_r+0xb8>
 800cec4:	2200      	movs	r2, #0
 800cec6:	6062      	str	r2, [r4, #4]
 800cec8:	04d9      	lsls	r1, r3, #19
 800ceca:	6922      	ldr	r2, [r4, #16]
 800cecc:	6022      	str	r2, [r4, #0]
 800cece:	d504      	bpl.n	800ceda <__sflush_r+0x7e>
 800ced0:	1c42      	adds	r2, r0, #1
 800ced2:	d101      	bne.n	800ced8 <__sflush_r+0x7c>
 800ced4:	682b      	ldr	r3, [r5, #0]
 800ced6:	b903      	cbnz	r3, 800ceda <__sflush_r+0x7e>
 800ced8:	6560      	str	r0, [r4, #84]	; 0x54
 800ceda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cedc:	602f      	str	r7, [r5, #0]
 800cede:	2900      	cmp	r1, #0
 800cee0:	d0c9      	beq.n	800ce76 <__sflush_r+0x1a>
 800cee2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cee6:	4299      	cmp	r1, r3
 800cee8:	d002      	beq.n	800cef0 <__sflush_r+0x94>
 800ceea:	4628      	mov	r0, r5
 800ceec:	f7ff f9e2 	bl	800c2b4 <_free_r>
 800cef0:	2000      	movs	r0, #0
 800cef2:	6360      	str	r0, [r4, #52]	; 0x34
 800cef4:	e7c0      	b.n	800ce78 <__sflush_r+0x1c>
 800cef6:	2301      	movs	r3, #1
 800cef8:	4628      	mov	r0, r5
 800cefa:	47b0      	blx	r6
 800cefc:	1c41      	adds	r1, r0, #1
 800cefe:	d1c8      	bne.n	800ce92 <__sflush_r+0x36>
 800cf00:	682b      	ldr	r3, [r5, #0]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d0c5      	beq.n	800ce92 <__sflush_r+0x36>
 800cf06:	2b1d      	cmp	r3, #29
 800cf08:	d001      	beq.n	800cf0e <__sflush_r+0xb2>
 800cf0a:	2b16      	cmp	r3, #22
 800cf0c:	d101      	bne.n	800cf12 <__sflush_r+0xb6>
 800cf0e:	602f      	str	r7, [r5, #0]
 800cf10:	e7b1      	b.n	800ce76 <__sflush_r+0x1a>
 800cf12:	89a3      	ldrh	r3, [r4, #12]
 800cf14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf18:	81a3      	strh	r3, [r4, #12]
 800cf1a:	e7ad      	b.n	800ce78 <__sflush_r+0x1c>
 800cf1c:	690f      	ldr	r7, [r1, #16]
 800cf1e:	2f00      	cmp	r7, #0
 800cf20:	d0a9      	beq.n	800ce76 <__sflush_r+0x1a>
 800cf22:	0793      	lsls	r3, r2, #30
 800cf24:	680e      	ldr	r6, [r1, #0]
 800cf26:	bf08      	it	eq
 800cf28:	694b      	ldreq	r3, [r1, #20]
 800cf2a:	600f      	str	r7, [r1, #0]
 800cf2c:	bf18      	it	ne
 800cf2e:	2300      	movne	r3, #0
 800cf30:	eba6 0807 	sub.w	r8, r6, r7
 800cf34:	608b      	str	r3, [r1, #8]
 800cf36:	f1b8 0f00 	cmp.w	r8, #0
 800cf3a:	dd9c      	ble.n	800ce76 <__sflush_r+0x1a>
 800cf3c:	6a21      	ldr	r1, [r4, #32]
 800cf3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cf40:	4643      	mov	r3, r8
 800cf42:	463a      	mov	r2, r7
 800cf44:	4628      	mov	r0, r5
 800cf46:	47b0      	blx	r6
 800cf48:	2800      	cmp	r0, #0
 800cf4a:	dc06      	bgt.n	800cf5a <__sflush_r+0xfe>
 800cf4c:	89a3      	ldrh	r3, [r4, #12]
 800cf4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf52:	81a3      	strh	r3, [r4, #12]
 800cf54:	f04f 30ff 	mov.w	r0, #4294967295
 800cf58:	e78e      	b.n	800ce78 <__sflush_r+0x1c>
 800cf5a:	4407      	add	r7, r0
 800cf5c:	eba8 0800 	sub.w	r8, r8, r0
 800cf60:	e7e9      	b.n	800cf36 <__sflush_r+0xda>
 800cf62:	bf00      	nop
 800cf64:	dfbffffe 	.word	0xdfbffffe

0800cf68 <_fflush_r>:
 800cf68:	b538      	push	{r3, r4, r5, lr}
 800cf6a:	690b      	ldr	r3, [r1, #16]
 800cf6c:	4605      	mov	r5, r0
 800cf6e:	460c      	mov	r4, r1
 800cf70:	b913      	cbnz	r3, 800cf78 <_fflush_r+0x10>
 800cf72:	2500      	movs	r5, #0
 800cf74:	4628      	mov	r0, r5
 800cf76:	bd38      	pop	{r3, r4, r5, pc}
 800cf78:	b118      	cbz	r0, 800cf82 <_fflush_r+0x1a>
 800cf7a:	6a03      	ldr	r3, [r0, #32]
 800cf7c:	b90b      	cbnz	r3, 800cf82 <_fflush_r+0x1a>
 800cf7e:	f7fe f957 	bl	800b230 <__sinit>
 800cf82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d0f3      	beq.n	800cf72 <_fflush_r+0xa>
 800cf8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cf8c:	07d0      	lsls	r0, r2, #31
 800cf8e:	d404      	bmi.n	800cf9a <_fflush_r+0x32>
 800cf90:	0599      	lsls	r1, r3, #22
 800cf92:	d402      	bmi.n	800cf9a <_fflush_r+0x32>
 800cf94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf96:	f7fe faf1 	bl	800b57c <__retarget_lock_acquire_recursive>
 800cf9a:	4628      	mov	r0, r5
 800cf9c:	4621      	mov	r1, r4
 800cf9e:	f7ff ff5d 	bl	800ce5c <__sflush_r>
 800cfa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cfa4:	07da      	lsls	r2, r3, #31
 800cfa6:	4605      	mov	r5, r0
 800cfa8:	d4e4      	bmi.n	800cf74 <_fflush_r+0xc>
 800cfaa:	89a3      	ldrh	r3, [r4, #12]
 800cfac:	059b      	lsls	r3, r3, #22
 800cfae:	d4e1      	bmi.n	800cf74 <_fflush_r+0xc>
 800cfb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cfb2:	f7fe fae4 	bl	800b57e <__retarget_lock_release_recursive>
 800cfb6:	e7dd      	b.n	800cf74 <_fflush_r+0xc>

0800cfb8 <fiprintf>:
 800cfb8:	b40e      	push	{r1, r2, r3}
 800cfba:	b503      	push	{r0, r1, lr}
 800cfbc:	4601      	mov	r1, r0
 800cfbe:	ab03      	add	r3, sp, #12
 800cfc0:	4805      	ldr	r0, [pc, #20]	; (800cfd8 <fiprintf+0x20>)
 800cfc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfc6:	6800      	ldr	r0, [r0, #0]
 800cfc8:	9301      	str	r3, [sp, #4]
 800cfca:	f000 f8d3 	bl	800d174 <_vfiprintf_r>
 800cfce:	b002      	add	sp, #8
 800cfd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfd4:	b003      	add	sp, #12
 800cfd6:	4770      	bx	lr
 800cfd8:	20000120 	.word	0x20000120

0800cfdc <memmove>:
 800cfdc:	4288      	cmp	r0, r1
 800cfde:	b510      	push	{r4, lr}
 800cfe0:	eb01 0402 	add.w	r4, r1, r2
 800cfe4:	d902      	bls.n	800cfec <memmove+0x10>
 800cfe6:	4284      	cmp	r4, r0
 800cfe8:	4623      	mov	r3, r4
 800cfea:	d807      	bhi.n	800cffc <memmove+0x20>
 800cfec:	1e43      	subs	r3, r0, #1
 800cfee:	42a1      	cmp	r1, r4
 800cff0:	d008      	beq.n	800d004 <memmove+0x28>
 800cff2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cff6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cffa:	e7f8      	b.n	800cfee <memmove+0x12>
 800cffc:	4402      	add	r2, r0
 800cffe:	4601      	mov	r1, r0
 800d000:	428a      	cmp	r2, r1
 800d002:	d100      	bne.n	800d006 <memmove+0x2a>
 800d004:	bd10      	pop	{r4, pc}
 800d006:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d00a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d00e:	e7f7      	b.n	800d000 <memmove+0x24>

0800d010 <_sbrk_r>:
 800d010:	b538      	push	{r3, r4, r5, lr}
 800d012:	4d06      	ldr	r5, [pc, #24]	; (800d02c <_sbrk_r+0x1c>)
 800d014:	2300      	movs	r3, #0
 800d016:	4604      	mov	r4, r0
 800d018:	4608      	mov	r0, r1
 800d01a:	602b      	str	r3, [r5, #0]
 800d01c:	f7f4 fd26 	bl	8001a6c <_sbrk>
 800d020:	1c43      	adds	r3, r0, #1
 800d022:	d102      	bne.n	800d02a <_sbrk_r+0x1a>
 800d024:	682b      	ldr	r3, [r5, #0]
 800d026:	b103      	cbz	r3, 800d02a <_sbrk_r+0x1a>
 800d028:	6023      	str	r3, [r4, #0]
 800d02a:	bd38      	pop	{r3, r4, r5, pc}
 800d02c:	20000950 	.word	0x20000950

0800d030 <memcpy>:
 800d030:	440a      	add	r2, r1
 800d032:	4291      	cmp	r1, r2
 800d034:	f100 33ff 	add.w	r3, r0, #4294967295
 800d038:	d100      	bne.n	800d03c <memcpy+0xc>
 800d03a:	4770      	bx	lr
 800d03c:	b510      	push	{r4, lr}
 800d03e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d042:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d046:	4291      	cmp	r1, r2
 800d048:	d1f9      	bne.n	800d03e <memcpy+0xe>
 800d04a:	bd10      	pop	{r4, pc}

0800d04c <abort>:
 800d04c:	b508      	push	{r3, lr}
 800d04e:	2006      	movs	r0, #6
 800d050:	f000 fa68 	bl	800d524 <raise>
 800d054:	2001      	movs	r0, #1
 800d056:	f7f4 fc91 	bl	800197c <_exit>

0800d05a <_calloc_r>:
 800d05a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d05c:	fba1 2402 	umull	r2, r4, r1, r2
 800d060:	b94c      	cbnz	r4, 800d076 <_calloc_r+0x1c>
 800d062:	4611      	mov	r1, r2
 800d064:	9201      	str	r2, [sp, #4]
 800d066:	f7ff f999 	bl	800c39c <_malloc_r>
 800d06a:	9a01      	ldr	r2, [sp, #4]
 800d06c:	4605      	mov	r5, r0
 800d06e:	b930      	cbnz	r0, 800d07e <_calloc_r+0x24>
 800d070:	4628      	mov	r0, r5
 800d072:	b003      	add	sp, #12
 800d074:	bd30      	pop	{r4, r5, pc}
 800d076:	220c      	movs	r2, #12
 800d078:	6002      	str	r2, [r0, #0]
 800d07a:	2500      	movs	r5, #0
 800d07c:	e7f8      	b.n	800d070 <_calloc_r+0x16>
 800d07e:	4621      	mov	r1, r4
 800d080:	f7fe f9a3 	bl	800b3ca <memset>
 800d084:	e7f4      	b.n	800d070 <_calloc_r+0x16>

0800d086 <__ascii_mbtowc>:
 800d086:	b082      	sub	sp, #8
 800d088:	b901      	cbnz	r1, 800d08c <__ascii_mbtowc+0x6>
 800d08a:	a901      	add	r1, sp, #4
 800d08c:	b142      	cbz	r2, 800d0a0 <__ascii_mbtowc+0x1a>
 800d08e:	b14b      	cbz	r3, 800d0a4 <__ascii_mbtowc+0x1e>
 800d090:	7813      	ldrb	r3, [r2, #0]
 800d092:	600b      	str	r3, [r1, #0]
 800d094:	7812      	ldrb	r2, [r2, #0]
 800d096:	1e10      	subs	r0, r2, #0
 800d098:	bf18      	it	ne
 800d09a:	2001      	movne	r0, #1
 800d09c:	b002      	add	sp, #8
 800d09e:	4770      	bx	lr
 800d0a0:	4610      	mov	r0, r2
 800d0a2:	e7fb      	b.n	800d09c <__ascii_mbtowc+0x16>
 800d0a4:	f06f 0001 	mvn.w	r0, #1
 800d0a8:	e7f8      	b.n	800d09c <__ascii_mbtowc+0x16>

0800d0aa <_realloc_r>:
 800d0aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ae:	4680      	mov	r8, r0
 800d0b0:	4614      	mov	r4, r2
 800d0b2:	460e      	mov	r6, r1
 800d0b4:	b921      	cbnz	r1, 800d0c0 <_realloc_r+0x16>
 800d0b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ba:	4611      	mov	r1, r2
 800d0bc:	f7ff b96e 	b.w	800c39c <_malloc_r>
 800d0c0:	b92a      	cbnz	r2, 800d0ce <_realloc_r+0x24>
 800d0c2:	f7ff f8f7 	bl	800c2b4 <_free_r>
 800d0c6:	4625      	mov	r5, r4
 800d0c8:	4628      	mov	r0, r5
 800d0ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0ce:	f000 fa45 	bl	800d55c <_malloc_usable_size_r>
 800d0d2:	4284      	cmp	r4, r0
 800d0d4:	4607      	mov	r7, r0
 800d0d6:	d802      	bhi.n	800d0de <_realloc_r+0x34>
 800d0d8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d0dc:	d812      	bhi.n	800d104 <_realloc_r+0x5a>
 800d0de:	4621      	mov	r1, r4
 800d0e0:	4640      	mov	r0, r8
 800d0e2:	f7ff f95b 	bl	800c39c <_malloc_r>
 800d0e6:	4605      	mov	r5, r0
 800d0e8:	2800      	cmp	r0, #0
 800d0ea:	d0ed      	beq.n	800d0c8 <_realloc_r+0x1e>
 800d0ec:	42bc      	cmp	r4, r7
 800d0ee:	4622      	mov	r2, r4
 800d0f0:	4631      	mov	r1, r6
 800d0f2:	bf28      	it	cs
 800d0f4:	463a      	movcs	r2, r7
 800d0f6:	f7ff ff9b 	bl	800d030 <memcpy>
 800d0fa:	4631      	mov	r1, r6
 800d0fc:	4640      	mov	r0, r8
 800d0fe:	f7ff f8d9 	bl	800c2b4 <_free_r>
 800d102:	e7e1      	b.n	800d0c8 <_realloc_r+0x1e>
 800d104:	4635      	mov	r5, r6
 800d106:	e7df      	b.n	800d0c8 <_realloc_r+0x1e>

0800d108 <__ascii_wctomb>:
 800d108:	b149      	cbz	r1, 800d11e <__ascii_wctomb+0x16>
 800d10a:	2aff      	cmp	r2, #255	; 0xff
 800d10c:	bf85      	ittet	hi
 800d10e:	238a      	movhi	r3, #138	; 0x8a
 800d110:	6003      	strhi	r3, [r0, #0]
 800d112:	700a      	strbls	r2, [r1, #0]
 800d114:	f04f 30ff 	movhi.w	r0, #4294967295
 800d118:	bf98      	it	ls
 800d11a:	2001      	movls	r0, #1
 800d11c:	4770      	bx	lr
 800d11e:	4608      	mov	r0, r1
 800d120:	4770      	bx	lr

0800d122 <__sfputc_r>:
 800d122:	6893      	ldr	r3, [r2, #8]
 800d124:	3b01      	subs	r3, #1
 800d126:	2b00      	cmp	r3, #0
 800d128:	b410      	push	{r4}
 800d12a:	6093      	str	r3, [r2, #8]
 800d12c:	da08      	bge.n	800d140 <__sfputc_r+0x1e>
 800d12e:	6994      	ldr	r4, [r2, #24]
 800d130:	42a3      	cmp	r3, r4
 800d132:	db01      	blt.n	800d138 <__sfputc_r+0x16>
 800d134:	290a      	cmp	r1, #10
 800d136:	d103      	bne.n	800d140 <__sfputc_r+0x1e>
 800d138:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d13c:	f000 b934 	b.w	800d3a8 <__swbuf_r>
 800d140:	6813      	ldr	r3, [r2, #0]
 800d142:	1c58      	adds	r0, r3, #1
 800d144:	6010      	str	r0, [r2, #0]
 800d146:	7019      	strb	r1, [r3, #0]
 800d148:	4608      	mov	r0, r1
 800d14a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d14e:	4770      	bx	lr

0800d150 <__sfputs_r>:
 800d150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d152:	4606      	mov	r6, r0
 800d154:	460f      	mov	r7, r1
 800d156:	4614      	mov	r4, r2
 800d158:	18d5      	adds	r5, r2, r3
 800d15a:	42ac      	cmp	r4, r5
 800d15c:	d101      	bne.n	800d162 <__sfputs_r+0x12>
 800d15e:	2000      	movs	r0, #0
 800d160:	e007      	b.n	800d172 <__sfputs_r+0x22>
 800d162:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d166:	463a      	mov	r2, r7
 800d168:	4630      	mov	r0, r6
 800d16a:	f7ff ffda 	bl	800d122 <__sfputc_r>
 800d16e:	1c43      	adds	r3, r0, #1
 800d170:	d1f3      	bne.n	800d15a <__sfputs_r+0xa>
 800d172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d174 <_vfiprintf_r>:
 800d174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d178:	460d      	mov	r5, r1
 800d17a:	b09d      	sub	sp, #116	; 0x74
 800d17c:	4614      	mov	r4, r2
 800d17e:	4698      	mov	r8, r3
 800d180:	4606      	mov	r6, r0
 800d182:	b118      	cbz	r0, 800d18c <_vfiprintf_r+0x18>
 800d184:	6a03      	ldr	r3, [r0, #32]
 800d186:	b90b      	cbnz	r3, 800d18c <_vfiprintf_r+0x18>
 800d188:	f7fe f852 	bl	800b230 <__sinit>
 800d18c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d18e:	07d9      	lsls	r1, r3, #31
 800d190:	d405      	bmi.n	800d19e <_vfiprintf_r+0x2a>
 800d192:	89ab      	ldrh	r3, [r5, #12]
 800d194:	059a      	lsls	r2, r3, #22
 800d196:	d402      	bmi.n	800d19e <_vfiprintf_r+0x2a>
 800d198:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d19a:	f7fe f9ef 	bl	800b57c <__retarget_lock_acquire_recursive>
 800d19e:	89ab      	ldrh	r3, [r5, #12]
 800d1a0:	071b      	lsls	r3, r3, #28
 800d1a2:	d501      	bpl.n	800d1a8 <_vfiprintf_r+0x34>
 800d1a4:	692b      	ldr	r3, [r5, #16]
 800d1a6:	b99b      	cbnz	r3, 800d1d0 <_vfiprintf_r+0x5c>
 800d1a8:	4629      	mov	r1, r5
 800d1aa:	4630      	mov	r0, r6
 800d1ac:	f000 f93a 	bl	800d424 <__swsetup_r>
 800d1b0:	b170      	cbz	r0, 800d1d0 <_vfiprintf_r+0x5c>
 800d1b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1b4:	07dc      	lsls	r4, r3, #31
 800d1b6:	d504      	bpl.n	800d1c2 <_vfiprintf_r+0x4e>
 800d1b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d1bc:	b01d      	add	sp, #116	; 0x74
 800d1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1c2:	89ab      	ldrh	r3, [r5, #12]
 800d1c4:	0598      	lsls	r0, r3, #22
 800d1c6:	d4f7      	bmi.n	800d1b8 <_vfiprintf_r+0x44>
 800d1c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1ca:	f7fe f9d8 	bl	800b57e <__retarget_lock_release_recursive>
 800d1ce:	e7f3      	b.n	800d1b8 <_vfiprintf_r+0x44>
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	9309      	str	r3, [sp, #36]	; 0x24
 800d1d4:	2320      	movs	r3, #32
 800d1d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1da:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1de:	2330      	movs	r3, #48	; 0x30
 800d1e0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d394 <_vfiprintf_r+0x220>
 800d1e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d1e8:	f04f 0901 	mov.w	r9, #1
 800d1ec:	4623      	mov	r3, r4
 800d1ee:	469a      	mov	sl, r3
 800d1f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1f4:	b10a      	cbz	r2, 800d1fa <_vfiprintf_r+0x86>
 800d1f6:	2a25      	cmp	r2, #37	; 0x25
 800d1f8:	d1f9      	bne.n	800d1ee <_vfiprintf_r+0x7a>
 800d1fa:	ebba 0b04 	subs.w	fp, sl, r4
 800d1fe:	d00b      	beq.n	800d218 <_vfiprintf_r+0xa4>
 800d200:	465b      	mov	r3, fp
 800d202:	4622      	mov	r2, r4
 800d204:	4629      	mov	r1, r5
 800d206:	4630      	mov	r0, r6
 800d208:	f7ff ffa2 	bl	800d150 <__sfputs_r>
 800d20c:	3001      	adds	r0, #1
 800d20e:	f000 80a9 	beq.w	800d364 <_vfiprintf_r+0x1f0>
 800d212:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d214:	445a      	add	r2, fp
 800d216:	9209      	str	r2, [sp, #36]	; 0x24
 800d218:	f89a 3000 	ldrb.w	r3, [sl]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	f000 80a1 	beq.w	800d364 <_vfiprintf_r+0x1f0>
 800d222:	2300      	movs	r3, #0
 800d224:	f04f 32ff 	mov.w	r2, #4294967295
 800d228:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d22c:	f10a 0a01 	add.w	sl, sl, #1
 800d230:	9304      	str	r3, [sp, #16]
 800d232:	9307      	str	r3, [sp, #28]
 800d234:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d238:	931a      	str	r3, [sp, #104]	; 0x68
 800d23a:	4654      	mov	r4, sl
 800d23c:	2205      	movs	r2, #5
 800d23e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d242:	4854      	ldr	r0, [pc, #336]	; (800d394 <_vfiprintf_r+0x220>)
 800d244:	f7f2 fffc 	bl	8000240 <memchr>
 800d248:	9a04      	ldr	r2, [sp, #16]
 800d24a:	b9d8      	cbnz	r0, 800d284 <_vfiprintf_r+0x110>
 800d24c:	06d1      	lsls	r1, r2, #27
 800d24e:	bf44      	itt	mi
 800d250:	2320      	movmi	r3, #32
 800d252:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d256:	0713      	lsls	r3, r2, #28
 800d258:	bf44      	itt	mi
 800d25a:	232b      	movmi	r3, #43	; 0x2b
 800d25c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d260:	f89a 3000 	ldrb.w	r3, [sl]
 800d264:	2b2a      	cmp	r3, #42	; 0x2a
 800d266:	d015      	beq.n	800d294 <_vfiprintf_r+0x120>
 800d268:	9a07      	ldr	r2, [sp, #28]
 800d26a:	4654      	mov	r4, sl
 800d26c:	2000      	movs	r0, #0
 800d26e:	f04f 0c0a 	mov.w	ip, #10
 800d272:	4621      	mov	r1, r4
 800d274:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d278:	3b30      	subs	r3, #48	; 0x30
 800d27a:	2b09      	cmp	r3, #9
 800d27c:	d94d      	bls.n	800d31a <_vfiprintf_r+0x1a6>
 800d27e:	b1b0      	cbz	r0, 800d2ae <_vfiprintf_r+0x13a>
 800d280:	9207      	str	r2, [sp, #28]
 800d282:	e014      	b.n	800d2ae <_vfiprintf_r+0x13a>
 800d284:	eba0 0308 	sub.w	r3, r0, r8
 800d288:	fa09 f303 	lsl.w	r3, r9, r3
 800d28c:	4313      	orrs	r3, r2
 800d28e:	9304      	str	r3, [sp, #16]
 800d290:	46a2      	mov	sl, r4
 800d292:	e7d2      	b.n	800d23a <_vfiprintf_r+0xc6>
 800d294:	9b03      	ldr	r3, [sp, #12]
 800d296:	1d19      	adds	r1, r3, #4
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	9103      	str	r1, [sp, #12]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	bfbb      	ittet	lt
 800d2a0:	425b      	neglt	r3, r3
 800d2a2:	f042 0202 	orrlt.w	r2, r2, #2
 800d2a6:	9307      	strge	r3, [sp, #28]
 800d2a8:	9307      	strlt	r3, [sp, #28]
 800d2aa:	bfb8      	it	lt
 800d2ac:	9204      	strlt	r2, [sp, #16]
 800d2ae:	7823      	ldrb	r3, [r4, #0]
 800d2b0:	2b2e      	cmp	r3, #46	; 0x2e
 800d2b2:	d10c      	bne.n	800d2ce <_vfiprintf_r+0x15a>
 800d2b4:	7863      	ldrb	r3, [r4, #1]
 800d2b6:	2b2a      	cmp	r3, #42	; 0x2a
 800d2b8:	d134      	bne.n	800d324 <_vfiprintf_r+0x1b0>
 800d2ba:	9b03      	ldr	r3, [sp, #12]
 800d2bc:	1d1a      	adds	r2, r3, #4
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	9203      	str	r2, [sp, #12]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	bfb8      	it	lt
 800d2c6:	f04f 33ff 	movlt.w	r3, #4294967295
 800d2ca:	3402      	adds	r4, #2
 800d2cc:	9305      	str	r3, [sp, #20]
 800d2ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d3a4 <_vfiprintf_r+0x230>
 800d2d2:	7821      	ldrb	r1, [r4, #0]
 800d2d4:	2203      	movs	r2, #3
 800d2d6:	4650      	mov	r0, sl
 800d2d8:	f7f2 ffb2 	bl	8000240 <memchr>
 800d2dc:	b138      	cbz	r0, 800d2ee <_vfiprintf_r+0x17a>
 800d2de:	9b04      	ldr	r3, [sp, #16]
 800d2e0:	eba0 000a 	sub.w	r0, r0, sl
 800d2e4:	2240      	movs	r2, #64	; 0x40
 800d2e6:	4082      	lsls	r2, r0
 800d2e8:	4313      	orrs	r3, r2
 800d2ea:	3401      	adds	r4, #1
 800d2ec:	9304      	str	r3, [sp, #16]
 800d2ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2f2:	4829      	ldr	r0, [pc, #164]	; (800d398 <_vfiprintf_r+0x224>)
 800d2f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d2f8:	2206      	movs	r2, #6
 800d2fa:	f7f2 ffa1 	bl	8000240 <memchr>
 800d2fe:	2800      	cmp	r0, #0
 800d300:	d03f      	beq.n	800d382 <_vfiprintf_r+0x20e>
 800d302:	4b26      	ldr	r3, [pc, #152]	; (800d39c <_vfiprintf_r+0x228>)
 800d304:	bb1b      	cbnz	r3, 800d34e <_vfiprintf_r+0x1da>
 800d306:	9b03      	ldr	r3, [sp, #12]
 800d308:	3307      	adds	r3, #7
 800d30a:	f023 0307 	bic.w	r3, r3, #7
 800d30e:	3308      	adds	r3, #8
 800d310:	9303      	str	r3, [sp, #12]
 800d312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d314:	443b      	add	r3, r7
 800d316:	9309      	str	r3, [sp, #36]	; 0x24
 800d318:	e768      	b.n	800d1ec <_vfiprintf_r+0x78>
 800d31a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d31e:	460c      	mov	r4, r1
 800d320:	2001      	movs	r0, #1
 800d322:	e7a6      	b.n	800d272 <_vfiprintf_r+0xfe>
 800d324:	2300      	movs	r3, #0
 800d326:	3401      	adds	r4, #1
 800d328:	9305      	str	r3, [sp, #20]
 800d32a:	4619      	mov	r1, r3
 800d32c:	f04f 0c0a 	mov.w	ip, #10
 800d330:	4620      	mov	r0, r4
 800d332:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d336:	3a30      	subs	r2, #48	; 0x30
 800d338:	2a09      	cmp	r2, #9
 800d33a:	d903      	bls.n	800d344 <_vfiprintf_r+0x1d0>
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d0c6      	beq.n	800d2ce <_vfiprintf_r+0x15a>
 800d340:	9105      	str	r1, [sp, #20]
 800d342:	e7c4      	b.n	800d2ce <_vfiprintf_r+0x15a>
 800d344:	fb0c 2101 	mla	r1, ip, r1, r2
 800d348:	4604      	mov	r4, r0
 800d34a:	2301      	movs	r3, #1
 800d34c:	e7f0      	b.n	800d330 <_vfiprintf_r+0x1bc>
 800d34e:	ab03      	add	r3, sp, #12
 800d350:	9300      	str	r3, [sp, #0]
 800d352:	462a      	mov	r2, r5
 800d354:	4b12      	ldr	r3, [pc, #72]	; (800d3a0 <_vfiprintf_r+0x22c>)
 800d356:	a904      	add	r1, sp, #16
 800d358:	4630      	mov	r0, r6
 800d35a:	f7fd fb29 	bl	800a9b0 <_printf_float>
 800d35e:	4607      	mov	r7, r0
 800d360:	1c78      	adds	r0, r7, #1
 800d362:	d1d6      	bne.n	800d312 <_vfiprintf_r+0x19e>
 800d364:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d366:	07d9      	lsls	r1, r3, #31
 800d368:	d405      	bmi.n	800d376 <_vfiprintf_r+0x202>
 800d36a:	89ab      	ldrh	r3, [r5, #12]
 800d36c:	059a      	lsls	r2, r3, #22
 800d36e:	d402      	bmi.n	800d376 <_vfiprintf_r+0x202>
 800d370:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d372:	f7fe f904 	bl	800b57e <__retarget_lock_release_recursive>
 800d376:	89ab      	ldrh	r3, [r5, #12]
 800d378:	065b      	lsls	r3, r3, #25
 800d37a:	f53f af1d 	bmi.w	800d1b8 <_vfiprintf_r+0x44>
 800d37e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d380:	e71c      	b.n	800d1bc <_vfiprintf_r+0x48>
 800d382:	ab03      	add	r3, sp, #12
 800d384:	9300      	str	r3, [sp, #0]
 800d386:	462a      	mov	r2, r5
 800d388:	4b05      	ldr	r3, [pc, #20]	; (800d3a0 <_vfiprintf_r+0x22c>)
 800d38a:	a904      	add	r1, sp, #16
 800d38c:	4630      	mov	r0, r6
 800d38e:	f7fd fdb3 	bl	800aef8 <_printf_i>
 800d392:	e7e4      	b.n	800d35e <_vfiprintf_r+0x1ea>
 800d394:	0800db24 	.word	0x0800db24
 800d398:	0800db2e 	.word	0x0800db2e
 800d39c:	0800a9b1 	.word	0x0800a9b1
 800d3a0:	0800d151 	.word	0x0800d151
 800d3a4:	0800db2a 	.word	0x0800db2a

0800d3a8 <__swbuf_r>:
 800d3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3aa:	460e      	mov	r6, r1
 800d3ac:	4614      	mov	r4, r2
 800d3ae:	4605      	mov	r5, r0
 800d3b0:	b118      	cbz	r0, 800d3ba <__swbuf_r+0x12>
 800d3b2:	6a03      	ldr	r3, [r0, #32]
 800d3b4:	b90b      	cbnz	r3, 800d3ba <__swbuf_r+0x12>
 800d3b6:	f7fd ff3b 	bl	800b230 <__sinit>
 800d3ba:	69a3      	ldr	r3, [r4, #24]
 800d3bc:	60a3      	str	r3, [r4, #8]
 800d3be:	89a3      	ldrh	r3, [r4, #12]
 800d3c0:	071a      	lsls	r2, r3, #28
 800d3c2:	d525      	bpl.n	800d410 <__swbuf_r+0x68>
 800d3c4:	6923      	ldr	r3, [r4, #16]
 800d3c6:	b31b      	cbz	r3, 800d410 <__swbuf_r+0x68>
 800d3c8:	6823      	ldr	r3, [r4, #0]
 800d3ca:	6922      	ldr	r2, [r4, #16]
 800d3cc:	1a98      	subs	r0, r3, r2
 800d3ce:	6963      	ldr	r3, [r4, #20]
 800d3d0:	b2f6      	uxtb	r6, r6
 800d3d2:	4283      	cmp	r3, r0
 800d3d4:	4637      	mov	r7, r6
 800d3d6:	dc04      	bgt.n	800d3e2 <__swbuf_r+0x3a>
 800d3d8:	4621      	mov	r1, r4
 800d3da:	4628      	mov	r0, r5
 800d3dc:	f7ff fdc4 	bl	800cf68 <_fflush_r>
 800d3e0:	b9e0      	cbnz	r0, 800d41c <__swbuf_r+0x74>
 800d3e2:	68a3      	ldr	r3, [r4, #8]
 800d3e4:	3b01      	subs	r3, #1
 800d3e6:	60a3      	str	r3, [r4, #8]
 800d3e8:	6823      	ldr	r3, [r4, #0]
 800d3ea:	1c5a      	adds	r2, r3, #1
 800d3ec:	6022      	str	r2, [r4, #0]
 800d3ee:	701e      	strb	r6, [r3, #0]
 800d3f0:	6962      	ldr	r2, [r4, #20]
 800d3f2:	1c43      	adds	r3, r0, #1
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d004      	beq.n	800d402 <__swbuf_r+0x5a>
 800d3f8:	89a3      	ldrh	r3, [r4, #12]
 800d3fa:	07db      	lsls	r3, r3, #31
 800d3fc:	d506      	bpl.n	800d40c <__swbuf_r+0x64>
 800d3fe:	2e0a      	cmp	r6, #10
 800d400:	d104      	bne.n	800d40c <__swbuf_r+0x64>
 800d402:	4621      	mov	r1, r4
 800d404:	4628      	mov	r0, r5
 800d406:	f7ff fdaf 	bl	800cf68 <_fflush_r>
 800d40a:	b938      	cbnz	r0, 800d41c <__swbuf_r+0x74>
 800d40c:	4638      	mov	r0, r7
 800d40e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d410:	4621      	mov	r1, r4
 800d412:	4628      	mov	r0, r5
 800d414:	f000 f806 	bl	800d424 <__swsetup_r>
 800d418:	2800      	cmp	r0, #0
 800d41a:	d0d5      	beq.n	800d3c8 <__swbuf_r+0x20>
 800d41c:	f04f 37ff 	mov.w	r7, #4294967295
 800d420:	e7f4      	b.n	800d40c <__swbuf_r+0x64>
	...

0800d424 <__swsetup_r>:
 800d424:	b538      	push	{r3, r4, r5, lr}
 800d426:	4b2a      	ldr	r3, [pc, #168]	; (800d4d0 <__swsetup_r+0xac>)
 800d428:	4605      	mov	r5, r0
 800d42a:	6818      	ldr	r0, [r3, #0]
 800d42c:	460c      	mov	r4, r1
 800d42e:	b118      	cbz	r0, 800d438 <__swsetup_r+0x14>
 800d430:	6a03      	ldr	r3, [r0, #32]
 800d432:	b90b      	cbnz	r3, 800d438 <__swsetup_r+0x14>
 800d434:	f7fd fefc 	bl	800b230 <__sinit>
 800d438:	89a3      	ldrh	r3, [r4, #12]
 800d43a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d43e:	0718      	lsls	r0, r3, #28
 800d440:	d422      	bmi.n	800d488 <__swsetup_r+0x64>
 800d442:	06d9      	lsls	r1, r3, #27
 800d444:	d407      	bmi.n	800d456 <__swsetup_r+0x32>
 800d446:	2309      	movs	r3, #9
 800d448:	602b      	str	r3, [r5, #0]
 800d44a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d44e:	81a3      	strh	r3, [r4, #12]
 800d450:	f04f 30ff 	mov.w	r0, #4294967295
 800d454:	e034      	b.n	800d4c0 <__swsetup_r+0x9c>
 800d456:	0758      	lsls	r0, r3, #29
 800d458:	d512      	bpl.n	800d480 <__swsetup_r+0x5c>
 800d45a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d45c:	b141      	cbz	r1, 800d470 <__swsetup_r+0x4c>
 800d45e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d462:	4299      	cmp	r1, r3
 800d464:	d002      	beq.n	800d46c <__swsetup_r+0x48>
 800d466:	4628      	mov	r0, r5
 800d468:	f7fe ff24 	bl	800c2b4 <_free_r>
 800d46c:	2300      	movs	r3, #0
 800d46e:	6363      	str	r3, [r4, #52]	; 0x34
 800d470:	89a3      	ldrh	r3, [r4, #12]
 800d472:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d476:	81a3      	strh	r3, [r4, #12]
 800d478:	2300      	movs	r3, #0
 800d47a:	6063      	str	r3, [r4, #4]
 800d47c:	6923      	ldr	r3, [r4, #16]
 800d47e:	6023      	str	r3, [r4, #0]
 800d480:	89a3      	ldrh	r3, [r4, #12]
 800d482:	f043 0308 	orr.w	r3, r3, #8
 800d486:	81a3      	strh	r3, [r4, #12]
 800d488:	6923      	ldr	r3, [r4, #16]
 800d48a:	b94b      	cbnz	r3, 800d4a0 <__swsetup_r+0x7c>
 800d48c:	89a3      	ldrh	r3, [r4, #12]
 800d48e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d492:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d496:	d003      	beq.n	800d4a0 <__swsetup_r+0x7c>
 800d498:	4621      	mov	r1, r4
 800d49a:	4628      	mov	r0, r5
 800d49c:	f000 f88c 	bl	800d5b8 <__smakebuf_r>
 800d4a0:	89a0      	ldrh	r0, [r4, #12]
 800d4a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d4a6:	f010 0301 	ands.w	r3, r0, #1
 800d4aa:	d00a      	beq.n	800d4c2 <__swsetup_r+0x9e>
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	60a3      	str	r3, [r4, #8]
 800d4b0:	6963      	ldr	r3, [r4, #20]
 800d4b2:	425b      	negs	r3, r3
 800d4b4:	61a3      	str	r3, [r4, #24]
 800d4b6:	6923      	ldr	r3, [r4, #16]
 800d4b8:	b943      	cbnz	r3, 800d4cc <__swsetup_r+0xa8>
 800d4ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d4be:	d1c4      	bne.n	800d44a <__swsetup_r+0x26>
 800d4c0:	bd38      	pop	{r3, r4, r5, pc}
 800d4c2:	0781      	lsls	r1, r0, #30
 800d4c4:	bf58      	it	pl
 800d4c6:	6963      	ldrpl	r3, [r4, #20]
 800d4c8:	60a3      	str	r3, [r4, #8]
 800d4ca:	e7f4      	b.n	800d4b6 <__swsetup_r+0x92>
 800d4cc:	2000      	movs	r0, #0
 800d4ce:	e7f7      	b.n	800d4c0 <__swsetup_r+0x9c>
 800d4d0:	20000120 	.word	0x20000120

0800d4d4 <_raise_r>:
 800d4d4:	291f      	cmp	r1, #31
 800d4d6:	b538      	push	{r3, r4, r5, lr}
 800d4d8:	4604      	mov	r4, r0
 800d4da:	460d      	mov	r5, r1
 800d4dc:	d904      	bls.n	800d4e8 <_raise_r+0x14>
 800d4de:	2316      	movs	r3, #22
 800d4e0:	6003      	str	r3, [r0, #0]
 800d4e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d4e6:	bd38      	pop	{r3, r4, r5, pc}
 800d4e8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d4ea:	b112      	cbz	r2, 800d4f2 <_raise_r+0x1e>
 800d4ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d4f0:	b94b      	cbnz	r3, 800d506 <_raise_r+0x32>
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	f000 f830 	bl	800d558 <_getpid_r>
 800d4f8:	462a      	mov	r2, r5
 800d4fa:	4601      	mov	r1, r0
 800d4fc:	4620      	mov	r0, r4
 800d4fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d502:	f000 b817 	b.w	800d534 <_kill_r>
 800d506:	2b01      	cmp	r3, #1
 800d508:	d00a      	beq.n	800d520 <_raise_r+0x4c>
 800d50a:	1c59      	adds	r1, r3, #1
 800d50c:	d103      	bne.n	800d516 <_raise_r+0x42>
 800d50e:	2316      	movs	r3, #22
 800d510:	6003      	str	r3, [r0, #0]
 800d512:	2001      	movs	r0, #1
 800d514:	e7e7      	b.n	800d4e6 <_raise_r+0x12>
 800d516:	2400      	movs	r4, #0
 800d518:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d51c:	4628      	mov	r0, r5
 800d51e:	4798      	blx	r3
 800d520:	2000      	movs	r0, #0
 800d522:	e7e0      	b.n	800d4e6 <_raise_r+0x12>

0800d524 <raise>:
 800d524:	4b02      	ldr	r3, [pc, #8]	; (800d530 <raise+0xc>)
 800d526:	4601      	mov	r1, r0
 800d528:	6818      	ldr	r0, [r3, #0]
 800d52a:	f7ff bfd3 	b.w	800d4d4 <_raise_r>
 800d52e:	bf00      	nop
 800d530:	20000120 	.word	0x20000120

0800d534 <_kill_r>:
 800d534:	b538      	push	{r3, r4, r5, lr}
 800d536:	4d07      	ldr	r5, [pc, #28]	; (800d554 <_kill_r+0x20>)
 800d538:	2300      	movs	r3, #0
 800d53a:	4604      	mov	r4, r0
 800d53c:	4608      	mov	r0, r1
 800d53e:	4611      	mov	r1, r2
 800d540:	602b      	str	r3, [r5, #0]
 800d542:	f7f4 fa0b 	bl	800195c <_kill>
 800d546:	1c43      	adds	r3, r0, #1
 800d548:	d102      	bne.n	800d550 <_kill_r+0x1c>
 800d54a:	682b      	ldr	r3, [r5, #0]
 800d54c:	b103      	cbz	r3, 800d550 <_kill_r+0x1c>
 800d54e:	6023      	str	r3, [r4, #0]
 800d550:	bd38      	pop	{r3, r4, r5, pc}
 800d552:	bf00      	nop
 800d554:	20000950 	.word	0x20000950

0800d558 <_getpid_r>:
 800d558:	f7f4 b9f8 	b.w	800194c <_getpid>

0800d55c <_malloc_usable_size_r>:
 800d55c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d560:	1f18      	subs	r0, r3, #4
 800d562:	2b00      	cmp	r3, #0
 800d564:	bfbc      	itt	lt
 800d566:	580b      	ldrlt	r3, [r1, r0]
 800d568:	18c0      	addlt	r0, r0, r3
 800d56a:	4770      	bx	lr

0800d56c <__swhatbuf_r>:
 800d56c:	b570      	push	{r4, r5, r6, lr}
 800d56e:	460c      	mov	r4, r1
 800d570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d574:	2900      	cmp	r1, #0
 800d576:	b096      	sub	sp, #88	; 0x58
 800d578:	4615      	mov	r5, r2
 800d57a:	461e      	mov	r6, r3
 800d57c:	da0d      	bge.n	800d59a <__swhatbuf_r+0x2e>
 800d57e:	89a3      	ldrh	r3, [r4, #12]
 800d580:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d584:	f04f 0100 	mov.w	r1, #0
 800d588:	bf0c      	ite	eq
 800d58a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d58e:	2340      	movne	r3, #64	; 0x40
 800d590:	2000      	movs	r0, #0
 800d592:	6031      	str	r1, [r6, #0]
 800d594:	602b      	str	r3, [r5, #0]
 800d596:	b016      	add	sp, #88	; 0x58
 800d598:	bd70      	pop	{r4, r5, r6, pc}
 800d59a:	466a      	mov	r2, sp
 800d59c:	f000 f848 	bl	800d630 <_fstat_r>
 800d5a0:	2800      	cmp	r0, #0
 800d5a2:	dbec      	blt.n	800d57e <__swhatbuf_r+0x12>
 800d5a4:	9901      	ldr	r1, [sp, #4]
 800d5a6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d5aa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d5ae:	4259      	negs	r1, r3
 800d5b0:	4159      	adcs	r1, r3
 800d5b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5b6:	e7eb      	b.n	800d590 <__swhatbuf_r+0x24>

0800d5b8 <__smakebuf_r>:
 800d5b8:	898b      	ldrh	r3, [r1, #12]
 800d5ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d5bc:	079d      	lsls	r5, r3, #30
 800d5be:	4606      	mov	r6, r0
 800d5c0:	460c      	mov	r4, r1
 800d5c2:	d507      	bpl.n	800d5d4 <__smakebuf_r+0x1c>
 800d5c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d5c8:	6023      	str	r3, [r4, #0]
 800d5ca:	6123      	str	r3, [r4, #16]
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	6163      	str	r3, [r4, #20]
 800d5d0:	b002      	add	sp, #8
 800d5d2:	bd70      	pop	{r4, r5, r6, pc}
 800d5d4:	ab01      	add	r3, sp, #4
 800d5d6:	466a      	mov	r2, sp
 800d5d8:	f7ff ffc8 	bl	800d56c <__swhatbuf_r>
 800d5dc:	9900      	ldr	r1, [sp, #0]
 800d5de:	4605      	mov	r5, r0
 800d5e0:	4630      	mov	r0, r6
 800d5e2:	f7fe fedb 	bl	800c39c <_malloc_r>
 800d5e6:	b948      	cbnz	r0, 800d5fc <__smakebuf_r+0x44>
 800d5e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5ec:	059a      	lsls	r2, r3, #22
 800d5ee:	d4ef      	bmi.n	800d5d0 <__smakebuf_r+0x18>
 800d5f0:	f023 0303 	bic.w	r3, r3, #3
 800d5f4:	f043 0302 	orr.w	r3, r3, #2
 800d5f8:	81a3      	strh	r3, [r4, #12]
 800d5fa:	e7e3      	b.n	800d5c4 <__smakebuf_r+0xc>
 800d5fc:	89a3      	ldrh	r3, [r4, #12]
 800d5fe:	6020      	str	r0, [r4, #0]
 800d600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d604:	81a3      	strh	r3, [r4, #12]
 800d606:	9b00      	ldr	r3, [sp, #0]
 800d608:	6163      	str	r3, [r4, #20]
 800d60a:	9b01      	ldr	r3, [sp, #4]
 800d60c:	6120      	str	r0, [r4, #16]
 800d60e:	b15b      	cbz	r3, 800d628 <__smakebuf_r+0x70>
 800d610:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d614:	4630      	mov	r0, r6
 800d616:	f000 f81d 	bl	800d654 <_isatty_r>
 800d61a:	b128      	cbz	r0, 800d628 <__smakebuf_r+0x70>
 800d61c:	89a3      	ldrh	r3, [r4, #12]
 800d61e:	f023 0303 	bic.w	r3, r3, #3
 800d622:	f043 0301 	orr.w	r3, r3, #1
 800d626:	81a3      	strh	r3, [r4, #12]
 800d628:	89a3      	ldrh	r3, [r4, #12]
 800d62a:	431d      	orrs	r5, r3
 800d62c:	81a5      	strh	r5, [r4, #12]
 800d62e:	e7cf      	b.n	800d5d0 <__smakebuf_r+0x18>

0800d630 <_fstat_r>:
 800d630:	b538      	push	{r3, r4, r5, lr}
 800d632:	4d07      	ldr	r5, [pc, #28]	; (800d650 <_fstat_r+0x20>)
 800d634:	2300      	movs	r3, #0
 800d636:	4604      	mov	r4, r0
 800d638:	4608      	mov	r0, r1
 800d63a:	4611      	mov	r1, r2
 800d63c:	602b      	str	r3, [r5, #0]
 800d63e:	f7f4 f9ec 	bl	8001a1a <_fstat>
 800d642:	1c43      	adds	r3, r0, #1
 800d644:	d102      	bne.n	800d64c <_fstat_r+0x1c>
 800d646:	682b      	ldr	r3, [r5, #0]
 800d648:	b103      	cbz	r3, 800d64c <_fstat_r+0x1c>
 800d64a:	6023      	str	r3, [r4, #0]
 800d64c:	bd38      	pop	{r3, r4, r5, pc}
 800d64e:	bf00      	nop
 800d650:	20000950 	.word	0x20000950

0800d654 <_isatty_r>:
 800d654:	b538      	push	{r3, r4, r5, lr}
 800d656:	4d06      	ldr	r5, [pc, #24]	; (800d670 <_isatty_r+0x1c>)
 800d658:	2300      	movs	r3, #0
 800d65a:	4604      	mov	r4, r0
 800d65c:	4608      	mov	r0, r1
 800d65e:	602b      	str	r3, [r5, #0]
 800d660:	f7f4 f9eb 	bl	8001a3a <_isatty>
 800d664:	1c43      	adds	r3, r0, #1
 800d666:	d102      	bne.n	800d66e <_isatty_r+0x1a>
 800d668:	682b      	ldr	r3, [r5, #0]
 800d66a:	b103      	cbz	r3, 800d66e <_isatty_r+0x1a>
 800d66c:	6023      	str	r3, [r4, #0]
 800d66e:	bd38      	pop	{r3, r4, r5, pc}
 800d670:	20000950 	.word	0x20000950

0800d674 <_init>:
 800d674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d676:	bf00      	nop
 800d678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d67a:	bc08      	pop	{r3}
 800d67c:	469e      	mov	lr, r3
 800d67e:	4770      	bx	lr

0800d680 <_fini>:
 800d680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d682:	bf00      	nop
 800d684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d686:	bc08      	pop	{r3}
 800d688:	469e      	mov	lr, r3
 800d68a:	4770      	bx	lr
