
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e3c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  0800901c  0800901c  0001901c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009180  08009180  00020124  2**0
                  CONTENTS
  4 .ARM          00000008  08009180  08009180  00019180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009188  08009188  00020124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009188  08009188  00019188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800918c  0800918c  0001918c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  08009190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000124  080092b4  00020124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000630  080092b4  00020630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a091  00000000  00000000  00020197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000361d  00000000  00000000  0003a228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f8  00000000  00000000  0003d848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010fc  00000000  00000000  0003ee40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a1e0  00000000  00000000  0003ff3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b1cd  00000000  00000000  0006a11c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001145b9  00000000  00000000  000852e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006848  00000000  00000000  001998a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  001a00ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000124 	.word	0x20000124
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009004 	.word	0x08009004

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000128 	.word	0x20000128
 800021c:	08009004 	.word	0x08009004

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08c      	sub	sp, #48	; 0x30
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2220      	movs	r2, #32
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f007 fc48 	bl	8007e9a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800060a:	4b32      	ldr	r3, [pc, #200]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800060c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000610:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000612:	4b30      	ldr	r3, [pc, #192]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000614:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000618:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061a:	4b2e      	ldr	r3, [pc, #184]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000620:	4b2c      	ldr	r3, [pc, #176]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000626:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800062c:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000632:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000634:	2204      	movs	r2, #4
 8000636:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000638:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800063a:	2200      	movs	r2, #0
 800063c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800063e:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000640:	2200      	movs	r2, #0
 8000642:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000644:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000646:	2201      	movs	r2, #1
 8000648:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064a:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000652:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000654:	2200      	movs	r2, #0
 8000656:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800065a:	2200      	movs	r2, #0
 800065c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800065e:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000660:	2200      	movs	r2, #0
 8000662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000666:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000668:	2200      	movs	r2, #0
 800066a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800066c:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800066e:	2200      	movs	r2, #0
 8000670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000674:	4817      	ldr	r0, [pc, #92]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000676:	f001 faed 	bl	8001c54 <HAL_ADC_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000680:	f000 faa4 	bl	8000bcc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000684:	2300      	movs	r3, #0
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800068c:	4619      	mov	r1, r3
 800068e:	4811      	ldr	r0, [pc, #68]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000690:	f002 f908 	bl	80028a4 <HAL_ADCEx_MultiModeConfigChannel>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800069a:	f000 fa97 	bl	8000bcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_ADC1_Init+0xec>)
 80006a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a2:	2306      	movs	r3, #6
 80006a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006aa:	237f      	movs	r3, #127	; 0x7f
 80006ac:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ae:	2304      	movs	r3, #4
 80006b0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	4619      	mov	r1, r3
 80006ba:	4806      	ldr	r0, [pc, #24]	; (80006d4 <MX_ADC1_Init+0xe8>)
 80006bc:	f001 fc8c 	bl	8001fd8 <HAL_ADC_ConfigChannel>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006c6:	f000 fa81 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	3730      	adds	r7, #48	; 0x30
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000140 	.word	0x20000140
 80006d8:	21800100 	.word	0x21800100

080006dc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006e2:	463b      	mov	r3, r7
 80006e4:	2220      	movs	r2, #32
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f007 fbd6 	bl	8007e9a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006ee:	4b2b      	ldr	r3, [pc, #172]	; (800079c <MX_ADC2_Init+0xc0>)
 80006f0:	4a2b      	ldr	r2, [pc, #172]	; (80007a0 <MX_ADC2_Init+0xc4>)
 80006f2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006f4:	4b29      	ldr	r3, [pc, #164]	; (800079c <MX_ADC2_Init+0xc0>)
 80006f6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006fa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006fc:	4b27      	ldr	r3, [pc, #156]	; (800079c <MX_ADC2_Init+0xc0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000702:	4b26      	ldr	r3, [pc, #152]	; (800079c <MX_ADC2_Init+0xc0>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000708:	4b24      	ldr	r3, [pc, #144]	; (800079c <MX_ADC2_Init+0xc0>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800070e:	4b23      	ldr	r3, [pc, #140]	; (800079c <MX_ADC2_Init+0xc0>)
 8000710:	2200      	movs	r2, #0
 8000712:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000714:	4b21      	ldr	r3, [pc, #132]	; (800079c <MX_ADC2_Init+0xc0>)
 8000716:	2204      	movs	r2, #4
 8000718:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800071a:	4b20      	ldr	r3, [pc, #128]	; (800079c <MX_ADC2_Init+0xc0>)
 800071c:	2200      	movs	r2, #0
 800071e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000720:	4b1e      	ldr	r3, [pc, #120]	; (800079c <MX_ADC2_Init+0xc0>)
 8000722:	2200      	movs	r2, #0
 8000724:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000726:	4b1d      	ldr	r3, [pc, #116]	; (800079c <MX_ADC2_Init+0xc0>)
 8000728:	2201      	movs	r2, #1
 800072a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <MX_ADC2_Init+0xc0>)
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000734:	4b19      	ldr	r3, [pc, #100]	; (800079c <MX_ADC2_Init+0xc0>)
 8000736:	2200      	movs	r2, #0
 8000738:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_ADC2_Init+0xc0>)
 800073c:	2200      	movs	r2, #0
 800073e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000740:	4b16      	ldr	r3, [pc, #88]	; (800079c <MX_ADC2_Init+0xc0>)
 8000742:	2200      	movs	r2, #0
 8000744:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_ADC2_Init+0xc0>)
 800074a:	2200      	movs	r2, #0
 800074c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_ADC2_Init+0xc0>)
 8000750:	2200      	movs	r2, #0
 8000752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000756:	4811      	ldr	r0, [pc, #68]	; (800079c <MX_ADC2_Init+0xc0>)
 8000758:	f001 fa7c 	bl	8001c54 <HAL_ADC_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000762:	f000 fa33 	bl	8000bcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_ADC2_Init+0xc8>)
 8000768:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800076a:	2306      	movs	r3, #6
 800076c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000772:	237f      	movs	r3, #127	; 0x7f
 8000774:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000776:	2304      	movs	r3, #4
 8000778:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800077e:	463b      	mov	r3, r7
 8000780:	4619      	mov	r1, r3
 8000782:	4806      	ldr	r0, [pc, #24]	; (800079c <MX_ADC2_Init+0xc0>)
 8000784:	f001 fc28 	bl	8001fd8 <HAL_ADC_ConfigChannel>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800078e:	f000 fa1d 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	3720      	adds	r7, #32
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200001ac 	.word	0x200001ac
 80007a0:	50000100 	.word	0x50000100
 80007a4:	19200040 	.word	0x19200040

080007a8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b0a4      	sub	sp, #144	; 0x90
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007c4:	2254      	movs	r2, #84	; 0x54
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f007 fb66 	bl	8007e9a <memset>
  if(adcHandle->Instance==ADC1)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007d6:	d174      	bne.n	80008c2 <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007de:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80007e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007e8:	4618      	mov	r0, r3
 80007ea:	f003 fadb 	bl	8003da4 <HAL_RCCEx_PeriphCLKConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80007f4:	f000 f9ea 	bl	8000bcc <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007f8:	4b63      	ldr	r3, [pc, #396]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	3301      	adds	r3, #1
 80007fe:	4a62      	ldr	r2, [pc, #392]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 8000800:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000802:	4b61      	ldr	r3, [pc, #388]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d10b      	bne.n	8000822 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800080a:	4b60      	ldr	r3, [pc, #384]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	4a5f      	ldr	r2, [pc, #380]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000810:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000816:	4b5d      	ldr	r3, [pc, #372]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
 8000820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	4b5a      	ldr	r3, [pc, #360]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	4a59      	ldr	r2, [pc, #356]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082e:	4b57      	ldr	r3, [pc, #348]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	623b      	str	r3, [r7, #32]
 8000838:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b54      	ldr	r3, [pc, #336]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4a53      	ldr	r2, [pc, #332]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4b51      	ldr	r3, [pc, #324]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	61fb      	str	r3, [r7, #28]
 8000850:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	4b4e      	ldr	r3, [pc, #312]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a4d      	ldr	r2, [pc, #308]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b4b      	ldr	r3, [pc, #300]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	61bb      	str	r3, [r7, #24]
 8000868:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 800086a:	2304      	movs	r3, #4
 800086c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800086e:	2303      	movs	r3, #3
 8000870:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800087e:	4619      	mov	r1, r3
 8000880:	4843      	ldr	r0, [pc, #268]	; (8000990 <HAL_ADC_MspInit+0x1e8>)
 8000882:	f002 fab7 	bl	8002df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8000886:	2302      	movs	r3, #2
 8000888:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088a:	2303      	movs	r3, #3
 800088c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800089a:	4619      	mov	r1, r3
 800089c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a0:	f002 faa8 	bl	8002df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008a4:	2303      	movs	r3, #3
 80008a6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a8:	2303      	movs	r3, #3
 80008aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80008b8:	4619      	mov	r1, r3
 80008ba:	4836      	ldr	r0, [pc, #216]	; (8000994 <HAL_ADC_MspInit+0x1ec>)
 80008bc:	f002 fa9a 	bl	8002df4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80008c0:	e05e      	b.n	8000980 <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a34      	ldr	r2, [pc, #208]	; (8000998 <HAL_ADC_MspInit+0x1f0>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d159      	bne.n	8000980 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008d2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008dc:	4618      	mov	r0, r3
 80008de:	f003 fa61 	bl	8003da4 <HAL_RCCEx_PeriphCLKConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <HAL_ADC_MspInit+0x144>
      Error_Handler();
 80008e8:	f000 f970 	bl	8000bcc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008ec:	4b26      	ldr	r3, [pc, #152]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	3301      	adds	r3, #1
 80008f2:	4a25      	ldr	r2, [pc, #148]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 80008f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008f6:	4b24      	ldr	r3, [pc, #144]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d10b      	bne.n	8000916 <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008fe:	4b23      	ldr	r3, [pc, #140]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	4a22      	ldr	r2, [pc, #136]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000904:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090a:	4b20      	ldr	r3, [pc, #128]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000912:	617b      	str	r3, [r7, #20]
 8000914:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	4b1d      	ldr	r3, [pc, #116]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	4a1c      	ldr	r2, [pc, #112]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000922:	4b1a      	ldr	r3, [pc, #104]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b17      	ldr	r3, [pc, #92]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	4a16      	ldr	r2, [pc, #88]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 8000946:	230b      	movs	r3, #11
 8000948:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800094a:	2303      	movs	r3, #3
 800094c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000956:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800095a:	4619      	mov	r1, r3
 800095c:	480c      	ldr	r0, [pc, #48]	; (8000990 <HAL_ADC_MspInit+0x1e8>)
 800095e:	f002 fa49 	bl	8002df4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000962:	2301      	movs	r3, #1
 8000964:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000966:	2303      	movs	r3, #3
 8000968:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000976:	4619      	mov	r1, r3
 8000978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097c:	f002 fa3a 	bl	8002df4 <HAL_GPIO_Init>
}
 8000980:	bf00      	nop
 8000982:	3790      	adds	r7, #144	; 0x90
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000218 	.word	0x20000218
 800098c:	40021000 	.word	0x40021000
 8000990:	48000800 	.word	0x48000800
 8000994:	48000400 	.word	0x48000400
 8000998:	50000100 	.word	0x50000100

0800099c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b2:	4b3f      	ldr	r3, [pc, #252]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	4a3e      	ldr	r2, [pc, #248]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009be:	4b3c      	ldr	r3, [pc, #240]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ca:	4b39      	ldr	r3, [pc, #228]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	4a38      	ldr	r2, [pc, #224]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009d0:	f043 0320 	orr.w	r3, r3, #32
 80009d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d6:	4b36      	ldr	r3, [pc, #216]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	f003 0320 	and.w	r3, r3, #32
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	4b33      	ldr	r3, [pc, #204]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	4a32      	ldr	r2, [pc, #200]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ee:	4b30      	ldr	r3, [pc, #192]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	4b2d      	ldr	r3, [pc, #180]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	4a2c      	ldr	r2, [pc, #176]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a06:	4b2a      	ldr	r3, [pc, #168]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a12:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	4a26      	ldr	r2, [pc, #152]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a18:	f043 0308 	orr.w	r3, r3, #8
 8000a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1e:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	f003 0308 	and.w	r3, r3, #8
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2120      	movs	r1, #32
 8000a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a32:	f002 fb61 	bl	80030f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2104      	movs	r1, #4
 8000a3a:	481e      	ldr	r0, [pc, #120]	; (8000ab4 <MX_GPIO_Init+0x118>)
 8000a3c:	f002 fb5c 	bl	80030f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000a40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	4818      	ldr	r0, [pc, #96]	; (8000ab8 <MX_GPIO_Init+0x11c>)
 8000a58:	f002 f9cc 	bl	8002df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000a5c:	2320      	movs	r3, #32
 8000a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a76:	f002 f9bd 	bl	8002df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4808      	ldr	r0, [pc, #32]	; (8000ab4 <MX_GPIO_Init+0x118>)
 8000a92:	f002 f9af 	bl	8002df4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2028      	movs	r0, #40	; 0x28
 8000a9c:	f002 f8c2 	bl	8002c24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000aa0:	2028      	movs	r0, #40	; 0x28
 8000aa2:	f002 f8d9 	bl	8002c58 <HAL_NVIC_EnableIRQ>

}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	; 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	48000c00 	.word	0x48000c00
 8000ab8:	48000800 	.word	0x48000800

08000abc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac0:	f000 feb7 	bl	8001832 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac4:	f000 f826 	bl	8000b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac8:	f7ff ff68 	bl	800099c <MX_GPIO_Init>
  MX_ADC2_Init();
 8000acc:	f7ff fe06 	bl	80006dc <MX_ADC2_Init>
  MX_ADC1_Init();
 8000ad0:	f7ff fd8c 	bl	80005ec <MX_ADC1_Init>
  MX_TIM1_Init();
 8000ad4:	f000 fa3a 	bl	8000f4c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000ad8:	f000 faea 	bl	80010b0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000adc:	f000 fc1e 	bl	800131c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000ae0:	f000 fc68 	bl	80013b4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	Shell_Init();
 8000ae4:	f000 fd5a 	bl	800159c <Shell_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4809      	ldr	r0, [pc, #36]	; (8000b10 <main+0x54>)
 8000aec:	f003 fcda 	bl	80044a4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000af0:	2100      	movs	r1, #0
 8000af2:	4807      	ldr	r0, [pc, #28]	; (8000b10 <main+0x54>)
 8000af4:	f004 fdbe 	bl	8005674 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000af8:	2104      	movs	r1, #4
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <main+0x54>)
 8000afc:	f003 fcd2 	bl	80044a4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000b00:	2104      	movs	r1, #4
 8000b02:	4803      	ldr	r0, [pc, #12]	; (8000b10 <main+0x54>)
 8000b04:	f004 fdb6 	bl	8005674 <HAL_TIMEx_PWMN_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 8000b08:	f000 fd88 	bl	800161c <Shell_Loop>
	{
 8000b0c:	e7fc      	b.n	8000b08 <main+0x4c>
 8000b0e:	bf00      	nop
 8000b10:	2000026c 	.word	0x2000026c

08000b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b094      	sub	sp, #80	; 0x50
 8000b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1a:	f107 0318 	add.w	r3, r7, #24
 8000b1e:	2238      	movs	r2, #56	; 0x38
 8000b20:	2100      	movs	r1, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f007 f9b9 	bl	8007e9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000b36:	2000      	movs	r0, #0
 8000b38:	f002 fb1a 	bl	8003170 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b44:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b46:	2302      	movs	r3, #2
 8000b48:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000b4e:	2306      	movs	r3, #6
 8000b50:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000b52:	2355      	movs	r3, #85	; 0x55
 8000b54:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b56:	2302      	movs	r3, #2
 8000b58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b62:	f107 0318 	add.w	r3, r7, #24
 8000b66:	4618      	mov	r0, r3
 8000b68:	f002 fbb6 	bl	80032d8 <HAL_RCC_OscConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000b72:	f000 f82b 	bl	8000bcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b76:	230f      	movs	r3, #15
 8000b78:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	2104      	movs	r1, #4
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f002 feba 	bl	8003908 <HAL_RCC_ClockConfig>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000b9a:	f000 f817 	bl	8000bcc <Error_Handler>
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	3750      	adds	r7, #80	; 0x50
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d101      	bne.n	8000bbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bba:	f000 fe53 	bl	8001864 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40001000 	.word	0x40001000

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i
}
 8000bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <Error_Handler+0x8>
	...

08000bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <HAL_MspInit+0x44>)
 8000be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000be2:	4a0e      	ldr	r2, [pc, #56]	; (8000c1c <HAL_MspInit+0x44>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6613      	str	r3, [r2, #96]	; 0x60
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <HAL_MspInit+0x44>)
 8000bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <HAL_MspInit+0x44>)
 8000bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bfa:	4a08      	ldr	r2, [pc, #32]	; (8000c1c <HAL_MspInit+0x44>)
 8000bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c00:	6593      	str	r3, [r2, #88]	; 0x58
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_MspInit+0x44>)
 8000c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c0e:	f002 fb53 	bl	80032b8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40021000 	.word	0x40021000

08000c20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08c      	sub	sp, #48	; 0x30
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c30:	4b2c      	ldr	r3, [pc, #176]	; (8000ce4 <HAL_InitTick+0xc4>)
 8000c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c34:	4a2b      	ldr	r2, [pc, #172]	; (8000ce4 <HAL_InitTick+0xc4>)
 8000c36:	f043 0310 	orr.w	r3, r3, #16
 8000c3a:	6593      	str	r3, [r2, #88]	; 0x58
 8000c3c:	4b29      	ldr	r3, [pc, #164]	; (8000ce4 <HAL_InitTick+0xc4>)
 8000c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c40:	f003 0310 	and.w	r3, r3, #16
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c48:	f107 020c 	add.w	r2, r7, #12
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	4611      	mov	r1, r2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f003 f82e 	bl	8003cb4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c58:	f003 f800 	bl	8003c5c <HAL_RCC_GetPCLK1Freq>
 8000c5c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c60:	4a21      	ldr	r2, [pc, #132]	; (8000ce8 <HAL_InitTick+0xc8>)
 8000c62:	fba2 2303 	umull	r2, r3, r2, r3
 8000c66:	0c9b      	lsrs	r3, r3, #18
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c6c:	4b1f      	ldr	r3, [pc, #124]	; (8000cec <HAL_InitTick+0xcc>)
 8000c6e:	4a20      	ldr	r2, [pc, #128]	; (8000cf0 <HAL_InitTick+0xd0>)
 8000c70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c72:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <HAL_InitTick+0xcc>)
 8000c74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c78:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c7a:	4a1c      	ldr	r2, [pc, #112]	; (8000cec <HAL_InitTick+0xcc>)
 8000c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c80:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <HAL_InitTick+0xcc>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c86:	4b19      	ldr	r3, [pc, #100]	; (8000cec <HAL_InitTick+0xcc>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000c8c:	4817      	ldr	r0, [pc, #92]	; (8000cec <HAL_InitTick+0xcc>)
 8000c8e:	f003 fad7 	bl	8004240 <HAL_TIM_Base_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d11b      	bne.n	8000cd8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ca0:	4812      	ldr	r0, [pc, #72]	; (8000cec <HAL_InitTick+0xcc>)
 8000ca2:	f003 fb2f 	bl	8004304 <HAL_TIM_Base_Start_IT>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000cac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d111      	bne.n	8000cd8 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cb4:	2036      	movs	r0, #54	; 0x36
 8000cb6:	f001 ffcf 	bl	8002c58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2b0f      	cmp	r3, #15
 8000cbe:	d808      	bhi.n	8000cd2 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f001 ffad 	bl	8002c24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <HAL_InitTick+0xd4>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6013      	str	r3, [r2, #0]
 8000cd0:	e002      	b.n	8000cd8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000cd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3730      	adds	r7, #48	; 0x30
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	431bde83 	.word	0x431bde83
 8000cec:	2000021c 	.word	0x2000021c
 8000cf0:	40001000 	.word	0x40001000
 8000cf4:	200000c0 	.word	0x200000c0

08000cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <NMI_Handler+0x4>

08000cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <HardFault_Handler+0x4>

08000d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <MemManage_Handler+0x4>

08000d0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <BusFault_Handler+0x4>

08000d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <UsageFault_Handler+0x4>

08000d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
	...

08000d50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d54:	4802      	ldr	r0, [pc, #8]	; (8000d60 <USART2_IRQHandler+0x10>)
 8000d56:	f005 f83f 	bl	8005dd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000304 	.word	0x20000304

08000d64 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <USART3_IRQHandler+0x10>)
 8000d6a:	f005 f835 	bl	8005dd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000394 	.word	0x20000394

08000d78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8000d7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d80:	f002 f9d2 	bl	8003128 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <TIM6_DAC_IRQHandler+0x10>)
 8000d8e:	f003 fc9b 	bl	80046c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	2000021c 	.word	0x2000021c

08000d9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return 1;
 8000da0:	2301      	movs	r3, #1
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <_kill>:

int _kill(int pid, int sig)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000db6:	f007 f91b 	bl	8007ff0 <__errno>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2216      	movs	r2, #22
 8000dbe:	601a      	str	r2, [r3, #0]
  return -1;
 8000dc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <_exit>:

void _exit (int status)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff ffe7 	bl	8000dac <_kill>
  while (1) {}    /* Make sure we hang here */
 8000dde:	e7fe      	b.n	8000dde <_exit+0x12>

08000de0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	e00a      	b.n	8000e08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000df2:	f3af 8000 	nop.w
 8000df6:	4601      	mov	r1, r0
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	1c5a      	adds	r2, r3, #1
 8000dfc:	60ba      	str	r2, [r7, #8]
 8000dfe:	b2ca      	uxtb	r2, r1
 8000e00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	3301      	adds	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	697a      	ldr	r2, [r7, #20]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	dbf0      	blt.n	8000df2 <_read+0x12>
  }

  return len;
 8000e10:	687b      	ldr	r3, [r7, #4]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	60f8      	str	r0, [r7, #12]
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	e009      	b.n	8000e40 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	1c5a      	adds	r2, r3, #1
 8000e30:	60ba      	str	r2, [r7, #8]
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697a      	ldr	r2, [r7, #20]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	dbf1      	blt.n	8000e2c <_write+0x12>
  }
  return len;
 8000e48:	687b      	ldr	r3, [r7, #4]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <_close>:

int _close(int file)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e7a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <_isatty>:

int _isatty(int file)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e92:	2301      	movs	r3, #1
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3714      	adds	r7, #20
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec4:	4a14      	ldr	r2, [pc, #80]	; (8000f18 <_sbrk+0x5c>)
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <_sbrk+0x60>)
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed0:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d102      	bne.n	8000ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <_sbrk+0x64>)
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <_sbrk+0x68>)
 8000edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d207      	bcs.n	8000efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eec:	f007 f880 	bl	8007ff0 <__errno>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	e009      	b.n	8000f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f02:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <_sbrk+0x64>)
 8000f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20020000 	.word	0x20020000
 8000f1c:	00000400 	.word	0x00000400
 8000f20:	20000268 	.word	0x20000268
 8000f24:	20000630 	.word	0x20000630

08000f28 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <SystemInit+0x20>)
 8000f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <SystemInit+0x20>)
 8000f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b098      	sub	sp, #96	; 0x60
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
 8000f6c:	611a      	str	r2, [r3, #16]
 8000f6e:	615a      	str	r2, [r3, #20]
 8000f70:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2234      	movs	r2, #52	; 0x34
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f006 ff8e 	bl	8007e9a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f7e:	4b4a      	ldr	r3, [pc, #296]	; (80010a8 <MX_TIM1_Init+0x15c>)
 8000f80:	4a4a      	ldr	r2, [pc, #296]	; (80010ac <MX_TIM1_Init+0x160>)
 8000f82:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f84:	4b48      	ldr	r3, [pc, #288]	; (80010a8 <MX_TIM1_Init+0x15c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000f8a:	4b47      	ldr	r3, [pc, #284]	; (80010a8 <MX_TIM1_Init+0x15c>)
 8000f8c:	2220      	movs	r2, #32
 8000f8e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4250;
 8000f90:	4b45      	ldr	r3, [pc, #276]	; (80010a8 <MX_TIM1_Init+0x15c>)
 8000f92:	f241 029a 	movw	r2, #4250	; 0x109a
 8000f96:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f98:	4b43      	ldr	r3, [pc, #268]	; (80010a8 <MX_TIM1_Init+0x15c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f9e:	4b42      	ldr	r3, [pc, #264]	; (80010a8 <MX_TIM1_Init+0x15c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa4:	4b40      	ldr	r3, [pc, #256]	; (80010a8 <MX_TIM1_Init+0x15c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000faa:	483f      	ldr	r0, [pc, #252]	; (80010a8 <MX_TIM1_Init+0x15c>)
 8000fac:	f003 fa22 	bl	80043f4 <HAL_TIM_PWM_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000fb6:	f7ff fe09 	bl	8000bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fc6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4836      	ldr	r0, [pc, #216]	; (80010a8 <MX_TIM1_Init+0x15c>)
 8000fce:	f004 fc13 	bl	80057f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000fd8:	f7ff fdf8 	bl	8000bcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fdc:	2360      	movs	r3, #96	; 0x60
 8000fde:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 2550;
 8000fe0:	f640 13f6 	movw	r3, #2550	; 0x9f6
 8000fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fea:	2300      	movs	r3, #0
 8000fec:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ffa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ffe:	2200      	movs	r2, #0
 8001000:	4619      	mov	r1, r3
 8001002:	4829      	ldr	r0, [pc, #164]	; (80010a8 <MX_TIM1_Init+0x15c>)
 8001004:	f003 fce0 	bl	80049c8 <HAL_TIM_PWM_ConfigChannel>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800100e:	f7ff fddd 	bl	8000bcc <Error_Handler>
  }
  sConfigOC.Pulse = 1700;
 8001012:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8001016:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001018:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800101c:	2204      	movs	r2, #4
 800101e:	4619      	mov	r1, r3
 8001020:	4821      	ldr	r0, [pc, #132]	; (80010a8 <MX_TIM1_Init+0x15c>)
 8001022:	f003 fcd1 	bl	80049c8 <HAL_TIM_PWM_ConfigChannel>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 800102c:	f7ff fdce 	bl	8000bcc <Error_Handler>
  }
  sConfigOC.Pulse = 637;
 8001030:	f240 237d 	movw	r3, #637	; 0x27d
 8001034:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001036:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800103a:	2208      	movs	r2, #8
 800103c:	4619      	mov	r1, r3
 800103e:	481a      	ldr	r0, [pc, #104]	; (80010a8 <MX_TIM1_Init+0x15c>)
 8001040:	f003 fcc2 	bl	80049c8 <HAL_TIM_PWM_ConfigChannel>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 800104a:	f7ff fdbf 	bl	8000bcc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 34;
 800105a:	2322      	movs	r3, #34	; 0x22
 800105c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001062:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001066:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800106c:	2300      	movs	r3, #0
 800106e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001074:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001078:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800107e:	2300      	movs	r3, #0
 8001080:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001082:	2300      	movs	r3, #0
 8001084:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	4619      	mov	r1, r3
 800108a:	4807      	ldr	r0, [pc, #28]	; (80010a8 <MX_TIM1_Init+0x15c>)
 800108c:	f004 fc4a 	bl	8005924 <HAL_TIMEx_ConfigBreakDeadTime>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8001096:	f7ff fd99 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800109a:	4803      	ldr	r0, [pc, #12]	; (80010a8 <MX_TIM1_Init+0x15c>)
 800109c:	f000 f8d6 	bl	800124c <HAL_TIM_MspPostInit>

}
 80010a0:	bf00      	nop
 80010a2:	3760      	adds	r7, #96	; 0x60
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	2000026c 	.word	0x2000026c
 80010ac:	40012c00 	.word	0x40012c00

080010b0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80010b6:	f107 0310 	add.w	r3, r7, #16
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010ce:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <MX_TIM3_Init+0x90>)
 80010d0:	4a1c      	ldr	r2, [pc, #112]	; (8001144 <MX_TIM3_Init+0x94>)
 80010d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010d4:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <MX_TIM3_Init+0x90>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010da:	4b19      	ldr	r3, [pc, #100]	; (8001140 <MX_TIM3_Init+0x90>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010e0:	4b17      	ldr	r3, [pc, #92]	; (8001140 <MX_TIM3_Init+0x90>)
 80010e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e8:	4b15      	ldr	r3, [pc, #84]	; (8001140 <MX_TIM3_Init+0x90>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ee:	4b14      	ldr	r3, [pc, #80]	; (8001140 <MX_TIM3_Init+0x90>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010f4:	2300      	movs	r3, #0
 80010f6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001104:	f107 0310 	add.w	r3, r7, #16
 8001108:	4619      	mov	r1, r3
 800110a:	480d      	ldr	r0, [pc, #52]	; (8001140 <MX_TIM3_Init+0x90>)
 800110c:	f004 fa03 	bl	8005516 <HAL_TIMEx_HallSensor_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001116:	f7ff fd59 	bl	8000bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800111a:	2350      	movs	r3, #80	; 0x50
 800111c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	4619      	mov	r1, r3
 8001126:	4806      	ldr	r0, [pc, #24]	; (8001140 <MX_TIM3_Init+0x90>)
 8001128:	f004 fb66 	bl	80057f8 <HAL_TIMEx_MasterConfigSynchronization>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001132:	f7ff fd4b 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	3720      	adds	r7, #32
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200002b8 	.word	0x200002b8
 8001144:	40000400 	.word	0x40000400

08001148 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <HAL_TIM_PWM_MspInit+0x38>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d10b      	bne.n	8001172 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <HAL_TIM_PWM_MspInit+0x3c>)
 800115c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800115e:	4a09      	ldr	r2, [pc, #36]	; (8001184 <HAL_TIM_PWM_MspInit+0x3c>)
 8001160:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001164:	6613      	str	r3, [r2, #96]	; 0x60
 8001166:	4b07      	ldr	r3, [pc, #28]	; (8001184 <HAL_TIM_PWM_MspInit+0x3c>)
 8001168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800116a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001172:	bf00      	nop
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40012c00 	.word	0x40012c00
 8001184:	40021000 	.word	0x40021000

08001188 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a26      	ldr	r2, [pc, #152]	; (8001240 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d145      	bne.n	8001236 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011aa:	4b26      	ldr	r3, [pc, #152]	; (8001244 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ae:	4a25      	ldr	r2, [pc, #148]	; (8001244 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	6593      	str	r3, [r2, #88]	; 0x58
 80011b6:	4b23      	ldr	r3, [pc, #140]	; (8001244 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	4b20      	ldr	r3, [pc, #128]	; (8001244 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	4a1f      	ldr	r2, [pc, #124]	; (8001244 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ce:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	4a19      	ldr	r2, [pc, #100]	; (8001244 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e6:	4b17      	ldr	r3, [pc, #92]	; (8001244 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80011f2:	2350      	movs	r3, #80	; 0x50
 80011f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001202:	2302      	movs	r3, #2
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001210:	f001 fdf0 	bl	8002df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001214:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001226:	2302      	movs	r3, #2
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	4619      	mov	r1, r3
 8001230:	4805      	ldr	r0, [pc, #20]	; (8001248 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 8001232:	f001 fddf 	bl	8002df4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001236:	bf00      	nop
 8001238:	3728      	adds	r7, #40	; 0x28
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40000400 	.word	0x40000400
 8001244:	40021000 	.word	0x40021000
 8001248:	48000800 	.word	0x48000800

0800124c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a29      	ldr	r2, [pc, #164]	; (8001310 <HAL_TIM_MspPostInit+0xc4>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d14b      	bne.n	8001306 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126e:	4b29      	ldr	r3, [pc, #164]	; (8001314 <HAL_TIM_MspPostInit+0xc8>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	4a28      	ldr	r2, [pc, #160]	; (8001314 <HAL_TIM_MspPostInit+0xc8>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127a:	4b26      	ldr	r3, [pc, #152]	; (8001314 <HAL_TIM_MspPostInit+0xc8>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	4b23      	ldr	r3, [pc, #140]	; (8001314 <HAL_TIM_MspPostInit+0xc8>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	4a22      	ldr	r2, [pc, #136]	; (8001314 <HAL_TIM_MspPostInit+0xc8>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001292:	4b20      	ldr	r3, [pc, #128]	; (8001314 <HAL_TIM_MspPostInit+0xc8>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 800129e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80012a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2300      	movs	r3, #0
 80012ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80012b0:	2306      	movs	r3, #6
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	4619      	mov	r1, r3
 80012ba:	4817      	ldr	r0, [pc, #92]	; (8001318 <HAL_TIM_MspPostInit+0xcc>)
 80012bc:	f001 fd9a 	bl	8002df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 80012c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2300      	movs	r3, #0
 80012d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80012d2:	2304      	movs	r3, #4
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	480e      	ldr	r0, [pc, #56]	; (8001318 <HAL_TIM_MspPostInit+0xcc>)
 80012de:	f001 fd89 	bl	8002df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 80012e2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80012e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80012f4:	2306      	movs	r3, #6
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	4619      	mov	r1, r3
 80012fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001302:	f001 fd77 	bl	8002df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001306:	bf00      	nop
 8001308:	3728      	adds	r7, #40	; 0x28
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40012c00 	.word	0x40012c00
 8001314:	40021000 	.word	0x40021000
 8001318:	48000400 	.word	0x48000400

0800131c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001320:	4b22      	ldr	r3, [pc, #136]	; (80013ac <MX_USART2_UART_Init+0x90>)
 8001322:	4a23      	ldr	r2, [pc, #140]	; (80013b0 <MX_USART2_UART_Init+0x94>)
 8001324:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001326:	4b21      	ldr	r3, [pc, #132]	; (80013ac <MX_USART2_UART_Init+0x90>)
 8001328:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800132c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800132e:	4b1f      	ldr	r3, [pc, #124]	; (80013ac <MX_USART2_UART_Init+0x90>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001334:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <MX_USART2_UART_Init+0x90>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800133a:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <MX_USART2_UART_Init+0x90>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001340:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <MX_USART2_UART_Init+0x90>)
 8001342:	220c      	movs	r2, #12
 8001344:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001346:	4b19      	ldr	r3, [pc, #100]	; (80013ac <MX_USART2_UART_Init+0x90>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <MX_USART2_UART_Init+0x90>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <MX_USART2_UART_Init+0x90>)
 8001354:	2200      	movs	r2, #0
 8001356:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <MX_USART2_UART_Init+0x90>)
 800135a:	2200      	movs	r2, #0
 800135c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800135e:	4b13      	ldr	r3, [pc, #76]	; (80013ac <MX_USART2_UART_Init+0x90>)
 8001360:	2200      	movs	r2, #0
 8001362:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001364:	4811      	ldr	r0, [pc, #68]	; (80013ac <MX_USART2_UART_Init+0x90>)
 8001366:	f004 fbfa 	bl	8005b5e <HAL_UART_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001370:	f7ff fc2c 	bl	8000bcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001374:	2100      	movs	r1, #0
 8001376:	480d      	ldr	r0, [pc, #52]	; (80013ac <MX_USART2_UART_Init+0x90>)
 8001378:	f006 fb9d 	bl	8007ab6 <HAL_UARTEx_SetTxFifoThreshold>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001382:	f7ff fc23 	bl	8000bcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001386:	2100      	movs	r1, #0
 8001388:	4808      	ldr	r0, [pc, #32]	; (80013ac <MX_USART2_UART_Init+0x90>)
 800138a:	f006 fbd2 	bl	8007b32 <HAL_UARTEx_SetRxFifoThreshold>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001394:	f7ff fc1a 	bl	8000bcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001398:	4804      	ldr	r0, [pc, #16]	; (80013ac <MX_USART2_UART_Init+0x90>)
 800139a:	f006 fb53 	bl	8007a44 <HAL_UARTEx_DisableFifoMode>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80013a4:	f7ff fc12 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000304 	.word	0x20000304
 80013b0:	40004400 	.word	0x40004400

080013b4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013b8:	4b22      	ldr	r3, [pc, #136]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013ba:	4a23      	ldr	r2, [pc, #140]	; (8001448 <MX_USART3_UART_Init+0x94>)
 80013bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013be:	4b21      	ldr	r3, [pc, #132]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013c6:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013cc:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013d2:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013d8:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013da:	220c      	movs	r2, #12
 80013dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013de:	4b19      	ldr	r3, [pc, #100]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e4:	4b17      	ldr	r3, [pc, #92]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ea:	4b16      	ldr	r3, [pc, #88]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013f0:	4b14      	ldr	r3, [pc, #80]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013f6:	4b13      	ldr	r3, [pc, #76]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013fc:	4811      	ldr	r0, [pc, #68]	; (8001444 <MX_USART3_UART_Init+0x90>)
 80013fe:	f004 fbae 	bl	8005b5e <HAL_UART_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001408:	f7ff fbe0 	bl	8000bcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800140c:	2100      	movs	r1, #0
 800140e:	480d      	ldr	r0, [pc, #52]	; (8001444 <MX_USART3_UART_Init+0x90>)
 8001410:	f006 fb51 	bl	8007ab6 <HAL_UARTEx_SetTxFifoThreshold>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800141a:	f7ff fbd7 	bl	8000bcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800141e:	2100      	movs	r1, #0
 8001420:	4808      	ldr	r0, [pc, #32]	; (8001444 <MX_USART3_UART_Init+0x90>)
 8001422:	f006 fb86 	bl	8007b32 <HAL_UARTEx_SetRxFifoThreshold>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800142c:	f7ff fbce 	bl	8000bcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001430:	4804      	ldr	r0, [pc, #16]	; (8001444 <MX_USART3_UART_Init+0x90>)
 8001432:	f006 fb07 	bl	8007a44 <HAL_UARTEx_DisableFifoMode>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800143c:	f7ff fbc6 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000394 	.word	0x20000394
 8001448:	40004800 	.word	0x40004800

0800144c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b0a0      	sub	sp, #128	; 0x80
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001464:	f107 0318 	add.w	r3, r7, #24
 8001468:	2254      	movs	r2, #84	; 0x54
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f006 fd14 	bl	8007e9a <memset>
  if(uartHandle->Instance==USART2)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a45      	ldr	r2, [pc, #276]	; (800158c <HAL_UART_MspInit+0x140>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d13f      	bne.n	80014fc <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800147c:	2302      	movs	r3, #2
 800147e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001480:	2300      	movs	r3, #0
 8001482:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001484:	f107 0318 	add.w	r3, r7, #24
 8001488:	4618      	mov	r0, r3
 800148a:	f002 fc8b 	bl	8003da4 <HAL_RCCEx_PeriphCLKConfig>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001494:	f7ff fb9a 	bl	8000bcc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001498:	4b3d      	ldr	r3, [pc, #244]	; (8001590 <HAL_UART_MspInit+0x144>)
 800149a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149c:	4a3c      	ldr	r2, [pc, #240]	; (8001590 <HAL_UART_MspInit+0x144>)
 800149e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a2:	6593      	str	r3, [r2, #88]	; 0x58
 80014a4:	4b3a      	ldr	r3, [pc, #232]	; (8001590 <HAL_UART_MspInit+0x144>)
 80014a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b0:	4b37      	ldr	r3, [pc, #220]	; (8001590 <HAL_UART_MspInit+0x144>)
 80014b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b4:	4a36      	ldr	r2, [pc, #216]	; (8001590 <HAL_UART_MspInit+0x144>)
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014bc:	4b34      	ldr	r3, [pc, #208]	; (8001590 <HAL_UART_MspInit+0x144>)
 80014be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014c8:	230c      	movs	r3, #12
 80014ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014d8:	2307      	movs	r3, #7
 80014da:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80014e0:	4619      	mov	r1, r3
 80014e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e6:	f001 fc85 	bl	8002df4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	2026      	movs	r0, #38	; 0x26
 80014f0:	f001 fb98 	bl	8002c24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014f4:	2026      	movs	r0, #38	; 0x26
 80014f6:	f001 fbaf 	bl	8002c58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80014fa:	e043      	b.n	8001584 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a24      	ldr	r2, [pc, #144]	; (8001594 <HAL_UART_MspInit+0x148>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d13e      	bne.n	8001584 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001506:	2304      	movs	r3, #4
 8001508:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800150e:	f107 0318 	add.w	r3, r7, #24
 8001512:	4618      	mov	r0, r3
 8001514:	f002 fc46 	bl	8003da4 <HAL_RCCEx_PeriphCLKConfig>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 800151e:	f7ff fb55 	bl	8000bcc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001522:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <HAL_UART_MspInit+0x144>)
 8001524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001526:	4a1a      	ldr	r2, [pc, #104]	; (8001590 <HAL_UART_MspInit+0x144>)
 8001528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800152c:	6593      	str	r3, [r2, #88]	; 0x58
 800152e:	4b18      	ldr	r3, [pc, #96]	; (8001590 <HAL_UART_MspInit+0x144>)
 8001530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001532:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <HAL_UART_MspInit+0x144>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153e:	4a14      	ldr	r2, [pc, #80]	; (8001590 <HAL_UART_MspInit+0x144>)
 8001540:	f043 0304 	orr.w	r3, r3, #4
 8001544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_UART_MspInit+0x144>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001552:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001556:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	2300      	movs	r3, #0
 8001562:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001564:	2307      	movs	r3, #7
 8001566:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001568:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800156c:	4619      	mov	r1, r3
 800156e:	480a      	ldr	r0, [pc, #40]	; (8001598 <HAL_UART_MspInit+0x14c>)
 8001570:	f001 fc40 	bl	8002df4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001574:	2200      	movs	r2, #0
 8001576:	2100      	movs	r1, #0
 8001578:	2027      	movs	r0, #39	; 0x27
 800157a:	f001 fb53 	bl	8002c24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800157e:	2027      	movs	r0, #39	; 0x27
 8001580:	f001 fb6a 	bl	8002c58 <HAL_NVIC_EnableIRQ>
}
 8001584:	bf00      	nop
 8001586:	3780      	adds	r7, #128	; 0x80
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40004400 	.word	0x40004400
 8001590:	40021000 	.word	0x40021000
 8001594:	40004800 	.word	0x40004800
 8001598:	48000800 	.word	0x48000800

0800159c <Shell_Init>:
char* 		argv[MAX_ARGS];
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;

void Shell_Init(void){
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 80015a0:	2224      	movs	r2, #36	; 0x24
 80015a2:	2100      	movs	r1, #0
 80015a4:	4816      	ldr	r0, [pc, #88]	; (8001600 <Shell_Init+0x64>)
 80015a6:	f006 fc78 	bl	8007e9a <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 80015aa:	2240      	movs	r2, #64	; 0x40
 80015ac:	2100      	movs	r1, #0
 80015ae:	4815      	ldr	r0, [pc, #84]	; (8001604 <Shell_Init+0x68>)
 80015b0:	f006 fc73 	bl	8007e9a <memset>
 80015b4:	4b14      	ldr	r3, [pc, #80]	; (8001608 <Shell_Init+0x6c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 80015ba:	2240      	movs	r2, #64	; 0x40
 80015bc:	2100      	movs	r1, #0
 80015be:	4813      	ldr	r0, [pc, #76]	; (800160c <Shell_Init+0x70>)
 80015c0:	f006 fc6b 	bl	8007e9a <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80015c4:	2201      	movs	r2, #1
 80015c6:	4910      	ldr	r1, [pc, #64]	; (8001608 <Shell_Init+0x6c>)
 80015c8:	4811      	ldr	r0, [pc, #68]	; (8001610 <Shell_Init+0x74>)
 80015ca:	f004 fbaf 	bl	8005d2c <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 80015ce:	4811      	ldr	r0, [pc, #68]	; (8001614 <Shell_Init+0x78>)
 80015d0:	f7fe fe30 	bl	8000234 <strlen>
 80015d4:	4603      	mov	r3, r0
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	f04f 33ff 	mov.w	r3, #4294967295
 80015dc:	490d      	ldr	r1, [pc, #52]	; (8001614 <Shell_Init+0x78>)
 80015de:	480c      	ldr	r0, [pc, #48]	; (8001610 <Shell_Init+0x74>)
 80015e0:	f004 fb0d 	bl	8005bfe <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 80015e4:	480c      	ldr	r0, [pc, #48]	; (8001618 <Shell_Init+0x7c>)
 80015e6:	f7fe fe25 	bl	8000234 <strlen>
 80015ea:	4603      	mov	r3, r0
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295
 80015f2:	4909      	ldr	r1, [pc, #36]	; (8001618 <Shell_Init+0x7c>)
 80015f4:	4806      	ldr	r0, [pc, #24]	; (8001610 <Shell_Init+0x74>)
 80015f6:	f004 fb02 	bl	8005bfe <HAL_UART_Transmit>
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200004b0 	.word	0x200004b0
 8001604:	2000046c 	.word	0x2000046c
 8001608:	20000428 	.word	0x20000428
 800160c:	2000042c 	.word	0x2000042c
 8001610:	20000304 	.word	0x20000304
 8001614:	20000020 	.word	0x20000020
 8001618:	20000004 	.word	0x20000004

0800161c <Shell_Loop>:

void Shell_Loop(void){
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
	if(uartRxReceived){
 8001622:	4b51      	ldr	r3, [pc, #324]	; (8001768 <Shell_Loop+0x14c>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d05b      	beq.n	80016e2 <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 800162a:	4b50      	ldr	r3, [pc, #320]	; (800176c <Shell_Loop+0x150>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b08      	cmp	r3, #8
 8001630:	d034      	beq.n	800169c <Shell_Loop+0x80>
 8001632:	2b0d      	cmp	r3, #13
 8001634:	d142      	bne.n	80016bc <Shell_Loop+0xa0>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8001636:	f04f 33ff 	mov.w	r3, #4294967295
 800163a:	2203      	movs	r2, #3
 800163c:	494c      	ldr	r1, [pc, #304]	; (8001770 <Shell_Loop+0x154>)
 800163e:	484d      	ldr	r0, [pc, #308]	; (8001774 <Shell_Loop+0x158>)
 8001640:	f004 fadd 	bl	8005bfe <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 8001644:	4b4c      	ldr	r3, [pc, #304]	; (8001778 <Shell_Loop+0x15c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a4c      	ldr	r2, [pc, #304]	; (800177c <Shell_Loop+0x160>)
 800164a:	2100      	movs	r1, #0
 800164c:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 800164e:	4b4c      	ldr	r3, [pc, #304]	; (8001780 <Shell_Loop+0x164>)
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 8001654:	494b      	ldr	r1, [pc, #300]	; (8001784 <Shell_Loop+0x168>)
 8001656:	4849      	ldr	r0, [pc, #292]	; (800177c <Shell_Loop+0x160>)
 8001658:	f006 fc28 	bl	8007eac <strtok>
 800165c:	4603      	mov	r3, r0
 800165e:	4a4a      	ldr	r2, [pc, #296]	; (8001788 <Shell_Loop+0x16c>)
 8001660:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8001662:	e010      	b.n	8001686 <Shell_Loop+0x6a>
				argv[argc++] = token;
 8001664:	4b46      	ldr	r3, [pc, #280]	; (8001780 <Shell_Loop+0x164>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	4945      	ldr	r1, [pc, #276]	; (8001780 <Shell_Loop+0x164>)
 800166c:	600a      	str	r2, [r1, #0]
 800166e:	4a46      	ldr	r2, [pc, #280]	; (8001788 <Shell_Loop+0x16c>)
 8001670:	6812      	ldr	r2, [r2, #0]
 8001672:	4946      	ldr	r1, [pc, #280]	; (800178c <Shell_Loop+0x170>)
 8001674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 8001678:	4942      	ldr	r1, [pc, #264]	; (8001784 <Shell_Loop+0x168>)
 800167a:	2000      	movs	r0, #0
 800167c:	f006 fc16 	bl	8007eac <strtok>
 8001680:	4603      	mov	r3, r0
 8001682:	4a41      	ldr	r2, [pc, #260]	; (8001788 <Shell_Loop+0x16c>)
 8001684:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8001686:	4b40      	ldr	r3, [pc, #256]	; (8001788 <Shell_Loop+0x16c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1ea      	bne.n	8001664 <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 800168e:	4b3a      	ldr	r3, [pc, #232]	; (8001778 <Shell_Loop+0x15c>)
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 8001694:	4b3e      	ldr	r3, [pc, #248]	; (8001790 <Shell_Loop+0x174>)
 8001696:	2201      	movs	r2, #1
 8001698:	601a      	str	r2, [r3, #0]
			break;
 800169a:	e01f      	b.n	80016dc <Shell_Loop+0xc0>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 800169c:	4b36      	ldr	r3, [pc, #216]	; (8001778 <Shell_Loop+0x15c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	1e5a      	subs	r2, r3, #1
 80016a2:	4935      	ldr	r1, [pc, #212]	; (8001778 <Shell_Loop+0x15c>)
 80016a4:	600a      	str	r2, [r1, #0]
 80016a6:	4a35      	ldr	r2, [pc, #212]	; (800177c <Shell_Loop+0x160>)
 80016a8:	2100      	movs	r1, #0
 80016aa:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 80016ac:	f04f 33ff 	mov.w	r3, #4294967295
 80016b0:	2204      	movs	r2, #4
 80016b2:	4938      	ldr	r1, [pc, #224]	; (8001794 <Shell_Loop+0x178>)
 80016b4:	482f      	ldr	r0, [pc, #188]	; (8001774 <Shell_Loop+0x158>)
 80016b6:	f004 faa2 	bl	8005bfe <HAL_UART_Transmit>
			break;
 80016ba:	e00f      	b.n	80016dc <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 80016bc:	4b2e      	ldr	r3, [pc, #184]	; (8001778 <Shell_Loop+0x15c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	1c5a      	adds	r2, r3, #1
 80016c2:	492d      	ldr	r1, [pc, #180]	; (8001778 <Shell_Loop+0x15c>)
 80016c4:	600a      	str	r2, [r1, #0]
 80016c6:	4a29      	ldr	r2, [pc, #164]	; (800176c <Shell_Loop+0x150>)
 80016c8:	7811      	ldrb	r1, [r2, #0]
 80016ca:	4a2c      	ldr	r2, [pc, #176]	; (800177c <Shell_Loop+0x160>)
 80016cc:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
 80016d2:	2201      	movs	r2, #1
 80016d4:	4925      	ldr	r1, [pc, #148]	; (800176c <Shell_Loop+0x150>)
 80016d6:	4827      	ldr	r0, [pc, #156]	; (8001774 <Shell_Loop+0x158>)
 80016d8:	f004 fa91 	bl	8005bfe <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 80016dc:	4b22      	ldr	r3, [pc, #136]	; (8001768 <Shell_Loop+0x14c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 80016e2:	4b2b      	ldr	r3, [pc, #172]	; (8001790 <Shell_Loop+0x174>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d039      	beq.n	800175e <Shell_Loop+0x142>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 80016ea:	4b28      	ldr	r3, [pc, #160]	; (800178c <Shell_Loop+0x170>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	492a      	ldr	r1, [pc, #168]	; (8001798 <Shell_Loop+0x17c>)
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7fe fd95 	bl	8000220 <strcmp>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d107      	bne.n	800170c <Shell_Loop+0xf0>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 80016fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001700:	221a      	movs	r2, #26
 8001702:	4926      	ldr	r1, [pc, #152]	; (800179c <Shell_Loop+0x180>)
 8001704:	481b      	ldr	r0, [pc, #108]	; (8001774 <Shell_Loop+0x158>)
 8001706:	f004 fa7a 	bl	8005bfe <HAL_UART_Transmit>
 800170a:	e01e      	b.n	800174a <Shell_Loop+0x12e>
		}
		else if(strcmp(argv[0],"help")==0){
 800170c:	4b1f      	ldr	r3, [pc, #124]	; (800178c <Shell_Loop+0x170>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4923      	ldr	r1, [pc, #140]	; (80017a0 <Shell_Loop+0x184>)
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe fd84 	bl	8000220 <strcmp>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10e      	bne.n	800173c <Shell_Loop+0x120>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 800171e:	4a21      	ldr	r2, [pc, #132]	; (80017a4 <Shell_Loop+0x188>)
 8001720:	2140      	movs	r1, #64	; 0x40
 8001722:	4821      	ldr	r0, [pc, #132]	; (80017a8 <Shell_Loop+0x18c>)
 8001724:	f006 fb42 	bl	8007dac <sniprintf>
 8001728:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	b29a      	uxth	r2, r3
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
 8001732:	491d      	ldr	r1, [pc, #116]	; (80017a8 <Shell_Loop+0x18c>)
 8001734:	480f      	ldr	r0, [pc, #60]	; (8001774 <Shell_Loop+0x158>)
 8001736:	f004 fa62 	bl	8005bfe <HAL_UART_Transmit>
 800173a:	e006      	b.n	800174a <Shell_Loop+0x12e>
		}
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800173c:	f04f 33ff 	mov.w	r3, #4294967295
 8001740:	2214      	movs	r2, #20
 8001742:	491a      	ldr	r1, [pc, #104]	; (80017ac <Shell_Loop+0x190>)
 8001744:	480b      	ldr	r0, [pc, #44]	; (8001774 <Shell_Loop+0x158>)
 8001746:	f004 fa5a 	bl	8005bfe <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800174a:	f04f 33ff 	mov.w	r3, #4294967295
 800174e:	221c      	movs	r2, #28
 8001750:	4917      	ldr	r1, [pc, #92]	; (80017b0 <Shell_Loop+0x194>)
 8001752:	4808      	ldr	r0, [pc, #32]	; (8001774 <Shell_Loop+0x158>)
 8001754:	f004 fa53 	bl	8005bfe <HAL_UART_Transmit>
		newCmdReady = 0;
 8001758:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <Shell_Loop+0x174>)
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
	}
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000424 	.word	0x20000424
 800176c:	20000428 	.word	0x20000428
 8001770:	20000088 	.word	0x20000088
 8001774:	20000304 	.word	0x20000304
 8001778:	200004ac 	.word	0x200004ac
 800177c:	2000046c 	.word	0x2000046c
 8001780:	200004d4 	.word	0x200004d4
 8001784:	0800901c 	.word	0x0800901c
 8001788:	200004d8 	.word	0x200004d8
 800178c:	200004b0 	.word	0x200004b0
 8001790:	200004dc 	.word	0x200004dc
 8001794:	2000008c 	.word	0x2000008c
 8001798:	08009020 	.word	0x08009020
 800179c:	200000a4 	.word	0x200000a4
 80017a0:	08009030 	.word	0x08009030
 80017a4:	08009038 	.word	0x08009038
 80017a8:	2000042c 	.word	0x2000042c
 80017ac:	20000090 	.word	0x20000090
 80017b0:	20000004 	.word	0x20000004

080017b4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <HAL_UART_RxCpltCallback+0x20>)
 80017be:	2201      	movs	r2, #1
 80017c0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80017c2:	2201      	movs	r2, #1
 80017c4:	4904      	ldr	r1, [pc, #16]	; (80017d8 <HAL_UART_RxCpltCallback+0x24>)
 80017c6:	4805      	ldr	r0, [pc, #20]	; (80017dc <HAL_UART_RxCpltCallback+0x28>)
 80017c8:	f004 fab0 	bl	8005d2c <HAL_UART_Receive_IT>
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000424 	.word	0x20000424
 80017d8:	20000428 	.word	0x20000428
 80017dc:	20000304 	.word	0x20000304

080017e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017e0:	480d      	ldr	r0, [pc, #52]	; (8001818 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017e4:	480d      	ldr	r0, [pc, #52]	; (800181c <LoopForever+0x6>)
  ldr r1, =_edata
 80017e6:	490e      	ldr	r1, [pc, #56]	; (8001820 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017e8:	4a0e      	ldr	r2, [pc, #56]	; (8001824 <LoopForever+0xe>)
  movs r3, #0
 80017ea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80017ec:	e002      	b.n	80017f4 <LoopCopyDataInit>

080017ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f2:	3304      	adds	r3, #4

080017f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f8:	d3f9      	bcc.n	80017ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fa:	4a0b      	ldr	r2, [pc, #44]	; (8001828 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017fc:	4c0b      	ldr	r4, [pc, #44]	; (800182c <LoopForever+0x16>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001800:	e001      	b.n	8001806 <LoopFillZerobss>

08001802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001804:	3204      	adds	r2, #4

08001806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001808:	d3fb      	bcc.n	8001802 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800180a:	f7ff fb8d 	bl	8000f28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800180e:	f006 fbf5 	bl	8007ffc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001812:	f7ff f953 	bl	8000abc <main>

08001816 <LoopForever>:

LoopForever:
    b LoopForever
 8001816:	e7fe      	b.n	8001816 <LoopForever>
  ldr   r0, =_estack
 8001818:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800181c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001820:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 8001824:	08009190 	.word	0x08009190
  ldr r2, =_sbss
 8001828:	20000124 	.word	0x20000124
  ldr r4, =_ebss
 800182c:	20000630 	.word	0x20000630

08001830 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001830:	e7fe      	b.n	8001830 <ADC1_2_IRQHandler>

08001832 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800183c:	2003      	movs	r0, #3
 800183e:	f001 f9e6 	bl	8002c0e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001842:	200f      	movs	r0, #15
 8001844:	f7ff f9ec 	bl	8000c20 <HAL_InitTick>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d002      	beq.n	8001854 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	71fb      	strb	r3, [r7, #7]
 8001852:	e001      	b.n	8001858 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001854:	f7ff f9c0 	bl	8000bd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001858:	79fb      	ldrb	r3, [r7, #7]

}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <HAL_IncTick+0x1c>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b05      	ldr	r3, [pc, #20]	; (8001884 <HAL_IncTick+0x20>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4413      	add	r3, r2
 8001872:	4a03      	ldr	r2, [pc, #12]	; (8001880 <HAL_IncTick+0x1c>)
 8001874:	6013      	str	r3, [r2, #0]
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	200004e0 	.word	0x200004e0
 8001884:	200000c4 	.word	0x200000c4

08001888 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return uwTick;
 800188c:	4b03      	ldr	r3, [pc, #12]	; (800189c <HAL_GetTick+0x14>)
 800188e:	681b      	ldr	r3, [r3, #0]
}
 8001890:	4618      	mov	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	200004e0 	.word	0x200004e0

080018a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	431a      	orrs	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	609a      	str	r2, [r3, #8]
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
 80018ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	431a      	orrs	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	609a      	str	r2, [r3, #8]
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001908:	b480      	push	{r7}
 800190a:	b087      	sub	sp, #28
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
 8001914:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	3360      	adds	r3, #96	; 0x60
 800191a:	461a      	mov	r2, r3
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b08      	ldr	r3, [pc, #32]	; (800194c <LL_ADC_SetOffset+0x44>)
 800192a:	4013      	ands	r3, r2
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	4313      	orrs	r3, r2
 8001938:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001940:	bf00      	nop
 8001942:	371c      	adds	r7, #28
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	03fff000 	.word	0x03fff000

08001950 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3360      	adds	r3, #96	; 0x60
 800195e:	461a      	mov	r2, r3
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001970:	4618      	mov	r0, r3
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800197c:	b480      	push	{r7}
 800197e:	b087      	sub	sp, #28
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	3360      	adds	r3, #96	; 0x60
 800198c:	461a      	mov	r2, r3
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	431a      	orrs	r2, r3
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80019a6:	bf00      	nop
 80019a8:	371c      	adds	r7, #28
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b087      	sub	sp, #28
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	3360      	adds	r3, #96	; 0x60
 80019c2:	461a      	mov	r2, r3
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	431a      	orrs	r2, r3
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80019dc:	bf00      	nop
 80019de:	371c      	adds	r7, #28
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b087      	sub	sp, #28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	3360      	adds	r3, #96	; 0x60
 80019f8:	461a      	mov	r2, r3
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001a12:	bf00      	nop
 8001a14:	371c      	adds	r7, #28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	431a      	orrs	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	615a      	str	r2, [r3, #20]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	3330      	adds	r3, #48	; 0x30
 8001a54:	461a      	mov	r2, r3
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	0a1b      	lsrs	r3, r3, #8
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	f003 030c 	and.w	r3, r3, #12
 8001a60:	4413      	add	r3, r2
 8001a62:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	f003 031f 	and.w	r3, r3, #31
 8001a6e:	211f      	movs	r1, #31
 8001a70:	fa01 f303 	lsl.w	r3, r1, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	401a      	ands	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	0e9b      	lsrs	r3, r3, #26
 8001a7c:	f003 011f 	and.w	r1, r3, #31
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	f003 031f 	and.w	r3, r3, #31
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a90:	bf00      	nop
 8001a92:	371c      	adds	r7, #28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b087      	sub	sp, #28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	3314      	adds	r3, #20
 8001aac:	461a      	mov	r2, r3
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	0e5b      	lsrs	r3, r3, #25
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	4413      	add	r3, r2
 8001aba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	0d1b      	lsrs	r3, r3, #20
 8001ac4:	f003 031f 	and.w	r3, r3, #31
 8001ac8:	2107      	movs	r1, #7
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	401a      	ands	r2, r3
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	0d1b      	lsrs	r3, r3, #20
 8001ad6:	f003 031f 	and.w	r3, r3, #31
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ae6:	bf00      	nop
 8001ae8:	371c      	adds	r7, #28
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a0f      	ldr	r2, [pc, #60]	; (8001b40 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d10a      	bne.n	8001b1e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b14:	431a      	orrs	r2, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001b1c:	e00a      	b.n	8001b34 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	401a      	ands	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001b34:	bf00      	nop
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	407f0000 	.word	0x407f0000

08001b44 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6093      	str	r3, [r2, #8]
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b7c:	d101      	bne.n	8001b82 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e000      	b.n	8001b84 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001ba0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ba4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001bcc:	d101      	bne.n	8001bd2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d101      	bne.n	8001bf8 <LL_ADC_IsEnabled+0x18>
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e000      	b.n	8001bfa <LL_ADC_IsEnabled+0x1a>
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 0304 	and.w	r3, r3, #4
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d101      	bne.n	8001c1e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 0308 	and.w	r3, r3, #8
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	d101      	bne.n	8001c44 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c40:	2301      	movs	r3, #1
 8001c42:	e000      	b.n	8001c46 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c54:	b590      	push	{r4, r7, lr}
 8001c56:	b089      	sub	sp, #36	; 0x24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e1af      	b.n	8001fce <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d109      	bne.n	8001c90 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7fe fd93 	bl	80007a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ff67 	bl	8001b68 <LL_ADC_IsDeepPowerDownEnabled>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d004      	beq.n	8001caa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff4d 	bl	8001b44 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff ff82 	bl	8001bb8 <LL_ADC_IsInternalRegulatorEnabled>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d115      	bne.n	8001ce6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff ff66 	bl	8001b90 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cc4:	4b9f      	ldr	r3, [pc, #636]	; (8001f44 <HAL_ADC_Init+0x2f0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	099b      	lsrs	r3, r3, #6
 8001cca:	4a9f      	ldr	r2, [pc, #636]	; (8001f48 <HAL_ADC_Init+0x2f4>)
 8001ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd0:	099b      	lsrs	r3, r3, #6
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cd8:	e002      	b.n	8001ce0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f9      	bne.n	8001cda <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff ff64 	bl	8001bb8 <LL_ADC_IsInternalRegulatorEnabled>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10d      	bne.n	8001d12 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfa:	f043 0210 	orr.w	r2, r3, #16
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d06:	f043 0201 	orr.w	r2, r3, #1
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff ff75 	bl	8001c06 <LL_ADC_REG_IsConversionOngoing>
 8001d1c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d22:	f003 0310 	and.w	r3, r3, #16
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f040 8148 	bne.w	8001fbc <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f040 8144 	bne.w	8001fbc <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d38:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d3c:	f043 0202 	orr.w	r2, r3, #2
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ff49 	bl	8001be0 <LL_ADC_IsEnabled>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d141      	bne.n	8001dd8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d5c:	d004      	beq.n	8001d68 <HAL_ADC_Init+0x114>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a7a      	ldr	r2, [pc, #488]	; (8001f4c <HAL_ADC_Init+0x2f8>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d10f      	bne.n	8001d88 <HAL_ADC_Init+0x134>
 8001d68:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001d6c:	f7ff ff38 	bl	8001be0 <LL_ADC_IsEnabled>
 8001d70:	4604      	mov	r4, r0
 8001d72:	4876      	ldr	r0, [pc, #472]	; (8001f4c <HAL_ADC_Init+0x2f8>)
 8001d74:	f7ff ff34 	bl	8001be0 <LL_ADC_IsEnabled>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	4323      	orrs	r3, r4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	bf0c      	ite	eq
 8001d80:	2301      	moveq	r3, #1
 8001d82:	2300      	movne	r3, #0
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	e012      	b.n	8001dae <HAL_ADC_Init+0x15a>
 8001d88:	4871      	ldr	r0, [pc, #452]	; (8001f50 <HAL_ADC_Init+0x2fc>)
 8001d8a:	f7ff ff29 	bl	8001be0 <LL_ADC_IsEnabled>
 8001d8e:	4604      	mov	r4, r0
 8001d90:	4870      	ldr	r0, [pc, #448]	; (8001f54 <HAL_ADC_Init+0x300>)
 8001d92:	f7ff ff25 	bl	8001be0 <LL_ADC_IsEnabled>
 8001d96:	4603      	mov	r3, r0
 8001d98:	431c      	orrs	r4, r3
 8001d9a:	486f      	ldr	r0, [pc, #444]	; (8001f58 <HAL_ADC_Init+0x304>)
 8001d9c:	f7ff ff20 	bl	8001be0 <LL_ADC_IsEnabled>
 8001da0:	4603      	mov	r3, r0
 8001da2:	4323      	orrs	r3, r4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	bf0c      	ite	eq
 8001da8:	2301      	moveq	r3, #1
 8001daa:	2300      	movne	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d012      	beq.n	8001dd8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dba:	d004      	beq.n	8001dc6 <HAL_ADC_Init+0x172>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a62      	ldr	r2, [pc, #392]	; (8001f4c <HAL_ADC_Init+0x2f8>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d101      	bne.n	8001dca <HAL_ADC_Init+0x176>
 8001dc6:	4a65      	ldr	r2, [pc, #404]	; (8001f5c <HAL_ADC_Init+0x308>)
 8001dc8:	e000      	b.n	8001dcc <HAL_ADC_Init+0x178>
 8001dca:	4a65      	ldr	r2, [pc, #404]	; (8001f60 <HAL_ADC_Init+0x30c>)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	f7ff fd64 	bl	80018a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	7f5b      	ldrb	r3, [r3, #29]
 8001ddc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001de2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001de8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001dee:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001df6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d106      	bne.n	8001e14 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	045b      	lsls	r3, r3, #17
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d009      	beq.n	8001e30 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e20:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e28:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	4b4b      	ldr	r3, [pc, #300]	; (8001f64 <HAL_ADC_Init+0x310>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6812      	ldr	r2, [r2, #0]
 8001e3e:	69b9      	ldr	r1, [r7, #24]
 8001e40:	430b      	orrs	r3, r1
 8001e42:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fed1 	bl	8001c06 <LL_ADC_REG_IsConversionOngoing>
 8001e64:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fede 	bl	8001c2c <LL_ADC_INJ_IsConversionOngoing>
 8001e70:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d17f      	bne.n	8001f78 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d17c      	bne.n	8001f78 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e82:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e8a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e9a:	f023 0302 	bic.w	r3, r3, #2
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6812      	ldr	r2, [r2, #0]
 8001ea2:	69b9      	ldr	r1, [r7, #24]
 8001ea4:	430b      	orrs	r3, r1
 8001ea6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d017      	beq.n	8001ee0 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	691a      	ldr	r2, [r3, #16]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ebe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ec8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001ecc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6911      	ldr	r1, [r2, #16]
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	430b      	orrs	r3, r1
 8001eda:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001ede:	e013      	b.n	8001f08 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691a      	ldr	r2, [r3, #16]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001eee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f04:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d12a      	bne.n	8001f68 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001f1c:	f023 0304 	bic.w	r3, r3, #4
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f28:	4311      	orrs	r1, r2
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001f2e:	4311      	orrs	r1, r2
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f34:	430a      	orrs	r2, r1
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f042 0201 	orr.w	r2, r2, #1
 8001f40:	611a      	str	r2, [r3, #16]
 8001f42:	e019      	b.n	8001f78 <HAL_ADC_Init+0x324>
 8001f44:	20000000 	.word	0x20000000
 8001f48:	053e2d63 	.word	0x053e2d63
 8001f4c:	50000100 	.word	0x50000100
 8001f50:	50000400 	.word	0x50000400
 8001f54:	50000500 	.word	0x50000500
 8001f58:	50000600 	.word	0x50000600
 8001f5c:	50000300 	.word	0x50000300
 8001f60:	50000700 	.word	0x50000700
 8001f64:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691a      	ldr	r2, [r3, #16]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0201 	bic.w	r2, r2, #1
 8001f76:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d10c      	bne.n	8001f9a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f023 010f 	bic.w	r1, r3, #15
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	1e5a      	subs	r2, r3, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	631a      	str	r2, [r3, #48]	; 0x30
 8001f98:	e007      	b.n	8001faa <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 020f 	bic.w	r2, r2, #15
 8001fa8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fae:	f023 0303 	bic.w	r3, r3, #3
 8001fb2:	f043 0201 	orr.w	r2, r3, #1
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fba:	e007      	b.n	8001fcc <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc0:	f043 0210 	orr.w	r2, r3, #16
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fcc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3724      	adds	r7, #36	; 0x24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd90      	pop	{r4, r7, pc}
 8001fd6:	bf00      	nop

08001fd8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b0b6      	sub	sp, #216	; 0xd8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d102      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x24>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	f000 bc13 	b.w	8002822 <HAL_ADC_ConfigChannel+0x84a>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff fdfc 	bl	8001c06 <LL_ADC_REG_IsConversionOngoing>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	f040 83f3 	bne.w	80027fc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6818      	ldr	r0, [r3, #0]
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	6859      	ldr	r1, [r3, #4]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	f7ff fd0e 	bl	8001a44 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff fdea 	bl	8001c06 <LL_ADC_REG_IsConversionOngoing>
 8002032:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fdf6 	bl	8001c2c <LL_ADC_INJ_IsConversionOngoing>
 8002040:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002044:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002048:	2b00      	cmp	r3, #0
 800204a:	f040 81d9 	bne.w	8002400 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800204e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002052:	2b00      	cmp	r3, #0
 8002054:	f040 81d4 	bne.w	8002400 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002060:	d10f      	bne.n	8002082 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6818      	ldr	r0, [r3, #0]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2200      	movs	r2, #0
 800206c:	4619      	mov	r1, r3
 800206e:	f7ff fd15 	bl	8001a9c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fccf 	bl	8001a1e <LL_ADC_SetSamplingTimeCommonConfig>
 8002080:	e00e      	b.n	80020a0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6818      	ldr	r0, [r3, #0]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	6819      	ldr	r1, [r3, #0]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	461a      	mov	r2, r3
 8002090:	f7ff fd04 	bl	8001a9c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2100      	movs	r1, #0
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff fcbf 	bl	8001a1e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	695a      	ldr	r2, [r3, #20]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	08db      	lsrs	r3, r3, #3
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d022      	beq.n	8002108 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6818      	ldr	r0, [r3, #0]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	6919      	ldr	r1, [r3, #16]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80020d2:	f7ff fc19 	bl	8001908 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6818      	ldr	r0, [r3, #0]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	6919      	ldr	r1, [r3, #16]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	461a      	mov	r2, r3
 80020e4:	f7ff fc65 	bl	80019b2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6818      	ldr	r0, [r3, #0]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	6919      	ldr	r1, [r3, #16]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	7f1b      	ldrb	r3, [r3, #28]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d102      	bne.n	80020fe <HAL_ADC_ConfigChannel+0x126>
 80020f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020fc:	e000      	b.n	8002100 <HAL_ADC_ConfigChannel+0x128>
 80020fe:	2300      	movs	r3, #0
 8002100:	461a      	mov	r2, r3
 8002102:	f7ff fc71 	bl	80019e8 <LL_ADC_SetOffsetSaturation>
 8002106:	e17b      	b.n	8002400 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2100      	movs	r1, #0
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fc1e 	bl	8001950 <LL_ADC_GetOffsetChannel>
 8002114:	4603      	mov	r3, r0
 8002116:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10a      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x15c>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2100      	movs	r1, #0
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff fc13 	bl	8001950 <LL_ADC_GetOffsetChannel>
 800212a:	4603      	mov	r3, r0
 800212c:	0e9b      	lsrs	r3, r3, #26
 800212e:	f003 021f 	and.w	r2, r3, #31
 8002132:	e01e      	b.n	8002172 <HAL_ADC_ConfigChannel+0x19a>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2100      	movs	r1, #0
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff fc08 	bl	8001950 <LL_ADC_GetOffsetChannel>
 8002140:	4603      	mov	r3, r0
 8002142:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002146:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800214a:	fa93 f3a3 	rbit	r3, r3
 800214e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002152:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002156:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800215a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002162:	2320      	movs	r3, #32
 8002164:	e004      	b.n	8002170 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002166:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800216a:	fab3 f383 	clz	r3, r3
 800216e:	b2db      	uxtb	r3, r3
 8002170:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800217a:	2b00      	cmp	r3, #0
 800217c:	d105      	bne.n	800218a <HAL_ADC_ConfigChannel+0x1b2>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	0e9b      	lsrs	r3, r3, #26
 8002184:	f003 031f 	and.w	r3, r3, #31
 8002188:	e018      	b.n	80021bc <HAL_ADC_ConfigChannel+0x1e4>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002196:	fa93 f3a3 	rbit	r3, r3
 800219a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800219e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80021a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80021ae:	2320      	movs	r3, #32
 80021b0:	e004      	b.n	80021bc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80021b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021b6:	fab3 f383 	clz	r3, r3
 80021ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021bc:	429a      	cmp	r2, r3
 80021be:	d106      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2200      	movs	r2, #0
 80021c6:	2100      	movs	r1, #0
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff fbd7 	bl	800197c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2101      	movs	r1, #1
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff fbbb 	bl	8001950 <LL_ADC_GetOffsetChannel>
 80021da:	4603      	mov	r3, r0
 80021dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d10a      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x222>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2101      	movs	r1, #1
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff fbb0 	bl	8001950 <LL_ADC_GetOffsetChannel>
 80021f0:	4603      	mov	r3, r0
 80021f2:	0e9b      	lsrs	r3, r3, #26
 80021f4:	f003 021f 	and.w	r2, r3, #31
 80021f8:	e01e      	b.n	8002238 <HAL_ADC_ConfigChannel+0x260>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2101      	movs	r1, #1
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff fba5 	bl	8001950 <LL_ADC_GetOffsetChannel>
 8002206:	4603      	mov	r3, r0
 8002208:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002210:	fa93 f3a3 	rbit	r3, r3
 8002214:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002218:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800221c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002220:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002228:	2320      	movs	r3, #32
 800222a:	e004      	b.n	8002236 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800222c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002230:	fab3 f383 	clz	r3, r3
 8002234:	b2db      	uxtb	r3, r3
 8002236:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002240:	2b00      	cmp	r3, #0
 8002242:	d105      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x278>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	0e9b      	lsrs	r3, r3, #26
 800224a:	f003 031f 	and.w	r3, r3, #31
 800224e:	e018      	b.n	8002282 <HAL_ADC_ConfigChannel+0x2aa>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002258:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800225c:	fa93 f3a3 	rbit	r3, r3
 8002260:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002264:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002268:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800226c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002274:	2320      	movs	r3, #32
 8002276:	e004      	b.n	8002282 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002278:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800227c:	fab3 f383 	clz	r3, r3
 8002280:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002282:	429a      	cmp	r2, r3
 8002284:	d106      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2200      	movs	r2, #0
 800228c:	2101      	movs	r1, #1
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff fb74 	bl	800197c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2102      	movs	r1, #2
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fb58 	bl	8001950 <LL_ADC_GetOffsetChannel>
 80022a0:	4603      	mov	r3, r0
 80022a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10a      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x2e8>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2102      	movs	r1, #2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fb4d 	bl	8001950 <LL_ADC_GetOffsetChannel>
 80022b6:	4603      	mov	r3, r0
 80022b8:	0e9b      	lsrs	r3, r3, #26
 80022ba:	f003 021f 	and.w	r2, r3, #31
 80022be:	e01e      	b.n	80022fe <HAL_ADC_ConfigChannel+0x326>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2102      	movs	r1, #2
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff fb42 	bl	8001950 <LL_ADC_GetOffsetChannel>
 80022cc:	4603      	mov	r3, r0
 80022ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022d6:	fa93 f3a3 	rbit	r3, r3
 80022da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80022de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80022e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80022ee:	2320      	movs	r3, #32
 80022f0:	e004      	b.n	80022fc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80022f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022f6:	fab3 f383 	clz	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002306:	2b00      	cmp	r3, #0
 8002308:	d105      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x33e>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	0e9b      	lsrs	r3, r3, #26
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	e016      	b.n	8002344 <HAL_ADC_ConfigChannel+0x36c>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002322:	fa93 f3a3 	rbit	r3, r3
 8002326:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002328:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800232a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800232e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002336:	2320      	movs	r3, #32
 8002338:	e004      	b.n	8002344 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800233a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800233e:	fab3 f383 	clz	r3, r3
 8002342:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002344:	429a      	cmp	r2, r3
 8002346:	d106      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2200      	movs	r2, #0
 800234e:	2102      	movs	r1, #2
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fb13 	bl	800197c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2103      	movs	r1, #3
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff faf7 	bl	8001950 <LL_ADC_GetOffsetChannel>
 8002362:	4603      	mov	r3, r0
 8002364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10a      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x3aa>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2103      	movs	r1, #3
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff faec 	bl	8001950 <LL_ADC_GetOffsetChannel>
 8002378:	4603      	mov	r3, r0
 800237a:	0e9b      	lsrs	r3, r3, #26
 800237c:	f003 021f 	and.w	r2, r3, #31
 8002380:	e017      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x3da>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2103      	movs	r1, #3
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fae1 	bl	8001950 <LL_ADC_GetOffsetChannel>
 800238e:	4603      	mov	r3, r0
 8002390:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002394:	fa93 f3a3 	rbit	r3, r3
 8002398:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800239a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800239c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800239e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80023a4:	2320      	movs	r3, #32
 80023a6:	e003      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80023a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023aa:	fab3 f383 	clz	r3, r3
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d105      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x3f2>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	0e9b      	lsrs	r3, r3, #26
 80023c4:	f003 031f 	and.w	r3, r3, #31
 80023c8:	e011      	b.n	80023ee <HAL_ADC_ConfigChannel+0x416>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023d2:	fa93 f3a3 	rbit	r3, r3
 80023d6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80023d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023da:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80023dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80023e2:	2320      	movs	r3, #32
 80023e4:	e003      	b.n	80023ee <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80023e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023e8:	fab3 f383 	clz	r3, r3
 80023ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d106      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2200      	movs	r2, #0
 80023f8:	2103      	movs	r1, #3
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff fabe 	bl	800197c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff fbeb 	bl	8001be0 <LL_ADC_IsEnabled>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	f040 813d 	bne.w	800268c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6818      	ldr	r0, [r3, #0]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	6819      	ldr	r1, [r3, #0]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	461a      	mov	r2, r3
 8002420:	f7ff fb68 	bl	8001af4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4aa2      	ldr	r2, [pc, #648]	; (80026b4 <HAL_ADC_ConfigChannel+0x6dc>)
 800242a:	4293      	cmp	r3, r2
 800242c:	f040 812e 	bne.w	800268c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10b      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x480>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	0e9b      	lsrs	r3, r3, #26
 8002446:	3301      	adds	r3, #1
 8002448:	f003 031f 	and.w	r3, r3, #31
 800244c:	2b09      	cmp	r3, #9
 800244e:	bf94      	ite	ls
 8002450:	2301      	movls	r3, #1
 8002452:	2300      	movhi	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	e019      	b.n	800248c <HAL_ADC_ConfigChannel+0x4b4>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002460:	fa93 f3a3 	rbit	r3, r3
 8002464:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002466:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002468:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800246a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002470:	2320      	movs	r3, #32
 8002472:	e003      	b.n	800247c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002474:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002476:	fab3 f383 	clz	r3, r3
 800247a:	b2db      	uxtb	r3, r3
 800247c:	3301      	adds	r3, #1
 800247e:	f003 031f 	and.w	r3, r3, #31
 8002482:	2b09      	cmp	r3, #9
 8002484:	bf94      	ite	ls
 8002486:	2301      	movls	r3, #1
 8002488:	2300      	movhi	r3, #0
 800248a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800248c:	2b00      	cmp	r3, #0
 800248e:	d079      	beq.n	8002584 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002498:	2b00      	cmp	r3, #0
 800249a:	d107      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x4d4>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	0e9b      	lsrs	r3, r3, #26
 80024a2:	3301      	adds	r3, #1
 80024a4:	069b      	lsls	r3, r3, #26
 80024a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024aa:	e015      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x500>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024b4:	fa93 f3a3 	rbit	r3, r3
 80024b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80024ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80024be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80024c4:	2320      	movs	r3, #32
 80024c6:	e003      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80024c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	3301      	adds	r3, #1
 80024d2:	069b      	lsls	r3, r3, #26
 80024d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d109      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x520>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	0e9b      	lsrs	r3, r3, #26
 80024ea:	3301      	adds	r3, #1
 80024ec:	f003 031f 	and.w	r3, r3, #31
 80024f0:	2101      	movs	r1, #1
 80024f2:	fa01 f303 	lsl.w	r3, r1, r3
 80024f6:	e017      	b.n	8002528 <HAL_ADC_ConfigChannel+0x550>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002500:	fa93 f3a3 	rbit	r3, r3
 8002504:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002508:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800250a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002510:	2320      	movs	r3, #32
 8002512:	e003      	b.n	800251c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002516:	fab3 f383 	clz	r3, r3
 800251a:	b2db      	uxtb	r3, r3
 800251c:	3301      	adds	r3, #1
 800251e:	f003 031f 	and.w	r3, r3, #31
 8002522:	2101      	movs	r1, #1
 8002524:	fa01 f303 	lsl.w	r3, r1, r3
 8002528:	ea42 0103 	orr.w	r1, r2, r3
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10a      	bne.n	800254e <HAL_ADC_ConfigChannel+0x576>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	0e9b      	lsrs	r3, r3, #26
 800253e:	3301      	adds	r3, #1
 8002540:	f003 021f 	and.w	r2, r3, #31
 8002544:	4613      	mov	r3, r2
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4413      	add	r3, r2
 800254a:	051b      	lsls	r3, r3, #20
 800254c:	e018      	b.n	8002580 <HAL_ADC_ConfigChannel+0x5a8>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002556:	fa93 f3a3 	rbit	r3, r3
 800255a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800255c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800255e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002566:	2320      	movs	r3, #32
 8002568:	e003      	b.n	8002572 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800256a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800256c:	fab3 f383 	clz	r3, r3
 8002570:	b2db      	uxtb	r3, r3
 8002572:	3301      	adds	r3, #1
 8002574:	f003 021f 	and.w	r2, r3, #31
 8002578:	4613      	mov	r3, r2
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	4413      	add	r3, r2
 800257e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002580:	430b      	orrs	r3, r1
 8002582:	e07e      	b.n	8002682 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800258c:	2b00      	cmp	r3, #0
 800258e:	d107      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x5c8>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	0e9b      	lsrs	r3, r3, #26
 8002596:	3301      	adds	r3, #1
 8002598:	069b      	lsls	r3, r3, #26
 800259a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800259e:	e015      	b.n	80025cc <HAL_ADC_ConfigChannel+0x5f4>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a8:	fa93 f3a3 	rbit	r3, r3
 80025ac:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80025ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80025b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80025b8:	2320      	movs	r3, #32
 80025ba:	e003      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80025bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025be:	fab3 f383 	clz	r3, r3
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	3301      	adds	r3, #1
 80025c6:	069b      	lsls	r3, r3, #26
 80025c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d109      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x614>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	0e9b      	lsrs	r3, r3, #26
 80025de:	3301      	adds	r3, #1
 80025e0:	f003 031f 	and.w	r3, r3, #31
 80025e4:	2101      	movs	r1, #1
 80025e6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ea:	e017      	b.n	800261c <HAL_ADC_ConfigChannel+0x644>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	fa93 f3a3 	rbit	r3, r3
 80025f8:	61fb      	str	r3, [r7, #28]
  return result;
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002604:	2320      	movs	r3, #32
 8002606:	e003      	b.n	8002610 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	fab3 f383 	clz	r3, r3
 800260e:	b2db      	uxtb	r3, r3
 8002610:	3301      	adds	r3, #1
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	2101      	movs	r1, #1
 8002618:	fa01 f303 	lsl.w	r3, r1, r3
 800261c:	ea42 0103 	orr.w	r1, r2, r3
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10d      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x670>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	0e9b      	lsrs	r3, r3, #26
 8002632:	3301      	adds	r3, #1
 8002634:	f003 021f 	and.w	r2, r3, #31
 8002638:	4613      	mov	r3, r2
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	4413      	add	r3, r2
 800263e:	3b1e      	subs	r3, #30
 8002640:	051b      	lsls	r3, r3, #20
 8002642:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002646:	e01b      	b.n	8002680 <HAL_ADC_ConfigChannel+0x6a8>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	fa93 f3a3 	rbit	r3, r3
 8002654:	613b      	str	r3, [r7, #16]
  return result;
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002660:	2320      	movs	r3, #32
 8002662:	e003      	b.n	800266c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	fab3 f383 	clz	r3, r3
 800266a:	b2db      	uxtb	r3, r3
 800266c:	3301      	adds	r3, #1
 800266e:	f003 021f 	and.w	r2, r3, #31
 8002672:	4613      	mov	r3, r2
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	4413      	add	r3, r2
 8002678:	3b1e      	subs	r3, #30
 800267a:	051b      	lsls	r3, r3, #20
 800267c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002680:	430b      	orrs	r3, r1
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	6892      	ldr	r2, [r2, #8]
 8002686:	4619      	mov	r1, r3
 8002688:	f7ff fa08 	bl	8001a9c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <HAL_ADC_ConfigChannel+0x6e0>)
 8002692:	4013      	ands	r3, r2
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 80be 	beq.w	8002816 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026a2:	d004      	beq.n	80026ae <HAL_ADC_ConfigChannel+0x6d6>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a04      	ldr	r2, [pc, #16]	; (80026bc <HAL_ADC_ConfigChannel+0x6e4>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d10a      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x6ec>
 80026ae:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <HAL_ADC_ConfigChannel+0x6e8>)
 80026b0:	e009      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x6ee>
 80026b2:	bf00      	nop
 80026b4:	407f0000 	.word	0x407f0000
 80026b8:	80080000 	.word	0x80080000
 80026bc:	50000100 	.word	0x50000100
 80026c0:	50000300 	.word	0x50000300
 80026c4:	4b59      	ldr	r3, [pc, #356]	; (800282c <HAL_ADC_ConfigChannel+0x854>)
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff f910 	bl	80018ec <LL_ADC_GetCommonPathInternalCh>
 80026cc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a56      	ldr	r2, [pc, #344]	; (8002830 <HAL_ADC_ConfigChannel+0x858>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d004      	beq.n	80026e4 <HAL_ADC_ConfigChannel+0x70c>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a55      	ldr	r2, [pc, #340]	; (8002834 <HAL_ADC_ConfigChannel+0x85c>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d13a      	bne.n	800275a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d134      	bne.n	800275a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026f8:	d005      	beq.n	8002706 <HAL_ADC_ConfigChannel+0x72e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a4e      	ldr	r2, [pc, #312]	; (8002838 <HAL_ADC_ConfigChannel+0x860>)
 8002700:	4293      	cmp	r3, r2
 8002702:	f040 8085 	bne.w	8002810 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800270e:	d004      	beq.n	800271a <HAL_ADC_ConfigChannel+0x742>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a49      	ldr	r2, [pc, #292]	; (800283c <HAL_ADC_ConfigChannel+0x864>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d101      	bne.n	800271e <HAL_ADC_ConfigChannel+0x746>
 800271a:	4a49      	ldr	r2, [pc, #292]	; (8002840 <HAL_ADC_ConfigChannel+0x868>)
 800271c:	e000      	b.n	8002720 <HAL_ADC_ConfigChannel+0x748>
 800271e:	4a43      	ldr	r2, [pc, #268]	; (800282c <HAL_ADC_ConfigChannel+0x854>)
 8002720:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002724:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002728:	4619      	mov	r1, r3
 800272a:	4610      	mov	r0, r2
 800272c:	f7ff f8cb 	bl	80018c6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002730:	4b44      	ldr	r3, [pc, #272]	; (8002844 <HAL_ADC_ConfigChannel+0x86c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	099b      	lsrs	r3, r3, #6
 8002736:	4a44      	ldr	r2, [pc, #272]	; (8002848 <HAL_ADC_ConfigChannel+0x870>)
 8002738:	fba2 2303 	umull	r2, r3, r2, r3
 800273c:	099b      	lsrs	r3, r3, #6
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	4613      	mov	r3, r2
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	4413      	add	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800274a:	e002      	b.n	8002752 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	3b01      	subs	r3, #1
 8002750:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1f9      	bne.n	800274c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002758:	e05a      	b.n	8002810 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a3b      	ldr	r2, [pc, #236]	; (800284c <HAL_ADC_ConfigChannel+0x874>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d125      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x7d8>
 8002764:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002768:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d11f      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a31      	ldr	r2, [pc, #196]	; (800283c <HAL_ADC_ConfigChannel+0x864>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d104      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x7ac>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a34      	ldr	r2, [pc, #208]	; (8002850 <HAL_ADC_ConfigChannel+0x878>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d047      	beq.n	8002814 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800278c:	d004      	beq.n	8002798 <HAL_ADC_ConfigChannel+0x7c0>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a2a      	ldr	r2, [pc, #168]	; (800283c <HAL_ADC_ConfigChannel+0x864>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d101      	bne.n	800279c <HAL_ADC_ConfigChannel+0x7c4>
 8002798:	4a29      	ldr	r2, [pc, #164]	; (8002840 <HAL_ADC_ConfigChannel+0x868>)
 800279a:	e000      	b.n	800279e <HAL_ADC_ConfigChannel+0x7c6>
 800279c:	4a23      	ldr	r2, [pc, #140]	; (800282c <HAL_ADC_ConfigChannel+0x854>)
 800279e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027a6:	4619      	mov	r1, r3
 80027a8:	4610      	mov	r0, r2
 80027aa:	f7ff f88c 	bl	80018c6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027ae:	e031      	b.n	8002814 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a27      	ldr	r2, [pc, #156]	; (8002854 <HAL_ADC_ConfigChannel+0x87c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d12d      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d127      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a1c      	ldr	r2, [pc, #112]	; (800283c <HAL_ADC_ConfigChannel+0x864>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d022      	beq.n	8002816 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027d8:	d004      	beq.n	80027e4 <HAL_ADC_ConfigChannel+0x80c>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a17      	ldr	r2, [pc, #92]	; (800283c <HAL_ADC_ConfigChannel+0x864>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d101      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x810>
 80027e4:	4a16      	ldr	r2, [pc, #88]	; (8002840 <HAL_ADC_ConfigChannel+0x868>)
 80027e6:	e000      	b.n	80027ea <HAL_ADC_ConfigChannel+0x812>
 80027e8:	4a10      	ldr	r2, [pc, #64]	; (800282c <HAL_ADC_ConfigChannel+0x854>)
 80027ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027f2:	4619      	mov	r1, r3
 80027f4:	4610      	mov	r0, r2
 80027f6:	f7ff f866 	bl	80018c6 <LL_ADC_SetCommonPathInternalCh>
 80027fa:	e00c      	b.n	8002816 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002800:	f043 0220 	orr.w	r2, r3, #32
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800280e:	e002      	b.n	8002816 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002810:	bf00      	nop
 8002812:	e000      	b.n	8002816 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002814:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800281e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002822:	4618      	mov	r0, r3
 8002824:	37d8      	adds	r7, #216	; 0xd8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	50000700 	.word	0x50000700
 8002830:	c3210000 	.word	0xc3210000
 8002834:	90c00010 	.word	0x90c00010
 8002838:	50000600 	.word	0x50000600
 800283c:	50000100 	.word	0x50000100
 8002840:	50000300 	.word	0x50000300
 8002844:	20000000 	.word	0x20000000
 8002848:	053e2d63 	.word	0x053e2d63
 800284c:	c7520000 	.word	0xc7520000
 8002850:	50000500 	.word	0x50000500
 8002854:	cb840000 	.word	0xcb840000

08002858 <LL_ADC_IsEnabled>:
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <LL_ADC_IsEnabled+0x18>
 800286c:	2301      	movs	r3, #1
 800286e:	e000      	b.n	8002872 <LL_ADC_IsEnabled+0x1a>
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <LL_ADC_REG_IsConversionOngoing>:
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	2b04      	cmp	r3, #4
 8002890:	d101      	bne.n	8002896 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002892:	2301      	movs	r3, #1
 8002894:	e000      	b.n	8002898 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80028a4:	b590      	push	{r4, r7, lr}
 80028a6:	b0a1      	sub	sp, #132	; 0x84
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d101      	bne.n	80028c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80028be:	2302      	movs	r3, #2
 80028c0:	e0e7      	b.n	8002a92 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80028ca:	2300      	movs	r3, #0
 80028cc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80028ce:	2300      	movs	r3, #0
 80028d0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028da:	d102      	bne.n	80028e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80028dc:	4b6f      	ldr	r3, [pc, #444]	; (8002a9c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	e009      	b.n	80028f6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a6e      	ldr	r2, [pc, #440]	; (8002aa0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d102      	bne.n	80028f2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80028ec:	4b6d      	ldr	r3, [pc, #436]	; (8002aa4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80028ee:	60bb      	str	r3, [r7, #8]
 80028f0:	e001      	b.n	80028f6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80028f2:	2300      	movs	r3, #0
 80028f4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10b      	bne.n	8002914 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002900:	f043 0220 	orr.w	r2, r3, #32
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0be      	b.n	8002a92 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff ffb1 	bl	800287e <LL_ADC_REG_IsConversionOngoing>
 800291c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff ffab 	bl	800287e <LL_ADC_REG_IsConversionOngoing>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	f040 80a0 	bne.w	8002a70 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002930:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002932:	2b00      	cmp	r3, #0
 8002934:	f040 809c 	bne.w	8002a70 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002940:	d004      	beq.n	800294c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a55      	ldr	r2, [pc, #340]	; (8002a9c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d101      	bne.n	8002950 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800294c:	4b56      	ldr	r3, [pc, #344]	; (8002aa8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800294e:	e000      	b.n	8002952 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002950:	4b56      	ldr	r3, [pc, #344]	; (8002aac <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002952:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d04b      	beq.n	80029f4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800295c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	6859      	ldr	r1, [r3, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800296e:	035b      	lsls	r3, r3, #13
 8002970:	430b      	orrs	r3, r1
 8002972:	431a      	orrs	r2, r3
 8002974:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002976:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002980:	d004      	beq.n	800298c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a45      	ldr	r2, [pc, #276]	; (8002a9c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d10f      	bne.n	80029ac <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800298c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002990:	f7ff ff62 	bl	8002858 <LL_ADC_IsEnabled>
 8002994:	4604      	mov	r4, r0
 8002996:	4841      	ldr	r0, [pc, #260]	; (8002a9c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002998:	f7ff ff5e 	bl	8002858 <LL_ADC_IsEnabled>
 800299c:	4603      	mov	r3, r0
 800299e:	4323      	orrs	r3, r4
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf0c      	ite	eq
 80029a4:	2301      	moveq	r3, #1
 80029a6:	2300      	movne	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	e012      	b.n	80029d2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80029ac:	483c      	ldr	r0, [pc, #240]	; (8002aa0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80029ae:	f7ff ff53 	bl	8002858 <LL_ADC_IsEnabled>
 80029b2:	4604      	mov	r4, r0
 80029b4:	483b      	ldr	r0, [pc, #236]	; (8002aa4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80029b6:	f7ff ff4f 	bl	8002858 <LL_ADC_IsEnabled>
 80029ba:	4603      	mov	r3, r0
 80029bc:	431c      	orrs	r4, r3
 80029be:	483c      	ldr	r0, [pc, #240]	; (8002ab0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80029c0:	f7ff ff4a 	bl	8002858 <LL_ADC_IsEnabled>
 80029c4:	4603      	mov	r3, r0
 80029c6:	4323      	orrs	r3, r4
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	bf0c      	ite	eq
 80029cc:	2301      	moveq	r3, #1
 80029ce:	2300      	movne	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d056      	beq.n	8002a84 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80029d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80029de:	f023 030f 	bic.w	r3, r3, #15
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	6811      	ldr	r1, [r2, #0]
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	6892      	ldr	r2, [r2, #8]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	431a      	orrs	r2, r3
 80029ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029f0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029f2:	e047      	b.n	8002a84 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80029f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029fe:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a08:	d004      	beq.n	8002a14 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a23      	ldr	r2, [pc, #140]	; (8002a9c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d10f      	bne.n	8002a34 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002a14:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002a18:	f7ff ff1e 	bl	8002858 <LL_ADC_IsEnabled>
 8002a1c:	4604      	mov	r4, r0
 8002a1e:	481f      	ldr	r0, [pc, #124]	; (8002a9c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a20:	f7ff ff1a 	bl	8002858 <LL_ADC_IsEnabled>
 8002a24:	4603      	mov	r3, r0
 8002a26:	4323      	orrs	r3, r4
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	bf0c      	ite	eq
 8002a2c:	2301      	moveq	r3, #1
 8002a2e:	2300      	movne	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	e012      	b.n	8002a5a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002a34:	481a      	ldr	r0, [pc, #104]	; (8002aa0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002a36:	f7ff ff0f 	bl	8002858 <LL_ADC_IsEnabled>
 8002a3a:	4604      	mov	r4, r0
 8002a3c:	4819      	ldr	r0, [pc, #100]	; (8002aa4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002a3e:	f7ff ff0b 	bl	8002858 <LL_ADC_IsEnabled>
 8002a42:	4603      	mov	r3, r0
 8002a44:	431c      	orrs	r4, r3
 8002a46:	481a      	ldr	r0, [pc, #104]	; (8002ab0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002a48:	f7ff ff06 	bl	8002858 <LL_ADC_IsEnabled>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	4323      	orrs	r3, r4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	bf0c      	ite	eq
 8002a54:	2301      	moveq	r3, #1
 8002a56:	2300      	movne	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d012      	beq.n	8002a84 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a66:	f023 030f 	bic.w	r3, r3, #15
 8002a6a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002a6c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a6e:	e009      	b.n	8002a84 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a74:	f043 0220 	orr.w	r2, r3, #32
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002a82:	e000      	b.n	8002a86 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a84:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a8e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3784      	adds	r7, #132	; 0x84
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd90      	pop	{r4, r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	50000100 	.word	0x50000100
 8002aa0:	50000400 	.word	0x50000400
 8002aa4:	50000500 	.word	0x50000500
 8002aa8:	50000300 	.word	0x50000300
 8002aac:	50000700 	.word	0x50000700
 8002ab0:	50000600 	.word	0x50000600

08002ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002adc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ae6:	4a04      	ldr	r2, [pc, #16]	; (8002af8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	60d3      	str	r3, [r2, #12]
}
 8002aec:	bf00      	nop
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b00:	4b04      	ldr	r3, [pc, #16]	; (8002b14 <__NVIC_GetPriorityGrouping+0x18>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	0a1b      	lsrs	r3, r3, #8
 8002b06:	f003 0307 	and.w	r3, r3, #7
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	e000ed00 	.word	0xe000ed00

08002b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	4603      	mov	r3, r0
 8002b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	db0b      	blt.n	8002b42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	f003 021f 	and.w	r2, r3, #31
 8002b30:	4907      	ldr	r1, [pc, #28]	; (8002b50 <__NVIC_EnableIRQ+0x38>)
 8002b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b36:	095b      	lsrs	r3, r3, #5
 8002b38:	2001      	movs	r0, #1
 8002b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	e000e100 	.word	0xe000e100

08002b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	6039      	str	r1, [r7, #0]
 8002b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	db0a      	blt.n	8002b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	490c      	ldr	r1, [pc, #48]	; (8002ba0 <__NVIC_SetPriority+0x4c>)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	0112      	lsls	r2, r2, #4
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	440b      	add	r3, r1
 8002b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b7c:	e00a      	b.n	8002b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	4908      	ldr	r1, [pc, #32]	; (8002ba4 <__NVIC_SetPriority+0x50>)
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	3b04      	subs	r3, #4
 8002b8c:	0112      	lsls	r2, r2, #4
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	440b      	add	r3, r1
 8002b92:	761a      	strb	r2, [r3, #24]
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	e000e100 	.word	0xe000e100
 8002ba4:	e000ed00 	.word	0xe000ed00

08002ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b089      	sub	sp, #36	; 0x24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f1c3 0307 	rsb	r3, r3, #7
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	bf28      	it	cs
 8002bc6:	2304      	movcs	r3, #4
 8002bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3304      	adds	r3, #4
 8002bce:	2b06      	cmp	r3, #6
 8002bd0:	d902      	bls.n	8002bd8 <NVIC_EncodePriority+0x30>
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	3b03      	subs	r3, #3
 8002bd6:	e000      	b.n	8002bda <NVIC_EncodePriority+0x32>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	43da      	mvns	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	401a      	ands	r2, r3
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfa:	43d9      	mvns	r1, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c00:	4313      	orrs	r3, r2
         );
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3724      	adds	r7, #36	; 0x24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff ff4c 	bl	8002ab4 <__NVIC_SetPriorityGrouping>
}
 8002c1c:	bf00      	nop
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
 8002c30:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c32:	f7ff ff63 	bl	8002afc <__NVIC_GetPriorityGrouping>
 8002c36:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	68b9      	ldr	r1, [r7, #8]
 8002c3c:	6978      	ldr	r0, [r7, #20]
 8002c3e:	f7ff ffb3 	bl	8002ba8 <NVIC_EncodePriority>
 8002c42:	4602      	mov	r2, r0
 8002c44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c48:	4611      	mov	r1, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff ff82 	bl	8002b54 <__NVIC_SetPriority>
}
 8002c50:	bf00      	nop
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff ff56 	bl	8002b18 <__NVIC_EnableIRQ>
}
 8002c6c:	bf00      	nop
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d005      	beq.n	8002c98 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2204      	movs	r2, #4
 8002c90:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	73fb      	strb	r3, [r7, #15]
 8002c96:	e037      	b.n	8002d08 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 020e 	bic.w	r2, r2, #14
 8002ca6:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cb6:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0201 	bic.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ccc:	f003 021f 	and.w	r2, r3, #31
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cda:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ce4:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00c      	beq.n	8002d08 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cfc:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002d06:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b084      	sub	sp, #16
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d00d      	beq.n	8002d5a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2204      	movs	r2, #4
 8002d42:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
 8002d58:	e047      	b.n	8002dea <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 020e 	bic.w	r2, r2, #14
 8002d68:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0201 	bic.w	r2, r2, #1
 8002d78:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d88:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8e:	f003 021f 	and.w	r2, r3, #31
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	2101      	movs	r1, #1
 8002d98:	fa01 f202 	lsl.w	r2, r1, r2
 8002d9c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002da6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00c      	beq.n	8002dca <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dbe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002dc8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	4798      	blx	r3
    }
  }
  return status;
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e02:	e15a      	b.n	80030ba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	2101      	movs	r1, #1
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e10:	4013      	ands	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 814c 	beq.w	80030b4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d005      	beq.n	8002e34 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d130      	bne.n	8002e96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	2203      	movs	r2, #3
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43db      	mvns	r3, r3
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	4013      	ands	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	091b      	lsrs	r3, r3, #4
 8002e80:	f003 0201 	and.w	r2, r3, #1
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	d017      	beq.n	8002ed2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	2203      	movs	r2, #3
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d123      	bne.n	8002f26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	08da      	lsrs	r2, r3, #3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	3208      	adds	r2, #8
 8002ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	220f      	movs	r2, #15
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43db      	mvns	r3, r3
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4013      	ands	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	691a      	ldr	r2, [r3, #16]
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	08da      	lsrs	r2, r3, #3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3208      	adds	r2, #8
 8002f20:	6939      	ldr	r1, [r7, #16]
 8002f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	2203      	movs	r2, #3
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43db      	mvns	r3, r3
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 0203 	and.w	r2, r3, #3
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 80a6 	beq.w	80030b4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f68:	4b5b      	ldr	r3, [pc, #364]	; (80030d8 <HAL_GPIO_Init+0x2e4>)
 8002f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f6c:	4a5a      	ldr	r2, [pc, #360]	; (80030d8 <HAL_GPIO_Init+0x2e4>)
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	6613      	str	r3, [r2, #96]	; 0x60
 8002f74:	4b58      	ldr	r3, [pc, #352]	; (80030d8 <HAL_GPIO_Init+0x2e4>)
 8002f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f80:	4a56      	ldr	r2, [pc, #344]	; (80030dc <HAL_GPIO_Init+0x2e8>)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	089b      	lsrs	r3, r3, #2
 8002f86:	3302      	adds	r3, #2
 8002f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	220f      	movs	r2, #15
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002faa:	d01f      	beq.n	8002fec <HAL_GPIO_Init+0x1f8>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a4c      	ldr	r2, [pc, #304]	; (80030e0 <HAL_GPIO_Init+0x2ec>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d019      	beq.n	8002fe8 <HAL_GPIO_Init+0x1f4>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a4b      	ldr	r2, [pc, #300]	; (80030e4 <HAL_GPIO_Init+0x2f0>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d013      	beq.n	8002fe4 <HAL_GPIO_Init+0x1f0>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a4a      	ldr	r2, [pc, #296]	; (80030e8 <HAL_GPIO_Init+0x2f4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d00d      	beq.n	8002fe0 <HAL_GPIO_Init+0x1ec>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a49      	ldr	r2, [pc, #292]	; (80030ec <HAL_GPIO_Init+0x2f8>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d007      	beq.n	8002fdc <HAL_GPIO_Init+0x1e8>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a48      	ldr	r2, [pc, #288]	; (80030f0 <HAL_GPIO_Init+0x2fc>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d101      	bne.n	8002fd8 <HAL_GPIO_Init+0x1e4>
 8002fd4:	2305      	movs	r3, #5
 8002fd6:	e00a      	b.n	8002fee <HAL_GPIO_Init+0x1fa>
 8002fd8:	2306      	movs	r3, #6
 8002fda:	e008      	b.n	8002fee <HAL_GPIO_Init+0x1fa>
 8002fdc:	2304      	movs	r3, #4
 8002fde:	e006      	b.n	8002fee <HAL_GPIO_Init+0x1fa>
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e004      	b.n	8002fee <HAL_GPIO_Init+0x1fa>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e002      	b.n	8002fee <HAL_GPIO_Init+0x1fa>
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e000      	b.n	8002fee <HAL_GPIO_Init+0x1fa>
 8002fec:	2300      	movs	r3, #0
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	f002 0203 	and.w	r2, r2, #3
 8002ff4:	0092      	lsls	r2, r2, #2
 8002ff6:	4093      	lsls	r3, r2
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ffe:	4937      	ldr	r1, [pc, #220]	; (80030dc <HAL_GPIO_Init+0x2e8>)
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	089b      	lsrs	r3, r3, #2
 8003004:	3302      	adds	r3, #2
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800300c:	4b39      	ldr	r3, [pc, #228]	; (80030f4 <HAL_GPIO_Init+0x300>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	43db      	mvns	r3, r3
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	4013      	ands	r3, r2
 800301a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d003      	beq.n	8003030 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4313      	orrs	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003030:	4a30      	ldr	r2, [pc, #192]	; (80030f4 <HAL_GPIO_Init+0x300>)
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003036:	4b2f      	ldr	r3, [pc, #188]	; (80030f4 <HAL_GPIO_Init+0x300>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	43db      	mvns	r3, r3
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4013      	ands	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4313      	orrs	r3, r2
 8003058:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800305a:	4a26      	ldr	r2, [pc, #152]	; (80030f4 <HAL_GPIO_Init+0x300>)
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003060:	4b24      	ldr	r3, [pc, #144]	; (80030f4 <HAL_GPIO_Init+0x300>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	43db      	mvns	r3, r3
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	4013      	ands	r3, r2
 800306e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	4313      	orrs	r3, r2
 8003082:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003084:	4a1b      	ldr	r2, [pc, #108]	; (80030f4 <HAL_GPIO_Init+0x300>)
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800308a:	4b1a      	ldr	r3, [pc, #104]	; (80030f4 <HAL_GPIO_Init+0x300>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	43db      	mvns	r3, r3
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	4013      	ands	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030ae:	4a11      	ldr	r2, [pc, #68]	; (80030f4 <HAL_GPIO_Init+0x300>)
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	3301      	adds	r3, #1
 80030b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	fa22 f303 	lsr.w	r3, r2, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f47f ae9d 	bne.w	8002e04 <HAL_GPIO_Init+0x10>
  }
}
 80030ca:	bf00      	nop
 80030cc:	bf00      	nop
 80030ce:	371c      	adds	r7, #28
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	40021000 	.word	0x40021000
 80030dc:	40010000 	.word	0x40010000
 80030e0:	48000400 	.word	0x48000400
 80030e4:	48000800 	.word	0x48000800
 80030e8:	48000c00 	.word	0x48000c00
 80030ec:	48001000 	.word	0x48001000
 80030f0:	48001400 	.word	0x48001400
 80030f4:	40010400 	.word	0x40010400

080030f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	807b      	strh	r3, [r7, #2]
 8003104:	4613      	mov	r3, r2
 8003106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003108:	787b      	ldrb	r3, [r7, #1]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800310e:	887a      	ldrh	r2, [r7, #2]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003114:	e002      	b.n	800311c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003116:	887a      	ldrh	r2, [r7, #2]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003132:	4b08      	ldr	r3, [pc, #32]	; (8003154 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003134:	695a      	ldr	r2, [r3, #20]
 8003136:	88fb      	ldrh	r3, [r7, #6]
 8003138:	4013      	ands	r3, r2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d006      	beq.n	800314c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800313e:	4a05      	ldr	r2, [pc, #20]	; (8003154 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003140:	88fb      	ldrh	r3, [r7, #6]
 8003142:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003144:	88fb      	ldrh	r3, [r7, #6]
 8003146:	4618      	mov	r0, r3
 8003148:	f000 f806 	bl	8003158 <HAL_GPIO_EXTI_Callback>
  }
}
 800314c:	bf00      	nop
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40010400 	.word	0x40010400

08003158 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
	...

08003170 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d141      	bne.n	8003202 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800317e:	4b4b      	ldr	r3, [pc, #300]	; (80032ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800318a:	d131      	bne.n	80031f0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800318c:	4b47      	ldr	r3, [pc, #284]	; (80032ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800318e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003192:	4a46      	ldr	r2, [pc, #280]	; (80032ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003198:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800319c:	4b43      	ldr	r3, [pc, #268]	; (80032ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031a4:	4a41      	ldr	r2, [pc, #260]	; (80032ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031ac:	4b40      	ldr	r3, [pc, #256]	; (80032b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2232      	movs	r2, #50	; 0x32
 80031b2:	fb02 f303 	mul.w	r3, r2, r3
 80031b6:	4a3f      	ldr	r2, [pc, #252]	; (80032b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031b8:	fba2 2303 	umull	r2, r3, r2, r3
 80031bc:	0c9b      	lsrs	r3, r3, #18
 80031be:	3301      	adds	r3, #1
 80031c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031c2:	e002      	b.n	80031ca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031ca:	4b38      	ldr	r3, [pc, #224]	; (80032ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d6:	d102      	bne.n	80031de <HAL_PWREx_ControlVoltageScaling+0x6e>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f2      	bne.n	80031c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031de:	4b33      	ldr	r3, [pc, #204]	; (80032ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ea:	d158      	bne.n	800329e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e057      	b.n	80032a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031f0:	4b2e      	ldr	r3, [pc, #184]	; (80032ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031f6:	4a2d      	ldr	r2, [pc, #180]	; (80032ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003200:	e04d      	b.n	800329e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003208:	d141      	bne.n	800328e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800320a:	4b28      	ldr	r3, [pc, #160]	; (80032ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003216:	d131      	bne.n	800327c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003218:	4b24      	ldr	r3, [pc, #144]	; (80032ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800321a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800321e:	4a23      	ldr	r2, [pc, #140]	; (80032ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003224:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003228:	4b20      	ldr	r3, [pc, #128]	; (80032ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003230:	4a1e      	ldr	r2, [pc, #120]	; (80032ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003232:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003236:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003238:	4b1d      	ldr	r3, [pc, #116]	; (80032b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2232      	movs	r2, #50	; 0x32
 800323e:	fb02 f303 	mul.w	r3, r2, r3
 8003242:	4a1c      	ldr	r2, [pc, #112]	; (80032b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003244:	fba2 2303 	umull	r2, r3, r2, r3
 8003248:	0c9b      	lsrs	r3, r3, #18
 800324a:	3301      	adds	r3, #1
 800324c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800324e:	e002      	b.n	8003256 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	3b01      	subs	r3, #1
 8003254:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003256:	4b15      	ldr	r3, [pc, #84]	; (80032ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800325e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003262:	d102      	bne.n	800326a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1f2      	bne.n	8003250 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800326a:	4b10      	ldr	r3, [pc, #64]	; (80032ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003276:	d112      	bne.n	800329e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e011      	b.n	80032a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800327e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003282:	4a0a      	ldr	r2, [pc, #40]	; (80032ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003288:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800328c:	e007      	b.n	800329e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800328e:	4b07      	ldr	r3, [pc, #28]	; (80032ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003296:	4a05      	ldr	r2, [pc, #20]	; (80032ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003298:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800329c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	40007000 	.word	0x40007000
 80032b0:	20000000 	.word	0x20000000
 80032b4:	431bde83 	.word	0x431bde83

080032b8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80032bc:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	4a04      	ldr	r2, [pc, #16]	; (80032d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80032c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032c6:	6093      	str	r3, [r2, #8]
}
 80032c8:	bf00      	nop
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	40007000 	.word	0x40007000

080032d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b088      	sub	sp, #32
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e306      	b.n	80038f8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d075      	beq.n	80033e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032f6:	4b97      	ldr	r3, [pc, #604]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 030c 	and.w	r3, r3, #12
 80032fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003300:	4b94      	ldr	r3, [pc, #592]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f003 0303 	and.w	r3, r3, #3
 8003308:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	2b0c      	cmp	r3, #12
 800330e:	d102      	bne.n	8003316 <HAL_RCC_OscConfig+0x3e>
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	2b03      	cmp	r3, #3
 8003314:	d002      	beq.n	800331c <HAL_RCC_OscConfig+0x44>
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	2b08      	cmp	r3, #8
 800331a:	d10b      	bne.n	8003334 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800331c:	4b8d      	ldr	r3, [pc, #564]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d05b      	beq.n	80033e0 <HAL_RCC_OscConfig+0x108>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d157      	bne.n	80033e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e2e1      	b.n	80038f8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800333c:	d106      	bne.n	800334c <HAL_RCC_OscConfig+0x74>
 800333e:	4b85      	ldr	r3, [pc, #532]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a84      	ldr	r2, [pc, #528]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 8003344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	e01d      	b.n	8003388 <HAL_RCC_OscConfig+0xb0>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003354:	d10c      	bne.n	8003370 <HAL_RCC_OscConfig+0x98>
 8003356:	4b7f      	ldr	r3, [pc, #508]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a7e      	ldr	r2, [pc, #504]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 800335c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	4b7c      	ldr	r3, [pc, #496]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a7b      	ldr	r2, [pc, #492]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 8003368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	e00b      	b.n	8003388 <HAL_RCC_OscConfig+0xb0>
 8003370:	4b78      	ldr	r3, [pc, #480]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a77      	ldr	r2, [pc, #476]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 8003376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800337a:	6013      	str	r3, [r2, #0]
 800337c:	4b75      	ldr	r3, [pc, #468]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a74      	ldr	r2, [pc, #464]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 8003382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003386:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d013      	beq.n	80033b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003390:	f7fe fa7a 	bl	8001888 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003398:	f7fe fa76 	bl	8001888 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b64      	cmp	r3, #100	; 0x64
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e2a6      	b.n	80038f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033aa:	4b6a      	ldr	r3, [pc, #424]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0f0      	beq.n	8003398 <HAL_RCC_OscConfig+0xc0>
 80033b6:	e014      	b.n	80033e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b8:	f7fe fa66 	bl	8001888 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033c0:	f7fe fa62 	bl	8001888 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b64      	cmp	r3, #100	; 0x64
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e292      	b.n	80038f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033d2:	4b60      	ldr	r3, [pc, #384]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1f0      	bne.n	80033c0 <HAL_RCC_OscConfig+0xe8>
 80033de:	e000      	b.n	80033e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d075      	beq.n	80034da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033ee:	4b59      	ldr	r3, [pc, #356]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 030c 	and.w	r3, r3, #12
 80033f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033f8:	4b56      	ldr	r3, [pc, #344]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f003 0303 	and.w	r3, r3, #3
 8003400:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	2b0c      	cmp	r3, #12
 8003406:	d102      	bne.n	800340e <HAL_RCC_OscConfig+0x136>
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	2b02      	cmp	r3, #2
 800340c:	d002      	beq.n	8003414 <HAL_RCC_OscConfig+0x13c>
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	2b04      	cmp	r3, #4
 8003412:	d11f      	bne.n	8003454 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003414:	4b4f      	ldr	r3, [pc, #316]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <HAL_RCC_OscConfig+0x154>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e265      	b.n	80038f8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800342c:	4b49      	ldr	r3, [pc, #292]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	061b      	lsls	r3, r3, #24
 800343a:	4946      	ldr	r1, [pc, #280]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 800343c:	4313      	orrs	r3, r2
 800343e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003440:	4b45      	ldr	r3, [pc, #276]	; (8003558 <HAL_RCC_OscConfig+0x280>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f7fd fbeb 	bl	8000c20 <HAL_InitTick>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d043      	beq.n	80034d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e251      	b.n	80038f8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d023      	beq.n	80034a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800345c:	4b3d      	ldr	r3, [pc, #244]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a3c      	ldr	r2, [pc, #240]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 8003462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003468:	f7fe fa0e 	bl	8001888 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003470:	f7fe fa0a 	bl	8001888 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e23a      	b.n	80038f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003482:	4b34      	ldr	r3, [pc, #208]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0f0      	beq.n	8003470 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800348e:	4b31      	ldr	r3, [pc, #196]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	061b      	lsls	r3, r3, #24
 800349c:	492d      	ldr	r1, [pc, #180]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	604b      	str	r3, [r1, #4]
 80034a2:	e01a      	b.n	80034da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034a4:	4b2b      	ldr	r3, [pc, #172]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a2a      	ldr	r2, [pc, #168]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 80034aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b0:	f7fe f9ea 	bl	8001888 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b8:	f7fe f9e6 	bl	8001888 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e216      	b.n	80038f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034ca:	4b22      	ldr	r3, [pc, #136]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f0      	bne.n	80034b8 <HAL_RCC_OscConfig+0x1e0>
 80034d6:	e000      	b.n	80034da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d041      	beq.n	800356a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d01c      	beq.n	8003528 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ee:	4b19      	ldr	r3, [pc, #100]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 80034f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034f4:	4a17      	ldr	r2, [pc, #92]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fe:	f7fe f9c3 	bl	8001888 <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003504:	e008      	b.n	8003518 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003506:	f7fe f9bf 	bl	8001888 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e1ef      	b.n	80038f8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003518:	4b0e      	ldr	r3, [pc, #56]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 800351a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0ef      	beq.n	8003506 <HAL_RCC_OscConfig+0x22e>
 8003526:	e020      	b.n	800356a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003528:	4b0a      	ldr	r3, [pc, #40]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 800352a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800352e:	4a09      	ldr	r2, [pc, #36]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 8003530:	f023 0301 	bic.w	r3, r3, #1
 8003534:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003538:	f7fe f9a6 	bl	8001888 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800353e:	e00d      	b.n	800355c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003540:	f7fe f9a2 	bl	8001888 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d906      	bls.n	800355c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e1d2      	b.n	80038f8 <HAL_RCC_OscConfig+0x620>
 8003552:	bf00      	nop
 8003554:	40021000 	.word	0x40021000
 8003558:	200000c0 	.word	0x200000c0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800355c:	4b8c      	ldr	r3, [pc, #560]	; (8003790 <HAL_RCC_OscConfig+0x4b8>)
 800355e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1ea      	bne.n	8003540 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0304 	and.w	r3, r3, #4
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 80a6 	beq.w	80036c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003578:	2300      	movs	r3, #0
 800357a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800357c:	4b84      	ldr	r3, [pc, #528]	; (8003790 <HAL_RCC_OscConfig+0x4b8>)
 800357e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_RCC_OscConfig+0x2b4>
 8003588:	2301      	movs	r3, #1
 800358a:	e000      	b.n	800358e <HAL_RCC_OscConfig+0x2b6>
 800358c:	2300      	movs	r3, #0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00d      	beq.n	80035ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003592:	4b7f      	ldr	r3, [pc, #508]	; (8003790 <HAL_RCC_OscConfig+0x4b8>)
 8003594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003596:	4a7e      	ldr	r2, [pc, #504]	; (8003790 <HAL_RCC_OscConfig+0x4b8>)
 8003598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800359c:	6593      	str	r3, [r2, #88]	; 0x58
 800359e:	4b7c      	ldr	r3, [pc, #496]	; (8003790 <HAL_RCC_OscConfig+0x4b8>)
 80035a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80035aa:	2301      	movs	r3, #1
 80035ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ae:	4b79      	ldr	r3, [pc, #484]	; (8003794 <HAL_RCC_OscConfig+0x4bc>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d118      	bne.n	80035ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035ba:	4b76      	ldr	r3, [pc, #472]	; (8003794 <HAL_RCC_OscConfig+0x4bc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a75      	ldr	r2, [pc, #468]	; (8003794 <HAL_RCC_OscConfig+0x4bc>)
 80035c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035c6:	f7fe f95f 	bl	8001888 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ce:	f7fe f95b 	bl	8001888 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e18b      	b.n	80038f8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035e0:	4b6c      	ldr	r3, [pc, #432]	; (8003794 <HAL_RCC_OscConfig+0x4bc>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0f0      	beq.n	80035ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d108      	bne.n	8003606 <HAL_RCC_OscConfig+0x32e>
 80035f4:	4b66      	ldr	r3, [pc, #408]	; (8003790 <HAL_RCC_OscConfig+0x4b8>)
 80035f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fa:	4a65      	ldr	r2, [pc, #404]	; (8003790 <HAL_RCC_OscConfig+0x4b8>)
 80035fc:	f043 0301 	orr.w	r3, r3, #1
 8003600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003604:	e024      	b.n	8003650 <HAL_RCC_OscConfig+0x378>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	2b05      	cmp	r3, #5
 800360c:	d110      	bne.n	8003630 <HAL_RCC_OscConfig+0x358>
 800360e:	4b60      	ldr	r3, [pc, #384]	; (8003790 <HAL_RCC_OscConfig+0x4b8>)
 8003610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003614:	4a5e      	ldr	r2, [pc, #376]	; (8003790 <HAL_RCC_OscConfig+0x4b8>)
 8003616:	f043 0304 	orr.w	r3, r3, #4
 800361a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800361e:	4b5c      	ldr	r3, [pc, #368]	; (8003790 <HAL_RCC_OscConfig+0x4b8>)
 8003620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003624:	4a5a      	ldr	r2, [pc, #360]	; (8003790 <HAL_RCC_OscConfig+0x4b8>)
 8003626:	f043 0301 	orr.w	r3, r3, #1
 800362a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800362e:	e00f      	b.n	8003650 <HAL_RCC_OscConfig+0x378>
 8003630:	4b57      	ldr	r3, [pc, #348]	; (8003790 <HAL_RCC_OscConfig+0x4b8>)
 8003632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003636:	4a56      	ldr	r2, [pc, #344]	; (8003790 <HAL_RCC_OscConfig+0x4b8>)
 8003638:	f023 0301 	bic.w	r3, r3, #1
 800363c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003640:	4b53      	ldr	r3, [pc, #332]	; (8003790 <HAL_RCC_OscConfig+0x4b8>)
 8003642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003646:	4a52      	ldr	r2, [pc, #328]	; (8003790 <HAL_RCC_OscConfig+0x4b8>)
 8003648:	f023 0304 	bic.w	r3, r3, #4
 800364c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d016      	beq.n	8003686 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003658:	f7fe f916 	bl	8001888 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800365e:	e00a      	b.n	8003676 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003660:	f7fe f912 	bl	8001888 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	f241 3288 	movw	r2, #5000	; 0x1388
 800366e:	4293      	cmp	r3, r2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e140      	b.n	80038f8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003676:	4b46      	ldr	r3, [pc, #280]	; (8003790 <HAL_RCC_OscConfig+0x4b8>)
 8003678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0ed      	beq.n	8003660 <HAL_RCC_OscConfig+0x388>
 8003684:	e015      	b.n	80036b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003686:	f7fe f8ff 	bl	8001888 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800368c:	e00a      	b.n	80036a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800368e:	f7fe f8fb 	bl	8001888 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	f241 3288 	movw	r2, #5000	; 0x1388
 800369c:	4293      	cmp	r3, r2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e129      	b.n	80038f8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036a4:	4b3a      	ldr	r3, [pc, #232]	; (8003790 <HAL_RCC_OscConfig+0x4b8>)
 80036a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1ed      	bne.n	800368e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036b2:	7ffb      	ldrb	r3, [r7, #31]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d105      	bne.n	80036c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036b8:	4b35      	ldr	r3, [pc, #212]	; (8003790 <HAL_RCC_OscConfig+0x4b8>)
 80036ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036bc:	4a34      	ldr	r2, [pc, #208]	; (8003790 <HAL_RCC_OscConfig+0x4b8>)
 80036be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036c2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0320 	and.w	r3, r3, #32
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d03c      	beq.n	800374a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d01c      	beq.n	8003712 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036d8:	4b2d      	ldr	r3, [pc, #180]	; (8003790 <HAL_RCC_OscConfig+0x4b8>)
 80036da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036de:	4a2c      	ldr	r2, [pc, #176]	; (8003790 <HAL_RCC_OscConfig+0x4b8>)
 80036e0:	f043 0301 	orr.w	r3, r3, #1
 80036e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e8:	f7fe f8ce 	bl	8001888 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036f0:	f7fe f8ca 	bl	8001888 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e0fa      	b.n	80038f8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003702:	4b23      	ldr	r3, [pc, #140]	; (8003790 <HAL_RCC_OscConfig+0x4b8>)
 8003704:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0ef      	beq.n	80036f0 <HAL_RCC_OscConfig+0x418>
 8003710:	e01b      	b.n	800374a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003712:	4b1f      	ldr	r3, [pc, #124]	; (8003790 <HAL_RCC_OscConfig+0x4b8>)
 8003714:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003718:	4a1d      	ldr	r2, [pc, #116]	; (8003790 <HAL_RCC_OscConfig+0x4b8>)
 800371a:	f023 0301 	bic.w	r3, r3, #1
 800371e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003722:	f7fe f8b1 	bl	8001888 <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800372a:	f7fe f8ad 	bl	8001888 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e0dd      	b.n	80038f8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800373c:	4b14      	ldr	r3, [pc, #80]	; (8003790 <HAL_RCC_OscConfig+0x4b8>)
 800373e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1ef      	bne.n	800372a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 80d1 	beq.w	80038f6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003754:	4b0e      	ldr	r3, [pc, #56]	; (8003790 <HAL_RCC_OscConfig+0x4b8>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 030c 	and.w	r3, r3, #12
 800375c:	2b0c      	cmp	r3, #12
 800375e:	f000 808b 	beq.w	8003878 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	2b02      	cmp	r3, #2
 8003768:	d15e      	bne.n	8003828 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800376a:	4b09      	ldr	r3, [pc, #36]	; (8003790 <HAL_RCC_OscConfig+0x4b8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a08      	ldr	r2, [pc, #32]	; (8003790 <HAL_RCC_OscConfig+0x4b8>)
 8003770:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003776:	f7fe f887 	bl	8001888 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800377c:	e00c      	b.n	8003798 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800377e:	f7fe f883 	bl	8001888 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d905      	bls.n	8003798 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e0b3      	b.n	80038f8 <HAL_RCC_OscConfig+0x620>
 8003790:	40021000 	.word	0x40021000
 8003794:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003798:	4b59      	ldr	r3, [pc, #356]	; (8003900 <HAL_RCC_OscConfig+0x628>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1ec      	bne.n	800377e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037a4:	4b56      	ldr	r3, [pc, #344]	; (8003900 <HAL_RCC_OscConfig+0x628>)
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	4b56      	ldr	r3, [pc, #344]	; (8003904 <HAL_RCC_OscConfig+0x62c>)
 80037aa:	4013      	ands	r3, r2
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6a11      	ldr	r1, [r2, #32]
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037b4:	3a01      	subs	r2, #1
 80037b6:	0112      	lsls	r2, r2, #4
 80037b8:	4311      	orrs	r1, r2
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80037be:	0212      	lsls	r2, r2, #8
 80037c0:	4311      	orrs	r1, r2
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80037c6:	0852      	lsrs	r2, r2, #1
 80037c8:	3a01      	subs	r2, #1
 80037ca:	0552      	lsls	r2, r2, #21
 80037cc:	4311      	orrs	r1, r2
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037d2:	0852      	lsrs	r2, r2, #1
 80037d4:	3a01      	subs	r2, #1
 80037d6:	0652      	lsls	r2, r2, #25
 80037d8:	4311      	orrs	r1, r2
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80037de:	06d2      	lsls	r2, r2, #27
 80037e0:	430a      	orrs	r2, r1
 80037e2:	4947      	ldr	r1, [pc, #284]	; (8003900 <HAL_RCC_OscConfig+0x628>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037e8:	4b45      	ldr	r3, [pc, #276]	; (8003900 <HAL_RCC_OscConfig+0x628>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a44      	ldr	r2, [pc, #272]	; (8003900 <HAL_RCC_OscConfig+0x628>)
 80037ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037f4:	4b42      	ldr	r3, [pc, #264]	; (8003900 <HAL_RCC_OscConfig+0x628>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	4a41      	ldr	r2, [pc, #260]	; (8003900 <HAL_RCC_OscConfig+0x628>)
 80037fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003800:	f7fe f842 	bl	8001888 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003808:	f7fe f83e 	bl	8001888 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e06e      	b.n	80038f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800381a:	4b39      	ldr	r3, [pc, #228]	; (8003900 <HAL_RCC_OscConfig+0x628>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0f0      	beq.n	8003808 <HAL_RCC_OscConfig+0x530>
 8003826:	e066      	b.n	80038f6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003828:	4b35      	ldr	r3, [pc, #212]	; (8003900 <HAL_RCC_OscConfig+0x628>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a34      	ldr	r2, [pc, #208]	; (8003900 <HAL_RCC_OscConfig+0x628>)
 800382e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003832:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003834:	4b32      	ldr	r3, [pc, #200]	; (8003900 <HAL_RCC_OscConfig+0x628>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	4a31      	ldr	r2, [pc, #196]	; (8003900 <HAL_RCC_OscConfig+0x628>)
 800383a:	f023 0303 	bic.w	r3, r3, #3
 800383e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003840:	4b2f      	ldr	r3, [pc, #188]	; (8003900 <HAL_RCC_OscConfig+0x628>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	4a2e      	ldr	r2, [pc, #184]	; (8003900 <HAL_RCC_OscConfig+0x628>)
 8003846:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800384a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800384e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003850:	f7fe f81a 	bl	8001888 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003858:	f7fe f816 	bl	8001888 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e046      	b.n	80038f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800386a:	4b25      	ldr	r3, [pc, #148]	; (8003900 <HAL_RCC_OscConfig+0x628>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f0      	bne.n	8003858 <HAL_RCC_OscConfig+0x580>
 8003876:	e03e      	b.n	80038f6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d101      	bne.n	8003884 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e039      	b.n	80038f8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003884:	4b1e      	ldr	r3, [pc, #120]	; (8003900 <HAL_RCC_OscConfig+0x628>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f003 0203 	and.w	r2, r3, #3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	429a      	cmp	r2, r3
 8003896:	d12c      	bne.n	80038f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	3b01      	subs	r3, #1
 80038a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d123      	bne.n	80038f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d11b      	bne.n	80038f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d113      	bne.n	80038f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	085b      	lsrs	r3, r3, #1
 80038d6:	3b01      	subs	r3, #1
 80038d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038da:	429a      	cmp	r2, r3
 80038dc:	d109      	bne.n	80038f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e8:	085b      	lsrs	r3, r3, #1
 80038ea:	3b01      	subs	r3, #1
 80038ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d001      	beq.n	80038f6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e000      	b.n	80038f8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3720      	adds	r7, #32
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40021000 	.word	0x40021000
 8003904:	019f800c 	.word	0x019f800c

08003908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003912:	2300      	movs	r3, #0
 8003914:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e11e      	b.n	8003b5e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003920:	4b91      	ldr	r3, [pc, #580]	; (8003b68 <HAL_RCC_ClockConfig+0x260>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 030f 	and.w	r3, r3, #15
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d910      	bls.n	8003950 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392e:	4b8e      	ldr	r3, [pc, #568]	; (8003b68 <HAL_RCC_ClockConfig+0x260>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f023 020f 	bic.w	r2, r3, #15
 8003936:	498c      	ldr	r1, [pc, #560]	; (8003b68 <HAL_RCC_ClockConfig+0x260>)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	4313      	orrs	r3, r2
 800393c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800393e:	4b8a      	ldr	r3, [pc, #552]	; (8003b68 <HAL_RCC_ClockConfig+0x260>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d001      	beq.n	8003950 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e106      	b.n	8003b5e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b00      	cmp	r3, #0
 800395a:	d073      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2b03      	cmp	r3, #3
 8003962:	d129      	bne.n	80039b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003964:	4b81      	ldr	r3, [pc, #516]	; (8003b6c <HAL_RCC_ClockConfig+0x264>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e0f4      	b.n	8003b5e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003974:	f000 f9d0 	bl	8003d18 <RCC_GetSysClockFreqFromPLLSource>
 8003978:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	4a7c      	ldr	r2, [pc, #496]	; (8003b70 <HAL_RCC_ClockConfig+0x268>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d93f      	bls.n	8003a02 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003982:	4b7a      	ldr	r3, [pc, #488]	; (8003b6c <HAL_RCC_ClockConfig+0x264>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d009      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003996:	2b00      	cmp	r3, #0
 8003998:	d033      	beq.n	8003a02 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d12f      	bne.n	8003a02 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039a2:	4b72      	ldr	r3, [pc, #456]	; (8003b6c <HAL_RCC_ClockConfig+0x264>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039aa:	4a70      	ldr	r2, [pc, #448]	; (8003b6c <HAL_RCC_ClockConfig+0x264>)
 80039ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80039b2:	2380      	movs	r3, #128	; 0x80
 80039b4:	617b      	str	r3, [r7, #20]
 80039b6:	e024      	b.n	8003a02 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d107      	bne.n	80039d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039c0:	4b6a      	ldr	r3, [pc, #424]	; (8003b6c <HAL_RCC_ClockConfig+0x264>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d109      	bne.n	80039e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e0c6      	b.n	8003b5e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039d0:	4b66      	ldr	r3, [pc, #408]	; (8003b6c <HAL_RCC_ClockConfig+0x264>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e0be      	b.n	8003b5e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80039e0:	f000 f8ce 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 80039e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	4a61      	ldr	r2, [pc, #388]	; (8003b70 <HAL_RCC_ClockConfig+0x268>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d909      	bls.n	8003a02 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039ee:	4b5f      	ldr	r3, [pc, #380]	; (8003b6c <HAL_RCC_ClockConfig+0x264>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039f6:	4a5d      	ldr	r2, [pc, #372]	; (8003b6c <HAL_RCC_ClockConfig+0x264>)
 80039f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80039fe:	2380      	movs	r3, #128	; 0x80
 8003a00:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a02:	4b5a      	ldr	r3, [pc, #360]	; (8003b6c <HAL_RCC_ClockConfig+0x264>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f023 0203 	bic.w	r2, r3, #3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	4957      	ldr	r1, [pc, #348]	; (8003b6c <HAL_RCC_ClockConfig+0x264>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a14:	f7fd ff38 	bl	8001888 <HAL_GetTick>
 8003a18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1a:	e00a      	b.n	8003a32 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a1c:	f7fd ff34 	bl	8001888 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e095      	b.n	8003b5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a32:	4b4e      	ldr	r3, [pc, #312]	; (8003b6c <HAL_RCC_ClockConfig+0x264>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 020c 	and.w	r2, r3, #12
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d1eb      	bne.n	8003a1c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d023      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d005      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a5c:	4b43      	ldr	r3, [pc, #268]	; (8003b6c <HAL_RCC_ClockConfig+0x264>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	4a42      	ldr	r2, [pc, #264]	; (8003b6c <HAL_RCC_ClockConfig+0x264>)
 8003a62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a66:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d007      	beq.n	8003a84 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003a74:	4b3d      	ldr	r3, [pc, #244]	; (8003b6c <HAL_RCC_ClockConfig+0x264>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003a7c:	4a3b      	ldr	r2, [pc, #236]	; (8003b6c <HAL_RCC_ClockConfig+0x264>)
 8003a7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a84:	4b39      	ldr	r3, [pc, #228]	; (8003b6c <HAL_RCC_ClockConfig+0x264>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	4936      	ldr	r1, [pc, #216]	; (8003b6c <HAL_RCC_ClockConfig+0x264>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	608b      	str	r3, [r1, #8]
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	2b80      	cmp	r3, #128	; 0x80
 8003a9c:	d105      	bne.n	8003aaa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a9e:	4b33      	ldr	r3, [pc, #204]	; (8003b6c <HAL_RCC_ClockConfig+0x264>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	4a32      	ldr	r2, [pc, #200]	; (8003b6c <HAL_RCC_ClockConfig+0x264>)
 8003aa4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aa8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003aaa:	4b2f      	ldr	r3, [pc, #188]	; (8003b68 <HAL_RCC_ClockConfig+0x260>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d21d      	bcs.n	8003af4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ab8:	4b2b      	ldr	r3, [pc, #172]	; (8003b68 <HAL_RCC_ClockConfig+0x260>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f023 020f 	bic.w	r2, r3, #15
 8003ac0:	4929      	ldr	r1, [pc, #164]	; (8003b68 <HAL_RCC_ClockConfig+0x260>)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ac8:	f7fd fede 	bl	8001888 <HAL_GetTick>
 8003acc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ace:	e00a      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad0:	f7fd feda 	bl	8001888 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e03b      	b.n	8003b5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae6:	4b20      	ldr	r3, [pc, #128]	; (8003b68 <HAL_RCC_ClockConfig+0x260>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d1ed      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d008      	beq.n	8003b12 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b00:	4b1a      	ldr	r3, [pc, #104]	; (8003b6c <HAL_RCC_ClockConfig+0x264>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	4917      	ldr	r1, [pc, #92]	; (8003b6c <HAL_RCC_ClockConfig+0x264>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d009      	beq.n	8003b32 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b1e:	4b13      	ldr	r3, [pc, #76]	; (8003b6c <HAL_RCC_ClockConfig+0x264>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	490f      	ldr	r1, [pc, #60]	; (8003b6c <HAL_RCC_ClockConfig+0x264>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b32:	f000 f825 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 8003b36:	4602      	mov	r2, r0
 8003b38:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <HAL_RCC_ClockConfig+0x264>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	091b      	lsrs	r3, r3, #4
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	490c      	ldr	r1, [pc, #48]	; (8003b74 <HAL_RCC_ClockConfig+0x26c>)
 8003b44:	5ccb      	ldrb	r3, [r1, r3]
 8003b46:	f003 031f 	and.w	r3, r3, #31
 8003b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b4e:	4a0a      	ldr	r2, [pc, #40]	; (8003b78 <HAL_RCC_ClockConfig+0x270>)
 8003b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003b52:	4b0a      	ldr	r3, [pc, #40]	; (8003b7c <HAL_RCC_ClockConfig+0x274>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fd f862 	bl	8000c20 <HAL_InitTick>
 8003b5c:	4603      	mov	r3, r0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3718      	adds	r7, #24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40022000 	.word	0x40022000
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	04c4b400 	.word	0x04c4b400
 8003b74:	08009060 	.word	0x08009060
 8003b78:	20000000 	.word	0x20000000
 8003b7c:	200000c0 	.word	0x200000c0

08003b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b86:	4b2c      	ldr	r3, [pc, #176]	; (8003c38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 030c 	and.w	r3, r3, #12
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d102      	bne.n	8003b98 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b92:	4b2a      	ldr	r3, [pc, #168]	; (8003c3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b94:	613b      	str	r3, [r7, #16]
 8003b96:	e047      	b.n	8003c28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b98:	4b27      	ldr	r3, [pc, #156]	; (8003c38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f003 030c 	and.w	r3, r3, #12
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d102      	bne.n	8003baa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ba4:	4b26      	ldr	r3, [pc, #152]	; (8003c40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ba6:	613b      	str	r3, [r7, #16]
 8003ba8:	e03e      	b.n	8003c28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003baa:	4b23      	ldr	r3, [pc, #140]	; (8003c38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 030c 	and.w	r3, r3, #12
 8003bb2:	2b0c      	cmp	r3, #12
 8003bb4:	d136      	bne.n	8003c24 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bb6:	4b20      	ldr	r3, [pc, #128]	; (8003c38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bc0:	4b1d      	ldr	r3, [pc, #116]	; (8003c38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	091b      	lsrs	r3, r3, #4
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	3301      	adds	r3, #1
 8003bcc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2b03      	cmp	r3, #3
 8003bd2:	d10c      	bne.n	8003bee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bd4:	4a1a      	ldr	r2, [pc, #104]	; (8003c40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bdc:	4a16      	ldr	r2, [pc, #88]	; (8003c38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bde:	68d2      	ldr	r2, [r2, #12]
 8003be0:	0a12      	lsrs	r2, r2, #8
 8003be2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003be6:	fb02 f303 	mul.w	r3, r2, r3
 8003bea:	617b      	str	r3, [r7, #20]
      break;
 8003bec:	e00c      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bee:	4a13      	ldr	r2, [pc, #76]	; (8003c3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf6:	4a10      	ldr	r2, [pc, #64]	; (8003c38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bf8:	68d2      	ldr	r2, [r2, #12]
 8003bfa:	0a12      	lsrs	r2, r2, #8
 8003bfc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c00:	fb02 f303 	mul.w	r3, r2, r3
 8003c04:	617b      	str	r3, [r7, #20]
      break;
 8003c06:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c08:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	0e5b      	lsrs	r3, r3, #25
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	3301      	adds	r3, #1
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c20:	613b      	str	r3, [r7, #16]
 8003c22:	e001      	b.n	8003c28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c28:	693b      	ldr	r3, [r7, #16]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	371c      	adds	r7, #28
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	00f42400 	.word	0x00f42400
 8003c40:	016e3600 	.word	0x016e3600

08003c44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c48:	4b03      	ldr	r3, [pc, #12]	; (8003c58 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	20000000 	.word	0x20000000

08003c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c60:	f7ff fff0 	bl	8003c44 <HAL_RCC_GetHCLKFreq>
 8003c64:	4602      	mov	r2, r0
 8003c66:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	0a1b      	lsrs	r3, r3, #8
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	4904      	ldr	r1, [pc, #16]	; (8003c84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c72:	5ccb      	ldrb	r3, [r1, r3]
 8003c74:	f003 031f 	and.w	r3, r3, #31
 8003c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40021000 	.word	0x40021000
 8003c84:	08009070 	.word	0x08009070

08003c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c8c:	f7ff ffda 	bl	8003c44 <HAL_RCC_GetHCLKFreq>
 8003c90:	4602      	mov	r2, r0
 8003c92:	4b06      	ldr	r3, [pc, #24]	; (8003cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	0adb      	lsrs	r3, r3, #11
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	4904      	ldr	r1, [pc, #16]	; (8003cb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ca0:	f003 031f 	and.w	r3, r3, #31
 8003ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	08009070 	.word	0x08009070

08003cb4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	220f      	movs	r2, #15
 8003cc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003cc4:	4b12      	ldr	r3, [pc, #72]	; (8003d10 <HAL_RCC_GetClockConfig+0x5c>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 0203 	and.w	r2, r3, #3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003cd0:	4b0f      	ldr	r3, [pc, #60]	; (8003d10 <HAL_RCC_GetClockConfig+0x5c>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003cdc:	4b0c      	ldr	r3, [pc, #48]	; (8003d10 <HAL_RCC_GetClockConfig+0x5c>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003ce8:	4b09      	ldr	r3, [pc, #36]	; (8003d10 <HAL_RCC_GetClockConfig+0x5c>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	08db      	lsrs	r3, r3, #3
 8003cee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003cf6:	4b07      	ldr	r3, [pc, #28]	; (8003d14 <HAL_RCC_GetClockConfig+0x60>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 020f 	and.w	r2, r3, #15
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	601a      	str	r2, [r3, #0]
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	40021000 	.word	0x40021000
 8003d14:	40022000 	.word	0x40022000

08003d18 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d1e:	4b1e      	ldr	r3, [pc, #120]	; (8003d98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f003 0303 	and.w	r3, r3, #3
 8003d26:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d28:	4b1b      	ldr	r3, [pc, #108]	; (8003d98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	091b      	lsrs	r3, r3, #4
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	3301      	adds	r3, #1
 8003d34:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	2b03      	cmp	r3, #3
 8003d3a:	d10c      	bne.n	8003d56 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d3c:	4a17      	ldr	r2, [pc, #92]	; (8003d9c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d44:	4a14      	ldr	r2, [pc, #80]	; (8003d98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d46:	68d2      	ldr	r2, [r2, #12]
 8003d48:	0a12      	lsrs	r2, r2, #8
 8003d4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d4e:	fb02 f303 	mul.w	r3, r2, r3
 8003d52:	617b      	str	r3, [r7, #20]
    break;
 8003d54:	e00c      	b.n	8003d70 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d56:	4a12      	ldr	r2, [pc, #72]	; (8003da0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5e:	4a0e      	ldr	r2, [pc, #56]	; (8003d98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d60:	68d2      	ldr	r2, [r2, #12]
 8003d62:	0a12      	lsrs	r2, r2, #8
 8003d64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d68:	fb02 f303 	mul.w	r3, r2, r3
 8003d6c:	617b      	str	r3, [r7, #20]
    break;
 8003d6e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d70:	4b09      	ldr	r3, [pc, #36]	; (8003d98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	0e5b      	lsrs	r3, r3, #25
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d88:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003d8a:	687b      	ldr	r3, [r7, #4]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	371c      	adds	r7, #28
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	40021000 	.word	0x40021000
 8003d9c:	016e3600 	.word	0x016e3600
 8003da0:	00f42400 	.word	0x00f42400

08003da4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003dac:	2300      	movs	r3, #0
 8003dae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003db0:	2300      	movs	r3, #0
 8003db2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 8098 	beq.w	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dc6:	4b43      	ldr	r3, [pc, #268]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10d      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dd2:	4b40      	ldr	r3, [pc, #256]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd6:	4a3f      	ldr	r2, [pc, #252]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ddc:	6593      	str	r3, [r2, #88]	; 0x58
 8003dde:	4b3d      	ldr	r3, [pc, #244]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de6:	60bb      	str	r3, [r7, #8]
 8003de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dea:	2301      	movs	r3, #1
 8003dec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dee:	4b3a      	ldr	r3, [pc, #232]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a39      	ldr	r2, [pc, #228]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dfa:	f7fd fd45 	bl	8001888 <HAL_GetTick>
 8003dfe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e00:	e009      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e02:	f7fd fd41 	bl	8001888 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d902      	bls.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	74fb      	strb	r3, [r7, #19]
        break;
 8003e14:	e005      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e16:	4b30      	ldr	r3, [pc, #192]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0ef      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003e22:	7cfb      	ldrb	r3, [r7, #19]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d159      	bne.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e28:	4b2a      	ldr	r3, [pc, #168]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e32:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d01e      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d019      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e44:	4b23      	ldr	r3, [pc, #140]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e50:	4b20      	ldr	r3, [pc, #128]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e56:	4a1f      	ldr	r2, [pc, #124]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e60:	4b1c      	ldr	r3, [pc, #112]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e66:	4a1b      	ldr	r2, [pc, #108]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e70:	4a18      	ldr	r2, [pc, #96]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d016      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e82:	f7fd fd01 	bl	8001888 <HAL_GetTick>
 8003e86:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e88:	e00b      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8a:	f7fd fcfd 	bl	8001888 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d902      	bls.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	74fb      	strb	r3, [r7, #19]
            break;
 8003ea0:	e006      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ea2:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0ec      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003eb0:	7cfb      	ldrb	r3, [r7, #19]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10b      	bne.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eb6:	4b07      	ldr	r3, [pc, #28]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ebc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec4:	4903      	ldr	r1, [pc, #12]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ece:	7cfb      	ldrb	r3, [r7, #19]
 8003ed0:	74bb      	strb	r3, [r7, #18]
 8003ed2:	e005      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003edc:	7cfb      	ldrb	r3, [r7, #19]
 8003ede:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ee0:	7c7b      	ldrb	r3, [r7, #17]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d105      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ee6:	4ba7      	ldr	r3, [pc, #668]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eea:	4aa6      	ldr	r2, [pc, #664]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ef0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003efe:	4ba1      	ldr	r3, [pc, #644]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f04:	f023 0203 	bic.w	r2, r3, #3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	499d      	ldr	r1, [pc, #628]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00a      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f20:	4b98      	ldr	r3, [pc, #608]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f26:	f023 020c 	bic.w	r2, r3, #12
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	4995      	ldr	r1, [pc, #596]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0304 	and.w	r3, r3, #4
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f42:	4b90      	ldr	r3, [pc, #576]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	498c      	ldr	r1, [pc, #560]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0308 	and.w	r3, r3, #8
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00a      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f64:	4b87      	ldr	r3, [pc, #540]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	4984      	ldr	r1, [pc, #528]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0310 	and.w	r3, r3, #16
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f86:	4b7f      	ldr	r3, [pc, #508]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	497b      	ldr	r1, [pc, #492]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0320 	and.w	r3, r3, #32
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00a      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fa8:	4b76      	ldr	r3, [pc, #472]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	4973      	ldr	r1, [pc, #460]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fca:	4b6e      	ldr	r3, [pc, #440]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	69db      	ldr	r3, [r3, #28]
 8003fd8:	496a      	ldr	r1, [pc, #424]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fec:	4b65      	ldr	r3, [pc, #404]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	4962      	ldr	r1, [pc, #392]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800400e:	4b5d      	ldr	r3, [pc, #372]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004014:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401c:	4959      	ldr	r1, [pc, #356]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800401e:	4313      	orrs	r3, r2
 8004020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00a      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004030:	4b54      	ldr	r3, [pc, #336]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004032:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004036:	f023 0203 	bic.w	r2, r3, #3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403e:	4951      	ldr	r1, [pc, #324]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004052:	4b4c      	ldr	r3, [pc, #304]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004058:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004060:	4948      	ldr	r1, [pc, #288]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004062:	4313      	orrs	r3, r2
 8004064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004070:	2b00      	cmp	r3, #0
 8004072:	d015      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004074:	4b43      	ldr	r3, [pc, #268]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	4940      	ldr	r1, [pc, #256]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004092:	d105      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004094:	4b3b      	ldr	r3, [pc, #236]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	4a3a      	ldr	r2, [pc, #232]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800409a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800409e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d015      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040ac:	4b35      	ldr	r3, [pc, #212]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ba:	4932      	ldr	r1, [pc, #200]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040ca:	d105      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040cc:	4b2d      	ldr	r3, [pc, #180]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	4a2c      	ldr	r2, [pc, #176]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040d6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d015      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80040e4:	4b27      	ldr	r3, [pc, #156]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f2:	4924      	ldr	r1, [pc, #144]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004102:	d105      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004104:	4b1f      	ldr	r3, [pc, #124]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	4a1e      	ldr	r2, [pc, #120]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800410e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d015      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800411c:	4b19      	ldr	r3, [pc, #100]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800411e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004122:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412a:	4916      	ldr	r1, [pc, #88]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004136:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800413a:	d105      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800413c:	4b11      	ldr	r3, [pc, #68]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	4a10      	ldr	r2, [pc, #64]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004142:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004146:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d019      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004154:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	4908      	ldr	r1, [pc, #32]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004172:	d109      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004174:	4b03      	ldr	r3, [pc, #12]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	4a02      	ldr	r2, [pc, #8]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800417e:	60d3      	str	r3, [r2, #12]
 8004180:	e002      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004182:	bf00      	nop
 8004184:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d015      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004194:	4b29      	ldr	r3, [pc, #164]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a2:	4926      	ldr	r1, [pc, #152]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041b2:	d105      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80041b4:	4b21      	ldr	r3, [pc, #132]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	4a20      	ldr	r2, [pc, #128]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041be:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d015      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80041cc:	4b1b      	ldr	r3, [pc, #108]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041da:	4918      	ldr	r1, [pc, #96]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ea:	d105      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80041ec:	4b13      	ldr	r3, [pc, #76]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	4a12      	ldr	r2, [pc, #72]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d015      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004204:	4b0d      	ldr	r3, [pc, #52]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004206:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800420a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004212:	490a      	ldr	r1, [pc, #40]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800421e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004222:	d105      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004224:	4b05      	ldr	r3, [pc, #20]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	4a04      	ldr	r2, [pc, #16]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800422a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800422e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004230:	7cbb      	ldrb	r3, [r7, #18]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3718      	adds	r7, #24
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40021000 	.word	0x40021000

08004240 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e049      	b.n	80042e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d106      	bne.n	800426c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f841 	bl	80042ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3304      	adds	r3, #4
 800427c:	4619      	mov	r1, r3
 800427e:	4610      	mov	r0, r2
 8004280:	f000 fcde 	bl	8004c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
	...

08004304 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b01      	cmp	r3, #1
 8004316:	d001      	beq.n	800431c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e054      	b.n	80043c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0201 	orr.w	r2, r2, #1
 8004332:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a26      	ldr	r2, [pc, #152]	; (80043d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d022      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x80>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004346:	d01d      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x80>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a22      	ldr	r2, [pc, #136]	; (80043d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d018      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x80>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a21      	ldr	r2, [pc, #132]	; (80043dc <HAL_TIM_Base_Start_IT+0xd8>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d013      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x80>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a1f      	ldr	r2, [pc, #124]	; (80043e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d00e      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x80>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a1e      	ldr	r2, [pc, #120]	; (80043e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d009      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x80>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a1c      	ldr	r2, [pc, #112]	; (80043e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d004      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x80>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a1b      	ldr	r2, [pc, #108]	; (80043ec <HAL_TIM_Base_Start_IT+0xe8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d115      	bne.n	80043b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	4b19      	ldr	r3, [pc, #100]	; (80043f0 <HAL_TIM_Base_Start_IT+0xec>)
 800438c:	4013      	ands	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2b06      	cmp	r3, #6
 8004394:	d015      	beq.n	80043c2 <HAL_TIM_Base_Start_IT+0xbe>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800439c:	d011      	beq.n	80043c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 0201 	orr.w	r2, r2, #1
 80043ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ae:	e008      	b.n	80043c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0201 	orr.w	r2, r2, #1
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	e000      	b.n	80043c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40012c00 	.word	0x40012c00
 80043d8:	40000400 	.word	0x40000400
 80043dc:	40000800 	.word	0x40000800
 80043e0:	40000c00 	.word	0x40000c00
 80043e4:	40013400 	.word	0x40013400
 80043e8:	40014000 	.word	0x40014000
 80043ec:	40015000 	.word	0x40015000
 80043f0:	00010007 	.word	0x00010007

080043f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e049      	b.n	800449a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d106      	bne.n	8004420 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7fc fe94 	bl	8001148 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3304      	adds	r3, #4
 8004430:	4619      	mov	r1, r3
 8004432:	4610      	mov	r0, r2
 8004434:	f000 fc04 	bl	8004c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d109      	bne.n	80044c8 <HAL_TIM_PWM_Start+0x24>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b01      	cmp	r3, #1
 80044be:	bf14      	ite	ne
 80044c0:	2301      	movne	r3, #1
 80044c2:	2300      	moveq	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	e03c      	b.n	8004542 <HAL_TIM_PWM_Start+0x9e>
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d109      	bne.n	80044e2 <HAL_TIM_PWM_Start+0x3e>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	bf14      	ite	ne
 80044da:	2301      	movne	r3, #1
 80044dc:	2300      	moveq	r3, #0
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	e02f      	b.n	8004542 <HAL_TIM_PWM_Start+0x9e>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d109      	bne.n	80044fc <HAL_TIM_PWM_Start+0x58>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	bf14      	ite	ne
 80044f4:	2301      	movne	r3, #1
 80044f6:	2300      	moveq	r3, #0
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	e022      	b.n	8004542 <HAL_TIM_PWM_Start+0x9e>
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	2b0c      	cmp	r3, #12
 8004500:	d109      	bne.n	8004516 <HAL_TIM_PWM_Start+0x72>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b01      	cmp	r3, #1
 800450c:	bf14      	ite	ne
 800450e:	2301      	movne	r3, #1
 8004510:	2300      	moveq	r3, #0
 8004512:	b2db      	uxtb	r3, r3
 8004514:	e015      	b.n	8004542 <HAL_TIM_PWM_Start+0x9e>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b10      	cmp	r3, #16
 800451a:	d109      	bne.n	8004530 <HAL_TIM_PWM_Start+0x8c>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b01      	cmp	r3, #1
 8004526:	bf14      	ite	ne
 8004528:	2301      	movne	r3, #1
 800452a:	2300      	moveq	r3, #0
 800452c:	b2db      	uxtb	r3, r3
 800452e:	e008      	b.n	8004542 <HAL_TIM_PWM_Start+0x9e>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b01      	cmp	r3, #1
 800453a:	bf14      	ite	ne
 800453c:	2301      	movne	r3, #1
 800453e:	2300      	moveq	r3, #0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e0a6      	b.n	8004698 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d104      	bne.n	800455a <HAL_TIM_PWM_Start+0xb6>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2202      	movs	r2, #2
 8004554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004558:	e023      	b.n	80045a2 <HAL_TIM_PWM_Start+0xfe>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b04      	cmp	r3, #4
 800455e:	d104      	bne.n	800456a <HAL_TIM_PWM_Start+0xc6>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004568:	e01b      	b.n	80045a2 <HAL_TIM_PWM_Start+0xfe>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b08      	cmp	r3, #8
 800456e:	d104      	bne.n	800457a <HAL_TIM_PWM_Start+0xd6>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004578:	e013      	b.n	80045a2 <HAL_TIM_PWM_Start+0xfe>
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b0c      	cmp	r3, #12
 800457e:	d104      	bne.n	800458a <HAL_TIM_PWM_Start+0xe6>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004588:	e00b      	b.n	80045a2 <HAL_TIM_PWM_Start+0xfe>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b10      	cmp	r3, #16
 800458e:	d104      	bne.n	800459a <HAL_TIM_PWM_Start+0xf6>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004598:	e003      	b.n	80045a2 <HAL_TIM_PWM_Start+0xfe>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2202      	movs	r2, #2
 800459e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2201      	movs	r2, #1
 80045a8:	6839      	ldr	r1, [r7, #0]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 ff8e 	bl	80054cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a3a      	ldr	r2, [pc, #232]	; (80046a0 <HAL_TIM_PWM_Start+0x1fc>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d018      	beq.n	80045ec <HAL_TIM_PWM_Start+0x148>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a39      	ldr	r2, [pc, #228]	; (80046a4 <HAL_TIM_PWM_Start+0x200>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d013      	beq.n	80045ec <HAL_TIM_PWM_Start+0x148>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a37      	ldr	r2, [pc, #220]	; (80046a8 <HAL_TIM_PWM_Start+0x204>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d00e      	beq.n	80045ec <HAL_TIM_PWM_Start+0x148>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a36      	ldr	r2, [pc, #216]	; (80046ac <HAL_TIM_PWM_Start+0x208>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d009      	beq.n	80045ec <HAL_TIM_PWM_Start+0x148>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a34      	ldr	r2, [pc, #208]	; (80046b0 <HAL_TIM_PWM_Start+0x20c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d004      	beq.n	80045ec <HAL_TIM_PWM_Start+0x148>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a33      	ldr	r2, [pc, #204]	; (80046b4 <HAL_TIM_PWM_Start+0x210>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d101      	bne.n	80045f0 <HAL_TIM_PWM_Start+0x14c>
 80045ec:	2301      	movs	r3, #1
 80045ee:	e000      	b.n	80045f2 <HAL_TIM_PWM_Start+0x14e>
 80045f0:	2300      	movs	r3, #0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d007      	beq.n	8004606 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004604:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a25      	ldr	r2, [pc, #148]	; (80046a0 <HAL_TIM_PWM_Start+0x1fc>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d022      	beq.n	8004656 <HAL_TIM_PWM_Start+0x1b2>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004618:	d01d      	beq.n	8004656 <HAL_TIM_PWM_Start+0x1b2>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a26      	ldr	r2, [pc, #152]	; (80046b8 <HAL_TIM_PWM_Start+0x214>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d018      	beq.n	8004656 <HAL_TIM_PWM_Start+0x1b2>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a24      	ldr	r2, [pc, #144]	; (80046bc <HAL_TIM_PWM_Start+0x218>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d013      	beq.n	8004656 <HAL_TIM_PWM_Start+0x1b2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a23      	ldr	r2, [pc, #140]	; (80046c0 <HAL_TIM_PWM_Start+0x21c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d00e      	beq.n	8004656 <HAL_TIM_PWM_Start+0x1b2>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a19      	ldr	r2, [pc, #100]	; (80046a4 <HAL_TIM_PWM_Start+0x200>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d009      	beq.n	8004656 <HAL_TIM_PWM_Start+0x1b2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a18      	ldr	r2, [pc, #96]	; (80046a8 <HAL_TIM_PWM_Start+0x204>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d004      	beq.n	8004656 <HAL_TIM_PWM_Start+0x1b2>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a18      	ldr	r2, [pc, #96]	; (80046b4 <HAL_TIM_PWM_Start+0x210>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d115      	bne.n	8004682 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	4b19      	ldr	r3, [pc, #100]	; (80046c4 <HAL_TIM_PWM_Start+0x220>)
 800465e:	4013      	ands	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2b06      	cmp	r3, #6
 8004666:	d015      	beq.n	8004694 <HAL_TIM_PWM_Start+0x1f0>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800466e:	d011      	beq.n	8004694 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0201 	orr.w	r2, r2, #1
 800467e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004680:	e008      	b.n	8004694 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f042 0201 	orr.w	r2, r2, #1
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	e000      	b.n	8004696 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004694:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40012c00 	.word	0x40012c00
 80046a4:	40013400 	.word	0x40013400
 80046a8:	40014000 	.word	0x40014000
 80046ac:	40014400 	.word	0x40014400
 80046b0:	40014800 	.word	0x40014800
 80046b4:	40015000 	.word	0x40015000
 80046b8:	40000400 	.word	0x40000400
 80046bc:	40000800 	.word	0x40000800
 80046c0:	40000c00 	.word	0x40000c00
 80046c4:	00010007 	.word	0x00010007

080046c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d122      	bne.n	8004724 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d11b      	bne.n	8004724 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f06f 0202 	mvn.w	r2, #2
 80046f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 fa7a 	bl	8004c04 <HAL_TIM_IC_CaptureCallback>
 8004710:	e005      	b.n	800471e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 fa6c 	bl	8004bf0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 fa7d 	bl	8004c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	f003 0304 	and.w	r3, r3, #4
 800472e:	2b04      	cmp	r3, #4
 8004730:	d122      	bne.n	8004778 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b04      	cmp	r3, #4
 800473e:	d11b      	bne.n	8004778 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f06f 0204 	mvn.w	r2, #4
 8004748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2202      	movs	r2, #2
 800474e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 fa50 	bl	8004c04 <HAL_TIM_IC_CaptureCallback>
 8004764:	e005      	b.n	8004772 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 fa42 	bl	8004bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 fa53 	bl	8004c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	f003 0308 	and.w	r3, r3, #8
 8004782:	2b08      	cmp	r3, #8
 8004784:	d122      	bne.n	80047cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	2b08      	cmp	r3, #8
 8004792:	d11b      	bne.n	80047cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f06f 0208 	mvn.w	r2, #8
 800479c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2204      	movs	r2, #4
 80047a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fa26 	bl	8004c04 <HAL_TIM_IC_CaptureCallback>
 80047b8:	e005      	b.n	80047c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fa18 	bl	8004bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 fa29 	bl	8004c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f003 0310 	and.w	r3, r3, #16
 80047d6:	2b10      	cmp	r3, #16
 80047d8:	d122      	bne.n	8004820 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f003 0310 	and.w	r3, r3, #16
 80047e4:	2b10      	cmp	r3, #16
 80047e6:	d11b      	bne.n	8004820 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f06f 0210 	mvn.w	r2, #16
 80047f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2208      	movs	r2, #8
 80047f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f9fc 	bl	8004c04 <HAL_TIM_IC_CaptureCallback>
 800480c:	e005      	b.n	800481a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f9ee 	bl	8004bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f9ff 	bl	8004c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b01      	cmp	r3, #1
 800482c:	d10e      	bne.n	800484c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b01      	cmp	r3, #1
 800483a:	d107      	bne.n	800484c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f06f 0201 	mvn.w	r2, #1
 8004844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7fc f9ae 	bl	8000ba8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004856:	2b80      	cmp	r3, #128	; 0x80
 8004858:	d10e      	bne.n	8004878 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004864:	2b80      	cmp	r3, #128	; 0x80
 8004866:	d107      	bne.n	8004878 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f001 f912 	bl	8005a9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004886:	d10e      	bne.n	80048a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004892:	2b80      	cmp	r3, #128	; 0x80
 8004894:	d107      	bne.n	80048a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800489e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f001 f905 	bl	8005ab0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b0:	2b40      	cmp	r3, #64	; 0x40
 80048b2:	d10e      	bne.n	80048d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048be:	2b40      	cmp	r3, #64	; 0x40
 80048c0:	d107      	bne.n	80048d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f9ad 	bl	8004c2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	f003 0320 	and.w	r3, r3, #32
 80048dc:	2b20      	cmp	r3, #32
 80048de:	d10e      	bne.n	80048fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	f003 0320 	and.w	r3, r3, #32
 80048ea:	2b20      	cmp	r3, #32
 80048ec:	d107      	bne.n	80048fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f06f 0220 	mvn.w	r2, #32
 80048f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f001 f8c5 	bl	8005a88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004908:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800490c:	d10f      	bne.n	800492e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004918:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800491c:	d107      	bne.n	800492e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f001 f8cb 	bl	8005ac4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004938:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800493c:	d10f      	bne.n	800495e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004948:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800494c:	d107      	bne.n	800495e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f001 f8bd 	bl	8005ad8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004968:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800496c:	d10f      	bne.n	800498e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004978:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800497c:	d107      	bne.n	800498e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f001 f8af 	bl	8005aec <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004998:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800499c:	d10f      	bne.n	80049be <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049ac:	d107      	bne.n	80049be <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80049b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f001 f8a1 	bl	8005b00 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049be:	bf00      	nop
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
	...

080049c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049d4:	2300      	movs	r3, #0
 80049d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d101      	bne.n	80049e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049e2:	2302      	movs	r3, #2
 80049e4:	e0ff      	b.n	8004be6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b14      	cmp	r3, #20
 80049f2:	f200 80f0 	bhi.w	8004bd6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80049f6:	a201      	add	r2, pc, #4	; (adr r2, 80049fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fc:	08004a51 	.word	0x08004a51
 8004a00:	08004bd7 	.word	0x08004bd7
 8004a04:	08004bd7 	.word	0x08004bd7
 8004a08:	08004bd7 	.word	0x08004bd7
 8004a0c:	08004a91 	.word	0x08004a91
 8004a10:	08004bd7 	.word	0x08004bd7
 8004a14:	08004bd7 	.word	0x08004bd7
 8004a18:	08004bd7 	.word	0x08004bd7
 8004a1c:	08004ad3 	.word	0x08004ad3
 8004a20:	08004bd7 	.word	0x08004bd7
 8004a24:	08004bd7 	.word	0x08004bd7
 8004a28:	08004bd7 	.word	0x08004bd7
 8004a2c:	08004b13 	.word	0x08004b13
 8004a30:	08004bd7 	.word	0x08004bd7
 8004a34:	08004bd7 	.word	0x08004bd7
 8004a38:	08004bd7 	.word	0x08004bd7
 8004a3c:	08004b55 	.word	0x08004b55
 8004a40:	08004bd7 	.word	0x08004bd7
 8004a44:	08004bd7 	.word	0x08004bd7
 8004a48:	08004bd7 	.word	0x08004bd7
 8004a4c:	08004b95 	.word	0x08004b95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68b9      	ldr	r1, [r7, #8]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 f99a 	bl	8004d90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	699a      	ldr	r2, [r3, #24]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0208 	orr.w	r2, r2, #8
 8004a6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	699a      	ldr	r2, [r3, #24]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 0204 	bic.w	r2, r2, #4
 8004a7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6999      	ldr	r1, [r3, #24]
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	691a      	ldr	r2, [r3, #16]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	619a      	str	r2, [r3, #24]
      break;
 8004a8e:	e0a5      	b.n	8004bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68b9      	ldr	r1, [r7, #8]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 fa14 	bl	8004ec4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	699a      	ldr	r2, [r3, #24]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699a      	ldr	r2, [r3, #24]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6999      	ldr	r1, [r3, #24]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	021a      	lsls	r2, r3, #8
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	619a      	str	r2, [r3, #24]
      break;
 8004ad0:	e084      	b.n	8004bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68b9      	ldr	r1, [r7, #8]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 fa87 	bl	8004fec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	69da      	ldr	r2, [r3, #28]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f042 0208 	orr.w	r2, r2, #8
 8004aec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	69da      	ldr	r2, [r3, #28]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 0204 	bic.w	r2, r2, #4
 8004afc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	69d9      	ldr	r1, [r3, #28]
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	61da      	str	r2, [r3, #28]
      break;
 8004b10:	e064      	b.n	8004bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68b9      	ldr	r1, [r7, #8]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 faf9 	bl	8005110 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	69da      	ldr	r2, [r3, #28]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	69da      	ldr	r2, [r3, #28]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	69d9      	ldr	r1, [r3, #28]
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	021a      	lsls	r2, r3, #8
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	61da      	str	r2, [r3, #28]
      break;
 8004b52:	e043      	b.n	8004bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68b9      	ldr	r1, [r7, #8]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 fb6c 	bl	8005238 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f042 0208 	orr.w	r2, r2, #8
 8004b6e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0204 	bic.w	r2, r2, #4
 8004b7e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	691a      	ldr	r2, [r3, #16]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004b92:	e023      	b.n	8004bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68b9      	ldr	r1, [r7, #8]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f000 fbb6 	bl	800530c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bbe:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	021a      	lsls	r2, r3, #8
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004bd4:	e002      	b.n	8004bdc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	75fb      	strb	r3, [r7, #23]
      break;
 8004bda:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop

08004bf0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a46      	ldr	r2, [pc, #280]	; (8004d6c <TIM_Base_SetConfig+0x12c>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d017      	beq.n	8004c88 <TIM_Base_SetConfig+0x48>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c5e:	d013      	beq.n	8004c88 <TIM_Base_SetConfig+0x48>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a43      	ldr	r2, [pc, #268]	; (8004d70 <TIM_Base_SetConfig+0x130>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d00f      	beq.n	8004c88 <TIM_Base_SetConfig+0x48>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a42      	ldr	r2, [pc, #264]	; (8004d74 <TIM_Base_SetConfig+0x134>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d00b      	beq.n	8004c88 <TIM_Base_SetConfig+0x48>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a41      	ldr	r2, [pc, #260]	; (8004d78 <TIM_Base_SetConfig+0x138>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d007      	beq.n	8004c88 <TIM_Base_SetConfig+0x48>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a40      	ldr	r2, [pc, #256]	; (8004d7c <TIM_Base_SetConfig+0x13c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d003      	beq.n	8004c88 <TIM_Base_SetConfig+0x48>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a3f      	ldr	r2, [pc, #252]	; (8004d80 <TIM_Base_SetConfig+0x140>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d108      	bne.n	8004c9a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a33      	ldr	r2, [pc, #204]	; (8004d6c <TIM_Base_SetConfig+0x12c>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d023      	beq.n	8004cea <TIM_Base_SetConfig+0xaa>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca8:	d01f      	beq.n	8004cea <TIM_Base_SetConfig+0xaa>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a30      	ldr	r2, [pc, #192]	; (8004d70 <TIM_Base_SetConfig+0x130>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d01b      	beq.n	8004cea <TIM_Base_SetConfig+0xaa>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a2f      	ldr	r2, [pc, #188]	; (8004d74 <TIM_Base_SetConfig+0x134>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d017      	beq.n	8004cea <TIM_Base_SetConfig+0xaa>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a2e      	ldr	r2, [pc, #184]	; (8004d78 <TIM_Base_SetConfig+0x138>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d013      	beq.n	8004cea <TIM_Base_SetConfig+0xaa>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a2d      	ldr	r2, [pc, #180]	; (8004d7c <TIM_Base_SetConfig+0x13c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d00f      	beq.n	8004cea <TIM_Base_SetConfig+0xaa>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a2d      	ldr	r2, [pc, #180]	; (8004d84 <TIM_Base_SetConfig+0x144>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d00b      	beq.n	8004cea <TIM_Base_SetConfig+0xaa>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a2c      	ldr	r2, [pc, #176]	; (8004d88 <TIM_Base_SetConfig+0x148>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d007      	beq.n	8004cea <TIM_Base_SetConfig+0xaa>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a2b      	ldr	r2, [pc, #172]	; (8004d8c <TIM_Base_SetConfig+0x14c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d003      	beq.n	8004cea <TIM_Base_SetConfig+0xaa>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a26      	ldr	r2, [pc, #152]	; (8004d80 <TIM_Base_SetConfig+0x140>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d108      	bne.n	8004cfc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a12      	ldr	r2, [pc, #72]	; (8004d6c <TIM_Base_SetConfig+0x12c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d013      	beq.n	8004d50 <TIM_Base_SetConfig+0x110>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a14      	ldr	r2, [pc, #80]	; (8004d7c <TIM_Base_SetConfig+0x13c>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d00f      	beq.n	8004d50 <TIM_Base_SetConfig+0x110>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a14      	ldr	r2, [pc, #80]	; (8004d84 <TIM_Base_SetConfig+0x144>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d00b      	beq.n	8004d50 <TIM_Base_SetConfig+0x110>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a13      	ldr	r2, [pc, #76]	; (8004d88 <TIM_Base_SetConfig+0x148>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d007      	beq.n	8004d50 <TIM_Base_SetConfig+0x110>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a12      	ldr	r2, [pc, #72]	; (8004d8c <TIM_Base_SetConfig+0x14c>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d003      	beq.n	8004d50 <TIM_Base_SetConfig+0x110>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a0d      	ldr	r2, [pc, #52]	; (8004d80 <TIM_Base_SetConfig+0x140>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d103      	bne.n	8004d58 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	691a      	ldr	r2, [r3, #16]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	615a      	str	r2, [r3, #20]
}
 8004d5e:	bf00      	nop
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40012c00 	.word	0x40012c00
 8004d70:	40000400 	.word	0x40000400
 8004d74:	40000800 	.word	0x40000800
 8004d78:	40000c00 	.word	0x40000c00
 8004d7c:	40013400 	.word	0x40013400
 8004d80:	40015000 	.word	0x40015000
 8004d84:	40014000 	.word	0x40014000
 8004d88:	40014400 	.word	0x40014400
 8004d8c:	40014800 	.word	0x40014800

08004d90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	f023 0201 	bic.w	r2, r3, #1
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f023 0303 	bic.w	r3, r3, #3
 8004dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f023 0302 	bic.w	r3, r3, #2
 8004ddc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a30      	ldr	r2, [pc, #192]	; (8004eac <TIM_OC1_SetConfig+0x11c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d013      	beq.n	8004e18 <TIM_OC1_SetConfig+0x88>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a2f      	ldr	r2, [pc, #188]	; (8004eb0 <TIM_OC1_SetConfig+0x120>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d00f      	beq.n	8004e18 <TIM_OC1_SetConfig+0x88>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a2e      	ldr	r2, [pc, #184]	; (8004eb4 <TIM_OC1_SetConfig+0x124>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d00b      	beq.n	8004e18 <TIM_OC1_SetConfig+0x88>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a2d      	ldr	r2, [pc, #180]	; (8004eb8 <TIM_OC1_SetConfig+0x128>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d007      	beq.n	8004e18 <TIM_OC1_SetConfig+0x88>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a2c      	ldr	r2, [pc, #176]	; (8004ebc <TIM_OC1_SetConfig+0x12c>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d003      	beq.n	8004e18 <TIM_OC1_SetConfig+0x88>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a2b      	ldr	r2, [pc, #172]	; (8004ec0 <TIM_OC1_SetConfig+0x130>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d10c      	bne.n	8004e32 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f023 0308 	bic.w	r3, r3, #8
 8004e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f023 0304 	bic.w	r3, r3, #4
 8004e30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a1d      	ldr	r2, [pc, #116]	; (8004eac <TIM_OC1_SetConfig+0x11c>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d013      	beq.n	8004e62 <TIM_OC1_SetConfig+0xd2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a1c      	ldr	r2, [pc, #112]	; (8004eb0 <TIM_OC1_SetConfig+0x120>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d00f      	beq.n	8004e62 <TIM_OC1_SetConfig+0xd2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a1b      	ldr	r2, [pc, #108]	; (8004eb4 <TIM_OC1_SetConfig+0x124>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d00b      	beq.n	8004e62 <TIM_OC1_SetConfig+0xd2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a1a      	ldr	r2, [pc, #104]	; (8004eb8 <TIM_OC1_SetConfig+0x128>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d007      	beq.n	8004e62 <TIM_OC1_SetConfig+0xd2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a19      	ldr	r2, [pc, #100]	; (8004ebc <TIM_OC1_SetConfig+0x12c>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d003      	beq.n	8004e62 <TIM_OC1_SetConfig+0xd2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a18      	ldr	r2, [pc, #96]	; (8004ec0 <TIM_OC1_SetConfig+0x130>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d111      	bne.n	8004e86 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	621a      	str	r2, [r3, #32]
}
 8004ea0:	bf00      	nop
 8004ea2:	371c      	adds	r7, #28
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	40012c00 	.word	0x40012c00
 8004eb0:	40013400 	.word	0x40013400
 8004eb4:	40014000 	.word	0x40014000
 8004eb8:	40014400 	.word	0x40014400
 8004ebc:	40014800 	.word	0x40014800
 8004ec0:	40015000 	.word	0x40015000

08004ec4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	f023 0210 	bic.w	r2, r3, #16
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	021b      	lsls	r3, r3, #8
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f023 0320 	bic.w	r3, r3, #32
 8004f12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	011b      	lsls	r3, r3, #4
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a2c      	ldr	r2, [pc, #176]	; (8004fd4 <TIM_OC2_SetConfig+0x110>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d007      	beq.n	8004f38 <TIM_OC2_SetConfig+0x74>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a2b      	ldr	r2, [pc, #172]	; (8004fd8 <TIM_OC2_SetConfig+0x114>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d003      	beq.n	8004f38 <TIM_OC2_SetConfig+0x74>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a2a      	ldr	r2, [pc, #168]	; (8004fdc <TIM_OC2_SetConfig+0x118>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d10d      	bne.n	8004f54 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	011b      	lsls	r3, r3, #4
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a1f      	ldr	r2, [pc, #124]	; (8004fd4 <TIM_OC2_SetConfig+0x110>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d013      	beq.n	8004f84 <TIM_OC2_SetConfig+0xc0>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a1e      	ldr	r2, [pc, #120]	; (8004fd8 <TIM_OC2_SetConfig+0x114>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00f      	beq.n	8004f84 <TIM_OC2_SetConfig+0xc0>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a1e      	ldr	r2, [pc, #120]	; (8004fe0 <TIM_OC2_SetConfig+0x11c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d00b      	beq.n	8004f84 <TIM_OC2_SetConfig+0xc0>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a1d      	ldr	r2, [pc, #116]	; (8004fe4 <TIM_OC2_SetConfig+0x120>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d007      	beq.n	8004f84 <TIM_OC2_SetConfig+0xc0>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a1c      	ldr	r2, [pc, #112]	; (8004fe8 <TIM_OC2_SetConfig+0x124>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d003      	beq.n	8004f84 <TIM_OC2_SetConfig+0xc0>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a17      	ldr	r2, [pc, #92]	; (8004fdc <TIM_OC2_SetConfig+0x118>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d113      	bne.n	8004fac <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	621a      	str	r2, [r3, #32]
}
 8004fc6:	bf00      	nop
 8004fc8:	371c      	adds	r7, #28
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	40012c00 	.word	0x40012c00
 8004fd8:	40013400 	.word	0x40013400
 8004fdc:	40015000 	.word	0x40015000
 8004fe0:	40014000 	.word	0x40014000
 8004fe4:	40014400 	.word	0x40014400
 8004fe8:	40014800 	.word	0x40014800

08004fec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800501a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f023 0303 	bic.w	r3, r3, #3
 8005026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005038:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	021b      	lsls	r3, r3, #8
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	4313      	orrs	r3, r2
 8005044:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a2b      	ldr	r2, [pc, #172]	; (80050f8 <TIM_OC3_SetConfig+0x10c>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d007      	beq.n	800505e <TIM_OC3_SetConfig+0x72>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a2a      	ldr	r2, [pc, #168]	; (80050fc <TIM_OC3_SetConfig+0x110>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d003      	beq.n	800505e <TIM_OC3_SetConfig+0x72>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a29      	ldr	r2, [pc, #164]	; (8005100 <TIM_OC3_SetConfig+0x114>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d10d      	bne.n	800507a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005064:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	021b      	lsls	r3, r3, #8
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	4313      	orrs	r3, r2
 8005070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005078:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a1e      	ldr	r2, [pc, #120]	; (80050f8 <TIM_OC3_SetConfig+0x10c>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d013      	beq.n	80050aa <TIM_OC3_SetConfig+0xbe>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a1d      	ldr	r2, [pc, #116]	; (80050fc <TIM_OC3_SetConfig+0x110>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d00f      	beq.n	80050aa <TIM_OC3_SetConfig+0xbe>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a1d      	ldr	r2, [pc, #116]	; (8005104 <TIM_OC3_SetConfig+0x118>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d00b      	beq.n	80050aa <TIM_OC3_SetConfig+0xbe>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a1c      	ldr	r2, [pc, #112]	; (8005108 <TIM_OC3_SetConfig+0x11c>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d007      	beq.n	80050aa <TIM_OC3_SetConfig+0xbe>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a1b      	ldr	r2, [pc, #108]	; (800510c <TIM_OC3_SetConfig+0x120>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d003      	beq.n	80050aa <TIM_OC3_SetConfig+0xbe>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a16      	ldr	r2, [pc, #88]	; (8005100 <TIM_OC3_SetConfig+0x114>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d113      	bne.n	80050d2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	011b      	lsls	r3, r3, #4
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	621a      	str	r2, [r3, #32]
}
 80050ec:	bf00      	nop
 80050ee:	371c      	adds	r7, #28
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	40012c00 	.word	0x40012c00
 80050fc:	40013400 	.word	0x40013400
 8005100:	40015000 	.word	0x40015000
 8005104:	40014000 	.word	0x40014000
 8005108:	40014400 	.word	0x40014400
 800510c:	40014800 	.word	0x40014800

08005110 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005110:	b480      	push	{r7}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800513e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800514a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	021b      	lsls	r3, r3, #8
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	4313      	orrs	r3, r2
 8005156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800515e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	031b      	lsls	r3, r3, #12
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	4313      	orrs	r3, r2
 800516a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a2c      	ldr	r2, [pc, #176]	; (8005220 <TIM_OC4_SetConfig+0x110>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d007      	beq.n	8005184 <TIM_OC4_SetConfig+0x74>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a2b      	ldr	r2, [pc, #172]	; (8005224 <TIM_OC4_SetConfig+0x114>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d003      	beq.n	8005184 <TIM_OC4_SetConfig+0x74>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a2a      	ldr	r2, [pc, #168]	; (8005228 <TIM_OC4_SetConfig+0x118>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d10d      	bne.n	80051a0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800518a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	031b      	lsls	r3, r3, #12
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	4313      	orrs	r3, r2
 8005196:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800519e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a1f      	ldr	r2, [pc, #124]	; (8005220 <TIM_OC4_SetConfig+0x110>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d013      	beq.n	80051d0 <TIM_OC4_SetConfig+0xc0>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a1e      	ldr	r2, [pc, #120]	; (8005224 <TIM_OC4_SetConfig+0x114>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d00f      	beq.n	80051d0 <TIM_OC4_SetConfig+0xc0>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a1e      	ldr	r2, [pc, #120]	; (800522c <TIM_OC4_SetConfig+0x11c>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d00b      	beq.n	80051d0 <TIM_OC4_SetConfig+0xc0>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a1d      	ldr	r2, [pc, #116]	; (8005230 <TIM_OC4_SetConfig+0x120>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d007      	beq.n	80051d0 <TIM_OC4_SetConfig+0xc0>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a1c      	ldr	r2, [pc, #112]	; (8005234 <TIM_OC4_SetConfig+0x124>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d003      	beq.n	80051d0 <TIM_OC4_SetConfig+0xc0>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a17      	ldr	r2, [pc, #92]	; (8005228 <TIM_OC4_SetConfig+0x118>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d113      	bne.n	80051f8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051d6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051de:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	019b      	lsls	r3, r3, #6
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	019b      	lsls	r3, r3, #6
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685a      	ldr	r2, [r3, #4]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	621a      	str	r2, [r3, #32]
}
 8005212:	bf00      	nop
 8005214:	371c      	adds	r7, #28
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	40012c00 	.word	0x40012c00
 8005224:	40013400 	.word	0x40013400
 8005228:	40015000 	.word	0x40015000
 800522c:	40014000 	.word	0x40014000
 8005230:	40014400 	.word	0x40014400
 8005234:	40014800 	.word	0x40014800

08005238 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005238:	b480      	push	{r7}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800525e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800526a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	4313      	orrs	r3, r2
 8005274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800527c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	041b      	lsls	r3, r3, #16
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	4313      	orrs	r3, r2
 8005288:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a19      	ldr	r2, [pc, #100]	; (80052f4 <TIM_OC5_SetConfig+0xbc>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d013      	beq.n	80052ba <TIM_OC5_SetConfig+0x82>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a18      	ldr	r2, [pc, #96]	; (80052f8 <TIM_OC5_SetConfig+0xc0>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d00f      	beq.n	80052ba <TIM_OC5_SetConfig+0x82>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a17      	ldr	r2, [pc, #92]	; (80052fc <TIM_OC5_SetConfig+0xc4>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d00b      	beq.n	80052ba <TIM_OC5_SetConfig+0x82>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a16      	ldr	r2, [pc, #88]	; (8005300 <TIM_OC5_SetConfig+0xc8>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d007      	beq.n	80052ba <TIM_OC5_SetConfig+0x82>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a15      	ldr	r2, [pc, #84]	; (8005304 <TIM_OC5_SetConfig+0xcc>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d003      	beq.n	80052ba <TIM_OC5_SetConfig+0x82>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a14      	ldr	r2, [pc, #80]	; (8005308 <TIM_OC5_SetConfig+0xd0>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d109      	bne.n	80052ce <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	021b      	lsls	r3, r3, #8
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	621a      	str	r2, [r3, #32]
}
 80052e8:	bf00      	nop
 80052ea:	371c      	adds	r7, #28
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	40012c00 	.word	0x40012c00
 80052f8:	40013400 	.word	0x40013400
 80052fc:	40014000 	.word	0x40014000
 8005300:	40014400 	.word	0x40014400
 8005304:	40014800 	.word	0x40014800
 8005308:	40015000 	.word	0x40015000

0800530c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800530c:	b480      	push	{r7}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800533a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800533e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	021b      	lsls	r3, r3, #8
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	4313      	orrs	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005352:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	051b      	lsls	r3, r3, #20
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	4313      	orrs	r3, r2
 800535e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a1a      	ldr	r2, [pc, #104]	; (80053cc <TIM_OC6_SetConfig+0xc0>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d013      	beq.n	8005390 <TIM_OC6_SetConfig+0x84>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a19      	ldr	r2, [pc, #100]	; (80053d0 <TIM_OC6_SetConfig+0xc4>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d00f      	beq.n	8005390 <TIM_OC6_SetConfig+0x84>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a18      	ldr	r2, [pc, #96]	; (80053d4 <TIM_OC6_SetConfig+0xc8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d00b      	beq.n	8005390 <TIM_OC6_SetConfig+0x84>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a17      	ldr	r2, [pc, #92]	; (80053d8 <TIM_OC6_SetConfig+0xcc>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d007      	beq.n	8005390 <TIM_OC6_SetConfig+0x84>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a16      	ldr	r2, [pc, #88]	; (80053dc <TIM_OC6_SetConfig+0xd0>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d003      	beq.n	8005390 <TIM_OC6_SetConfig+0x84>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a15      	ldr	r2, [pc, #84]	; (80053e0 <TIM_OC6_SetConfig+0xd4>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d109      	bne.n	80053a4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005396:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	029b      	lsls	r3, r3, #10
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685a      	ldr	r2, [r3, #4]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	621a      	str	r2, [r3, #32]
}
 80053be:	bf00      	nop
 80053c0:	371c      	adds	r7, #28
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	40012c00 	.word	0x40012c00
 80053d0:	40013400 	.word	0x40013400
 80053d4:	40014000 	.word	0x40014000
 80053d8:	40014400 	.word	0x40014400
 80053dc:	40014800 	.word	0x40014800
 80053e0:	40015000 	.word	0x40015000

080053e4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
 80053f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	f023 0201 	bic.w	r2, r3, #1
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	4a28      	ldr	r2, [pc, #160]	; (80054b0 <TIM_TI1_SetConfig+0xcc>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d01b      	beq.n	800544a <TIM_TI1_SetConfig+0x66>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005418:	d017      	beq.n	800544a <TIM_TI1_SetConfig+0x66>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	4a25      	ldr	r2, [pc, #148]	; (80054b4 <TIM_TI1_SetConfig+0xd0>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d013      	beq.n	800544a <TIM_TI1_SetConfig+0x66>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	4a24      	ldr	r2, [pc, #144]	; (80054b8 <TIM_TI1_SetConfig+0xd4>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d00f      	beq.n	800544a <TIM_TI1_SetConfig+0x66>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	4a23      	ldr	r2, [pc, #140]	; (80054bc <TIM_TI1_SetConfig+0xd8>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d00b      	beq.n	800544a <TIM_TI1_SetConfig+0x66>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4a22      	ldr	r2, [pc, #136]	; (80054c0 <TIM_TI1_SetConfig+0xdc>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d007      	beq.n	800544a <TIM_TI1_SetConfig+0x66>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	4a21      	ldr	r2, [pc, #132]	; (80054c4 <TIM_TI1_SetConfig+0xe0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d003      	beq.n	800544a <TIM_TI1_SetConfig+0x66>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	4a20      	ldr	r2, [pc, #128]	; (80054c8 <TIM_TI1_SetConfig+0xe4>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d101      	bne.n	800544e <TIM_TI1_SetConfig+0x6a>
 800544a:	2301      	movs	r3, #1
 800544c:	e000      	b.n	8005450 <TIM_TI1_SetConfig+0x6c>
 800544e:	2300      	movs	r3, #0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d008      	beq.n	8005466 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f023 0303 	bic.w	r3, r3, #3
 800545a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4313      	orrs	r3, r2
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	e003      	b.n	800546e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f043 0301 	orr.w	r3, r3, #1
 800546c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005474:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	011b      	lsls	r3, r3, #4
 800547a:	b2db      	uxtb	r3, r3
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	4313      	orrs	r3, r2
 8005480:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	f023 030a 	bic.w	r3, r3, #10
 8005488:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	f003 030a 	and.w	r3, r3, #10
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	4313      	orrs	r3, r2
 8005494:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	621a      	str	r2, [r3, #32]
}
 80054a2:	bf00      	nop
 80054a4:	371c      	adds	r7, #28
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	40012c00 	.word	0x40012c00
 80054b4:	40000400 	.word	0x40000400
 80054b8:	40000800 	.word	0x40000800
 80054bc:	40000c00 	.word	0x40000c00
 80054c0:	40013400 	.word	0x40013400
 80054c4:	40014000 	.word	0x40014000
 80054c8:	40015000 	.word	0x40015000

080054cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	f003 031f 	and.w	r3, r3, #31
 80054de:	2201      	movs	r2, #1
 80054e0:	fa02 f303 	lsl.w	r3, r2, r3
 80054e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6a1a      	ldr	r2, [r3, #32]
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	43db      	mvns	r3, r3
 80054ee:	401a      	ands	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6a1a      	ldr	r2, [r3, #32]
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	f003 031f 	and.w	r3, r3, #31
 80054fe:	6879      	ldr	r1, [r7, #4]
 8005500:	fa01 f303 	lsl.w	r3, r1, r3
 8005504:	431a      	orrs	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	621a      	str	r2, [r3, #32]
}
 800550a:	bf00      	nop
 800550c:	371c      	adds	r7, #28
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b08a      	sub	sp, #40	; 0x28
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
 800551e:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e0a0      	b.n	800566c <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d106      	bne.n	8005544 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7fb fe22 	bl	8001188 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3304      	adds	r3, #4
 8005554:	4619      	mov	r1, r3
 8005556:	4610      	mov	r0, r2
 8005558:	f7ff fb72 	bl	8004c40 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6818      	ldr	r0, [r3, #0]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	6819      	ldr	r1, [r3, #0]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	2203      	movs	r2, #3
 800556a:	f7ff ff3b 	bl	80053e4 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	699a      	ldr	r2, [r3, #24]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 020c 	bic.w	r2, r2, #12
 800557c:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6999      	ldr	r1, [r3, #24]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	430a      	orrs	r2, r1
 800558e:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800559e:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6812      	ldr	r2, [r2, #0]
 80055aa:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80055ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b2:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689a      	ldr	r2, [r3, #8]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055c2:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	6812      	ldr	r2, [r2, #0]
 80055ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055d2:	f023 0307 	bic.w	r3, r3, #7
 80055d6:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689a      	ldr	r2, [r3, #8]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f042 0204 	orr.w	r2, r2, #4
 80055e6:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80055e8:	2300      	movs	r3, #0
 80055ea:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80055ec:	2300      	movs	r3, #0
 80055ee:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80055f0:	2370      	movs	r3, #112	; 0x70
 80055f2:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80055f4:	2300      	movs	r3, #0
 80055f6:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80055f8:	2300      	movs	r3, #0
 80055fa:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80055fc:	2300      	movs	r3, #0
 80055fe:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f107 020c 	add.w	r2, r7, #12
 800560e:	4611      	mov	r1, r2
 8005610:	4618      	mov	r0, r3
 8005612:	f7ff fc57 	bl	8004ec4 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6812      	ldr	r2, [r2, #0]
 8005620:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005628:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8005638:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3728      	adds	r7, #40	; 0x28
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d109      	bne.n	8005698 <HAL_TIMEx_PWMN_Start+0x24>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b01      	cmp	r3, #1
 800568e:	bf14      	ite	ne
 8005690:	2301      	movne	r3, #1
 8005692:	2300      	moveq	r3, #0
 8005694:	b2db      	uxtb	r3, r3
 8005696:	e022      	b.n	80056de <HAL_TIMEx_PWMN_Start+0x6a>
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	2b04      	cmp	r3, #4
 800569c:	d109      	bne.n	80056b2 <HAL_TIMEx_PWMN_Start+0x3e>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	bf14      	ite	ne
 80056aa:	2301      	movne	r3, #1
 80056ac:	2300      	moveq	r3, #0
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	e015      	b.n	80056de <HAL_TIMEx_PWMN_Start+0x6a>
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d109      	bne.n	80056cc <HAL_TIMEx_PWMN_Start+0x58>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	bf14      	ite	ne
 80056c4:	2301      	movne	r3, #1
 80056c6:	2300      	moveq	r3, #0
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	e008      	b.n	80056de <HAL_TIMEx_PWMN_Start+0x6a>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	bf14      	ite	ne
 80056d8:	2301      	movne	r3, #1
 80056da:	2300      	moveq	r3, #0
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e073      	b.n	80057ce <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d104      	bne.n	80056f6 <HAL_TIMEx_PWMN_Start+0x82>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056f4:	e013      	b.n	800571e <HAL_TIMEx_PWMN_Start+0xaa>
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2b04      	cmp	r3, #4
 80056fa:	d104      	bne.n	8005706 <HAL_TIMEx_PWMN_Start+0x92>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005704:	e00b      	b.n	800571e <HAL_TIMEx_PWMN_Start+0xaa>
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b08      	cmp	r3, #8
 800570a:	d104      	bne.n	8005716 <HAL_TIMEx_PWMN_Start+0xa2>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005714:	e003      	b.n	800571e <HAL_TIMEx_PWMN_Start+0xaa>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2202      	movs	r2, #2
 800571a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2204      	movs	r2, #4
 8005724:	6839      	ldr	r1, [r7, #0]
 8005726:	4618      	mov	r0, r3
 8005728:	f000 f9f4 	bl	8005b14 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800573a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a25      	ldr	r2, [pc, #148]	; (80057d8 <HAL_TIMEx_PWMN_Start+0x164>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d022      	beq.n	800578c <HAL_TIMEx_PWMN_Start+0x118>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800574e:	d01d      	beq.n	800578c <HAL_TIMEx_PWMN_Start+0x118>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a21      	ldr	r2, [pc, #132]	; (80057dc <HAL_TIMEx_PWMN_Start+0x168>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d018      	beq.n	800578c <HAL_TIMEx_PWMN_Start+0x118>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a20      	ldr	r2, [pc, #128]	; (80057e0 <HAL_TIMEx_PWMN_Start+0x16c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d013      	beq.n	800578c <HAL_TIMEx_PWMN_Start+0x118>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a1e      	ldr	r2, [pc, #120]	; (80057e4 <HAL_TIMEx_PWMN_Start+0x170>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d00e      	beq.n	800578c <HAL_TIMEx_PWMN_Start+0x118>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a1d      	ldr	r2, [pc, #116]	; (80057e8 <HAL_TIMEx_PWMN_Start+0x174>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d009      	beq.n	800578c <HAL_TIMEx_PWMN_Start+0x118>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a1b      	ldr	r2, [pc, #108]	; (80057ec <HAL_TIMEx_PWMN_Start+0x178>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d004      	beq.n	800578c <HAL_TIMEx_PWMN_Start+0x118>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a1a      	ldr	r2, [pc, #104]	; (80057f0 <HAL_TIMEx_PWMN_Start+0x17c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d115      	bne.n	80057b8 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689a      	ldr	r2, [r3, #8]
 8005792:	4b18      	ldr	r3, [pc, #96]	; (80057f4 <HAL_TIMEx_PWMN_Start+0x180>)
 8005794:	4013      	ands	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2b06      	cmp	r3, #6
 800579c:	d015      	beq.n	80057ca <HAL_TIMEx_PWMN_Start+0x156>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057a4:	d011      	beq.n	80057ca <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f042 0201 	orr.w	r2, r2, #1
 80057b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b6:	e008      	b.n	80057ca <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f042 0201 	orr.w	r2, r2, #1
 80057c6:	601a      	str	r2, [r3, #0]
 80057c8:	e000      	b.n	80057cc <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	40012c00 	.word	0x40012c00
 80057dc:	40000400 	.word	0x40000400
 80057e0:	40000800 	.word	0x40000800
 80057e4:	40000c00 	.word	0x40000c00
 80057e8:	40013400 	.word	0x40013400
 80057ec:	40014000 	.word	0x40014000
 80057f0:	40015000 	.word	0x40015000
 80057f4:	00010007 	.word	0x00010007

080057f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005808:	2b01      	cmp	r3, #1
 800580a:	d101      	bne.n	8005810 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800580c:	2302      	movs	r3, #2
 800580e:	e074      	b.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a34      	ldr	r2, [pc, #208]	; (8005908 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d009      	beq.n	800584e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a33      	ldr	r2, [pc, #204]	; (800590c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d004      	beq.n	800584e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a31      	ldr	r2, [pc, #196]	; (8005910 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d108      	bne.n	8005860 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005854:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	4313      	orrs	r3, r2
 800585e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800586a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	4313      	orrs	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a21      	ldr	r2, [pc, #132]	; (8005908 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d022      	beq.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005890:	d01d      	beq.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a1f      	ldr	r2, [pc, #124]	; (8005914 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d018      	beq.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a1d      	ldr	r2, [pc, #116]	; (8005918 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d013      	beq.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a1c      	ldr	r2, [pc, #112]	; (800591c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d00e      	beq.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a15      	ldr	r2, [pc, #84]	; (800590c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d009      	beq.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a18      	ldr	r2, [pc, #96]	; (8005920 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d004      	beq.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a11      	ldr	r2, [pc, #68]	; (8005910 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d10c      	bne.n	80058e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	4313      	orrs	r3, r2
 80058de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3714      	adds	r7, #20
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	40012c00 	.word	0x40012c00
 800590c:	40013400 	.word	0x40013400
 8005910:	40015000 	.word	0x40015000
 8005914:	40000400 	.word	0x40000400
 8005918:	40000800 	.word	0x40000800
 800591c:	40000c00 	.word	0x40000c00
 8005920:	40014000 	.word	0x40014000

08005924 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800592e:	2300      	movs	r3, #0
 8005930:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005938:	2b01      	cmp	r3, #1
 800593a:	d101      	bne.n	8005940 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800593c:	2302      	movs	r3, #2
 800593e:	e096      	b.n	8005a6e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	4313      	orrs	r3, r2
 8005954:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	4313      	orrs	r3, r2
 8005962:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	4313      	orrs	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4313      	orrs	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	4313      	orrs	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	4313      	orrs	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a6:	4313      	orrs	r3, r2
 80059a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	041b      	lsls	r3, r3, #16
 80059b6:	4313      	orrs	r3, r2
 80059b8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a2f      	ldr	r2, [pc, #188]	; (8005a7c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d009      	beq.n	80059d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a2d      	ldr	r2, [pc, #180]	; (8005a80 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d004      	beq.n	80059d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a2c      	ldr	r2, [pc, #176]	; (8005a84 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d106      	bne.n	80059e6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a24      	ldr	r2, [pc, #144]	; (8005a7c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d009      	beq.n	8005a04 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a22      	ldr	r2, [pc, #136]	; (8005a80 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d004      	beq.n	8005a04 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a21      	ldr	r2, [pc, #132]	; (8005a84 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d12b      	bne.n	8005a5c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0e:	051b      	lsls	r3, r3, #20
 8005a10:	4313      	orrs	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a11      	ldr	r2, [pc, #68]	; (8005a7c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d009      	beq.n	8005a4e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a10      	ldr	r2, [pc, #64]	; (8005a80 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d004      	beq.n	8005a4e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a0e      	ldr	r2, [pc, #56]	; (8005a84 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d106      	bne.n	8005a5c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	40012c00 	.word	0x40012c00
 8005a80:	40013400 	.word	0x40013400
 8005a84:	40015000 	.word	0x40015000

08005a88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f003 031f 	and.w	r3, r3, #31
 8005b26:	2204      	movs	r2, #4
 8005b28:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6a1a      	ldr	r2, [r3, #32]
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	43db      	mvns	r3, r3
 8005b36:	401a      	ands	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6a1a      	ldr	r2, [r3, #32]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	f003 031f 	and.w	r3, r3, #31
 8005b46:	6879      	ldr	r1, [r7, #4]
 8005b48:	fa01 f303 	lsl.w	r3, r1, r3
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	621a      	str	r2, [r3, #32]
}
 8005b52:	bf00      	nop
 8005b54:	371c      	adds	r7, #28
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b082      	sub	sp, #8
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e042      	b.n	8005bf6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d106      	bne.n	8005b88 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7fb fc62 	bl	800144c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2224      	movs	r2, #36	; 0x24
 8005b8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0201 	bic.w	r2, r2, #1
 8005b9e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 fc51 	bl	8006448 <UART_SetConfig>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d101      	bne.n	8005bb0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e022      	b.n	8005bf6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d002      	beq.n	8005bbe <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 ff41 	bl	8006a40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bcc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bdc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f042 0201 	orr.w	r2, r2, #1
 8005bec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 ffc8 	bl	8006b84 <UART_CheckIdleState>
 8005bf4:	4603      	mov	r3, r0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b08a      	sub	sp, #40	; 0x28
 8005c02:	af02      	add	r7, sp, #8
 8005c04:	60f8      	str	r0, [r7, #12]
 8005c06:	60b9      	str	r1, [r7, #8]
 8005c08:	603b      	str	r3, [r7, #0]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c14:	2b20      	cmp	r3, #32
 8005c16:	f040 8083 	bne.w	8005d20 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <HAL_UART_Transmit+0x28>
 8005c20:	88fb      	ldrh	r3, [r7, #6]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e07b      	b.n	8005d22 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d101      	bne.n	8005c38 <HAL_UART_Transmit+0x3a>
 8005c34:	2302      	movs	r3, #2
 8005c36:	e074      	b.n	8005d22 <HAL_UART_Transmit+0x124>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2221      	movs	r2, #33	; 0x21
 8005c4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c50:	f7fb fe1a 	bl	8001888 <HAL_GetTick>
 8005c54:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	88fa      	ldrh	r2, [r7, #6]
 8005c5a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	88fa      	ldrh	r2, [r7, #6]
 8005c62:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c6e:	d108      	bne.n	8005c82 <HAL_UART_Transmit+0x84>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d104      	bne.n	8005c82 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	61bb      	str	r3, [r7, #24]
 8005c80:	e003      	b.n	8005c8a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c86:	2300      	movs	r3, #0
 8005c88:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005c92:	e02c      	b.n	8005cee <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	9300      	str	r3, [sp, #0]
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	2180      	movs	r1, #128	; 0x80
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f000 ffbb 	bl	8006c1a <UART_WaitOnFlagUntilTimeout>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d001      	beq.n	8005cae <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e039      	b.n	8005d22 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d10b      	bne.n	8005ccc <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	881b      	ldrh	r3, [r3, #0]
 8005cb8:	461a      	mov	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cc2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	3302      	adds	r3, #2
 8005cc8:	61bb      	str	r3, [r7, #24]
 8005cca:	e007      	b.n	8005cdc <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	781a      	ldrb	r2, [r3, #0]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1cc      	bne.n	8005c94 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	2200      	movs	r2, #0
 8005d02:	2140      	movs	r1, #64	; 0x40
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f000 ff88 	bl	8006c1a <UART_WaitOnFlagUntilTimeout>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d001      	beq.n	8005d14 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e006      	b.n	8005d22 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2220      	movs	r2, #32
 8005d18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	e000      	b.n	8005d22 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005d20:	2302      	movs	r3, #2
  }
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3720      	adds	r7, #32
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
	...

08005d2c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b08a      	sub	sp, #40	; 0x28
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	4613      	mov	r3, r2
 8005d38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d40:	2b20      	cmp	r3, #32
 8005d42:	d142      	bne.n	8005dca <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d002      	beq.n	8005d50 <HAL_UART_Receive_IT+0x24>
 8005d4a:	88fb      	ldrh	r3, [r7, #6]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e03b      	b.n	8005dcc <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d101      	bne.n	8005d62 <HAL_UART_Receive_IT+0x36>
 8005d5e:	2302      	movs	r3, #2
 8005d60:	e034      	b.n	8005dcc <HAL_UART_Receive_IT+0xa0>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a17      	ldr	r2, [pc, #92]	; (8005dd4 <HAL_UART_Receive_IT+0xa8>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d01f      	beq.n	8005dba <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d018      	beq.n	8005dba <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	e853 3f00 	ldrex	r3, [r3]
 8005d94:	613b      	str	r3, [r7, #16]
   return(result);
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	461a      	mov	r2, r3
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	623b      	str	r3, [r7, #32]
 8005da8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005daa:	69f9      	ldr	r1, [r7, #28]
 8005dac:	6a3a      	ldr	r2, [r7, #32]
 8005dae:	e841 2300 	strex	r3, r2, [r1]
 8005db2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1e6      	bne.n	8005d88 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005dba:	88fb      	ldrh	r3, [r7, #6]
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	68b9      	ldr	r1, [r7, #8]
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f000 fff3 	bl	8006dac <UART_Start_Receive_IT>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	e000      	b.n	8005dcc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005dca:	2302      	movs	r3, #2
  }
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3728      	adds	r7, #40	; 0x28
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	40008000 	.word	0x40008000

08005dd8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b0ba      	sub	sp, #232	; 0xe8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005dfe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005e02:	f640 030f 	movw	r3, #2063	; 0x80f
 8005e06:	4013      	ands	r3, r2
 8005e08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005e0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d11b      	bne.n	8005e4c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e18:	f003 0320 	and.w	r3, r3, #32
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d015      	beq.n	8005e4c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e24:	f003 0320 	and.w	r3, r3, #32
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d105      	bne.n	8005e38 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d009      	beq.n	8005e4c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 82d6 	beq.w	80063ee <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	4798      	blx	r3
      }
      return;
 8005e4a:	e2d0      	b.n	80063ee <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f000 811f 	beq.w	8006094 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005e56:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005e5a:	4b8b      	ldr	r3, [pc, #556]	; (8006088 <HAL_UART_IRQHandler+0x2b0>)
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d106      	bne.n	8005e70 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005e62:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005e66:	4b89      	ldr	r3, [pc, #548]	; (800608c <HAL_UART_IRQHandler+0x2b4>)
 8005e68:	4013      	ands	r3, r2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 8112 	beq.w	8006094 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d011      	beq.n	8005ea0 <HAL_UART_IRQHandler+0xc8>
 8005e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00b      	beq.n	8005ea0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e96:	f043 0201 	orr.w	r2, r3, #1
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea4:	f003 0302 	and.w	r3, r3, #2
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d011      	beq.n	8005ed0 <HAL_UART_IRQHandler+0xf8>
 8005eac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00b      	beq.n	8005ed0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2202      	movs	r2, #2
 8005ebe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ec6:	f043 0204 	orr.w	r2, r3, #4
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ed4:	f003 0304 	and.w	r3, r3, #4
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d011      	beq.n	8005f00 <HAL_UART_IRQHandler+0x128>
 8005edc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00b      	beq.n	8005f00 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2204      	movs	r2, #4
 8005eee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ef6:	f043 0202 	orr.w	r2, r3, #2
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f04:	f003 0308 	and.w	r3, r3, #8
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d017      	beq.n	8005f3c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f10:	f003 0320 	and.w	r3, r3, #32
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d105      	bne.n	8005f24 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005f18:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005f1c:	4b5a      	ldr	r3, [pc, #360]	; (8006088 <HAL_UART_IRQHandler+0x2b0>)
 8005f1e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00b      	beq.n	8005f3c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2208      	movs	r2, #8
 8005f2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f32:	f043 0208 	orr.w	r2, r3, #8
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d012      	beq.n	8005f6e <HAL_UART_IRQHandler+0x196>
 8005f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00c      	beq.n	8005f6e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f64:	f043 0220 	orr.w	r2, r3, #32
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f000 823c 	beq.w	80063f2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f7e:	f003 0320 	and.w	r3, r3, #32
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d013      	beq.n	8005fae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f8a:	f003 0320 	and.w	r3, r3, #32
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d105      	bne.n	8005f9e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d007      	beq.n	8005fae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc2:	2b40      	cmp	r3, #64	; 0x40
 8005fc4:	d005      	beq.n	8005fd2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005fc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d04f      	beq.n	8006072 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f001 f814 	bl	8007000 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe2:	2b40      	cmp	r3, #64	; 0x40
 8005fe4:	d141      	bne.n	800606a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	3308      	adds	r3, #8
 8005fec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ff4:	e853 3f00 	ldrex	r3, [r3]
 8005ff8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ffc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006004:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	3308      	adds	r3, #8
 800600e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006012:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006016:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800601e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006022:	e841 2300 	strex	r3, r2, [r1]
 8006026:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800602a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1d9      	bne.n	8005fe6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006036:	2b00      	cmp	r3, #0
 8006038:	d013      	beq.n	8006062 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800603e:	4a14      	ldr	r2, [pc, #80]	; (8006090 <HAL_UART_IRQHandler+0x2b8>)
 8006040:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006046:	4618      	mov	r0, r3
 8006048:	f7fc fe6d 	bl	8002d26 <HAL_DMA_Abort_IT>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d017      	beq.n	8006082 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800605c:	4610      	mov	r0, r2
 800605e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006060:	e00f      	b.n	8006082 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f9da 	bl	800641c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006068:	e00b      	b.n	8006082 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f9d6 	bl	800641c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006070:	e007      	b.n	8006082 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f9d2 	bl	800641c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006080:	e1b7      	b.n	80063f2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006082:	bf00      	nop
    return;
 8006084:	e1b5      	b.n	80063f2 <HAL_UART_IRQHandler+0x61a>
 8006086:	bf00      	nop
 8006088:	10000001 	.word	0x10000001
 800608c:	04000120 	.word	0x04000120
 8006090:	080070cd 	.word	0x080070cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006098:	2b01      	cmp	r3, #1
 800609a:	f040 814a 	bne.w	8006332 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800609e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060a2:	f003 0310 	and.w	r3, r3, #16
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f000 8143 	beq.w	8006332 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80060ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060b0:	f003 0310 	and.w	r3, r3, #16
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 813c 	beq.w	8006332 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2210      	movs	r2, #16
 80060c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060cc:	2b40      	cmp	r3, #64	; 0x40
 80060ce:	f040 80b5 	bne.w	800623c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f000 8187 	beq.w	80063f6 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80060ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060f2:	429a      	cmp	r2, r3
 80060f4:	f080 817f 	bcs.w	80063f6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0320 	and.w	r3, r3, #32
 800610e:	2b00      	cmp	r3, #0
 8006110:	f040 8086 	bne.w	8006220 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006120:	e853 3f00 	ldrex	r3, [r3]
 8006124:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006128:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800612c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006130:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	461a      	mov	r2, r3
 800613a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800613e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006142:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006146:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800614a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800614e:	e841 2300 	strex	r3, r2, [r1]
 8006152:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006156:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1da      	bne.n	8006114 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3308      	adds	r3, #8
 8006164:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006166:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006168:	e853 3f00 	ldrex	r3, [r3]
 800616c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800616e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006170:	f023 0301 	bic.w	r3, r3, #1
 8006174:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	3308      	adds	r3, #8
 800617e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006182:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006186:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006188:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800618a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800618e:	e841 2300 	strex	r3, r2, [r1]
 8006192:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006194:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1e1      	bne.n	800615e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	3308      	adds	r3, #8
 80061a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061a4:	e853 3f00 	ldrex	r3, [r3]
 80061a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80061aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	3308      	adds	r3, #8
 80061ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80061be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80061c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80061c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80061c6:	e841 2300 	strex	r3, r2, [r1]
 80061ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80061cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1e3      	bne.n	800619a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2220      	movs	r2, #32
 80061d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061e8:	e853 3f00 	ldrex	r3, [r3]
 80061ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80061ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061f0:	f023 0310 	bic.w	r3, r3, #16
 80061f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	461a      	mov	r2, r3
 80061fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006202:	65bb      	str	r3, [r7, #88]	; 0x58
 8006204:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006206:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006208:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800620a:	e841 2300 	strex	r3, r2, [r1]
 800620e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1e4      	bne.n	80061e0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800621a:	4618      	mov	r0, r3
 800621c:	f7fc fd2a 	bl	8002c74 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800622c:	b29b      	uxth	r3, r3
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	b29b      	uxth	r3, r3
 8006232:	4619      	mov	r1, r3
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 f8fb 	bl	8006430 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800623a:	e0dc      	b.n	80063f6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006248:	b29b      	uxth	r3, r3
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006256:	b29b      	uxth	r3, r3
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 80ce 	beq.w	80063fa <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800625e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 80c9 	beq.w	80063fa <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006270:	e853 3f00 	ldrex	r3, [r3]
 8006274:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006278:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800627c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	461a      	mov	r2, r3
 8006286:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800628a:	647b      	str	r3, [r7, #68]	; 0x44
 800628c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006290:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006292:	e841 2300 	strex	r3, r2, [r1]
 8006296:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1e4      	bne.n	8006268 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3308      	adds	r3, #8
 80062a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a8:	e853 3f00 	ldrex	r3, [r3]
 80062ac:	623b      	str	r3, [r7, #32]
   return(result);
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062b4:	f023 0301 	bic.w	r3, r3, #1
 80062b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	3308      	adds	r3, #8
 80062c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80062c6:	633a      	str	r2, [r7, #48]	; 0x30
 80062c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ce:	e841 2300 	strex	r3, r2, [r1]
 80062d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1e1      	bne.n	800629e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2220      	movs	r2, #32
 80062de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	e853 3f00 	ldrex	r3, [r3]
 80062fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f023 0310 	bic.w	r3, r3, #16
 8006302:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	461a      	mov	r2, r3
 800630c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006310:	61fb      	str	r3, [r7, #28]
 8006312:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006314:	69b9      	ldr	r1, [r7, #24]
 8006316:	69fa      	ldr	r2, [r7, #28]
 8006318:	e841 2300 	strex	r3, r2, [r1]
 800631c:	617b      	str	r3, [r7, #20]
   return(result);
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1e4      	bne.n	80062ee <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006324:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006328:	4619      	mov	r1, r3
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f880 	bl	8006430 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006330:	e063      	b.n	80063fa <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00e      	beq.n	800635c <HAL_UART_IRQHandler+0x584>
 800633e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d008      	beq.n	800635c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006352:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f001 fb57 	bl	8007a08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800635a:	e051      	b.n	8006400 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800635c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006364:	2b00      	cmp	r3, #0
 8006366:	d014      	beq.n	8006392 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800636c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006370:	2b00      	cmp	r3, #0
 8006372:	d105      	bne.n	8006380 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006378:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d008      	beq.n	8006392 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006384:	2b00      	cmp	r3, #0
 8006386:	d03a      	beq.n	80063fe <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	4798      	blx	r3
    }
    return;
 8006390:	e035      	b.n	80063fe <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800639a:	2b00      	cmp	r3, #0
 800639c:	d009      	beq.n	80063b2 <HAL_UART_IRQHandler+0x5da>
 800639e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 fea4 	bl	80070f8 <UART_EndTransmit_IT>
    return;
 80063b0:	e026      	b.n	8006400 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80063b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d009      	beq.n	80063d2 <HAL_UART_IRQHandler+0x5fa>
 80063be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f001 fb30 	bl	8007a30 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063d0:	e016      	b.n	8006400 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80063d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d010      	beq.n	8006400 <HAL_UART_IRQHandler+0x628>
 80063de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	da0c      	bge.n	8006400 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f001 fb18 	bl	8007a1c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063ec:	e008      	b.n	8006400 <HAL_UART_IRQHandler+0x628>
      return;
 80063ee:	bf00      	nop
 80063f0:	e006      	b.n	8006400 <HAL_UART_IRQHandler+0x628>
    return;
 80063f2:	bf00      	nop
 80063f4:	e004      	b.n	8006400 <HAL_UART_IRQHandler+0x628>
      return;
 80063f6:	bf00      	nop
 80063f8:	e002      	b.n	8006400 <HAL_UART_IRQHandler+0x628>
      return;
 80063fa:	bf00      	nop
 80063fc:	e000      	b.n	8006400 <HAL_UART_IRQHandler+0x628>
    return;
 80063fe:	bf00      	nop
  }
}
 8006400:	37e8      	adds	r7, #232	; 0xe8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop

08006408 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	460b      	mov	r3, r1
 800643a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800644c:	b08c      	sub	sp, #48	; 0x30
 800644e:	af00      	add	r7, sp, #0
 8006450:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	689a      	ldr	r2, [r3, #8]
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	431a      	orrs	r2, r3
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	431a      	orrs	r2, r3
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	4313      	orrs	r3, r2
 800646e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	4baa      	ldr	r3, [pc, #680]	; (8006720 <UART_SetConfig+0x2d8>)
 8006478:	4013      	ands	r3, r2
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	6812      	ldr	r2, [r2, #0]
 800647e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006480:	430b      	orrs	r3, r1
 8006482:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	68da      	ldr	r2, [r3, #12]
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	430a      	orrs	r2, r1
 8006498:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a9f      	ldr	r2, [pc, #636]	; (8006724 <UART_SetConfig+0x2dc>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d004      	beq.n	80064b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064b0:	4313      	orrs	r3, r2
 80064b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80064be:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	6812      	ldr	r2, [r2, #0]
 80064c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064c8:	430b      	orrs	r3, r1
 80064ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d2:	f023 010f 	bic.w	r1, r3, #15
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a90      	ldr	r2, [pc, #576]	; (8006728 <UART_SetConfig+0x2e0>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d125      	bne.n	8006538 <UART_SetConfig+0xf0>
 80064ec:	4b8f      	ldr	r3, [pc, #572]	; (800672c <UART_SetConfig+0x2e4>)
 80064ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f2:	f003 0303 	and.w	r3, r3, #3
 80064f6:	2b03      	cmp	r3, #3
 80064f8:	d81a      	bhi.n	8006530 <UART_SetConfig+0xe8>
 80064fa:	a201      	add	r2, pc, #4	; (adr r2, 8006500 <UART_SetConfig+0xb8>)
 80064fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006500:	08006511 	.word	0x08006511
 8006504:	08006521 	.word	0x08006521
 8006508:	08006519 	.word	0x08006519
 800650c:	08006529 	.word	0x08006529
 8006510:	2301      	movs	r3, #1
 8006512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006516:	e116      	b.n	8006746 <UART_SetConfig+0x2fe>
 8006518:	2302      	movs	r3, #2
 800651a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800651e:	e112      	b.n	8006746 <UART_SetConfig+0x2fe>
 8006520:	2304      	movs	r3, #4
 8006522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006526:	e10e      	b.n	8006746 <UART_SetConfig+0x2fe>
 8006528:	2308      	movs	r3, #8
 800652a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800652e:	e10a      	b.n	8006746 <UART_SetConfig+0x2fe>
 8006530:	2310      	movs	r3, #16
 8006532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006536:	e106      	b.n	8006746 <UART_SetConfig+0x2fe>
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a7c      	ldr	r2, [pc, #496]	; (8006730 <UART_SetConfig+0x2e8>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d138      	bne.n	80065b4 <UART_SetConfig+0x16c>
 8006542:	4b7a      	ldr	r3, [pc, #488]	; (800672c <UART_SetConfig+0x2e4>)
 8006544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006548:	f003 030c 	and.w	r3, r3, #12
 800654c:	2b0c      	cmp	r3, #12
 800654e:	d82d      	bhi.n	80065ac <UART_SetConfig+0x164>
 8006550:	a201      	add	r2, pc, #4	; (adr r2, 8006558 <UART_SetConfig+0x110>)
 8006552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006556:	bf00      	nop
 8006558:	0800658d 	.word	0x0800658d
 800655c:	080065ad 	.word	0x080065ad
 8006560:	080065ad 	.word	0x080065ad
 8006564:	080065ad 	.word	0x080065ad
 8006568:	0800659d 	.word	0x0800659d
 800656c:	080065ad 	.word	0x080065ad
 8006570:	080065ad 	.word	0x080065ad
 8006574:	080065ad 	.word	0x080065ad
 8006578:	08006595 	.word	0x08006595
 800657c:	080065ad 	.word	0x080065ad
 8006580:	080065ad 	.word	0x080065ad
 8006584:	080065ad 	.word	0x080065ad
 8006588:	080065a5 	.word	0x080065a5
 800658c:	2300      	movs	r3, #0
 800658e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006592:	e0d8      	b.n	8006746 <UART_SetConfig+0x2fe>
 8006594:	2302      	movs	r3, #2
 8006596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800659a:	e0d4      	b.n	8006746 <UART_SetConfig+0x2fe>
 800659c:	2304      	movs	r3, #4
 800659e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065a2:	e0d0      	b.n	8006746 <UART_SetConfig+0x2fe>
 80065a4:	2308      	movs	r3, #8
 80065a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065aa:	e0cc      	b.n	8006746 <UART_SetConfig+0x2fe>
 80065ac:	2310      	movs	r3, #16
 80065ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065b2:	e0c8      	b.n	8006746 <UART_SetConfig+0x2fe>
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a5e      	ldr	r2, [pc, #376]	; (8006734 <UART_SetConfig+0x2ec>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d125      	bne.n	800660a <UART_SetConfig+0x1c2>
 80065be:	4b5b      	ldr	r3, [pc, #364]	; (800672c <UART_SetConfig+0x2e4>)
 80065c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80065c8:	2b30      	cmp	r3, #48	; 0x30
 80065ca:	d016      	beq.n	80065fa <UART_SetConfig+0x1b2>
 80065cc:	2b30      	cmp	r3, #48	; 0x30
 80065ce:	d818      	bhi.n	8006602 <UART_SetConfig+0x1ba>
 80065d0:	2b20      	cmp	r3, #32
 80065d2:	d00a      	beq.n	80065ea <UART_SetConfig+0x1a2>
 80065d4:	2b20      	cmp	r3, #32
 80065d6:	d814      	bhi.n	8006602 <UART_SetConfig+0x1ba>
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d002      	beq.n	80065e2 <UART_SetConfig+0x19a>
 80065dc:	2b10      	cmp	r3, #16
 80065de:	d008      	beq.n	80065f2 <UART_SetConfig+0x1aa>
 80065e0:	e00f      	b.n	8006602 <UART_SetConfig+0x1ba>
 80065e2:	2300      	movs	r3, #0
 80065e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065e8:	e0ad      	b.n	8006746 <UART_SetConfig+0x2fe>
 80065ea:	2302      	movs	r3, #2
 80065ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065f0:	e0a9      	b.n	8006746 <UART_SetConfig+0x2fe>
 80065f2:	2304      	movs	r3, #4
 80065f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065f8:	e0a5      	b.n	8006746 <UART_SetConfig+0x2fe>
 80065fa:	2308      	movs	r3, #8
 80065fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006600:	e0a1      	b.n	8006746 <UART_SetConfig+0x2fe>
 8006602:	2310      	movs	r3, #16
 8006604:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006608:	e09d      	b.n	8006746 <UART_SetConfig+0x2fe>
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a4a      	ldr	r2, [pc, #296]	; (8006738 <UART_SetConfig+0x2f0>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d125      	bne.n	8006660 <UART_SetConfig+0x218>
 8006614:	4b45      	ldr	r3, [pc, #276]	; (800672c <UART_SetConfig+0x2e4>)
 8006616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800661a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800661e:	2bc0      	cmp	r3, #192	; 0xc0
 8006620:	d016      	beq.n	8006650 <UART_SetConfig+0x208>
 8006622:	2bc0      	cmp	r3, #192	; 0xc0
 8006624:	d818      	bhi.n	8006658 <UART_SetConfig+0x210>
 8006626:	2b80      	cmp	r3, #128	; 0x80
 8006628:	d00a      	beq.n	8006640 <UART_SetConfig+0x1f8>
 800662a:	2b80      	cmp	r3, #128	; 0x80
 800662c:	d814      	bhi.n	8006658 <UART_SetConfig+0x210>
 800662e:	2b00      	cmp	r3, #0
 8006630:	d002      	beq.n	8006638 <UART_SetConfig+0x1f0>
 8006632:	2b40      	cmp	r3, #64	; 0x40
 8006634:	d008      	beq.n	8006648 <UART_SetConfig+0x200>
 8006636:	e00f      	b.n	8006658 <UART_SetConfig+0x210>
 8006638:	2300      	movs	r3, #0
 800663a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800663e:	e082      	b.n	8006746 <UART_SetConfig+0x2fe>
 8006640:	2302      	movs	r3, #2
 8006642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006646:	e07e      	b.n	8006746 <UART_SetConfig+0x2fe>
 8006648:	2304      	movs	r3, #4
 800664a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800664e:	e07a      	b.n	8006746 <UART_SetConfig+0x2fe>
 8006650:	2308      	movs	r3, #8
 8006652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006656:	e076      	b.n	8006746 <UART_SetConfig+0x2fe>
 8006658:	2310      	movs	r3, #16
 800665a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800665e:	e072      	b.n	8006746 <UART_SetConfig+0x2fe>
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a35      	ldr	r2, [pc, #212]	; (800673c <UART_SetConfig+0x2f4>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d12a      	bne.n	80066c0 <UART_SetConfig+0x278>
 800666a:	4b30      	ldr	r3, [pc, #192]	; (800672c <UART_SetConfig+0x2e4>)
 800666c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006670:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006674:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006678:	d01a      	beq.n	80066b0 <UART_SetConfig+0x268>
 800667a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800667e:	d81b      	bhi.n	80066b8 <UART_SetConfig+0x270>
 8006680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006684:	d00c      	beq.n	80066a0 <UART_SetConfig+0x258>
 8006686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800668a:	d815      	bhi.n	80066b8 <UART_SetConfig+0x270>
 800668c:	2b00      	cmp	r3, #0
 800668e:	d003      	beq.n	8006698 <UART_SetConfig+0x250>
 8006690:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006694:	d008      	beq.n	80066a8 <UART_SetConfig+0x260>
 8006696:	e00f      	b.n	80066b8 <UART_SetConfig+0x270>
 8006698:	2300      	movs	r3, #0
 800669a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800669e:	e052      	b.n	8006746 <UART_SetConfig+0x2fe>
 80066a0:	2302      	movs	r3, #2
 80066a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066a6:	e04e      	b.n	8006746 <UART_SetConfig+0x2fe>
 80066a8:	2304      	movs	r3, #4
 80066aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ae:	e04a      	b.n	8006746 <UART_SetConfig+0x2fe>
 80066b0:	2308      	movs	r3, #8
 80066b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066b6:	e046      	b.n	8006746 <UART_SetConfig+0x2fe>
 80066b8:	2310      	movs	r3, #16
 80066ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066be:	e042      	b.n	8006746 <UART_SetConfig+0x2fe>
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a17      	ldr	r2, [pc, #92]	; (8006724 <UART_SetConfig+0x2dc>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d13a      	bne.n	8006740 <UART_SetConfig+0x2f8>
 80066ca:	4b18      	ldr	r3, [pc, #96]	; (800672c <UART_SetConfig+0x2e4>)
 80066cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80066d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066d8:	d01a      	beq.n	8006710 <UART_SetConfig+0x2c8>
 80066da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066de:	d81b      	bhi.n	8006718 <UART_SetConfig+0x2d0>
 80066e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066e4:	d00c      	beq.n	8006700 <UART_SetConfig+0x2b8>
 80066e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066ea:	d815      	bhi.n	8006718 <UART_SetConfig+0x2d0>
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d003      	beq.n	80066f8 <UART_SetConfig+0x2b0>
 80066f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066f4:	d008      	beq.n	8006708 <UART_SetConfig+0x2c0>
 80066f6:	e00f      	b.n	8006718 <UART_SetConfig+0x2d0>
 80066f8:	2300      	movs	r3, #0
 80066fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066fe:	e022      	b.n	8006746 <UART_SetConfig+0x2fe>
 8006700:	2302      	movs	r3, #2
 8006702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006706:	e01e      	b.n	8006746 <UART_SetConfig+0x2fe>
 8006708:	2304      	movs	r3, #4
 800670a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800670e:	e01a      	b.n	8006746 <UART_SetConfig+0x2fe>
 8006710:	2308      	movs	r3, #8
 8006712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006716:	e016      	b.n	8006746 <UART_SetConfig+0x2fe>
 8006718:	2310      	movs	r3, #16
 800671a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800671e:	e012      	b.n	8006746 <UART_SetConfig+0x2fe>
 8006720:	cfff69f3 	.word	0xcfff69f3
 8006724:	40008000 	.word	0x40008000
 8006728:	40013800 	.word	0x40013800
 800672c:	40021000 	.word	0x40021000
 8006730:	40004400 	.word	0x40004400
 8006734:	40004800 	.word	0x40004800
 8006738:	40004c00 	.word	0x40004c00
 800673c:	40005000 	.word	0x40005000
 8006740:	2310      	movs	r3, #16
 8006742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4aae      	ldr	r2, [pc, #696]	; (8006a04 <UART_SetConfig+0x5bc>)
 800674c:	4293      	cmp	r3, r2
 800674e:	f040 8097 	bne.w	8006880 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006752:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006756:	2b08      	cmp	r3, #8
 8006758:	d823      	bhi.n	80067a2 <UART_SetConfig+0x35a>
 800675a:	a201      	add	r2, pc, #4	; (adr r2, 8006760 <UART_SetConfig+0x318>)
 800675c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006760:	08006785 	.word	0x08006785
 8006764:	080067a3 	.word	0x080067a3
 8006768:	0800678d 	.word	0x0800678d
 800676c:	080067a3 	.word	0x080067a3
 8006770:	08006793 	.word	0x08006793
 8006774:	080067a3 	.word	0x080067a3
 8006778:	080067a3 	.word	0x080067a3
 800677c:	080067a3 	.word	0x080067a3
 8006780:	0800679b 	.word	0x0800679b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006784:	f7fd fa6a 	bl	8003c5c <HAL_RCC_GetPCLK1Freq>
 8006788:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800678a:	e010      	b.n	80067ae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800678c:	4b9e      	ldr	r3, [pc, #632]	; (8006a08 <UART_SetConfig+0x5c0>)
 800678e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006790:	e00d      	b.n	80067ae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006792:	f7fd f9f5 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 8006796:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006798:	e009      	b.n	80067ae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800679a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800679e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80067a0:	e005      	b.n	80067ae <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80067a2:	2300      	movs	r3, #0
 80067a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80067ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80067ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 8130 	beq.w	8006a16 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ba:	4a94      	ldr	r2, [pc, #592]	; (8006a0c <UART_SetConfig+0x5c4>)
 80067bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067c0:	461a      	mov	r2, r3
 80067c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80067c8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	4613      	mov	r3, r2
 80067d0:	005b      	lsls	r3, r3, #1
 80067d2:	4413      	add	r3, r2
 80067d4:	69ba      	ldr	r2, [r7, #24]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d305      	bcc.n	80067e6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067e0:	69ba      	ldr	r2, [r7, #24]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d903      	bls.n	80067ee <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80067ec:	e113      	b.n	8006a16 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	2200      	movs	r2, #0
 80067f2:	60bb      	str	r3, [r7, #8]
 80067f4:	60fa      	str	r2, [r7, #12]
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fa:	4a84      	ldr	r2, [pc, #528]	; (8006a0c <UART_SetConfig+0x5c4>)
 80067fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006800:	b29b      	uxth	r3, r3
 8006802:	2200      	movs	r2, #0
 8006804:	603b      	str	r3, [r7, #0]
 8006806:	607a      	str	r2, [r7, #4]
 8006808:	e9d7 2300 	ldrd	r2, r3, [r7]
 800680c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006810:	f7f9 fd6e 	bl	80002f0 <__aeabi_uldivmod>
 8006814:	4602      	mov	r2, r0
 8006816:	460b      	mov	r3, r1
 8006818:	4610      	mov	r0, r2
 800681a:	4619      	mov	r1, r3
 800681c:	f04f 0200 	mov.w	r2, #0
 8006820:	f04f 0300 	mov.w	r3, #0
 8006824:	020b      	lsls	r3, r1, #8
 8006826:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800682a:	0202      	lsls	r2, r0, #8
 800682c:	6979      	ldr	r1, [r7, #20]
 800682e:	6849      	ldr	r1, [r1, #4]
 8006830:	0849      	lsrs	r1, r1, #1
 8006832:	2000      	movs	r0, #0
 8006834:	460c      	mov	r4, r1
 8006836:	4605      	mov	r5, r0
 8006838:	eb12 0804 	adds.w	r8, r2, r4
 800683c:	eb43 0905 	adc.w	r9, r3, r5
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	469a      	mov	sl, r3
 8006848:	4693      	mov	fp, r2
 800684a:	4652      	mov	r2, sl
 800684c:	465b      	mov	r3, fp
 800684e:	4640      	mov	r0, r8
 8006850:	4649      	mov	r1, r9
 8006852:	f7f9 fd4d 	bl	80002f0 <__aeabi_uldivmod>
 8006856:	4602      	mov	r2, r0
 8006858:	460b      	mov	r3, r1
 800685a:	4613      	mov	r3, r2
 800685c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006864:	d308      	bcc.n	8006878 <UART_SetConfig+0x430>
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800686c:	d204      	bcs.n	8006878 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	6a3a      	ldr	r2, [r7, #32]
 8006874:	60da      	str	r2, [r3, #12]
 8006876:	e0ce      	b.n	8006a16 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800687e:	e0ca      	b.n	8006a16 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	69db      	ldr	r3, [r3, #28]
 8006884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006888:	d166      	bne.n	8006958 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800688a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800688e:	2b08      	cmp	r3, #8
 8006890:	d827      	bhi.n	80068e2 <UART_SetConfig+0x49a>
 8006892:	a201      	add	r2, pc, #4	; (adr r2, 8006898 <UART_SetConfig+0x450>)
 8006894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006898:	080068bd 	.word	0x080068bd
 800689c:	080068c5 	.word	0x080068c5
 80068a0:	080068cd 	.word	0x080068cd
 80068a4:	080068e3 	.word	0x080068e3
 80068a8:	080068d3 	.word	0x080068d3
 80068ac:	080068e3 	.word	0x080068e3
 80068b0:	080068e3 	.word	0x080068e3
 80068b4:	080068e3 	.word	0x080068e3
 80068b8:	080068db 	.word	0x080068db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068bc:	f7fd f9ce 	bl	8003c5c <HAL_RCC_GetPCLK1Freq>
 80068c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80068c2:	e014      	b.n	80068ee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068c4:	f7fd f9e0 	bl	8003c88 <HAL_RCC_GetPCLK2Freq>
 80068c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80068ca:	e010      	b.n	80068ee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068cc:	4b4e      	ldr	r3, [pc, #312]	; (8006a08 <UART_SetConfig+0x5c0>)
 80068ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80068d0:	e00d      	b.n	80068ee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068d2:	f7fd f955 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 80068d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80068d8:	e009      	b.n	80068ee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80068e0:	e005      	b.n	80068ee <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80068e2:	2300      	movs	r3, #0
 80068e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80068ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f000 8090 	beq.w	8006a16 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fa:	4a44      	ldr	r2, [pc, #272]	; (8006a0c <UART_SetConfig+0x5c4>)
 80068fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006900:	461a      	mov	r2, r3
 8006902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006904:	fbb3 f3f2 	udiv	r3, r3, r2
 8006908:	005a      	lsls	r2, r3, #1
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	085b      	lsrs	r3, r3, #1
 8006910:	441a      	add	r2, r3
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	fbb2 f3f3 	udiv	r3, r2, r3
 800691a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800691c:	6a3b      	ldr	r3, [r7, #32]
 800691e:	2b0f      	cmp	r3, #15
 8006920:	d916      	bls.n	8006950 <UART_SetConfig+0x508>
 8006922:	6a3b      	ldr	r3, [r7, #32]
 8006924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006928:	d212      	bcs.n	8006950 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800692a:	6a3b      	ldr	r3, [r7, #32]
 800692c:	b29b      	uxth	r3, r3
 800692e:	f023 030f 	bic.w	r3, r3, #15
 8006932:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006934:	6a3b      	ldr	r3, [r7, #32]
 8006936:	085b      	lsrs	r3, r3, #1
 8006938:	b29b      	uxth	r3, r3
 800693a:	f003 0307 	and.w	r3, r3, #7
 800693e:	b29a      	uxth	r2, r3
 8006940:	8bfb      	ldrh	r3, [r7, #30]
 8006942:	4313      	orrs	r3, r2
 8006944:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	8bfa      	ldrh	r2, [r7, #30]
 800694c:	60da      	str	r2, [r3, #12]
 800694e:	e062      	b.n	8006a16 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006956:	e05e      	b.n	8006a16 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006958:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800695c:	2b08      	cmp	r3, #8
 800695e:	d828      	bhi.n	80069b2 <UART_SetConfig+0x56a>
 8006960:	a201      	add	r2, pc, #4	; (adr r2, 8006968 <UART_SetConfig+0x520>)
 8006962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006966:	bf00      	nop
 8006968:	0800698d 	.word	0x0800698d
 800696c:	08006995 	.word	0x08006995
 8006970:	0800699d 	.word	0x0800699d
 8006974:	080069b3 	.word	0x080069b3
 8006978:	080069a3 	.word	0x080069a3
 800697c:	080069b3 	.word	0x080069b3
 8006980:	080069b3 	.word	0x080069b3
 8006984:	080069b3 	.word	0x080069b3
 8006988:	080069ab 	.word	0x080069ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800698c:	f7fd f966 	bl	8003c5c <HAL_RCC_GetPCLK1Freq>
 8006990:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006992:	e014      	b.n	80069be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006994:	f7fd f978 	bl	8003c88 <HAL_RCC_GetPCLK2Freq>
 8006998:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800699a:	e010      	b.n	80069be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800699c:	4b1a      	ldr	r3, [pc, #104]	; (8006a08 <UART_SetConfig+0x5c0>)
 800699e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80069a0:	e00d      	b.n	80069be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069a2:	f7fd f8ed 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 80069a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069a8:	e009      	b.n	80069be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80069b0:	e005      	b.n	80069be <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80069b2:	2300      	movs	r3, #0
 80069b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80069bc:	bf00      	nop
    }

    if (pclk != 0U)
 80069be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d028      	beq.n	8006a16 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c8:	4a10      	ldr	r2, [pc, #64]	; (8006a0c <UART_SetConfig+0x5c4>)
 80069ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069ce:	461a      	mov	r2, r3
 80069d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	085b      	lsrs	r3, r3, #1
 80069dc:	441a      	add	r2, r3
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069e8:	6a3b      	ldr	r3, [r7, #32]
 80069ea:	2b0f      	cmp	r3, #15
 80069ec:	d910      	bls.n	8006a10 <UART_SetConfig+0x5c8>
 80069ee:	6a3b      	ldr	r3, [r7, #32]
 80069f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069f4:	d20c      	bcs.n	8006a10 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80069f6:	6a3b      	ldr	r3, [r7, #32]
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	60da      	str	r2, [r3, #12]
 8006a00:	e009      	b.n	8006a16 <UART_SetConfig+0x5ce>
 8006a02:	bf00      	nop
 8006a04:	40008000 	.word	0x40008000
 8006a08:	00f42400 	.word	0x00f42400
 8006a0c:	08009078 	.word	0x08009078
      }
      else
      {
        ret = HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006a32:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3730      	adds	r7, #48	; 0x30
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006a40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4c:	f003 0301 	and.w	r3, r3, #1
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00a      	beq.n	8006a6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	430a      	orrs	r2, r1
 8006a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6e:	f003 0302 	and.w	r3, r3, #2
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00a      	beq.n	8006a8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a90:	f003 0304 	and.w	r3, r3, #4
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00a      	beq.n	8006aae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	430a      	orrs	r2, r1
 8006aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab2:	f003 0308 	and.w	r3, r3, #8
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00a      	beq.n	8006ad0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	430a      	orrs	r2, r1
 8006ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad4:	f003 0310 	and.w	r3, r3, #16
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00a      	beq.n	8006af2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	430a      	orrs	r2, r1
 8006af0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af6:	f003 0320 	and.w	r3, r3, #32
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00a      	beq.n	8006b14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	430a      	orrs	r2, r1
 8006b12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d01a      	beq.n	8006b56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	430a      	orrs	r2, r1
 8006b34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b3e:	d10a      	bne.n	8006b56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	430a      	orrs	r2, r1
 8006b54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00a      	beq.n	8006b78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	430a      	orrs	r2, r1
 8006b76:	605a      	str	r2, [r3, #4]
  }
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b086      	sub	sp, #24
 8006b88:	af02      	add	r7, sp, #8
 8006b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b94:	f7fa fe78 	bl	8001888 <HAL_GetTick>
 8006b98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0308 	and.w	r3, r3, #8
 8006ba4:	2b08      	cmp	r3, #8
 8006ba6:	d10e      	bne.n	8006bc6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ba8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006bac:	9300      	str	r3, [sp, #0]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f82f 	bl	8006c1a <UART_WaitOnFlagUntilTimeout>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d001      	beq.n	8006bc6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e025      	b.n	8006c12 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 0304 	and.w	r3, r3, #4
 8006bd0:	2b04      	cmp	r3, #4
 8006bd2:	d10e      	bne.n	8006bf2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f819 	bl	8006c1a <UART_WaitOnFlagUntilTimeout>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d001      	beq.n	8006bf2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e00f      	b.n	8006c12 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2220      	movs	r2, #32
 8006bf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2220      	movs	r2, #32
 8006bfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b09c      	sub	sp, #112	; 0x70
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	60f8      	str	r0, [r7, #12]
 8006c22:	60b9      	str	r1, [r7, #8]
 8006c24:	603b      	str	r3, [r7, #0]
 8006c26:	4613      	mov	r3, r2
 8006c28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c2a:	e0a9      	b.n	8006d80 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c32:	f000 80a5 	beq.w	8006d80 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c36:	f7fa fe27 	bl	8001888 <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d302      	bcc.n	8006c4c <UART_WaitOnFlagUntilTimeout+0x32>
 8006c46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d140      	bne.n	8006cce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c54:	e853 3f00 	ldrex	r3, [r3]
 8006c58:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c60:	667b      	str	r3, [r7, #100]	; 0x64
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	461a      	mov	r2, r3
 8006c68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c6c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c72:	e841 2300 	strex	r3, r2, [r1]
 8006c76:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1e6      	bne.n	8006c4c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	3308      	adds	r3, #8
 8006c84:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c88:	e853 3f00 	ldrex	r3, [r3]
 8006c8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c90:	f023 0301 	bic.w	r3, r3, #1
 8006c94:	663b      	str	r3, [r7, #96]	; 0x60
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	3308      	adds	r3, #8
 8006c9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c9e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ca0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ca4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ca6:	e841 2300 	strex	r3, r2, [r1]
 8006caa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1e5      	bne.n	8006c7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e069      	b.n	8006da2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0304 	and.w	r3, r3, #4
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d051      	beq.n	8006d80 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cea:	d149      	bne.n	8006d80 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cf4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfe:	e853 3f00 	ldrex	r3, [r3]
 8006d02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	461a      	mov	r2, r3
 8006d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d14:	637b      	str	r3, [r7, #52]	; 0x34
 8006d16:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d1c:	e841 2300 	strex	r3, r2, [r1]
 8006d20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1e6      	bne.n	8006cf6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	3308      	adds	r3, #8
 8006d2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	e853 3f00 	ldrex	r3, [r3]
 8006d36:	613b      	str	r3, [r7, #16]
   return(result);
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	f023 0301 	bic.w	r3, r3, #1
 8006d3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	3308      	adds	r3, #8
 8006d46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d48:	623a      	str	r2, [r7, #32]
 8006d4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4c:	69f9      	ldr	r1, [r7, #28]
 8006d4e:	6a3a      	ldr	r2, [r7, #32]
 8006d50:	e841 2300 	strex	r3, r2, [r1]
 8006d54:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1e5      	bne.n	8006d28 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2220      	movs	r2, #32
 8006d68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e010      	b.n	8006da2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	69da      	ldr	r2, [r3, #28]
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	4013      	ands	r3, r2
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	bf0c      	ite	eq
 8006d90:	2301      	moveq	r3, #1
 8006d92:	2300      	movne	r3, #0
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	461a      	mov	r2, r3
 8006d98:	79fb      	ldrb	r3, [r7, #7]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	f43f af46 	beq.w	8006c2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3770      	adds	r7, #112	; 0x70
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
	...

08006dac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b0a3      	sub	sp, #140	; 0x8c
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	4613      	mov	r3, r2
 8006db8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	68ba      	ldr	r2, [r7, #8]
 8006dbe:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	88fa      	ldrh	r2, [r7, #6]
 8006dc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	88fa      	ldrh	r2, [r7, #6]
 8006dcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dde:	d10e      	bne.n	8006dfe <UART_Start_Receive_IT+0x52>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d105      	bne.n	8006df4 <UART_Start_Receive_IT+0x48>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006dee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006df2:	e02d      	b.n	8006e50 <UART_Start_Receive_IT+0xa4>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	22ff      	movs	r2, #255	; 0xff
 8006df8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006dfc:	e028      	b.n	8006e50 <UART_Start_Receive_IT+0xa4>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d10d      	bne.n	8006e22 <UART_Start_Receive_IT+0x76>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d104      	bne.n	8006e18 <UART_Start_Receive_IT+0x6c>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	22ff      	movs	r2, #255	; 0xff
 8006e12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006e16:	e01b      	b.n	8006e50 <UART_Start_Receive_IT+0xa4>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	227f      	movs	r2, #127	; 0x7f
 8006e1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006e20:	e016      	b.n	8006e50 <UART_Start_Receive_IT+0xa4>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e2a:	d10d      	bne.n	8006e48 <UART_Start_Receive_IT+0x9c>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d104      	bne.n	8006e3e <UART_Start_Receive_IT+0x92>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	227f      	movs	r2, #127	; 0x7f
 8006e38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006e3c:	e008      	b.n	8006e50 <UART_Start_Receive_IT+0xa4>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	223f      	movs	r2, #63	; 0x3f
 8006e42:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006e46:	e003      	b.n	8006e50 <UART_Start_Receive_IT+0xa4>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2222      	movs	r2, #34	; 0x22
 8006e5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3308      	adds	r3, #8
 8006e66:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e6a:	e853 3f00 	ldrex	r3, [r3]
 8006e6e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006e70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e72:	f043 0301 	orr.w	r3, r3, #1
 8006e76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	3308      	adds	r3, #8
 8006e80:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006e84:	673a      	str	r2, [r7, #112]	; 0x70
 8006e86:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e88:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006e8a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006e8c:	e841 2300 	strex	r3, r2, [r1]
 8006e90:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006e92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1e3      	bne.n	8006e60 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ea0:	d153      	bne.n	8006f4a <UART_Start_Receive_IT+0x19e>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006ea8:	88fa      	ldrh	r2, [r7, #6]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d34d      	bcc.n	8006f4a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eb6:	d107      	bne.n	8006ec8 <UART_Start_Receive_IT+0x11c>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d103      	bne.n	8006ec8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4a4b      	ldr	r2, [pc, #300]	; (8006ff0 <UART_Start_Receive_IT+0x244>)
 8006ec4:	671a      	str	r2, [r3, #112]	; 0x70
 8006ec6:	e002      	b.n	8006ece <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	4a4a      	ldr	r2, [pc, #296]	; (8006ff4 <UART_Start_Receive_IT+0x248>)
 8006ecc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d01a      	beq.n	8006f14 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ee6:	e853 3f00 	ldrex	r3, [r3]
 8006eea:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ef2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	461a      	mov	r2, r3
 8006efc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f02:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f04:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f06:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f08:	e841 2300 	strex	r3, r2, [r1]
 8006f0c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006f0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1e4      	bne.n	8006ede <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	3308      	adds	r3, #8
 8006f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f1e:	e853 3f00 	ldrex	r3, [r3]
 8006f22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	3308      	adds	r3, #8
 8006f32:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006f34:	64ba      	str	r2, [r7, #72]	; 0x48
 8006f36:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f38:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f3c:	e841 2300 	strex	r3, r2, [r1]
 8006f40:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1e5      	bne.n	8006f14 <UART_Start_Receive_IT+0x168>
 8006f48:	e04a      	b.n	8006fe0 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f52:	d107      	bne.n	8006f64 <UART_Start_Receive_IT+0x1b8>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d103      	bne.n	8006f64 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	4a26      	ldr	r2, [pc, #152]	; (8006ff8 <UART_Start_Receive_IT+0x24c>)
 8006f60:	671a      	str	r2, [r3, #112]	; 0x70
 8006f62:	e002      	b.n	8006f6a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	4a25      	ldr	r2, [pc, #148]	; (8006ffc <UART_Start_Receive_IT+0x250>)
 8006f68:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d019      	beq.n	8006fae <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f82:	e853 3f00 	ldrex	r3, [r3]
 8006f86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006f8e:	677b      	str	r3, [r7, #116]	; 0x74
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	461a      	mov	r2, r3
 8006f96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f98:	637b      	str	r3, [r7, #52]	; 0x34
 8006f9a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fa0:	e841 2300 	strex	r3, r2, [r1]
 8006fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1e6      	bne.n	8006f7a <UART_Start_Receive_IT+0x1ce>
 8006fac:	e018      	b.n	8006fe0 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	e853 3f00 	ldrex	r3, [r3]
 8006fba:	613b      	str	r3, [r7, #16]
   return(result);
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	f043 0320 	orr.w	r3, r3, #32
 8006fc2:	67bb      	str	r3, [r7, #120]	; 0x78
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	461a      	mov	r2, r3
 8006fca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fcc:	623b      	str	r3, [r7, #32]
 8006fce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd0:	69f9      	ldr	r1, [r7, #28]
 8006fd2:	6a3a      	ldr	r2, [r7, #32]
 8006fd4:	e841 2300 	strex	r3, r2, [r1]
 8006fd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1e6      	bne.n	8006fae <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	378c      	adds	r7, #140	; 0x8c
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	08007709 	.word	0x08007709
 8006ff4:	08007411 	.word	0x08007411
 8006ff8:	080072af 	.word	0x080072af
 8006ffc:	0800714f 	.word	0x0800714f

08007000 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007000:	b480      	push	{r7}
 8007002:	b095      	sub	sp, #84	; 0x54
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007010:	e853 3f00 	ldrex	r3, [r3]
 8007014:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007018:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800701c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	461a      	mov	r2, r3
 8007024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007026:	643b      	str	r3, [r7, #64]	; 0x40
 8007028:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800702c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800702e:	e841 2300 	strex	r3, r2, [r1]
 8007032:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1e6      	bne.n	8007008 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	3308      	adds	r3, #8
 8007040:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007042:	6a3b      	ldr	r3, [r7, #32]
 8007044:	e853 3f00 	ldrex	r3, [r3]
 8007048:	61fb      	str	r3, [r7, #28]
   return(result);
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007050:	f023 0301 	bic.w	r3, r3, #1
 8007054:	64bb      	str	r3, [r7, #72]	; 0x48
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	3308      	adds	r3, #8
 800705c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800705e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007060:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007062:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007064:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007066:	e841 2300 	strex	r3, r2, [r1]
 800706a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800706c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1e3      	bne.n	800703a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007076:	2b01      	cmp	r3, #1
 8007078:	d118      	bne.n	80070ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	e853 3f00 	ldrex	r3, [r3]
 8007086:	60bb      	str	r3, [r7, #8]
   return(result);
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	f023 0310 	bic.w	r3, r3, #16
 800708e:	647b      	str	r3, [r7, #68]	; 0x44
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	461a      	mov	r2, r3
 8007096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007098:	61bb      	str	r3, [r7, #24]
 800709a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709c:	6979      	ldr	r1, [r7, #20]
 800709e:	69ba      	ldr	r2, [r7, #24]
 80070a0:	e841 2300 	strex	r3, r2, [r1]
 80070a4:	613b      	str	r3, [r7, #16]
   return(result);
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1e6      	bne.n	800707a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2220      	movs	r2, #32
 80070b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	671a      	str	r2, [r3, #112]	; 0x70
}
 80070c0:	bf00      	nop
 80070c2:	3754      	adds	r7, #84	; 0x54
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	f7ff f996 	bl	800641c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070f0:	bf00      	nop
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b088      	sub	sp, #32
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	e853 3f00 	ldrex	r3, [r3]
 800710c:	60bb      	str	r3, [r7, #8]
   return(result);
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007114:	61fb      	str	r3, [r7, #28]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	461a      	mov	r2, r3
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	61bb      	str	r3, [r7, #24]
 8007120:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007122:	6979      	ldr	r1, [r7, #20]
 8007124:	69ba      	ldr	r2, [r7, #24]
 8007126:	e841 2300 	strex	r3, r2, [r1]
 800712a:	613b      	str	r3, [r7, #16]
   return(result);
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1e6      	bne.n	8007100 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2220      	movs	r2, #32
 8007136:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f7ff f961 	bl	8006408 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007146:	bf00      	nop
 8007148:	3720      	adds	r7, #32
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b096      	sub	sp, #88	; 0x58
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800715c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007166:	2b22      	cmp	r3, #34	; 0x22
 8007168:	f040 8095 	bne.w	8007296 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007172:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007176:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800717a:	b2d9      	uxtb	r1, r3
 800717c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007180:	b2da      	uxtb	r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007186:	400a      	ands	r2, r1
 8007188:	b2d2      	uxtb	r2, r2
 800718a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007190:	1c5a      	adds	r2, r3, #1
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800719c:	b29b      	uxth	r3, r3
 800719e:	3b01      	subs	r3, #1
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d178      	bne.n	80072a6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071bc:	e853 3f00 	ldrex	r3, [r3]
 80071c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071c8:	653b      	str	r3, [r7, #80]	; 0x50
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	461a      	mov	r2, r3
 80071d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071d2:	647b      	str	r3, [r7, #68]	; 0x44
 80071d4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071da:	e841 2300 	strex	r3, r2, [r1]
 80071de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1e6      	bne.n	80071b4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3308      	adds	r3, #8
 80071ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f0:	e853 3f00 	ldrex	r3, [r3]
 80071f4:	623b      	str	r3, [r7, #32]
   return(result);
 80071f6:	6a3b      	ldr	r3, [r7, #32]
 80071f8:	f023 0301 	bic.w	r3, r3, #1
 80071fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	3308      	adds	r3, #8
 8007204:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007206:	633a      	str	r2, [r7, #48]	; 0x30
 8007208:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800720c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800720e:	e841 2300 	strex	r3, r2, [r1]
 8007212:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1e5      	bne.n	80071e6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2220      	movs	r2, #32
 800721e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800722c:	2b01      	cmp	r3, #1
 800722e:	d12e      	bne.n	800728e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	e853 3f00 	ldrex	r3, [r3]
 8007242:	60fb      	str	r3, [r7, #12]
   return(result);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f023 0310 	bic.w	r3, r3, #16
 800724a:	64bb      	str	r3, [r7, #72]	; 0x48
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	461a      	mov	r2, r3
 8007252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007254:	61fb      	str	r3, [r7, #28]
 8007256:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007258:	69b9      	ldr	r1, [r7, #24]
 800725a:	69fa      	ldr	r2, [r7, #28]
 800725c:	e841 2300 	strex	r3, r2, [r1]
 8007260:	617b      	str	r3, [r7, #20]
   return(result);
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d1e6      	bne.n	8007236 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	69db      	ldr	r3, [r3, #28]
 800726e:	f003 0310 	and.w	r3, r3, #16
 8007272:	2b10      	cmp	r3, #16
 8007274:	d103      	bne.n	800727e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2210      	movs	r2, #16
 800727c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007284:	4619      	mov	r1, r3
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f7ff f8d2 	bl	8006430 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800728c:	e00b      	b.n	80072a6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7fa fa90 	bl	80017b4 <HAL_UART_RxCpltCallback>
}
 8007294:	e007      	b.n	80072a6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	699a      	ldr	r2, [r3, #24]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f042 0208 	orr.w	r2, r2, #8
 80072a4:	619a      	str	r2, [r3, #24]
}
 80072a6:	bf00      	nop
 80072a8:	3758      	adds	r7, #88	; 0x58
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b096      	sub	sp, #88	; 0x58
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80072bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072c6:	2b22      	cmp	r3, #34	; 0x22
 80072c8:	f040 8095 	bne.w	80073f6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072da:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80072dc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80072e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80072e4:	4013      	ands	r3, r2
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072ea:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072f0:	1c9a      	adds	r2, r3, #2
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	3b01      	subs	r3, #1
 8007300:	b29a      	uxth	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800730e:	b29b      	uxth	r3, r3
 8007310:	2b00      	cmp	r3, #0
 8007312:	d178      	bne.n	8007406 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800731c:	e853 3f00 	ldrex	r3, [r3]
 8007320:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007324:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007328:	64fb      	str	r3, [r7, #76]	; 0x4c
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	461a      	mov	r2, r3
 8007330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007332:	643b      	str	r3, [r7, #64]	; 0x40
 8007334:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007336:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007338:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800733a:	e841 2300 	strex	r3, r2, [r1]
 800733e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1e6      	bne.n	8007314 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	3308      	adds	r3, #8
 800734c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734e:	6a3b      	ldr	r3, [r7, #32]
 8007350:	e853 3f00 	ldrex	r3, [r3]
 8007354:	61fb      	str	r3, [r7, #28]
   return(result);
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	f023 0301 	bic.w	r3, r3, #1
 800735c:	64bb      	str	r3, [r7, #72]	; 0x48
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	3308      	adds	r3, #8
 8007364:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007366:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007368:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800736c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800736e:	e841 2300 	strex	r3, r2, [r1]
 8007372:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1e5      	bne.n	8007346 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2220      	movs	r2, #32
 800737e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800738c:	2b01      	cmp	r3, #1
 800738e:	d12e      	bne.n	80073ee <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	e853 3f00 	ldrex	r3, [r3]
 80073a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	f023 0310 	bic.w	r3, r3, #16
 80073aa:	647b      	str	r3, [r7, #68]	; 0x44
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	461a      	mov	r2, r3
 80073b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073b4:	61bb      	str	r3, [r7, #24]
 80073b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b8:	6979      	ldr	r1, [r7, #20]
 80073ba:	69ba      	ldr	r2, [r7, #24]
 80073bc:	e841 2300 	strex	r3, r2, [r1]
 80073c0:	613b      	str	r3, [r7, #16]
   return(result);
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1e6      	bne.n	8007396 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	69db      	ldr	r3, [r3, #28]
 80073ce:	f003 0310 	and.w	r3, r3, #16
 80073d2:	2b10      	cmp	r3, #16
 80073d4:	d103      	bne.n	80073de <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2210      	movs	r2, #16
 80073dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80073e4:	4619      	mov	r1, r3
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f7ff f822 	bl	8006430 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073ec:	e00b      	b.n	8007406 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f7fa f9e0 	bl	80017b4 <HAL_UART_RxCpltCallback>
}
 80073f4:	e007      	b.n	8007406 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	699a      	ldr	r2, [r3, #24]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f042 0208 	orr.w	r2, r2, #8
 8007404:	619a      	str	r2, [r3, #24]
}
 8007406:	bf00      	nop
 8007408:	3758      	adds	r7, #88	; 0x58
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
	...

08007410 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b0a6      	sub	sp, #152	; 0x98
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800741e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007446:	2b22      	cmp	r3, #34	; 0x22
 8007448:	f040 814f 	bne.w	80076ea <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007452:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007456:	e0f6      	b.n	8007646 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007462:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007466:	b2d9      	uxtb	r1, r3
 8007468:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800746c:	b2da      	uxtb	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007472:	400a      	ands	r2, r1
 8007474:	b2d2      	uxtb	r2, r2
 8007476:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800747c:	1c5a      	adds	r2, r3, #1
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007488:	b29b      	uxth	r3, r3
 800748a:	3b01      	subs	r3, #1
 800748c:	b29a      	uxth	r2, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	69db      	ldr	r3, [r3, #28]
 800749a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800749e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80074a2:	f003 0307 	and.w	r3, r3, #7
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d053      	beq.n	8007552 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80074aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80074ae:	f003 0301 	and.w	r3, r3, #1
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d011      	beq.n	80074da <UART_RxISR_8BIT_FIFOEN+0xca>
 80074b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00b      	beq.n	80074da <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2201      	movs	r2, #1
 80074c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074d0:	f043 0201 	orr.w	r2, r3, #1
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80074de:	f003 0302 	and.w	r3, r3, #2
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d011      	beq.n	800750a <UART_RxISR_8BIT_FIFOEN+0xfa>
 80074e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074ea:	f003 0301 	and.w	r3, r3, #1
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00b      	beq.n	800750a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2202      	movs	r2, #2
 80074f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007500:	f043 0204 	orr.w	r2, r3, #4
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800750a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800750e:	f003 0304 	and.w	r3, r3, #4
 8007512:	2b00      	cmp	r3, #0
 8007514:	d011      	beq.n	800753a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007516:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00b      	beq.n	800753a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2204      	movs	r2, #4
 8007528:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007530:	f043 0202 	orr.w	r2, r3, #2
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007540:	2b00      	cmp	r3, #0
 8007542:	d006      	beq.n	8007552 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f7fe ff69 	bl	800641c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007558:	b29b      	uxth	r3, r3
 800755a:	2b00      	cmp	r3, #0
 800755c:	d173      	bne.n	8007646 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007564:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007566:	e853 3f00 	ldrex	r3, [r3]
 800756a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800756c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800756e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007572:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	461a      	mov	r2, r3
 800757c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007580:	66bb      	str	r3, [r7, #104]	; 0x68
 8007582:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007584:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007586:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007588:	e841 2300 	strex	r3, r2, [r1]
 800758c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800758e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1e4      	bne.n	800755e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	3308      	adds	r3, #8
 800759a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800759e:	e853 3f00 	ldrex	r3, [r3]
 80075a2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80075a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075aa:	f023 0301 	bic.w	r3, r3, #1
 80075ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	3308      	adds	r3, #8
 80075b6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80075b8:	657a      	str	r2, [r7, #84]	; 0x54
 80075ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80075be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80075c0:	e841 2300 	strex	r3, r2, [r1]
 80075c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80075c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d1e3      	bne.n	8007594 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2220      	movs	r2, #32
 80075d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d12e      	bne.n	8007640 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075f0:	e853 3f00 	ldrex	r3, [r3]
 80075f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f8:	f023 0310 	bic.w	r3, r3, #16
 80075fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	461a      	mov	r2, r3
 8007604:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007606:	643b      	str	r3, [r7, #64]	; 0x40
 8007608:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800760c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800760e:	e841 2300 	strex	r3, r2, [r1]
 8007612:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1e6      	bne.n	80075e8 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	69db      	ldr	r3, [r3, #28]
 8007620:	f003 0310 	and.w	r3, r3, #16
 8007624:	2b10      	cmp	r3, #16
 8007626:	d103      	bne.n	8007630 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2210      	movs	r2, #16
 800762e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007636:	4619      	mov	r1, r3
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f7fe fef9 	bl	8006430 <HAL_UARTEx_RxEventCallback>
 800763e:	e002      	b.n	8007646 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f7fa f8b7 	bl	80017b4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007646:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800764a:	2b00      	cmp	r3, #0
 800764c:	d006      	beq.n	800765c <UART_RxISR_8BIT_FIFOEN+0x24c>
 800764e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007652:	f003 0320 	and.w	r3, r3, #32
 8007656:	2b00      	cmp	r3, #0
 8007658:	f47f aefe 	bne.w	8007458 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007662:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007666:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800766a:	2b00      	cmp	r3, #0
 800766c:	d045      	beq.n	80076fa <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007674:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007678:	429a      	cmp	r2, r3
 800767a:	d23e      	bcs.n	80076fa <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	3308      	adds	r3, #8
 8007682:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007684:	6a3b      	ldr	r3, [r7, #32]
 8007686:	e853 3f00 	ldrex	r3, [r3]
 800768a:	61fb      	str	r3, [r7, #28]
   return(result);
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007692:	673b      	str	r3, [r7, #112]	; 0x70
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	3308      	adds	r3, #8
 800769a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800769c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800769e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076a4:	e841 2300 	strex	r3, r2, [r1]
 80076a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1e5      	bne.n	800767c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a14      	ldr	r2, [pc, #80]	; (8007704 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80076b4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	e853 3f00 	ldrex	r3, [r3]
 80076c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	f043 0320 	orr.w	r3, r3, #32
 80076ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	461a      	mov	r2, r3
 80076d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076d4:	61bb      	str	r3, [r7, #24]
 80076d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d8:	6979      	ldr	r1, [r7, #20]
 80076da:	69ba      	ldr	r2, [r7, #24]
 80076dc:	e841 2300 	strex	r3, r2, [r1]
 80076e0:	613b      	str	r3, [r7, #16]
   return(result);
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1e6      	bne.n	80076b6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076e8:	e007      	b.n	80076fa <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	699a      	ldr	r2, [r3, #24]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f042 0208 	orr.w	r2, r2, #8
 80076f8:	619a      	str	r2, [r3, #24]
}
 80076fa:	bf00      	nop
 80076fc:	3798      	adds	r7, #152	; 0x98
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	0800714f 	.word	0x0800714f

08007708 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b0a8      	sub	sp, #160	; 0xa0
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007716:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	69db      	ldr	r3, [r3, #28]
 8007720:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800773e:	2b22      	cmp	r3, #34	; 0x22
 8007740:	f040 8153 	bne.w	80079ea <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800774a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800774e:	e0fa      	b.n	8007946 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007756:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800775e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8007762:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8007766:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800776a:	4013      	ands	r3, r2
 800776c:	b29a      	uxth	r2, r3
 800776e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007772:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007778:	1c9a      	adds	r2, r3, #2
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007784:	b29b      	uxth	r3, r3
 8007786:	3b01      	subs	r3, #1
 8007788:	b29a      	uxth	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	69db      	ldr	r3, [r3, #28]
 8007796:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800779a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800779e:	f003 0307 	and.w	r3, r3, #7
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d053      	beq.n	800784e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80077a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077aa:	f003 0301 	and.w	r3, r3, #1
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d011      	beq.n	80077d6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80077b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80077b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00b      	beq.n	80077d6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2201      	movs	r2, #1
 80077c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077cc:	f043 0201 	orr.w	r2, r3, #1
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077da:	f003 0302 	and.w	r3, r3, #2
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d011      	beq.n	8007806 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80077e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80077e6:	f003 0301 	and.w	r3, r3, #1
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00b      	beq.n	8007806 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2202      	movs	r2, #2
 80077f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077fc:	f043 0204 	orr.w	r2, r3, #4
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007806:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800780a:	f003 0304 	and.w	r3, r3, #4
 800780e:	2b00      	cmp	r3, #0
 8007810:	d011      	beq.n	8007836 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007812:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007816:	f003 0301 	and.w	r3, r3, #1
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00b      	beq.n	8007836 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2204      	movs	r2, #4
 8007824:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800782c:	f043 0202 	orr.w	r2, r3, #2
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800783c:	2b00      	cmp	r3, #0
 800783e:	d006      	beq.n	800784e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f7fe fdeb 	bl	800641c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007854:	b29b      	uxth	r3, r3
 8007856:	2b00      	cmp	r3, #0
 8007858:	d175      	bne.n	8007946 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007860:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007862:	e853 3f00 	ldrex	r3, [r3]
 8007866:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007868:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800786a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800786e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	461a      	mov	r2, r3
 8007878:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800787c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800787e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007880:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007882:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007884:	e841 2300 	strex	r3, r2, [r1]
 8007888:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800788a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1e4      	bne.n	800785a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3308      	adds	r3, #8
 8007896:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800789a:	e853 3f00 	ldrex	r3, [r3]
 800789e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80078a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078a6:	f023 0301 	bic.w	r3, r3, #1
 80078aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3308      	adds	r3, #8
 80078b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80078b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80078ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078c0:	e841 2300 	strex	r3, r2, [r1]
 80078c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80078c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d1e1      	bne.n	8007890 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2220      	movs	r2, #32
 80078d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d12e      	bne.n	8007940 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f0:	e853 3f00 	ldrex	r3, [r3]
 80078f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80078f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f8:	f023 0310 	bic.w	r3, r3, #16
 80078fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	461a      	mov	r2, r3
 8007904:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007906:	647b      	str	r3, [r7, #68]	; 0x44
 8007908:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800790c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800790e:	e841 2300 	strex	r3, r2, [r1]
 8007912:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1e6      	bne.n	80078e8 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	69db      	ldr	r3, [r3, #28]
 8007920:	f003 0310 	and.w	r3, r3, #16
 8007924:	2b10      	cmp	r3, #16
 8007926:	d103      	bne.n	8007930 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2210      	movs	r2, #16
 800792e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007936:	4619      	mov	r1, r3
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f7fe fd79 	bl	8006430 <HAL_UARTEx_RxEventCallback>
 800793e:	e002      	b.n	8007946 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f7f9 ff37 	bl	80017b4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007946:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800794a:	2b00      	cmp	r3, #0
 800794c:	d006      	beq.n	800795c <UART_RxISR_16BIT_FIFOEN+0x254>
 800794e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007952:	f003 0320 	and.w	r3, r3, #32
 8007956:	2b00      	cmp	r3, #0
 8007958:	f47f aefa 	bne.w	8007750 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007962:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007966:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800796a:	2b00      	cmp	r3, #0
 800796c:	d045      	beq.n	80079fa <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007974:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007978:	429a      	cmp	r2, r3
 800797a:	d23e      	bcs.n	80079fa <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	3308      	adds	r3, #8
 8007982:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007986:	e853 3f00 	ldrex	r3, [r3]
 800798a:	623b      	str	r3, [r7, #32]
   return(result);
 800798c:	6a3b      	ldr	r3, [r7, #32]
 800798e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007992:	677b      	str	r3, [r7, #116]	; 0x74
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	3308      	adds	r3, #8
 800799a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800799c:	633a      	str	r2, [r7, #48]	; 0x30
 800799e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079a4:	e841 2300 	strex	r3, r2, [r1]
 80079a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1e5      	bne.n	800797c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a14      	ldr	r2, [pc, #80]	; (8007a04 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80079b4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	e853 3f00 	ldrex	r3, [r3]
 80079c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f043 0320 	orr.w	r3, r3, #32
 80079ca:	673b      	str	r3, [r7, #112]	; 0x70
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	461a      	mov	r2, r3
 80079d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079d4:	61fb      	str	r3, [r7, #28]
 80079d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d8:	69b9      	ldr	r1, [r7, #24]
 80079da:	69fa      	ldr	r2, [r7, #28]
 80079dc:	e841 2300 	strex	r3, r2, [r1]
 80079e0:	617b      	str	r3, [r7, #20]
   return(result);
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1e6      	bne.n	80079b6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079e8:	e007      	b.n	80079fa <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	699a      	ldr	r2, [r3, #24]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f042 0208 	orr.w	r2, r2, #8
 80079f8:	619a      	str	r2, [r3, #24]
}
 80079fa:	bf00      	nop
 80079fc:	37a0      	adds	r7, #160	; 0xa0
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	080072af 	.word	0x080072af

08007a08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007a10:	bf00      	nop
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b085      	sub	sp, #20
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d101      	bne.n	8007a5a <HAL_UARTEx_DisableFifoMode+0x16>
 8007a56:	2302      	movs	r3, #2
 8007a58:	e027      	b.n	8007aaa <HAL_UARTEx_DisableFifoMode+0x66>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2224      	movs	r2, #36	; 0x24
 8007a66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f022 0201 	bic.w	r2, r2, #1
 8007a80:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007a88:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2220      	movs	r2, #32
 8007a9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3714      	adds	r7, #20
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr

08007ab6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b084      	sub	sp, #16
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
 8007abe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d101      	bne.n	8007ace <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007aca:	2302      	movs	r3, #2
 8007acc:	e02d      	b.n	8007b2a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2224      	movs	r2, #36	; 0x24
 8007ada:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f022 0201 	bic.w	r2, r2, #1
 8007af4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	683a      	ldr	r2, [r7, #0]
 8007b06:	430a      	orrs	r2, r1
 8007b08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 f850 	bl	8007bb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2220      	movs	r2, #32
 8007b1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b084      	sub	sp, #16
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
 8007b3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d101      	bne.n	8007b4a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b46:	2302      	movs	r3, #2
 8007b48:	e02d      	b.n	8007ba6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2224      	movs	r2, #36	; 0x24
 8007b56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f022 0201 	bic.w	r2, r2, #1
 8007b70:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	683a      	ldr	r2, [r7, #0]
 8007b82:	430a      	orrs	r2, r1
 8007b84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 f812 	bl	8007bb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68fa      	ldr	r2, [r7, #12]
 8007b92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2220      	movs	r2, #32
 8007b98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
	...

08007bb0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d108      	bne.n	8007bd2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007bd0:	e031      	b.n	8007c36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007bd2:	2308      	movs	r3, #8
 8007bd4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007bd6:	2308      	movs	r3, #8
 8007bd8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	0e5b      	lsrs	r3, r3, #25
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	f003 0307 	and.w	r3, r3, #7
 8007be8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	0f5b      	lsrs	r3, r3, #29
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	f003 0307 	and.w	r3, r3, #7
 8007bf8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bfa:	7bbb      	ldrb	r3, [r7, #14]
 8007bfc:	7b3a      	ldrb	r2, [r7, #12]
 8007bfe:	4911      	ldr	r1, [pc, #68]	; (8007c44 <UARTEx_SetNbDataToProcess+0x94>)
 8007c00:	5c8a      	ldrb	r2, [r1, r2]
 8007c02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c06:	7b3a      	ldrb	r2, [r7, #12]
 8007c08:	490f      	ldr	r1, [pc, #60]	; (8007c48 <UARTEx_SetNbDataToProcess+0x98>)
 8007c0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c18:	7bfb      	ldrb	r3, [r7, #15]
 8007c1a:	7b7a      	ldrb	r2, [r7, #13]
 8007c1c:	4909      	ldr	r1, [pc, #36]	; (8007c44 <UARTEx_SetNbDataToProcess+0x94>)
 8007c1e:	5c8a      	ldrb	r2, [r1, r2]
 8007c20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c24:	7b7a      	ldrb	r2, [r7, #13]
 8007c26:	4908      	ldr	r1, [pc, #32]	; (8007c48 <UARTEx_SetNbDataToProcess+0x98>)
 8007c28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007c36:	bf00      	nop
 8007c38:	3714      	adds	r7, #20
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	08009090 	.word	0x08009090
 8007c48:	08009098 	.word	0x08009098

08007c4c <std>:
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	b510      	push	{r4, lr}
 8007c50:	4604      	mov	r4, r0
 8007c52:	e9c0 3300 	strd	r3, r3, [r0]
 8007c56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c5a:	6083      	str	r3, [r0, #8]
 8007c5c:	8181      	strh	r1, [r0, #12]
 8007c5e:	6643      	str	r3, [r0, #100]	; 0x64
 8007c60:	81c2      	strh	r2, [r0, #14]
 8007c62:	6183      	str	r3, [r0, #24]
 8007c64:	4619      	mov	r1, r3
 8007c66:	2208      	movs	r2, #8
 8007c68:	305c      	adds	r0, #92	; 0x5c
 8007c6a:	f000 f916 	bl	8007e9a <memset>
 8007c6e:	4b05      	ldr	r3, [pc, #20]	; (8007c84 <std+0x38>)
 8007c70:	6263      	str	r3, [r4, #36]	; 0x24
 8007c72:	4b05      	ldr	r3, [pc, #20]	; (8007c88 <std+0x3c>)
 8007c74:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c76:	4b05      	ldr	r3, [pc, #20]	; (8007c8c <std+0x40>)
 8007c78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c7a:	4b05      	ldr	r3, [pc, #20]	; (8007c90 <std+0x44>)
 8007c7c:	6224      	str	r4, [r4, #32]
 8007c7e:	6323      	str	r3, [r4, #48]	; 0x30
 8007c80:	bd10      	pop	{r4, pc}
 8007c82:	bf00      	nop
 8007c84:	08007e15 	.word	0x08007e15
 8007c88:	08007e37 	.word	0x08007e37
 8007c8c:	08007e6f 	.word	0x08007e6f
 8007c90:	08007e93 	.word	0x08007e93

08007c94 <stdio_exit_handler>:
 8007c94:	4a02      	ldr	r2, [pc, #8]	; (8007ca0 <stdio_exit_handler+0xc>)
 8007c96:	4903      	ldr	r1, [pc, #12]	; (8007ca4 <stdio_exit_handler+0x10>)
 8007c98:	4803      	ldr	r0, [pc, #12]	; (8007ca8 <stdio_exit_handler+0x14>)
 8007c9a:	f000 b869 	b.w	8007d70 <_fwalk_sglue>
 8007c9e:	bf00      	nop
 8007ca0:	200000c8 	.word	0x200000c8
 8007ca4:	08008961 	.word	0x08008961
 8007ca8:	200000d4 	.word	0x200000d4

08007cac <cleanup_stdio>:
 8007cac:	6841      	ldr	r1, [r0, #4]
 8007cae:	4b0c      	ldr	r3, [pc, #48]	; (8007ce0 <cleanup_stdio+0x34>)
 8007cb0:	4299      	cmp	r1, r3
 8007cb2:	b510      	push	{r4, lr}
 8007cb4:	4604      	mov	r4, r0
 8007cb6:	d001      	beq.n	8007cbc <cleanup_stdio+0x10>
 8007cb8:	f000 fe52 	bl	8008960 <_fflush_r>
 8007cbc:	68a1      	ldr	r1, [r4, #8]
 8007cbe:	4b09      	ldr	r3, [pc, #36]	; (8007ce4 <cleanup_stdio+0x38>)
 8007cc0:	4299      	cmp	r1, r3
 8007cc2:	d002      	beq.n	8007cca <cleanup_stdio+0x1e>
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	f000 fe4b 	bl	8008960 <_fflush_r>
 8007cca:	68e1      	ldr	r1, [r4, #12]
 8007ccc:	4b06      	ldr	r3, [pc, #24]	; (8007ce8 <cleanup_stdio+0x3c>)
 8007cce:	4299      	cmp	r1, r3
 8007cd0:	d004      	beq.n	8007cdc <cleanup_stdio+0x30>
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cd8:	f000 be42 	b.w	8008960 <_fflush_r>
 8007cdc:	bd10      	pop	{r4, pc}
 8007cde:	bf00      	nop
 8007ce0:	200004e4 	.word	0x200004e4
 8007ce4:	2000054c 	.word	0x2000054c
 8007ce8:	200005b4 	.word	0x200005b4

08007cec <global_stdio_init.part.0>:
 8007cec:	b510      	push	{r4, lr}
 8007cee:	4b0b      	ldr	r3, [pc, #44]	; (8007d1c <global_stdio_init.part.0+0x30>)
 8007cf0:	4c0b      	ldr	r4, [pc, #44]	; (8007d20 <global_stdio_init.part.0+0x34>)
 8007cf2:	4a0c      	ldr	r2, [pc, #48]	; (8007d24 <global_stdio_init.part.0+0x38>)
 8007cf4:	601a      	str	r2, [r3, #0]
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	2104      	movs	r1, #4
 8007cfc:	f7ff ffa6 	bl	8007c4c <std>
 8007d00:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007d04:	2201      	movs	r2, #1
 8007d06:	2109      	movs	r1, #9
 8007d08:	f7ff ffa0 	bl	8007c4c <std>
 8007d0c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007d10:	2202      	movs	r2, #2
 8007d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d16:	2112      	movs	r1, #18
 8007d18:	f7ff bf98 	b.w	8007c4c <std>
 8007d1c:	2000061c 	.word	0x2000061c
 8007d20:	200004e4 	.word	0x200004e4
 8007d24:	08007c95 	.word	0x08007c95

08007d28 <__sfp_lock_acquire>:
 8007d28:	4801      	ldr	r0, [pc, #4]	; (8007d30 <__sfp_lock_acquire+0x8>)
 8007d2a:	f000 b98b 	b.w	8008044 <__retarget_lock_acquire_recursive>
 8007d2e:	bf00      	nop
 8007d30:	20000625 	.word	0x20000625

08007d34 <__sfp_lock_release>:
 8007d34:	4801      	ldr	r0, [pc, #4]	; (8007d3c <__sfp_lock_release+0x8>)
 8007d36:	f000 b986 	b.w	8008046 <__retarget_lock_release_recursive>
 8007d3a:	bf00      	nop
 8007d3c:	20000625 	.word	0x20000625

08007d40 <__sinit>:
 8007d40:	b510      	push	{r4, lr}
 8007d42:	4604      	mov	r4, r0
 8007d44:	f7ff fff0 	bl	8007d28 <__sfp_lock_acquire>
 8007d48:	6a23      	ldr	r3, [r4, #32]
 8007d4a:	b11b      	cbz	r3, 8007d54 <__sinit+0x14>
 8007d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d50:	f7ff bff0 	b.w	8007d34 <__sfp_lock_release>
 8007d54:	4b04      	ldr	r3, [pc, #16]	; (8007d68 <__sinit+0x28>)
 8007d56:	6223      	str	r3, [r4, #32]
 8007d58:	4b04      	ldr	r3, [pc, #16]	; (8007d6c <__sinit+0x2c>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d1f5      	bne.n	8007d4c <__sinit+0xc>
 8007d60:	f7ff ffc4 	bl	8007cec <global_stdio_init.part.0>
 8007d64:	e7f2      	b.n	8007d4c <__sinit+0xc>
 8007d66:	bf00      	nop
 8007d68:	08007cad 	.word	0x08007cad
 8007d6c:	2000061c 	.word	0x2000061c

08007d70 <_fwalk_sglue>:
 8007d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d74:	4607      	mov	r7, r0
 8007d76:	4688      	mov	r8, r1
 8007d78:	4614      	mov	r4, r2
 8007d7a:	2600      	movs	r6, #0
 8007d7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d80:	f1b9 0901 	subs.w	r9, r9, #1
 8007d84:	d505      	bpl.n	8007d92 <_fwalk_sglue+0x22>
 8007d86:	6824      	ldr	r4, [r4, #0]
 8007d88:	2c00      	cmp	r4, #0
 8007d8a:	d1f7      	bne.n	8007d7c <_fwalk_sglue+0xc>
 8007d8c:	4630      	mov	r0, r6
 8007d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d92:	89ab      	ldrh	r3, [r5, #12]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d907      	bls.n	8007da8 <_fwalk_sglue+0x38>
 8007d98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	d003      	beq.n	8007da8 <_fwalk_sglue+0x38>
 8007da0:	4629      	mov	r1, r5
 8007da2:	4638      	mov	r0, r7
 8007da4:	47c0      	blx	r8
 8007da6:	4306      	orrs	r6, r0
 8007da8:	3568      	adds	r5, #104	; 0x68
 8007daa:	e7e9      	b.n	8007d80 <_fwalk_sglue+0x10>

08007dac <sniprintf>:
 8007dac:	b40c      	push	{r2, r3}
 8007dae:	b530      	push	{r4, r5, lr}
 8007db0:	4b17      	ldr	r3, [pc, #92]	; (8007e10 <sniprintf+0x64>)
 8007db2:	1e0c      	subs	r4, r1, #0
 8007db4:	681d      	ldr	r5, [r3, #0]
 8007db6:	b09d      	sub	sp, #116	; 0x74
 8007db8:	da08      	bge.n	8007dcc <sniprintf+0x20>
 8007dba:	238b      	movs	r3, #139	; 0x8b
 8007dbc:	602b      	str	r3, [r5, #0]
 8007dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc2:	b01d      	add	sp, #116	; 0x74
 8007dc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007dc8:	b002      	add	sp, #8
 8007dca:	4770      	bx	lr
 8007dcc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007dd0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007dd4:	bf14      	ite	ne
 8007dd6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007dda:	4623      	moveq	r3, r4
 8007ddc:	9304      	str	r3, [sp, #16]
 8007dde:	9307      	str	r3, [sp, #28]
 8007de0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007de4:	9002      	str	r0, [sp, #8]
 8007de6:	9006      	str	r0, [sp, #24]
 8007de8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007dec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007dee:	ab21      	add	r3, sp, #132	; 0x84
 8007df0:	a902      	add	r1, sp, #8
 8007df2:	4628      	mov	r0, r5
 8007df4:	9301      	str	r3, [sp, #4]
 8007df6:	f000 fa9f 	bl	8008338 <_svfiprintf_r>
 8007dfa:	1c43      	adds	r3, r0, #1
 8007dfc:	bfbc      	itt	lt
 8007dfe:	238b      	movlt	r3, #139	; 0x8b
 8007e00:	602b      	strlt	r3, [r5, #0]
 8007e02:	2c00      	cmp	r4, #0
 8007e04:	d0dd      	beq.n	8007dc2 <sniprintf+0x16>
 8007e06:	9b02      	ldr	r3, [sp, #8]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	701a      	strb	r2, [r3, #0]
 8007e0c:	e7d9      	b.n	8007dc2 <sniprintf+0x16>
 8007e0e:	bf00      	nop
 8007e10:	20000120 	.word	0x20000120

08007e14 <__sread>:
 8007e14:	b510      	push	{r4, lr}
 8007e16:	460c      	mov	r4, r1
 8007e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e1c:	f000 f8c4 	bl	8007fa8 <_read_r>
 8007e20:	2800      	cmp	r0, #0
 8007e22:	bfab      	itete	ge
 8007e24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e26:	89a3      	ldrhlt	r3, [r4, #12]
 8007e28:	181b      	addge	r3, r3, r0
 8007e2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e2e:	bfac      	ite	ge
 8007e30:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e32:	81a3      	strhlt	r3, [r4, #12]
 8007e34:	bd10      	pop	{r4, pc}

08007e36 <__swrite>:
 8007e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e3a:	461f      	mov	r7, r3
 8007e3c:	898b      	ldrh	r3, [r1, #12]
 8007e3e:	05db      	lsls	r3, r3, #23
 8007e40:	4605      	mov	r5, r0
 8007e42:	460c      	mov	r4, r1
 8007e44:	4616      	mov	r6, r2
 8007e46:	d505      	bpl.n	8007e54 <__swrite+0x1e>
 8007e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e4c:	2302      	movs	r3, #2
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f000 f898 	bl	8007f84 <_lseek_r>
 8007e54:	89a3      	ldrh	r3, [r4, #12]
 8007e56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e5e:	81a3      	strh	r3, [r4, #12]
 8007e60:	4632      	mov	r2, r6
 8007e62:	463b      	mov	r3, r7
 8007e64:	4628      	mov	r0, r5
 8007e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e6a:	f000 b8af 	b.w	8007fcc <_write_r>

08007e6e <__sseek>:
 8007e6e:	b510      	push	{r4, lr}
 8007e70:	460c      	mov	r4, r1
 8007e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e76:	f000 f885 	bl	8007f84 <_lseek_r>
 8007e7a:	1c43      	adds	r3, r0, #1
 8007e7c:	89a3      	ldrh	r3, [r4, #12]
 8007e7e:	bf15      	itete	ne
 8007e80:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e8a:	81a3      	strheq	r3, [r4, #12]
 8007e8c:	bf18      	it	ne
 8007e8e:	81a3      	strhne	r3, [r4, #12]
 8007e90:	bd10      	pop	{r4, pc}

08007e92 <__sclose>:
 8007e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e96:	f000 b865 	b.w	8007f64 <_close_r>

08007e9a <memset>:
 8007e9a:	4402      	add	r2, r0
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d100      	bne.n	8007ea4 <memset+0xa>
 8007ea2:	4770      	bx	lr
 8007ea4:	f803 1b01 	strb.w	r1, [r3], #1
 8007ea8:	e7f9      	b.n	8007e9e <memset+0x4>
	...

08007eac <strtok>:
 8007eac:	4b16      	ldr	r3, [pc, #88]	; (8007f08 <strtok+0x5c>)
 8007eae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007eb0:	681e      	ldr	r6, [r3, #0]
 8007eb2:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8007eb4:	4605      	mov	r5, r0
 8007eb6:	b9fc      	cbnz	r4, 8007ef8 <strtok+0x4c>
 8007eb8:	2050      	movs	r0, #80	; 0x50
 8007eba:	9101      	str	r1, [sp, #4]
 8007ebc:	f000 f92e 	bl	800811c <malloc>
 8007ec0:	9901      	ldr	r1, [sp, #4]
 8007ec2:	6470      	str	r0, [r6, #68]	; 0x44
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	b920      	cbnz	r0, 8007ed2 <strtok+0x26>
 8007ec8:	4b10      	ldr	r3, [pc, #64]	; (8007f0c <strtok+0x60>)
 8007eca:	4811      	ldr	r0, [pc, #68]	; (8007f10 <strtok+0x64>)
 8007ecc:	215b      	movs	r1, #91	; 0x5b
 8007ece:	f000 f8bb 	bl	8008048 <__assert_func>
 8007ed2:	e9c0 4400 	strd	r4, r4, [r0]
 8007ed6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007eda:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007ede:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007ee2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007ee6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007eea:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007eee:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007ef2:	6184      	str	r4, [r0, #24]
 8007ef4:	7704      	strb	r4, [r0, #28]
 8007ef6:	6244      	str	r4, [r0, #36]	; 0x24
 8007ef8:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8007efa:	2301      	movs	r3, #1
 8007efc:	4628      	mov	r0, r5
 8007efe:	b002      	add	sp, #8
 8007f00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007f04:	f000 b806 	b.w	8007f14 <__strtok_r>
 8007f08:	20000120 	.word	0x20000120
 8007f0c:	080090a0 	.word	0x080090a0
 8007f10:	080090b7 	.word	0x080090b7

08007f14 <__strtok_r>:
 8007f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f16:	b908      	cbnz	r0, 8007f1c <__strtok_r+0x8>
 8007f18:	6810      	ldr	r0, [r2, #0]
 8007f1a:	b188      	cbz	r0, 8007f40 <__strtok_r+0x2c>
 8007f1c:	4604      	mov	r4, r0
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007f24:	460f      	mov	r7, r1
 8007f26:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007f2a:	b91e      	cbnz	r6, 8007f34 <__strtok_r+0x20>
 8007f2c:	b965      	cbnz	r5, 8007f48 <__strtok_r+0x34>
 8007f2e:	6015      	str	r5, [r2, #0]
 8007f30:	4628      	mov	r0, r5
 8007f32:	e005      	b.n	8007f40 <__strtok_r+0x2c>
 8007f34:	42b5      	cmp	r5, r6
 8007f36:	d1f6      	bne.n	8007f26 <__strtok_r+0x12>
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1f0      	bne.n	8007f1e <__strtok_r+0xa>
 8007f3c:	6014      	str	r4, [r2, #0]
 8007f3e:	7003      	strb	r3, [r0, #0]
 8007f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f42:	461c      	mov	r4, r3
 8007f44:	e00c      	b.n	8007f60 <__strtok_r+0x4c>
 8007f46:	b915      	cbnz	r5, 8007f4e <__strtok_r+0x3a>
 8007f48:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007f4c:	460e      	mov	r6, r1
 8007f4e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007f52:	42ab      	cmp	r3, r5
 8007f54:	d1f7      	bne.n	8007f46 <__strtok_r+0x32>
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d0f3      	beq.n	8007f42 <__strtok_r+0x2e>
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007f60:	6014      	str	r4, [r2, #0]
 8007f62:	e7ed      	b.n	8007f40 <__strtok_r+0x2c>

08007f64 <_close_r>:
 8007f64:	b538      	push	{r3, r4, r5, lr}
 8007f66:	4d06      	ldr	r5, [pc, #24]	; (8007f80 <_close_r+0x1c>)
 8007f68:	2300      	movs	r3, #0
 8007f6a:	4604      	mov	r4, r0
 8007f6c:	4608      	mov	r0, r1
 8007f6e:	602b      	str	r3, [r5, #0]
 8007f70:	f7f8 ff6f 	bl	8000e52 <_close>
 8007f74:	1c43      	adds	r3, r0, #1
 8007f76:	d102      	bne.n	8007f7e <_close_r+0x1a>
 8007f78:	682b      	ldr	r3, [r5, #0]
 8007f7a:	b103      	cbz	r3, 8007f7e <_close_r+0x1a>
 8007f7c:	6023      	str	r3, [r4, #0]
 8007f7e:	bd38      	pop	{r3, r4, r5, pc}
 8007f80:	20000620 	.word	0x20000620

08007f84 <_lseek_r>:
 8007f84:	b538      	push	{r3, r4, r5, lr}
 8007f86:	4d07      	ldr	r5, [pc, #28]	; (8007fa4 <_lseek_r+0x20>)
 8007f88:	4604      	mov	r4, r0
 8007f8a:	4608      	mov	r0, r1
 8007f8c:	4611      	mov	r1, r2
 8007f8e:	2200      	movs	r2, #0
 8007f90:	602a      	str	r2, [r5, #0]
 8007f92:	461a      	mov	r2, r3
 8007f94:	f7f8 ff84 	bl	8000ea0 <_lseek>
 8007f98:	1c43      	adds	r3, r0, #1
 8007f9a:	d102      	bne.n	8007fa2 <_lseek_r+0x1e>
 8007f9c:	682b      	ldr	r3, [r5, #0]
 8007f9e:	b103      	cbz	r3, 8007fa2 <_lseek_r+0x1e>
 8007fa0:	6023      	str	r3, [r4, #0]
 8007fa2:	bd38      	pop	{r3, r4, r5, pc}
 8007fa4:	20000620 	.word	0x20000620

08007fa8 <_read_r>:
 8007fa8:	b538      	push	{r3, r4, r5, lr}
 8007faa:	4d07      	ldr	r5, [pc, #28]	; (8007fc8 <_read_r+0x20>)
 8007fac:	4604      	mov	r4, r0
 8007fae:	4608      	mov	r0, r1
 8007fb0:	4611      	mov	r1, r2
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	602a      	str	r2, [r5, #0]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	f7f8 ff12 	bl	8000de0 <_read>
 8007fbc:	1c43      	adds	r3, r0, #1
 8007fbe:	d102      	bne.n	8007fc6 <_read_r+0x1e>
 8007fc0:	682b      	ldr	r3, [r5, #0]
 8007fc2:	b103      	cbz	r3, 8007fc6 <_read_r+0x1e>
 8007fc4:	6023      	str	r3, [r4, #0]
 8007fc6:	bd38      	pop	{r3, r4, r5, pc}
 8007fc8:	20000620 	.word	0x20000620

08007fcc <_write_r>:
 8007fcc:	b538      	push	{r3, r4, r5, lr}
 8007fce:	4d07      	ldr	r5, [pc, #28]	; (8007fec <_write_r+0x20>)
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	4608      	mov	r0, r1
 8007fd4:	4611      	mov	r1, r2
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	602a      	str	r2, [r5, #0]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	f7f8 ff1d 	bl	8000e1a <_write>
 8007fe0:	1c43      	adds	r3, r0, #1
 8007fe2:	d102      	bne.n	8007fea <_write_r+0x1e>
 8007fe4:	682b      	ldr	r3, [r5, #0]
 8007fe6:	b103      	cbz	r3, 8007fea <_write_r+0x1e>
 8007fe8:	6023      	str	r3, [r4, #0]
 8007fea:	bd38      	pop	{r3, r4, r5, pc}
 8007fec:	20000620 	.word	0x20000620

08007ff0 <__errno>:
 8007ff0:	4b01      	ldr	r3, [pc, #4]	; (8007ff8 <__errno+0x8>)
 8007ff2:	6818      	ldr	r0, [r3, #0]
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop
 8007ff8:	20000120 	.word	0x20000120

08007ffc <__libc_init_array>:
 8007ffc:	b570      	push	{r4, r5, r6, lr}
 8007ffe:	4d0d      	ldr	r5, [pc, #52]	; (8008034 <__libc_init_array+0x38>)
 8008000:	4c0d      	ldr	r4, [pc, #52]	; (8008038 <__libc_init_array+0x3c>)
 8008002:	1b64      	subs	r4, r4, r5
 8008004:	10a4      	asrs	r4, r4, #2
 8008006:	2600      	movs	r6, #0
 8008008:	42a6      	cmp	r6, r4
 800800a:	d109      	bne.n	8008020 <__libc_init_array+0x24>
 800800c:	4d0b      	ldr	r5, [pc, #44]	; (800803c <__libc_init_array+0x40>)
 800800e:	4c0c      	ldr	r4, [pc, #48]	; (8008040 <__libc_init_array+0x44>)
 8008010:	f000 fff8 	bl	8009004 <_init>
 8008014:	1b64      	subs	r4, r4, r5
 8008016:	10a4      	asrs	r4, r4, #2
 8008018:	2600      	movs	r6, #0
 800801a:	42a6      	cmp	r6, r4
 800801c:	d105      	bne.n	800802a <__libc_init_array+0x2e>
 800801e:	bd70      	pop	{r4, r5, r6, pc}
 8008020:	f855 3b04 	ldr.w	r3, [r5], #4
 8008024:	4798      	blx	r3
 8008026:	3601      	adds	r6, #1
 8008028:	e7ee      	b.n	8008008 <__libc_init_array+0xc>
 800802a:	f855 3b04 	ldr.w	r3, [r5], #4
 800802e:	4798      	blx	r3
 8008030:	3601      	adds	r6, #1
 8008032:	e7f2      	b.n	800801a <__libc_init_array+0x1e>
 8008034:	08009188 	.word	0x08009188
 8008038:	08009188 	.word	0x08009188
 800803c:	08009188 	.word	0x08009188
 8008040:	0800918c 	.word	0x0800918c

08008044 <__retarget_lock_acquire_recursive>:
 8008044:	4770      	bx	lr

08008046 <__retarget_lock_release_recursive>:
 8008046:	4770      	bx	lr

08008048 <__assert_func>:
 8008048:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800804a:	4614      	mov	r4, r2
 800804c:	461a      	mov	r2, r3
 800804e:	4b09      	ldr	r3, [pc, #36]	; (8008074 <__assert_func+0x2c>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4605      	mov	r5, r0
 8008054:	68d8      	ldr	r0, [r3, #12]
 8008056:	b14c      	cbz	r4, 800806c <__assert_func+0x24>
 8008058:	4b07      	ldr	r3, [pc, #28]	; (8008078 <__assert_func+0x30>)
 800805a:	9100      	str	r1, [sp, #0]
 800805c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008060:	4906      	ldr	r1, [pc, #24]	; (800807c <__assert_func+0x34>)
 8008062:	462b      	mov	r3, r5
 8008064:	f000 fca4 	bl	80089b0 <fiprintf>
 8008068:	f000 fcec 	bl	8008a44 <abort>
 800806c:	4b04      	ldr	r3, [pc, #16]	; (8008080 <__assert_func+0x38>)
 800806e:	461c      	mov	r4, r3
 8008070:	e7f3      	b.n	800805a <__assert_func+0x12>
 8008072:	bf00      	nop
 8008074:	20000120 	.word	0x20000120
 8008078:	08009111 	.word	0x08009111
 800807c:	0800911e 	.word	0x0800911e
 8008080:	0800914c 	.word	0x0800914c

08008084 <_free_r>:
 8008084:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008086:	2900      	cmp	r1, #0
 8008088:	d044      	beq.n	8008114 <_free_r+0x90>
 800808a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800808e:	9001      	str	r0, [sp, #4]
 8008090:	2b00      	cmp	r3, #0
 8008092:	f1a1 0404 	sub.w	r4, r1, #4
 8008096:	bfb8      	it	lt
 8008098:	18e4      	addlt	r4, r4, r3
 800809a:	f000 f8e7 	bl	800826c <__malloc_lock>
 800809e:	4a1e      	ldr	r2, [pc, #120]	; (8008118 <_free_r+0x94>)
 80080a0:	9801      	ldr	r0, [sp, #4]
 80080a2:	6813      	ldr	r3, [r2, #0]
 80080a4:	b933      	cbnz	r3, 80080b4 <_free_r+0x30>
 80080a6:	6063      	str	r3, [r4, #4]
 80080a8:	6014      	str	r4, [r2, #0]
 80080aa:	b003      	add	sp, #12
 80080ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080b0:	f000 b8e2 	b.w	8008278 <__malloc_unlock>
 80080b4:	42a3      	cmp	r3, r4
 80080b6:	d908      	bls.n	80080ca <_free_r+0x46>
 80080b8:	6825      	ldr	r5, [r4, #0]
 80080ba:	1961      	adds	r1, r4, r5
 80080bc:	428b      	cmp	r3, r1
 80080be:	bf01      	itttt	eq
 80080c0:	6819      	ldreq	r1, [r3, #0]
 80080c2:	685b      	ldreq	r3, [r3, #4]
 80080c4:	1949      	addeq	r1, r1, r5
 80080c6:	6021      	streq	r1, [r4, #0]
 80080c8:	e7ed      	b.n	80080a6 <_free_r+0x22>
 80080ca:	461a      	mov	r2, r3
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	b10b      	cbz	r3, 80080d4 <_free_r+0x50>
 80080d0:	42a3      	cmp	r3, r4
 80080d2:	d9fa      	bls.n	80080ca <_free_r+0x46>
 80080d4:	6811      	ldr	r1, [r2, #0]
 80080d6:	1855      	adds	r5, r2, r1
 80080d8:	42a5      	cmp	r5, r4
 80080da:	d10b      	bne.n	80080f4 <_free_r+0x70>
 80080dc:	6824      	ldr	r4, [r4, #0]
 80080de:	4421      	add	r1, r4
 80080e0:	1854      	adds	r4, r2, r1
 80080e2:	42a3      	cmp	r3, r4
 80080e4:	6011      	str	r1, [r2, #0]
 80080e6:	d1e0      	bne.n	80080aa <_free_r+0x26>
 80080e8:	681c      	ldr	r4, [r3, #0]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	6053      	str	r3, [r2, #4]
 80080ee:	440c      	add	r4, r1
 80080f0:	6014      	str	r4, [r2, #0]
 80080f2:	e7da      	b.n	80080aa <_free_r+0x26>
 80080f4:	d902      	bls.n	80080fc <_free_r+0x78>
 80080f6:	230c      	movs	r3, #12
 80080f8:	6003      	str	r3, [r0, #0]
 80080fa:	e7d6      	b.n	80080aa <_free_r+0x26>
 80080fc:	6825      	ldr	r5, [r4, #0]
 80080fe:	1961      	adds	r1, r4, r5
 8008100:	428b      	cmp	r3, r1
 8008102:	bf04      	itt	eq
 8008104:	6819      	ldreq	r1, [r3, #0]
 8008106:	685b      	ldreq	r3, [r3, #4]
 8008108:	6063      	str	r3, [r4, #4]
 800810a:	bf04      	itt	eq
 800810c:	1949      	addeq	r1, r1, r5
 800810e:	6021      	streq	r1, [r4, #0]
 8008110:	6054      	str	r4, [r2, #4]
 8008112:	e7ca      	b.n	80080aa <_free_r+0x26>
 8008114:	b003      	add	sp, #12
 8008116:	bd30      	pop	{r4, r5, pc}
 8008118:	20000628 	.word	0x20000628

0800811c <malloc>:
 800811c:	4b02      	ldr	r3, [pc, #8]	; (8008128 <malloc+0xc>)
 800811e:	4601      	mov	r1, r0
 8008120:	6818      	ldr	r0, [r3, #0]
 8008122:	f000 b823 	b.w	800816c <_malloc_r>
 8008126:	bf00      	nop
 8008128:	20000120 	.word	0x20000120

0800812c <sbrk_aligned>:
 800812c:	b570      	push	{r4, r5, r6, lr}
 800812e:	4e0e      	ldr	r6, [pc, #56]	; (8008168 <sbrk_aligned+0x3c>)
 8008130:	460c      	mov	r4, r1
 8008132:	6831      	ldr	r1, [r6, #0]
 8008134:	4605      	mov	r5, r0
 8008136:	b911      	cbnz	r1, 800813e <sbrk_aligned+0x12>
 8008138:	f000 fc66 	bl	8008a08 <_sbrk_r>
 800813c:	6030      	str	r0, [r6, #0]
 800813e:	4621      	mov	r1, r4
 8008140:	4628      	mov	r0, r5
 8008142:	f000 fc61 	bl	8008a08 <_sbrk_r>
 8008146:	1c43      	adds	r3, r0, #1
 8008148:	d00a      	beq.n	8008160 <sbrk_aligned+0x34>
 800814a:	1cc4      	adds	r4, r0, #3
 800814c:	f024 0403 	bic.w	r4, r4, #3
 8008150:	42a0      	cmp	r0, r4
 8008152:	d007      	beq.n	8008164 <sbrk_aligned+0x38>
 8008154:	1a21      	subs	r1, r4, r0
 8008156:	4628      	mov	r0, r5
 8008158:	f000 fc56 	bl	8008a08 <_sbrk_r>
 800815c:	3001      	adds	r0, #1
 800815e:	d101      	bne.n	8008164 <sbrk_aligned+0x38>
 8008160:	f04f 34ff 	mov.w	r4, #4294967295
 8008164:	4620      	mov	r0, r4
 8008166:	bd70      	pop	{r4, r5, r6, pc}
 8008168:	2000062c 	.word	0x2000062c

0800816c <_malloc_r>:
 800816c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008170:	1ccd      	adds	r5, r1, #3
 8008172:	f025 0503 	bic.w	r5, r5, #3
 8008176:	3508      	adds	r5, #8
 8008178:	2d0c      	cmp	r5, #12
 800817a:	bf38      	it	cc
 800817c:	250c      	movcc	r5, #12
 800817e:	2d00      	cmp	r5, #0
 8008180:	4607      	mov	r7, r0
 8008182:	db01      	blt.n	8008188 <_malloc_r+0x1c>
 8008184:	42a9      	cmp	r1, r5
 8008186:	d905      	bls.n	8008194 <_malloc_r+0x28>
 8008188:	230c      	movs	r3, #12
 800818a:	603b      	str	r3, [r7, #0]
 800818c:	2600      	movs	r6, #0
 800818e:	4630      	mov	r0, r6
 8008190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008194:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008268 <_malloc_r+0xfc>
 8008198:	f000 f868 	bl	800826c <__malloc_lock>
 800819c:	f8d8 3000 	ldr.w	r3, [r8]
 80081a0:	461c      	mov	r4, r3
 80081a2:	bb5c      	cbnz	r4, 80081fc <_malloc_r+0x90>
 80081a4:	4629      	mov	r1, r5
 80081a6:	4638      	mov	r0, r7
 80081a8:	f7ff ffc0 	bl	800812c <sbrk_aligned>
 80081ac:	1c43      	adds	r3, r0, #1
 80081ae:	4604      	mov	r4, r0
 80081b0:	d155      	bne.n	800825e <_malloc_r+0xf2>
 80081b2:	f8d8 4000 	ldr.w	r4, [r8]
 80081b6:	4626      	mov	r6, r4
 80081b8:	2e00      	cmp	r6, #0
 80081ba:	d145      	bne.n	8008248 <_malloc_r+0xdc>
 80081bc:	2c00      	cmp	r4, #0
 80081be:	d048      	beq.n	8008252 <_malloc_r+0xe6>
 80081c0:	6823      	ldr	r3, [r4, #0]
 80081c2:	4631      	mov	r1, r6
 80081c4:	4638      	mov	r0, r7
 80081c6:	eb04 0903 	add.w	r9, r4, r3
 80081ca:	f000 fc1d 	bl	8008a08 <_sbrk_r>
 80081ce:	4581      	cmp	r9, r0
 80081d0:	d13f      	bne.n	8008252 <_malloc_r+0xe6>
 80081d2:	6821      	ldr	r1, [r4, #0]
 80081d4:	1a6d      	subs	r5, r5, r1
 80081d6:	4629      	mov	r1, r5
 80081d8:	4638      	mov	r0, r7
 80081da:	f7ff ffa7 	bl	800812c <sbrk_aligned>
 80081de:	3001      	adds	r0, #1
 80081e0:	d037      	beq.n	8008252 <_malloc_r+0xe6>
 80081e2:	6823      	ldr	r3, [r4, #0]
 80081e4:	442b      	add	r3, r5
 80081e6:	6023      	str	r3, [r4, #0]
 80081e8:	f8d8 3000 	ldr.w	r3, [r8]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d038      	beq.n	8008262 <_malloc_r+0xf6>
 80081f0:	685a      	ldr	r2, [r3, #4]
 80081f2:	42a2      	cmp	r2, r4
 80081f4:	d12b      	bne.n	800824e <_malloc_r+0xe2>
 80081f6:	2200      	movs	r2, #0
 80081f8:	605a      	str	r2, [r3, #4]
 80081fa:	e00f      	b.n	800821c <_malloc_r+0xb0>
 80081fc:	6822      	ldr	r2, [r4, #0]
 80081fe:	1b52      	subs	r2, r2, r5
 8008200:	d41f      	bmi.n	8008242 <_malloc_r+0xd6>
 8008202:	2a0b      	cmp	r2, #11
 8008204:	d917      	bls.n	8008236 <_malloc_r+0xca>
 8008206:	1961      	adds	r1, r4, r5
 8008208:	42a3      	cmp	r3, r4
 800820a:	6025      	str	r5, [r4, #0]
 800820c:	bf18      	it	ne
 800820e:	6059      	strne	r1, [r3, #4]
 8008210:	6863      	ldr	r3, [r4, #4]
 8008212:	bf08      	it	eq
 8008214:	f8c8 1000 	streq.w	r1, [r8]
 8008218:	5162      	str	r2, [r4, r5]
 800821a:	604b      	str	r3, [r1, #4]
 800821c:	4638      	mov	r0, r7
 800821e:	f104 060b 	add.w	r6, r4, #11
 8008222:	f000 f829 	bl	8008278 <__malloc_unlock>
 8008226:	f026 0607 	bic.w	r6, r6, #7
 800822a:	1d23      	adds	r3, r4, #4
 800822c:	1af2      	subs	r2, r6, r3
 800822e:	d0ae      	beq.n	800818e <_malloc_r+0x22>
 8008230:	1b9b      	subs	r3, r3, r6
 8008232:	50a3      	str	r3, [r4, r2]
 8008234:	e7ab      	b.n	800818e <_malloc_r+0x22>
 8008236:	42a3      	cmp	r3, r4
 8008238:	6862      	ldr	r2, [r4, #4]
 800823a:	d1dd      	bne.n	80081f8 <_malloc_r+0x8c>
 800823c:	f8c8 2000 	str.w	r2, [r8]
 8008240:	e7ec      	b.n	800821c <_malloc_r+0xb0>
 8008242:	4623      	mov	r3, r4
 8008244:	6864      	ldr	r4, [r4, #4]
 8008246:	e7ac      	b.n	80081a2 <_malloc_r+0x36>
 8008248:	4634      	mov	r4, r6
 800824a:	6876      	ldr	r6, [r6, #4]
 800824c:	e7b4      	b.n	80081b8 <_malloc_r+0x4c>
 800824e:	4613      	mov	r3, r2
 8008250:	e7cc      	b.n	80081ec <_malloc_r+0x80>
 8008252:	230c      	movs	r3, #12
 8008254:	603b      	str	r3, [r7, #0]
 8008256:	4638      	mov	r0, r7
 8008258:	f000 f80e 	bl	8008278 <__malloc_unlock>
 800825c:	e797      	b.n	800818e <_malloc_r+0x22>
 800825e:	6025      	str	r5, [r4, #0]
 8008260:	e7dc      	b.n	800821c <_malloc_r+0xb0>
 8008262:	605b      	str	r3, [r3, #4]
 8008264:	deff      	udf	#255	; 0xff
 8008266:	bf00      	nop
 8008268:	20000628 	.word	0x20000628

0800826c <__malloc_lock>:
 800826c:	4801      	ldr	r0, [pc, #4]	; (8008274 <__malloc_lock+0x8>)
 800826e:	f7ff bee9 	b.w	8008044 <__retarget_lock_acquire_recursive>
 8008272:	bf00      	nop
 8008274:	20000624 	.word	0x20000624

08008278 <__malloc_unlock>:
 8008278:	4801      	ldr	r0, [pc, #4]	; (8008280 <__malloc_unlock+0x8>)
 800827a:	f7ff bee4 	b.w	8008046 <__retarget_lock_release_recursive>
 800827e:	bf00      	nop
 8008280:	20000624 	.word	0x20000624

08008284 <__ssputs_r>:
 8008284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008288:	688e      	ldr	r6, [r1, #8]
 800828a:	461f      	mov	r7, r3
 800828c:	42be      	cmp	r6, r7
 800828e:	680b      	ldr	r3, [r1, #0]
 8008290:	4682      	mov	sl, r0
 8008292:	460c      	mov	r4, r1
 8008294:	4690      	mov	r8, r2
 8008296:	d82c      	bhi.n	80082f2 <__ssputs_r+0x6e>
 8008298:	898a      	ldrh	r2, [r1, #12]
 800829a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800829e:	d026      	beq.n	80082ee <__ssputs_r+0x6a>
 80082a0:	6965      	ldr	r5, [r4, #20]
 80082a2:	6909      	ldr	r1, [r1, #16]
 80082a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082a8:	eba3 0901 	sub.w	r9, r3, r1
 80082ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082b0:	1c7b      	adds	r3, r7, #1
 80082b2:	444b      	add	r3, r9
 80082b4:	106d      	asrs	r5, r5, #1
 80082b6:	429d      	cmp	r5, r3
 80082b8:	bf38      	it	cc
 80082ba:	461d      	movcc	r5, r3
 80082bc:	0553      	lsls	r3, r2, #21
 80082be:	d527      	bpl.n	8008310 <__ssputs_r+0x8c>
 80082c0:	4629      	mov	r1, r5
 80082c2:	f7ff ff53 	bl	800816c <_malloc_r>
 80082c6:	4606      	mov	r6, r0
 80082c8:	b360      	cbz	r0, 8008324 <__ssputs_r+0xa0>
 80082ca:	6921      	ldr	r1, [r4, #16]
 80082cc:	464a      	mov	r2, r9
 80082ce:	f000 fbab 	bl	8008a28 <memcpy>
 80082d2:	89a3      	ldrh	r3, [r4, #12]
 80082d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80082d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082dc:	81a3      	strh	r3, [r4, #12]
 80082de:	6126      	str	r6, [r4, #16]
 80082e0:	6165      	str	r5, [r4, #20]
 80082e2:	444e      	add	r6, r9
 80082e4:	eba5 0509 	sub.w	r5, r5, r9
 80082e8:	6026      	str	r6, [r4, #0]
 80082ea:	60a5      	str	r5, [r4, #8]
 80082ec:	463e      	mov	r6, r7
 80082ee:	42be      	cmp	r6, r7
 80082f0:	d900      	bls.n	80082f4 <__ssputs_r+0x70>
 80082f2:	463e      	mov	r6, r7
 80082f4:	6820      	ldr	r0, [r4, #0]
 80082f6:	4632      	mov	r2, r6
 80082f8:	4641      	mov	r1, r8
 80082fa:	f000 fb6b 	bl	80089d4 <memmove>
 80082fe:	68a3      	ldr	r3, [r4, #8]
 8008300:	1b9b      	subs	r3, r3, r6
 8008302:	60a3      	str	r3, [r4, #8]
 8008304:	6823      	ldr	r3, [r4, #0]
 8008306:	4433      	add	r3, r6
 8008308:	6023      	str	r3, [r4, #0]
 800830a:	2000      	movs	r0, #0
 800830c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008310:	462a      	mov	r2, r5
 8008312:	f000 fb9e 	bl	8008a52 <_realloc_r>
 8008316:	4606      	mov	r6, r0
 8008318:	2800      	cmp	r0, #0
 800831a:	d1e0      	bne.n	80082de <__ssputs_r+0x5a>
 800831c:	6921      	ldr	r1, [r4, #16]
 800831e:	4650      	mov	r0, sl
 8008320:	f7ff feb0 	bl	8008084 <_free_r>
 8008324:	230c      	movs	r3, #12
 8008326:	f8ca 3000 	str.w	r3, [sl]
 800832a:	89a3      	ldrh	r3, [r4, #12]
 800832c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008330:	81a3      	strh	r3, [r4, #12]
 8008332:	f04f 30ff 	mov.w	r0, #4294967295
 8008336:	e7e9      	b.n	800830c <__ssputs_r+0x88>

08008338 <_svfiprintf_r>:
 8008338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800833c:	4698      	mov	r8, r3
 800833e:	898b      	ldrh	r3, [r1, #12]
 8008340:	061b      	lsls	r3, r3, #24
 8008342:	b09d      	sub	sp, #116	; 0x74
 8008344:	4607      	mov	r7, r0
 8008346:	460d      	mov	r5, r1
 8008348:	4614      	mov	r4, r2
 800834a:	d50e      	bpl.n	800836a <_svfiprintf_r+0x32>
 800834c:	690b      	ldr	r3, [r1, #16]
 800834e:	b963      	cbnz	r3, 800836a <_svfiprintf_r+0x32>
 8008350:	2140      	movs	r1, #64	; 0x40
 8008352:	f7ff ff0b 	bl	800816c <_malloc_r>
 8008356:	6028      	str	r0, [r5, #0]
 8008358:	6128      	str	r0, [r5, #16]
 800835a:	b920      	cbnz	r0, 8008366 <_svfiprintf_r+0x2e>
 800835c:	230c      	movs	r3, #12
 800835e:	603b      	str	r3, [r7, #0]
 8008360:	f04f 30ff 	mov.w	r0, #4294967295
 8008364:	e0d0      	b.n	8008508 <_svfiprintf_r+0x1d0>
 8008366:	2340      	movs	r3, #64	; 0x40
 8008368:	616b      	str	r3, [r5, #20]
 800836a:	2300      	movs	r3, #0
 800836c:	9309      	str	r3, [sp, #36]	; 0x24
 800836e:	2320      	movs	r3, #32
 8008370:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008374:	f8cd 800c 	str.w	r8, [sp, #12]
 8008378:	2330      	movs	r3, #48	; 0x30
 800837a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008520 <_svfiprintf_r+0x1e8>
 800837e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008382:	f04f 0901 	mov.w	r9, #1
 8008386:	4623      	mov	r3, r4
 8008388:	469a      	mov	sl, r3
 800838a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800838e:	b10a      	cbz	r2, 8008394 <_svfiprintf_r+0x5c>
 8008390:	2a25      	cmp	r2, #37	; 0x25
 8008392:	d1f9      	bne.n	8008388 <_svfiprintf_r+0x50>
 8008394:	ebba 0b04 	subs.w	fp, sl, r4
 8008398:	d00b      	beq.n	80083b2 <_svfiprintf_r+0x7a>
 800839a:	465b      	mov	r3, fp
 800839c:	4622      	mov	r2, r4
 800839e:	4629      	mov	r1, r5
 80083a0:	4638      	mov	r0, r7
 80083a2:	f7ff ff6f 	bl	8008284 <__ssputs_r>
 80083a6:	3001      	adds	r0, #1
 80083a8:	f000 80a9 	beq.w	80084fe <_svfiprintf_r+0x1c6>
 80083ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083ae:	445a      	add	r2, fp
 80083b0:	9209      	str	r2, [sp, #36]	; 0x24
 80083b2:	f89a 3000 	ldrb.w	r3, [sl]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f000 80a1 	beq.w	80084fe <_svfiprintf_r+0x1c6>
 80083bc:	2300      	movs	r3, #0
 80083be:	f04f 32ff 	mov.w	r2, #4294967295
 80083c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083c6:	f10a 0a01 	add.w	sl, sl, #1
 80083ca:	9304      	str	r3, [sp, #16]
 80083cc:	9307      	str	r3, [sp, #28]
 80083ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083d2:	931a      	str	r3, [sp, #104]	; 0x68
 80083d4:	4654      	mov	r4, sl
 80083d6:	2205      	movs	r2, #5
 80083d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083dc:	4850      	ldr	r0, [pc, #320]	; (8008520 <_svfiprintf_r+0x1e8>)
 80083de:	f7f7 ff37 	bl	8000250 <memchr>
 80083e2:	9a04      	ldr	r2, [sp, #16]
 80083e4:	b9d8      	cbnz	r0, 800841e <_svfiprintf_r+0xe6>
 80083e6:	06d0      	lsls	r0, r2, #27
 80083e8:	bf44      	itt	mi
 80083ea:	2320      	movmi	r3, #32
 80083ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083f0:	0711      	lsls	r1, r2, #28
 80083f2:	bf44      	itt	mi
 80083f4:	232b      	movmi	r3, #43	; 0x2b
 80083f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083fa:	f89a 3000 	ldrb.w	r3, [sl]
 80083fe:	2b2a      	cmp	r3, #42	; 0x2a
 8008400:	d015      	beq.n	800842e <_svfiprintf_r+0xf6>
 8008402:	9a07      	ldr	r2, [sp, #28]
 8008404:	4654      	mov	r4, sl
 8008406:	2000      	movs	r0, #0
 8008408:	f04f 0c0a 	mov.w	ip, #10
 800840c:	4621      	mov	r1, r4
 800840e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008412:	3b30      	subs	r3, #48	; 0x30
 8008414:	2b09      	cmp	r3, #9
 8008416:	d94d      	bls.n	80084b4 <_svfiprintf_r+0x17c>
 8008418:	b1b0      	cbz	r0, 8008448 <_svfiprintf_r+0x110>
 800841a:	9207      	str	r2, [sp, #28]
 800841c:	e014      	b.n	8008448 <_svfiprintf_r+0x110>
 800841e:	eba0 0308 	sub.w	r3, r0, r8
 8008422:	fa09 f303 	lsl.w	r3, r9, r3
 8008426:	4313      	orrs	r3, r2
 8008428:	9304      	str	r3, [sp, #16]
 800842a:	46a2      	mov	sl, r4
 800842c:	e7d2      	b.n	80083d4 <_svfiprintf_r+0x9c>
 800842e:	9b03      	ldr	r3, [sp, #12]
 8008430:	1d19      	adds	r1, r3, #4
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	9103      	str	r1, [sp, #12]
 8008436:	2b00      	cmp	r3, #0
 8008438:	bfbb      	ittet	lt
 800843a:	425b      	neglt	r3, r3
 800843c:	f042 0202 	orrlt.w	r2, r2, #2
 8008440:	9307      	strge	r3, [sp, #28]
 8008442:	9307      	strlt	r3, [sp, #28]
 8008444:	bfb8      	it	lt
 8008446:	9204      	strlt	r2, [sp, #16]
 8008448:	7823      	ldrb	r3, [r4, #0]
 800844a:	2b2e      	cmp	r3, #46	; 0x2e
 800844c:	d10c      	bne.n	8008468 <_svfiprintf_r+0x130>
 800844e:	7863      	ldrb	r3, [r4, #1]
 8008450:	2b2a      	cmp	r3, #42	; 0x2a
 8008452:	d134      	bne.n	80084be <_svfiprintf_r+0x186>
 8008454:	9b03      	ldr	r3, [sp, #12]
 8008456:	1d1a      	adds	r2, r3, #4
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	9203      	str	r2, [sp, #12]
 800845c:	2b00      	cmp	r3, #0
 800845e:	bfb8      	it	lt
 8008460:	f04f 33ff 	movlt.w	r3, #4294967295
 8008464:	3402      	adds	r4, #2
 8008466:	9305      	str	r3, [sp, #20]
 8008468:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008530 <_svfiprintf_r+0x1f8>
 800846c:	7821      	ldrb	r1, [r4, #0]
 800846e:	2203      	movs	r2, #3
 8008470:	4650      	mov	r0, sl
 8008472:	f7f7 feed 	bl	8000250 <memchr>
 8008476:	b138      	cbz	r0, 8008488 <_svfiprintf_r+0x150>
 8008478:	9b04      	ldr	r3, [sp, #16]
 800847a:	eba0 000a 	sub.w	r0, r0, sl
 800847e:	2240      	movs	r2, #64	; 0x40
 8008480:	4082      	lsls	r2, r0
 8008482:	4313      	orrs	r3, r2
 8008484:	3401      	adds	r4, #1
 8008486:	9304      	str	r3, [sp, #16]
 8008488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800848c:	4825      	ldr	r0, [pc, #148]	; (8008524 <_svfiprintf_r+0x1ec>)
 800848e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008492:	2206      	movs	r2, #6
 8008494:	f7f7 fedc 	bl	8000250 <memchr>
 8008498:	2800      	cmp	r0, #0
 800849a:	d038      	beq.n	800850e <_svfiprintf_r+0x1d6>
 800849c:	4b22      	ldr	r3, [pc, #136]	; (8008528 <_svfiprintf_r+0x1f0>)
 800849e:	bb1b      	cbnz	r3, 80084e8 <_svfiprintf_r+0x1b0>
 80084a0:	9b03      	ldr	r3, [sp, #12]
 80084a2:	3307      	adds	r3, #7
 80084a4:	f023 0307 	bic.w	r3, r3, #7
 80084a8:	3308      	adds	r3, #8
 80084aa:	9303      	str	r3, [sp, #12]
 80084ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084ae:	4433      	add	r3, r6
 80084b0:	9309      	str	r3, [sp, #36]	; 0x24
 80084b2:	e768      	b.n	8008386 <_svfiprintf_r+0x4e>
 80084b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80084b8:	460c      	mov	r4, r1
 80084ba:	2001      	movs	r0, #1
 80084bc:	e7a6      	b.n	800840c <_svfiprintf_r+0xd4>
 80084be:	2300      	movs	r3, #0
 80084c0:	3401      	adds	r4, #1
 80084c2:	9305      	str	r3, [sp, #20]
 80084c4:	4619      	mov	r1, r3
 80084c6:	f04f 0c0a 	mov.w	ip, #10
 80084ca:	4620      	mov	r0, r4
 80084cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084d0:	3a30      	subs	r2, #48	; 0x30
 80084d2:	2a09      	cmp	r2, #9
 80084d4:	d903      	bls.n	80084de <_svfiprintf_r+0x1a6>
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d0c6      	beq.n	8008468 <_svfiprintf_r+0x130>
 80084da:	9105      	str	r1, [sp, #20]
 80084dc:	e7c4      	b.n	8008468 <_svfiprintf_r+0x130>
 80084de:	fb0c 2101 	mla	r1, ip, r1, r2
 80084e2:	4604      	mov	r4, r0
 80084e4:	2301      	movs	r3, #1
 80084e6:	e7f0      	b.n	80084ca <_svfiprintf_r+0x192>
 80084e8:	ab03      	add	r3, sp, #12
 80084ea:	9300      	str	r3, [sp, #0]
 80084ec:	462a      	mov	r2, r5
 80084ee:	4b0f      	ldr	r3, [pc, #60]	; (800852c <_svfiprintf_r+0x1f4>)
 80084f0:	a904      	add	r1, sp, #16
 80084f2:	4638      	mov	r0, r7
 80084f4:	f3af 8000 	nop.w
 80084f8:	1c42      	adds	r2, r0, #1
 80084fa:	4606      	mov	r6, r0
 80084fc:	d1d6      	bne.n	80084ac <_svfiprintf_r+0x174>
 80084fe:	89ab      	ldrh	r3, [r5, #12]
 8008500:	065b      	lsls	r3, r3, #25
 8008502:	f53f af2d 	bmi.w	8008360 <_svfiprintf_r+0x28>
 8008506:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008508:	b01d      	add	sp, #116	; 0x74
 800850a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800850e:	ab03      	add	r3, sp, #12
 8008510:	9300      	str	r3, [sp, #0]
 8008512:	462a      	mov	r2, r5
 8008514:	4b05      	ldr	r3, [pc, #20]	; (800852c <_svfiprintf_r+0x1f4>)
 8008516:	a904      	add	r1, sp, #16
 8008518:	4638      	mov	r0, r7
 800851a:	f000 f879 	bl	8008610 <_printf_i>
 800851e:	e7eb      	b.n	80084f8 <_svfiprintf_r+0x1c0>
 8008520:	0800914d 	.word	0x0800914d
 8008524:	08009157 	.word	0x08009157
 8008528:	00000000 	.word	0x00000000
 800852c:	08008285 	.word	0x08008285
 8008530:	08009153 	.word	0x08009153

08008534 <_printf_common>:
 8008534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008538:	4616      	mov	r6, r2
 800853a:	4699      	mov	r9, r3
 800853c:	688a      	ldr	r2, [r1, #8]
 800853e:	690b      	ldr	r3, [r1, #16]
 8008540:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008544:	4293      	cmp	r3, r2
 8008546:	bfb8      	it	lt
 8008548:	4613      	movlt	r3, r2
 800854a:	6033      	str	r3, [r6, #0]
 800854c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008550:	4607      	mov	r7, r0
 8008552:	460c      	mov	r4, r1
 8008554:	b10a      	cbz	r2, 800855a <_printf_common+0x26>
 8008556:	3301      	adds	r3, #1
 8008558:	6033      	str	r3, [r6, #0]
 800855a:	6823      	ldr	r3, [r4, #0]
 800855c:	0699      	lsls	r1, r3, #26
 800855e:	bf42      	ittt	mi
 8008560:	6833      	ldrmi	r3, [r6, #0]
 8008562:	3302      	addmi	r3, #2
 8008564:	6033      	strmi	r3, [r6, #0]
 8008566:	6825      	ldr	r5, [r4, #0]
 8008568:	f015 0506 	ands.w	r5, r5, #6
 800856c:	d106      	bne.n	800857c <_printf_common+0x48>
 800856e:	f104 0a19 	add.w	sl, r4, #25
 8008572:	68e3      	ldr	r3, [r4, #12]
 8008574:	6832      	ldr	r2, [r6, #0]
 8008576:	1a9b      	subs	r3, r3, r2
 8008578:	42ab      	cmp	r3, r5
 800857a:	dc26      	bgt.n	80085ca <_printf_common+0x96>
 800857c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008580:	1e13      	subs	r3, r2, #0
 8008582:	6822      	ldr	r2, [r4, #0]
 8008584:	bf18      	it	ne
 8008586:	2301      	movne	r3, #1
 8008588:	0692      	lsls	r2, r2, #26
 800858a:	d42b      	bmi.n	80085e4 <_printf_common+0xb0>
 800858c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008590:	4649      	mov	r1, r9
 8008592:	4638      	mov	r0, r7
 8008594:	47c0      	blx	r8
 8008596:	3001      	adds	r0, #1
 8008598:	d01e      	beq.n	80085d8 <_printf_common+0xa4>
 800859a:	6823      	ldr	r3, [r4, #0]
 800859c:	6922      	ldr	r2, [r4, #16]
 800859e:	f003 0306 	and.w	r3, r3, #6
 80085a2:	2b04      	cmp	r3, #4
 80085a4:	bf02      	ittt	eq
 80085a6:	68e5      	ldreq	r5, [r4, #12]
 80085a8:	6833      	ldreq	r3, [r6, #0]
 80085aa:	1aed      	subeq	r5, r5, r3
 80085ac:	68a3      	ldr	r3, [r4, #8]
 80085ae:	bf0c      	ite	eq
 80085b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085b4:	2500      	movne	r5, #0
 80085b6:	4293      	cmp	r3, r2
 80085b8:	bfc4      	itt	gt
 80085ba:	1a9b      	subgt	r3, r3, r2
 80085bc:	18ed      	addgt	r5, r5, r3
 80085be:	2600      	movs	r6, #0
 80085c0:	341a      	adds	r4, #26
 80085c2:	42b5      	cmp	r5, r6
 80085c4:	d11a      	bne.n	80085fc <_printf_common+0xc8>
 80085c6:	2000      	movs	r0, #0
 80085c8:	e008      	b.n	80085dc <_printf_common+0xa8>
 80085ca:	2301      	movs	r3, #1
 80085cc:	4652      	mov	r2, sl
 80085ce:	4649      	mov	r1, r9
 80085d0:	4638      	mov	r0, r7
 80085d2:	47c0      	blx	r8
 80085d4:	3001      	adds	r0, #1
 80085d6:	d103      	bne.n	80085e0 <_printf_common+0xac>
 80085d8:	f04f 30ff 	mov.w	r0, #4294967295
 80085dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085e0:	3501      	adds	r5, #1
 80085e2:	e7c6      	b.n	8008572 <_printf_common+0x3e>
 80085e4:	18e1      	adds	r1, r4, r3
 80085e6:	1c5a      	adds	r2, r3, #1
 80085e8:	2030      	movs	r0, #48	; 0x30
 80085ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085ee:	4422      	add	r2, r4
 80085f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085f8:	3302      	adds	r3, #2
 80085fa:	e7c7      	b.n	800858c <_printf_common+0x58>
 80085fc:	2301      	movs	r3, #1
 80085fe:	4622      	mov	r2, r4
 8008600:	4649      	mov	r1, r9
 8008602:	4638      	mov	r0, r7
 8008604:	47c0      	blx	r8
 8008606:	3001      	adds	r0, #1
 8008608:	d0e6      	beq.n	80085d8 <_printf_common+0xa4>
 800860a:	3601      	adds	r6, #1
 800860c:	e7d9      	b.n	80085c2 <_printf_common+0x8e>
	...

08008610 <_printf_i>:
 8008610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008614:	7e0f      	ldrb	r7, [r1, #24]
 8008616:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008618:	2f78      	cmp	r7, #120	; 0x78
 800861a:	4691      	mov	r9, r2
 800861c:	4680      	mov	r8, r0
 800861e:	460c      	mov	r4, r1
 8008620:	469a      	mov	sl, r3
 8008622:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008626:	d807      	bhi.n	8008638 <_printf_i+0x28>
 8008628:	2f62      	cmp	r7, #98	; 0x62
 800862a:	d80a      	bhi.n	8008642 <_printf_i+0x32>
 800862c:	2f00      	cmp	r7, #0
 800862e:	f000 80d4 	beq.w	80087da <_printf_i+0x1ca>
 8008632:	2f58      	cmp	r7, #88	; 0x58
 8008634:	f000 80c0 	beq.w	80087b8 <_printf_i+0x1a8>
 8008638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800863c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008640:	e03a      	b.n	80086b8 <_printf_i+0xa8>
 8008642:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008646:	2b15      	cmp	r3, #21
 8008648:	d8f6      	bhi.n	8008638 <_printf_i+0x28>
 800864a:	a101      	add	r1, pc, #4	; (adr r1, 8008650 <_printf_i+0x40>)
 800864c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008650:	080086a9 	.word	0x080086a9
 8008654:	080086bd 	.word	0x080086bd
 8008658:	08008639 	.word	0x08008639
 800865c:	08008639 	.word	0x08008639
 8008660:	08008639 	.word	0x08008639
 8008664:	08008639 	.word	0x08008639
 8008668:	080086bd 	.word	0x080086bd
 800866c:	08008639 	.word	0x08008639
 8008670:	08008639 	.word	0x08008639
 8008674:	08008639 	.word	0x08008639
 8008678:	08008639 	.word	0x08008639
 800867c:	080087c1 	.word	0x080087c1
 8008680:	080086e9 	.word	0x080086e9
 8008684:	0800877b 	.word	0x0800877b
 8008688:	08008639 	.word	0x08008639
 800868c:	08008639 	.word	0x08008639
 8008690:	080087e3 	.word	0x080087e3
 8008694:	08008639 	.word	0x08008639
 8008698:	080086e9 	.word	0x080086e9
 800869c:	08008639 	.word	0x08008639
 80086a0:	08008639 	.word	0x08008639
 80086a4:	08008783 	.word	0x08008783
 80086a8:	682b      	ldr	r3, [r5, #0]
 80086aa:	1d1a      	adds	r2, r3, #4
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	602a      	str	r2, [r5, #0]
 80086b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086b8:	2301      	movs	r3, #1
 80086ba:	e09f      	b.n	80087fc <_printf_i+0x1ec>
 80086bc:	6820      	ldr	r0, [r4, #0]
 80086be:	682b      	ldr	r3, [r5, #0]
 80086c0:	0607      	lsls	r7, r0, #24
 80086c2:	f103 0104 	add.w	r1, r3, #4
 80086c6:	6029      	str	r1, [r5, #0]
 80086c8:	d501      	bpl.n	80086ce <_printf_i+0xbe>
 80086ca:	681e      	ldr	r6, [r3, #0]
 80086cc:	e003      	b.n	80086d6 <_printf_i+0xc6>
 80086ce:	0646      	lsls	r6, r0, #25
 80086d0:	d5fb      	bpl.n	80086ca <_printf_i+0xba>
 80086d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80086d6:	2e00      	cmp	r6, #0
 80086d8:	da03      	bge.n	80086e2 <_printf_i+0xd2>
 80086da:	232d      	movs	r3, #45	; 0x2d
 80086dc:	4276      	negs	r6, r6
 80086de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086e2:	485a      	ldr	r0, [pc, #360]	; (800884c <_printf_i+0x23c>)
 80086e4:	230a      	movs	r3, #10
 80086e6:	e012      	b.n	800870e <_printf_i+0xfe>
 80086e8:	682b      	ldr	r3, [r5, #0]
 80086ea:	6820      	ldr	r0, [r4, #0]
 80086ec:	1d19      	adds	r1, r3, #4
 80086ee:	6029      	str	r1, [r5, #0]
 80086f0:	0605      	lsls	r5, r0, #24
 80086f2:	d501      	bpl.n	80086f8 <_printf_i+0xe8>
 80086f4:	681e      	ldr	r6, [r3, #0]
 80086f6:	e002      	b.n	80086fe <_printf_i+0xee>
 80086f8:	0641      	lsls	r1, r0, #25
 80086fa:	d5fb      	bpl.n	80086f4 <_printf_i+0xe4>
 80086fc:	881e      	ldrh	r6, [r3, #0]
 80086fe:	4853      	ldr	r0, [pc, #332]	; (800884c <_printf_i+0x23c>)
 8008700:	2f6f      	cmp	r7, #111	; 0x6f
 8008702:	bf0c      	ite	eq
 8008704:	2308      	moveq	r3, #8
 8008706:	230a      	movne	r3, #10
 8008708:	2100      	movs	r1, #0
 800870a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800870e:	6865      	ldr	r5, [r4, #4]
 8008710:	60a5      	str	r5, [r4, #8]
 8008712:	2d00      	cmp	r5, #0
 8008714:	bfa2      	ittt	ge
 8008716:	6821      	ldrge	r1, [r4, #0]
 8008718:	f021 0104 	bicge.w	r1, r1, #4
 800871c:	6021      	strge	r1, [r4, #0]
 800871e:	b90e      	cbnz	r6, 8008724 <_printf_i+0x114>
 8008720:	2d00      	cmp	r5, #0
 8008722:	d04b      	beq.n	80087bc <_printf_i+0x1ac>
 8008724:	4615      	mov	r5, r2
 8008726:	fbb6 f1f3 	udiv	r1, r6, r3
 800872a:	fb03 6711 	mls	r7, r3, r1, r6
 800872e:	5dc7      	ldrb	r7, [r0, r7]
 8008730:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008734:	4637      	mov	r7, r6
 8008736:	42bb      	cmp	r3, r7
 8008738:	460e      	mov	r6, r1
 800873a:	d9f4      	bls.n	8008726 <_printf_i+0x116>
 800873c:	2b08      	cmp	r3, #8
 800873e:	d10b      	bne.n	8008758 <_printf_i+0x148>
 8008740:	6823      	ldr	r3, [r4, #0]
 8008742:	07de      	lsls	r6, r3, #31
 8008744:	d508      	bpl.n	8008758 <_printf_i+0x148>
 8008746:	6923      	ldr	r3, [r4, #16]
 8008748:	6861      	ldr	r1, [r4, #4]
 800874a:	4299      	cmp	r1, r3
 800874c:	bfde      	ittt	le
 800874e:	2330      	movle	r3, #48	; 0x30
 8008750:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008754:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008758:	1b52      	subs	r2, r2, r5
 800875a:	6122      	str	r2, [r4, #16]
 800875c:	f8cd a000 	str.w	sl, [sp]
 8008760:	464b      	mov	r3, r9
 8008762:	aa03      	add	r2, sp, #12
 8008764:	4621      	mov	r1, r4
 8008766:	4640      	mov	r0, r8
 8008768:	f7ff fee4 	bl	8008534 <_printf_common>
 800876c:	3001      	adds	r0, #1
 800876e:	d14a      	bne.n	8008806 <_printf_i+0x1f6>
 8008770:	f04f 30ff 	mov.w	r0, #4294967295
 8008774:	b004      	add	sp, #16
 8008776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800877a:	6823      	ldr	r3, [r4, #0]
 800877c:	f043 0320 	orr.w	r3, r3, #32
 8008780:	6023      	str	r3, [r4, #0]
 8008782:	4833      	ldr	r0, [pc, #204]	; (8008850 <_printf_i+0x240>)
 8008784:	2778      	movs	r7, #120	; 0x78
 8008786:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800878a:	6823      	ldr	r3, [r4, #0]
 800878c:	6829      	ldr	r1, [r5, #0]
 800878e:	061f      	lsls	r7, r3, #24
 8008790:	f851 6b04 	ldr.w	r6, [r1], #4
 8008794:	d402      	bmi.n	800879c <_printf_i+0x18c>
 8008796:	065f      	lsls	r7, r3, #25
 8008798:	bf48      	it	mi
 800879a:	b2b6      	uxthmi	r6, r6
 800879c:	07df      	lsls	r7, r3, #31
 800879e:	bf48      	it	mi
 80087a0:	f043 0320 	orrmi.w	r3, r3, #32
 80087a4:	6029      	str	r1, [r5, #0]
 80087a6:	bf48      	it	mi
 80087a8:	6023      	strmi	r3, [r4, #0]
 80087aa:	b91e      	cbnz	r6, 80087b4 <_printf_i+0x1a4>
 80087ac:	6823      	ldr	r3, [r4, #0]
 80087ae:	f023 0320 	bic.w	r3, r3, #32
 80087b2:	6023      	str	r3, [r4, #0]
 80087b4:	2310      	movs	r3, #16
 80087b6:	e7a7      	b.n	8008708 <_printf_i+0xf8>
 80087b8:	4824      	ldr	r0, [pc, #144]	; (800884c <_printf_i+0x23c>)
 80087ba:	e7e4      	b.n	8008786 <_printf_i+0x176>
 80087bc:	4615      	mov	r5, r2
 80087be:	e7bd      	b.n	800873c <_printf_i+0x12c>
 80087c0:	682b      	ldr	r3, [r5, #0]
 80087c2:	6826      	ldr	r6, [r4, #0]
 80087c4:	6961      	ldr	r1, [r4, #20]
 80087c6:	1d18      	adds	r0, r3, #4
 80087c8:	6028      	str	r0, [r5, #0]
 80087ca:	0635      	lsls	r5, r6, #24
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	d501      	bpl.n	80087d4 <_printf_i+0x1c4>
 80087d0:	6019      	str	r1, [r3, #0]
 80087d2:	e002      	b.n	80087da <_printf_i+0x1ca>
 80087d4:	0670      	lsls	r0, r6, #25
 80087d6:	d5fb      	bpl.n	80087d0 <_printf_i+0x1c0>
 80087d8:	8019      	strh	r1, [r3, #0]
 80087da:	2300      	movs	r3, #0
 80087dc:	6123      	str	r3, [r4, #16]
 80087de:	4615      	mov	r5, r2
 80087e0:	e7bc      	b.n	800875c <_printf_i+0x14c>
 80087e2:	682b      	ldr	r3, [r5, #0]
 80087e4:	1d1a      	adds	r2, r3, #4
 80087e6:	602a      	str	r2, [r5, #0]
 80087e8:	681d      	ldr	r5, [r3, #0]
 80087ea:	6862      	ldr	r2, [r4, #4]
 80087ec:	2100      	movs	r1, #0
 80087ee:	4628      	mov	r0, r5
 80087f0:	f7f7 fd2e 	bl	8000250 <memchr>
 80087f4:	b108      	cbz	r0, 80087fa <_printf_i+0x1ea>
 80087f6:	1b40      	subs	r0, r0, r5
 80087f8:	6060      	str	r0, [r4, #4]
 80087fa:	6863      	ldr	r3, [r4, #4]
 80087fc:	6123      	str	r3, [r4, #16]
 80087fe:	2300      	movs	r3, #0
 8008800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008804:	e7aa      	b.n	800875c <_printf_i+0x14c>
 8008806:	6923      	ldr	r3, [r4, #16]
 8008808:	462a      	mov	r2, r5
 800880a:	4649      	mov	r1, r9
 800880c:	4640      	mov	r0, r8
 800880e:	47d0      	blx	sl
 8008810:	3001      	adds	r0, #1
 8008812:	d0ad      	beq.n	8008770 <_printf_i+0x160>
 8008814:	6823      	ldr	r3, [r4, #0]
 8008816:	079b      	lsls	r3, r3, #30
 8008818:	d413      	bmi.n	8008842 <_printf_i+0x232>
 800881a:	68e0      	ldr	r0, [r4, #12]
 800881c:	9b03      	ldr	r3, [sp, #12]
 800881e:	4298      	cmp	r0, r3
 8008820:	bfb8      	it	lt
 8008822:	4618      	movlt	r0, r3
 8008824:	e7a6      	b.n	8008774 <_printf_i+0x164>
 8008826:	2301      	movs	r3, #1
 8008828:	4632      	mov	r2, r6
 800882a:	4649      	mov	r1, r9
 800882c:	4640      	mov	r0, r8
 800882e:	47d0      	blx	sl
 8008830:	3001      	adds	r0, #1
 8008832:	d09d      	beq.n	8008770 <_printf_i+0x160>
 8008834:	3501      	adds	r5, #1
 8008836:	68e3      	ldr	r3, [r4, #12]
 8008838:	9903      	ldr	r1, [sp, #12]
 800883a:	1a5b      	subs	r3, r3, r1
 800883c:	42ab      	cmp	r3, r5
 800883e:	dcf2      	bgt.n	8008826 <_printf_i+0x216>
 8008840:	e7eb      	b.n	800881a <_printf_i+0x20a>
 8008842:	2500      	movs	r5, #0
 8008844:	f104 0619 	add.w	r6, r4, #25
 8008848:	e7f5      	b.n	8008836 <_printf_i+0x226>
 800884a:	bf00      	nop
 800884c:	0800915e 	.word	0x0800915e
 8008850:	0800916f 	.word	0x0800916f

08008854 <__sflush_r>:
 8008854:	898a      	ldrh	r2, [r1, #12]
 8008856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800885a:	4605      	mov	r5, r0
 800885c:	0710      	lsls	r0, r2, #28
 800885e:	460c      	mov	r4, r1
 8008860:	d458      	bmi.n	8008914 <__sflush_r+0xc0>
 8008862:	684b      	ldr	r3, [r1, #4]
 8008864:	2b00      	cmp	r3, #0
 8008866:	dc05      	bgt.n	8008874 <__sflush_r+0x20>
 8008868:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800886a:	2b00      	cmp	r3, #0
 800886c:	dc02      	bgt.n	8008874 <__sflush_r+0x20>
 800886e:	2000      	movs	r0, #0
 8008870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008874:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008876:	2e00      	cmp	r6, #0
 8008878:	d0f9      	beq.n	800886e <__sflush_r+0x1a>
 800887a:	2300      	movs	r3, #0
 800887c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008880:	682f      	ldr	r7, [r5, #0]
 8008882:	6a21      	ldr	r1, [r4, #32]
 8008884:	602b      	str	r3, [r5, #0]
 8008886:	d032      	beq.n	80088ee <__sflush_r+0x9a>
 8008888:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800888a:	89a3      	ldrh	r3, [r4, #12]
 800888c:	075a      	lsls	r2, r3, #29
 800888e:	d505      	bpl.n	800889c <__sflush_r+0x48>
 8008890:	6863      	ldr	r3, [r4, #4]
 8008892:	1ac0      	subs	r0, r0, r3
 8008894:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008896:	b10b      	cbz	r3, 800889c <__sflush_r+0x48>
 8008898:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800889a:	1ac0      	subs	r0, r0, r3
 800889c:	2300      	movs	r3, #0
 800889e:	4602      	mov	r2, r0
 80088a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088a2:	6a21      	ldr	r1, [r4, #32]
 80088a4:	4628      	mov	r0, r5
 80088a6:	47b0      	blx	r6
 80088a8:	1c43      	adds	r3, r0, #1
 80088aa:	89a3      	ldrh	r3, [r4, #12]
 80088ac:	d106      	bne.n	80088bc <__sflush_r+0x68>
 80088ae:	6829      	ldr	r1, [r5, #0]
 80088b0:	291d      	cmp	r1, #29
 80088b2:	d82b      	bhi.n	800890c <__sflush_r+0xb8>
 80088b4:	4a29      	ldr	r2, [pc, #164]	; (800895c <__sflush_r+0x108>)
 80088b6:	410a      	asrs	r2, r1
 80088b8:	07d6      	lsls	r6, r2, #31
 80088ba:	d427      	bmi.n	800890c <__sflush_r+0xb8>
 80088bc:	2200      	movs	r2, #0
 80088be:	6062      	str	r2, [r4, #4]
 80088c0:	04d9      	lsls	r1, r3, #19
 80088c2:	6922      	ldr	r2, [r4, #16]
 80088c4:	6022      	str	r2, [r4, #0]
 80088c6:	d504      	bpl.n	80088d2 <__sflush_r+0x7e>
 80088c8:	1c42      	adds	r2, r0, #1
 80088ca:	d101      	bne.n	80088d0 <__sflush_r+0x7c>
 80088cc:	682b      	ldr	r3, [r5, #0]
 80088ce:	b903      	cbnz	r3, 80088d2 <__sflush_r+0x7e>
 80088d0:	6560      	str	r0, [r4, #84]	; 0x54
 80088d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088d4:	602f      	str	r7, [r5, #0]
 80088d6:	2900      	cmp	r1, #0
 80088d8:	d0c9      	beq.n	800886e <__sflush_r+0x1a>
 80088da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088de:	4299      	cmp	r1, r3
 80088e0:	d002      	beq.n	80088e8 <__sflush_r+0x94>
 80088e2:	4628      	mov	r0, r5
 80088e4:	f7ff fbce 	bl	8008084 <_free_r>
 80088e8:	2000      	movs	r0, #0
 80088ea:	6360      	str	r0, [r4, #52]	; 0x34
 80088ec:	e7c0      	b.n	8008870 <__sflush_r+0x1c>
 80088ee:	2301      	movs	r3, #1
 80088f0:	4628      	mov	r0, r5
 80088f2:	47b0      	blx	r6
 80088f4:	1c41      	adds	r1, r0, #1
 80088f6:	d1c8      	bne.n	800888a <__sflush_r+0x36>
 80088f8:	682b      	ldr	r3, [r5, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d0c5      	beq.n	800888a <__sflush_r+0x36>
 80088fe:	2b1d      	cmp	r3, #29
 8008900:	d001      	beq.n	8008906 <__sflush_r+0xb2>
 8008902:	2b16      	cmp	r3, #22
 8008904:	d101      	bne.n	800890a <__sflush_r+0xb6>
 8008906:	602f      	str	r7, [r5, #0]
 8008908:	e7b1      	b.n	800886e <__sflush_r+0x1a>
 800890a:	89a3      	ldrh	r3, [r4, #12]
 800890c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008910:	81a3      	strh	r3, [r4, #12]
 8008912:	e7ad      	b.n	8008870 <__sflush_r+0x1c>
 8008914:	690f      	ldr	r7, [r1, #16]
 8008916:	2f00      	cmp	r7, #0
 8008918:	d0a9      	beq.n	800886e <__sflush_r+0x1a>
 800891a:	0793      	lsls	r3, r2, #30
 800891c:	680e      	ldr	r6, [r1, #0]
 800891e:	bf08      	it	eq
 8008920:	694b      	ldreq	r3, [r1, #20]
 8008922:	600f      	str	r7, [r1, #0]
 8008924:	bf18      	it	ne
 8008926:	2300      	movne	r3, #0
 8008928:	eba6 0807 	sub.w	r8, r6, r7
 800892c:	608b      	str	r3, [r1, #8]
 800892e:	f1b8 0f00 	cmp.w	r8, #0
 8008932:	dd9c      	ble.n	800886e <__sflush_r+0x1a>
 8008934:	6a21      	ldr	r1, [r4, #32]
 8008936:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008938:	4643      	mov	r3, r8
 800893a:	463a      	mov	r2, r7
 800893c:	4628      	mov	r0, r5
 800893e:	47b0      	blx	r6
 8008940:	2800      	cmp	r0, #0
 8008942:	dc06      	bgt.n	8008952 <__sflush_r+0xfe>
 8008944:	89a3      	ldrh	r3, [r4, #12]
 8008946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800894a:	81a3      	strh	r3, [r4, #12]
 800894c:	f04f 30ff 	mov.w	r0, #4294967295
 8008950:	e78e      	b.n	8008870 <__sflush_r+0x1c>
 8008952:	4407      	add	r7, r0
 8008954:	eba8 0800 	sub.w	r8, r8, r0
 8008958:	e7e9      	b.n	800892e <__sflush_r+0xda>
 800895a:	bf00      	nop
 800895c:	dfbffffe 	.word	0xdfbffffe

08008960 <_fflush_r>:
 8008960:	b538      	push	{r3, r4, r5, lr}
 8008962:	690b      	ldr	r3, [r1, #16]
 8008964:	4605      	mov	r5, r0
 8008966:	460c      	mov	r4, r1
 8008968:	b913      	cbnz	r3, 8008970 <_fflush_r+0x10>
 800896a:	2500      	movs	r5, #0
 800896c:	4628      	mov	r0, r5
 800896e:	bd38      	pop	{r3, r4, r5, pc}
 8008970:	b118      	cbz	r0, 800897a <_fflush_r+0x1a>
 8008972:	6a03      	ldr	r3, [r0, #32]
 8008974:	b90b      	cbnz	r3, 800897a <_fflush_r+0x1a>
 8008976:	f7ff f9e3 	bl	8007d40 <__sinit>
 800897a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d0f3      	beq.n	800896a <_fflush_r+0xa>
 8008982:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008984:	07d0      	lsls	r0, r2, #31
 8008986:	d404      	bmi.n	8008992 <_fflush_r+0x32>
 8008988:	0599      	lsls	r1, r3, #22
 800898a:	d402      	bmi.n	8008992 <_fflush_r+0x32>
 800898c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800898e:	f7ff fb59 	bl	8008044 <__retarget_lock_acquire_recursive>
 8008992:	4628      	mov	r0, r5
 8008994:	4621      	mov	r1, r4
 8008996:	f7ff ff5d 	bl	8008854 <__sflush_r>
 800899a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800899c:	07da      	lsls	r2, r3, #31
 800899e:	4605      	mov	r5, r0
 80089a0:	d4e4      	bmi.n	800896c <_fflush_r+0xc>
 80089a2:	89a3      	ldrh	r3, [r4, #12]
 80089a4:	059b      	lsls	r3, r3, #22
 80089a6:	d4e1      	bmi.n	800896c <_fflush_r+0xc>
 80089a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089aa:	f7ff fb4c 	bl	8008046 <__retarget_lock_release_recursive>
 80089ae:	e7dd      	b.n	800896c <_fflush_r+0xc>

080089b0 <fiprintf>:
 80089b0:	b40e      	push	{r1, r2, r3}
 80089b2:	b503      	push	{r0, r1, lr}
 80089b4:	4601      	mov	r1, r0
 80089b6:	ab03      	add	r3, sp, #12
 80089b8:	4805      	ldr	r0, [pc, #20]	; (80089d0 <fiprintf+0x20>)
 80089ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80089be:	6800      	ldr	r0, [r0, #0]
 80089c0:	9301      	str	r3, [sp, #4]
 80089c2:	f000 f89f 	bl	8008b04 <_vfiprintf_r>
 80089c6:	b002      	add	sp, #8
 80089c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80089cc:	b003      	add	sp, #12
 80089ce:	4770      	bx	lr
 80089d0:	20000120 	.word	0x20000120

080089d4 <memmove>:
 80089d4:	4288      	cmp	r0, r1
 80089d6:	b510      	push	{r4, lr}
 80089d8:	eb01 0402 	add.w	r4, r1, r2
 80089dc:	d902      	bls.n	80089e4 <memmove+0x10>
 80089de:	4284      	cmp	r4, r0
 80089e0:	4623      	mov	r3, r4
 80089e2:	d807      	bhi.n	80089f4 <memmove+0x20>
 80089e4:	1e43      	subs	r3, r0, #1
 80089e6:	42a1      	cmp	r1, r4
 80089e8:	d008      	beq.n	80089fc <memmove+0x28>
 80089ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089f2:	e7f8      	b.n	80089e6 <memmove+0x12>
 80089f4:	4402      	add	r2, r0
 80089f6:	4601      	mov	r1, r0
 80089f8:	428a      	cmp	r2, r1
 80089fa:	d100      	bne.n	80089fe <memmove+0x2a>
 80089fc:	bd10      	pop	{r4, pc}
 80089fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a06:	e7f7      	b.n	80089f8 <memmove+0x24>

08008a08 <_sbrk_r>:
 8008a08:	b538      	push	{r3, r4, r5, lr}
 8008a0a:	4d06      	ldr	r5, [pc, #24]	; (8008a24 <_sbrk_r+0x1c>)
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	4604      	mov	r4, r0
 8008a10:	4608      	mov	r0, r1
 8008a12:	602b      	str	r3, [r5, #0]
 8008a14:	f7f8 fa52 	bl	8000ebc <_sbrk>
 8008a18:	1c43      	adds	r3, r0, #1
 8008a1a:	d102      	bne.n	8008a22 <_sbrk_r+0x1a>
 8008a1c:	682b      	ldr	r3, [r5, #0]
 8008a1e:	b103      	cbz	r3, 8008a22 <_sbrk_r+0x1a>
 8008a20:	6023      	str	r3, [r4, #0]
 8008a22:	bd38      	pop	{r3, r4, r5, pc}
 8008a24:	20000620 	.word	0x20000620

08008a28 <memcpy>:
 8008a28:	440a      	add	r2, r1
 8008a2a:	4291      	cmp	r1, r2
 8008a2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a30:	d100      	bne.n	8008a34 <memcpy+0xc>
 8008a32:	4770      	bx	lr
 8008a34:	b510      	push	{r4, lr}
 8008a36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a3e:	4291      	cmp	r1, r2
 8008a40:	d1f9      	bne.n	8008a36 <memcpy+0xe>
 8008a42:	bd10      	pop	{r4, pc}

08008a44 <abort>:
 8008a44:	b508      	push	{r3, lr}
 8008a46:	2006      	movs	r0, #6
 8008a48:	f000 fa34 	bl	8008eb4 <raise>
 8008a4c:	2001      	movs	r0, #1
 8008a4e:	f7f8 f9bd 	bl	8000dcc <_exit>

08008a52 <_realloc_r>:
 8008a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a56:	4680      	mov	r8, r0
 8008a58:	4614      	mov	r4, r2
 8008a5a:	460e      	mov	r6, r1
 8008a5c:	b921      	cbnz	r1, 8008a68 <_realloc_r+0x16>
 8008a5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a62:	4611      	mov	r1, r2
 8008a64:	f7ff bb82 	b.w	800816c <_malloc_r>
 8008a68:	b92a      	cbnz	r2, 8008a76 <_realloc_r+0x24>
 8008a6a:	f7ff fb0b 	bl	8008084 <_free_r>
 8008a6e:	4625      	mov	r5, r4
 8008a70:	4628      	mov	r0, r5
 8008a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a76:	f000 fa39 	bl	8008eec <_malloc_usable_size_r>
 8008a7a:	4284      	cmp	r4, r0
 8008a7c:	4607      	mov	r7, r0
 8008a7e:	d802      	bhi.n	8008a86 <_realloc_r+0x34>
 8008a80:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a84:	d812      	bhi.n	8008aac <_realloc_r+0x5a>
 8008a86:	4621      	mov	r1, r4
 8008a88:	4640      	mov	r0, r8
 8008a8a:	f7ff fb6f 	bl	800816c <_malloc_r>
 8008a8e:	4605      	mov	r5, r0
 8008a90:	2800      	cmp	r0, #0
 8008a92:	d0ed      	beq.n	8008a70 <_realloc_r+0x1e>
 8008a94:	42bc      	cmp	r4, r7
 8008a96:	4622      	mov	r2, r4
 8008a98:	4631      	mov	r1, r6
 8008a9a:	bf28      	it	cs
 8008a9c:	463a      	movcs	r2, r7
 8008a9e:	f7ff ffc3 	bl	8008a28 <memcpy>
 8008aa2:	4631      	mov	r1, r6
 8008aa4:	4640      	mov	r0, r8
 8008aa6:	f7ff faed 	bl	8008084 <_free_r>
 8008aaa:	e7e1      	b.n	8008a70 <_realloc_r+0x1e>
 8008aac:	4635      	mov	r5, r6
 8008aae:	e7df      	b.n	8008a70 <_realloc_r+0x1e>

08008ab0 <__sfputc_r>:
 8008ab0:	6893      	ldr	r3, [r2, #8]
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	b410      	push	{r4}
 8008ab8:	6093      	str	r3, [r2, #8]
 8008aba:	da08      	bge.n	8008ace <__sfputc_r+0x1e>
 8008abc:	6994      	ldr	r4, [r2, #24]
 8008abe:	42a3      	cmp	r3, r4
 8008ac0:	db01      	blt.n	8008ac6 <__sfputc_r+0x16>
 8008ac2:	290a      	cmp	r1, #10
 8008ac4:	d103      	bne.n	8008ace <__sfputc_r+0x1e>
 8008ac6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008aca:	f000 b935 	b.w	8008d38 <__swbuf_r>
 8008ace:	6813      	ldr	r3, [r2, #0]
 8008ad0:	1c58      	adds	r0, r3, #1
 8008ad2:	6010      	str	r0, [r2, #0]
 8008ad4:	7019      	strb	r1, [r3, #0]
 8008ad6:	4608      	mov	r0, r1
 8008ad8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008adc:	4770      	bx	lr

08008ade <__sfputs_r>:
 8008ade:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ae0:	4606      	mov	r6, r0
 8008ae2:	460f      	mov	r7, r1
 8008ae4:	4614      	mov	r4, r2
 8008ae6:	18d5      	adds	r5, r2, r3
 8008ae8:	42ac      	cmp	r4, r5
 8008aea:	d101      	bne.n	8008af0 <__sfputs_r+0x12>
 8008aec:	2000      	movs	r0, #0
 8008aee:	e007      	b.n	8008b00 <__sfputs_r+0x22>
 8008af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008af4:	463a      	mov	r2, r7
 8008af6:	4630      	mov	r0, r6
 8008af8:	f7ff ffda 	bl	8008ab0 <__sfputc_r>
 8008afc:	1c43      	adds	r3, r0, #1
 8008afe:	d1f3      	bne.n	8008ae8 <__sfputs_r+0xa>
 8008b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b04 <_vfiprintf_r>:
 8008b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b08:	460d      	mov	r5, r1
 8008b0a:	b09d      	sub	sp, #116	; 0x74
 8008b0c:	4614      	mov	r4, r2
 8008b0e:	4698      	mov	r8, r3
 8008b10:	4606      	mov	r6, r0
 8008b12:	b118      	cbz	r0, 8008b1c <_vfiprintf_r+0x18>
 8008b14:	6a03      	ldr	r3, [r0, #32]
 8008b16:	b90b      	cbnz	r3, 8008b1c <_vfiprintf_r+0x18>
 8008b18:	f7ff f912 	bl	8007d40 <__sinit>
 8008b1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b1e:	07d9      	lsls	r1, r3, #31
 8008b20:	d405      	bmi.n	8008b2e <_vfiprintf_r+0x2a>
 8008b22:	89ab      	ldrh	r3, [r5, #12]
 8008b24:	059a      	lsls	r2, r3, #22
 8008b26:	d402      	bmi.n	8008b2e <_vfiprintf_r+0x2a>
 8008b28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b2a:	f7ff fa8b 	bl	8008044 <__retarget_lock_acquire_recursive>
 8008b2e:	89ab      	ldrh	r3, [r5, #12]
 8008b30:	071b      	lsls	r3, r3, #28
 8008b32:	d501      	bpl.n	8008b38 <_vfiprintf_r+0x34>
 8008b34:	692b      	ldr	r3, [r5, #16]
 8008b36:	b99b      	cbnz	r3, 8008b60 <_vfiprintf_r+0x5c>
 8008b38:	4629      	mov	r1, r5
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	f000 f93a 	bl	8008db4 <__swsetup_r>
 8008b40:	b170      	cbz	r0, 8008b60 <_vfiprintf_r+0x5c>
 8008b42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b44:	07dc      	lsls	r4, r3, #31
 8008b46:	d504      	bpl.n	8008b52 <_vfiprintf_r+0x4e>
 8008b48:	f04f 30ff 	mov.w	r0, #4294967295
 8008b4c:	b01d      	add	sp, #116	; 0x74
 8008b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b52:	89ab      	ldrh	r3, [r5, #12]
 8008b54:	0598      	lsls	r0, r3, #22
 8008b56:	d4f7      	bmi.n	8008b48 <_vfiprintf_r+0x44>
 8008b58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b5a:	f7ff fa74 	bl	8008046 <__retarget_lock_release_recursive>
 8008b5e:	e7f3      	b.n	8008b48 <_vfiprintf_r+0x44>
 8008b60:	2300      	movs	r3, #0
 8008b62:	9309      	str	r3, [sp, #36]	; 0x24
 8008b64:	2320      	movs	r3, #32
 8008b66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b6e:	2330      	movs	r3, #48	; 0x30
 8008b70:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008d24 <_vfiprintf_r+0x220>
 8008b74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b78:	f04f 0901 	mov.w	r9, #1
 8008b7c:	4623      	mov	r3, r4
 8008b7e:	469a      	mov	sl, r3
 8008b80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b84:	b10a      	cbz	r2, 8008b8a <_vfiprintf_r+0x86>
 8008b86:	2a25      	cmp	r2, #37	; 0x25
 8008b88:	d1f9      	bne.n	8008b7e <_vfiprintf_r+0x7a>
 8008b8a:	ebba 0b04 	subs.w	fp, sl, r4
 8008b8e:	d00b      	beq.n	8008ba8 <_vfiprintf_r+0xa4>
 8008b90:	465b      	mov	r3, fp
 8008b92:	4622      	mov	r2, r4
 8008b94:	4629      	mov	r1, r5
 8008b96:	4630      	mov	r0, r6
 8008b98:	f7ff ffa1 	bl	8008ade <__sfputs_r>
 8008b9c:	3001      	adds	r0, #1
 8008b9e:	f000 80a9 	beq.w	8008cf4 <_vfiprintf_r+0x1f0>
 8008ba2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ba4:	445a      	add	r2, fp
 8008ba6:	9209      	str	r2, [sp, #36]	; 0x24
 8008ba8:	f89a 3000 	ldrb.w	r3, [sl]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	f000 80a1 	beq.w	8008cf4 <_vfiprintf_r+0x1f0>
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8008bb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bbc:	f10a 0a01 	add.w	sl, sl, #1
 8008bc0:	9304      	str	r3, [sp, #16]
 8008bc2:	9307      	str	r3, [sp, #28]
 8008bc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008bc8:	931a      	str	r3, [sp, #104]	; 0x68
 8008bca:	4654      	mov	r4, sl
 8008bcc:	2205      	movs	r2, #5
 8008bce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bd2:	4854      	ldr	r0, [pc, #336]	; (8008d24 <_vfiprintf_r+0x220>)
 8008bd4:	f7f7 fb3c 	bl	8000250 <memchr>
 8008bd8:	9a04      	ldr	r2, [sp, #16]
 8008bda:	b9d8      	cbnz	r0, 8008c14 <_vfiprintf_r+0x110>
 8008bdc:	06d1      	lsls	r1, r2, #27
 8008bde:	bf44      	itt	mi
 8008be0:	2320      	movmi	r3, #32
 8008be2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008be6:	0713      	lsls	r3, r2, #28
 8008be8:	bf44      	itt	mi
 8008bea:	232b      	movmi	r3, #43	; 0x2b
 8008bec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bf0:	f89a 3000 	ldrb.w	r3, [sl]
 8008bf4:	2b2a      	cmp	r3, #42	; 0x2a
 8008bf6:	d015      	beq.n	8008c24 <_vfiprintf_r+0x120>
 8008bf8:	9a07      	ldr	r2, [sp, #28]
 8008bfa:	4654      	mov	r4, sl
 8008bfc:	2000      	movs	r0, #0
 8008bfe:	f04f 0c0a 	mov.w	ip, #10
 8008c02:	4621      	mov	r1, r4
 8008c04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c08:	3b30      	subs	r3, #48	; 0x30
 8008c0a:	2b09      	cmp	r3, #9
 8008c0c:	d94d      	bls.n	8008caa <_vfiprintf_r+0x1a6>
 8008c0e:	b1b0      	cbz	r0, 8008c3e <_vfiprintf_r+0x13a>
 8008c10:	9207      	str	r2, [sp, #28]
 8008c12:	e014      	b.n	8008c3e <_vfiprintf_r+0x13a>
 8008c14:	eba0 0308 	sub.w	r3, r0, r8
 8008c18:	fa09 f303 	lsl.w	r3, r9, r3
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	9304      	str	r3, [sp, #16]
 8008c20:	46a2      	mov	sl, r4
 8008c22:	e7d2      	b.n	8008bca <_vfiprintf_r+0xc6>
 8008c24:	9b03      	ldr	r3, [sp, #12]
 8008c26:	1d19      	adds	r1, r3, #4
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	9103      	str	r1, [sp, #12]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	bfbb      	ittet	lt
 8008c30:	425b      	neglt	r3, r3
 8008c32:	f042 0202 	orrlt.w	r2, r2, #2
 8008c36:	9307      	strge	r3, [sp, #28]
 8008c38:	9307      	strlt	r3, [sp, #28]
 8008c3a:	bfb8      	it	lt
 8008c3c:	9204      	strlt	r2, [sp, #16]
 8008c3e:	7823      	ldrb	r3, [r4, #0]
 8008c40:	2b2e      	cmp	r3, #46	; 0x2e
 8008c42:	d10c      	bne.n	8008c5e <_vfiprintf_r+0x15a>
 8008c44:	7863      	ldrb	r3, [r4, #1]
 8008c46:	2b2a      	cmp	r3, #42	; 0x2a
 8008c48:	d134      	bne.n	8008cb4 <_vfiprintf_r+0x1b0>
 8008c4a:	9b03      	ldr	r3, [sp, #12]
 8008c4c:	1d1a      	adds	r2, r3, #4
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	9203      	str	r2, [sp, #12]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	bfb8      	it	lt
 8008c56:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c5a:	3402      	adds	r4, #2
 8008c5c:	9305      	str	r3, [sp, #20]
 8008c5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008d34 <_vfiprintf_r+0x230>
 8008c62:	7821      	ldrb	r1, [r4, #0]
 8008c64:	2203      	movs	r2, #3
 8008c66:	4650      	mov	r0, sl
 8008c68:	f7f7 faf2 	bl	8000250 <memchr>
 8008c6c:	b138      	cbz	r0, 8008c7e <_vfiprintf_r+0x17a>
 8008c6e:	9b04      	ldr	r3, [sp, #16]
 8008c70:	eba0 000a 	sub.w	r0, r0, sl
 8008c74:	2240      	movs	r2, #64	; 0x40
 8008c76:	4082      	lsls	r2, r0
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	3401      	adds	r4, #1
 8008c7c:	9304      	str	r3, [sp, #16]
 8008c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c82:	4829      	ldr	r0, [pc, #164]	; (8008d28 <_vfiprintf_r+0x224>)
 8008c84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c88:	2206      	movs	r2, #6
 8008c8a:	f7f7 fae1 	bl	8000250 <memchr>
 8008c8e:	2800      	cmp	r0, #0
 8008c90:	d03f      	beq.n	8008d12 <_vfiprintf_r+0x20e>
 8008c92:	4b26      	ldr	r3, [pc, #152]	; (8008d2c <_vfiprintf_r+0x228>)
 8008c94:	bb1b      	cbnz	r3, 8008cde <_vfiprintf_r+0x1da>
 8008c96:	9b03      	ldr	r3, [sp, #12]
 8008c98:	3307      	adds	r3, #7
 8008c9a:	f023 0307 	bic.w	r3, r3, #7
 8008c9e:	3308      	adds	r3, #8
 8008ca0:	9303      	str	r3, [sp, #12]
 8008ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ca4:	443b      	add	r3, r7
 8008ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ca8:	e768      	b.n	8008b7c <_vfiprintf_r+0x78>
 8008caa:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cae:	460c      	mov	r4, r1
 8008cb0:	2001      	movs	r0, #1
 8008cb2:	e7a6      	b.n	8008c02 <_vfiprintf_r+0xfe>
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	3401      	adds	r4, #1
 8008cb8:	9305      	str	r3, [sp, #20]
 8008cba:	4619      	mov	r1, r3
 8008cbc:	f04f 0c0a 	mov.w	ip, #10
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cc6:	3a30      	subs	r2, #48	; 0x30
 8008cc8:	2a09      	cmp	r2, #9
 8008cca:	d903      	bls.n	8008cd4 <_vfiprintf_r+0x1d0>
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d0c6      	beq.n	8008c5e <_vfiprintf_r+0x15a>
 8008cd0:	9105      	str	r1, [sp, #20]
 8008cd2:	e7c4      	b.n	8008c5e <_vfiprintf_r+0x15a>
 8008cd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cd8:	4604      	mov	r4, r0
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e7f0      	b.n	8008cc0 <_vfiprintf_r+0x1bc>
 8008cde:	ab03      	add	r3, sp, #12
 8008ce0:	9300      	str	r3, [sp, #0]
 8008ce2:	462a      	mov	r2, r5
 8008ce4:	4b12      	ldr	r3, [pc, #72]	; (8008d30 <_vfiprintf_r+0x22c>)
 8008ce6:	a904      	add	r1, sp, #16
 8008ce8:	4630      	mov	r0, r6
 8008cea:	f3af 8000 	nop.w
 8008cee:	4607      	mov	r7, r0
 8008cf0:	1c78      	adds	r0, r7, #1
 8008cf2:	d1d6      	bne.n	8008ca2 <_vfiprintf_r+0x19e>
 8008cf4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cf6:	07d9      	lsls	r1, r3, #31
 8008cf8:	d405      	bmi.n	8008d06 <_vfiprintf_r+0x202>
 8008cfa:	89ab      	ldrh	r3, [r5, #12]
 8008cfc:	059a      	lsls	r2, r3, #22
 8008cfe:	d402      	bmi.n	8008d06 <_vfiprintf_r+0x202>
 8008d00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d02:	f7ff f9a0 	bl	8008046 <__retarget_lock_release_recursive>
 8008d06:	89ab      	ldrh	r3, [r5, #12]
 8008d08:	065b      	lsls	r3, r3, #25
 8008d0a:	f53f af1d 	bmi.w	8008b48 <_vfiprintf_r+0x44>
 8008d0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d10:	e71c      	b.n	8008b4c <_vfiprintf_r+0x48>
 8008d12:	ab03      	add	r3, sp, #12
 8008d14:	9300      	str	r3, [sp, #0]
 8008d16:	462a      	mov	r2, r5
 8008d18:	4b05      	ldr	r3, [pc, #20]	; (8008d30 <_vfiprintf_r+0x22c>)
 8008d1a:	a904      	add	r1, sp, #16
 8008d1c:	4630      	mov	r0, r6
 8008d1e:	f7ff fc77 	bl	8008610 <_printf_i>
 8008d22:	e7e4      	b.n	8008cee <_vfiprintf_r+0x1ea>
 8008d24:	0800914d 	.word	0x0800914d
 8008d28:	08009157 	.word	0x08009157
 8008d2c:	00000000 	.word	0x00000000
 8008d30:	08008adf 	.word	0x08008adf
 8008d34:	08009153 	.word	0x08009153

08008d38 <__swbuf_r>:
 8008d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d3a:	460e      	mov	r6, r1
 8008d3c:	4614      	mov	r4, r2
 8008d3e:	4605      	mov	r5, r0
 8008d40:	b118      	cbz	r0, 8008d4a <__swbuf_r+0x12>
 8008d42:	6a03      	ldr	r3, [r0, #32]
 8008d44:	b90b      	cbnz	r3, 8008d4a <__swbuf_r+0x12>
 8008d46:	f7fe fffb 	bl	8007d40 <__sinit>
 8008d4a:	69a3      	ldr	r3, [r4, #24]
 8008d4c:	60a3      	str	r3, [r4, #8]
 8008d4e:	89a3      	ldrh	r3, [r4, #12]
 8008d50:	071a      	lsls	r2, r3, #28
 8008d52:	d525      	bpl.n	8008da0 <__swbuf_r+0x68>
 8008d54:	6923      	ldr	r3, [r4, #16]
 8008d56:	b31b      	cbz	r3, 8008da0 <__swbuf_r+0x68>
 8008d58:	6823      	ldr	r3, [r4, #0]
 8008d5a:	6922      	ldr	r2, [r4, #16]
 8008d5c:	1a98      	subs	r0, r3, r2
 8008d5e:	6963      	ldr	r3, [r4, #20]
 8008d60:	b2f6      	uxtb	r6, r6
 8008d62:	4283      	cmp	r3, r0
 8008d64:	4637      	mov	r7, r6
 8008d66:	dc04      	bgt.n	8008d72 <__swbuf_r+0x3a>
 8008d68:	4621      	mov	r1, r4
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	f7ff fdf8 	bl	8008960 <_fflush_r>
 8008d70:	b9e0      	cbnz	r0, 8008dac <__swbuf_r+0x74>
 8008d72:	68a3      	ldr	r3, [r4, #8]
 8008d74:	3b01      	subs	r3, #1
 8008d76:	60a3      	str	r3, [r4, #8]
 8008d78:	6823      	ldr	r3, [r4, #0]
 8008d7a:	1c5a      	adds	r2, r3, #1
 8008d7c:	6022      	str	r2, [r4, #0]
 8008d7e:	701e      	strb	r6, [r3, #0]
 8008d80:	6962      	ldr	r2, [r4, #20]
 8008d82:	1c43      	adds	r3, r0, #1
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d004      	beq.n	8008d92 <__swbuf_r+0x5a>
 8008d88:	89a3      	ldrh	r3, [r4, #12]
 8008d8a:	07db      	lsls	r3, r3, #31
 8008d8c:	d506      	bpl.n	8008d9c <__swbuf_r+0x64>
 8008d8e:	2e0a      	cmp	r6, #10
 8008d90:	d104      	bne.n	8008d9c <__swbuf_r+0x64>
 8008d92:	4621      	mov	r1, r4
 8008d94:	4628      	mov	r0, r5
 8008d96:	f7ff fde3 	bl	8008960 <_fflush_r>
 8008d9a:	b938      	cbnz	r0, 8008dac <__swbuf_r+0x74>
 8008d9c:	4638      	mov	r0, r7
 8008d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008da0:	4621      	mov	r1, r4
 8008da2:	4628      	mov	r0, r5
 8008da4:	f000 f806 	bl	8008db4 <__swsetup_r>
 8008da8:	2800      	cmp	r0, #0
 8008daa:	d0d5      	beq.n	8008d58 <__swbuf_r+0x20>
 8008dac:	f04f 37ff 	mov.w	r7, #4294967295
 8008db0:	e7f4      	b.n	8008d9c <__swbuf_r+0x64>
	...

08008db4 <__swsetup_r>:
 8008db4:	b538      	push	{r3, r4, r5, lr}
 8008db6:	4b2a      	ldr	r3, [pc, #168]	; (8008e60 <__swsetup_r+0xac>)
 8008db8:	4605      	mov	r5, r0
 8008dba:	6818      	ldr	r0, [r3, #0]
 8008dbc:	460c      	mov	r4, r1
 8008dbe:	b118      	cbz	r0, 8008dc8 <__swsetup_r+0x14>
 8008dc0:	6a03      	ldr	r3, [r0, #32]
 8008dc2:	b90b      	cbnz	r3, 8008dc8 <__swsetup_r+0x14>
 8008dc4:	f7fe ffbc 	bl	8007d40 <__sinit>
 8008dc8:	89a3      	ldrh	r3, [r4, #12]
 8008dca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008dce:	0718      	lsls	r0, r3, #28
 8008dd0:	d422      	bmi.n	8008e18 <__swsetup_r+0x64>
 8008dd2:	06d9      	lsls	r1, r3, #27
 8008dd4:	d407      	bmi.n	8008de6 <__swsetup_r+0x32>
 8008dd6:	2309      	movs	r3, #9
 8008dd8:	602b      	str	r3, [r5, #0]
 8008dda:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008dde:	81a3      	strh	r3, [r4, #12]
 8008de0:	f04f 30ff 	mov.w	r0, #4294967295
 8008de4:	e034      	b.n	8008e50 <__swsetup_r+0x9c>
 8008de6:	0758      	lsls	r0, r3, #29
 8008de8:	d512      	bpl.n	8008e10 <__swsetup_r+0x5c>
 8008dea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dec:	b141      	cbz	r1, 8008e00 <__swsetup_r+0x4c>
 8008dee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008df2:	4299      	cmp	r1, r3
 8008df4:	d002      	beq.n	8008dfc <__swsetup_r+0x48>
 8008df6:	4628      	mov	r0, r5
 8008df8:	f7ff f944 	bl	8008084 <_free_r>
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	6363      	str	r3, [r4, #52]	; 0x34
 8008e00:	89a3      	ldrh	r3, [r4, #12]
 8008e02:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e06:	81a3      	strh	r3, [r4, #12]
 8008e08:	2300      	movs	r3, #0
 8008e0a:	6063      	str	r3, [r4, #4]
 8008e0c:	6923      	ldr	r3, [r4, #16]
 8008e0e:	6023      	str	r3, [r4, #0]
 8008e10:	89a3      	ldrh	r3, [r4, #12]
 8008e12:	f043 0308 	orr.w	r3, r3, #8
 8008e16:	81a3      	strh	r3, [r4, #12]
 8008e18:	6923      	ldr	r3, [r4, #16]
 8008e1a:	b94b      	cbnz	r3, 8008e30 <__swsetup_r+0x7c>
 8008e1c:	89a3      	ldrh	r3, [r4, #12]
 8008e1e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e26:	d003      	beq.n	8008e30 <__swsetup_r+0x7c>
 8008e28:	4621      	mov	r1, r4
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	f000 f88c 	bl	8008f48 <__smakebuf_r>
 8008e30:	89a0      	ldrh	r0, [r4, #12]
 8008e32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e36:	f010 0301 	ands.w	r3, r0, #1
 8008e3a:	d00a      	beq.n	8008e52 <__swsetup_r+0x9e>
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	60a3      	str	r3, [r4, #8]
 8008e40:	6963      	ldr	r3, [r4, #20]
 8008e42:	425b      	negs	r3, r3
 8008e44:	61a3      	str	r3, [r4, #24]
 8008e46:	6923      	ldr	r3, [r4, #16]
 8008e48:	b943      	cbnz	r3, 8008e5c <__swsetup_r+0xa8>
 8008e4a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e4e:	d1c4      	bne.n	8008dda <__swsetup_r+0x26>
 8008e50:	bd38      	pop	{r3, r4, r5, pc}
 8008e52:	0781      	lsls	r1, r0, #30
 8008e54:	bf58      	it	pl
 8008e56:	6963      	ldrpl	r3, [r4, #20]
 8008e58:	60a3      	str	r3, [r4, #8]
 8008e5a:	e7f4      	b.n	8008e46 <__swsetup_r+0x92>
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	e7f7      	b.n	8008e50 <__swsetup_r+0x9c>
 8008e60:	20000120 	.word	0x20000120

08008e64 <_raise_r>:
 8008e64:	291f      	cmp	r1, #31
 8008e66:	b538      	push	{r3, r4, r5, lr}
 8008e68:	4604      	mov	r4, r0
 8008e6a:	460d      	mov	r5, r1
 8008e6c:	d904      	bls.n	8008e78 <_raise_r+0x14>
 8008e6e:	2316      	movs	r3, #22
 8008e70:	6003      	str	r3, [r0, #0]
 8008e72:	f04f 30ff 	mov.w	r0, #4294967295
 8008e76:	bd38      	pop	{r3, r4, r5, pc}
 8008e78:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008e7a:	b112      	cbz	r2, 8008e82 <_raise_r+0x1e>
 8008e7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e80:	b94b      	cbnz	r3, 8008e96 <_raise_r+0x32>
 8008e82:	4620      	mov	r0, r4
 8008e84:	f000 f830 	bl	8008ee8 <_getpid_r>
 8008e88:	462a      	mov	r2, r5
 8008e8a:	4601      	mov	r1, r0
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e92:	f000 b817 	b.w	8008ec4 <_kill_r>
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d00a      	beq.n	8008eb0 <_raise_r+0x4c>
 8008e9a:	1c59      	adds	r1, r3, #1
 8008e9c:	d103      	bne.n	8008ea6 <_raise_r+0x42>
 8008e9e:	2316      	movs	r3, #22
 8008ea0:	6003      	str	r3, [r0, #0]
 8008ea2:	2001      	movs	r0, #1
 8008ea4:	e7e7      	b.n	8008e76 <_raise_r+0x12>
 8008ea6:	2400      	movs	r4, #0
 8008ea8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008eac:	4628      	mov	r0, r5
 8008eae:	4798      	blx	r3
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	e7e0      	b.n	8008e76 <_raise_r+0x12>

08008eb4 <raise>:
 8008eb4:	4b02      	ldr	r3, [pc, #8]	; (8008ec0 <raise+0xc>)
 8008eb6:	4601      	mov	r1, r0
 8008eb8:	6818      	ldr	r0, [r3, #0]
 8008eba:	f7ff bfd3 	b.w	8008e64 <_raise_r>
 8008ebe:	bf00      	nop
 8008ec0:	20000120 	.word	0x20000120

08008ec4 <_kill_r>:
 8008ec4:	b538      	push	{r3, r4, r5, lr}
 8008ec6:	4d07      	ldr	r5, [pc, #28]	; (8008ee4 <_kill_r+0x20>)
 8008ec8:	2300      	movs	r3, #0
 8008eca:	4604      	mov	r4, r0
 8008ecc:	4608      	mov	r0, r1
 8008ece:	4611      	mov	r1, r2
 8008ed0:	602b      	str	r3, [r5, #0]
 8008ed2:	f7f7 ff6b 	bl	8000dac <_kill>
 8008ed6:	1c43      	adds	r3, r0, #1
 8008ed8:	d102      	bne.n	8008ee0 <_kill_r+0x1c>
 8008eda:	682b      	ldr	r3, [r5, #0]
 8008edc:	b103      	cbz	r3, 8008ee0 <_kill_r+0x1c>
 8008ede:	6023      	str	r3, [r4, #0]
 8008ee0:	bd38      	pop	{r3, r4, r5, pc}
 8008ee2:	bf00      	nop
 8008ee4:	20000620 	.word	0x20000620

08008ee8 <_getpid_r>:
 8008ee8:	f7f7 bf58 	b.w	8000d9c <_getpid>

08008eec <_malloc_usable_size_r>:
 8008eec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ef0:	1f18      	subs	r0, r3, #4
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	bfbc      	itt	lt
 8008ef6:	580b      	ldrlt	r3, [r1, r0]
 8008ef8:	18c0      	addlt	r0, r0, r3
 8008efa:	4770      	bx	lr

08008efc <__swhatbuf_r>:
 8008efc:	b570      	push	{r4, r5, r6, lr}
 8008efe:	460c      	mov	r4, r1
 8008f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f04:	2900      	cmp	r1, #0
 8008f06:	b096      	sub	sp, #88	; 0x58
 8008f08:	4615      	mov	r5, r2
 8008f0a:	461e      	mov	r6, r3
 8008f0c:	da0d      	bge.n	8008f2a <__swhatbuf_r+0x2e>
 8008f0e:	89a3      	ldrh	r3, [r4, #12]
 8008f10:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008f14:	f04f 0100 	mov.w	r1, #0
 8008f18:	bf0c      	ite	eq
 8008f1a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008f1e:	2340      	movne	r3, #64	; 0x40
 8008f20:	2000      	movs	r0, #0
 8008f22:	6031      	str	r1, [r6, #0]
 8008f24:	602b      	str	r3, [r5, #0]
 8008f26:	b016      	add	sp, #88	; 0x58
 8008f28:	bd70      	pop	{r4, r5, r6, pc}
 8008f2a:	466a      	mov	r2, sp
 8008f2c:	f000 f848 	bl	8008fc0 <_fstat_r>
 8008f30:	2800      	cmp	r0, #0
 8008f32:	dbec      	blt.n	8008f0e <__swhatbuf_r+0x12>
 8008f34:	9901      	ldr	r1, [sp, #4]
 8008f36:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008f3a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008f3e:	4259      	negs	r1, r3
 8008f40:	4159      	adcs	r1, r3
 8008f42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f46:	e7eb      	b.n	8008f20 <__swhatbuf_r+0x24>

08008f48 <__smakebuf_r>:
 8008f48:	898b      	ldrh	r3, [r1, #12]
 8008f4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f4c:	079d      	lsls	r5, r3, #30
 8008f4e:	4606      	mov	r6, r0
 8008f50:	460c      	mov	r4, r1
 8008f52:	d507      	bpl.n	8008f64 <__smakebuf_r+0x1c>
 8008f54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f58:	6023      	str	r3, [r4, #0]
 8008f5a:	6123      	str	r3, [r4, #16]
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	6163      	str	r3, [r4, #20]
 8008f60:	b002      	add	sp, #8
 8008f62:	bd70      	pop	{r4, r5, r6, pc}
 8008f64:	ab01      	add	r3, sp, #4
 8008f66:	466a      	mov	r2, sp
 8008f68:	f7ff ffc8 	bl	8008efc <__swhatbuf_r>
 8008f6c:	9900      	ldr	r1, [sp, #0]
 8008f6e:	4605      	mov	r5, r0
 8008f70:	4630      	mov	r0, r6
 8008f72:	f7ff f8fb 	bl	800816c <_malloc_r>
 8008f76:	b948      	cbnz	r0, 8008f8c <__smakebuf_r+0x44>
 8008f78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f7c:	059a      	lsls	r2, r3, #22
 8008f7e:	d4ef      	bmi.n	8008f60 <__smakebuf_r+0x18>
 8008f80:	f023 0303 	bic.w	r3, r3, #3
 8008f84:	f043 0302 	orr.w	r3, r3, #2
 8008f88:	81a3      	strh	r3, [r4, #12]
 8008f8a:	e7e3      	b.n	8008f54 <__smakebuf_r+0xc>
 8008f8c:	89a3      	ldrh	r3, [r4, #12]
 8008f8e:	6020      	str	r0, [r4, #0]
 8008f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f94:	81a3      	strh	r3, [r4, #12]
 8008f96:	9b00      	ldr	r3, [sp, #0]
 8008f98:	6163      	str	r3, [r4, #20]
 8008f9a:	9b01      	ldr	r3, [sp, #4]
 8008f9c:	6120      	str	r0, [r4, #16]
 8008f9e:	b15b      	cbz	r3, 8008fb8 <__smakebuf_r+0x70>
 8008fa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fa4:	4630      	mov	r0, r6
 8008fa6:	f000 f81d 	bl	8008fe4 <_isatty_r>
 8008faa:	b128      	cbz	r0, 8008fb8 <__smakebuf_r+0x70>
 8008fac:	89a3      	ldrh	r3, [r4, #12]
 8008fae:	f023 0303 	bic.w	r3, r3, #3
 8008fb2:	f043 0301 	orr.w	r3, r3, #1
 8008fb6:	81a3      	strh	r3, [r4, #12]
 8008fb8:	89a3      	ldrh	r3, [r4, #12]
 8008fba:	431d      	orrs	r5, r3
 8008fbc:	81a5      	strh	r5, [r4, #12]
 8008fbe:	e7cf      	b.n	8008f60 <__smakebuf_r+0x18>

08008fc0 <_fstat_r>:
 8008fc0:	b538      	push	{r3, r4, r5, lr}
 8008fc2:	4d07      	ldr	r5, [pc, #28]	; (8008fe0 <_fstat_r+0x20>)
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	4604      	mov	r4, r0
 8008fc8:	4608      	mov	r0, r1
 8008fca:	4611      	mov	r1, r2
 8008fcc:	602b      	str	r3, [r5, #0]
 8008fce:	f7f7 ff4c 	bl	8000e6a <_fstat>
 8008fd2:	1c43      	adds	r3, r0, #1
 8008fd4:	d102      	bne.n	8008fdc <_fstat_r+0x1c>
 8008fd6:	682b      	ldr	r3, [r5, #0]
 8008fd8:	b103      	cbz	r3, 8008fdc <_fstat_r+0x1c>
 8008fda:	6023      	str	r3, [r4, #0]
 8008fdc:	bd38      	pop	{r3, r4, r5, pc}
 8008fde:	bf00      	nop
 8008fe0:	20000620 	.word	0x20000620

08008fe4 <_isatty_r>:
 8008fe4:	b538      	push	{r3, r4, r5, lr}
 8008fe6:	4d06      	ldr	r5, [pc, #24]	; (8009000 <_isatty_r+0x1c>)
 8008fe8:	2300      	movs	r3, #0
 8008fea:	4604      	mov	r4, r0
 8008fec:	4608      	mov	r0, r1
 8008fee:	602b      	str	r3, [r5, #0]
 8008ff0:	f7f7 ff4b 	bl	8000e8a <_isatty>
 8008ff4:	1c43      	adds	r3, r0, #1
 8008ff6:	d102      	bne.n	8008ffe <_isatty_r+0x1a>
 8008ff8:	682b      	ldr	r3, [r5, #0]
 8008ffa:	b103      	cbz	r3, 8008ffe <_isatty_r+0x1a>
 8008ffc:	6023      	str	r3, [r4, #0]
 8008ffe:	bd38      	pop	{r3, r4, r5, pc}
 8009000:	20000620 	.word	0x20000620

08009004 <_init>:
 8009004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009006:	bf00      	nop
 8009008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800900a:	bc08      	pop	{r3}
 800900c:	469e      	mov	lr, r3
 800900e:	4770      	bx	lr

08009010 <_fini>:
 8009010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009012:	bf00      	nop
 8009014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009016:	bc08      	pop	{r3}
 8009018:	469e      	mov	lr, r3
 800901a:	4770      	bx	lr
