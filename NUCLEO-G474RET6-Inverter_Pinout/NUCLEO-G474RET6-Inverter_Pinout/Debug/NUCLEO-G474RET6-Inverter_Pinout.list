
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bca4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  0800be88  0800be88  0001be88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c308  0800c308  00020290  2**0
                  CONTENTS
  4 .ARM          00000008  0800c308  0800c308  0001c308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c310  0800c310  00020290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c310  0800c310  0001c310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c314  0800c314  0001c314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  0800c318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000290  0800c5a8  00020290  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000079c  0800c5a8  0002079c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ae5a  00000000  00000000  00020303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036bc  00000000  00000000  0003b15d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f8  00000000  00000000  0003e820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010fc  00000000  00000000  0003fe18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a206  00000000  00000000  00040f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b252  00000000  00000000  0006b11a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001145fe  00000000  00000000  0008636c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007030  00000000  00000000  0019a96c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  001a199c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000290 	.word	0x20000290
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800be6c 	.word	0x0800be6c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000294 	.word	0x20000294
 800021c:	0800be6c 	.word	0x0800be6c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b970 	b.w	8000fb0 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	460d      	mov	r5, r1
 8000cf0:	4604      	mov	r4, r0
 8000cf2:	460f      	mov	r7, r1
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d14a      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf8:	428a      	cmp	r2, r1
 8000cfa:	4694      	mov	ip, r2
 8000cfc:	d965      	bls.n	8000dca <__udivmoddi4+0xe2>
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	b143      	cbz	r3, 8000d16 <__udivmoddi4+0x2e>
 8000d04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d08:	f1c3 0220 	rsb	r2, r3, #32
 8000d0c:	409f      	lsls	r7, r3
 8000d0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d12:	4317      	orrs	r7, r2
 8000d14:	409c      	lsls	r4, r3
 8000d16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d1a:	fa1f f58c 	uxth.w	r5, ip
 8000d1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d22:	0c22      	lsrs	r2, r4, #16
 8000d24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d2c:	fb01 f005 	mul.w	r0, r1, r5
 8000d30:	4290      	cmp	r0, r2
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x62>
 8000d34:	eb1c 0202 	adds.w	r2, ip, r2
 8000d38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d3c:	f080 811c 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d40:	4290      	cmp	r0, r2
 8000d42:	f240 8119 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d46:	3902      	subs	r1, #2
 8000d48:	4462      	add	r2, ip
 8000d4a:	1a12      	subs	r2, r2, r0
 8000d4c:	b2a4      	uxth	r4, r4
 8000d4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5a:	fb00 f505 	mul.w	r5, r0, r5
 8000d5e:	42a5      	cmp	r5, r4
 8000d60:	d90a      	bls.n	8000d78 <__udivmoddi4+0x90>
 8000d62:	eb1c 0404 	adds.w	r4, ip, r4
 8000d66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6a:	f080 8107 	bcs.w	8000f7c <__udivmoddi4+0x294>
 8000d6e:	42a5      	cmp	r5, r4
 8000d70:	f240 8104 	bls.w	8000f7c <__udivmoddi4+0x294>
 8000d74:	4464      	add	r4, ip
 8000d76:	3802      	subs	r0, #2
 8000d78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d7c:	1b64      	subs	r4, r4, r5
 8000d7e:	2100      	movs	r1, #0
 8000d80:	b11e      	cbz	r6, 8000d8a <__udivmoddi4+0xa2>
 8000d82:	40dc      	lsrs	r4, r3
 8000d84:	2300      	movs	r3, #0
 8000d86:	e9c6 4300 	strd	r4, r3, [r6]
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0xbc>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80ed 	beq.w	8000f72 <__udivmoddi4+0x28a>
 8000d98:	2100      	movs	r1, #0
 8000d9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da4:	fab3 f183 	clz	r1, r3
 8000da8:	2900      	cmp	r1, #0
 8000daa:	d149      	bne.n	8000e40 <__udivmoddi4+0x158>
 8000dac:	42ab      	cmp	r3, r5
 8000dae:	d302      	bcc.n	8000db6 <__udivmoddi4+0xce>
 8000db0:	4282      	cmp	r2, r0
 8000db2:	f200 80f8 	bhi.w	8000fa6 <__udivmoddi4+0x2be>
 8000db6:	1a84      	subs	r4, r0, r2
 8000db8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	4617      	mov	r7, r2
 8000dc0:	2e00      	cmp	r6, #0
 8000dc2:	d0e2      	beq.n	8000d8a <__udivmoddi4+0xa2>
 8000dc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000dc8:	e7df      	b.n	8000d8a <__udivmoddi4+0xa2>
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xe6>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f382 	clz	r3, r2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f040 8090 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dd8:	1a8a      	subs	r2, r1, r2
 8000dda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dde:	fa1f fe8c 	uxth.w	lr, ip
 8000de2:	2101      	movs	r1, #1
 8000de4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000de8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dec:	0c22      	lsrs	r2, r4, #16
 8000dee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000df2:	fb0e f005 	mul.w	r0, lr, r5
 8000df6:	4290      	cmp	r0, r2
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4290      	cmp	r0, r2
 8000e06:	f200 80cb 	bhi.w	8000fa0 <__udivmoddi4+0x2b8>
 8000e0a:	4645      	mov	r5, r8
 8000e0c:	1a12      	subs	r2, r2, r0
 8000e0e:	b2a4      	uxth	r4, r4
 8000e10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e14:	fb07 2210 	mls	r2, r7, r0, r2
 8000e18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e20:	45a6      	cmp	lr, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x14e>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e2c:	d202      	bcs.n	8000e34 <__udivmoddi4+0x14c>
 8000e2e:	45a6      	cmp	lr, r4
 8000e30:	f200 80bb 	bhi.w	8000faa <__udivmoddi4+0x2c2>
 8000e34:	4610      	mov	r0, r2
 8000e36:	eba4 040e 	sub.w	r4, r4, lr
 8000e3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e3e:	e79f      	b.n	8000d80 <__udivmoddi4+0x98>
 8000e40:	f1c1 0720 	rsb	r7, r1, #32
 8000e44:	408b      	lsls	r3, r1
 8000e46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e52:	fa20 f307 	lsr.w	r3, r0, r7
 8000e56:	40fd      	lsrs	r5, r7
 8000e58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e5c:	4323      	orrs	r3, r4
 8000e5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	fb09 5518 	mls	r5, r9, r8, r5
 8000e6a:	0c1c      	lsrs	r4, r3, #16
 8000e6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e70:	fb08 f50e 	mul.w	r5, r8, lr
 8000e74:	42a5      	cmp	r5, r4
 8000e76:	fa02 f201 	lsl.w	r2, r2, r1
 8000e7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e88:	f080 8088 	bcs.w	8000f9c <__udivmoddi4+0x2b4>
 8000e8c:	42a5      	cmp	r5, r4
 8000e8e:	f240 8085 	bls.w	8000f9c <__udivmoddi4+0x2b4>
 8000e92:	f1a8 0802 	sub.w	r8, r8, #2
 8000e96:	4464      	add	r4, ip
 8000e98:	1b64      	subs	r4, r4, r5
 8000e9a:	b29d      	uxth	r5, r3
 8000e9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ea0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ea4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ea8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000eb8:	d26c      	bcs.n	8000f94 <__udivmoddi4+0x2ac>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	d96a      	bls.n	8000f94 <__udivmoddi4+0x2ac>
 8000ebe:	3b02      	subs	r3, #2
 8000ec0:	4464      	add	r4, ip
 8000ec2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ec6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	42ac      	cmp	r4, r5
 8000ed0:	46c8      	mov	r8, r9
 8000ed2:	46ae      	mov	lr, r5
 8000ed4:	d356      	bcc.n	8000f84 <__udivmoddi4+0x29c>
 8000ed6:	d053      	beq.n	8000f80 <__udivmoddi4+0x298>
 8000ed8:	b156      	cbz	r6, 8000ef0 <__udivmoddi4+0x208>
 8000eda:	ebb0 0208 	subs.w	r2, r0, r8
 8000ede:	eb64 040e 	sbc.w	r4, r4, lr
 8000ee2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ee6:	40ca      	lsrs	r2, r1
 8000ee8:	40cc      	lsrs	r4, r1
 8000eea:	4317      	orrs	r7, r2
 8000eec:	e9c6 7400 	strd	r7, r4, [r6]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef8:	f1c3 0120 	rsb	r1, r3, #32
 8000efc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f00:	fa20 f201 	lsr.w	r2, r0, r1
 8000f04:	fa25 f101 	lsr.w	r1, r5, r1
 8000f08:	409d      	lsls	r5, r3
 8000f0a:	432a      	orrs	r2, r5
 8000f0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f10:	fa1f fe8c 	uxth.w	lr, ip
 8000f14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f18:	fb07 1510 	mls	r5, r7, r0, r1
 8000f1c:	0c11      	lsrs	r1, r2, #16
 8000f1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f22:	fb00 f50e 	mul.w	r5, r0, lr
 8000f26:	428d      	cmp	r5, r1
 8000f28:	fa04 f403 	lsl.w	r4, r4, r3
 8000f2c:	d908      	bls.n	8000f40 <__udivmoddi4+0x258>
 8000f2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f36:	d22f      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f38:	428d      	cmp	r5, r1
 8000f3a:	d92d      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	4461      	add	r1, ip
 8000f40:	1b49      	subs	r1, r1, r5
 8000f42:	b292      	uxth	r2, r2
 8000f44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f48:	fb07 1115 	mls	r1, r7, r5, r1
 8000f4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f50:	fb05 f10e 	mul.w	r1, r5, lr
 8000f54:	4291      	cmp	r1, r2
 8000f56:	d908      	bls.n	8000f6a <__udivmoddi4+0x282>
 8000f58:	eb1c 0202 	adds.w	r2, ip, r2
 8000f5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f60:	d216      	bcs.n	8000f90 <__udivmoddi4+0x2a8>
 8000f62:	4291      	cmp	r1, r2
 8000f64:	d914      	bls.n	8000f90 <__udivmoddi4+0x2a8>
 8000f66:	3d02      	subs	r5, #2
 8000f68:	4462      	add	r2, ip
 8000f6a:	1a52      	subs	r2, r2, r1
 8000f6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f70:	e738      	b.n	8000de4 <__udivmoddi4+0xfc>
 8000f72:	4631      	mov	r1, r6
 8000f74:	4630      	mov	r0, r6
 8000f76:	e708      	b.n	8000d8a <__udivmoddi4+0xa2>
 8000f78:	4639      	mov	r1, r7
 8000f7a:	e6e6      	b.n	8000d4a <__udivmoddi4+0x62>
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	e6fb      	b.n	8000d78 <__udivmoddi4+0x90>
 8000f80:	4548      	cmp	r0, r9
 8000f82:	d2a9      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f84:	ebb9 0802 	subs.w	r8, r9, r2
 8000f88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	e7a3      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f90:	4645      	mov	r5, r8
 8000f92:	e7ea      	b.n	8000f6a <__udivmoddi4+0x282>
 8000f94:	462b      	mov	r3, r5
 8000f96:	e794      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f98:	4640      	mov	r0, r8
 8000f9a:	e7d1      	b.n	8000f40 <__udivmoddi4+0x258>
 8000f9c:	46d0      	mov	r8, sl
 8000f9e:	e77b      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000fa0:	3d02      	subs	r5, #2
 8000fa2:	4462      	add	r2, ip
 8000fa4:	e732      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e70a      	b.n	8000dc0 <__udivmoddi4+0xd8>
 8000faa:	4464      	add	r4, ip
 8000fac:	3802      	subs	r0, #2
 8000fae:	e742      	b.n	8000e36 <__udivmoddi4+0x14e>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08c      	sub	sp, #48	; 0x30
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	2220      	movs	r2, #32
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f008 fdfa 	bl	8009bc6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fd2:	4b32      	ldr	r3, [pc, #200]	; (800109c <MX_ADC1_Init+0xe8>)
 8000fd4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fd8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fda:	4b30      	ldr	r3, [pc, #192]	; (800109c <MX_ADC1_Init+0xe8>)
 8000fdc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fe0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fe2:	4b2e      	ldr	r3, [pc, #184]	; (800109c <MX_ADC1_Init+0xe8>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fe8:	4b2c      	ldr	r3, [pc, #176]	; (800109c <MX_ADC1_Init+0xe8>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000fee:	4b2b      	ldr	r3, [pc, #172]	; (800109c <MX_ADC1_Init+0xe8>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ff4:	4b29      	ldr	r3, [pc, #164]	; (800109c <MX_ADC1_Init+0xe8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ffa:	4b28      	ldr	r3, [pc, #160]	; (800109c <MX_ADC1_Init+0xe8>)
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001000:	4b26      	ldr	r3, [pc, #152]	; (800109c <MX_ADC1_Init+0xe8>)
 8001002:	2200      	movs	r2, #0
 8001004:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001006:	4b25      	ldr	r3, [pc, #148]	; (800109c <MX_ADC1_Init+0xe8>)
 8001008:	2200      	movs	r2, #0
 800100a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800100c:	4b23      	ldr	r3, [pc, #140]	; (800109c <MX_ADC1_Init+0xe8>)
 800100e:	2201      	movs	r2, #1
 8001010:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001012:	4b22      	ldr	r3, [pc, #136]	; (800109c <MX_ADC1_Init+0xe8>)
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800101a:	4b20      	ldr	r3, [pc, #128]	; (800109c <MX_ADC1_Init+0xe8>)
 800101c:	2200      	movs	r2, #0
 800101e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001020:	4b1e      	ldr	r3, [pc, #120]	; (800109c <MX_ADC1_Init+0xe8>)
 8001022:	2200      	movs	r2, #0
 8001024:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001026:	4b1d      	ldr	r3, [pc, #116]	; (800109c <MX_ADC1_Init+0xe8>)
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800102e:	4b1b      	ldr	r3, [pc, #108]	; (800109c <MX_ADC1_Init+0xe8>)
 8001030:	2200      	movs	r2, #0
 8001032:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001034:	4b19      	ldr	r3, [pc, #100]	; (800109c <MX_ADC1_Init+0xe8>)
 8001036:	2200      	movs	r2, #0
 8001038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800103c:	4817      	ldr	r0, [pc, #92]	; (800109c <MX_ADC1_Init+0xe8>)
 800103e:	f001 fc4d 	bl	80028dc <HAL_ADC_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001048:	f000 fa98 	bl	800157c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800104c:	2300      	movs	r3, #0
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001054:	4619      	mov	r1, r3
 8001056:	4811      	ldr	r0, [pc, #68]	; (800109c <MX_ADC1_Init+0xe8>)
 8001058:	f002 fcaa 	bl	80039b0 <HAL_ADCEx_MultiModeConfigChannel>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001062:	f000 fa8b 	bl	800157c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <MX_ADC1_Init+0xec>)
 8001068:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800106a:	2306      	movs	r3, #6
 800106c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001072:	237f      	movs	r3, #127	; 0x7f
 8001074:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001076:	2304      	movs	r3, #4
 8001078:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	4619      	mov	r1, r3
 8001082:	4806      	ldr	r0, [pc, #24]	; (800109c <MX_ADC1_Init+0xe8>)
 8001084:	f001 fede 	bl	8002e44 <HAL_ADC_ConfigChannel>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800108e:	f000 fa75 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	3730      	adds	r7, #48	; 0x30
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	200002ac 	.word	0x200002ac
 80010a0:	08600004 	.word	0x08600004

080010a4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010aa:	463b      	mov	r3, r7
 80010ac:	2220      	movs	r2, #32
 80010ae:	2100      	movs	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f008 fd88 	bl	8009bc6 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80010b6:	4b2b      	ldr	r3, [pc, #172]	; (8001164 <MX_ADC2_Init+0xc0>)
 80010b8:	4a2b      	ldr	r2, [pc, #172]	; (8001168 <MX_ADC2_Init+0xc4>)
 80010ba:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010bc:	4b29      	ldr	r3, [pc, #164]	; (8001164 <MX_ADC2_Init+0xc0>)
 80010be:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010c2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010c4:	4b27      	ldr	r3, [pc, #156]	; (8001164 <MX_ADC2_Init+0xc0>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ca:	4b26      	ldr	r3, [pc, #152]	; (8001164 <MX_ADC2_Init+0xc0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80010d0:	4b24      	ldr	r3, [pc, #144]	; (8001164 <MX_ADC2_Init+0xc0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010d6:	4b23      	ldr	r3, [pc, #140]	; (8001164 <MX_ADC2_Init+0xc0>)
 80010d8:	2200      	movs	r2, #0
 80010da:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010dc:	4b21      	ldr	r3, [pc, #132]	; (8001164 <MX_ADC2_Init+0xc0>)
 80010de:	2204      	movs	r2, #4
 80010e0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80010e2:	4b20      	ldr	r3, [pc, #128]	; (8001164 <MX_ADC2_Init+0xc0>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010e8:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <MX_ADC2_Init+0xc0>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80010ee:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <MX_ADC2_Init+0xc0>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <MX_ADC2_Init+0xc0>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010fc:	4b19      	ldr	r3, [pc, #100]	; (8001164 <MX_ADC2_Init+0xc0>)
 80010fe:	2200      	movs	r2, #0
 8001100:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001102:	4b18      	ldr	r3, [pc, #96]	; (8001164 <MX_ADC2_Init+0xc0>)
 8001104:	2200      	movs	r2, #0
 8001106:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001108:	4b16      	ldr	r3, [pc, #88]	; (8001164 <MX_ADC2_Init+0xc0>)
 800110a:	2200      	movs	r2, #0
 800110c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <MX_ADC2_Init+0xc0>)
 8001112:	2200      	movs	r2, #0
 8001114:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001116:	4b13      	ldr	r3, [pc, #76]	; (8001164 <MX_ADC2_Init+0xc0>)
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800111e:	4811      	ldr	r0, [pc, #68]	; (8001164 <MX_ADC2_Init+0xc0>)
 8001120:	f001 fbdc 	bl	80028dc <HAL_ADC_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800112a:	f000 fa27 	bl	800157c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <MX_ADC2_Init+0xc8>)
 8001130:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001132:	2306      	movs	r3, #6
 8001134:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800113a:	237f      	movs	r3, #127	; 0x7f
 800113c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800113e:	2304      	movs	r3, #4
 8001140:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001146:	463b      	mov	r3, r7
 8001148:	4619      	mov	r1, r3
 800114a:	4806      	ldr	r0, [pc, #24]	; (8001164 <MX_ADC2_Init+0xc0>)
 800114c:	f001 fe7a 	bl	8002e44 <HAL_ADC_ConfigChannel>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001156:	f000 fa11 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	3720      	adds	r7, #32
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000318 	.word	0x20000318
 8001168:	50000100 	.word	0x50000100
 800116c:	19200040 	.word	0x19200040

08001170 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b0a4      	sub	sp, #144	; 0x90
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001188:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800118c:	2254      	movs	r2, #84	; 0x54
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f008 fd18 	bl	8009bc6 <memset>
  if(adcHandle->Instance==ADC1)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800119e:	d174      	bne.n	800128a <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011a4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011a6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80011aa:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011b0:	4618      	mov	r0, r3
 80011b2:	f003 fe7d 	bl	8004eb0 <HAL_RCCEx_PeriphCLKConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80011bc:	f000 f9de 	bl	800157c <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80011c0:	4b63      	ldr	r3, [pc, #396]	; (8001350 <HAL_ADC_MspInit+0x1e0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	3301      	adds	r3, #1
 80011c6:	4a62      	ldr	r2, [pc, #392]	; (8001350 <HAL_ADC_MspInit+0x1e0>)
 80011c8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80011ca:	4b61      	ldr	r3, [pc, #388]	; (8001350 <HAL_ADC_MspInit+0x1e0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d10b      	bne.n	80011ea <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80011d2:	4b60      	ldr	r3, [pc, #384]	; (8001354 <HAL_ADC_MspInit+0x1e4>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d6:	4a5f      	ldr	r2, [pc, #380]	; (8001354 <HAL_ADC_MspInit+0x1e4>)
 80011d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011de:	4b5d      	ldr	r3, [pc, #372]	; (8001354 <HAL_ADC_MspInit+0x1e4>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
 80011e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ea:	4b5a      	ldr	r3, [pc, #360]	; (8001354 <HAL_ADC_MspInit+0x1e4>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ee:	4a59      	ldr	r2, [pc, #356]	; (8001354 <HAL_ADC_MspInit+0x1e4>)
 80011f0:	f043 0304 	orr.w	r3, r3, #4
 80011f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f6:	4b57      	ldr	r3, [pc, #348]	; (8001354 <HAL_ADC_MspInit+0x1e4>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	f003 0304 	and.w	r3, r3, #4
 80011fe:	623b      	str	r3, [r7, #32]
 8001200:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	4b54      	ldr	r3, [pc, #336]	; (8001354 <HAL_ADC_MspInit+0x1e4>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001206:	4a53      	ldr	r2, [pc, #332]	; (8001354 <HAL_ADC_MspInit+0x1e4>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120e:	4b51      	ldr	r3, [pc, #324]	; (8001354 <HAL_ADC_MspInit+0x1e4>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	61fb      	str	r3, [r7, #28]
 8001218:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121a:	4b4e      	ldr	r3, [pc, #312]	; (8001354 <HAL_ADC_MspInit+0x1e4>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	4a4d      	ldr	r2, [pc, #308]	; (8001354 <HAL_ADC_MspInit+0x1e4>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001226:	4b4b      	ldr	r3, [pc, #300]	; (8001354 <HAL_ADC_MspInit+0x1e4>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	61bb      	str	r3, [r7, #24]
 8001230:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8001232:	2304      	movs	r3, #4
 8001234:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001236:	2303      	movs	r3, #3
 8001238:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 8001242:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001246:	4619      	mov	r1, r3
 8001248:	4843      	ldr	r0, [pc, #268]	; (8001358 <HAL_ADC_MspInit+0x1e8>)
 800124a:	f002 fe59 	bl	8003f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 800124e:	2302      	movs	r3, #2
 8001250:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001252:	2303      	movs	r3, #3
 8001254:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 800125e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001262:	4619      	mov	r1, r3
 8001264:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001268:	f002 fe4a 	bl	8003f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800126c:	2303      	movs	r3, #3
 800126e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001270:	2303      	movs	r3, #3
 8001272:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001280:	4619      	mov	r1, r3
 8001282:	4836      	ldr	r0, [pc, #216]	; (800135c <HAL_ADC_MspInit+0x1ec>)
 8001284:	f002 fe3c 	bl	8003f00 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001288:	e05e      	b.n	8001348 <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a34      	ldr	r2, [pc, #208]	; (8001360 <HAL_ADC_MspInit+0x1f0>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d159      	bne.n	8001348 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001294:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800129a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800129e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012a4:	4618      	mov	r0, r3
 80012a6:	f003 fe03 	bl	8004eb0 <HAL_RCCEx_PeriphCLKConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 80012b0:	f000 f964 	bl	800157c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012b4:	4b26      	ldr	r3, [pc, #152]	; (8001350 <HAL_ADC_MspInit+0x1e0>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	3301      	adds	r3, #1
 80012ba:	4a25      	ldr	r2, [pc, #148]	; (8001350 <HAL_ADC_MspInit+0x1e0>)
 80012bc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012be:	4b24      	ldr	r3, [pc, #144]	; (8001350 <HAL_ADC_MspInit+0x1e0>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d10b      	bne.n	80012de <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012c6:	4b23      	ldr	r3, [pc, #140]	; (8001354 <HAL_ADC_MspInit+0x1e4>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	4a22      	ldr	r2, [pc, #136]	; (8001354 <HAL_ADC_MspInit+0x1e4>)
 80012cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d2:	4b20      	ldr	r3, [pc, #128]	; (8001354 <HAL_ADC_MspInit+0x1e4>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012de:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <HAL_ADC_MspInit+0x1e4>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	4a1c      	ldr	r2, [pc, #112]	; (8001354 <HAL_ADC_MspInit+0x1e4>)
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <HAL_ADC_MspInit+0x1e4>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <HAL_ADC_MspInit+0x1e4>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	4a16      	ldr	r2, [pc, #88]	; (8001354 <HAL_ADC_MspInit+0x1e4>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <HAL_ADC_MspInit+0x1e4>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 800130e:	230b      	movs	r3, #11
 8001310:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001312:	2303      	movs	r3, #3
 8001314:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001322:	4619      	mov	r1, r3
 8001324:	480c      	ldr	r0, [pc, #48]	; (8001358 <HAL_ADC_MspInit+0x1e8>)
 8001326:	f002 fdeb 	bl	8003f00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 800132a:	2301      	movs	r3, #1
 800132c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800132e:	2303      	movs	r3, #3
 8001330:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800133e:	4619      	mov	r1, r3
 8001340:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001344:	f002 fddc 	bl	8003f00 <HAL_GPIO_Init>
}
 8001348:	bf00      	nop
 800134a:	3790      	adds	r7, #144	; 0x90
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000384 	.word	0x20000384
 8001354:	40021000 	.word	0x40021000
 8001358:	48000800 	.word	0x48000800
 800135c:	48000400 	.word	0x48000400
 8001360:	50000100 	.word	0x50000100

08001364 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137a:	4b3f      	ldr	r3, [pc, #252]	; (8001478 <MX_GPIO_Init+0x114>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	4a3e      	ldr	r2, [pc, #248]	; (8001478 <MX_GPIO_Init+0x114>)
 8001380:	f043 0304 	orr.w	r3, r3, #4
 8001384:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001386:	4b3c      	ldr	r3, [pc, #240]	; (8001478 <MX_GPIO_Init+0x114>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001392:	4b39      	ldr	r3, [pc, #228]	; (8001478 <MX_GPIO_Init+0x114>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	4a38      	ldr	r2, [pc, #224]	; (8001478 <MX_GPIO_Init+0x114>)
 8001398:	f043 0320 	orr.w	r3, r3, #32
 800139c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800139e:	4b36      	ldr	r3, [pc, #216]	; (8001478 <MX_GPIO_Init+0x114>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	f003 0320 	and.w	r3, r3, #32
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	4b33      	ldr	r3, [pc, #204]	; (8001478 <MX_GPIO_Init+0x114>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	4a32      	ldr	r2, [pc, #200]	; (8001478 <MX_GPIO_Init+0x114>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b6:	4b30      	ldr	r3, [pc, #192]	; (8001478 <MX_GPIO_Init+0x114>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c2:	4b2d      	ldr	r3, [pc, #180]	; (8001478 <MX_GPIO_Init+0x114>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	4a2c      	ldr	r2, [pc, #176]	; (8001478 <MX_GPIO_Init+0x114>)
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ce:	4b2a      	ldr	r3, [pc, #168]	; (8001478 <MX_GPIO_Init+0x114>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013da:	4b27      	ldr	r3, [pc, #156]	; (8001478 <MX_GPIO_Init+0x114>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	4a26      	ldr	r2, [pc, #152]	; (8001478 <MX_GPIO_Init+0x114>)
 80013e0:	f043 0308 	orr.w	r3, r3, #8
 80013e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e6:	4b24      	ldr	r3, [pc, #144]	; (8001478 <MX_GPIO_Init+0x114>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ea:	f003 0308 	and.w	r3, r3, #8
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2120      	movs	r1, #32
 80013f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013fa:	f002 ff03 	bl	8004204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	2104      	movs	r1, #4
 8001402:	481e      	ldr	r0, [pc, #120]	; (800147c <MX_GPIO_Init+0x118>)
 8001404:	f002 fefe 	bl	8004204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8001408:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800140c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800140e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001412:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	4619      	mov	r1, r3
 800141e:	4818      	ldr	r0, [pc, #96]	; (8001480 <MX_GPIO_Init+0x11c>)
 8001420:	f002 fd6e 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8001424:	2320      	movs	r3, #32
 8001426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001428:	2301      	movs	r3, #1
 800142a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2300      	movs	r3, #0
 8001432:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4619      	mov	r1, r3
 800143a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800143e:	f002 fd5f 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8001442:	2304      	movs	r3, #4
 8001444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001446:	2301      	movs	r3, #1
 8001448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4619      	mov	r1, r3
 8001458:	4808      	ldr	r0, [pc, #32]	; (800147c <MX_GPIO_Init+0x118>)
 800145a:	f002 fd51 	bl	8003f00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	2028      	movs	r0, #40	; 0x28
 8001464:	f002 fc64 	bl	8003d30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001468:	2028      	movs	r0, #40	; 0x28
 800146a:	f002 fc7b 	bl	8003d64 <HAL_NVIC_EnableIRQ>

}
 800146e:	bf00      	nop
 8001470:	3728      	adds	r7, #40	; 0x28
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40021000 	.word	0x40021000
 800147c:	48000c00 	.word	0x48000c00
 8001480:	48000800 	.word	0x48000800

08001484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001488:	f000 ffbb 	bl	8002402 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800148c:	f000 f81a 	bl	80014c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001490:	f7ff ff68 	bl	8001364 <MX_GPIO_Init>
  MX_ADC2_Init();
 8001494:	f7ff fe06 	bl	80010a4 <MX_ADC2_Init>
  MX_ADC1_Init();
 8001498:	f7ff fd8c 	bl	8000fb4 <MX_ADC1_Init>
  MX_TIM1_Init();
 800149c:	f000 fa2e 	bl	80018fc <MX_TIM1_Init>
  MX_TIM3_Init();
 80014a0:	f000 fade 	bl	8001a60 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80014a4:	f000 fc12 	bl	8001ccc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80014a8:	f000 fc5c 	bl	8001d64 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	Shell_Init();
 80014ac:	f000 fd4e 	bl	8001f4c <Shell_Init>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80014b0:	217f      	movs	r1, #127	; 0x7f
 80014b2:	4803      	ldr	r0, [pc, #12]	; (80014c0 <main+0x3c>)
 80014b4:	f002 fa1a 	bl	80038ec <HAL_ADCEx_Calibration_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 80014b8:	f000 fd8a 	bl	8001fd0 <Shell_Loop>
	{
 80014bc:	e7fc      	b.n	80014b8 <main+0x34>
 80014be:	bf00      	nop
 80014c0:	200002ac 	.word	0x200002ac

080014c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b094      	sub	sp, #80	; 0x50
 80014c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ca:	f107 0318 	add.w	r3, r7, #24
 80014ce:	2238      	movs	r2, #56	; 0x38
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f008 fb77 	bl	8009bc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80014e6:	2000      	movs	r0, #0
 80014e8:	f002 fec8 	bl	800427c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014ec:	2301      	movs	r3, #1
 80014ee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014f4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f6:	2302      	movs	r3, #2
 80014f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014fa:	2303      	movs	r3, #3
 80014fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80014fe:	2306      	movs	r3, #6
 8001500:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001502:	2355      	movs	r3, #85	; 0x55
 8001504:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001506:	2302      	movs	r3, #2
 8001508:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800150a:	2302      	movs	r3, #2
 800150c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800150e:	2302      	movs	r3, #2
 8001510:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001512:	f107 0318 	add.w	r3, r7, #24
 8001516:	4618      	mov	r0, r3
 8001518:	f002 ff64 	bl	80043e4 <HAL_RCC_OscConfig>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001522:	f000 f82b 	bl	800157c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001526:	230f      	movs	r3, #15
 8001528:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800152a:	2303      	movs	r3, #3
 800152c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	2104      	movs	r1, #4
 800153e:	4618      	mov	r0, r3
 8001540:	f003 fa68 	bl	8004a14 <HAL_RCC_ClockConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800154a:	f000 f817 	bl	800157c <Error_Handler>
  }
}
 800154e:	bf00      	nop
 8001550:	3750      	adds	r7, #80	; 0x50
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a04      	ldr	r2, [pc, #16]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d101      	bne.n	800156e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800156a:	f000 ff63 	bl	8002434 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40001000 	.word	0x40001000

0800157c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001580:	b672      	cpsid	i
}
 8001582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001584:	e7fe      	b.n	8001584 <Error_Handler+0x8>
	...

08001588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <HAL_MspInit+0x44>)
 8001590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001592:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <HAL_MspInit+0x44>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6613      	str	r3, [r2, #96]	; 0x60
 800159a:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <HAL_MspInit+0x44>)
 800159c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <HAL_MspInit+0x44>)
 80015a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015aa:	4a08      	ldr	r2, [pc, #32]	; (80015cc <HAL_MspInit+0x44>)
 80015ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b0:	6593      	str	r3, [r2, #88]	; 0x58
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_MspInit+0x44>)
 80015b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80015be:	f002 ff01 	bl	80043c4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000

080015d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08c      	sub	sp, #48	; 0x30
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015e0:	4b2c      	ldr	r3, [pc, #176]	; (8001694 <HAL_InitTick+0xc4>)
 80015e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e4:	4a2b      	ldr	r2, [pc, #172]	; (8001694 <HAL_InitTick+0xc4>)
 80015e6:	f043 0310 	orr.w	r3, r3, #16
 80015ea:	6593      	str	r3, [r2, #88]	; 0x58
 80015ec:	4b29      	ldr	r3, [pc, #164]	; (8001694 <HAL_InitTick+0xc4>)
 80015ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f0:	f003 0310 	and.w	r3, r3, #16
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015f8:	f107 020c 	add.w	r2, r7, #12
 80015fc:	f107 0310 	add.w	r3, r7, #16
 8001600:	4611      	mov	r1, r2
 8001602:	4618      	mov	r0, r3
 8001604:	f003 fbdc 	bl	8004dc0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001608:	f003 fbae 	bl	8004d68 <HAL_RCC_GetPCLK1Freq>
 800160c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800160e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001610:	4a21      	ldr	r2, [pc, #132]	; (8001698 <HAL_InitTick+0xc8>)
 8001612:	fba2 2303 	umull	r2, r3, r2, r3
 8001616:	0c9b      	lsrs	r3, r3, #18
 8001618:	3b01      	subs	r3, #1
 800161a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800161c:	4b1f      	ldr	r3, [pc, #124]	; (800169c <HAL_InitTick+0xcc>)
 800161e:	4a20      	ldr	r2, [pc, #128]	; (80016a0 <HAL_InitTick+0xd0>)
 8001620:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001622:	4b1e      	ldr	r3, [pc, #120]	; (800169c <HAL_InitTick+0xcc>)
 8001624:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001628:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800162a:	4a1c      	ldr	r2, [pc, #112]	; (800169c <HAL_InitTick+0xcc>)
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001630:	4b1a      	ldr	r3, [pc, #104]	; (800169c <HAL_InitTick+0xcc>)
 8001632:	2200      	movs	r2, #0
 8001634:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001636:	4b19      	ldr	r3, [pc, #100]	; (800169c <HAL_InitTick+0xcc>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 800163c:	4817      	ldr	r0, [pc, #92]	; (800169c <HAL_InitTick+0xcc>)
 800163e:	f003 fe85 	bl	800534c <HAL_TIM_Base_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001648:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800164c:	2b00      	cmp	r3, #0
 800164e:	d11b      	bne.n	8001688 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001650:	4812      	ldr	r0, [pc, #72]	; (800169c <HAL_InitTick+0xcc>)
 8001652:	f003 fedd 	bl	8005410 <HAL_TIM_Base_Start_IT>
 8001656:	4603      	mov	r3, r0
 8001658:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800165c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001660:	2b00      	cmp	r3, #0
 8001662:	d111      	bne.n	8001688 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001664:	2036      	movs	r0, #54	; 0x36
 8001666:	f002 fb7d 	bl	8003d64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b0f      	cmp	r3, #15
 800166e:	d808      	bhi.n	8001682 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001670:	2200      	movs	r2, #0
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	2036      	movs	r0, #54	; 0x36
 8001676:	f002 fb5b 	bl	8003d30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <HAL_InitTick+0xd4>)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	e002      	b.n	8001688 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001688:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800168c:	4618      	mov	r0, r3
 800168e:	3730      	adds	r7, #48	; 0x30
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40021000 	.word	0x40021000
 8001698:	431bde83 	.word	0x431bde83
 800169c:	20000388 	.word	0x20000388
 80016a0:	40001000 	.word	0x40001000
 80016a4:	200000c0 	.word	0x200000c0

080016a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <NMI_Handler+0x4>

080016ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <HardFault_Handler+0x4>

080016b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <MemManage_Handler+0x4>

080016ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016be:	e7fe      	b.n	80016be <BusFault_Handler+0x4>

080016c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <UsageFault_Handler+0x4>

080016c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <USART2_IRQHandler+0x10>)
 8001706:	f005 fce7 	bl	80070d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000470 	.word	0x20000470

08001714 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <USART3_IRQHandler+0x10>)
 800171a:	f005 fcdd 	bl	80070d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000500 	.word	0x20000500

08001728 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 800172c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001730:	f002 fd80 	bl	8004234 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}

08001738 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <TIM6_DAC_IRQHandler+0x10>)
 800173e:	f004 f8e5 	bl	800590c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000388 	.word	0x20000388

0800174c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return 1;
 8001750:	2301      	movs	r3, #1
}
 8001752:	4618      	mov	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <_kill>:

int _kill(int pid, int sig)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001766:	f008 fadd 	bl	8009d24 <__errno>
 800176a:	4603      	mov	r3, r0
 800176c:	2216      	movs	r2, #22
 800176e:	601a      	str	r2, [r3, #0]
  return -1;
 8001770:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <_exit>:

void _exit (int status)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001784:	f04f 31ff 	mov.w	r1, #4294967295
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ffe7 	bl	800175c <_kill>
  while (1) {}    /* Make sure we hang here */
 800178e:	e7fe      	b.n	800178e <_exit+0x12>

08001790 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	e00a      	b.n	80017b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017a2:	f3af 8000 	nop.w
 80017a6:	4601      	mov	r1, r0
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	60ba      	str	r2, [r7, #8]
 80017ae:	b2ca      	uxtb	r2, r1
 80017b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3301      	adds	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	429a      	cmp	r2, r3
 80017be:	dbf0      	blt.n	80017a2 <_read+0x12>
  }

  return len;
 80017c0:	687b      	ldr	r3, [r7, #4]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b086      	sub	sp, #24
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	60f8      	str	r0, [r7, #12]
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	e009      	b.n	80017f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	1c5a      	adds	r2, r3, #1
 80017e0:	60ba      	str	r2, [r7, #8]
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	3301      	adds	r3, #1
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	dbf1      	blt.n	80017dc <_write+0x12>
  }
  return len;
 80017f8:	687b      	ldr	r3, [r7, #4]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <_close>:

int _close(int file)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800180a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800182a:	605a      	str	r2, [r3, #4]
  return 0;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <_isatty>:

int _isatty(int file)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001842:	2301      	movs	r3, #1
}
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
	...

0800186c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001874:	4a14      	ldr	r2, [pc, #80]	; (80018c8 <_sbrk+0x5c>)
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <_sbrk+0x60>)
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001880:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d102      	bne.n	800188e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <_sbrk+0x64>)
 800188a:	4a12      	ldr	r2, [pc, #72]	; (80018d4 <_sbrk+0x68>)
 800188c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800188e:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <_sbrk+0x64>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	429a      	cmp	r2, r3
 800189a:	d207      	bcs.n	80018ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800189c:	f008 fa42 	bl	8009d24 <__errno>
 80018a0:	4603      	mov	r3, r0
 80018a2:	220c      	movs	r2, #12
 80018a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295
 80018aa:	e009      	b.n	80018c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <_sbrk+0x64>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018b2:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <_sbrk+0x64>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	4a05      	ldr	r2, [pc, #20]	; (80018d0 <_sbrk+0x64>)
 80018bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018be:	68fb      	ldr	r3, [r7, #12]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20020000 	.word	0x20020000
 80018cc:	00000400 	.word	0x00000400
 80018d0:	200003d4 	.word	0x200003d4
 80018d4:	200007a0 	.word	0x200007a0

080018d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <SystemInit+0x20>)
 80018de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e2:	4a05      	ldr	r2, [pc, #20]	; (80018f8 <SystemInit+0x20>)
 80018e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b098      	sub	sp, #96	; 0x60
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001902:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800190e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
 800191c:	611a      	str	r2, [r3, #16]
 800191e:	615a      	str	r2, [r3, #20]
 8001920:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	2234      	movs	r2, #52	; 0x34
 8001926:	2100      	movs	r1, #0
 8001928:	4618      	mov	r0, r3
 800192a:	f008 f94c 	bl	8009bc6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800192e:	4b4a      	ldr	r3, [pc, #296]	; (8001a58 <MX_TIM1_Init+0x15c>)
 8001930:	4a4a      	ldr	r2, [pc, #296]	; (8001a5c <MX_TIM1_Init+0x160>)
 8001932:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001934:	4b48      	ldr	r3, [pc, #288]	; (8001a58 <MX_TIM1_Init+0x15c>)
 8001936:	2200      	movs	r2, #0
 8001938:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800193a:	4b47      	ldr	r3, [pc, #284]	; (8001a58 <MX_TIM1_Init+0x15c>)
 800193c:	2220      	movs	r2, #32
 800193e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4250;
 8001940:	4b45      	ldr	r3, [pc, #276]	; (8001a58 <MX_TIM1_Init+0x15c>)
 8001942:	f241 029a 	movw	r2, #4250	; 0x109a
 8001946:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001948:	4b43      	ldr	r3, [pc, #268]	; (8001a58 <MX_TIM1_Init+0x15c>)
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800194e:	4b42      	ldr	r3, [pc, #264]	; (8001a58 <MX_TIM1_Init+0x15c>)
 8001950:	2200      	movs	r2, #0
 8001952:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001954:	4b40      	ldr	r3, [pc, #256]	; (8001a58 <MX_TIM1_Init+0x15c>)
 8001956:	2200      	movs	r2, #0
 8001958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800195a:	483f      	ldr	r0, [pc, #252]	; (8001a58 <MX_TIM1_Init+0x15c>)
 800195c:	f003 fdd0 	bl	8005500 <HAL_TIM_PWM_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001966:	f7ff fe09 	bl	800157c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196a:	2300      	movs	r3, #0
 800196c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800196e:	2300      	movs	r3, #0
 8001970:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001972:	2300      	movs	r3, #0
 8001974:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001976:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800197a:	4619      	mov	r1, r3
 800197c:	4836      	ldr	r0, [pc, #216]	; (8001a58 <MX_TIM1_Init+0x15c>)
 800197e:	f005 f8bb 	bl	8006af8 <HAL_TIMEx_MasterConfigSynchronization>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001988:	f7ff fdf8 	bl	800157c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800198c:	2360      	movs	r3, #96	; 0x60
 800198e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 2550;
 8001990:	f640 13f6 	movw	r3, #2550	; 0x9f6
 8001994:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001996:	2300      	movs	r3, #0
 8001998:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800199a:	2300      	movs	r3, #0
 800199c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019a2:	2300      	movs	r3, #0
 80019a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019ae:	2200      	movs	r2, #0
 80019b0:	4619      	mov	r1, r3
 80019b2:	4829      	ldr	r0, [pc, #164]	; (8001a58 <MX_TIM1_Init+0x15c>)
 80019b4:	f004 f92a 	bl	8005c0c <HAL_TIM_PWM_ConfigChannel>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80019be:	f7ff fddd 	bl	800157c <Error_Handler>
  }
  sConfigOC.Pulse = 1700;
 80019c2:	f240 63a4 	movw	r3, #1700	; 0x6a4
 80019c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019cc:	2204      	movs	r2, #4
 80019ce:	4619      	mov	r1, r3
 80019d0:	4821      	ldr	r0, [pc, #132]	; (8001a58 <MX_TIM1_Init+0x15c>)
 80019d2:	f004 f91b 	bl	8005c0c <HAL_TIM_PWM_ConfigChannel>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 80019dc:	f7ff fdce 	bl	800157c <Error_Handler>
  }
  sConfigOC.Pulse = 637;
 80019e0:	f240 237d 	movw	r3, #637	; 0x27d
 80019e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019ea:	2208      	movs	r2, #8
 80019ec:	4619      	mov	r1, r3
 80019ee:	481a      	ldr	r0, [pc, #104]	; (8001a58 <MX_TIM1_Init+0x15c>)
 80019f0:	f004 f90c 	bl	8005c0c <HAL_TIM_PWM_ConfigChannel>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 80019fa:	f7ff fdbf 	bl	800157c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 34;
 8001a0a:	2322      	movs	r3, #34	; 0x22
 8001a0c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a16:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a28:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4807      	ldr	r0, [pc, #28]	; (8001a58 <MX_TIM1_Init+0x15c>)
 8001a3c:	f005 f8f2 	bl	8006c24 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8001a46:	f7ff fd99 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a4a:	4803      	ldr	r0, [pc, #12]	; (8001a58 <MX_TIM1_Init+0x15c>)
 8001a4c:	f000 f8d6 	bl	8001bfc <HAL_TIM_MspPostInit>

}
 8001a50:	bf00      	nop
 8001a52:	3760      	adds	r7, #96	; 0x60
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	200003d8 	.word	0x200003d8
 8001a5c:	40012c00 	.word	0x40012c00

08001a60 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001a66:	f107 0310 	add.w	r3, r7, #16
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]
 8001a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a7e:	4b1c      	ldr	r3, [pc, #112]	; (8001af0 <MX_TIM3_Init+0x90>)
 8001a80:	4a1c      	ldr	r2, [pc, #112]	; (8001af4 <MX_TIM3_Init+0x94>)
 8001a82:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a84:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <MX_TIM3_Init+0x90>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a8a:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <MX_TIM3_Init+0x90>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a90:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <MX_TIM3_Init+0x90>)
 8001a92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a96:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a98:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <MX_TIM3_Init+0x90>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a9e:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <MX_TIM3_Init+0x90>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001ab4:	f107 0310 	add.w	r3, r7, #16
 8001ab8:	4619      	mov	r1, r3
 8001aba:	480d      	ldr	r0, [pc, #52]	; (8001af0 <MX_TIM3_Init+0x90>)
 8001abc:	f004 fe4d 	bl	800675a <HAL_TIMEx_HallSensor_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001ac6:	f7ff fd59 	bl	800157c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001aca:	2350      	movs	r3, #80	; 0x50
 8001acc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4806      	ldr	r0, [pc, #24]	; (8001af0 <MX_TIM3_Init+0x90>)
 8001ad8:	f005 f80e 	bl	8006af8 <HAL_TIMEx_MasterConfigSynchronization>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001ae2:	f7ff fd4b 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ae6:	bf00      	nop
 8001ae8:	3720      	adds	r7, #32
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000424 	.word	0x20000424
 8001af4:	40000400 	.word	0x40000400

08001af8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0a      	ldr	r2, [pc, #40]	; (8001b30 <HAL_TIM_PWM_MspInit+0x38>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d10b      	bne.n	8001b22 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b0e:	4a09      	ldr	r2, [pc, #36]	; (8001b34 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b14:	6613      	str	r3, [r2, #96]	; 0x60
 8001b16:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001b22:	bf00      	nop
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40012c00 	.word	0x40012c00
 8001b34:	40021000 	.word	0x40021000

08001b38 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	; 0x28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a26      	ldr	r2, [pc, #152]	; (8001bf0 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d145      	bne.n	8001be6 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b5a:	4b26      	ldr	r3, [pc, #152]	; (8001bf4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5e:	4a25      	ldr	r2, [pc, #148]	; (8001bf4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001b60:	f043 0302 	orr.w	r3, r3, #2
 8001b64:	6593      	str	r3, [r2, #88]	; 0x58
 8001b66:	4b23      	ldr	r3, [pc, #140]	; (8001bf4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b72:	4b20      	ldr	r3, [pc, #128]	; (8001bf4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b76:	4a1f      	ldr	r2, [pc, #124]	; (8001bf4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8a:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8e:	4a19      	ldr	r2, [pc, #100]	; (8001bf4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001b90:	f043 0304 	orr.w	r3, r3, #4
 8001b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b96:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001ba2:	2350      	movs	r3, #80	; 0x50
 8001ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc0:	f002 f99e 	bl	8003f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bda:	f107 0314 	add.w	r3, r7, #20
 8001bde:	4619      	mov	r1, r3
 8001be0:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 8001be2:	f002 f98d 	bl	8003f00 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001be6:	bf00      	nop
 8001be8:	3728      	adds	r7, #40	; 0x28
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40000400 	.word	0x40000400
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	48000800 	.word	0x48000800

08001bfc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08a      	sub	sp, #40	; 0x28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a29      	ldr	r2, [pc, #164]	; (8001cc0 <HAL_TIM_MspPostInit+0xc4>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d14b      	bne.n	8001cb6 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1e:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <HAL_TIM_MspPostInit+0xc8>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c22:	4a28      	ldr	r2, [pc, #160]	; (8001cc4 <HAL_TIM_MspPostInit+0xc8>)
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c2a:	4b26      	ldr	r3, [pc, #152]	; (8001cc4 <HAL_TIM_MspPostInit+0xc8>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c36:	4b23      	ldr	r3, [pc, #140]	; (8001cc4 <HAL_TIM_MspPostInit+0xc8>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3a:	4a22      	ldr	r2, [pc, #136]	; (8001cc4 <HAL_TIM_MspPostInit+0xc8>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c42:	4b20      	ldr	r3, [pc, #128]	; (8001cc4 <HAL_TIM_MspPostInit+0xc8>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001c4e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c54:	2302      	movs	r3, #2
 8001c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001c60:	2306      	movs	r3, #6
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4817      	ldr	r0, [pc, #92]	; (8001cc8 <HAL_TIM_MspPostInit+0xcc>)
 8001c6c:	f002 f948 	bl	8003f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001c70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001c82:	2304      	movs	r3, #4
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	480e      	ldr	r0, [pc, #56]	; (8001cc8 <HAL_TIM_MspPostInit+0xcc>)
 8001c8e:	f002 f937 	bl	8003f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 8001c92:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001ca4:	2306      	movs	r3, #6
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	4619      	mov	r1, r3
 8001cae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb2:	f002 f925 	bl	8003f00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001cb6:	bf00      	nop
 8001cb8:	3728      	adds	r7, #40	; 0x28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40012c00 	.word	0x40012c00
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	48000400 	.word	0x48000400

08001ccc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cd0:	4b22      	ldr	r3, [pc, #136]	; (8001d5c <MX_USART2_UART_Init+0x90>)
 8001cd2:	4a23      	ldr	r2, [pc, #140]	; (8001d60 <MX_USART2_UART_Init+0x94>)
 8001cd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cd6:	4b21      	ldr	r3, [pc, #132]	; (8001d5c <MX_USART2_UART_Init+0x90>)
 8001cd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cde:	4b1f      	ldr	r3, [pc, #124]	; (8001d5c <MX_USART2_UART_Init+0x90>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ce4:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <MX_USART2_UART_Init+0x90>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cea:	4b1c      	ldr	r3, [pc, #112]	; (8001d5c <MX_USART2_UART_Init+0x90>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cf0:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <MX_USART2_UART_Init+0x90>)
 8001cf2:	220c      	movs	r2, #12
 8001cf4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cf6:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <MX_USART2_UART_Init+0x90>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cfc:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <MX_USART2_UART_Init+0x90>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d02:	4b16      	ldr	r3, [pc, #88]	; (8001d5c <MX_USART2_UART_Init+0x90>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d08:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <MX_USART2_UART_Init+0x90>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d0e:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <MX_USART2_UART_Init+0x90>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d14:	4811      	ldr	r0, [pc, #68]	; (8001d5c <MX_USART2_UART_Init+0x90>)
 8001d16:	f005 f8a2 	bl	8006e5e <HAL_UART_Init>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001d20:	f7ff fc2c 	bl	800157c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d24:	2100      	movs	r1, #0
 8001d26:	480d      	ldr	r0, [pc, #52]	; (8001d5c <MX_USART2_UART_Init+0x90>)
 8001d28:	f007 f845 	bl	8008db6 <HAL_UARTEx_SetTxFifoThreshold>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001d32:	f7ff fc23 	bl	800157c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d36:	2100      	movs	r1, #0
 8001d38:	4808      	ldr	r0, [pc, #32]	; (8001d5c <MX_USART2_UART_Init+0x90>)
 8001d3a:	f007 f87a 	bl	8008e32 <HAL_UARTEx_SetRxFifoThreshold>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001d44:	f7ff fc1a 	bl	800157c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001d48:	4804      	ldr	r0, [pc, #16]	; (8001d5c <MX_USART2_UART_Init+0x90>)
 8001d4a:	f006 fffb 	bl	8008d44 <HAL_UARTEx_DisableFifoMode>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001d54:	f7ff fc12 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000470 	.word	0x20000470
 8001d60:	40004400 	.word	0x40004400

08001d64 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d68:	4b22      	ldr	r3, [pc, #136]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001d6a:	4a23      	ldr	r2, [pc, #140]	; (8001df8 <MX_USART3_UART_Init+0x94>)
 8001d6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d6e:	4b21      	ldr	r3, [pc, #132]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001d70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d76:	4b1f      	ldr	r3, [pc, #124]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d7c:	4b1d      	ldr	r3, [pc, #116]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d82:	4b1c      	ldr	r3, [pc, #112]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d88:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001d8a:	220c      	movs	r2, #12
 8001d8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d8e:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d94:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d9a:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001da0:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001da6:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001dac:	4811      	ldr	r0, [pc, #68]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001dae:	f005 f856 	bl	8006e5e <HAL_UART_Init>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001db8:	f7ff fbe0 	bl	800157c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	480d      	ldr	r0, [pc, #52]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001dc0:	f006 fff9 	bl	8008db6 <HAL_UARTEx_SetTxFifoThreshold>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001dca:	f7ff fbd7 	bl	800157c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dce:	2100      	movs	r1, #0
 8001dd0:	4808      	ldr	r0, [pc, #32]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001dd2:	f007 f82e 	bl	8008e32 <HAL_UARTEx_SetRxFifoThreshold>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001ddc:	f7ff fbce 	bl	800157c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001de0:	4804      	ldr	r0, [pc, #16]	; (8001df4 <MX_USART3_UART_Init+0x90>)
 8001de2:	f006 ffaf 	bl	8008d44 <HAL_UARTEx_DisableFifoMode>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001dec:	f7ff fbc6 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20000500 	.word	0x20000500
 8001df8:	40004800 	.word	0x40004800

08001dfc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b0a0      	sub	sp, #128	; 0x80
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e14:	f107 0318 	add.w	r3, r7, #24
 8001e18:	2254      	movs	r2, #84	; 0x54
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f007 fed2 	bl	8009bc6 <memset>
  if(uartHandle->Instance==USART2)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a45      	ldr	r2, [pc, #276]	; (8001f3c <HAL_UART_MspInit+0x140>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d13f      	bne.n	8001eac <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e30:	2300      	movs	r3, #0
 8001e32:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e34:	f107 0318 	add.w	r3, r7, #24
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f003 f839 	bl	8004eb0 <HAL_RCCEx_PeriphCLKConfig>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e44:	f7ff fb9a 	bl	800157c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e48:	4b3d      	ldr	r3, [pc, #244]	; (8001f40 <HAL_UART_MspInit+0x144>)
 8001e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4c:	4a3c      	ldr	r2, [pc, #240]	; (8001f40 <HAL_UART_MspInit+0x144>)
 8001e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e52:	6593      	str	r3, [r2, #88]	; 0x58
 8001e54:	4b3a      	ldr	r3, [pc, #232]	; (8001f40 <HAL_UART_MspInit+0x144>)
 8001e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e60:	4b37      	ldr	r3, [pc, #220]	; (8001f40 <HAL_UART_MspInit+0x144>)
 8001e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e64:	4a36      	ldr	r2, [pc, #216]	; (8001f40 <HAL_UART_MspInit+0x144>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e6c:	4b34      	ldr	r3, [pc, #208]	; (8001f40 <HAL_UART_MspInit+0x144>)
 8001e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e78:	230c      	movs	r3, #12
 8001e7a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e84:	2300      	movs	r3, #0
 8001e86:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e88:	2307      	movs	r3, #7
 8001e8a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e90:	4619      	mov	r1, r3
 8001e92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e96:	f002 f833 	bl	8003f00 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	2026      	movs	r0, #38	; 0x26
 8001ea0:	f001 ff46 	bl	8003d30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ea4:	2026      	movs	r0, #38	; 0x26
 8001ea6:	f001 ff5d 	bl	8003d64 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001eaa:	e043      	b.n	8001f34 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a24      	ldr	r2, [pc, #144]	; (8001f44 <HAL_UART_MspInit+0x148>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d13e      	bne.n	8001f34 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ebe:	f107 0318 	add.w	r3, r7, #24
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f002 fff4 	bl	8004eb0 <HAL_RCCEx_PeriphCLKConfig>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001ece:	f7ff fb55 	bl	800157c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ed2:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <HAL_UART_MspInit+0x144>)
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	4a1a      	ldr	r2, [pc, #104]	; (8001f40 <HAL_UART_MspInit+0x144>)
 8001ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001edc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ede:	4b18      	ldr	r3, [pc, #96]	; (8001f40 <HAL_UART_MspInit+0x144>)
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <HAL_UART_MspInit+0x144>)
 8001eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eee:	4a14      	ldr	r2, [pc, #80]	; (8001f40 <HAL_UART_MspInit+0x144>)
 8001ef0:	f043 0304 	orr.w	r3, r3, #4
 8001ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ef6:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <HAL_UART_MspInit+0x144>)
 8001ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f02:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f06:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f10:	2300      	movs	r3, #0
 8001f12:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f14:	2307      	movs	r3, #7
 8001f16:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f18:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	480a      	ldr	r0, [pc, #40]	; (8001f48 <HAL_UART_MspInit+0x14c>)
 8001f20:	f001 ffee 	bl	8003f00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001f24:	2200      	movs	r2, #0
 8001f26:	2100      	movs	r1, #0
 8001f28:	2027      	movs	r0, #39	; 0x27
 8001f2a:	f001 ff01 	bl	8003d30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f2e:	2027      	movs	r0, #39	; 0x27
 8001f30:	f001 ff18 	bl	8003d64 <HAL_NVIC_EnableIRQ>
}
 8001f34:	bf00      	nop
 8001f36:	3780      	adds	r7, #128	; 0x80
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40004400 	.word	0x40004400
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40004800 	.word	0x40004800
 8001f48:	48000800 	.word	0x48000800

08001f4c <Shell_Init>:
char* 		argv[MAX_ARGS];
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;

void Shell_Init(void){
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 8001f50:	2224      	movs	r2, #36	; 0x24
 8001f52:	2100      	movs	r1, #0
 8001f54:	4816      	ldr	r0, [pc, #88]	; (8001fb0 <Shell_Init+0x64>)
 8001f56:	f007 fe36 	bl	8009bc6 <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 8001f5a:	2240      	movs	r2, #64	; 0x40
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	4815      	ldr	r0, [pc, #84]	; (8001fb4 <Shell_Init+0x68>)
 8001f60:	f007 fe31 	bl	8009bc6 <memset>
 8001f64:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <Shell_Init+0x6c>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 8001f6a:	2240      	movs	r2, #64	; 0x40
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4813      	ldr	r0, [pc, #76]	; (8001fbc <Shell_Init+0x70>)
 8001f70:	f007 fe29 	bl	8009bc6 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001f74:	2201      	movs	r2, #1
 8001f76:	4910      	ldr	r1, [pc, #64]	; (8001fb8 <Shell_Init+0x6c>)
 8001f78:	4811      	ldr	r0, [pc, #68]	; (8001fc0 <Shell_Init+0x74>)
 8001f7a:	f005 f857 	bl	800702c <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 8001f7e:	4811      	ldr	r0, [pc, #68]	; (8001fc4 <Shell_Init+0x78>)
 8001f80:	f7fe f9ae 	bl	80002e0 <strlen>
 8001f84:	4603      	mov	r3, r0
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8c:	490d      	ldr	r1, [pc, #52]	; (8001fc4 <Shell_Init+0x78>)
 8001f8e:	480c      	ldr	r0, [pc, #48]	; (8001fc0 <Shell_Init+0x74>)
 8001f90:	f004 ffb5 	bl	8006efe <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8001f94:	480c      	ldr	r0, [pc, #48]	; (8001fc8 <Shell_Init+0x7c>)
 8001f96:	f7fe f9a3 	bl	80002e0 <strlen>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa2:	4909      	ldr	r1, [pc, #36]	; (8001fc8 <Shell_Init+0x7c>)
 8001fa4:	4806      	ldr	r0, [pc, #24]	; (8001fc0 <Shell_Init+0x74>)
 8001fa6:	f004 ffaa 	bl	8006efe <HAL_UART_Transmit>
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	2000061c 	.word	0x2000061c
 8001fb4:	200005d8 	.word	0x200005d8
 8001fb8:	20000594 	.word	0x20000594
 8001fbc:	20000598 	.word	0x20000598
 8001fc0:	20000470 	.word	0x20000470
 8001fc4:	20000020 	.word	0x20000020
 8001fc8:	20000004 	.word	0x20000004
 8001fcc:	00000000 	.word	0x00000000

08001fd0 <Shell_Loop>:

void Shell_Loop(void){
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08e      	sub	sp, #56	; 0x38
 8001fd4:	af00      	add	r7, sp, #0
	if(uartRxReceived){
 8001fd6:	4b8c      	ldr	r3, [pc, #560]	; (8002208 <Shell_Loop+0x238>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d05b      	beq.n	8002096 <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 8001fde:	4b8b      	ldr	r3, [pc, #556]	; (800220c <Shell_Loop+0x23c>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b08      	cmp	r3, #8
 8001fe4:	d034      	beq.n	8002050 <Shell_Loop+0x80>
 8001fe6:	2b0d      	cmp	r3, #13
 8001fe8:	d142      	bne.n	8002070 <Shell_Loop+0xa0>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8001fea:	f04f 33ff 	mov.w	r3, #4294967295
 8001fee:	2203      	movs	r2, #3
 8001ff0:	4987      	ldr	r1, [pc, #540]	; (8002210 <Shell_Loop+0x240>)
 8001ff2:	4888      	ldr	r0, [pc, #544]	; (8002214 <Shell_Loop+0x244>)
 8001ff4:	f004 ff83 	bl	8006efe <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 8001ff8:	4b87      	ldr	r3, [pc, #540]	; (8002218 <Shell_Loop+0x248>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a87      	ldr	r2, [pc, #540]	; (800221c <Shell_Loop+0x24c>)
 8001ffe:	2100      	movs	r1, #0
 8002000:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 8002002:	4b87      	ldr	r3, [pc, #540]	; (8002220 <Shell_Loop+0x250>)
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 8002008:	4986      	ldr	r1, [pc, #536]	; (8002224 <Shell_Loop+0x254>)
 800200a:	4884      	ldr	r0, [pc, #528]	; (800221c <Shell_Loop+0x24c>)
 800200c:	f007 fde4 	bl	8009bd8 <strtok>
 8002010:	4603      	mov	r3, r0
 8002012:	4a85      	ldr	r2, [pc, #532]	; (8002228 <Shell_Loop+0x258>)
 8002014:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8002016:	e010      	b.n	800203a <Shell_Loop+0x6a>
				argv[argc++] = token;
 8002018:	4b81      	ldr	r3, [pc, #516]	; (8002220 <Shell_Loop+0x250>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	4980      	ldr	r1, [pc, #512]	; (8002220 <Shell_Loop+0x250>)
 8002020:	600a      	str	r2, [r1, #0]
 8002022:	4a81      	ldr	r2, [pc, #516]	; (8002228 <Shell_Loop+0x258>)
 8002024:	6812      	ldr	r2, [r2, #0]
 8002026:	4981      	ldr	r1, [pc, #516]	; (800222c <Shell_Loop+0x25c>)
 8002028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 800202c:	497d      	ldr	r1, [pc, #500]	; (8002224 <Shell_Loop+0x254>)
 800202e:	2000      	movs	r0, #0
 8002030:	f007 fdd2 	bl	8009bd8 <strtok>
 8002034:	4603      	mov	r3, r0
 8002036:	4a7c      	ldr	r2, [pc, #496]	; (8002228 <Shell_Loop+0x258>)
 8002038:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 800203a:	4b7b      	ldr	r3, [pc, #492]	; (8002228 <Shell_Loop+0x258>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1ea      	bne.n	8002018 <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 8002042:	4b75      	ldr	r3, [pc, #468]	; (8002218 <Shell_Loop+0x248>)
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 8002048:	4b79      	ldr	r3, [pc, #484]	; (8002230 <Shell_Loop+0x260>)
 800204a:	2201      	movs	r2, #1
 800204c:	601a      	str	r2, [r3, #0]
			break;
 800204e:	e01f      	b.n	8002090 <Shell_Loop+0xc0>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 8002050:	4b71      	ldr	r3, [pc, #452]	; (8002218 <Shell_Loop+0x248>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	1e5a      	subs	r2, r3, #1
 8002056:	4970      	ldr	r1, [pc, #448]	; (8002218 <Shell_Loop+0x248>)
 8002058:	600a      	str	r2, [r1, #0]
 800205a:	4a70      	ldr	r2, [pc, #448]	; (800221c <Shell_Loop+0x24c>)
 800205c:	2100      	movs	r1, #0
 800205e:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 8002060:	f04f 33ff 	mov.w	r3, #4294967295
 8002064:	2204      	movs	r2, #4
 8002066:	4973      	ldr	r1, [pc, #460]	; (8002234 <Shell_Loop+0x264>)
 8002068:	486a      	ldr	r0, [pc, #424]	; (8002214 <Shell_Loop+0x244>)
 800206a:	f004 ff48 	bl	8006efe <HAL_UART_Transmit>
			break;
 800206e:	e00f      	b.n	8002090 <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8002070:	4b69      	ldr	r3, [pc, #420]	; (8002218 <Shell_Loop+0x248>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	1c5a      	adds	r2, r3, #1
 8002076:	4968      	ldr	r1, [pc, #416]	; (8002218 <Shell_Loop+0x248>)
 8002078:	600a      	str	r2, [r1, #0]
 800207a:	4a64      	ldr	r2, [pc, #400]	; (800220c <Shell_Loop+0x23c>)
 800207c:	7811      	ldrb	r1, [r2, #0]
 800207e:	4a67      	ldr	r2, [pc, #412]	; (800221c <Shell_Loop+0x24c>)
 8002080:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8002082:	f04f 33ff 	mov.w	r3, #4294967295
 8002086:	2201      	movs	r2, #1
 8002088:	4960      	ldr	r1, [pc, #384]	; (800220c <Shell_Loop+0x23c>)
 800208a:	4862      	ldr	r0, [pc, #392]	; (8002214 <Shell_Loop+0x244>)
 800208c:	f004 ff37 	bl	8006efe <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 8002090:	4b5d      	ldr	r3, [pc, #372]	; (8002208 <Shell_Loop+0x238>)
 8002092:	2200      	movs	r2, #0
 8002094:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 8002096:	4b66      	ldr	r3, [pc, #408]	; (8002230 <Shell_Loop+0x260>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 814f 	beq.w	800233e <Shell_Loop+0x36e>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 80020a0:	4b62      	ldr	r3, [pc, #392]	; (800222c <Shell_Loop+0x25c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4964      	ldr	r1, [pc, #400]	; (8002238 <Shell_Loop+0x268>)
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe f8ba 	bl	8000220 <strcmp>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d107      	bne.n	80020c2 <Shell_Loop+0xf2>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 80020b2:	f04f 33ff 	mov.w	r3, #4294967295
 80020b6:	221a      	movs	r2, #26
 80020b8:	4960      	ldr	r1, [pc, #384]	; (800223c <Shell_Loop+0x26c>)
 80020ba:	4856      	ldr	r0, [pc, #344]	; (8002214 <Shell_Loop+0x244>)
 80020bc:	f004 ff1f 	bl	8006efe <HAL_UART_Transmit>
 80020c0:	e133      	b.n	800232a <Shell_Loop+0x35a>
		}
		else if(strcmp(argv[0],"help")==0){
 80020c2:	4b5a      	ldr	r3, [pc, #360]	; (800222c <Shell_Loop+0x25c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	495e      	ldr	r1, [pc, #376]	; (8002240 <Shell_Loop+0x270>)
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe f8a9 	bl	8000220 <strcmp>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10e      	bne.n	80020f2 <Shell_Loop+0x122>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 80020d4:	4a5b      	ldr	r2, [pc, #364]	; (8002244 <Shell_Loop+0x274>)
 80020d6:	2140      	movs	r1, #64	; 0x40
 80020d8:	485b      	ldr	r0, [pc, #364]	; (8002248 <Shell_Loop+0x278>)
 80020da:	f007 fcdd 	bl	8009a98 <sniprintf>
 80020de:	6278      	str	r0, [r7, #36]	; 0x24
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	f04f 33ff 	mov.w	r3, #4294967295
 80020e8:	4957      	ldr	r1, [pc, #348]	; (8002248 <Shell_Loop+0x278>)
 80020ea:	484a      	ldr	r0, [pc, #296]	; (8002214 <Shell_Loop+0x244>)
 80020ec:	f004 ff07 	bl	8006efe <HAL_UART_Transmit>
 80020f0:	e11b      	b.n	800232a <Shell_Loop+0x35a>
		}
		else if(strcmp(argv[0],"speed")==0){
 80020f2:	4b4e      	ldr	r3, [pc, #312]	; (800222c <Shell_Loop+0x25c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4955      	ldr	r1, [pc, #340]	; (800224c <Shell_Loop+0x27c>)
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe f891 	bl	8000220 <strcmp>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d142      	bne.n	800218a <Shell_Loop+0x1ba>
			float speedVal=atoi(argv[1]);
 8002104:	4b49      	ldr	r3, [pc, #292]	; (800222c <Shell_Loop+0x25c>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	4618      	mov	r0, r3
 800210a:	f006 ff1f 	bl	8008f4c <atoi>
 800210e:	ee07 0a90 	vmov	s15, r0
 8002112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002116:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			if (speedVal> PWM_MAX){
 800211a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800211e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8002250 <Shell_Loop+0x280>
 8002122:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800212a:	dd01      	ble.n	8002130 <Shell_Loop+0x160>
				speedVal=PWM_MAX;
 800212c:	4b49      	ldr	r3, [pc, #292]	; (8002254 <Shell_Loop+0x284>)
 800212e:	637b      	str	r3, [r7, #52]	; 0x34
			}
			if (speedVal< PWM_MIN){
 8002130:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002134:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213c:	d502      	bpl.n	8002144 <Shell_Loop+0x174>
				speedVal=PWM_MIN;
 800213e:	f04f 0300 	mov.w	r3, #0
 8002142:	637b      	str	r3, [r7, #52]	; 0x34
			}

			speedVal=(DUTY_MAX*speedVal)/100; //PWM en pourcentage
 8002144:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002148:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002258 <Shell_Loop+0x288>
 800214c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002150:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8002250 <Shell_Loop+0x280>
 8002154:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002158:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,speedVal);
 800215c:	4b3f      	ldr	r3, [pc, #252]	; (800225c <Shell_Loop+0x28c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002164:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002168:	ee17 2a90 	vmov	r2, s15
 800216c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,DUTY_MAX - speedVal);
 800216e:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8002258 <Shell_Loop+0x288>
 8002172:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002176:	ee77 7a67 	vsub.f32	s15, s14, s15
 800217a:	4b38      	ldr	r3, [pc, #224]	; (800225c <Shell_Loop+0x28c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002182:	ee17 2a90 	vmov	r2, s15
 8002186:	639a      	str	r2, [r3, #56]	; 0x38
 8002188:	e0cf      	b.n	800232a <Shell_Loop+0x35a>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);*/



		}
		else if(strcmp(argv[0],"start")==0){
 800218a:	4b28      	ldr	r3, [pc, #160]	; (800222c <Shell_Loop+0x25c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4934      	ldr	r1, [pc, #208]	; (8002260 <Shell_Loop+0x290>)
 8002190:	4618      	mov	r0, r3
 8002192:	f7fe f845 	bl	8000220 <strcmp>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d11a      	bne.n	80021d2 <Shell_Loop+0x202>

			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,0.5*DUTY_MAX);
 800219c:	4b2f      	ldr	r3, [pc, #188]	; (800225c <Shell_Loop+0x28c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f640 024d 	movw	r2, #2125	; 0x84d
 80021a4:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,0.5*DUTY_MAX);
 80021a6:	4b2d      	ldr	r3, [pc, #180]	; (800225c <Shell_Loop+0x28c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f640 024d 	movw	r2, #2125	; 0x84d
 80021ae:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80021b0:	2100      	movs	r1, #0
 80021b2:	482a      	ldr	r0, [pc, #168]	; (800225c <Shell_Loop+0x28c>)
 80021b4:	f003 f9fc 	bl	80055b0 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80021b8:	2100      	movs	r1, #0
 80021ba:	4828      	ldr	r0, [pc, #160]	; (800225c <Shell_Loop+0x28c>)
 80021bc:	f004 fb7c 	bl	80068b8 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80021c0:	2104      	movs	r1, #4
 80021c2:	4826      	ldr	r0, [pc, #152]	; (800225c <Shell_Loop+0x28c>)
 80021c4:	f003 f9f4 	bl	80055b0 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80021c8:	2104      	movs	r1, #4
 80021ca:	4824      	ldr	r0, [pc, #144]	; (800225c <Shell_Loop+0x28c>)
 80021cc:	f004 fb74 	bl	80068b8 <HAL_TIMEx_PWMN_Start>
 80021d0:	e0ab      	b.n	800232a <Shell_Loop+0x35a>

		}
		else if(strcmp(argv[0],"stop")==0){
 80021d2:	4b16      	ldr	r3, [pc, #88]	; (800222c <Shell_Loop+0x25c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4923      	ldr	r1, [pc, #140]	; (8002264 <Shell_Loop+0x294>)
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe f821 	bl	8000220 <strcmp>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d141      	bne.n	8002268 <Shell_Loop+0x298>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80021e4:	2100      	movs	r1, #0
 80021e6:	481d      	ldr	r0, [pc, #116]	; (800225c <Shell_Loop+0x28c>)
 80021e8:	f003 faf4 	bl	80057d4 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80021ec:	2100      	movs	r1, #0
 80021ee:	481b      	ldr	r0, [pc, #108]	; (800225c <Shell_Loop+0x28c>)
 80021f0:	f004 fc24 	bl	8006a3c <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80021f4:	2104      	movs	r1, #4
 80021f6:	4819      	ldr	r0, [pc, #100]	; (800225c <Shell_Loop+0x28c>)
 80021f8:	f003 faec 	bl	80057d4 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80021fc:	2104      	movs	r1, #4
 80021fe:	4817      	ldr	r0, [pc, #92]	; (800225c <Shell_Loop+0x28c>)
 8002200:	f004 fc1c 	bl	8006a3c <HAL_TIMEx_PWMN_Stop>
 8002204:	e091      	b.n	800232a <Shell_Loop+0x35a>
 8002206:	bf00      	nop
 8002208:	20000590 	.word	0x20000590
 800220c:	20000594 	.word	0x20000594
 8002210:	20000088 	.word	0x20000088
 8002214:	20000470 	.word	0x20000470
 8002218:	20000618 	.word	0x20000618
 800221c:	200005d8 	.word	0x200005d8
 8002220:	20000640 	.word	0x20000640
 8002224:	0800be88 	.word	0x0800be88
 8002228:	20000644 	.word	0x20000644
 800222c:	2000061c 	.word	0x2000061c
 8002230:	20000648 	.word	0x20000648
 8002234:	2000008c 	.word	0x2000008c
 8002238:	0800be8c 	.word	0x0800be8c
 800223c:	200000a4 	.word	0x200000a4
 8002240:	0800be9c 	.word	0x0800be9c
 8002244:	0800bea4 	.word	0x0800bea4
 8002248:	20000598 	.word	0x20000598
 800224c:	0800becc 	.word	0x0800becc
 8002250:	42c80000 	.word	0x42c80000
 8002254:	42c80000 	.word	0x42c80000
 8002258:	4584d000 	.word	0x4584d000
 800225c:	200003d8 	.word	0x200003d8
 8002260:	0800bed4 	.word	0x0800bed4
 8002264:	0800bedc 	.word	0x0800bedc
		}
		else if(strcmp(argv[0],"adc")==0){
 8002268:	4b3d      	ldr	r3, [pc, #244]	; (8002360 <Shell_Loop+0x390>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	493d      	ldr	r1, [pc, #244]	; (8002364 <Shell_Loop+0x394>)
 800226e:	4618      	mov	r0, r3
 8002270:	f7fd ffd6 	bl	8000220 <strcmp>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d150      	bne.n	800231c <Shell_Loop+0x34c>

			HAL_ADC_Start(&hadc1);
 800227a:	483b      	ldr	r0, [pc, #236]	; (8002368 <Shell_Loop+0x398>)
 800227c:	f000 fcf0 	bl	8002c60 <HAL_ADC_Start>
			//HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);
			uint16_t val;
			val= HAL_ADC_GetValue(&hadc1);
 8002280:	4839      	ldr	r0, [pc, #228]	; (8002368 <Shell_Loop+0x398>)
 8002282:	f000 fdd1 	bl	8002e28 <HAL_ADC_GetValue>
 8002286:	4603      	mov	r3, r0
 8002288:	867b      	strh	r3, [r7, #50]	; 0x32
			float u_V,I_mes ;
			u_V = (val/4096.0)*3.3;
 800228a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe f981 	bl	8000594 <__aeabi_i2d>
 8002292:	f04f 0200 	mov.w	r2, #0
 8002296:	4b35      	ldr	r3, [pc, #212]	; (800236c <Shell_Loop+0x39c>)
 8002298:	f7fe fb10 	bl	80008bc <__aeabi_ddiv>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4610      	mov	r0, r2
 80022a2:	4619      	mov	r1, r3
 80022a4:	a328      	add	r3, pc, #160	; (adr r3, 8002348 <Shell_Loop+0x378>)
 80022a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022aa:	f7fe f9dd 	bl	8000668 <__aeabi_dmul>
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	4610      	mov	r0, r2
 80022b4:	4619      	mov	r1, r3
 80022b6:	f7fe fcaf 	bl	8000c18 <__aeabi_d2f>
 80022ba:	4603      	mov	r3, r0
 80022bc:	62fb      	str	r3, [r7, #44]	; 0x2c
			I_mes = (u_V-1.65)/0.05;
 80022be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80022c0:	f7fe f97a 	bl	80005b8 <__aeabi_f2d>
 80022c4:	a322      	add	r3, pc, #136	; (adr r3, 8002350 <Shell_Loop+0x380>)
 80022c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ca:	f7fe f815 	bl	80002f8 <__aeabi_dsub>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	4610      	mov	r0, r2
 80022d4:	4619      	mov	r1, r3
 80022d6:	a320      	add	r3, pc, #128	; (adr r3, 8002358 <Shell_Loop+0x388>)
 80022d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022dc:	f7fe faee 	bl	80008bc <__aeabi_ddiv>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4610      	mov	r0, r2
 80022e6:	4619      	mov	r1, r3
 80022e8:	f7fe fc96 	bl	8000c18 <__aeabi_d2f>
 80022ec:	4603      	mov	r3, r0
 80022ee:	62bb      	str	r3, [r7, #40]	; 0x28
			char buff[30];
			sprintf(buff, "Courant : %f A\r\n", I_mes);
 80022f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022f2:	f7fe f961 	bl	80005b8 <__aeabi_f2d>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	1d38      	adds	r0, r7, #4
 80022fc:	491c      	ldr	r1, [pc, #112]	; (8002370 <Shell_Loop+0x3a0>)
 80022fe:	f007 fbff 	bl	8009b00 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)buff,strlen(buff),HAL_MAX_DELAY);
 8002302:	1d3b      	adds	r3, r7, #4
 8002304:	4618      	mov	r0, r3
 8002306:	f7fd ffeb 	bl	80002e0 <strlen>
 800230a:	4603      	mov	r3, r0
 800230c:	b29a      	uxth	r2, r3
 800230e:	1d39      	adds	r1, r7, #4
 8002310:	f04f 33ff 	mov.w	r3, #4294967295
 8002314:	4817      	ldr	r0, [pc, #92]	; (8002374 <Shell_Loop+0x3a4>)
 8002316:	f004 fdf2 	bl	8006efe <HAL_UART_Transmit>
 800231a:	e006      	b.n	800232a <Shell_Loop+0x35a>

		}


		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800231c:	f04f 33ff 	mov.w	r3, #4294967295
 8002320:	2214      	movs	r2, #20
 8002322:	4915      	ldr	r1, [pc, #84]	; (8002378 <Shell_Loop+0x3a8>)
 8002324:	4813      	ldr	r0, [pc, #76]	; (8002374 <Shell_Loop+0x3a4>)
 8002326:	f004 fdea 	bl	8006efe <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800232a:	f04f 33ff 	mov.w	r3, #4294967295
 800232e:	221c      	movs	r2, #28
 8002330:	4912      	ldr	r1, [pc, #72]	; (800237c <Shell_Loop+0x3ac>)
 8002332:	4810      	ldr	r0, [pc, #64]	; (8002374 <Shell_Loop+0x3a4>)
 8002334:	f004 fde3 	bl	8006efe <HAL_UART_Transmit>
		newCmdReady = 0;
 8002338:	4b11      	ldr	r3, [pc, #68]	; (8002380 <Shell_Loop+0x3b0>)
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
	}
}
 800233e:	bf00      	nop
 8002340:	3738      	adds	r7, #56	; 0x38
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	66666666 	.word	0x66666666
 800234c:	400a6666 	.word	0x400a6666
 8002350:	66666666 	.word	0x66666666
 8002354:	3ffa6666 	.word	0x3ffa6666
 8002358:	9999999a 	.word	0x9999999a
 800235c:	3fa99999 	.word	0x3fa99999
 8002360:	2000061c 	.word	0x2000061c
 8002364:	0800bee4 	.word	0x0800bee4
 8002368:	200002ac 	.word	0x200002ac
 800236c:	40b00000 	.word	0x40b00000
 8002370:	0800bee8 	.word	0x0800bee8
 8002374:	20000470 	.word	0x20000470
 8002378:	20000090 	.word	0x20000090
 800237c:	20000004 	.word	0x20000004
 8002380:	20000648 	.word	0x20000648

08002384 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 800238c:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <HAL_UART_RxCpltCallback+0x20>)
 800238e:	2201      	movs	r2, #1
 8002390:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002392:	2201      	movs	r2, #1
 8002394:	4904      	ldr	r1, [pc, #16]	; (80023a8 <HAL_UART_RxCpltCallback+0x24>)
 8002396:	4805      	ldr	r0, [pc, #20]	; (80023ac <HAL_UART_RxCpltCallback+0x28>)
 8002398:	f004 fe48 	bl	800702c <HAL_UART_Receive_IT>
}
 800239c:	bf00      	nop
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20000590 	.word	0x20000590
 80023a8:	20000594 	.word	0x20000594
 80023ac:	20000470 	.word	0x20000470

080023b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023b0:	480d      	ldr	r0, [pc, #52]	; (80023e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023b2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023b4:	480d      	ldr	r0, [pc, #52]	; (80023ec <LoopForever+0x6>)
  ldr r1, =_edata
 80023b6:	490e      	ldr	r1, [pc, #56]	; (80023f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023b8:	4a0e      	ldr	r2, [pc, #56]	; (80023f4 <LoopForever+0xe>)
  movs r3, #0
 80023ba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80023bc:	e002      	b.n	80023c4 <LoopCopyDataInit>

080023be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023c2:	3304      	adds	r3, #4

080023c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023c8:	d3f9      	bcc.n	80023be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ca:	4a0b      	ldr	r2, [pc, #44]	; (80023f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023cc:	4c0b      	ldr	r4, [pc, #44]	; (80023fc <LoopForever+0x16>)
  movs r3, #0
 80023ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023d0:	e001      	b.n	80023d6 <LoopFillZerobss>

080023d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023d4:	3204      	adds	r2, #4

080023d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023d8:	d3fb      	bcc.n	80023d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023da:	f7ff fa7d 	bl	80018d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023de:	f007 fca7 	bl	8009d30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023e2:	f7ff f84f 	bl	8001484 <main>

080023e6 <LoopForever>:

LoopForever:
    b LoopForever
 80023e6:	e7fe      	b.n	80023e6 <LoopForever>
  ldr   r0, =_estack
 80023e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023f0:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 80023f4:	0800c318 	.word	0x0800c318
  ldr r2, =_sbss
 80023f8:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 80023fc:	2000079c 	.word	0x2000079c

08002400 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002400:	e7fe      	b.n	8002400 <ADC1_2_IRQHandler>

08002402 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002408:	2300      	movs	r3, #0
 800240a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800240c:	2003      	movs	r0, #3
 800240e:	f001 fc84 	bl	8003d1a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002412:	200f      	movs	r0, #15
 8002414:	f7ff f8dc 	bl	80015d0 <HAL_InitTick>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d002      	beq.n	8002424 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	71fb      	strb	r3, [r7, #7]
 8002422:	e001      	b.n	8002428 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002424:	f7ff f8b0 	bl	8001588 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002428:	79fb      	ldrb	r3, [r7, #7]

}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <HAL_IncTick+0x1c>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4b05      	ldr	r3, [pc, #20]	; (8002454 <HAL_IncTick+0x20>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4413      	add	r3, r2
 8002442:	4a03      	ldr	r2, [pc, #12]	; (8002450 <HAL_IncTick+0x1c>)
 8002444:	6013      	str	r3, [r2, #0]
}
 8002446:	bf00      	nop
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	2000064c 	.word	0x2000064c
 8002454:	200000c4 	.word	0x200000c4

08002458 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return uwTick;
 800245c:	4b03      	ldr	r3, [pc, #12]	; (800246c <HAL_GetTick+0x14>)
 800245e:	681b      	ldr	r3, [r3, #0]
}
 8002460:	4618      	mov	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	2000064c 	.word	0x2000064c

08002470 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	431a      	orrs	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	609a      	str	r2, [r3, #8]
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	609a      	str	r2, [r3, #8]
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024d8:	b480      	push	{r7}
 80024da:	b087      	sub	sp, #28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	3360      	adds	r3, #96	; 0x60
 80024ea:	461a      	mov	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4b08      	ldr	r3, [pc, #32]	; (800251c <LL_ADC_SetOffset+0x44>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	4313      	orrs	r3, r2
 8002508:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002510:	bf00      	nop
 8002512:	371c      	adds	r7, #28
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	03fff000 	.word	0x03fff000

08002520 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3360      	adds	r3, #96	; 0x60
 800252e:	461a      	mov	r2, r3
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002540:	4618      	mov	r0, r3
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800254c:	b480      	push	{r7}
 800254e:	b087      	sub	sp, #28
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	3360      	adds	r3, #96	; 0x60
 800255c:	461a      	mov	r2, r3
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	431a      	orrs	r2, r3
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002576:	bf00      	nop
 8002578:	371c      	adds	r7, #28
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002582:	b480      	push	{r7}
 8002584:	b087      	sub	sp, #28
 8002586:	af00      	add	r7, sp, #0
 8002588:	60f8      	str	r0, [r7, #12]
 800258a:	60b9      	str	r1, [r7, #8]
 800258c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	3360      	adds	r3, #96	; 0x60
 8002592:	461a      	mov	r2, r3
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	431a      	orrs	r2, r3
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80025ac:	bf00      	nop
 80025ae:	371c      	adds	r7, #28
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b087      	sub	sp, #28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	3360      	adds	r3, #96	; 0x60
 80025c8:	461a      	mov	r2, r3
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	431a      	orrs	r2, r3
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80025e2:	bf00      	nop
 80025e4:	371c      	adds	r7, #28
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	615a      	str	r2, [r3, #20]
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002614:	b480      	push	{r7}
 8002616:	b087      	sub	sp, #28
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	3330      	adds	r3, #48	; 0x30
 8002624:	461a      	mov	r2, r3
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	0a1b      	lsrs	r3, r3, #8
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	f003 030c 	and.w	r3, r3, #12
 8002630:	4413      	add	r3, r2
 8002632:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f003 031f 	and.w	r3, r3, #31
 800263e:	211f      	movs	r1, #31
 8002640:	fa01 f303 	lsl.w	r3, r1, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	401a      	ands	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	0e9b      	lsrs	r3, r3, #26
 800264c:	f003 011f 	and.w	r1, r3, #31
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	f003 031f 	and.w	r3, r3, #31
 8002656:	fa01 f303 	lsl.w	r3, r1, r3
 800265a:	431a      	orrs	r2, r3
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002660:	bf00      	nop
 8002662:	371c      	adds	r7, #28
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800266c:	b480      	push	{r7}
 800266e:	b087      	sub	sp, #28
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	3314      	adds	r3, #20
 800267c:	461a      	mov	r2, r3
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	0e5b      	lsrs	r3, r3, #25
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	4413      	add	r3, r2
 800268a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	0d1b      	lsrs	r3, r3, #20
 8002694:	f003 031f 	and.w	r3, r3, #31
 8002698:	2107      	movs	r1, #7
 800269a:	fa01 f303 	lsl.w	r3, r1, r3
 800269e:	43db      	mvns	r3, r3
 80026a0:	401a      	ands	r2, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	0d1b      	lsrs	r3, r3, #20
 80026a6:	f003 031f 	and.w	r3, r3, #31
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	fa01 f303 	lsl.w	r3, r1, r3
 80026b0:	431a      	orrs	r2, r3
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80026b6:	bf00      	nop
 80026b8:	371c      	adds	r7, #28
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
	...

080026c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a0f      	ldr	r2, [pc, #60]	; (8002710 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d10a      	bne.n	80026ee <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026e4:	431a      	orrs	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80026ec:	e00a      	b.n	8002704 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026fa:	43db      	mvns	r3, r3
 80026fc:	401a      	ands	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002704:	bf00      	nop
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	407f0000 	.word	0x407f0000

08002714 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 031f 	and.w	r3, r3, #31
}
 8002724:	4618      	mov	r0, r3
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002740:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6093      	str	r3, [r2, #8]
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002764:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002768:	d101      	bne.n	800276e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800278c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002790:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027b8:	d101      	bne.n	80027be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027e0:	f043 0201 	orr.w	r2, r3, #1
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002804:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002808:	f043 0202 	orr.w	r2, r3, #2
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <LL_ADC_IsEnabled+0x18>
 8002830:	2301      	movs	r3, #1
 8002832:	e000      	b.n	8002836 <LL_ADC_IsEnabled+0x1a>
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b02      	cmp	r3, #2
 8002854:	d101      	bne.n	800285a <LL_ADC_IsDisableOngoing+0x18>
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <LL_ADC_IsDisableOngoing+0x1a>
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002878:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800287c:	f043 0204 	orr.w	r2, r3, #4
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d101      	bne.n	80028a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80028a4:	2301      	movs	r3, #1
 80028a6:	e000      	b.n	80028aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d101      	bne.n	80028ce <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028dc:	b590      	push	{r4, r7, lr}
 80028de:	b089      	sub	sp, #36	; 0x24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e1af      	b.n	8002c56 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002900:	2b00      	cmp	r3, #0
 8002902:	d109      	bne.n	8002918 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7fe fc33 	bl	8001170 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff ff19 	bl	8002754 <LL_ADC_IsDeepPowerDownEnabled>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d004      	beq.n	8002932 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff feff 	bl	8002730 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff ff34 	bl	80027a4 <LL_ADC_IsInternalRegulatorEnabled>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d115      	bne.n	800296e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff ff18 	bl	800277c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800294c:	4b9f      	ldr	r3, [pc, #636]	; (8002bcc <HAL_ADC_Init+0x2f0>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	099b      	lsrs	r3, r3, #6
 8002952:	4a9f      	ldr	r2, [pc, #636]	; (8002bd0 <HAL_ADC_Init+0x2f4>)
 8002954:	fba2 2303 	umull	r2, r3, r2, r3
 8002958:	099b      	lsrs	r3, r3, #6
 800295a:	3301      	adds	r3, #1
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002960:	e002      	b.n	8002968 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	3b01      	subs	r3, #1
 8002966:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f9      	bne.n	8002962 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff ff16 	bl	80027a4 <LL_ADC_IsInternalRegulatorEnabled>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10d      	bne.n	800299a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002982:	f043 0210 	orr.w	r2, r3, #16
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800298e:	f043 0201 	orr.w	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff ff76 	bl	8002890 <LL_ADC_REG_IsConversionOngoing>
 80029a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029aa:	f003 0310 	and.w	r3, r3, #16
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f040 8148 	bne.w	8002c44 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f040 8144 	bne.w	8002c44 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80029c4:	f043 0202 	orr.w	r2, r3, #2
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff ff23 	bl	800281c <LL_ADC_IsEnabled>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d141      	bne.n	8002a60 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029e4:	d004      	beq.n	80029f0 <HAL_ADC_Init+0x114>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a7a      	ldr	r2, [pc, #488]	; (8002bd4 <HAL_ADC_Init+0x2f8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d10f      	bne.n	8002a10 <HAL_ADC_Init+0x134>
 80029f0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80029f4:	f7ff ff12 	bl	800281c <LL_ADC_IsEnabled>
 80029f8:	4604      	mov	r4, r0
 80029fa:	4876      	ldr	r0, [pc, #472]	; (8002bd4 <HAL_ADC_Init+0x2f8>)
 80029fc:	f7ff ff0e 	bl	800281c <LL_ADC_IsEnabled>
 8002a00:	4603      	mov	r3, r0
 8002a02:	4323      	orrs	r3, r4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	bf0c      	ite	eq
 8002a08:	2301      	moveq	r3, #1
 8002a0a:	2300      	movne	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	e012      	b.n	8002a36 <HAL_ADC_Init+0x15a>
 8002a10:	4871      	ldr	r0, [pc, #452]	; (8002bd8 <HAL_ADC_Init+0x2fc>)
 8002a12:	f7ff ff03 	bl	800281c <LL_ADC_IsEnabled>
 8002a16:	4604      	mov	r4, r0
 8002a18:	4870      	ldr	r0, [pc, #448]	; (8002bdc <HAL_ADC_Init+0x300>)
 8002a1a:	f7ff feff 	bl	800281c <LL_ADC_IsEnabled>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	431c      	orrs	r4, r3
 8002a22:	486f      	ldr	r0, [pc, #444]	; (8002be0 <HAL_ADC_Init+0x304>)
 8002a24:	f7ff fefa 	bl	800281c <LL_ADC_IsEnabled>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	4323      	orrs	r3, r4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	bf0c      	ite	eq
 8002a30:	2301      	moveq	r3, #1
 8002a32:	2300      	movne	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d012      	beq.n	8002a60 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a42:	d004      	beq.n	8002a4e <HAL_ADC_Init+0x172>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a62      	ldr	r2, [pc, #392]	; (8002bd4 <HAL_ADC_Init+0x2f8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d101      	bne.n	8002a52 <HAL_ADC_Init+0x176>
 8002a4e:	4a65      	ldr	r2, [pc, #404]	; (8002be4 <HAL_ADC_Init+0x308>)
 8002a50:	e000      	b.n	8002a54 <HAL_ADC_Init+0x178>
 8002a52:	4a65      	ldr	r2, [pc, #404]	; (8002be8 <HAL_ADC_Init+0x30c>)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	f7ff fd08 	bl	8002470 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	7f5b      	ldrb	r3, [r3, #29]
 8002a64:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a6a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002a70:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002a76:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a7e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d106      	bne.n	8002a9c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a92:	3b01      	subs	r3, #1
 8002a94:	045b      	lsls	r3, r3, #17
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d009      	beq.n	8002ab8 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	4b4b      	ldr	r3, [pc, #300]	; (8002bec <HAL_ADC_Init+0x310>)
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6812      	ldr	r2, [r2, #0]
 8002ac6:	69b9      	ldr	r1, [r7, #24]
 8002ac8:	430b      	orrs	r3, r1
 8002aca:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff fed2 	bl	8002890 <LL_ADC_REG_IsConversionOngoing>
 8002aec:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff fedf 	bl	80028b6 <LL_ADC_INJ_IsConversionOngoing>
 8002af8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d17f      	bne.n	8002c00 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d17c      	bne.n	8002c00 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b0a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b12:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b22:	f023 0302 	bic.w	r3, r3, #2
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6812      	ldr	r2, [r2, #0]
 8002b2a:	69b9      	ldr	r1, [r7, #24]
 8002b2c:	430b      	orrs	r3, r1
 8002b2e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d017      	beq.n	8002b68 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691a      	ldr	r2, [r3, #16]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b46:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002b50:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6911      	ldr	r1, [r2, #16]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6812      	ldr	r2, [r2, #0]
 8002b60:	430b      	orrs	r3, r1
 8002b62:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002b66:	e013      	b.n	8002b90 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691a      	ldr	r2, [r3, #16]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b76:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b8c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d12a      	bne.n	8002bf0 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002ba4:	f023 0304 	bic.w	r3, r3, #4
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002bb0:	4311      	orrs	r1, r2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002bb6:	4311      	orrs	r1, r2
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f042 0201 	orr.w	r2, r2, #1
 8002bc8:	611a      	str	r2, [r3, #16]
 8002bca:	e019      	b.n	8002c00 <HAL_ADC_Init+0x324>
 8002bcc:	20000000 	.word	0x20000000
 8002bd0:	053e2d63 	.word	0x053e2d63
 8002bd4:	50000100 	.word	0x50000100
 8002bd8:	50000400 	.word	0x50000400
 8002bdc:	50000500 	.word	0x50000500
 8002be0:	50000600 	.word	0x50000600
 8002be4:	50000300 	.word	0x50000300
 8002be8:	50000700 	.word	0x50000700
 8002bec:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691a      	ldr	r2, [r3, #16]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0201 	bic.w	r2, r2, #1
 8002bfe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d10c      	bne.n	8002c22 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	f023 010f 	bic.w	r1, r3, #15
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	1e5a      	subs	r2, r3, #1
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	631a      	str	r2, [r3, #48]	; 0x30
 8002c20:	e007      	b.n	8002c32 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 020f 	bic.w	r2, r2, #15
 8002c30:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c36:	f023 0303 	bic.w	r3, r3, #3
 8002c3a:	f043 0201 	orr.w	r2, r3, #1
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c42:	e007      	b.n	8002c54 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c48:	f043 0210 	orr.w	r2, r3, #16
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c54:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3724      	adds	r7, #36	; 0x24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd90      	pop	{r4, r7, pc}
 8002c5e:	bf00      	nop

08002c60 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c70:	d004      	beq.n	8002c7c <HAL_ADC_Start+0x1c>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a67      	ldr	r2, [pc, #412]	; (8002e14 <HAL_ADC_Start+0x1b4>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d101      	bne.n	8002c80 <HAL_ADC_Start+0x20>
 8002c7c:	4b66      	ldr	r3, [pc, #408]	; (8002e18 <HAL_ADC_Start+0x1b8>)
 8002c7e:	e000      	b.n	8002c82 <HAL_ADC_Start+0x22>
 8002c80:	4b66      	ldr	r3, [pc, #408]	; (8002e1c <HAL_ADC_Start+0x1bc>)
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff fd46 	bl	8002714 <LL_ADC_GetMultimode>
 8002c88:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff fdfe 	bl	8002890 <LL_ADC_REG_IsConversionOngoing>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f040 80b4 	bne.w	8002e04 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d101      	bne.n	8002caa <HAL_ADC_Start+0x4a>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	e0af      	b.n	8002e0a <HAL_ADC_Start+0x1aa>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fd06 	bl	80036c4 <ADC_Enable>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002cbc:	7dfb      	ldrb	r3, [r7, #23]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f040 809b 	bne.w	8002dfa <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ccc:	f023 0301 	bic.w	r3, r3, #1
 8002cd0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a4d      	ldr	r2, [pc, #308]	; (8002e14 <HAL_ADC_Start+0x1b4>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d009      	beq.n	8002cf6 <HAL_ADC_Start+0x96>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a4e      	ldr	r2, [pc, #312]	; (8002e20 <HAL_ADC_Start+0x1c0>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d002      	beq.n	8002cf2 <HAL_ADC_Start+0x92>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	e003      	b.n	8002cfa <HAL_ADC_Start+0x9a>
 8002cf2:	4b4c      	ldr	r3, [pc, #304]	; (8002e24 <HAL_ADC_Start+0x1c4>)
 8002cf4:	e001      	b.n	8002cfa <HAL_ADC_Start+0x9a>
 8002cf6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6812      	ldr	r2, [r2, #0]
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d002      	beq.n	8002d08 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d105      	bne.n	8002d14 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d20:	d106      	bne.n	8002d30 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d26:	f023 0206 	bic.w	r2, r3, #6
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	661a      	str	r2, [r3, #96]	; 0x60
 8002d2e:	e002      	b.n	8002d36 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	221c      	movs	r2, #28
 8002d3c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a32      	ldr	r2, [pc, #200]	; (8002e14 <HAL_ADC_Start+0x1b4>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d009      	beq.n	8002d64 <HAL_ADC_Start+0x104>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a32      	ldr	r2, [pc, #200]	; (8002e20 <HAL_ADC_Start+0x1c0>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d002      	beq.n	8002d60 <HAL_ADC_Start+0x100>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	e003      	b.n	8002d68 <HAL_ADC_Start+0x108>
 8002d60:	4b30      	ldr	r3, [pc, #192]	; (8002e24 <HAL_ADC_Start+0x1c4>)
 8002d62:	e001      	b.n	8002d68 <HAL_ADC_Start+0x108>
 8002d64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6812      	ldr	r2, [r2, #0]
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d008      	beq.n	8002d82 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d005      	beq.n	8002d82 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	2b05      	cmp	r3, #5
 8002d7a:	d002      	beq.n	8002d82 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	2b09      	cmp	r3, #9
 8002d80:	d114      	bne.n	8002dac <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d007      	beq.n	8002da0 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d98:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff fd5f 	bl	8002868 <LL_ADC_REG_StartConversion>
 8002daa:	e02d      	b.n	8002e08 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a15      	ldr	r2, [pc, #84]	; (8002e14 <HAL_ADC_Start+0x1b4>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d009      	beq.n	8002dd6 <HAL_ADC_Start+0x176>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a16      	ldr	r2, [pc, #88]	; (8002e20 <HAL_ADC_Start+0x1c0>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d002      	beq.n	8002dd2 <HAL_ADC_Start+0x172>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	e003      	b.n	8002dda <HAL_ADC_Start+0x17a>
 8002dd2:	4b14      	ldr	r3, [pc, #80]	; (8002e24 <HAL_ADC_Start+0x1c4>)
 8002dd4:	e001      	b.n	8002dda <HAL_ADC_Start+0x17a>
 8002dd6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002dda:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00f      	beq.n	8002e08 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002df0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	65da      	str	r2, [r3, #92]	; 0x5c
 8002df8:	e006      	b.n	8002e08 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002e02:	e001      	b.n	8002e08 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002e04:	2302      	movs	r3, #2
 8002e06:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	50000100 	.word	0x50000100
 8002e18:	50000300 	.word	0x50000300
 8002e1c:	50000700 	.word	0x50000700
 8002e20:	50000500 	.word	0x50000500
 8002e24:	50000400 	.word	0x50000400

08002e28 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
	...

08002e44 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b0b6      	sub	sp, #216	; 0xd8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d102      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x24>
 8002e62:	2302      	movs	r3, #2
 8002e64:	f000 bc13 	b.w	800368e <HAL_ADC_ConfigChannel+0x84a>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff fd0b 	bl	8002890 <LL_ADC_REG_IsConversionOngoing>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f040 83f3 	bne.w	8003668 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	6859      	ldr	r1, [r3, #4]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	f7ff fbc0 	bl	8002614 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff fcf9 	bl	8002890 <LL_ADC_REG_IsConversionOngoing>
 8002e9e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff fd05 	bl	80028b6 <LL_ADC_INJ_IsConversionOngoing>
 8002eac:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002eb0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f040 81d9 	bne.w	800326c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002eba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f040 81d4 	bne.w	800326c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ecc:	d10f      	bne.n	8002eee <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6818      	ldr	r0, [r3, #0]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	4619      	mov	r1, r3
 8002eda:	f7ff fbc7 	bl	800266c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff fb81 	bl	80025ee <LL_ADC_SetSamplingTimeCommonConfig>
 8002eec:	e00e      	b.n	8002f0c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	6819      	ldr	r1, [r3, #0]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	461a      	mov	r2, r3
 8002efc:	f7ff fbb6 	bl	800266c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2100      	movs	r1, #0
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff fb71 	bl	80025ee <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	695a      	ldr	r2, [r3, #20]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	08db      	lsrs	r3, r3, #3
 8002f18:	f003 0303 	and.w	r3, r3, #3
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d022      	beq.n	8002f74 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6818      	ldr	r0, [r3, #0]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	6919      	ldr	r1, [r3, #16]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f3e:	f7ff facb 	bl	80024d8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6818      	ldr	r0, [r3, #0]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	6919      	ldr	r1, [r3, #16]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	f7ff fb17 	bl	8002582 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6818      	ldr	r0, [r3, #0]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	6919      	ldr	r1, [r3, #16]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	7f1b      	ldrb	r3, [r3, #28]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d102      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0x126>
 8002f64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f68:	e000      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x128>
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	f7ff fb23 	bl	80025b8 <LL_ADC_SetOffsetSaturation>
 8002f72:	e17b      	b.n	800326c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2100      	movs	r1, #0
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff fad0 	bl	8002520 <LL_ADC_GetOffsetChannel>
 8002f80:	4603      	mov	r3, r0
 8002f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10a      	bne.n	8002fa0 <HAL_ADC_ConfigChannel+0x15c>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2100      	movs	r1, #0
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff fac5 	bl	8002520 <LL_ADC_GetOffsetChannel>
 8002f96:	4603      	mov	r3, r0
 8002f98:	0e9b      	lsrs	r3, r3, #26
 8002f9a:	f003 021f 	and.w	r2, r3, #31
 8002f9e:	e01e      	b.n	8002fde <HAL_ADC_ConfigChannel+0x19a>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff faba 	bl	8002520 <LL_ADC_GetOffsetChannel>
 8002fac:	4603      	mov	r3, r0
 8002fae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002fc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002fc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002fce:	2320      	movs	r3, #32
 8002fd0:	e004      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002fd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fd6:	fab3 f383 	clz	r3, r3
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d105      	bne.n	8002ff6 <HAL_ADC_ConfigChannel+0x1b2>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	0e9b      	lsrs	r3, r3, #26
 8002ff0:	f003 031f 	and.w	r3, r3, #31
 8002ff4:	e018      	b.n	8003028 <HAL_ADC_ConfigChannel+0x1e4>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003002:	fa93 f3a3 	rbit	r3, r3
 8003006:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800300a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800300e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003012:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800301a:	2320      	movs	r3, #32
 800301c:	e004      	b.n	8003028 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800301e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003022:	fab3 f383 	clz	r3, r3
 8003026:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003028:	429a      	cmp	r2, r3
 800302a:	d106      	bne.n	800303a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2200      	movs	r2, #0
 8003032:	2100      	movs	r1, #0
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff fa89 	bl	800254c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2101      	movs	r1, #1
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff fa6d 	bl	8002520 <LL_ADC_GetOffsetChannel>
 8003046:	4603      	mov	r3, r0
 8003048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10a      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x222>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2101      	movs	r1, #1
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff fa62 	bl	8002520 <LL_ADC_GetOffsetChannel>
 800305c:	4603      	mov	r3, r0
 800305e:	0e9b      	lsrs	r3, r3, #26
 8003060:	f003 021f 	and.w	r2, r3, #31
 8003064:	e01e      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x260>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2101      	movs	r1, #1
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff fa57 	bl	8002520 <LL_ADC_GetOffsetChannel>
 8003072:	4603      	mov	r3, r0
 8003074:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003078:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800307c:	fa93 f3a3 	rbit	r3, r3
 8003080:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003084:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003088:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800308c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003094:	2320      	movs	r3, #32
 8003096:	e004      	b.n	80030a2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003098:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800309c:	fab3 f383 	clz	r3, r3
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d105      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x278>
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	0e9b      	lsrs	r3, r3, #26
 80030b6:	f003 031f 	and.w	r3, r3, #31
 80030ba:	e018      	b.n	80030ee <HAL_ADC_ConfigChannel+0x2aa>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030c8:	fa93 f3a3 	rbit	r3, r3
 80030cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80030d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80030d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80030d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80030e0:	2320      	movs	r3, #32
 80030e2:	e004      	b.n	80030ee <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80030e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030e8:	fab3 f383 	clz	r3, r3
 80030ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d106      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2200      	movs	r2, #0
 80030f8:	2101      	movs	r1, #1
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff fa26 	bl	800254c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2102      	movs	r1, #2
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff fa0a 	bl	8002520 <LL_ADC_GetOffsetChannel>
 800310c:	4603      	mov	r3, r0
 800310e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10a      	bne.n	800312c <HAL_ADC_ConfigChannel+0x2e8>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2102      	movs	r1, #2
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff f9ff 	bl	8002520 <LL_ADC_GetOffsetChannel>
 8003122:	4603      	mov	r3, r0
 8003124:	0e9b      	lsrs	r3, r3, #26
 8003126:	f003 021f 	and.w	r2, r3, #31
 800312a:	e01e      	b.n	800316a <HAL_ADC_ConfigChannel+0x326>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2102      	movs	r1, #2
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff f9f4 	bl	8002520 <LL_ADC_GetOffsetChannel>
 8003138:	4603      	mov	r3, r0
 800313a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003142:	fa93 f3a3 	rbit	r3, r3
 8003146:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800314a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800314e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003152:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800315a:	2320      	movs	r3, #32
 800315c:	e004      	b.n	8003168 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800315e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003162:	fab3 f383 	clz	r3, r3
 8003166:	b2db      	uxtb	r3, r3
 8003168:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003172:	2b00      	cmp	r3, #0
 8003174:	d105      	bne.n	8003182 <HAL_ADC_ConfigChannel+0x33e>
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	0e9b      	lsrs	r3, r3, #26
 800317c:	f003 031f 	and.w	r3, r3, #31
 8003180:	e016      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x36c>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800318e:	fa93 f3a3 	rbit	r3, r3
 8003192:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003194:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003196:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800319a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80031a2:	2320      	movs	r3, #32
 80031a4:	e004      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80031a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031aa:	fab3 f383 	clz	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d106      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2200      	movs	r2, #0
 80031ba:	2102      	movs	r1, #2
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff f9c5 	bl	800254c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2103      	movs	r1, #3
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff f9a9 	bl	8002520 <LL_ADC_GetOffsetChannel>
 80031ce:	4603      	mov	r3, r0
 80031d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10a      	bne.n	80031ee <HAL_ADC_ConfigChannel+0x3aa>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2103      	movs	r1, #3
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff f99e 	bl	8002520 <LL_ADC_GetOffsetChannel>
 80031e4:	4603      	mov	r3, r0
 80031e6:	0e9b      	lsrs	r3, r3, #26
 80031e8:	f003 021f 	and.w	r2, r3, #31
 80031ec:	e017      	b.n	800321e <HAL_ADC_ConfigChannel+0x3da>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2103      	movs	r1, #3
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff f993 	bl	8002520 <LL_ADC_GetOffsetChannel>
 80031fa:	4603      	mov	r3, r0
 80031fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003200:	fa93 f3a3 	rbit	r3, r3
 8003204:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003206:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003208:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800320a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003210:	2320      	movs	r3, #32
 8003212:	e003      	b.n	800321c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003214:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003216:	fab3 f383 	clz	r3, r3
 800321a:	b2db      	uxtb	r3, r3
 800321c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003226:	2b00      	cmp	r3, #0
 8003228:	d105      	bne.n	8003236 <HAL_ADC_ConfigChannel+0x3f2>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	0e9b      	lsrs	r3, r3, #26
 8003230:	f003 031f 	and.w	r3, r3, #31
 8003234:	e011      	b.n	800325a <HAL_ADC_ConfigChannel+0x416>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800323e:	fa93 f3a3 	rbit	r3, r3
 8003242:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003244:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003246:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800324e:	2320      	movs	r3, #32
 8003250:	e003      	b.n	800325a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003254:	fab3 f383 	clz	r3, r3
 8003258:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800325a:	429a      	cmp	r2, r3
 800325c:	d106      	bne.n	800326c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2200      	movs	r2, #0
 8003264:	2103      	movs	r1, #3
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff f970 	bl	800254c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff fad3 	bl	800281c <LL_ADC_IsEnabled>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	f040 813d 	bne.w	80034f8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6818      	ldr	r0, [r3, #0]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	6819      	ldr	r1, [r3, #0]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	461a      	mov	r2, r3
 800328c:	f7ff fa1a 	bl	80026c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	4aa2      	ldr	r2, [pc, #648]	; (8003520 <HAL_ADC_ConfigChannel+0x6dc>)
 8003296:	4293      	cmp	r3, r2
 8003298:	f040 812e 	bne.w	80034f8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10b      	bne.n	80032c4 <HAL_ADC_ConfigChannel+0x480>
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	0e9b      	lsrs	r3, r3, #26
 80032b2:	3301      	adds	r3, #1
 80032b4:	f003 031f 	and.w	r3, r3, #31
 80032b8:	2b09      	cmp	r3, #9
 80032ba:	bf94      	ite	ls
 80032bc:	2301      	movls	r3, #1
 80032be:	2300      	movhi	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	e019      	b.n	80032f8 <HAL_ADC_ConfigChannel+0x4b4>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032cc:	fa93 f3a3 	rbit	r3, r3
 80032d0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80032d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032d4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80032d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80032dc:	2320      	movs	r3, #32
 80032de:	e003      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80032e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032e2:	fab3 f383 	clz	r3, r3
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	3301      	adds	r3, #1
 80032ea:	f003 031f 	and.w	r3, r3, #31
 80032ee:	2b09      	cmp	r3, #9
 80032f0:	bf94      	ite	ls
 80032f2:	2301      	movls	r3, #1
 80032f4:	2300      	movhi	r3, #0
 80032f6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d079      	beq.n	80033f0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003304:	2b00      	cmp	r3, #0
 8003306:	d107      	bne.n	8003318 <HAL_ADC_ConfigChannel+0x4d4>
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	0e9b      	lsrs	r3, r3, #26
 800330e:	3301      	adds	r3, #1
 8003310:	069b      	lsls	r3, r3, #26
 8003312:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003316:	e015      	b.n	8003344 <HAL_ADC_ConfigChannel+0x500>
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003320:	fa93 f3a3 	rbit	r3, r3
 8003324:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003328:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800332a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003330:	2320      	movs	r3, #32
 8003332:	e003      	b.n	800333c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003334:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003336:	fab3 f383 	clz	r3, r3
 800333a:	b2db      	uxtb	r3, r3
 800333c:	3301      	adds	r3, #1
 800333e:	069b      	lsls	r3, r3, #26
 8003340:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800334c:	2b00      	cmp	r3, #0
 800334e:	d109      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x520>
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	0e9b      	lsrs	r3, r3, #26
 8003356:	3301      	adds	r3, #1
 8003358:	f003 031f 	and.w	r3, r3, #31
 800335c:	2101      	movs	r1, #1
 800335e:	fa01 f303 	lsl.w	r3, r1, r3
 8003362:	e017      	b.n	8003394 <HAL_ADC_ConfigChannel+0x550>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800336c:	fa93 f3a3 	rbit	r3, r3
 8003370:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003374:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800337c:	2320      	movs	r3, #32
 800337e:	e003      	b.n	8003388 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003382:	fab3 f383 	clz	r3, r3
 8003386:	b2db      	uxtb	r3, r3
 8003388:	3301      	adds	r3, #1
 800338a:	f003 031f 	and.w	r3, r3, #31
 800338e:	2101      	movs	r1, #1
 8003390:	fa01 f303 	lsl.w	r3, r1, r3
 8003394:	ea42 0103 	orr.w	r1, r2, r3
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10a      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x576>
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	0e9b      	lsrs	r3, r3, #26
 80033aa:	3301      	adds	r3, #1
 80033ac:	f003 021f 	and.w	r2, r3, #31
 80033b0:	4613      	mov	r3, r2
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	4413      	add	r3, r2
 80033b6:	051b      	lsls	r3, r3, #20
 80033b8:	e018      	b.n	80033ec <HAL_ADC_ConfigChannel+0x5a8>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c2:	fa93 f3a3 	rbit	r3, r3
 80033c6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80033c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80033cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80033d2:	2320      	movs	r3, #32
 80033d4:	e003      	b.n	80033de <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80033d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033d8:	fab3 f383 	clz	r3, r3
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	3301      	adds	r3, #1
 80033e0:	f003 021f 	and.w	r2, r3, #31
 80033e4:	4613      	mov	r3, r2
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	4413      	add	r3, r2
 80033ea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033ec:	430b      	orrs	r3, r1
 80033ee:	e07e      	b.n	80034ee <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d107      	bne.n	800340c <HAL_ADC_ConfigChannel+0x5c8>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	0e9b      	lsrs	r3, r3, #26
 8003402:	3301      	adds	r3, #1
 8003404:	069b      	lsls	r3, r3, #26
 8003406:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800340a:	e015      	b.n	8003438 <HAL_ADC_ConfigChannel+0x5f4>
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003414:	fa93 f3a3 	rbit	r3, r3
 8003418:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800341a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800341e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003424:	2320      	movs	r3, #32
 8003426:	e003      	b.n	8003430 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342a:	fab3 f383 	clz	r3, r3
 800342e:	b2db      	uxtb	r3, r3
 8003430:	3301      	adds	r3, #1
 8003432:	069b      	lsls	r3, r3, #26
 8003434:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003440:	2b00      	cmp	r3, #0
 8003442:	d109      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x614>
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	0e9b      	lsrs	r3, r3, #26
 800344a:	3301      	adds	r3, #1
 800344c:	f003 031f 	and.w	r3, r3, #31
 8003450:	2101      	movs	r1, #1
 8003452:	fa01 f303 	lsl.w	r3, r1, r3
 8003456:	e017      	b.n	8003488 <HAL_ADC_ConfigChannel+0x644>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	fa93 f3a3 	rbit	r3, r3
 8003464:	61fb      	str	r3, [r7, #28]
  return result;
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003470:	2320      	movs	r3, #32
 8003472:	e003      	b.n	800347c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	fab3 f383 	clz	r3, r3
 800347a:	b2db      	uxtb	r3, r3
 800347c:	3301      	adds	r3, #1
 800347e:	f003 031f 	and.w	r3, r3, #31
 8003482:	2101      	movs	r1, #1
 8003484:	fa01 f303 	lsl.w	r3, r1, r3
 8003488:	ea42 0103 	orr.w	r1, r2, r3
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10d      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x670>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	0e9b      	lsrs	r3, r3, #26
 800349e:	3301      	adds	r3, #1
 80034a0:	f003 021f 	and.w	r2, r3, #31
 80034a4:	4613      	mov	r3, r2
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	4413      	add	r3, r2
 80034aa:	3b1e      	subs	r3, #30
 80034ac:	051b      	lsls	r3, r3, #20
 80034ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034b2:	e01b      	b.n	80034ec <HAL_ADC_ConfigChannel+0x6a8>
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	fa93 f3a3 	rbit	r3, r3
 80034c0:	613b      	str	r3, [r7, #16]
  return result;
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80034cc:	2320      	movs	r3, #32
 80034ce:	e003      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	fab3 f383 	clz	r3, r3
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	3301      	adds	r3, #1
 80034da:	f003 021f 	and.w	r2, r3, #31
 80034de:	4613      	mov	r3, r2
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	4413      	add	r3, r2
 80034e4:	3b1e      	subs	r3, #30
 80034e6:	051b      	lsls	r3, r3, #20
 80034e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034ec:	430b      	orrs	r3, r1
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	6892      	ldr	r2, [r2, #8]
 80034f2:	4619      	mov	r1, r3
 80034f4:	f7ff f8ba 	bl	800266c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	4b09      	ldr	r3, [pc, #36]	; (8003524 <HAL_ADC_ConfigChannel+0x6e0>)
 80034fe:	4013      	ands	r3, r2
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 80be 	beq.w	8003682 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800350e:	d004      	beq.n	800351a <HAL_ADC_ConfigChannel+0x6d6>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a04      	ldr	r2, [pc, #16]	; (8003528 <HAL_ADC_ConfigChannel+0x6e4>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d10a      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x6ec>
 800351a:	4b04      	ldr	r3, [pc, #16]	; (800352c <HAL_ADC_ConfigChannel+0x6e8>)
 800351c:	e009      	b.n	8003532 <HAL_ADC_ConfigChannel+0x6ee>
 800351e:	bf00      	nop
 8003520:	407f0000 	.word	0x407f0000
 8003524:	80080000 	.word	0x80080000
 8003528:	50000100 	.word	0x50000100
 800352c:	50000300 	.word	0x50000300
 8003530:	4b59      	ldr	r3, [pc, #356]	; (8003698 <HAL_ADC_ConfigChannel+0x854>)
 8003532:	4618      	mov	r0, r3
 8003534:	f7fe ffc2 	bl	80024bc <LL_ADC_GetCommonPathInternalCh>
 8003538:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a56      	ldr	r2, [pc, #344]	; (800369c <HAL_ADC_ConfigChannel+0x858>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d004      	beq.n	8003550 <HAL_ADC_ConfigChannel+0x70c>
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a55      	ldr	r2, [pc, #340]	; (80036a0 <HAL_ADC_ConfigChannel+0x85c>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d13a      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003550:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003554:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d134      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003564:	d005      	beq.n	8003572 <HAL_ADC_ConfigChannel+0x72e>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a4e      	ldr	r2, [pc, #312]	; (80036a4 <HAL_ADC_ConfigChannel+0x860>)
 800356c:	4293      	cmp	r3, r2
 800356e:	f040 8085 	bne.w	800367c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800357a:	d004      	beq.n	8003586 <HAL_ADC_ConfigChannel+0x742>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a49      	ldr	r2, [pc, #292]	; (80036a8 <HAL_ADC_ConfigChannel+0x864>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d101      	bne.n	800358a <HAL_ADC_ConfigChannel+0x746>
 8003586:	4a49      	ldr	r2, [pc, #292]	; (80036ac <HAL_ADC_ConfigChannel+0x868>)
 8003588:	e000      	b.n	800358c <HAL_ADC_ConfigChannel+0x748>
 800358a:	4a43      	ldr	r2, [pc, #268]	; (8003698 <HAL_ADC_ConfigChannel+0x854>)
 800358c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003590:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003594:	4619      	mov	r1, r3
 8003596:	4610      	mov	r0, r2
 8003598:	f7fe ff7d 	bl	8002496 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800359c:	4b44      	ldr	r3, [pc, #272]	; (80036b0 <HAL_ADC_ConfigChannel+0x86c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	099b      	lsrs	r3, r3, #6
 80035a2:	4a44      	ldr	r2, [pc, #272]	; (80036b4 <HAL_ADC_ConfigChannel+0x870>)
 80035a4:	fba2 2303 	umull	r2, r3, r2, r3
 80035a8:	099b      	lsrs	r3, r3, #6
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	4613      	mov	r3, r2
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80035b6:	e002      	b.n	80035be <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	3b01      	subs	r3, #1
 80035bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1f9      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035c4:	e05a      	b.n	800367c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a3b      	ldr	r2, [pc, #236]	; (80036b8 <HAL_ADC_ConfigChannel+0x874>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d125      	bne.n	800361c <HAL_ADC_ConfigChannel+0x7d8>
 80035d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d11f      	bne.n	800361c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a31      	ldr	r2, [pc, #196]	; (80036a8 <HAL_ADC_ConfigChannel+0x864>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d104      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x7ac>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a34      	ldr	r2, [pc, #208]	; (80036bc <HAL_ADC_ConfigChannel+0x878>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d047      	beq.n	8003680 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035f8:	d004      	beq.n	8003604 <HAL_ADC_ConfigChannel+0x7c0>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a2a      	ldr	r2, [pc, #168]	; (80036a8 <HAL_ADC_ConfigChannel+0x864>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d101      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x7c4>
 8003604:	4a29      	ldr	r2, [pc, #164]	; (80036ac <HAL_ADC_ConfigChannel+0x868>)
 8003606:	e000      	b.n	800360a <HAL_ADC_ConfigChannel+0x7c6>
 8003608:	4a23      	ldr	r2, [pc, #140]	; (8003698 <HAL_ADC_ConfigChannel+0x854>)
 800360a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800360e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003612:	4619      	mov	r1, r3
 8003614:	4610      	mov	r0, r2
 8003616:	f7fe ff3e 	bl	8002496 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800361a:	e031      	b.n	8003680 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a27      	ldr	r2, [pc, #156]	; (80036c0 <HAL_ADC_ConfigChannel+0x87c>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d12d      	bne.n	8003682 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003626:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800362a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d127      	bne.n	8003682 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a1c      	ldr	r2, [pc, #112]	; (80036a8 <HAL_ADC_ConfigChannel+0x864>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d022      	beq.n	8003682 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003644:	d004      	beq.n	8003650 <HAL_ADC_ConfigChannel+0x80c>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a17      	ldr	r2, [pc, #92]	; (80036a8 <HAL_ADC_ConfigChannel+0x864>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d101      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x810>
 8003650:	4a16      	ldr	r2, [pc, #88]	; (80036ac <HAL_ADC_ConfigChannel+0x868>)
 8003652:	e000      	b.n	8003656 <HAL_ADC_ConfigChannel+0x812>
 8003654:	4a10      	ldr	r2, [pc, #64]	; (8003698 <HAL_ADC_ConfigChannel+0x854>)
 8003656:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800365a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800365e:	4619      	mov	r1, r3
 8003660:	4610      	mov	r0, r2
 8003662:	f7fe ff18 	bl	8002496 <LL_ADC_SetCommonPathInternalCh>
 8003666:	e00c      	b.n	8003682 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366c:	f043 0220 	orr.w	r2, r3, #32
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800367a:	e002      	b.n	8003682 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800367c:	bf00      	nop
 800367e:	e000      	b.n	8003682 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003680:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800368a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800368e:	4618      	mov	r0, r3
 8003690:	37d8      	adds	r7, #216	; 0xd8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	50000700 	.word	0x50000700
 800369c:	c3210000 	.word	0xc3210000
 80036a0:	90c00010 	.word	0x90c00010
 80036a4:	50000600 	.word	0x50000600
 80036a8:	50000100 	.word	0x50000100
 80036ac:	50000300 	.word	0x50000300
 80036b0:	20000000 	.word	0x20000000
 80036b4:	053e2d63 	.word	0x053e2d63
 80036b8:	c7520000 	.word	0xc7520000
 80036bc:	50000500 	.word	0x50000500
 80036c0:	cb840000 	.word	0xcb840000

080036c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff f8a3 	bl	800281c <LL_ADC_IsEnabled>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d14d      	bne.n	8003778 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	4b28      	ldr	r3, [pc, #160]	; (8003784 <ADC_Enable+0xc0>)
 80036e4:	4013      	ands	r3, r2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00d      	beq.n	8003706 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ee:	f043 0210 	orr.w	r2, r3, #16
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036fa:	f043 0201 	orr.w	r2, r3, #1
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e039      	b.n	800377a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff f85e 	bl	80027cc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003710:	f7fe fea2 	bl	8002458 <HAL_GetTick>
 8003714:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003716:	e028      	b.n	800376a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff f87d 	bl	800281c <LL_ADC_IsEnabled>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d104      	bne.n	8003732 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff f84d 	bl	80027cc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003732:	f7fe fe91 	bl	8002458 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d914      	bls.n	800376a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b01      	cmp	r3, #1
 800374c:	d00d      	beq.n	800376a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003752:	f043 0210 	orr.w	r2, r3, #16
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800375e:	f043 0201 	orr.w	r2, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e007      	b.n	800377a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b01      	cmp	r3, #1
 8003776:	d1cf      	bne.n	8003718 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	8000003f 	.word	0x8000003f

08003788 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff f854 	bl	8002842 <LL_ADC_IsDisableOngoing>
 800379a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff f83b 	bl	800281c <LL_ADC_IsEnabled>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d047      	beq.n	800383c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d144      	bne.n	800383c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 030d 	and.w	r3, r3, #13
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d10c      	bne.n	80037da <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff f815 	bl	80027f4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2203      	movs	r2, #3
 80037d0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80037d2:	f7fe fe41 	bl	8002458 <HAL_GetTick>
 80037d6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80037d8:	e029      	b.n	800382e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037de:	f043 0210 	orr.w	r2, r3, #16
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ea:	f043 0201 	orr.w	r2, r3, #1
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e023      	b.n	800383e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80037f6:	f7fe fe2f 	bl	8002458 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d914      	bls.n	800382e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00d      	beq.n	800382e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003816:	f043 0210 	orr.w	r2, r3, #16
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003822:	f043 0201 	orr.w	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e007      	b.n	800383e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1dc      	bne.n	80037f6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <LL_ADC_IsEnabled>:
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b01      	cmp	r3, #1
 8003858:	d101      	bne.n	800385e <LL_ADC_IsEnabled+0x18>
 800385a:	2301      	movs	r3, #1
 800385c:	e000      	b.n	8003860 <LL_ADC_IsEnabled+0x1a>
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <LL_ADC_StartCalibration>:
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800387e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003888:	4313      	orrs	r3, r2
 800388a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	609a      	str	r2, [r3, #8]
}
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <LL_ADC_IsCalibrationOnGoing>:
{
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038b2:	d101      	bne.n	80038b8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80038b4:	2301      	movs	r3, #1
 80038b6:	e000      	b.n	80038ba <LL_ADC_IsCalibrationOnGoing+0x1c>
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <LL_ADC_REG_IsConversionOngoing>:
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 0304 	and.w	r3, r3, #4
 80038d6:	2b04      	cmp	r3, #4
 80038d8:	d101      	bne.n	80038de <LL_ADC_REG_IsConversionOngoing+0x18>
 80038da:	2301      	movs	r3, #1
 80038dc:	e000      	b.n	80038e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80038f6:	2300      	movs	r3, #0
 80038f8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003900:	2b01      	cmp	r3, #1
 8003902:	d101      	bne.n	8003908 <HAL_ADCEx_Calibration_Start+0x1c>
 8003904:	2302      	movs	r3, #2
 8003906:	e04d      	b.n	80039a4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7ff ff39 	bl	8003788 <ADC_Disable>
 8003916:	4603      	mov	r3, r0
 8003918:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800391a:	7bfb      	ldrb	r3, [r7, #15]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d136      	bne.n	800398e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003924:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003928:	f023 0302 	bic.w	r3, r3, #2
 800392c:	f043 0202 	orr.w	r2, r3, #2
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6839      	ldr	r1, [r7, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f7ff ff96 	bl	800386c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003940:	e014      	b.n	800396c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	3301      	adds	r3, #1
 8003946:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	4a18      	ldr	r2, [pc, #96]	; (80039ac <HAL_ADCEx_Calibration_Start+0xc0>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d90d      	bls.n	800396c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003954:	f023 0312 	bic.w	r3, r3, #18
 8003958:	f043 0210 	orr.w	r2, r3, #16
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e01b      	b.n	80039a4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff ff94 	bl	800389e <LL_ADC_IsCalibrationOnGoing>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1e2      	bne.n	8003942 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003980:	f023 0303 	bic.w	r3, r3, #3
 8003984:	f043 0201 	orr.w	r2, r3, #1
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	65da      	str	r2, [r3, #92]	; 0x5c
 800398c:	e005      	b.n	800399a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003992:	f043 0210 	orr.w	r2, r3, #16
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	0004de01 	.word	0x0004de01

080039b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80039b0:	b590      	push	{r4, r7, lr}
 80039b2:	b0a1      	sub	sp, #132	; 0x84
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d101      	bne.n	80039ce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80039ca:	2302      	movs	r3, #2
 80039cc:	e0e7      	b.n	8003b9e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80039d6:	2300      	movs	r3, #0
 80039d8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80039da:	2300      	movs	r3, #0
 80039dc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039e6:	d102      	bne.n	80039ee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80039e8:	4b6f      	ldr	r3, [pc, #444]	; (8003ba8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80039ea:	60bb      	str	r3, [r7, #8]
 80039ec:	e009      	b.n	8003a02 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a6e      	ldr	r2, [pc, #440]	; (8003bac <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d102      	bne.n	80039fe <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80039f8:	4b6d      	ldr	r3, [pc, #436]	; (8003bb0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80039fa:	60bb      	str	r3, [r7, #8]
 80039fc:	e001      	b.n	8003a02 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80039fe:	2300      	movs	r3, #0
 8003a00:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10b      	bne.n	8003a20 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0c:	f043 0220 	orr.w	r2, r3, #32
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e0be      	b.n	8003b9e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7ff ff4f 	bl	80038c6 <LL_ADC_REG_IsConversionOngoing>
 8003a28:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff ff49 	bl	80038c6 <LL_ADC_REG_IsConversionOngoing>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f040 80a0 	bne.w	8003b7c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003a3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f040 809c 	bne.w	8003b7c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a4c:	d004      	beq.n	8003a58 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a55      	ldr	r2, [pc, #340]	; (8003ba8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d101      	bne.n	8003a5c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003a58:	4b56      	ldr	r3, [pc, #344]	; (8003bb4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003a5a:	e000      	b.n	8003a5e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003a5c:	4b56      	ldr	r3, [pc, #344]	; (8003bb8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003a5e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d04b      	beq.n	8003b00 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003a68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	6859      	ldr	r1, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a7a:	035b      	lsls	r3, r3, #13
 8003a7c:	430b      	orrs	r3, r1
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a82:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a8c:	d004      	beq.n	8003a98 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a45      	ldr	r2, [pc, #276]	; (8003ba8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d10f      	bne.n	8003ab8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003a98:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003a9c:	f7ff fed3 	bl	8003846 <LL_ADC_IsEnabled>
 8003aa0:	4604      	mov	r4, r0
 8003aa2:	4841      	ldr	r0, [pc, #260]	; (8003ba8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003aa4:	f7ff fecf 	bl	8003846 <LL_ADC_IsEnabled>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	4323      	orrs	r3, r4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	bf0c      	ite	eq
 8003ab0:	2301      	moveq	r3, #1
 8003ab2:	2300      	movne	r3, #0
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	e012      	b.n	8003ade <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003ab8:	483c      	ldr	r0, [pc, #240]	; (8003bac <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003aba:	f7ff fec4 	bl	8003846 <LL_ADC_IsEnabled>
 8003abe:	4604      	mov	r4, r0
 8003ac0:	483b      	ldr	r0, [pc, #236]	; (8003bb0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003ac2:	f7ff fec0 	bl	8003846 <LL_ADC_IsEnabled>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	431c      	orrs	r4, r3
 8003aca:	483c      	ldr	r0, [pc, #240]	; (8003bbc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003acc:	f7ff febb 	bl	8003846 <LL_ADC_IsEnabled>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	4323      	orrs	r3, r4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	bf0c      	ite	eq
 8003ad8:	2301      	moveq	r3, #1
 8003ada:	2300      	movne	r3, #0
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d056      	beq.n	8003b90 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003ae2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003aea:	f023 030f 	bic.w	r3, r3, #15
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	6811      	ldr	r1, [r2, #0]
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	6892      	ldr	r2, [r2, #8]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	431a      	orrs	r2, r3
 8003afa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003afc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003afe:	e047      	b.n	8003b90 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003b00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b0a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b14:	d004      	beq.n	8003b20 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a23      	ldr	r2, [pc, #140]	; (8003ba8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d10f      	bne.n	8003b40 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003b20:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003b24:	f7ff fe8f 	bl	8003846 <LL_ADC_IsEnabled>
 8003b28:	4604      	mov	r4, r0
 8003b2a:	481f      	ldr	r0, [pc, #124]	; (8003ba8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b2c:	f7ff fe8b 	bl	8003846 <LL_ADC_IsEnabled>
 8003b30:	4603      	mov	r3, r0
 8003b32:	4323      	orrs	r3, r4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	bf0c      	ite	eq
 8003b38:	2301      	moveq	r3, #1
 8003b3a:	2300      	movne	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	e012      	b.n	8003b66 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003b40:	481a      	ldr	r0, [pc, #104]	; (8003bac <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003b42:	f7ff fe80 	bl	8003846 <LL_ADC_IsEnabled>
 8003b46:	4604      	mov	r4, r0
 8003b48:	4819      	ldr	r0, [pc, #100]	; (8003bb0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003b4a:	f7ff fe7c 	bl	8003846 <LL_ADC_IsEnabled>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	431c      	orrs	r4, r3
 8003b52:	481a      	ldr	r0, [pc, #104]	; (8003bbc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003b54:	f7ff fe77 	bl	8003846 <LL_ADC_IsEnabled>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	4323      	orrs	r3, r4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	bf0c      	ite	eq
 8003b60:	2301      	moveq	r3, #1
 8003b62:	2300      	movne	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d012      	beq.n	8003b90 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003b72:	f023 030f 	bic.w	r3, r3, #15
 8003b76:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b78:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b7a:	e009      	b.n	8003b90 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b80:	f043 0220 	orr.w	r2, r3, #32
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003b8e:	e000      	b.n	8003b92 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b90:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b9a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3784      	adds	r7, #132	; 0x84
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd90      	pop	{r4, r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	50000100 	.word	0x50000100
 8003bac:	50000400 	.word	0x50000400
 8003bb0:	50000500 	.word	0x50000500
 8003bb4:	50000300 	.word	0x50000300
 8003bb8:	50000700 	.word	0x50000700
 8003bbc:	50000600 	.word	0x50000600

08003bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <__NVIC_SetPriorityGrouping+0x44>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bdc:	4013      	ands	r3, r2
 8003bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bf2:	4a04      	ldr	r2, [pc, #16]	; (8003c04 <__NVIC_SetPriorityGrouping+0x44>)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	60d3      	str	r3, [r2, #12]
}
 8003bf8:	bf00      	nop
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	e000ed00 	.word	0xe000ed00

08003c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c0c:	4b04      	ldr	r3, [pc, #16]	; (8003c20 <__NVIC_GetPriorityGrouping+0x18>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	0a1b      	lsrs	r3, r3, #8
 8003c12:	f003 0307 	and.w	r3, r3, #7
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	e000ed00 	.word	0xe000ed00

08003c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	db0b      	blt.n	8003c4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c36:	79fb      	ldrb	r3, [r7, #7]
 8003c38:	f003 021f 	and.w	r2, r3, #31
 8003c3c:	4907      	ldr	r1, [pc, #28]	; (8003c5c <__NVIC_EnableIRQ+0x38>)
 8003c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	2001      	movs	r0, #1
 8003c46:	fa00 f202 	lsl.w	r2, r0, r2
 8003c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	e000e100 	.word	0xe000e100

08003c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	4603      	mov	r3, r0
 8003c68:	6039      	str	r1, [r7, #0]
 8003c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	db0a      	blt.n	8003c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	490c      	ldr	r1, [pc, #48]	; (8003cac <__NVIC_SetPriority+0x4c>)
 8003c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7e:	0112      	lsls	r2, r2, #4
 8003c80:	b2d2      	uxtb	r2, r2
 8003c82:	440b      	add	r3, r1
 8003c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c88:	e00a      	b.n	8003ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	4908      	ldr	r1, [pc, #32]	; (8003cb0 <__NVIC_SetPriority+0x50>)
 8003c90:	79fb      	ldrb	r3, [r7, #7]
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	3b04      	subs	r3, #4
 8003c98:	0112      	lsls	r2, r2, #4
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	761a      	strb	r2, [r3, #24]
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	e000e100 	.word	0xe000e100
 8003cb0:	e000ed00 	.word	0xe000ed00

08003cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b089      	sub	sp, #36	; 0x24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f1c3 0307 	rsb	r3, r3, #7
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	bf28      	it	cs
 8003cd2:	2304      	movcs	r3, #4
 8003cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	3304      	adds	r3, #4
 8003cda:	2b06      	cmp	r3, #6
 8003cdc:	d902      	bls.n	8003ce4 <NVIC_EncodePriority+0x30>
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	3b03      	subs	r3, #3
 8003ce2:	e000      	b.n	8003ce6 <NVIC_EncodePriority+0x32>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	43da      	mvns	r2, r3
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	401a      	ands	r2, r3
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	fa01 f303 	lsl.w	r3, r1, r3
 8003d06:	43d9      	mvns	r1, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d0c:	4313      	orrs	r3, r2
         );
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3724      	adds	r7, #36	; 0x24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b082      	sub	sp, #8
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7ff ff4c 	bl	8003bc0 <__NVIC_SetPriorityGrouping>
}
 8003d28:	bf00      	nop
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	4603      	mov	r3, r0
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d3e:	f7ff ff63 	bl	8003c08 <__NVIC_GetPriorityGrouping>
 8003d42:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	68b9      	ldr	r1, [r7, #8]
 8003d48:	6978      	ldr	r0, [r7, #20]
 8003d4a:	f7ff ffb3 	bl	8003cb4 <NVIC_EncodePriority>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d54:	4611      	mov	r1, r2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7ff ff82 	bl	8003c60 <__NVIC_SetPriority>
}
 8003d5c:	bf00      	nop
 8003d5e:	3718      	adds	r7, #24
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff ff56 	bl	8003c24 <__NVIC_EnableIRQ>
}
 8003d78:	bf00      	nop
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d005      	beq.n	8003da4 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2204      	movs	r2, #4
 8003d9c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	73fb      	strb	r3, [r7, #15]
 8003da2:	e037      	b.n	8003e14 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 020e 	bic.w	r2, r2, #14
 8003db2:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dc2:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0201 	bic.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd8:	f003 021f 	and.w	r2, r3, #31
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de0:	2101      	movs	r1, #1
 8003de2:	fa01 f202 	lsl.w	r2, r1, r2
 8003de6:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003df0:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00c      	beq.n	8003e14 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e08:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e12:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b084      	sub	sp, #16
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d00d      	beq.n	8003e66 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2204      	movs	r2, #4
 8003e4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	73fb      	strb	r3, [r7, #15]
 8003e64:	e047      	b.n	8003ef6 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 020e 	bic.w	r2, r2, #14
 8003e74:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0201 	bic.w	r2, r2, #1
 8003e84:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9a:	f003 021f 	and.w	r2, r3, #31
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ea8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003eb2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00c      	beq.n	8003ed6 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ed4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	4798      	blx	r3
    }
  }
  return status;
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f0e:	e15a      	b.n	80041c6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	2101      	movs	r1, #1
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 814c 	beq.w	80041c0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f003 0303 	and.w	r3, r3, #3
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d005      	beq.n	8003f40 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d130      	bne.n	8003fa2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	2203      	movs	r2, #3
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	43db      	mvns	r3, r3
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	4013      	ands	r3, r2
 8003f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f76:	2201      	movs	r2, #1
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	4013      	ands	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	091b      	lsrs	r3, r3, #4
 8003f8c:	f003 0201 	and.w	r2, r3, #1
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	fa02 f303 	lsl.w	r3, r2, r3
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	d017      	beq.n	8003fde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	2203      	movs	r2, #3
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f003 0303 	and.w	r3, r3, #3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d123      	bne.n	8004032 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	08da      	lsrs	r2, r3, #3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	3208      	adds	r2, #8
 8003ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	220f      	movs	r2, #15
 8004002:	fa02 f303 	lsl.w	r3, r2, r3
 8004006:	43db      	mvns	r3, r3
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	4013      	ands	r3, r2
 800400c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	691a      	ldr	r2, [r3, #16]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	4313      	orrs	r3, r2
 8004022:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	08da      	lsrs	r2, r3, #3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3208      	adds	r2, #8
 800402c:	6939      	ldr	r1, [r7, #16]
 800402e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	2203      	movs	r2, #3
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	43db      	mvns	r3, r3
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	4013      	ands	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f003 0203 	and.w	r2, r3, #3
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	fa02 f303 	lsl.w	r3, r2, r3
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	4313      	orrs	r3, r2
 800405e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 80a6 	beq.w	80041c0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004074:	4b5b      	ldr	r3, [pc, #364]	; (80041e4 <HAL_GPIO_Init+0x2e4>)
 8004076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004078:	4a5a      	ldr	r2, [pc, #360]	; (80041e4 <HAL_GPIO_Init+0x2e4>)
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	6613      	str	r3, [r2, #96]	; 0x60
 8004080:	4b58      	ldr	r3, [pc, #352]	; (80041e4 <HAL_GPIO_Init+0x2e4>)
 8004082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	60bb      	str	r3, [r7, #8]
 800408a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800408c:	4a56      	ldr	r2, [pc, #344]	; (80041e8 <HAL_GPIO_Init+0x2e8>)
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	089b      	lsrs	r3, r3, #2
 8004092:	3302      	adds	r3, #2
 8004094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004098:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f003 0303 	and.w	r3, r3, #3
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	220f      	movs	r2, #15
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	43db      	mvns	r3, r3
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4013      	ands	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80040b6:	d01f      	beq.n	80040f8 <HAL_GPIO_Init+0x1f8>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a4c      	ldr	r2, [pc, #304]	; (80041ec <HAL_GPIO_Init+0x2ec>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d019      	beq.n	80040f4 <HAL_GPIO_Init+0x1f4>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a4b      	ldr	r2, [pc, #300]	; (80041f0 <HAL_GPIO_Init+0x2f0>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d013      	beq.n	80040f0 <HAL_GPIO_Init+0x1f0>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a4a      	ldr	r2, [pc, #296]	; (80041f4 <HAL_GPIO_Init+0x2f4>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d00d      	beq.n	80040ec <HAL_GPIO_Init+0x1ec>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a49      	ldr	r2, [pc, #292]	; (80041f8 <HAL_GPIO_Init+0x2f8>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d007      	beq.n	80040e8 <HAL_GPIO_Init+0x1e8>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a48      	ldr	r2, [pc, #288]	; (80041fc <HAL_GPIO_Init+0x2fc>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d101      	bne.n	80040e4 <HAL_GPIO_Init+0x1e4>
 80040e0:	2305      	movs	r3, #5
 80040e2:	e00a      	b.n	80040fa <HAL_GPIO_Init+0x1fa>
 80040e4:	2306      	movs	r3, #6
 80040e6:	e008      	b.n	80040fa <HAL_GPIO_Init+0x1fa>
 80040e8:	2304      	movs	r3, #4
 80040ea:	e006      	b.n	80040fa <HAL_GPIO_Init+0x1fa>
 80040ec:	2303      	movs	r3, #3
 80040ee:	e004      	b.n	80040fa <HAL_GPIO_Init+0x1fa>
 80040f0:	2302      	movs	r3, #2
 80040f2:	e002      	b.n	80040fa <HAL_GPIO_Init+0x1fa>
 80040f4:	2301      	movs	r3, #1
 80040f6:	e000      	b.n	80040fa <HAL_GPIO_Init+0x1fa>
 80040f8:	2300      	movs	r3, #0
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	f002 0203 	and.w	r2, r2, #3
 8004100:	0092      	lsls	r2, r2, #2
 8004102:	4093      	lsls	r3, r2
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4313      	orrs	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800410a:	4937      	ldr	r1, [pc, #220]	; (80041e8 <HAL_GPIO_Init+0x2e8>)
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	089b      	lsrs	r3, r3, #2
 8004110:	3302      	adds	r3, #2
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004118:	4b39      	ldr	r3, [pc, #228]	; (8004200 <HAL_GPIO_Init+0x300>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	43db      	mvns	r3, r3
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	4013      	ands	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d003      	beq.n	800413c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	4313      	orrs	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800413c:	4a30      	ldr	r2, [pc, #192]	; (8004200 <HAL_GPIO_Init+0x300>)
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004142:	4b2f      	ldr	r3, [pc, #188]	; (8004200 <HAL_GPIO_Init+0x300>)
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	43db      	mvns	r3, r3
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	4013      	ands	r3, r2
 8004150:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4313      	orrs	r3, r2
 8004164:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004166:	4a26      	ldr	r2, [pc, #152]	; (8004200 <HAL_GPIO_Init+0x300>)
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800416c:	4b24      	ldr	r3, [pc, #144]	; (8004200 <HAL_GPIO_Init+0x300>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	43db      	mvns	r3, r3
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4013      	ands	r3, r2
 800417a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d003      	beq.n	8004190 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	4313      	orrs	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004190:	4a1b      	ldr	r2, [pc, #108]	; (8004200 <HAL_GPIO_Init+0x300>)
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004196:	4b1a      	ldr	r3, [pc, #104]	; (8004200 <HAL_GPIO_Init+0x300>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	43db      	mvns	r3, r3
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	4013      	ands	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80041ba:	4a11      	ldr	r2, [pc, #68]	; (8004200 <HAL_GPIO_Init+0x300>)
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	3301      	adds	r3, #1
 80041c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	fa22 f303 	lsr.w	r3, r2, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f47f ae9d 	bne.w	8003f10 <HAL_GPIO_Init+0x10>
  }
}
 80041d6:	bf00      	nop
 80041d8:	bf00      	nop
 80041da:	371c      	adds	r7, #28
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	40021000 	.word	0x40021000
 80041e8:	40010000 	.word	0x40010000
 80041ec:	48000400 	.word	0x48000400
 80041f0:	48000800 	.word	0x48000800
 80041f4:	48000c00 	.word	0x48000c00
 80041f8:	48001000 	.word	0x48001000
 80041fc:	48001400 	.word	0x48001400
 8004200:	40010400 	.word	0x40010400

08004204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	460b      	mov	r3, r1
 800420e:	807b      	strh	r3, [r7, #2]
 8004210:	4613      	mov	r3, r2
 8004212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004214:	787b      	ldrb	r3, [r7, #1]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800421a:	887a      	ldrh	r2, [r7, #2]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004220:	e002      	b.n	8004228 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004222:	887a      	ldrh	r2, [r7, #2]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	4603      	mov	r3, r0
 800423c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800423e:	4b08      	ldr	r3, [pc, #32]	; (8004260 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004240:	695a      	ldr	r2, [r3, #20]
 8004242:	88fb      	ldrh	r3, [r7, #6]
 8004244:	4013      	ands	r3, r2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d006      	beq.n	8004258 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800424a:	4a05      	ldr	r2, [pc, #20]	; (8004260 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800424c:	88fb      	ldrh	r3, [r7, #6]
 800424e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004250:	88fb      	ldrh	r3, [r7, #6]
 8004252:	4618      	mov	r0, r3
 8004254:	f000 f806 	bl	8004264 <HAL_GPIO_EXTI_Callback>
  }
}
 8004258:	bf00      	nop
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	40010400 	.word	0x40010400

08004264 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	4603      	mov	r3, r0
 800426c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
	...

0800427c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d141      	bne.n	800430e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800428a:	4b4b      	ldr	r3, [pc, #300]	; (80043b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004296:	d131      	bne.n	80042fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004298:	4b47      	ldr	r3, [pc, #284]	; (80043b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800429a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800429e:	4a46      	ldr	r2, [pc, #280]	; (80043b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042a8:	4b43      	ldr	r3, [pc, #268]	; (80043b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042b0:	4a41      	ldr	r2, [pc, #260]	; (80043b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042b8:	4b40      	ldr	r3, [pc, #256]	; (80043bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2232      	movs	r2, #50	; 0x32
 80042be:	fb02 f303 	mul.w	r3, r2, r3
 80042c2:	4a3f      	ldr	r2, [pc, #252]	; (80043c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80042c4:	fba2 2303 	umull	r2, r3, r2, r3
 80042c8:	0c9b      	lsrs	r3, r3, #18
 80042ca:	3301      	adds	r3, #1
 80042cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042ce:	e002      	b.n	80042d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042d6:	4b38      	ldr	r3, [pc, #224]	; (80043b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e2:	d102      	bne.n	80042ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f2      	bne.n	80042d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042ea:	4b33      	ldr	r3, [pc, #204]	; (80043b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042f6:	d158      	bne.n	80043aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e057      	b.n	80043ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042fc:	4b2e      	ldr	r3, [pc, #184]	; (80043b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004302:	4a2d      	ldr	r2, [pc, #180]	; (80043b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004304:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004308:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800430c:	e04d      	b.n	80043aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004314:	d141      	bne.n	800439a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004316:	4b28      	ldr	r3, [pc, #160]	; (80043b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800431e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004322:	d131      	bne.n	8004388 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004324:	4b24      	ldr	r3, [pc, #144]	; (80043b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800432a:	4a23      	ldr	r2, [pc, #140]	; (80043b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800432c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004330:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004334:	4b20      	ldr	r3, [pc, #128]	; (80043b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800433c:	4a1e      	ldr	r2, [pc, #120]	; (80043b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800433e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004342:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004344:	4b1d      	ldr	r3, [pc, #116]	; (80043bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2232      	movs	r2, #50	; 0x32
 800434a:	fb02 f303 	mul.w	r3, r2, r3
 800434e:	4a1c      	ldr	r2, [pc, #112]	; (80043c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004350:	fba2 2303 	umull	r2, r3, r2, r3
 8004354:	0c9b      	lsrs	r3, r3, #18
 8004356:	3301      	adds	r3, #1
 8004358:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800435a:	e002      	b.n	8004362 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	3b01      	subs	r3, #1
 8004360:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004362:	4b15      	ldr	r3, [pc, #84]	; (80043b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800436a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800436e:	d102      	bne.n	8004376 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1f2      	bne.n	800435c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004376:	4b10      	ldr	r3, [pc, #64]	; (80043b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800437e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004382:	d112      	bne.n	80043aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e011      	b.n	80043ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004388:	4b0b      	ldr	r3, [pc, #44]	; (80043b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800438a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800438e:	4a0a      	ldr	r2, [pc, #40]	; (80043b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004394:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004398:	e007      	b.n	80043aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800439a:	4b07      	ldr	r3, [pc, #28]	; (80043b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043a2:	4a05      	ldr	r2, [pc, #20]	; (80043b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043a8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3714      	adds	r7, #20
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	40007000 	.word	0x40007000
 80043bc:	20000000 	.word	0x20000000
 80043c0:	431bde83 	.word	0x431bde83

080043c4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80043c8:	4b05      	ldr	r3, [pc, #20]	; (80043e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	4a04      	ldr	r2, [pc, #16]	; (80043e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80043ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043d2:	6093      	str	r3, [r2, #8]
}
 80043d4:	bf00      	nop
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	40007000 	.word	0x40007000

080043e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b088      	sub	sp, #32
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e306      	b.n	8004a04 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d075      	beq.n	80044ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004402:	4b97      	ldr	r3, [pc, #604]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 030c 	and.w	r3, r3, #12
 800440a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800440c:	4b94      	ldr	r3, [pc, #592]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f003 0303 	and.w	r3, r3, #3
 8004414:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	2b0c      	cmp	r3, #12
 800441a:	d102      	bne.n	8004422 <HAL_RCC_OscConfig+0x3e>
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	2b03      	cmp	r3, #3
 8004420:	d002      	beq.n	8004428 <HAL_RCC_OscConfig+0x44>
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	2b08      	cmp	r3, #8
 8004426:	d10b      	bne.n	8004440 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004428:	4b8d      	ldr	r3, [pc, #564]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d05b      	beq.n	80044ec <HAL_RCC_OscConfig+0x108>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d157      	bne.n	80044ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e2e1      	b.n	8004a04 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004448:	d106      	bne.n	8004458 <HAL_RCC_OscConfig+0x74>
 800444a:	4b85      	ldr	r3, [pc, #532]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a84      	ldr	r2, [pc, #528]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 8004450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004454:	6013      	str	r3, [r2, #0]
 8004456:	e01d      	b.n	8004494 <HAL_RCC_OscConfig+0xb0>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004460:	d10c      	bne.n	800447c <HAL_RCC_OscConfig+0x98>
 8004462:	4b7f      	ldr	r3, [pc, #508]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a7e      	ldr	r2, [pc, #504]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 8004468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800446c:	6013      	str	r3, [r2, #0]
 800446e:	4b7c      	ldr	r3, [pc, #496]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a7b      	ldr	r2, [pc, #492]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 8004474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004478:	6013      	str	r3, [r2, #0]
 800447a:	e00b      	b.n	8004494 <HAL_RCC_OscConfig+0xb0>
 800447c:	4b78      	ldr	r3, [pc, #480]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a77      	ldr	r2, [pc, #476]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 8004482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004486:	6013      	str	r3, [r2, #0]
 8004488:	4b75      	ldr	r3, [pc, #468]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a74      	ldr	r2, [pc, #464]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 800448e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004492:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d013      	beq.n	80044c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449c:	f7fd ffdc 	bl	8002458 <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044a4:	f7fd ffd8 	bl	8002458 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b64      	cmp	r3, #100	; 0x64
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e2a6      	b.n	8004a04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044b6:	4b6a      	ldr	r3, [pc, #424]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0f0      	beq.n	80044a4 <HAL_RCC_OscConfig+0xc0>
 80044c2:	e014      	b.n	80044ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c4:	f7fd ffc8 	bl	8002458 <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044cc:	f7fd ffc4 	bl	8002458 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b64      	cmp	r3, #100	; 0x64
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e292      	b.n	8004a04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044de:	4b60      	ldr	r3, [pc, #384]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1f0      	bne.n	80044cc <HAL_RCC_OscConfig+0xe8>
 80044ea:	e000      	b.n	80044ee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d075      	beq.n	80045e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044fa:	4b59      	ldr	r3, [pc, #356]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 030c 	and.w	r3, r3, #12
 8004502:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004504:	4b56      	ldr	r3, [pc, #344]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f003 0303 	and.w	r3, r3, #3
 800450c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	2b0c      	cmp	r3, #12
 8004512:	d102      	bne.n	800451a <HAL_RCC_OscConfig+0x136>
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	2b02      	cmp	r3, #2
 8004518:	d002      	beq.n	8004520 <HAL_RCC_OscConfig+0x13c>
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	2b04      	cmp	r3, #4
 800451e:	d11f      	bne.n	8004560 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004520:	4b4f      	ldr	r3, [pc, #316]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004528:	2b00      	cmp	r3, #0
 800452a:	d005      	beq.n	8004538 <HAL_RCC_OscConfig+0x154>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e265      	b.n	8004a04 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004538:	4b49      	ldr	r3, [pc, #292]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	061b      	lsls	r3, r3, #24
 8004546:	4946      	ldr	r1, [pc, #280]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 8004548:	4313      	orrs	r3, r2
 800454a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800454c:	4b45      	ldr	r3, [pc, #276]	; (8004664 <HAL_RCC_OscConfig+0x280>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4618      	mov	r0, r3
 8004552:	f7fd f83d 	bl	80015d0 <HAL_InitTick>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d043      	beq.n	80045e4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e251      	b.n	8004a04 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d023      	beq.n	80045b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004568:	4b3d      	ldr	r3, [pc, #244]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a3c      	ldr	r2, [pc, #240]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 800456e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004574:	f7fd ff70 	bl	8002458 <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800457c:	f7fd ff6c 	bl	8002458 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e23a      	b.n	8004a04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800458e:	4b34      	ldr	r3, [pc, #208]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0f0      	beq.n	800457c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800459a:	4b31      	ldr	r3, [pc, #196]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	061b      	lsls	r3, r3, #24
 80045a8:	492d      	ldr	r1, [pc, #180]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	604b      	str	r3, [r1, #4]
 80045ae:	e01a      	b.n	80045e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045b0:	4b2b      	ldr	r3, [pc, #172]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a2a      	ldr	r2, [pc, #168]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 80045b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045bc:	f7fd ff4c 	bl	8002458 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045c4:	f7fd ff48 	bl	8002458 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e216      	b.n	8004a04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045d6:	4b22      	ldr	r3, [pc, #136]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1f0      	bne.n	80045c4 <HAL_RCC_OscConfig+0x1e0>
 80045e2:	e000      	b.n	80045e6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d041      	beq.n	8004676 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d01c      	beq.n	8004634 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045fa:	4b19      	ldr	r3, [pc, #100]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 80045fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004600:	4a17      	ldr	r2, [pc, #92]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 8004602:	f043 0301 	orr.w	r3, r3, #1
 8004606:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460a:	f7fd ff25 	bl	8002458 <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004610:	e008      	b.n	8004624 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004612:	f7fd ff21 	bl	8002458 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e1ef      	b.n	8004a04 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004624:	4b0e      	ldr	r3, [pc, #56]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 8004626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0ef      	beq.n	8004612 <HAL_RCC_OscConfig+0x22e>
 8004632:	e020      	b.n	8004676 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004634:	4b0a      	ldr	r3, [pc, #40]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 8004636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800463a:	4a09      	ldr	r2, [pc, #36]	; (8004660 <HAL_RCC_OscConfig+0x27c>)
 800463c:	f023 0301 	bic.w	r3, r3, #1
 8004640:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004644:	f7fd ff08 	bl	8002458 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800464a:	e00d      	b.n	8004668 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800464c:	f7fd ff04 	bl	8002458 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d906      	bls.n	8004668 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e1d2      	b.n	8004a04 <HAL_RCC_OscConfig+0x620>
 800465e:	bf00      	nop
 8004660:	40021000 	.word	0x40021000
 8004664:	200000c0 	.word	0x200000c0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004668:	4b8c      	ldr	r3, [pc, #560]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 800466a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1ea      	bne.n	800464c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0304 	and.w	r3, r3, #4
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 80a6 	beq.w	80047d0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004684:	2300      	movs	r3, #0
 8004686:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004688:	4b84      	ldr	r3, [pc, #528]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 800468a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <HAL_RCC_OscConfig+0x2b4>
 8004694:	2301      	movs	r3, #1
 8004696:	e000      	b.n	800469a <HAL_RCC_OscConfig+0x2b6>
 8004698:	2300      	movs	r3, #0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00d      	beq.n	80046ba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800469e:	4b7f      	ldr	r3, [pc, #508]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 80046a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a2:	4a7e      	ldr	r2, [pc, #504]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 80046a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a8:	6593      	str	r3, [r2, #88]	; 0x58
 80046aa:	4b7c      	ldr	r3, [pc, #496]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 80046ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80046b6:	2301      	movs	r3, #1
 80046b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046ba:	4b79      	ldr	r3, [pc, #484]	; (80048a0 <HAL_RCC_OscConfig+0x4bc>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d118      	bne.n	80046f8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046c6:	4b76      	ldr	r3, [pc, #472]	; (80048a0 <HAL_RCC_OscConfig+0x4bc>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a75      	ldr	r2, [pc, #468]	; (80048a0 <HAL_RCC_OscConfig+0x4bc>)
 80046cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046d2:	f7fd fec1 	bl	8002458 <HAL_GetTick>
 80046d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046d8:	e008      	b.n	80046ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046da:	f7fd febd 	bl	8002458 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e18b      	b.n	8004a04 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046ec:	4b6c      	ldr	r3, [pc, #432]	; (80048a0 <HAL_RCC_OscConfig+0x4bc>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0f0      	beq.n	80046da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d108      	bne.n	8004712 <HAL_RCC_OscConfig+0x32e>
 8004700:	4b66      	ldr	r3, [pc, #408]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 8004702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004706:	4a65      	ldr	r2, [pc, #404]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 8004708:	f043 0301 	orr.w	r3, r3, #1
 800470c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004710:	e024      	b.n	800475c <HAL_RCC_OscConfig+0x378>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	2b05      	cmp	r3, #5
 8004718:	d110      	bne.n	800473c <HAL_RCC_OscConfig+0x358>
 800471a:	4b60      	ldr	r3, [pc, #384]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 800471c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004720:	4a5e      	ldr	r2, [pc, #376]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 8004722:	f043 0304 	orr.w	r3, r3, #4
 8004726:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800472a:	4b5c      	ldr	r3, [pc, #368]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 800472c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004730:	4a5a      	ldr	r2, [pc, #360]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 8004732:	f043 0301 	orr.w	r3, r3, #1
 8004736:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800473a:	e00f      	b.n	800475c <HAL_RCC_OscConfig+0x378>
 800473c:	4b57      	ldr	r3, [pc, #348]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 800473e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004742:	4a56      	ldr	r2, [pc, #344]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 8004744:	f023 0301 	bic.w	r3, r3, #1
 8004748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800474c:	4b53      	ldr	r3, [pc, #332]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 800474e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004752:	4a52      	ldr	r2, [pc, #328]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 8004754:	f023 0304 	bic.w	r3, r3, #4
 8004758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d016      	beq.n	8004792 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004764:	f7fd fe78 	bl	8002458 <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800476a:	e00a      	b.n	8004782 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800476c:	f7fd fe74 	bl	8002458 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	f241 3288 	movw	r2, #5000	; 0x1388
 800477a:	4293      	cmp	r3, r2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e140      	b.n	8004a04 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004782:	4b46      	ldr	r3, [pc, #280]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 8004784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0ed      	beq.n	800476c <HAL_RCC_OscConfig+0x388>
 8004790:	e015      	b.n	80047be <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004792:	f7fd fe61 	bl	8002458 <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004798:	e00a      	b.n	80047b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800479a:	f7fd fe5d 	bl	8002458 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d901      	bls.n	80047b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e129      	b.n	8004a04 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047b0:	4b3a      	ldr	r3, [pc, #232]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 80047b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1ed      	bne.n	800479a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047be:	7ffb      	ldrb	r3, [r7, #31]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d105      	bne.n	80047d0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047c4:	4b35      	ldr	r3, [pc, #212]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 80047c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c8:	4a34      	ldr	r2, [pc, #208]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 80047ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0320 	and.w	r3, r3, #32
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d03c      	beq.n	8004856 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d01c      	beq.n	800481e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80047e4:	4b2d      	ldr	r3, [pc, #180]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 80047e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047ea:	4a2c      	ldr	r2, [pc, #176]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 80047ec:	f043 0301 	orr.w	r3, r3, #1
 80047f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f4:	f7fd fe30 	bl	8002458 <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047fc:	f7fd fe2c 	bl	8002458 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e0fa      	b.n	8004a04 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800480e:	4b23      	ldr	r3, [pc, #140]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 8004810:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d0ef      	beq.n	80047fc <HAL_RCC_OscConfig+0x418>
 800481c:	e01b      	b.n	8004856 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800481e:	4b1f      	ldr	r3, [pc, #124]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 8004820:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004824:	4a1d      	ldr	r2, [pc, #116]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 8004826:	f023 0301 	bic.w	r3, r3, #1
 800482a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800482e:	f7fd fe13 	bl	8002458 <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004834:	e008      	b.n	8004848 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004836:	f7fd fe0f 	bl	8002458 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e0dd      	b.n	8004a04 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004848:	4b14      	ldr	r3, [pc, #80]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 800484a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1ef      	bne.n	8004836 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	2b00      	cmp	r3, #0
 800485c:	f000 80d1 	beq.w	8004a02 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004860:	4b0e      	ldr	r3, [pc, #56]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f003 030c 	and.w	r3, r3, #12
 8004868:	2b0c      	cmp	r3, #12
 800486a:	f000 808b 	beq.w	8004984 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	2b02      	cmp	r3, #2
 8004874:	d15e      	bne.n	8004934 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004876:	4b09      	ldr	r3, [pc, #36]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a08      	ldr	r2, [pc, #32]	; (800489c <HAL_RCC_OscConfig+0x4b8>)
 800487c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004882:	f7fd fde9 	bl	8002458 <HAL_GetTick>
 8004886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004888:	e00c      	b.n	80048a4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800488a:	f7fd fde5 	bl	8002458 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d905      	bls.n	80048a4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e0b3      	b.n	8004a04 <HAL_RCC_OscConfig+0x620>
 800489c:	40021000 	.word	0x40021000
 80048a0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048a4:	4b59      	ldr	r3, [pc, #356]	; (8004a0c <HAL_RCC_OscConfig+0x628>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1ec      	bne.n	800488a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048b0:	4b56      	ldr	r3, [pc, #344]	; (8004a0c <HAL_RCC_OscConfig+0x628>)
 80048b2:	68da      	ldr	r2, [r3, #12]
 80048b4:	4b56      	ldr	r3, [pc, #344]	; (8004a10 <HAL_RCC_OscConfig+0x62c>)
 80048b6:	4013      	ands	r3, r2
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6a11      	ldr	r1, [r2, #32]
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048c0:	3a01      	subs	r2, #1
 80048c2:	0112      	lsls	r2, r2, #4
 80048c4:	4311      	orrs	r1, r2
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80048ca:	0212      	lsls	r2, r2, #8
 80048cc:	4311      	orrs	r1, r2
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80048d2:	0852      	lsrs	r2, r2, #1
 80048d4:	3a01      	subs	r2, #1
 80048d6:	0552      	lsls	r2, r2, #21
 80048d8:	4311      	orrs	r1, r2
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80048de:	0852      	lsrs	r2, r2, #1
 80048e0:	3a01      	subs	r2, #1
 80048e2:	0652      	lsls	r2, r2, #25
 80048e4:	4311      	orrs	r1, r2
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80048ea:	06d2      	lsls	r2, r2, #27
 80048ec:	430a      	orrs	r2, r1
 80048ee:	4947      	ldr	r1, [pc, #284]	; (8004a0c <HAL_RCC_OscConfig+0x628>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048f4:	4b45      	ldr	r3, [pc, #276]	; (8004a0c <HAL_RCC_OscConfig+0x628>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a44      	ldr	r2, [pc, #272]	; (8004a0c <HAL_RCC_OscConfig+0x628>)
 80048fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048fe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004900:	4b42      	ldr	r3, [pc, #264]	; (8004a0c <HAL_RCC_OscConfig+0x628>)
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	4a41      	ldr	r2, [pc, #260]	; (8004a0c <HAL_RCC_OscConfig+0x628>)
 8004906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800490a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490c:	f7fd fda4 	bl	8002458 <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004914:	f7fd fda0 	bl	8002458 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e06e      	b.n	8004a04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004926:	4b39      	ldr	r3, [pc, #228]	; (8004a0c <HAL_RCC_OscConfig+0x628>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0f0      	beq.n	8004914 <HAL_RCC_OscConfig+0x530>
 8004932:	e066      	b.n	8004a02 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004934:	4b35      	ldr	r3, [pc, #212]	; (8004a0c <HAL_RCC_OscConfig+0x628>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a34      	ldr	r2, [pc, #208]	; (8004a0c <HAL_RCC_OscConfig+0x628>)
 800493a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800493e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004940:	4b32      	ldr	r3, [pc, #200]	; (8004a0c <HAL_RCC_OscConfig+0x628>)
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	4a31      	ldr	r2, [pc, #196]	; (8004a0c <HAL_RCC_OscConfig+0x628>)
 8004946:	f023 0303 	bic.w	r3, r3, #3
 800494a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800494c:	4b2f      	ldr	r3, [pc, #188]	; (8004a0c <HAL_RCC_OscConfig+0x628>)
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	4a2e      	ldr	r2, [pc, #184]	; (8004a0c <HAL_RCC_OscConfig+0x628>)
 8004952:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800495a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800495c:	f7fd fd7c 	bl	8002458 <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004964:	f7fd fd78 	bl	8002458 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e046      	b.n	8004a04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004976:	4b25      	ldr	r3, [pc, #148]	; (8004a0c <HAL_RCC_OscConfig+0x628>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1f0      	bne.n	8004964 <HAL_RCC_OscConfig+0x580>
 8004982:	e03e      	b.n	8004a02 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	69db      	ldr	r3, [r3, #28]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d101      	bne.n	8004990 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e039      	b.n	8004a04 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004990:	4b1e      	ldr	r3, [pc, #120]	; (8004a0c <HAL_RCC_OscConfig+0x628>)
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f003 0203 	and.w	r2, r3, #3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d12c      	bne.n	80049fe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	3b01      	subs	r3, #1
 80049b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d123      	bne.n	80049fe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d11b      	bne.n	80049fe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d113      	bne.n	80049fe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e0:	085b      	lsrs	r3, r3, #1
 80049e2:	3b01      	subs	r3, #1
 80049e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d109      	bne.n	80049fe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f4:	085b      	lsrs	r3, r3, #1
 80049f6:	3b01      	subs	r3, #1
 80049f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d001      	beq.n	8004a02 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e000      	b.n	8004a04 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3720      	adds	r7, #32
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40021000 	.word	0x40021000
 8004a10:	019f800c 	.word	0x019f800c

08004a14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e11e      	b.n	8004c6a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a2c:	4b91      	ldr	r3, [pc, #580]	; (8004c74 <HAL_RCC_ClockConfig+0x260>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 030f 	and.w	r3, r3, #15
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d910      	bls.n	8004a5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a3a:	4b8e      	ldr	r3, [pc, #568]	; (8004c74 <HAL_RCC_ClockConfig+0x260>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f023 020f 	bic.w	r2, r3, #15
 8004a42:	498c      	ldr	r1, [pc, #560]	; (8004c74 <HAL_RCC_ClockConfig+0x260>)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a4a:	4b8a      	ldr	r3, [pc, #552]	; (8004c74 <HAL_RCC_ClockConfig+0x260>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d001      	beq.n	8004a5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e106      	b.n	8004c6a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d073      	beq.n	8004b50 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	2b03      	cmp	r3, #3
 8004a6e:	d129      	bne.n	8004ac4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a70:	4b81      	ldr	r3, [pc, #516]	; (8004c78 <HAL_RCC_ClockConfig+0x264>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e0f4      	b.n	8004c6a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004a80:	f000 f9d0 	bl	8004e24 <RCC_GetSysClockFreqFromPLLSource>
 8004a84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	4a7c      	ldr	r2, [pc, #496]	; (8004c7c <HAL_RCC_ClockConfig+0x268>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d93f      	bls.n	8004b0e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004a8e:	4b7a      	ldr	r3, [pc, #488]	; (8004c78 <HAL_RCC_ClockConfig+0x264>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d009      	beq.n	8004aae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d033      	beq.n	8004b0e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d12f      	bne.n	8004b0e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004aae:	4b72      	ldr	r3, [pc, #456]	; (8004c78 <HAL_RCC_ClockConfig+0x264>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ab6:	4a70      	ldr	r2, [pc, #448]	; (8004c78 <HAL_RCC_ClockConfig+0x264>)
 8004ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004abc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004abe:	2380      	movs	r3, #128	; 0x80
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	e024      	b.n	8004b0e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d107      	bne.n	8004adc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004acc:	4b6a      	ldr	r3, [pc, #424]	; (8004c78 <HAL_RCC_ClockConfig+0x264>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d109      	bne.n	8004aec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e0c6      	b.n	8004c6a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004adc:	4b66      	ldr	r3, [pc, #408]	; (8004c78 <HAL_RCC_ClockConfig+0x264>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d101      	bne.n	8004aec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e0be      	b.n	8004c6a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004aec:	f000 f8ce 	bl	8004c8c <HAL_RCC_GetSysClockFreq>
 8004af0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	4a61      	ldr	r2, [pc, #388]	; (8004c7c <HAL_RCC_ClockConfig+0x268>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d909      	bls.n	8004b0e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004afa:	4b5f      	ldr	r3, [pc, #380]	; (8004c78 <HAL_RCC_ClockConfig+0x264>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b02:	4a5d      	ldr	r2, [pc, #372]	; (8004c78 <HAL_RCC_ClockConfig+0x264>)
 8004b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b08:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004b0a:	2380      	movs	r3, #128	; 0x80
 8004b0c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b0e:	4b5a      	ldr	r3, [pc, #360]	; (8004c78 <HAL_RCC_ClockConfig+0x264>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f023 0203 	bic.w	r2, r3, #3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	4957      	ldr	r1, [pc, #348]	; (8004c78 <HAL_RCC_ClockConfig+0x264>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b20:	f7fd fc9a 	bl	8002458 <HAL_GetTick>
 8004b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b26:	e00a      	b.n	8004b3e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b28:	f7fd fc96 	bl	8002458 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e095      	b.n	8004c6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b3e:	4b4e      	ldr	r3, [pc, #312]	; (8004c78 <HAL_RCC_ClockConfig+0x264>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f003 020c 	and.w	r2, r3, #12
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d1eb      	bne.n	8004b28 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d023      	beq.n	8004ba4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d005      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b68:	4b43      	ldr	r3, [pc, #268]	; (8004c78 <HAL_RCC_ClockConfig+0x264>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	4a42      	ldr	r2, [pc, #264]	; (8004c78 <HAL_RCC_ClockConfig+0x264>)
 8004b6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004b72:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0308 	and.w	r3, r3, #8
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d007      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004b80:	4b3d      	ldr	r3, [pc, #244]	; (8004c78 <HAL_RCC_ClockConfig+0x264>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004b88:	4a3b      	ldr	r2, [pc, #236]	; (8004c78 <HAL_RCC_ClockConfig+0x264>)
 8004b8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004b8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b90:	4b39      	ldr	r3, [pc, #228]	; (8004c78 <HAL_RCC_ClockConfig+0x264>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	4936      	ldr	r1, [pc, #216]	; (8004c78 <HAL_RCC_ClockConfig+0x264>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	608b      	str	r3, [r1, #8]
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	2b80      	cmp	r3, #128	; 0x80
 8004ba8:	d105      	bne.n	8004bb6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004baa:	4b33      	ldr	r3, [pc, #204]	; (8004c78 <HAL_RCC_ClockConfig+0x264>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	4a32      	ldr	r2, [pc, #200]	; (8004c78 <HAL_RCC_ClockConfig+0x264>)
 8004bb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bb4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bb6:	4b2f      	ldr	r3, [pc, #188]	; (8004c74 <HAL_RCC_ClockConfig+0x260>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 030f 	and.w	r3, r3, #15
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d21d      	bcs.n	8004c00 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bc4:	4b2b      	ldr	r3, [pc, #172]	; (8004c74 <HAL_RCC_ClockConfig+0x260>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f023 020f 	bic.w	r2, r3, #15
 8004bcc:	4929      	ldr	r1, [pc, #164]	; (8004c74 <HAL_RCC_ClockConfig+0x260>)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004bd4:	f7fd fc40 	bl	8002458 <HAL_GetTick>
 8004bd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bda:	e00a      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bdc:	f7fd fc3c 	bl	8002458 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e03b      	b.n	8004c6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bf2:	4b20      	ldr	r3, [pc, #128]	; (8004c74 <HAL_RCC_ClockConfig+0x260>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 030f 	and.w	r3, r3, #15
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d1ed      	bne.n	8004bdc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d008      	beq.n	8004c1e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c0c:	4b1a      	ldr	r3, [pc, #104]	; (8004c78 <HAL_RCC_ClockConfig+0x264>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	4917      	ldr	r1, [pc, #92]	; (8004c78 <HAL_RCC_ClockConfig+0x264>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0308 	and.w	r3, r3, #8
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d009      	beq.n	8004c3e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c2a:	4b13      	ldr	r3, [pc, #76]	; (8004c78 <HAL_RCC_ClockConfig+0x264>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	00db      	lsls	r3, r3, #3
 8004c38:	490f      	ldr	r1, [pc, #60]	; (8004c78 <HAL_RCC_ClockConfig+0x264>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c3e:	f000 f825 	bl	8004c8c <HAL_RCC_GetSysClockFreq>
 8004c42:	4602      	mov	r2, r0
 8004c44:	4b0c      	ldr	r3, [pc, #48]	; (8004c78 <HAL_RCC_ClockConfig+0x264>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	091b      	lsrs	r3, r3, #4
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	490c      	ldr	r1, [pc, #48]	; (8004c80 <HAL_RCC_ClockConfig+0x26c>)
 8004c50:	5ccb      	ldrb	r3, [r1, r3]
 8004c52:	f003 031f 	and.w	r3, r3, #31
 8004c56:	fa22 f303 	lsr.w	r3, r2, r3
 8004c5a:	4a0a      	ldr	r2, [pc, #40]	; (8004c84 <HAL_RCC_ClockConfig+0x270>)
 8004c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004c5e:	4b0a      	ldr	r3, [pc, #40]	; (8004c88 <HAL_RCC_ClockConfig+0x274>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fc fcb4 	bl	80015d0 <HAL_InitTick>
 8004c68:	4603      	mov	r3, r0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3718      	adds	r7, #24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	40022000 	.word	0x40022000
 8004c78:	40021000 	.word	0x40021000
 8004c7c:	04c4b400 	.word	0x04c4b400
 8004c80:	0800befc 	.word	0x0800befc
 8004c84:	20000000 	.word	0x20000000
 8004c88:	200000c0 	.word	0x200000c0

08004c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b087      	sub	sp, #28
 8004c90:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004c92:	4b2c      	ldr	r3, [pc, #176]	; (8004d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 030c 	and.w	r3, r3, #12
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	d102      	bne.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c9e:	4b2a      	ldr	r3, [pc, #168]	; (8004d48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ca0:	613b      	str	r3, [r7, #16]
 8004ca2:	e047      	b.n	8004d34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004ca4:	4b27      	ldr	r3, [pc, #156]	; (8004d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f003 030c 	and.w	r3, r3, #12
 8004cac:	2b08      	cmp	r3, #8
 8004cae:	d102      	bne.n	8004cb6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004cb0:	4b26      	ldr	r3, [pc, #152]	; (8004d4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004cb2:	613b      	str	r3, [r7, #16]
 8004cb4:	e03e      	b.n	8004d34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004cb6:	4b23      	ldr	r3, [pc, #140]	; (8004d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 030c 	and.w	r3, r3, #12
 8004cbe:	2b0c      	cmp	r3, #12
 8004cc0:	d136      	bne.n	8004d30 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cc2:	4b20      	ldr	r3, [pc, #128]	; (8004d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	f003 0303 	and.w	r3, r3, #3
 8004cca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ccc:	4b1d      	ldr	r3, [pc, #116]	; (8004d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	091b      	lsrs	r3, r3, #4
 8004cd2:	f003 030f 	and.w	r3, r3, #15
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2b03      	cmp	r3, #3
 8004cde:	d10c      	bne.n	8004cfa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ce0:	4a1a      	ldr	r2, [pc, #104]	; (8004d4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce8:	4a16      	ldr	r2, [pc, #88]	; (8004d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cea:	68d2      	ldr	r2, [r2, #12]
 8004cec:	0a12      	lsrs	r2, r2, #8
 8004cee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004cf2:	fb02 f303 	mul.w	r3, r2, r3
 8004cf6:	617b      	str	r3, [r7, #20]
      break;
 8004cf8:	e00c      	b.n	8004d14 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004cfa:	4a13      	ldr	r2, [pc, #76]	; (8004d48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d02:	4a10      	ldr	r2, [pc, #64]	; (8004d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d04:	68d2      	ldr	r2, [r2, #12]
 8004d06:	0a12      	lsrs	r2, r2, #8
 8004d08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d0c:	fb02 f303 	mul.w	r3, r2, r3
 8004d10:	617b      	str	r3, [r7, #20]
      break;
 8004d12:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d14:	4b0b      	ldr	r3, [pc, #44]	; (8004d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	0e5b      	lsrs	r3, r3, #25
 8004d1a:	f003 0303 	and.w	r3, r3, #3
 8004d1e:	3301      	adds	r3, #1
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2c:	613b      	str	r3, [r7, #16]
 8004d2e:	e001      	b.n	8004d34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004d34:	693b      	ldr	r3, [r7, #16]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	371c      	adds	r7, #28
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	40021000 	.word	0x40021000
 8004d48:	00f42400 	.word	0x00f42400
 8004d4c:	016e3600 	.word	0x016e3600

08004d50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d50:	b480      	push	{r7}
 8004d52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d54:	4b03      	ldr	r3, [pc, #12]	; (8004d64 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d56:	681b      	ldr	r3, [r3, #0]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	20000000 	.word	0x20000000

08004d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d6c:	f7ff fff0 	bl	8004d50 <HAL_RCC_GetHCLKFreq>
 8004d70:	4602      	mov	r2, r0
 8004d72:	4b06      	ldr	r3, [pc, #24]	; (8004d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	0a1b      	lsrs	r3, r3, #8
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	4904      	ldr	r1, [pc, #16]	; (8004d90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d7e:	5ccb      	ldrb	r3, [r1, r3]
 8004d80:	f003 031f 	and.w	r3, r3, #31
 8004d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	0800bf0c 	.word	0x0800bf0c

08004d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d98:	f7ff ffda 	bl	8004d50 <HAL_RCC_GetHCLKFreq>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	0adb      	lsrs	r3, r3, #11
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	4904      	ldr	r1, [pc, #16]	; (8004dbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8004daa:	5ccb      	ldrb	r3, [r1, r3]
 8004dac:	f003 031f 	and.w	r3, r3, #31
 8004db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	0800bf0c 	.word	0x0800bf0c

08004dc0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	220f      	movs	r2, #15
 8004dce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004dd0:	4b12      	ldr	r3, [pc, #72]	; (8004e1c <HAL_RCC_GetClockConfig+0x5c>)
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f003 0203 	and.w	r2, r3, #3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004ddc:	4b0f      	ldr	r3, [pc, #60]	; (8004e1c <HAL_RCC_GetClockConfig+0x5c>)
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004de8:	4b0c      	ldr	r3, [pc, #48]	; (8004e1c <HAL_RCC_GetClockConfig+0x5c>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004df4:	4b09      	ldr	r3, [pc, #36]	; (8004e1c <HAL_RCC_GetClockConfig+0x5c>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	08db      	lsrs	r3, r3, #3
 8004dfa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004e02:	4b07      	ldr	r3, [pc, #28]	; (8004e20 <HAL_RCC_GetClockConfig+0x60>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 020f 	and.w	r2, r3, #15
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	601a      	str	r2, [r3, #0]
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	40021000 	.word	0x40021000
 8004e20:	40022000 	.word	0x40022000

08004e24 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e2a:	4b1e      	ldr	r3, [pc, #120]	; (8004ea4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f003 0303 	and.w	r3, r3, #3
 8004e32:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e34:	4b1b      	ldr	r3, [pc, #108]	; (8004ea4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	091b      	lsrs	r3, r3, #4
 8004e3a:	f003 030f 	and.w	r3, r3, #15
 8004e3e:	3301      	adds	r3, #1
 8004e40:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	2b03      	cmp	r3, #3
 8004e46:	d10c      	bne.n	8004e62 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e48:	4a17      	ldr	r2, [pc, #92]	; (8004ea8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e50:	4a14      	ldr	r2, [pc, #80]	; (8004ea4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e52:	68d2      	ldr	r2, [r2, #12]
 8004e54:	0a12      	lsrs	r2, r2, #8
 8004e56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e5a:	fb02 f303 	mul.w	r3, r2, r3
 8004e5e:	617b      	str	r3, [r7, #20]
    break;
 8004e60:	e00c      	b.n	8004e7c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e62:	4a12      	ldr	r2, [pc, #72]	; (8004eac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6a:	4a0e      	ldr	r2, [pc, #56]	; (8004ea4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e6c:	68d2      	ldr	r2, [r2, #12]
 8004e6e:	0a12      	lsrs	r2, r2, #8
 8004e70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e74:	fb02 f303 	mul.w	r3, r2, r3
 8004e78:	617b      	str	r3, [r7, #20]
    break;
 8004e7a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e7c:	4b09      	ldr	r3, [pc, #36]	; (8004ea4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	0e5b      	lsrs	r3, r3, #25
 8004e82:	f003 0303 	and.w	r3, r3, #3
 8004e86:	3301      	adds	r3, #1
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e94:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004e96:	687b      	ldr	r3, [r7, #4]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	371c      	adds	r7, #28
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	016e3600 	.word	0x016e3600
 8004eac:	00f42400 	.word	0x00f42400

08004eb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004eb8:	2300      	movs	r3, #0
 8004eba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 8098 	beq.w	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ed2:	4b43      	ldr	r3, [pc, #268]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10d      	bne.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ede:	4b40      	ldr	r3, [pc, #256]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee2:	4a3f      	ldr	r2, [pc, #252]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ee8:	6593      	str	r3, [r2, #88]	; 0x58
 8004eea:	4b3d      	ldr	r3, [pc, #244]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef2:	60bb      	str	r3, [r7, #8]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004efa:	4b3a      	ldr	r3, [pc, #232]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a39      	ldr	r2, [pc, #228]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f06:	f7fd faa7 	bl	8002458 <HAL_GetTick>
 8004f0a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f0c:	e009      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f0e:	f7fd faa3 	bl	8002458 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d902      	bls.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	74fb      	strb	r3, [r7, #19]
        break;
 8004f20:	e005      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f22:	4b30      	ldr	r3, [pc, #192]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d0ef      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004f2e:	7cfb      	ldrb	r3, [r7, #19]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d159      	bne.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f34:	4b2a      	ldr	r3, [pc, #168]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f3e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d01e      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d019      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f50:	4b23      	ldr	r3, [pc, #140]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f5c:	4b20      	ldr	r3, [pc, #128]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f62:	4a1f      	ldr	r2, [pc, #124]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f6c:	4b1c      	ldr	r3, [pc, #112]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f72:	4a1b      	ldr	r2, [pc, #108]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f7c:	4a18      	ldr	r2, [pc, #96]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d016      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f8e:	f7fd fa63 	bl	8002458 <HAL_GetTick>
 8004f92:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f94:	e00b      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f96:	f7fd fa5f 	bl	8002458 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d902      	bls.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	74fb      	strb	r3, [r7, #19]
            break;
 8004fac:	e006      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fae:	4b0c      	ldr	r3, [pc, #48]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0ec      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004fbc:	7cfb      	ldrb	r3, [r7, #19]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10b      	bne.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fc2:	4b07      	ldr	r3, [pc, #28]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd0:	4903      	ldr	r1, [pc, #12]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004fd8:	e008      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fda:	7cfb      	ldrb	r3, [r7, #19]
 8004fdc:	74bb      	strb	r3, [r7, #18]
 8004fde:	e005      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe8:	7cfb      	ldrb	r3, [r7, #19]
 8004fea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fec:	7c7b      	ldrb	r3, [r7, #17]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d105      	bne.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ff2:	4ba7      	ldr	r3, [pc, #668]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff6:	4aa6      	ldr	r2, [pc, #664]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ffc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00a      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800500a:	4ba1      	ldr	r3, [pc, #644]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800500c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005010:	f023 0203 	bic.w	r2, r3, #3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	499d      	ldr	r1, [pc, #628]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800501a:	4313      	orrs	r3, r2
 800501c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00a      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800502c:	4b98      	ldr	r3, [pc, #608]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800502e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005032:	f023 020c 	bic.w	r2, r3, #12
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	4995      	ldr	r1, [pc, #596]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800503c:	4313      	orrs	r3, r2
 800503e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0304 	and.w	r3, r3, #4
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00a      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800504e:	4b90      	ldr	r3, [pc, #576]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005054:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	498c      	ldr	r1, [pc, #560]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800505e:	4313      	orrs	r3, r2
 8005060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0308 	and.w	r3, r3, #8
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00a      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005070:	4b87      	ldr	r3, [pc, #540]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005076:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	4984      	ldr	r1, [pc, #528]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005080:	4313      	orrs	r3, r2
 8005082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0310 	and.w	r3, r3, #16
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00a      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005092:	4b7f      	ldr	r3, [pc, #508]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005098:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	497b      	ldr	r1, [pc, #492]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0320 	and.w	r3, r3, #32
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00a      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050b4:	4b76      	ldr	r3, [pc, #472]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	4973      	ldr	r1, [pc, #460]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050d6:	4b6e      	ldr	r3, [pc, #440]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	69db      	ldr	r3, [r3, #28]
 80050e4:	496a      	ldr	r1, [pc, #424]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00a      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050f8:	4b65      	ldr	r3, [pc, #404]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	4962      	ldr	r1, [pc, #392]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005108:	4313      	orrs	r3, r2
 800510a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800511a:	4b5d      	ldr	r3, [pc, #372]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800511c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005120:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005128:	4959      	ldr	r1, [pc, #356]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800512a:	4313      	orrs	r3, r2
 800512c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00a      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800513c:	4b54      	ldr	r3, [pc, #336]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800513e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005142:	f023 0203 	bic.w	r2, r3, #3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514a:	4951      	ldr	r1, [pc, #324]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800514c:	4313      	orrs	r3, r2
 800514e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00a      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800515e:	4b4c      	ldr	r3, [pc, #304]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005164:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516c:	4948      	ldr	r1, [pc, #288]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800516e:	4313      	orrs	r3, r2
 8005170:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800517c:	2b00      	cmp	r3, #0
 800517e:	d015      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005180:	4b43      	ldr	r3, [pc, #268]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005186:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518e:	4940      	ldr	r1, [pc, #256]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005190:	4313      	orrs	r3, r2
 8005192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800519e:	d105      	bne.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051a0:	4b3b      	ldr	r3, [pc, #236]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	4a3a      	ldr	r2, [pc, #232]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d015      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80051b8:	4b35      	ldr	r3, [pc, #212]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c6:	4932      	ldr	r1, [pc, #200]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051d6:	d105      	bne.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051d8:	4b2d      	ldr	r3, [pc, #180]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	4a2c      	ldr	r2, [pc, #176]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051e2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d015      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80051f0:	4b27      	ldr	r3, [pc, #156]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fe:	4924      	ldr	r1, [pc, #144]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005200:	4313      	orrs	r3, r2
 8005202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800520e:	d105      	bne.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005210:	4b1f      	ldr	r3, [pc, #124]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	4a1e      	ldr	r2, [pc, #120]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005216:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800521a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d015      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005228:	4b19      	ldr	r3, [pc, #100]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800522a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800522e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005236:	4916      	ldr	r1, [pc, #88]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005238:	4313      	orrs	r3, r2
 800523a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005242:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005246:	d105      	bne.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005248:	4b11      	ldr	r3, [pc, #68]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	4a10      	ldr	r2, [pc, #64]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800524e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005252:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d019      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005260:	4b0b      	ldr	r3, [pc, #44]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005266:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	4908      	ldr	r1, [pc, #32]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005270:	4313      	orrs	r3, r2
 8005272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800527e:	d109      	bne.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005280:	4b03      	ldr	r3, [pc, #12]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	4a02      	ldr	r2, [pc, #8]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005286:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800528a:	60d3      	str	r3, [r2, #12]
 800528c:	e002      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800528e:	bf00      	nop
 8005290:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d015      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80052a0:	4b29      	ldr	r3, [pc, #164]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ae:	4926      	ldr	r1, [pc, #152]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052be:	d105      	bne.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80052c0:	4b21      	ldr	r3, [pc, #132]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	4a20      	ldr	r2, [pc, #128]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ca:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d015      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80052d8:	4b1b      	ldr	r3, [pc, #108]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052de:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052e6:	4918      	ldr	r1, [pc, #96]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f6:	d105      	bne.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80052f8:	4b13      	ldr	r3, [pc, #76]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	4a12      	ldr	r2, [pc, #72]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005302:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d015      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005310:	4b0d      	ldr	r3, [pc, #52]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005312:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005316:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800531e:	490a      	ldr	r1, [pc, #40]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005320:	4313      	orrs	r3, r2
 8005322:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800532a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800532e:	d105      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005330:	4b05      	ldr	r3, [pc, #20]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	4a04      	ldr	r2, [pc, #16]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005336:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800533a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800533c:	7cbb      	ldrb	r3, [r7, #18]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3718      	adds	r7, #24
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	40021000 	.word	0x40021000

0800534c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e049      	b.n	80053f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d106      	bne.n	8005378 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f841 	bl	80053fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3304      	adds	r3, #4
 8005388:	4619      	mov	r1, r3
 800538a:	4610      	mov	r0, r2
 800538c:	f000 fd7a 	bl	8005e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b083      	sub	sp, #12
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005402:	bf00      	nop
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
	...

08005410 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b01      	cmp	r3, #1
 8005422:	d001      	beq.n	8005428 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e054      	b.n	80054d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68da      	ldr	r2, [r3, #12]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f042 0201 	orr.w	r2, r2, #1
 800543e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a26      	ldr	r2, [pc, #152]	; (80054e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d022      	beq.n	8005490 <HAL_TIM_Base_Start_IT+0x80>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005452:	d01d      	beq.n	8005490 <HAL_TIM_Base_Start_IT+0x80>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a22      	ldr	r2, [pc, #136]	; (80054e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d018      	beq.n	8005490 <HAL_TIM_Base_Start_IT+0x80>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a21      	ldr	r2, [pc, #132]	; (80054e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d013      	beq.n	8005490 <HAL_TIM_Base_Start_IT+0x80>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a1f      	ldr	r2, [pc, #124]	; (80054ec <HAL_TIM_Base_Start_IT+0xdc>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d00e      	beq.n	8005490 <HAL_TIM_Base_Start_IT+0x80>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a1e      	ldr	r2, [pc, #120]	; (80054f0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d009      	beq.n	8005490 <HAL_TIM_Base_Start_IT+0x80>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a1c      	ldr	r2, [pc, #112]	; (80054f4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d004      	beq.n	8005490 <HAL_TIM_Base_Start_IT+0x80>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a1b      	ldr	r2, [pc, #108]	; (80054f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d115      	bne.n	80054bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689a      	ldr	r2, [r3, #8]
 8005496:	4b19      	ldr	r3, [pc, #100]	; (80054fc <HAL_TIM_Base_Start_IT+0xec>)
 8005498:	4013      	ands	r3, r2
 800549a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2b06      	cmp	r3, #6
 80054a0:	d015      	beq.n	80054ce <HAL_TIM_Base_Start_IT+0xbe>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a8:	d011      	beq.n	80054ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f042 0201 	orr.w	r2, r2, #1
 80054b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ba:	e008      	b.n	80054ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f042 0201 	orr.w	r2, r2, #1
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	e000      	b.n	80054d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3714      	adds	r7, #20
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	40012c00 	.word	0x40012c00
 80054e4:	40000400 	.word	0x40000400
 80054e8:	40000800 	.word	0x40000800
 80054ec:	40000c00 	.word	0x40000c00
 80054f0:	40013400 	.word	0x40013400
 80054f4:	40014000 	.word	0x40014000
 80054f8:	40015000 	.word	0x40015000
 80054fc:	00010007 	.word	0x00010007

08005500 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e049      	b.n	80055a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d106      	bne.n	800552c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7fc fae6 	bl	8001af8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2202      	movs	r2, #2
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	3304      	adds	r3, #4
 800553c:	4619      	mov	r1, r3
 800553e:	4610      	mov	r0, r2
 8005540:	f000 fca0 	bl	8005e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
	...

080055b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d109      	bne.n	80055d4 <HAL_TIM_PWM_Start+0x24>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	bf14      	ite	ne
 80055cc:	2301      	movne	r3, #1
 80055ce:	2300      	moveq	r3, #0
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	e03c      	b.n	800564e <HAL_TIM_PWM_Start+0x9e>
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	d109      	bne.n	80055ee <HAL_TIM_PWM_Start+0x3e>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	bf14      	ite	ne
 80055e6:	2301      	movne	r3, #1
 80055e8:	2300      	moveq	r3, #0
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	e02f      	b.n	800564e <HAL_TIM_PWM_Start+0x9e>
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	d109      	bne.n	8005608 <HAL_TIM_PWM_Start+0x58>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	bf14      	ite	ne
 8005600:	2301      	movne	r3, #1
 8005602:	2300      	moveq	r3, #0
 8005604:	b2db      	uxtb	r3, r3
 8005606:	e022      	b.n	800564e <HAL_TIM_PWM_Start+0x9e>
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	2b0c      	cmp	r3, #12
 800560c:	d109      	bne.n	8005622 <HAL_TIM_PWM_Start+0x72>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b01      	cmp	r3, #1
 8005618:	bf14      	ite	ne
 800561a:	2301      	movne	r3, #1
 800561c:	2300      	moveq	r3, #0
 800561e:	b2db      	uxtb	r3, r3
 8005620:	e015      	b.n	800564e <HAL_TIM_PWM_Start+0x9e>
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b10      	cmp	r3, #16
 8005626:	d109      	bne.n	800563c <HAL_TIM_PWM_Start+0x8c>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b01      	cmp	r3, #1
 8005632:	bf14      	ite	ne
 8005634:	2301      	movne	r3, #1
 8005636:	2300      	moveq	r3, #0
 8005638:	b2db      	uxtb	r3, r3
 800563a:	e008      	b.n	800564e <HAL_TIM_PWM_Start+0x9e>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b01      	cmp	r3, #1
 8005646:	bf14      	ite	ne
 8005648:	2301      	movne	r3, #1
 800564a:	2300      	moveq	r3, #0
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e0a6      	b.n	80057a4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d104      	bne.n	8005666 <HAL_TIM_PWM_Start+0xb6>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2202      	movs	r2, #2
 8005660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005664:	e023      	b.n	80056ae <HAL_TIM_PWM_Start+0xfe>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	2b04      	cmp	r3, #4
 800566a:	d104      	bne.n	8005676 <HAL_TIM_PWM_Start+0xc6>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005674:	e01b      	b.n	80056ae <HAL_TIM_PWM_Start+0xfe>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b08      	cmp	r3, #8
 800567a:	d104      	bne.n	8005686 <HAL_TIM_PWM_Start+0xd6>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005684:	e013      	b.n	80056ae <HAL_TIM_PWM_Start+0xfe>
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b0c      	cmp	r3, #12
 800568a:	d104      	bne.n	8005696 <HAL_TIM_PWM_Start+0xe6>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2202      	movs	r2, #2
 8005690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005694:	e00b      	b.n	80056ae <HAL_TIM_PWM_Start+0xfe>
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2b10      	cmp	r3, #16
 800569a:	d104      	bne.n	80056a6 <HAL_TIM_PWM_Start+0xf6>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2202      	movs	r2, #2
 80056a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056a4:	e003      	b.n	80056ae <HAL_TIM_PWM_Start+0xfe>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2202      	movs	r2, #2
 80056aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2201      	movs	r2, #1
 80056b4:	6839      	ldr	r1, [r7, #0]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f001 f82a 	bl	8006710 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a3a      	ldr	r2, [pc, #232]	; (80057ac <HAL_TIM_PWM_Start+0x1fc>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d018      	beq.n	80056f8 <HAL_TIM_PWM_Start+0x148>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a39      	ldr	r2, [pc, #228]	; (80057b0 <HAL_TIM_PWM_Start+0x200>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d013      	beq.n	80056f8 <HAL_TIM_PWM_Start+0x148>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a37      	ldr	r2, [pc, #220]	; (80057b4 <HAL_TIM_PWM_Start+0x204>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d00e      	beq.n	80056f8 <HAL_TIM_PWM_Start+0x148>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a36      	ldr	r2, [pc, #216]	; (80057b8 <HAL_TIM_PWM_Start+0x208>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d009      	beq.n	80056f8 <HAL_TIM_PWM_Start+0x148>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a34      	ldr	r2, [pc, #208]	; (80057bc <HAL_TIM_PWM_Start+0x20c>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d004      	beq.n	80056f8 <HAL_TIM_PWM_Start+0x148>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a33      	ldr	r2, [pc, #204]	; (80057c0 <HAL_TIM_PWM_Start+0x210>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d101      	bne.n	80056fc <HAL_TIM_PWM_Start+0x14c>
 80056f8:	2301      	movs	r3, #1
 80056fa:	e000      	b.n	80056fe <HAL_TIM_PWM_Start+0x14e>
 80056fc:	2300      	movs	r3, #0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d007      	beq.n	8005712 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005710:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a25      	ldr	r2, [pc, #148]	; (80057ac <HAL_TIM_PWM_Start+0x1fc>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d022      	beq.n	8005762 <HAL_TIM_PWM_Start+0x1b2>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005724:	d01d      	beq.n	8005762 <HAL_TIM_PWM_Start+0x1b2>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a26      	ldr	r2, [pc, #152]	; (80057c4 <HAL_TIM_PWM_Start+0x214>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d018      	beq.n	8005762 <HAL_TIM_PWM_Start+0x1b2>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a24      	ldr	r2, [pc, #144]	; (80057c8 <HAL_TIM_PWM_Start+0x218>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d013      	beq.n	8005762 <HAL_TIM_PWM_Start+0x1b2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a23      	ldr	r2, [pc, #140]	; (80057cc <HAL_TIM_PWM_Start+0x21c>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d00e      	beq.n	8005762 <HAL_TIM_PWM_Start+0x1b2>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a19      	ldr	r2, [pc, #100]	; (80057b0 <HAL_TIM_PWM_Start+0x200>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d009      	beq.n	8005762 <HAL_TIM_PWM_Start+0x1b2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a18      	ldr	r2, [pc, #96]	; (80057b4 <HAL_TIM_PWM_Start+0x204>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d004      	beq.n	8005762 <HAL_TIM_PWM_Start+0x1b2>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a18      	ldr	r2, [pc, #96]	; (80057c0 <HAL_TIM_PWM_Start+0x210>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d115      	bne.n	800578e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	4b19      	ldr	r3, [pc, #100]	; (80057d0 <HAL_TIM_PWM_Start+0x220>)
 800576a:	4013      	ands	r3, r2
 800576c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2b06      	cmp	r3, #6
 8005772:	d015      	beq.n	80057a0 <HAL_TIM_PWM_Start+0x1f0>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800577a:	d011      	beq.n	80057a0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0201 	orr.w	r2, r2, #1
 800578a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800578c:	e008      	b.n	80057a0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f042 0201 	orr.w	r2, r2, #1
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	e000      	b.n	80057a2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	40012c00 	.word	0x40012c00
 80057b0:	40013400 	.word	0x40013400
 80057b4:	40014000 	.word	0x40014000
 80057b8:	40014400 	.word	0x40014400
 80057bc:	40014800 	.word	0x40014800
 80057c0:	40015000 	.word	0x40015000
 80057c4:	40000400 	.word	0x40000400
 80057c8:	40000800 	.word	0x40000800
 80057cc:	40000c00 	.word	0x40000c00
 80057d0:	00010007 	.word	0x00010007

080057d4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2200      	movs	r2, #0
 80057e4:	6839      	ldr	r1, [r7, #0]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 ff92 	bl	8006710 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a40      	ldr	r2, [pc, #256]	; (80058f4 <HAL_TIM_PWM_Stop+0x120>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d018      	beq.n	8005828 <HAL_TIM_PWM_Stop+0x54>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a3f      	ldr	r2, [pc, #252]	; (80058f8 <HAL_TIM_PWM_Stop+0x124>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d013      	beq.n	8005828 <HAL_TIM_PWM_Stop+0x54>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a3d      	ldr	r2, [pc, #244]	; (80058fc <HAL_TIM_PWM_Stop+0x128>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d00e      	beq.n	8005828 <HAL_TIM_PWM_Stop+0x54>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a3c      	ldr	r2, [pc, #240]	; (8005900 <HAL_TIM_PWM_Stop+0x12c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d009      	beq.n	8005828 <HAL_TIM_PWM_Stop+0x54>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a3a      	ldr	r2, [pc, #232]	; (8005904 <HAL_TIM_PWM_Stop+0x130>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d004      	beq.n	8005828 <HAL_TIM_PWM_Stop+0x54>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a39      	ldr	r2, [pc, #228]	; (8005908 <HAL_TIM_PWM_Stop+0x134>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d101      	bne.n	800582c <HAL_TIM_PWM_Stop+0x58>
 8005828:	2301      	movs	r3, #1
 800582a:	e000      	b.n	800582e <HAL_TIM_PWM_Stop+0x5a>
 800582c:	2300      	movs	r3, #0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d017      	beq.n	8005862 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	6a1a      	ldr	r2, [r3, #32]
 8005838:	f241 1311 	movw	r3, #4369	; 0x1111
 800583c:	4013      	ands	r3, r2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10f      	bne.n	8005862 <HAL_TIM_PWM_Stop+0x8e>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6a1a      	ldr	r2, [r3, #32]
 8005848:	f244 4344 	movw	r3, #17476	; 0x4444
 800584c:	4013      	ands	r3, r2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d107      	bne.n	8005862 <HAL_TIM_PWM_Stop+0x8e>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005860:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6a1a      	ldr	r2, [r3, #32]
 8005868:	f241 1311 	movw	r3, #4369	; 0x1111
 800586c:	4013      	ands	r3, r2
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10f      	bne.n	8005892 <HAL_TIM_PWM_Stop+0xbe>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6a1a      	ldr	r2, [r3, #32]
 8005878:	f244 4344 	movw	r3, #17476	; 0x4444
 800587c:	4013      	ands	r3, r2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d107      	bne.n	8005892 <HAL_TIM_PWM_Stop+0xbe>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 0201 	bic.w	r2, r2, #1
 8005890:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d104      	bne.n	80058a2 <HAL_TIM_PWM_Stop+0xce>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058a0:	e023      	b.n	80058ea <HAL_TIM_PWM_Stop+0x116>
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2b04      	cmp	r3, #4
 80058a6:	d104      	bne.n	80058b2 <HAL_TIM_PWM_Stop+0xde>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058b0:	e01b      	b.n	80058ea <HAL_TIM_PWM_Stop+0x116>
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2b08      	cmp	r3, #8
 80058b6:	d104      	bne.n	80058c2 <HAL_TIM_PWM_Stop+0xee>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058c0:	e013      	b.n	80058ea <HAL_TIM_PWM_Stop+0x116>
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	2b0c      	cmp	r3, #12
 80058c6:	d104      	bne.n	80058d2 <HAL_TIM_PWM_Stop+0xfe>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058d0:	e00b      	b.n	80058ea <HAL_TIM_PWM_Stop+0x116>
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b10      	cmp	r3, #16
 80058d6:	d104      	bne.n	80058e2 <HAL_TIM_PWM_Stop+0x10e>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058e0:	e003      	b.n	80058ea <HAL_TIM_PWM_Stop+0x116>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3708      	adds	r7, #8
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	40012c00 	.word	0x40012c00
 80058f8:	40013400 	.word	0x40013400
 80058fc:	40014000 	.word	0x40014000
 8005900:	40014400 	.word	0x40014400
 8005904:	40014800 	.word	0x40014800
 8005908:	40015000 	.word	0x40015000

0800590c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b02      	cmp	r3, #2
 8005920:	d122      	bne.n	8005968 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	f003 0302 	and.w	r3, r3, #2
 800592c:	2b02      	cmp	r3, #2
 800592e:	d11b      	bne.n	8005968 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f06f 0202 	mvn.w	r2, #2
 8005938:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	f003 0303 	and.w	r3, r3, #3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 fa7a 	bl	8005e48 <HAL_TIM_IC_CaptureCallback>
 8005954:	e005      	b.n	8005962 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 fa6c 	bl	8005e34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 fa7d 	bl	8005e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	f003 0304 	and.w	r3, r3, #4
 8005972:	2b04      	cmp	r3, #4
 8005974:	d122      	bne.n	80059bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	f003 0304 	and.w	r3, r3, #4
 8005980:	2b04      	cmp	r3, #4
 8005982:	d11b      	bne.n	80059bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f06f 0204 	mvn.w	r2, #4
 800598c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2202      	movs	r2, #2
 8005992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 fa50 	bl	8005e48 <HAL_TIM_IC_CaptureCallback>
 80059a8:	e005      	b.n	80059b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fa42 	bl	8005e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 fa53 	bl	8005e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	f003 0308 	and.w	r3, r3, #8
 80059c6:	2b08      	cmp	r3, #8
 80059c8:	d122      	bne.n	8005a10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	f003 0308 	and.w	r3, r3, #8
 80059d4:	2b08      	cmp	r3, #8
 80059d6:	d11b      	bne.n	8005a10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f06f 0208 	mvn.w	r2, #8
 80059e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2204      	movs	r2, #4
 80059e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	f003 0303 	and.w	r3, r3, #3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 fa26 	bl	8005e48 <HAL_TIM_IC_CaptureCallback>
 80059fc:	e005      	b.n	8005a0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fa18 	bl	8005e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 fa29 	bl	8005e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	f003 0310 	and.w	r3, r3, #16
 8005a1a:	2b10      	cmp	r3, #16
 8005a1c:	d122      	bne.n	8005a64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	f003 0310 	and.w	r3, r3, #16
 8005a28:	2b10      	cmp	r3, #16
 8005a2a:	d11b      	bne.n	8005a64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f06f 0210 	mvn.w	r2, #16
 8005a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2208      	movs	r2, #8
 8005a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f9fc 	bl	8005e48 <HAL_TIM_IC_CaptureCallback>
 8005a50:	e005      	b.n	8005a5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f9ee 	bl	8005e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 f9ff 	bl	8005e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d10e      	bne.n	8005a90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d107      	bne.n	8005a90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f06f 0201 	mvn.w	r2, #1
 8005a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7fb fd64 	bl	8001558 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a9a:	2b80      	cmp	r3, #128	; 0x80
 8005a9c:	d10e      	bne.n	8005abc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aa8:	2b80      	cmp	r3, #128	; 0x80
 8005aaa:	d107      	bne.n	8005abc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f001 f970 	bl	8006d9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aca:	d10e      	bne.n	8005aea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad6:	2b80      	cmp	r3, #128	; 0x80
 8005ad8:	d107      	bne.n	8005aea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f001 f963 	bl	8006db0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af4:	2b40      	cmp	r3, #64	; 0x40
 8005af6:	d10e      	bne.n	8005b16 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b02:	2b40      	cmp	r3, #64	; 0x40
 8005b04:	d107      	bne.n	8005b16 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 f9ad 	bl	8005e70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	f003 0320 	and.w	r3, r3, #32
 8005b20:	2b20      	cmp	r3, #32
 8005b22:	d10e      	bne.n	8005b42 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	f003 0320 	and.w	r3, r3, #32
 8005b2e:	2b20      	cmp	r3, #32
 8005b30:	d107      	bne.n	8005b42 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f06f 0220 	mvn.w	r2, #32
 8005b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f001 f923 	bl	8006d88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b50:	d10f      	bne.n	8005b72 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b60:	d107      	bne.n	8005b72 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f001 f929 	bl	8006dc4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b80:	d10f      	bne.n	8005ba2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b90:	d107      	bne.n	8005ba2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f001 f91b 	bl	8006dd8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bb0:	d10f      	bne.n	8005bd2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bc0:	d107      	bne.n	8005bd2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f001 f90d 	bl	8006dec <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bdc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005be0:	d10f      	bne.n	8005c02 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005bf0:	d107      	bne.n	8005c02 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f001 f8ff 	bl	8006e00 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c02:	bf00      	nop
 8005c04:	3708      	adds	r7, #8
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
	...

08005c0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d101      	bne.n	8005c2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c26:	2302      	movs	r3, #2
 8005c28:	e0ff      	b.n	8005e2a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b14      	cmp	r3, #20
 8005c36:	f200 80f0 	bhi.w	8005e1a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005c3a:	a201      	add	r2, pc, #4	; (adr r2, 8005c40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c40:	08005c95 	.word	0x08005c95
 8005c44:	08005e1b 	.word	0x08005e1b
 8005c48:	08005e1b 	.word	0x08005e1b
 8005c4c:	08005e1b 	.word	0x08005e1b
 8005c50:	08005cd5 	.word	0x08005cd5
 8005c54:	08005e1b 	.word	0x08005e1b
 8005c58:	08005e1b 	.word	0x08005e1b
 8005c5c:	08005e1b 	.word	0x08005e1b
 8005c60:	08005d17 	.word	0x08005d17
 8005c64:	08005e1b 	.word	0x08005e1b
 8005c68:	08005e1b 	.word	0x08005e1b
 8005c6c:	08005e1b 	.word	0x08005e1b
 8005c70:	08005d57 	.word	0x08005d57
 8005c74:	08005e1b 	.word	0x08005e1b
 8005c78:	08005e1b 	.word	0x08005e1b
 8005c7c:	08005e1b 	.word	0x08005e1b
 8005c80:	08005d99 	.word	0x08005d99
 8005c84:	08005e1b 	.word	0x08005e1b
 8005c88:	08005e1b 	.word	0x08005e1b
 8005c8c:	08005e1b 	.word	0x08005e1b
 8005c90:	08005dd9 	.word	0x08005dd9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68b9      	ldr	r1, [r7, #8]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 f99a 	bl	8005fd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	699a      	ldr	r2, [r3, #24]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f042 0208 	orr.w	r2, r2, #8
 8005cae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	699a      	ldr	r2, [r3, #24]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 0204 	bic.w	r2, r2, #4
 8005cbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6999      	ldr	r1, [r3, #24]
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	691a      	ldr	r2, [r3, #16]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	619a      	str	r2, [r3, #24]
      break;
 8005cd2:	e0a5      	b.n	8005e20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68b9      	ldr	r1, [r7, #8]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 fa14 	bl	8006108 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	699a      	ldr	r2, [r3, #24]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	699a      	ldr	r2, [r3, #24]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6999      	ldr	r1, [r3, #24]
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	021a      	lsls	r2, r3, #8
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	430a      	orrs	r2, r1
 8005d12:	619a      	str	r2, [r3, #24]
      break;
 8005d14:	e084      	b.n	8005e20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68b9      	ldr	r1, [r7, #8]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 fa87 	bl	8006230 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	69da      	ldr	r2, [r3, #28]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f042 0208 	orr.w	r2, r2, #8
 8005d30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	69da      	ldr	r2, [r3, #28]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 0204 	bic.w	r2, r2, #4
 8005d40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	69d9      	ldr	r1, [r3, #28]
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	691a      	ldr	r2, [r3, #16]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	430a      	orrs	r2, r1
 8005d52:	61da      	str	r2, [r3, #28]
      break;
 8005d54:	e064      	b.n	8005e20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68b9      	ldr	r1, [r7, #8]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f000 faf9 	bl	8006354 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	69da      	ldr	r2, [r3, #28]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	69da      	ldr	r2, [r3, #28]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	69d9      	ldr	r1, [r3, #28]
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	021a      	lsls	r2, r3, #8
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	61da      	str	r2, [r3, #28]
      break;
 8005d96:	e043      	b.n	8005e20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68b9      	ldr	r1, [r7, #8]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 fb6c 	bl	800647c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0208 	orr.w	r2, r2, #8
 8005db2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0204 	bic.w	r2, r2, #4
 8005dc2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	691a      	ldr	r2, [r3, #16]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005dd6:	e023      	b.n	8005e20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68b9      	ldr	r1, [r7, #8]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 fbb6 	bl	8006550 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005df2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e02:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	021a      	lsls	r2, r3, #8
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	430a      	orrs	r2, r1
 8005e16:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005e18:	e002      	b.n	8005e20 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	75fb      	strb	r3, [r7, #23]
      break;
 8005e1e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop

08005e34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a46      	ldr	r2, [pc, #280]	; (8005fb0 <TIM_Base_SetConfig+0x12c>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d017      	beq.n	8005ecc <TIM_Base_SetConfig+0x48>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ea2:	d013      	beq.n	8005ecc <TIM_Base_SetConfig+0x48>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a43      	ldr	r2, [pc, #268]	; (8005fb4 <TIM_Base_SetConfig+0x130>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d00f      	beq.n	8005ecc <TIM_Base_SetConfig+0x48>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a42      	ldr	r2, [pc, #264]	; (8005fb8 <TIM_Base_SetConfig+0x134>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d00b      	beq.n	8005ecc <TIM_Base_SetConfig+0x48>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a41      	ldr	r2, [pc, #260]	; (8005fbc <TIM_Base_SetConfig+0x138>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d007      	beq.n	8005ecc <TIM_Base_SetConfig+0x48>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a40      	ldr	r2, [pc, #256]	; (8005fc0 <TIM_Base_SetConfig+0x13c>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d003      	beq.n	8005ecc <TIM_Base_SetConfig+0x48>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a3f      	ldr	r2, [pc, #252]	; (8005fc4 <TIM_Base_SetConfig+0x140>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d108      	bne.n	8005ede <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a33      	ldr	r2, [pc, #204]	; (8005fb0 <TIM_Base_SetConfig+0x12c>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d023      	beq.n	8005f2e <TIM_Base_SetConfig+0xaa>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eec:	d01f      	beq.n	8005f2e <TIM_Base_SetConfig+0xaa>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a30      	ldr	r2, [pc, #192]	; (8005fb4 <TIM_Base_SetConfig+0x130>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d01b      	beq.n	8005f2e <TIM_Base_SetConfig+0xaa>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a2f      	ldr	r2, [pc, #188]	; (8005fb8 <TIM_Base_SetConfig+0x134>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d017      	beq.n	8005f2e <TIM_Base_SetConfig+0xaa>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a2e      	ldr	r2, [pc, #184]	; (8005fbc <TIM_Base_SetConfig+0x138>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d013      	beq.n	8005f2e <TIM_Base_SetConfig+0xaa>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a2d      	ldr	r2, [pc, #180]	; (8005fc0 <TIM_Base_SetConfig+0x13c>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d00f      	beq.n	8005f2e <TIM_Base_SetConfig+0xaa>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a2d      	ldr	r2, [pc, #180]	; (8005fc8 <TIM_Base_SetConfig+0x144>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d00b      	beq.n	8005f2e <TIM_Base_SetConfig+0xaa>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a2c      	ldr	r2, [pc, #176]	; (8005fcc <TIM_Base_SetConfig+0x148>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d007      	beq.n	8005f2e <TIM_Base_SetConfig+0xaa>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a2b      	ldr	r2, [pc, #172]	; (8005fd0 <TIM_Base_SetConfig+0x14c>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d003      	beq.n	8005f2e <TIM_Base_SetConfig+0xaa>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a26      	ldr	r2, [pc, #152]	; (8005fc4 <TIM_Base_SetConfig+0x140>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d108      	bne.n	8005f40 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a12      	ldr	r2, [pc, #72]	; (8005fb0 <TIM_Base_SetConfig+0x12c>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d013      	beq.n	8005f94 <TIM_Base_SetConfig+0x110>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a14      	ldr	r2, [pc, #80]	; (8005fc0 <TIM_Base_SetConfig+0x13c>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d00f      	beq.n	8005f94 <TIM_Base_SetConfig+0x110>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a14      	ldr	r2, [pc, #80]	; (8005fc8 <TIM_Base_SetConfig+0x144>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d00b      	beq.n	8005f94 <TIM_Base_SetConfig+0x110>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a13      	ldr	r2, [pc, #76]	; (8005fcc <TIM_Base_SetConfig+0x148>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d007      	beq.n	8005f94 <TIM_Base_SetConfig+0x110>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a12      	ldr	r2, [pc, #72]	; (8005fd0 <TIM_Base_SetConfig+0x14c>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d003      	beq.n	8005f94 <TIM_Base_SetConfig+0x110>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a0d      	ldr	r2, [pc, #52]	; (8005fc4 <TIM_Base_SetConfig+0x140>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d103      	bne.n	8005f9c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	691a      	ldr	r2, [r3, #16]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	615a      	str	r2, [r3, #20]
}
 8005fa2:	bf00      	nop
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	40012c00 	.word	0x40012c00
 8005fb4:	40000400 	.word	0x40000400
 8005fb8:	40000800 	.word	0x40000800
 8005fbc:	40000c00 	.word	0x40000c00
 8005fc0:	40013400 	.word	0x40013400
 8005fc4:	40015000 	.word	0x40015000
 8005fc8:	40014000 	.word	0x40014000
 8005fcc:	40014400 	.word	0x40014400
 8005fd0:	40014800 	.word	0x40014800

08005fd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b087      	sub	sp, #28
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	f023 0201 	bic.w	r2, r3, #1
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f023 0303 	bic.w	r3, r3, #3
 800600e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	4313      	orrs	r3, r2
 8006018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	f023 0302 	bic.w	r3, r3, #2
 8006020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	4313      	orrs	r3, r2
 800602a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a30      	ldr	r2, [pc, #192]	; (80060f0 <TIM_OC1_SetConfig+0x11c>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d013      	beq.n	800605c <TIM_OC1_SetConfig+0x88>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a2f      	ldr	r2, [pc, #188]	; (80060f4 <TIM_OC1_SetConfig+0x120>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d00f      	beq.n	800605c <TIM_OC1_SetConfig+0x88>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a2e      	ldr	r2, [pc, #184]	; (80060f8 <TIM_OC1_SetConfig+0x124>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d00b      	beq.n	800605c <TIM_OC1_SetConfig+0x88>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a2d      	ldr	r2, [pc, #180]	; (80060fc <TIM_OC1_SetConfig+0x128>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d007      	beq.n	800605c <TIM_OC1_SetConfig+0x88>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a2c      	ldr	r2, [pc, #176]	; (8006100 <TIM_OC1_SetConfig+0x12c>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d003      	beq.n	800605c <TIM_OC1_SetConfig+0x88>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a2b      	ldr	r2, [pc, #172]	; (8006104 <TIM_OC1_SetConfig+0x130>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d10c      	bne.n	8006076 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f023 0308 	bic.w	r3, r3, #8
 8006062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	4313      	orrs	r3, r2
 800606c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f023 0304 	bic.w	r3, r3, #4
 8006074:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a1d      	ldr	r2, [pc, #116]	; (80060f0 <TIM_OC1_SetConfig+0x11c>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d013      	beq.n	80060a6 <TIM_OC1_SetConfig+0xd2>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a1c      	ldr	r2, [pc, #112]	; (80060f4 <TIM_OC1_SetConfig+0x120>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d00f      	beq.n	80060a6 <TIM_OC1_SetConfig+0xd2>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a1b      	ldr	r2, [pc, #108]	; (80060f8 <TIM_OC1_SetConfig+0x124>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d00b      	beq.n	80060a6 <TIM_OC1_SetConfig+0xd2>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a1a      	ldr	r2, [pc, #104]	; (80060fc <TIM_OC1_SetConfig+0x128>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d007      	beq.n	80060a6 <TIM_OC1_SetConfig+0xd2>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a19      	ldr	r2, [pc, #100]	; (8006100 <TIM_OC1_SetConfig+0x12c>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d003      	beq.n	80060a6 <TIM_OC1_SetConfig+0xd2>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a18      	ldr	r2, [pc, #96]	; (8006104 <TIM_OC1_SetConfig+0x130>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d111      	bne.n	80060ca <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	4313      	orrs	r3, r2
 80060be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	693a      	ldr	r2, [r7, #16]
 80060ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	685a      	ldr	r2, [r3, #4]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	621a      	str	r2, [r3, #32]
}
 80060e4:	bf00      	nop
 80060e6:	371c      	adds	r7, #28
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr
 80060f0:	40012c00 	.word	0x40012c00
 80060f4:	40013400 	.word	0x40013400
 80060f8:	40014000 	.word	0x40014000
 80060fc:	40014400 	.word	0x40014400
 8006100:	40014800 	.word	0x40014800
 8006104:	40015000 	.word	0x40015000

08006108 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006108:	b480      	push	{r7}
 800610a:	b087      	sub	sp, #28
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	f023 0210 	bic.w	r2, r3, #16
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800613a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	021b      	lsls	r3, r3, #8
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	4313      	orrs	r3, r2
 800614e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	f023 0320 	bic.w	r3, r3, #32
 8006156:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	011b      	lsls	r3, r3, #4
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	4313      	orrs	r3, r2
 8006162:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a2c      	ldr	r2, [pc, #176]	; (8006218 <TIM_OC2_SetConfig+0x110>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d007      	beq.n	800617c <TIM_OC2_SetConfig+0x74>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a2b      	ldr	r2, [pc, #172]	; (800621c <TIM_OC2_SetConfig+0x114>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d003      	beq.n	800617c <TIM_OC2_SetConfig+0x74>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a2a      	ldr	r2, [pc, #168]	; (8006220 <TIM_OC2_SetConfig+0x118>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d10d      	bne.n	8006198 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006182:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	011b      	lsls	r3, r3, #4
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	4313      	orrs	r3, r2
 800618e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006196:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a1f      	ldr	r2, [pc, #124]	; (8006218 <TIM_OC2_SetConfig+0x110>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d013      	beq.n	80061c8 <TIM_OC2_SetConfig+0xc0>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a1e      	ldr	r2, [pc, #120]	; (800621c <TIM_OC2_SetConfig+0x114>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d00f      	beq.n	80061c8 <TIM_OC2_SetConfig+0xc0>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a1e      	ldr	r2, [pc, #120]	; (8006224 <TIM_OC2_SetConfig+0x11c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d00b      	beq.n	80061c8 <TIM_OC2_SetConfig+0xc0>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a1d      	ldr	r2, [pc, #116]	; (8006228 <TIM_OC2_SetConfig+0x120>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d007      	beq.n	80061c8 <TIM_OC2_SetConfig+0xc0>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a1c      	ldr	r2, [pc, #112]	; (800622c <TIM_OC2_SetConfig+0x124>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d003      	beq.n	80061c8 <TIM_OC2_SetConfig+0xc0>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a17      	ldr	r2, [pc, #92]	; (8006220 <TIM_OC2_SetConfig+0x118>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d113      	bne.n	80061f0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	695b      	ldr	r3, [r3, #20]
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	621a      	str	r2, [r3, #32]
}
 800620a:	bf00      	nop
 800620c:	371c      	adds	r7, #28
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	40012c00 	.word	0x40012c00
 800621c:	40013400 	.word	0x40013400
 8006220:	40015000 	.word	0x40015000
 8006224:	40014000 	.word	0x40014000
 8006228:	40014400 	.word	0x40014400
 800622c:	40014800 	.word	0x40014800

08006230 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006230:	b480      	push	{r7}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800625e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f023 0303 	bic.w	r3, r3, #3
 800626a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	4313      	orrs	r3, r2
 8006274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800627c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	021b      	lsls	r3, r3, #8
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	4313      	orrs	r3, r2
 8006288:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a2b      	ldr	r2, [pc, #172]	; (800633c <TIM_OC3_SetConfig+0x10c>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d007      	beq.n	80062a2 <TIM_OC3_SetConfig+0x72>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a2a      	ldr	r2, [pc, #168]	; (8006340 <TIM_OC3_SetConfig+0x110>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d003      	beq.n	80062a2 <TIM_OC3_SetConfig+0x72>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a29      	ldr	r2, [pc, #164]	; (8006344 <TIM_OC3_SetConfig+0x114>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d10d      	bne.n	80062be <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	021b      	lsls	r3, r3, #8
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a1e      	ldr	r2, [pc, #120]	; (800633c <TIM_OC3_SetConfig+0x10c>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d013      	beq.n	80062ee <TIM_OC3_SetConfig+0xbe>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a1d      	ldr	r2, [pc, #116]	; (8006340 <TIM_OC3_SetConfig+0x110>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d00f      	beq.n	80062ee <TIM_OC3_SetConfig+0xbe>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a1d      	ldr	r2, [pc, #116]	; (8006348 <TIM_OC3_SetConfig+0x118>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d00b      	beq.n	80062ee <TIM_OC3_SetConfig+0xbe>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a1c      	ldr	r2, [pc, #112]	; (800634c <TIM_OC3_SetConfig+0x11c>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d007      	beq.n	80062ee <TIM_OC3_SetConfig+0xbe>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a1b      	ldr	r2, [pc, #108]	; (8006350 <TIM_OC3_SetConfig+0x120>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d003      	beq.n	80062ee <TIM_OC3_SetConfig+0xbe>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a16      	ldr	r2, [pc, #88]	; (8006344 <TIM_OC3_SetConfig+0x114>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d113      	bne.n	8006316 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	011b      	lsls	r3, r3, #4
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	4313      	orrs	r3, r2
 8006308:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	011b      	lsls	r3, r3, #4
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	4313      	orrs	r3, r2
 8006314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	621a      	str	r2, [r3, #32]
}
 8006330:	bf00      	nop
 8006332:	371c      	adds	r7, #28
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	40012c00 	.word	0x40012c00
 8006340:	40013400 	.word	0x40013400
 8006344:	40015000 	.word	0x40015000
 8006348:	40014000 	.word	0x40014000
 800634c:	40014400 	.word	0x40014400
 8006350:	40014800 	.word	0x40014800

08006354 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006354:	b480      	push	{r7}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800638e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	021b      	lsls	r3, r3, #8
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	4313      	orrs	r3, r2
 800639a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	031b      	lsls	r3, r3, #12
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a2c      	ldr	r2, [pc, #176]	; (8006464 <TIM_OC4_SetConfig+0x110>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d007      	beq.n	80063c8 <TIM_OC4_SetConfig+0x74>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a2b      	ldr	r2, [pc, #172]	; (8006468 <TIM_OC4_SetConfig+0x114>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d003      	beq.n	80063c8 <TIM_OC4_SetConfig+0x74>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a2a      	ldr	r2, [pc, #168]	; (800646c <TIM_OC4_SetConfig+0x118>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d10d      	bne.n	80063e4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	031b      	lsls	r3, r3, #12
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	4313      	orrs	r3, r2
 80063da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a1f      	ldr	r2, [pc, #124]	; (8006464 <TIM_OC4_SetConfig+0x110>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d013      	beq.n	8006414 <TIM_OC4_SetConfig+0xc0>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a1e      	ldr	r2, [pc, #120]	; (8006468 <TIM_OC4_SetConfig+0x114>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d00f      	beq.n	8006414 <TIM_OC4_SetConfig+0xc0>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a1e      	ldr	r2, [pc, #120]	; (8006470 <TIM_OC4_SetConfig+0x11c>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d00b      	beq.n	8006414 <TIM_OC4_SetConfig+0xc0>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a1d      	ldr	r2, [pc, #116]	; (8006474 <TIM_OC4_SetConfig+0x120>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d007      	beq.n	8006414 <TIM_OC4_SetConfig+0xc0>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a1c      	ldr	r2, [pc, #112]	; (8006478 <TIM_OC4_SetConfig+0x124>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d003      	beq.n	8006414 <TIM_OC4_SetConfig+0xc0>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a17      	ldr	r2, [pc, #92]	; (800646c <TIM_OC4_SetConfig+0x118>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d113      	bne.n	800643c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800641a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006422:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	019b      	lsls	r3, r3, #6
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	4313      	orrs	r3, r2
 800642e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	019b      	lsls	r3, r3, #6
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	4313      	orrs	r3, r2
 800643a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	621a      	str	r2, [r3, #32]
}
 8006456:	bf00      	nop
 8006458:	371c      	adds	r7, #28
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	40012c00 	.word	0x40012c00
 8006468:	40013400 	.word	0x40013400
 800646c:	40015000 	.word	0x40015000
 8006470:	40014000 	.word	0x40014000
 8006474:	40014400 	.word	0x40014400
 8006478:	40014800 	.word	0x40014800

0800647c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800647c:	b480      	push	{r7}
 800647e:	b087      	sub	sp, #28
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80064c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	041b      	lsls	r3, r3, #16
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a19      	ldr	r2, [pc, #100]	; (8006538 <TIM_OC5_SetConfig+0xbc>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d013      	beq.n	80064fe <TIM_OC5_SetConfig+0x82>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a18      	ldr	r2, [pc, #96]	; (800653c <TIM_OC5_SetConfig+0xc0>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d00f      	beq.n	80064fe <TIM_OC5_SetConfig+0x82>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a17      	ldr	r2, [pc, #92]	; (8006540 <TIM_OC5_SetConfig+0xc4>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d00b      	beq.n	80064fe <TIM_OC5_SetConfig+0x82>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a16      	ldr	r2, [pc, #88]	; (8006544 <TIM_OC5_SetConfig+0xc8>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d007      	beq.n	80064fe <TIM_OC5_SetConfig+0x82>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a15      	ldr	r2, [pc, #84]	; (8006548 <TIM_OC5_SetConfig+0xcc>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d003      	beq.n	80064fe <TIM_OC5_SetConfig+0x82>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a14      	ldr	r2, [pc, #80]	; (800654c <TIM_OC5_SetConfig+0xd0>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d109      	bne.n	8006512 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006504:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	021b      	lsls	r3, r3, #8
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	4313      	orrs	r3, r2
 8006510:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	621a      	str	r2, [r3, #32]
}
 800652c:	bf00      	nop
 800652e:	371c      	adds	r7, #28
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr
 8006538:	40012c00 	.word	0x40012c00
 800653c:	40013400 	.word	0x40013400
 8006540:	40014000 	.word	0x40014000
 8006544:	40014400 	.word	0x40014400
 8006548:	40014800 	.word	0x40014800
 800654c:	40015000 	.word	0x40015000

08006550 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006550:	b480      	push	{r7}
 8006552:	b087      	sub	sp, #28
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800657e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	021b      	lsls	r3, r3, #8
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	4313      	orrs	r3, r2
 800658e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006596:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	051b      	lsls	r3, r3, #20
 800659e:	693a      	ldr	r2, [r7, #16]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a1a      	ldr	r2, [pc, #104]	; (8006610 <TIM_OC6_SetConfig+0xc0>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d013      	beq.n	80065d4 <TIM_OC6_SetConfig+0x84>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a19      	ldr	r2, [pc, #100]	; (8006614 <TIM_OC6_SetConfig+0xc4>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d00f      	beq.n	80065d4 <TIM_OC6_SetConfig+0x84>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a18      	ldr	r2, [pc, #96]	; (8006618 <TIM_OC6_SetConfig+0xc8>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d00b      	beq.n	80065d4 <TIM_OC6_SetConfig+0x84>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a17      	ldr	r2, [pc, #92]	; (800661c <TIM_OC6_SetConfig+0xcc>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d007      	beq.n	80065d4 <TIM_OC6_SetConfig+0x84>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a16      	ldr	r2, [pc, #88]	; (8006620 <TIM_OC6_SetConfig+0xd0>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d003      	beq.n	80065d4 <TIM_OC6_SetConfig+0x84>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a15      	ldr	r2, [pc, #84]	; (8006624 <TIM_OC6_SetConfig+0xd4>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d109      	bne.n	80065e8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	029b      	lsls	r3, r3, #10
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	621a      	str	r2, [r3, #32]
}
 8006602:	bf00      	nop
 8006604:	371c      	adds	r7, #28
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	40012c00 	.word	0x40012c00
 8006614:	40013400 	.word	0x40013400
 8006618:	40014000 	.word	0x40014000
 800661c:	40014400 	.word	0x40014400
 8006620:	40014800 	.word	0x40014800
 8006624:	40015000 	.word	0x40015000

08006628 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006628:	b480      	push	{r7}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
 8006634:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	f023 0201 	bic.w	r2, r3, #1
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6a1b      	ldr	r3, [r3, #32]
 800664c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	4a28      	ldr	r2, [pc, #160]	; (80066f4 <TIM_TI1_SetConfig+0xcc>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d01b      	beq.n	800668e <TIM_TI1_SetConfig+0x66>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800665c:	d017      	beq.n	800668e <TIM_TI1_SetConfig+0x66>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4a25      	ldr	r2, [pc, #148]	; (80066f8 <TIM_TI1_SetConfig+0xd0>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d013      	beq.n	800668e <TIM_TI1_SetConfig+0x66>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	4a24      	ldr	r2, [pc, #144]	; (80066fc <TIM_TI1_SetConfig+0xd4>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d00f      	beq.n	800668e <TIM_TI1_SetConfig+0x66>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	4a23      	ldr	r2, [pc, #140]	; (8006700 <TIM_TI1_SetConfig+0xd8>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d00b      	beq.n	800668e <TIM_TI1_SetConfig+0x66>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	4a22      	ldr	r2, [pc, #136]	; (8006704 <TIM_TI1_SetConfig+0xdc>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d007      	beq.n	800668e <TIM_TI1_SetConfig+0x66>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	4a21      	ldr	r2, [pc, #132]	; (8006708 <TIM_TI1_SetConfig+0xe0>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d003      	beq.n	800668e <TIM_TI1_SetConfig+0x66>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	4a20      	ldr	r2, [pc, #128]	; (800670c <TIM_TI1_SetConfig+0xe4>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d101      	bne.n	8006692 <TIM_TI1_SetConfig+0x6a>
 800668e:	2301      	movs	r3, #1
 8006690:	e000      	b.n	8006694 <TIM_TI1_SetConfig+0x6c>
 8006692:	2300      	movs	r3, #0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d008      	beq.n	80066aa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f023 0303 	bic.w	r3, r3, #3
 800669e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	617b      	str	r3, [r7, #20]
 80066a8:	e003      	b.n	80066b2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f043 0301 	orr.w	r3, r3, #1
 80066b0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	011b      	lsls	r3, r3, #4
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f023 030a 	bic.w	r3, r3, #10
 80066cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	f003 030a 	and.w	r3, r3, #10
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	697a      	ldr	r2, [r7, #20]
 80066de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	621a      	str	r2, [r3, #32]
}
 80066e6:	bf00      	nop
 80066e8:	371c      	adds	r7, #28
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	40012c00 	.word	0x40012c00
 80066f8:	40000400 	.word	0x40000400
 80066fc:	40000800 	.word	0x40000800
 8006700:	40000c00 	.word	0x40000c00
 8006704:	40013400 	.word	0x40013400
 8006708:	40014000 	.word	0x40014000
 800670c:	40015000 	.word	0x40015000

08006710 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006710:	b480      	push	{r7}
 8006712:	b087      	sub	sp, #28
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	f003 031f 	and.w	r3, r3, #31
 8006722:	2201      	movs	r2, #1
 8006724:	fa02 f303 	lsl.w	r3, r2, r3
 8006728:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6a1a      	ldr	r2, [r3, #32]
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	43db      	mvns	r3, r3
 8006732:	401a      	ands	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6a1a      	ldr	r2, [r3, #32]
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	f003 031f 	and.w	r3, r3, #31
 8006742:	6879      	ldr	r1, [r7, #4]
 8006744:	fa01 f303 	lsl.w	r3, r1, r3
 8006748:	431a      	orrs	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	621a      	str	r2, [r3, #32]
}
 800674e:	bf00      	nop
 8006750:	371c      	adds	r7, #28
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b08a      	sub	sp, #40	; 0x28
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
 8006762:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d101      	bne.n	800676e <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e0a0      	b.n	80068b0 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006774:	b2db      	uxtb	r3, r3
 8006776:	2b00      	cmp	r3, #0
 8006778:	d106      	bne.n	8006788 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f7fb f9d8 	bl	8001b38 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2202      	movs	r2, #2
 800678c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	3304      	adds	r3, #4
 8006798:	4619      	mov	r1, r3
 800679a:	4610      	mov	r0, r2
 800679c:	f7ff fb72 	bl	8005e84 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6818      	ldr	r0, [r3, #0]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	6819      	ldr	r1, [r3, #0]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	2203      	movs	r2, #3
 80067ae:	f7ff ff3b 	bl	8006628 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	699a      	ldr	r2, [r3, #24]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f022 020c 	bic.w	r2, r2, #12
 80067c0:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	6999      	ldr	r1, [r3, #24]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	430a      	orrs	r2, r1
 80067d2:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	685a      	ldr	r2, [r3, #4]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80067e2:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	6812      	ldr	r2, [r2, #0]
 80067ee:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80067f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f6:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689a      	ldr	r2, [r3, #8]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006806:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	6812      	ldr	r2, [r2, #0]
 8006812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006816:	f023 0307 	bic.w	r3, r3, #7
 800681a:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	689a      	ldr	r2, [r3, #8]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f042 0204 	orr.w	r2, r2, #4
 800682a:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800682c:	2300      	movs	r3, #0
 800682e:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006830:	2300      	movs	r3, #0
 8006832:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8006834:	2370      	movs	r3, #112	; 0x70
 8006836:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006838:	2300      	movs	r3, #0
 800683a:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800683c:	2300      	movs	r3, #0
 800683e:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006840:	2300      	movs	r3, #0
 8006842:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f107 020c 	add.w	r2, r7, #12
 8006852:	4611      	mov	r1, r2
 8006854:	4618      	mov	r0, r3
 8006856:	f7ff fc57 	bl	8006108 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	6812      	ldr	r2, [r2, #0]
 8006864:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800686c:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	685a      	ldr	r2, [r3, #4]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800687c:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3728      	adds	r7, #40	; 0x28
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d109      	bne.n	80068dc <HAL_TIMEx_PWMN_Start+0x24>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	bf14      	ite	ne
 80068d4:	2301      	movne	r3, #1
 80068d6:	2300      	moveq	r3, #0
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	e022      	b.n	8006922 <HAL_TIMEx_PWMN_Start+0x6a>
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	2b04      	cmp	r3, #4
 80068e0:	d109      	bne.n	80068f6 <HAL_TIMEx_PWMN_Start+0x3e>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	bf14      	ite	ne
 80068ee:	2301      	movne	r3, #1
 80068f0:	2300      	moveq	r3, #0
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	e015      	b.n	8006922 <HAL_TIMEx_PWMN_Start+0x6a>
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	2b08      	cmp	r3, #8
 80068fa:	d109      	bne.n	8006910 <HAL_TIMEx_PWMN_Start+0x58>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b01      	cmp	r3, #1
 8006906:	bf14      	ite	ne
 8006908:	2301      	movne	r3, #1
 800690a:	2300      	moveq	r3, #0
 800690c:	b2db      	uxtb	r3, r3
 800690e:	e008      	b.n	8006922 <HAL_TIMEx_PWMN_Start+0x6a>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006916:	b2db      	uxtb	r3, r3
 8006918:	2b01      	cmp	r3, #1
 800691a:	bf14      	ite	ne
 800691c:	2301      	movne	r3, #1
 800691e:	2300      	moveq	r3, #0
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d001      	beq.n	800692a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e073      	b.n	8006a12 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d104      	bne.n	800693a <HAL_TIMEx_PWMN_Start+0x82>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2202      	movs	r2, #2
 8006934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006938:	e013      	b.n	8006962 <HAL_TIMEx_PWMN_Start+0xaa>
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2b04      	cmp	r3, #4
 800693e:	d104      	bne.n	800694a <HAL_TIMEx_PWMN_Start+0x92>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006948:	e00b      	b.n	8006962 <HAL_TIMEx_PWMN_Start+0xaa>
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b08      	cmp	r3, #8
 800694e:	d104      	bne.n	800695a <HAL_TIMEx_PWMN_Start+0xa2>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006958:	e003      	b.n	8006962 <HAL_TIMEx_PWMN_Start+0xaa>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2202      	movs	r2, #2
 800695e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2204      	movs	r2, #4
 8006968:	6839      	ldr	r1, [r7, #0]
 800696a:	4618      	mov	r0, r3
 800696c:	f000 fa52 	bl	8006e14 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800697e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a25      	ldr	r2, [pc, #148]	; (8006a1c <HAL_TIMEx_PWMN_Start+0x164>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d022      	beq.n	80069d0 <HAL_TIMEx_PWMN_Start+0x118>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006992:	d01d      	beq.n	80069d0 <HAL_TIMEx_PWMN_Start+0x118>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a21      	ldr	r2, [pc, #132]	; (8006a20 <HAL_TIMEx_PWMN_Start+0x168>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d018      	beq.n	80069d0 <HAL_TIMEx_PWMN_Start+0x118>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a20      	ldr	r2, [pc, #128]	; (8006a24 <HAL_TIMEx_PWMN_Start+0x16c>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d013      	beq.n	80069d0 <HAL_TIMEx_PWMN_Start+0x118>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a1e      	ldr	r2, [pc, #120]	; (8006a28 <HAL_TIMEx_PWMN_Start+0x170>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d00e      	beq.n	80069d0 <HAL_TIMEx_PWMN_Start+0x118>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a1d      	ldr	r2, [pc, #116]	; (8006a2c <HAL_TIMEx_PWMN_Start+0x174>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d009      	beq.n	80069d0 <HAL_TIMEx_PWMN_Start+0x118>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a1b      	ldr	r2, [pc, #108]	; (8006a30 <HAL_TIMEx_PWMN_Start+0x178>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d004      	beq.n	80069d0 <HAL_TIMEx_PWMN_Start+0x118>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a1a      	ldr	r2, [pc, #104]	; (8006a34 <HAL_TIMEx_PWMN_Start+0x17c>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d115      	bne.n	80069fc <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	689a      	ldr	r2, [r3, #8]
 80069d6:	4b18      	ldr	r3, [pc, #96]	; (8006a38 <HAL_TIMEx_PWMN_Start+0x180>)
 80069d8:	4013      	ands	r3, r2
 80069da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2b06      	cmp	r3, #6
 80069e0:	d015      	beq.n	8006a0e <HAL_TIMEx_PWMN_Start+0x156>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069e8:	d011      	beq.n	8006a0e <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f042 0201 	orr.w	r2, r2, #1
 80069f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069fa:	e008      	b.n	8006a0e <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f042 0201 	orr.w	r2, r2, #1
 8006a0a:	601a      	str	r2, [r3, #0]
 8006a0c:	e000      	b.n	8006a10 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	40012c00 	.word	0x40012c00
 8006a20:	40000400 	.word	0x40000400
 8006a24:	40000800 	.word	0x40000800
 8006a28:	40000c00 	.word	0x40000c00
 8006a2c:	40013400 	.word	0x40013400
 8006a30:	40014000 	.word	0x40014000
 8006a34:	40015000 	.word	0x40015000
 8006a38:	00010007 	.word	0x00010007

08006a3c <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	6839      	ldr	r1, [r7, #0]
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 f9e0 	bl	8006e14 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	6a1a      	ldr	r2, [r3, #32]
 8006a5a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a5e:	4013      	ands	r3, r2
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d10f      	bne.n	8006a84 <HAL_TIMEx_PWMN_Stop+0x48>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6a1a      	ldr	r2, [r3, #32]
 8006a6a:	f244 4344 	movw	r3, #17476	; 0x4444
 8006a6e:	4013      	ands	r3, r2
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d107      	bne.n	8006a84 <HAL_TIMEx_PWMN_Stop+0x48>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a82:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6a1a      	ldr	r2, [r3, #32]
 8006a8a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a8e:	4013      	ands	r3, r2
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d10f      	bne.n	8006ab4 <HAL_TIMEx_PWMN_Stop+0x78>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	6a1a      	ldr	r2, [r3, #32]
 8006a9a:	f244 4344 	movw	r3, #17476	; 0x4444
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d107      	bne.n	8006ab4 <HAL_TIMEx_PWMN_Stop+0x78>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f022 0201 	bic.w	r2, r2, #1
 8006ab2:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d104      	bne.n	8006ac4 <HAL_TIMEx_PWMN_Stop+0x88>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ac2:	e013      	b.n	8006aec <HAL_TIMEx_PWMN_Stop+0xb0>
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	2b04      	cmp	r3, #4
 8006ac8:	d104      	bne.n	8006ad4 <HAL_TIMEx_PWMN_Stop+0x98>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ad2:	e00b      	b.n	8006aec <HAL_TIMEx_PWMN_Stop+0xb0>
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	2b08      	cmp	r3, #8
 8006ad8:	d104      	bne.n	8006ae4 <HAL_TIMEx_PWMN_Stop+0xa8>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ae2:	e003      	b.n	8006aec <HAL_TIMEx_PWMN_Stop+0xb0>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3708      	adds	r7, #8
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
	...

08006af8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d101      	bne.n	8006b10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	e074      	b.n	8006bfa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a34      	ldr	r2, [pc, #208]	; (8006c08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d009      	beq.n	8006b4e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a33      	ldr	r2, [pc, #204]	; (8006c0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d004      	beq.n	8006b4e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a31      	ldr	r2, [pc, #196]	; (8006c10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d108      	bne.n	8006b60 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b54:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a21      	ldr	r2, [pc, #132]	; (8006c08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d022      	beq.n	8006bce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b90:	d01d      	beq.n	8006bce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a1f      	ldr	r2, [pc, #124]	; (8006c14 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d018      	beq.n	8006bce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a1d      	ldr	r2, [pc, #116]	; (8006c18 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d013      	beq.n	8006bce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a1c      	ldr	r2, [pc, #112]	; (8006c1c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d00e      	beq.n	8006bce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a15      	ldr	r2, [pc, #84]	; (8006c0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d009      	beq.n	8006bce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a18      	ldr	r2, [pc, #96]	; (8006c20 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d004      	beq.n	8006bce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a11      	ldr	r2, [pc, #68]	; (8006c10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d10c      	bne.n	8006be8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68ba      	ldr	r2, [r7, #8]
 8006be6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	40012c00 	.word	0x40012c00
 8006c0c:	40013400 	.word	0x40013400
 8006c10:	40015000 	.word	0x40015000
 8006c14:	40000400 	.word	0x40000400
 8006c18:	40000800 	.word	0x40000800
 8006c1c:	40000c00 	.word	0x40000c00
 8006c20:	40014000 	.word	0x40014000

08006c24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d101      	bne.n	8006c40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	e096      	b.n	8006d6e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	041b      	lsls	r3, r3, #16
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a2f      	ldr	r2, [pc, #188]	; (8006d7c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d009      	beq.n	8006cd8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a2d      	ldr	r2, [pc, #180]	; (8006d80 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d004      	beq.n	8006cd8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a2c      	ldr	r2, [pc, #176]	; (8006d84 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d106      	bne.n	8006ce6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a24      	ldr	r2, [pc, #144]	; (8006d7c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d009      	beq.n	8006d04 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a22      	ldr	r2, [pc, #136]	; (8006d80 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d004      	beq.n	8006d04 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a21      	ldr	r2, [pc, #132]	; (8006d84 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d12b      	bne.n	8006d5c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d0e:	051b      	lsls	r3, r3, #20
 8006d10:	4313      	orrs	r3, r2
 8006d12:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a11      	ldr	r2, [pc, #68]	; (8006d7c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d009      	beq.n	8006d4e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a10      	ldr	r2, [pc, #64]	; (8006d80 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d004      	beq.n	8006d4e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a0e      	ldr	r2, [pc, #56]	; (8006d84 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d106      	bne.n	8006d5c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3714      	adds	r7, #20
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	40012c00 	.word	0x40012c00
 8006d80:	40013400 	.word	0x40013400
 8006d84:	40015000 	.word	0x40015000

08006d88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d90:	bf00      	nop
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b087      	sub	sp, #28
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	f003 031f 	and.w	r3, r3, #31
 8006e26:	2204      	movs	r2, #4
 8006e28:	fa02 f303 	lsl.w	r3, r2, r3
 8006e2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6a1a      	ldr	r2, [r3, #32]
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	43db      	mvns	r3, r3
 8006e36:	401a      	ands	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6a1a      	ldr	r2, [r3, #32]
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	f003 031f 	and.w	r3, r3, #31
 8006e46:	6879      	ldr	r1, [r7, #4]
 8006e48:	fa01 f303 	lsl.w	r3, r1, r3
 8006e4c:	431a      	orrs	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	621a      	str	r2, [r3, #32]
}
 8006e52:	bf00      	nop
 8006e54:	371c      	adds	r7, #28
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b082      	sub	sp, #8
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e042      	b.n	8006ef6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d106      	bne.n	8006e88 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f7fa ffba 	bl	8001dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2224      	movs	r2, #36	; 0x24
 8006e8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f022 0201 	bic.w	r2, r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 fc51 	bl	8007748 <UART_SetConfig>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d101      	bne.n	8006eb0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e022      	b.n	8006ef6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d002      	beq.n	8006ebe <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 ff41 	bl	8007d40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	685a      	ldr	r2, [r3, #4]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ecc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	689a      	ldr	r2, [r3, #8]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006edc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f042 0201 	orr.w	r2, r2, #1
 8006eec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 ffc8 	bl	8007e84 <UART_CheckIdleState>
 8006ef4:	4603      	mov	r3, r0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3708      	adds	r7, #8
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b08a      	sub	sp, #40	; 0x28
 8006f02:	af02      	add	r7, sp, #8
 8006f04:	60f8      	str	r0, [r7, #12]
 8006f06:	60b9      	str	r1, [r7, #8]
 8006f08:	603b      	str	r3, [r7, #0]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f14:	2b20      	cmp	r3, #32
 8006f16:	f040 8083 	bne.w	8007020 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d002      	beq.n	8006f26 <HAL_UART_Transmit+0x28>
 8006f20:	88fb      	ldrh	r3, [r7, #6]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d101      	bne.n	8006f2a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e07b      	b.n	8007022 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d101      	bne.n	8006f38 <HAL_UART_Transmit+0x3a>
 8006f34:	2302      	movs	r3, #2
 8006f36:	e074      	b.n	8007022 <HAL_UART_Transmit+0x124>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2221      	movs	r2, #33	; 0x21
 8006f4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f50:	f7fb fa82 	bl	8002458 <HAL_GetTick>
 8006f54:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	88fa      	ldrh	r2, [r7, #6]
 8006f5a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	88fa      	ldrh	r2, [r7, #6]
 8006f62:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f6e:	d108      	bne.n	8006f82 <HAL_UART_Transmit+0x84>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d104      	bne.n	8006f82 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	61bb      	str	r3, [r7, #24]
 8006f80:	e003      	b.n	8006f8a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f86:	2300      	movs	r3, #0
 8006f88:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006f92:	e02c      	b.n	8006fee <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	9300      	str	r3, [sp, #0]
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	2180      	movs	r1, #128	; 0x80
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f000 ffbb 	bl	8007f1a <UART_WaitOnFlagUntilTimeout>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d001      	beq.n	8006fae <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e039      	b.n	8007022 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10b      	bne.n	8006fcc <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	881b      	ldrh	r3, [r3, #0]
 8006fb8:	461a      	mov	r2, r3
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fc2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	3302      	adds	r3, #2
 8006fc8:	61bb      	str	r3, [r7, #24]
 8006fca:	e007      	b.n	8006fdc <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	781a      	ldrb	r2, [r3, #0]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1cc      	bne.n	8006f94 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	2200      	movs	r2, #0
 8007002:	2140      	movs	r1, #64	; 0x40
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f000 ff88 	bl	8007f1a <UART_WaitOnFlagUntilTimeout>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d001      	beq.n	8007014 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007010:	2303      	movs	r3, #3
 8007012:	e006      	b.n	8007022 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2220      	movs	r2, #32
 8007018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800701c:	2300      	movs	r3, #0
 800701e:	e000      	b.n	8007022 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007020:	2302      	movs	r3, #2
  }
}
 8007022:	4618      	mov	r0, r3
 8007024:	3720      	adds	r7, #32
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
	...

0800702c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b08a      	sub	sp, #40	; 0x28
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	4613      	mov	r3, r2
 8007038:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007040:	2b20      	cmp	r3, #32
 8007042:	d142      	bne.n	80070ca <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d002      	beq.n	8007050 <HAL_UART_Receive_IT+0x24>
 800704a:	88fb      	ldrh	r3, [r7, #6]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e03b      	b.n	80070cc <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800705a:	2b01      	cmp	r3, #1
 800705c:	d101      	bne.n	8007062 <HAL_UART_Receive_IT+0x36>
 800705e:	2302      	movs	r3, #2
 8007060:	e034      	b.n	80070cc <HAL_UART_Receive_IT+0xa0>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2200      	movs	r2, #0
 800706e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a17      	ldr	r2, [pc, #92]	; (80070d4 <HAL_UART_Receive_IT+0xa8>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d01f      	beq.n	80070ba <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007084:	2b00      	cmp	r3, #0
 8007086:	d018      	beq.n	80070ba <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	e853 3f00 	ldrex	r3, [r3]
 8007094:	613b      	str	r3, [r7, #16]
   return(result);
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800709c:	627b      	str	r3, [r7, #36]	; 0x24
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	461a      	mov	r2, r3
 80070a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a6:	623b      	str	r3, [r7, #32]
 80070a8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070aa:	69f9      	ldr	r1, [r7, #28]
 80070ac:	6a3a      	ldr	r2, [r7, #32]
 80070ae:	e841 2300 	strex	r3, r2, [r1]
 80070b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1e6      	bne.n	8007088 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80070ba:	88fb      	ldrh	r3, [r7, #6]
 80070bc:	461a      	mov	r2, r3
 80070be:	68b9      	ldr	r1, [r7, #8]
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f000 fff3 	bl	80080ac <UART_Start_Receive_IT>
 80070c6:	4603      	mov	r3, r0
 80070c8:	e000      	b.n	80070cc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80070ca:	2302      	movs	r3, #2
  }
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3728      	adds	r7, #40	; 0x28
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	40008000 	.word	0x40008000

080070d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b0ba      	sub	sp, #232	; 0xe8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	69db      	ldr	r3, [r3, #28]
 80070e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80070fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007102:	f640 030f 	movw	r3, #2063	; 0x80f
 8007106:	4013      	ands	r3, r2
 8007108:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800710c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007110:	2b00      	cmp	r3, #0
 8007112:	d11b      	bne.n	800714c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007118:	f003 0320 	and.w	r3, r3, #32
 800711c:	2b00      	cmp	r3, #0
 800711e:	d015      	beq.n	800714c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007124:	f003 0320 	and.w	r3, r3, #32
 8007128:	2b00      	cmp	r3, #0
 800712a:	d105      	bne.n	8007138 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800712c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007134:	2b00      	cmp	r3, #0
 8007136:	d009      	beq.n	800714c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800713c:	2b00      	cmp	r3, #0
 800713e:	f000 82d6 	beq.w	80076ee <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	4798      	blx	r3
      }
      return;
 800714a:	e2d0      	b.n	80076ee <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800714c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007150:	2b00      	cmp	r3, #0
 8007152:	f000 811f 	beq.w	8007394 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007156:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800715a:	4b8b      	ldr	r3, [pc, #556]	; (8007388 <HAL_UART_IRQHandler+0x2b0>)
 800715c:	4013      	ands	r3, r2
 800715e:	2b00      	cmp	r3, #0
 8007160:	d106      	bne.n	8007170 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007162:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007166:	4b89      	ldr	r3, [pc, #548]	; (800738c <HAL_UART_IRQHandler+0x2b4>)
 8007168:	4013      	ands	r3, r2
 800716a:	2b00      	cmp	r3, #0
 800716c:	f000 8112 	beq.w	8007394 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007174:	f003 0301 	and.w	r3, r3, #1
 8007178:	2b00      	cmp	r3, #0
 800717a:	d011      	beq.n	80071a0 <HAL_UART_IRQHandler+0xc8>
 800717c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00b      	beq.n	80071a0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2201      	movs	r2, #1
 800718e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007196:	f043 0201 	orr.w	r2, r3, #1
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a4:	f003 0302 	and.w	r3, r3, #2
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d011      	beq.n	80071d0 <HAL_UART_IRQHandler+0xf8>
 80071ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071b0:	f003 0301 	and.w	r3, r3, #1
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00b      	beq.n	80071d0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2202      	movs	r2, #2
 80071be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071c6:	f043 0204 	orr.w	r2, r3, #4
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071d4:	f003 0304 	and.w	r3, r3, #4
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d011      	beq.n	8007200 <HAL_UART_IRQHandler+0x128>
 80071dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071e0:	f003 0301 	and.w	r3, r3, #1
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00b      	beq.n	8007200 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2204      	movs	r2, #4
 80071ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071f6:	f043 0202 	orr.w	r2, r3, #2
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007204:	f003 0308 	and.w	r3, r3, #8
 8007208:	2b00      	cmp	r3, #0
 800720a:	d017      	beq.n	800723c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800720c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007210:	f003 0320 	and.w	r3, r3, #32
 8007214:	2b00      	cmp	r3, #0
 8007216:	d105      	bne.n	8007224 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007218:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800721c:	4b5a      	ldr	r3, [pc, #360]	; (8007388 <HAL_UART_IRQHandler+0x2b0>)
 800721e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00b      	beq.n	800723c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2208      	movs	r2, #8
 800722a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007232:	f043 0208 	orr.w	r2, r3, #8
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800723c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007244:	2b00      	cmp	r3, #0
 8007246:	d012      	beq.n	800726e <HAL_UART_IRQHandler+0x196>
 8007248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800724c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00c      	beq.n	800726e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800725c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007264:	f043 0220 	orr.w	r2, r3, #32
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007274:	2b00      	cmp	r3, #0
 8007276:	f000 823c 	beq.w	80076f2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800727a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800727e:	f003 0320 	and.w	r3, r3, #32
 8007282:	2b00      	cmp	r3, #0
 8007284:	d013      	beq.n	80072ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800728a:	f003 0320 	and.w	r3, r3, #32
 800728e:	2b00      	cmp	r3, #0
 8007290:	d105      	bne.n	800729e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800729a:	2b00      	cmp	r3, #0
 800729c:	d007      	beq.n	80072ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d003      	beq.n	80072ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c2:	2b40      	cmp	r3, #64	; 0x40
 80072c4:	d005      	beq.n	80072d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80072c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d04f      	beq.n	8007372 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f001 f814 	bl	8008300 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e2:	2b40      	cmp	r3, #64	; 0x40
 80072e4:	d141      	bne.n	800736a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	3308      	adds	r3, #8
 80072ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072f4:	e853 3f00 	ldrex	r3, [r3]
 80072f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80072fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007300:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007304:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	3308      	adds	r3, #8
 800730e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007312:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007316:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800731e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007322:	e841 2300 	strex	r3, r2, [r1]
 8007326:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800732a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1d9      	bne.n	80072e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007336:	2b00      	cmp	r3, #0
 8007338:	d013      	beq.n	8007362 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800733e:	4a14      	ldr	r2, [pc, #80]	; (8007390 <HAL_UART_IRQHandler+0x2b8>)
 8007340:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007346:	4618      	mov	r0, r3
 8007348:	f7fc fd73 	bl	8003e32 <HAL_DMA_Abort_IT>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d017      	beq.n	8007382 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800735c:	4610      	mov	r0, r2
 800735e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007360:	e00f      	b.n	8007382 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f9da 	bl	800771c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007368:	e00b      	b.n	8007382 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f9d6 	bl	800771c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007370:	e007      	b.n	8007382 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f9d2 	bl	800771c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007380:	e1b7      	b.n	80076f2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007382:	bf00      	nop
    return;
 8007384:	e1b5      	b.n	80076f2 <HAL_UART_IRQHandler+0x61a>
 8007386:	bf00      	nop
 8007388:	10000001 	.word	0x10000001
 800738c:	04000120 	.word	0x04000120
 8007390:	080083cd 	.word	0x080083cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007398:	2b01      	cmp	r3, #1
 800739a:	f040 814a 	bne.w	8007632 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800739e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073a2:	f003 0310 	and.w	r3, r3, #16
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f000 8143 	beq.w	8007632 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80073ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073b0:	f003 0310 	and.w	r3, r3, #16
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f000 813c 	beq.w	8007632 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2210      	movs	r2, #16
 80073c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073cc:	2b40      	cmp	r3, #64	; 0x40
 80073ce:	f040 80b5 	bne.w	800753c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80073de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f000 8187 	beq.w	80076f6 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80073ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073f2:	429a      	cmp	r2, r3
 80073f4:	f080 817f 	bcs.w	80076f6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 0320 	and.w	r3, r3, #32
 800740e:	2b00      	cmp	r3, #0
 8007410:	f040 8086 	bne.w	8007520 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007420:	e853 3f00 	ldrex	r3, [r3]
 8007424:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007428:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800742c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007430:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	461a      	mov	r2, r3
 800743a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800743e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007442:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007446:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800744a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800744e:	e841 2300 	strex	r3, r2, [r1]
 8007452:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007456:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1da      	bne.n	8007414 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	3308      	adds	r3, #8
 8007464:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007468:	e853 3f00 	ldrex	r3, [r3]
 800746c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800746e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007470:	f023 0301 	bic.w	r3, r3, #1
 8007474:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	3308      	adds	r3, #8
 800747e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007482:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007486:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007488:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800748a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800748e:	e841 2300 	strex	r3, r2, [r1]
 8007492:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007494:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007496:	2b00      	cmp	r3, #0
 8007498:	d1e1      	bne.n	800745e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	3308      	adds	r3, #8
 80074a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074a4:	e853 3f00 	ldrex	r3, [r3]
 80074a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80074aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	3308      	adds	r3, #8
 80074ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80074be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80074c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80074c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80074c6:	e841 2300 	strex	r3, r2, [r1]
 80074ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80074cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1e3      	bne.n	800749a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2220      	movs	r2, #32
 80074d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074e8:	e853 3f00 	ldrex	r3, [r3]
 80074ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80074ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074f0:	f023 0310 	bic.w	r3, r3, #16
 80074f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	461a      	mov	r2, r3
 80074fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007502:	65bb      	str	r3, [r7, #88]	; 0x58
 8007504:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007506:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007508:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800750a:	e841 2300 	strex	r3, r2, [r1]
 800750e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1e4      	bne.n	80074e0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800751a:	4618      	mov	r0, r3
 800751c:	f7fc fc30 	bl	8003d80 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800752c:	b29b      	uxth	r3, r3
 800752e:	1ad3      	subs	r3, r2, r3
 8007530:	b29b      	uxth	r3, r3
 8007532:	4619      	mov	r1, r3
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f8fb 	bl	8007730 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800753a:	e0dc      	b.n	80076f6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007548:	b29b      	uxth	r3, r3
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007556:	b29b      	uxth	r3, r3
 8007558:	2b00      	cmp	r3, #0
 800755a:	f000 80ce 	beq.w	80076fa <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800755e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007562:	2b00      	cmp	r3, #0
 8007564:	f000 80c9 	beq.w	80076fa <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007570:	e853 3f00 	ldrex	r3, [r3]
 8007574:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007578:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800757c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	461a      	mov	r2, r3
 8007586:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800758a:	647b      	str	r3, [r7, #68]	; 0x44
 800758c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007590:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007592:	e841 2300 	strex	r3, r2, [r1]
 8007596:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1e4      	bne.n	8007568 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3308      	adds	r3, #8
 80075a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a8:	e853 3f00 	ldrex	r3, [r3]
 80075ac:	623b      	str	r3, [r7, #32]
   return(result);
 80075ae:	6a3b      	ldr	r3, [r7, #32]
 80075b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075b4:	f023 0301 	bic.w	r3, r3, #1
 80075b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	3308      	adds	r3, #8
 80075c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80075c6:	633a      	str	r2, [r7, #48]	; 0x30
 80075c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ce:	e841 2300 	strex	r3, r2, [r1]
 80075d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1e1      	bne.n	800759e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2220      	movs	r2, #32
 80075de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	e853 3f00 	ldrex	r3, [r3]
 80075fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f023 0310 	bic.w	r3, r3, #16
 8007602:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	461a      	mov	r2, r3
 800760c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007610:	61fb      	str	r3, [r7, #28]
 8007612:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007614:	69b9      	ldr	r1, [r7, #24]
 8007616:	69fa      	ldr	r2, [r7, #28]
 8007618:	e841 2300 	strex	r3, r2, [r1]
 800761c:	617b      	str	r3, [r7, #20]
   return(result);
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1e4      	bne.n	80075ee <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007624:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007628:	4619      	mov	r1, r3
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 f880 	bl	8007730 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007630:	e063      	b.n	80076fa <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00e      	beq.n	800765c <HAL_UART_IRQHandler+0x584>
 800763e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d008      	beq.n	800765c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007652:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f001 fb57 	bl	8008d08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800765a:	e051      	b.n	8007700 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800765c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007664:	2b00      	cmp	r3, #0
 8007666:	d014      	beq.n	8007692 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800766c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007670:	2b00      	cmp	r3, #0
 8007672:	d105      	bne.n	8007680 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007678:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800767c:	2b00      	cmp	r3, #0
 800767e:	d008      	beq.n	8007692 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007684:	2b00      	cmp	r3, #0
 8007686:	d03a      	beq.n	80076fe <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	4798      	blx	r3
    }
    return;
 8007690:	e035      	b.n	80076fe <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800769a:	2b00      	cmp	r3, #0
 800769c:	d009      	beq.n	80076b2 <HAL_UART_IRQHandler+0x5da>
 800769e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d003      	beq.n	80076b2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fea4 	bl	80083f8 <UART_EndTransmit_IT>
    return;
 80076b0:	e026      	b.n	8007700 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80076b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d009      	beq.n	80076d2 <HAL_UART_IRQHandler+0x5fa>
 80076be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d003      	beq.n	80076d2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f001 fb30 	bl	8008d30 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80076d0:	e016      	b.n	8007700 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80076d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d010      	beq.n	8007700 <HAL_UART_IRQHandler+0x628>
 80076de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	da0c      	bge.n	8007700 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f001 fb18 	bl	8008d1c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80076ec:	e008      	b.n	8007700 <HAL_UART_IRQHandler+0x628>
      return;
 80076ee:	bf00      	nop
 80076f0:	e006      	b.n	8007700 <HAL_UART_IRQHandler+0x628>
    return;
 80076f2:	bf00      	nop
 80076f4:	e004      	b.n	8007700 <HAL_UART_IRQHandler+0x628>
      return;
 80076f6:	bf00      	nop
 80076f8:	e002      	b.n	8007700 <HAL_UART_IRQHandler+0x628>
      return;
 80076fa:	bf00      	nop
 80076fc:	e000      	b.n	8007700 <HAL_UART_IRQHandler+0x628>
    return;
 80076fe:	bf00      	nop
  }
}
 8007700:	37e8      	adds	r7, #232	; 0xe8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop

08007708 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007724:	bf00      	nop
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	460b      	mov	r3, r1
 800773a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800773c:	bf00      	nop
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800774c:	b08c      	sub	sp, #48	; 0x30
 800774e:	af00      	add	r7, sp, #0
 8007750:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007752:	2300      	movs	r3, #0
 8007754:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	689a      	ldr	r2, [r3, #8]
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	431a      	orrs	r2, r3
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	431a      	orrs	r2, r3
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	69db      	ldr	r3, [r3, #28]
 800776c:	4313      	orrs	r3, r2
 800776e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	4baa      	ldr	r3, [pc, #680]	; (8007a20 <UART_SetConfig+0x2d8>)
 8007778:	4013      	ands	r3, r2
 800777a:	697a      	ldr	r2, [r7, #20]
 800777c:	6812      	ldr	r2, [r2, #0]
 800777e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007780:	430b      	orrs	r3, r1
 8007782:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	68da      	ldr	r2, [r3, #12]
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	430a      	orrs	r2, r1
 8007798:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a9f      	ldr	r2, [pc, #636]	; (8007a24 <UART_SetConfig+0x2dc>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d004      	beq.n	80077b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077b0:	4313      	orrs	r3, r2
 80077b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80077be:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80077c2:	697a      	ldr	r2, [r7, #20]
 80077c4:	6812      	ldr	r2, [r2, #0]
 80077c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077c8:	430b      	orrs	r3, r1
 80077ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d2:	f023 010f 	bic.w	r1, r3, #15
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	430a      	orrs	r2, r1
 80077e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a90      	ldr	r2, [pc, #576]	; (8007a28 <UART_SetConfig+0x2e0>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d125      	bne.n	8007838 <UART_SetConfig+0xf0>
 80077ec:	4b8f      	ldr	r3, [pc, #572]	; (8007a2c <UART_SetConfig+0x2e4>)
 80077ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077f2:	f003 0303 	and.w	r3, r3, #3
 80077f6:	2b03      	cmp	r3, #3
 80077f8:	d81a      	bhi.n	8007830 <UART_SetConfig+0xe8>
 80077fa:	a201      	add	r2, pc, #4	; (adr r2, 8007800 <UART_SetConfig+0xb8>)
 80077fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007800:	08007811 	.word	0x08007811
 8007804:	08007821 	.word	0x08007821
 8007808:	08007819 	.word	0x08007819
 800780c:	08007829 	.word	0x08007829
 8007810:	2301      	movs	r3, #1
 8007812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007816:	e116      	b.n	8007a46 <UART_SetConfig+0x2fe>
 8007818:	2302      	movs	r3, #2
 800781a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800781e:	e112      	b.n	8007a46 <UART_SetConfig+0x2fe>
 8007820:	2304      	movs	r3, #4
 8007822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007826:	e10e      	b.n	8007a46 <UART_SetConfig+0x2fe>
 8007828:	2308      	movs	r3, #8
 800782a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800782e:	e10a      	b.n	8007a46 <UART_SetConfig+0x2fe>
 8007830:	2310      	movs	r3, #16
 8007832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007836:	e106      	b.n	8007a46 <UART_SetConfig+0x2fe>
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a7c      	ldr	r2, [pc, #496]	; (8007a30 <UART_SetConfig+0x2e8>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d138      	bne.n	80078b4 <UART_SetConfig+0x16c>
 8007842:	4b7a      	ldr	r3, [pc, #488]	; (8007a2c <UART_SetConfig+0x2e4>)
 8007844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007848:	f003 030c 	and.w	r3, r3, #12
 800784c:	2b0c      	cmp	r3, #12
 800784e:	d82d      	bhi.n	80078ac <UART_SetConfig+0x164>
 8007850:	a201      	add	r2, pc, #4	; (adr r2, 8007858 <UART_SetConfig+0x110>)
 8007852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007856:	bf00      	nop
 8007858:	0800788d 	.word	0x0800788d
 800785c:	080078ad 	.word	0x080078ad
 8007860:	080078ad 	.word	0x080078ad
 8007864:	080078ad 	.word	0x080078ad
 8007868:	0800789d 	.word	0x0800789d
 800786c:	080078ad 	.word	0x080078ad
 8007870:	080078ad 	.word	0x080078ad
 8007874:	080078ad 	.word	0x080078ad
 8007878:	08007895 	.word	0x08007895
 800787c:	080078ad 	.word	0x080078ad
 8007880:	080078ad 	.word	0x080078ad
 8007884:	080078ad 	.word	0x080078ad
 8007888:	080078a5 	.word	0x080078a5
 800788c:	2300      	movs	r3, #0
 800788e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007892:	e0d8      	b.n	8007a46 <UART_SetConfig+0x2fe>
 8007894:	2302      	movs	r3, #2
 8007896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800789a:	e0d4      	b.n	8007a46 <UART_SetConfig+0x2fe>
 800789c:	2304      	movs	r3, #4
 800789e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078a2:	e0d0      	b.n	8007a46 <UART_SetConfig+0x2fe>
 80078a4:	2308      	movs	r3, #8
 80078a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078aa:	e0cc      	b.n	8007a46 <UART_SetConfig+0x2fe>
 80078ac:	2310      	movs	r3, #16
 80078ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078b2:	e0c8      	b.n	8007a46 <UART_SetConfig+0x2fe>
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a5e      	ldr	r2, [pc, #376]	; (8007a34 <UART_SetConfig+0x2ec>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d125      	bne.n	800790a <UART_SetConfig+0x1c2>
 80078be:	4b5b      	ldr	r3, [pc, #364]	; (8007a2c <UART_SetConfig+0x2e4>)
 80078c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80078c8:	2b30      	cmp	r3, #48	; 0x30
 80078ca:	d016      	beq.n	80078fa <UART_SetConfig+0x1b2>
 80078cc:	2b30      	cmp	r3, #48	; 0x30
 80078ce:	d818      	bhi.n	8007902 <UART_SetConfig+0x1ba>
 80078d0:	2b20      	cmp	r3, #32
 80078d2:	d00a      	beq.n	80078ea <UART_SetConfig+0x1a2>
 80078d4:	2b20      	cmp	r3, #32
 80078d6:	d814      	bhi.n	8007902 <UART_SetConfig+0x1ba>
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d002      	beq.n	80078e2 <UART_SetConfig+0x19a>
 80078dc:	2b10      	cmp	r3, #16
 80078de:	d008      	beq.n	80078f2 <UART_SetConfig+0x1aa>
 80078e0:	e00f      	b.n	8007902 <UART_SetConfig+0x1ba>
 80078e2:	2300      	movs	r3, #0
 80078e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078e8:	e0ad      	b.n	8007a46 <UART_SetConfig+0x2fe>
 80078ea:	2302      	movs	r3, #2
 80078ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078f0:	e0a9      	b.n	8007a46 <UART_SetConfig+0x2fe>
 80078f2:	2304      	movs	r3, #4
 80078f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078f8:	e0a5      	b.n	8007a46 <UART_SetConfig+0x2fe>
 80078fa:	2308      	movs	r3, #8
 80078fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007900:	e0a1      	b.n	8007a46 <UART_SetConfig+0x2fe>
 8007902:	2310      	movs	r3, #16
 8007904:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007908:	e09d      	b.n	8007a46 <UART_SetConfig+0x2fe>
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a4a      	ldr	r2, [pc, #296]	; (8007a38 <UART_SetConfig+0x2f0>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d125      	bne.n	8007960 <UART_SetConfig+0x218>
 8007914:	4b45      	ldr	r3, [pc, #276]	; (8007a2c <UART_SetConfig+0x2e4>)
 8007916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800791a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800791e:	2bc0      	cmp	r3, #192	; 0xc0
 8007920:	d016      	beq.n	8007950 <UART_SetConfig+0x208>
 8007922:	2bc0      	cmp	r3, #192	; 0xc0
 8007924:	d818      	bhi.n	8007958 <UART_SetConfig+0x210>
 8007926:	2b80      	cmp	r3, #128	; 0x80
 8007928:	d00a      	beq.n	8007940 <UART_SetConfig+0x1f8>
 800792a:	2b80      	cmp	r3, #128	; 0x80
 800792c:	d814      	bhi.n	8007958 <UART_SetConfig+0x210>
 800792e:	2b00      	cmp	r3, #0
 8007930:	d002      	beq.n	8007938 <UART_SetConfig+0x1f0>
 8007932:	2b40      	cmp	r3, #64	; 0x40
 8007934:	d008      	beq.n	8007948 <UART_SetConfig+0x200>
 8007936:	e00f      	b.n	8007958 <UART_SetConfig+0x210>
 8007938:	2300      	movs	r3, #0
 800793a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800793e:	e082      	b.n	8007a46 <UART_SetConfig+0x2fe>
 8007940:	2302      	movs	r3, #2
 8007942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007946:	e07e      	b.n	8007a46 <UART_SetConfig+0x2fe>
 8007948:	2304      	movs	r3, #4
 800794a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800794e:	e07a      	b.n	8007a46 <UART_SetConfig+0x2fe>
 8007950:	2308      	movs	r3, #8
 8007952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007956:	e076      	b.n	8007a46 <UART_SetConfig+0x2fe>
 8007958:	2310      	movs	r3, #16
 800795a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800795e:	e072      	b.n	8007a46 <UART_SetConfig+0x2fe>
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a35      	ldr	r2, [pc, #212]	; (8007a3c <UART_SetConfig+0x2f4>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d12a      	bne.n	80079c0 <UART_SetConfig+0x278>
 800796a:	4b30      	ldr	r3, [pc, #192]	; (8007a2c <UART_SetConfig+0x2e4>)
 800796c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007970:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007974:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007978:	d01a      	beq.n	80079b0 <UART_SetConfig+0x268>
 800797a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800797e:	d81b      	bhi.n	80079b8 <UART_SetConfig+0x270>
 8007980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007984:	d00c      	beq.n	80079a0 <UART_SetConfig+0x258>
 8007986:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800798a:	d815      	bhi.n	80079b8 <UART_SetConfig+0x270>
 800798c:	2b00      	cmp	r3, #0
 800798e:	d003      	beq.n	8007998 <UART_SetConfig+0x250>
 8007990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007994:	d008      	beq.n	80079a8 <UART_SetConfig+0x260>
 8007996:	e00f      	b.n	80079b8 <UART_SetConfig+0x270>
 8007998:	2300      	movs	r3, #0
 800799a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800799e:	e052      	b.n	8007a46 <UART_SetConfig+0x2fe>
 80079a0:	2302      	movs	r3, #2
 80079a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079a6:	e04e      	b.n	8007a46 <UART_SetConfig+0x2fe>
 80079a8:	2304      	movs	r3, #4
 80079aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079ae:	e04a      	b.n	8007a46 <UART_SetConfig+0x2fe>
 80079b0:	2308      	movs	r3, #8
 80079b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079b6:	e046      	b.n	8007a46 <UART_SetConfig+0x2fe>
 80079b8:	2310      	movs	r3, #16
 80079ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079be:	e042      	b.n	8007a46 <UART_SetConfig+0x2fe>
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a17      	ldr	r2, [pc, #92]	; (8007a24 <UART_SetConfig+0x2dc>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d13a      	bne.n	8007a40 <UART_SetConfig+0x2f8>
 80079ca:	4b18      	ldr	r3, [pc, #96]	; (8007a2c <UART_SetConfig+0x2e4>)
 80079cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80079d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079d8:	d01a      	beq.n	8007a10 <UART_SetConfig+0x2c8>
 80079da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079de:	d81b      	bhi.n	8007a18 <UART_SetConfig+0x2d0>
 80079e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079e4:	d00c      	beq.n	8007a00 <UART_SetConfig+0x2b8>
 80079e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079ea:	d815      	bhi.n	8007a18 <UART_SetConfig+0x2d0>
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d003      	beq.n	80079f8 <UART_SetConfig+0x2b0>
 80079f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079f4:	d008      	beq.n	8007a08 <UART_SetConfig+0x2c0>
 80079f6:	e00f      	b.n	8007a18 <UART_SetConfig+0x2d0>
 80079f8:	2300      	movs	r3, #0
 80079fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079fe:	e022      	b.n	8007a46 <UART_SetConfig+0x2fe>
 8007a00:	2302      	movs	r3, #2
 8007a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a06:	e01e      	b.n	8007a46 <UART_SetConfig+0x2fe>
 8007a08:	2304      	movs	r3, #4
 8007a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a0e:	e01a      	b.n	8007a46 <UART_SetConfig+0x2fe>
 8007a10:	2308      	movs	r3, #8
 8007a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a16:	e016      	b.n	8007a46 <UART_SetConfig+0x2fe>
 8007a18:	2310      	movs	r3, #16
 8007a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a1e:	e012      	b.n	8007a46 <UART_SetConfig+0x2fe>
 8007a20:	cfff69f3 	.word	0xcfff69f3
 8007a24:	40008000 	.word	0x40008000
 8007a28:	40013800 	.word	0x40013800
 8007a2c:	40021000 	.word	0x40021000
 8007a30:	40004400 	.word	0x40004400
 8007a34:	40004800 	.word	0x40004800
 8007a38:	40004c00 	.word	0x40004c00
 8007a3c:	40005000 	.word	0x40005000
 8007a40:	2310      	movs	r3, #16
 8007a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4aae      	ldr	r2, [pc, #696]	; (8007d04 <UART_SetConfig+0x5bc>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	f040 8097 	bne.w	8007b80 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007a56:	2b08      	cmp	r3, #8
 8007a58:	d823      	bhi.n	8007aa2 <UART_SetConfig+0x35a>
 8007a5a:	a201      	add	r2, pc, #4	; (adr r2, 8007a60 <UART_SetConfig+0x318>)
 8007a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a60:	08007a85 	.word	0x08007a85
 8007a64:	08007aa3 	.word	0x08007aa3
 8007a68:	08007a8d 	.word	0x08007a8d
 8007a6c:	08007aa3 	.word	0x08007aa3
 8007a70:	08007a93 	.word	0x08007a93
 8007a74:	08007aa3 	.word	0x08007aa3
 8007a78:	08007aa3 	.word	0x08007aa3
 8007a7c:	08007aa3 	.word	0x08007aa3
 8007a80:	08007a9b 	.word	0x08007a9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a84:	f7fd f970 	bl	8004d68 <HAL_RCC_GetPCLK1Freq>
 8007a88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a8a:	e010      	b.n	8007aae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a8c:	4b9e      	ldr	r3, [pc, #632]	; (8007d08 <UART_SetConfig+0x5c0>)
 8007a8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007a90:	e00d      	b.n	8007aae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a92:	f7fd f8fb 	bl	8004c8c <HAL_RCC_GetSysClockFreq>
 8007a96:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a98:	e009      	b.n	8007aae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007aa0:	e005      	b.n	8007aae <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007aac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f000 8130 	beq.w	8007d16 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aba:	4a94      	ldr	r2, [pc, #592]	; (8007d0c <UART_SetConfig+0x5c4>)
 8007abc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ac8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	685a      	ldr	r2, [r3, #4]
 8007ace:	4613      	mov	r3, r2
 8007ad0:	005b      	lsls	r3, r3, #1
 8007ad2:	4413      	add	r3, r2
 8007ad4:	69ba      	ldr	r2, [r7, #24]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d305      	bcc.n	8007ae6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ae0:	69ba      	ldr	r2, [r7, #24]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d903      	bls.n	8007aee <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007aec:	e113      	b.n	8007d16 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af0:	2200      	movs	r2, #0
 8007af2:	60bb      	str	r3, [r7, #8]
 8007af4:	60fa      	str	r2, [r7, #12]
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afa:	4a84      	ldr	r2, [pc, #528]	; (8007d0c <UART_SetConfig+0x5c4>)
 8007afc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	2200      	movs	r2, #0
 8007b04:	603b      	str	r3, [r7, #0]
 8007b06:	607a      	str	r2, [r7, #4]
 8007b08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b10:	f7f9 f8d2 	bl	8000cb8 <__aeabi_uldivmod>
 8007b14:	4602      	mov	r2, r0
 8007b16:	460b      	mov	r3, r1
 8007b18:	4610      	mov	r0, r2
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	f04f 0200 	mov.w	r2, #0
 8007b20:	f04f 0300 	mov.w	r3, #0
 8007b24:	020b      	lsls	r3, r1, #8
 8007b26:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b2a:	0202      	lsls	r2, r0, #8
 8007b2c:	6979      	ldr	r1, [r7, #20]
 8007b2e:	6849      	ldr	r1, [r1, #4]
 8007b30:	0849      	lsrs	r1, r1, #1
 8007b32:	2000      	movs	r0, #0
 8007b34:	460c      	mov	r4, r1
 8007b36:	4605      	mov	r5, r0
 8007b38:	eb12 0804 	adds.w	r8, r2, r4
 8007b3c:	eb43 0905 	adc.w	r9, r3, r5
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	469a      	mov	sl, r3
 8007b48:	4693      	mov	fp, r2
 8007b4a:	4652      	mov	r2, sl
 8007b4c:	465b      	mov	r3, fp
 8007b4e:	4640      	mov	r0, r8
 8007b50:	4649      	mov	r1, r9
 8007b52:	f7f9 f8b1 	bl	8000cb8 <__aeabi_uldivmod>
 8007b56:	4602      	mov	r2, r0
 8007b58:	460b      	mov	r3, r1
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b5e:	6a3b      	ldr	r3, [r7, #32]
 8007b60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b64:	d308      	bcc.n	8007b78 <UART_SetConfig+0x430>
 8007b66:	6a3b      	ldr	r3, [r7, #32]
 8007b68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b6c:	d204      	bcs.n	8007b78 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	6a3a      	ldr	r2, [r7, #32]
 8007b74:	60da      	str	r2, [r3, #12]
 8007b76:	e0ce      	b.n	8007d16 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007b7e:	e0ca      	b.n	8007d16 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	69db      	ldr	r3, [r3, #28]
 8007b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b88:	d166      	bne.n	8007c58 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007b8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007b8e:	2b08      	cmp	r3, #8
 8007b90:	d827      	bhi.n	8007be2 <UART_SetConfig+0x49a>
 8007b92:	a201      	add	r2, pc, #4	; (adr r2, 8007b98 <UART_SetConfig+0x450>)
 8007b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b98:	08007bbd 	.word	0x08007bbd
 8007b9c:	08007bc5 	.word	0x08007bc5
 8007ba0:	08007bcd 	.word	0x08007bcd
 8007ba4:	08007be3 	.word	0x08007be3
 8007ba8:	08007bd3 	.word	0x08007bd3
 8007bac:	08007be3 	.word	0x08007be3
 8007bb0:	08007be3 	.word	0x08007be3
 8007bb4:	08007be3 	.word	0x08007be3
 8007bb8:	08007bdb 	.word	0x08007bdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bbc:	f7fd f8d4 	bl	8004d68 <HAL_RCC_GetPCLK1Freq>
 8007bc0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007bc2:	e014      	b.n	8007bee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bc4:	f7fd f8e6 	bl	8004d94 <HAL_RCC_GetPCLK2Freq>
 8007bc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007bca:	e010      	b.n	8007bee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bcc:	4b4e      	ldr	r3, [pc, #312]	; (8007d08 <UART_SetConfig+0x5c0>)
 8007bce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007bd0:	e00d      	b.n	8007bee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bd2:	f7fd f85b 	bl	8004c8c <HAL_RCC_GetSysClockFreq>
 8007bd6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007bd8:	e009      	b.n	8007bee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007be0:	e005      	b.n	8007bee <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007be2:	2300      	movs	r3, #0
 8007be4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007bec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f000 8090 	beq.w	8007d16 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfa:	4a44      	ldr	r2, [pc, #272]	; (8007d0c <UART_SetConfig+0x5c4>)
 8007bfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c00:	461a      	mov	r2, r3
 8007c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c04:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c08:	005a      	lsls	r2, r3, #1
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	085b      	lsrs	r3, r3, #1
 8007c10:	441a      	add	r2, r3
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c1a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c1c:	6a3b      	ldr	r3, [r7, #32]
 8007c1e:	2b0f      	cmp	r3, #15
 8007c20:	d916      	bls.n	8007c50 <UART_SetConfig+0x508>
 8007c22:	6a3b      	ldr	r3, [r7, #32]
 8007c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c28:	d212      	bcs.n	8007c50 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c2a:	6a3b      	ldr	r3, [r7, #32]
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	f023 030f 	bic.w	r3, r3, #15
 8007c32:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	085b      	lsrs	r3, r3, #1
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	f003 0307 	and.w	r3, r3, #7
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	8bfb      	ldrh	r3, [r7, #30]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	8bfa      	ldrh	r2, [r7, #30]
 8007c4c:	60da      	str	r2, [r3, #12]
 8007c4e:	e062      	b.n	8007d16 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007c56:	e05e      	b.n	8007d16 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007c5c:	2b08      	cmp	r3, #8
 8007c5e:	d828      	bhi.n	8007cb2 <UART_SetConfig+0x56a>
 8007c60:	a201      	add	r2, pc, #4	; (adr r2, 8007c68 <UART_SetConfig+0x520>)
 8007c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c66:	bf00      	nop
 8007c68:	08007c8d 	.word	0x08007c8d
 8007c6c:	08007c95 	.word	0x08007c95
 8007c70:	08007c9d 	.word	0x08007c9d
 8007c74:	08007cb3 	.word	0x08007cb3
 8007c78:	08007ca3 	.word	0x08007ca3
 8007c7c:	08007cb3 	.word	0x08007cb3
 8007c80:	08007cb3 	.word	0x08007cb3
 8007c84:	08007cb3 	.word	0x08007cb3
 8007c88:	08007cab 	.word	0x08007cab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c8c:	f7fd f86c 	bl	8004d68 <HAL_RCC_GetPCLK1Freq>
 8007c90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007c92:	e014      	b.n	8007cbe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c94:	f7fd f87e 	bl	8004d94 <HAL_RCC_GetPCLK2Freq>
 8007c98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007c9a:	e010      	b.n	8007cbe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c9c:	4b1a      	ldr	r3, [pc, #104]	; (8007d08 <UART_SetConfig+0x5c0>)
 8007c9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ca0:	e00d      	b.n	8007cbe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ca2:	f7fc fff3 	bl	8004c8c <HAL_RCC_GetSysClockFreq>
 8007ca6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ca8:	e009      	b.n	8007cbe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007cb0:	e005      	b.n	8007cbe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007cbc:	bf00      	nop
    }

    if (pclk != 0U)
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d028      	beq.n	8007d16 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc8:	4a10      	ldr	r2, [pc, #64]	; (8007d0c <UART_SetConfig+0x5c4>)
 8007cca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cce:	461a      	mov	r2, r3
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd2:	fbb3 f2f2 	udiv	r2, r3, r2
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	085b      	lsrs	r3, r3, #1
 8007cdc:	441a      	add	r2, r3
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ce6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ce8:	6a3b      	ldr	r3, [r7, #32]
 8007cea:	2b0f      	cmp	r3, #15
 8007cec:	d910      	bls.n	8007d10 <UART_SetConfig+0x5c8>
 8007cee:	6a3b      	ldr	r3, [r7, #32]
 8007cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cf4:	d20c      	bcs.n	8007d10 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007cf6:	6a3b      	ldr	r3, [r7, #32]
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	60da      	str	r2, [r3, #12]
 8007d00:	e009      	b.n	8007d16 <UART_SetConfig+0x5ce>
 8007d02:	bf00      	nop
 8007d04:	40008000 	.word	0x40008000
 8007d08:	00f42400 	.word	0x00f42400
 8007d0c:	0800bf14 	.word	0x0800bf14
      }
      else
      {
        ret = HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	2201      	movs	r2, #1
 8007d22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007d32:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3730      	adds	r7, #48	; 0x30
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007d40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d4c:	f003 0301 	and.w	r3, r3, #1
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00a      	beq.n	8007d6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	430a      	orrs	r2, r1
 8007d68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6e:	f003 0302 	and.w	r3, r3, #2
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00a      	beq.n	8007d8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	430a      	orrs	r2, r1
 8007d8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d90:	f003 0304 	and.w	r3, r3, #4
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00a      	beq.n	8007dae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	430a      	orrs	r2, r1
 8007dac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db2:	f003 0308 	and.w	r3, r3, #8
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00a      	beq.n	8007dd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	430a      	orrs	r2, r1
 8007dce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd4:	f003 0310 	and.w	r3, r3, #16
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d00a      	beq.n	8007df2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	430a      	orrs	r2, r1
 8007df0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df6:	f003 0320 	and.w	r3, r3, #32
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00a      	beq.n	8007e14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	430a      	orrs	r2, r1
 8007e12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d01a      	beq.n	8007e56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	430a      	orrs	r2, r1
 8007e34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e3e:	d10a      	bne.n	8007e56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	430a      	orrs	r2, r1
 8007e54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00a      	beq.n	8007e78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	430a      	orrs	r2, r1
 8007e76:	605a      	str	r2, [r3, #4]
  }
}
 8007e78:	bf00      	nop
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b086      	sub	sp, #24
 8007e88:	af02      	add	r7, sp, #8
 8007e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e94:	f7fa fae0 	bl	8002458 <HAL_GetTick>
 8007e98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 0308 	and.w	r3, r3, #8
 8007ea4:	2b08      	cmp	r3, #8
 8007ea6:	d10e      	bne.n	8007ec6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ea8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f82f 	bl	8007f1a <UART_WaitOnFlagUntilTimeout>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d001      	beq.n	8007ec6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e025      	b.n	8007f12 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0304 	and.w	r3, r3, #4
 8007ed0:	2b04      	cmp	r3, #4
 8007ed2:	d10e      	bne.n	8007ef2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ed4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f819 	bl	8007f1a <UART_WaitOnFlagUntilTimeout>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d001      	beq.n	8007ef2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e00f      	b.n	8007f12 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2220      	movs	r2, #32
 8007ef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2220      	movs	r2, #32
 8007efe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b09c      	sub	sp, #112	; 0x70
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	60f8      	str	r0, [r7, #12]
 8007f22:	60b9      	str	r1, [r7, #8]
 8007f24:	603b      	str	r3, [r7, #0]
 8007f26:	4613      	mov	r3, r2
 8007f28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f2a:	e0a9      	b.n	8008080 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f32:	f000 80a5 	beq.w	8008080 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f36:	f7fa fa8f 	bl	8002458 <HAL_GetTick>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	1ad3      	subs	r3, r2, r3
 8007f40:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d302      	bcc.n	8007f4c <UART_WaitOnFlagUntilTimeout+0x32>
 8007f46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d140      	bne.n	8007fce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f54:	e853 3f00 	ldrex	r3, [r3]
 8007f58:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f60:	667b      	str	r3, [r7, #100]	; 0x64
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	461a      	mov	r2, r3
 8007f68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f6c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f72:	e841 2300 	strex	r3, r2, [r1]
 8007f76:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007f78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1e6      	bne.n	8007f4c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	3308      	adds	r3, #8
 8007f84:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f88:	e853 3f00 	ldrex	r3, [r3]
 8007f8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f90:	f023 0301 	bic.w	r3, r3, #1
 8007f94:	663b      	str	r3, [r7, #96]	; 0x60
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	3308      	adds	r3, #8
 8007f9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f9e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007fa0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007fa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fa6:	e841 2300 	strex	r3, r2, [r1]
 8007faa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d1e5      	bne.n	8007f7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2220      	movs	r2, #32
 8007fb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2220      	movs	r2, #32
 8007fbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	e069      	b.n	80080a2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 0304 	and.w	r3, r3, #4
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d051      	beq.n	8008080 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	69db      	ldr	r3, [r3, #28]
 8007fe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fe6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fea:	d149      	bne.n	8008080 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ff4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffe:	e853 3f00 	ldrex	r3, [r3]
 8008002:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008006:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800800a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	461a      	mov	r2, r3
 8008012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008014:	637b      	str	r3, [r7, #52]	; 0x34
 8008016:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008018:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800801a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800801c:	e841 2300 	strex	r3, r2, [r1]
 8008020:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1e6      	bne.n	8007ff6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	3308      	adds	r3, #8
 800802e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	e853 3f00 	ldrex	r3, [r3]
 8008036:	613b      	str	r3, [r7, #16]
   return(result);
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	f023 0301 	bic.w	r3, r3, #1
 800803e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	3308      	adds	r3, #8
 8008046:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008048:	623a      	str	r2, [r7, #32]
 800804a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804c:	69f9      	ldr	r1, [r7, #28]
 800804e:	6a3a      	ldr	r2, [r7, #32]
 8008050:	e841 2300 	strex	r3, r2, [r1]
 8008054:	61bb      	str	r3, [r7, #24]
   return(result);
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d1e5      	bne.n	8008028 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2220      	movs	r2, #32
 8008060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2220      	movs	r2, #32
 8008068:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2220      	movs	r2, #32
 8008070:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2200      	movs	r2, #0
 8008078:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800807c:	2303      	movs	r3, #3
 800807e:	e010      	b.n	80080a2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	69da      	ldr	r2, [r3, #28]
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	4013      	ands	r3, r2
 800808a:	68ba      	ldr	r2, [r7, #8]
 800808c:	429a      	cmp	r2, r3
 800808e:	bf0c      	ite	eq
 8008090:	2301      	moveq	r3, #1
 8008092:	2300      	movne	r3, #0
 8008094:	b2db      	uxtb	r3, r3
 8008096:	461a      	mov	r2, r3
 8008098:	79fb      	ldrb	r3, [r7, #7]
 800809a:	429a      	cmp	r2, r3
 800809c:	f43f af46 	beq.w	8007f2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3770      	adds	r7, #112	; 0x70
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
	...

080080ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b0a3      	sub	sp, #140	; 0x8c
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	4613      	mov	r3, r2
 80080b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	88fa      	ldrh	r2, [r7, #6]
 80080c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	88fa      	ldrh	r2, [r7, #6]
 80080cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2200      	movs	r2, #0
 80080d4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080de:	d10e      	bne.n	80080fe <UART_Start_Receive_IT+0x52>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d105      	bne.n	80080f4 <UART_Start_Receive_IT+0x48>
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f240 12ff 	movw	r2, #511	; 0x1ff
 80080ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80080f2:	e02d      	b.n	8008150 <UART_Start_Receive_IT+0xa4>
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	22ff      	movs	r2, #255	; 0xff
 80080f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80080fc:	e028      	b.n	8008150 <UART_Start_Receive_IT+0xa4>
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10d      	bne.n	8008122 <UART_Start_Receive_IT+0x76>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d104      	bne.n	8008118 <UART_Start_Receive_IT+0x6c>
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	22ff      	movs	r2, #255	; 0xff
 8008112:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008116:	e01b      	b.n	8008150 <UART_Start_Receive_IT+0xa4>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	227f      	movs	r2, #127	; 0x7f
 800811c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008120:	e016      	b.n	8008150 <UART_Start_Receive_IT+0xa4>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800812a:	d10d      	bne.n	8008148 <UART_Start_Receive_IT+0x9c>
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d104      	bne.n	800813e <UART_Start_Receive_IT+0x92>
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	227f      	movs	r2, #127	; 0x7f
 8008138:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800813c:	e008      	b.n	8008150 <UART_Start_Receive_IT+0xa4>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	223f      	movs	r2, #63	; 0x3f
 8008142:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008146:	e003      	b.n	8008150 <UART_Start_Receive_IT+0xa4>
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2200      	movs	r2, #0
 800814c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2200      	movs	r2, #0
 8008154:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2222      	movs	r2, #34	; 0x22
 800815c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	3308      	adds	r3, #8
 8008166:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008168:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800816a:	e853 3f00 	ldrex	r3, [r3]
 800816e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008170:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008172:	f043 0301 	orr.w	r3, r3, #1
 8008176:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	3308      	adds	r3, #8
 8008180:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008184:	673a      	str	r2, [r7, #112]	; 0x70
 8008186:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008188:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800818a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800818c:	e841 2300 	strex	r3, r2, [r1]
 8008190:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008192:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008194:	2b00      	cmp	r3, #0
 8008196:	d1e3      	bne.n	8008160 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800819c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081a0:	d153      	bne.n	800824a <UART_Start_Receive_IT+0x19e>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80081a8:	88fa      	ldrh	r2, [r7, #6]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d34d      	bcc.n	800824a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081b6:	d107      	bne.n	80081c8 <UART_Start_Receive_IT+0x11c>
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	691b      	ldr	r3, [r3, #16]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d103      	bne.n	80081c8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	4a4b      	ldr	r2, [pc, #300]	; (80082f0 <UART_Start_Receive_IT+0x244>)
 80081c4:	671a      	str	r2, [r3, #112]	; 0x70
 80081c6:	e002      	b.n	80081ce <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	4a4a      	ldr	r2, [pc, #296]	; (80082f4 <UART_Start_Receive_IT+0x248>)
 80081cc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d01a      	beq.n	8008214 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081e6:	e853 3f00 	ldrex	r3, [r3]
 80081ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80081ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	461a      	mov	r2, r3
 80081fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008200:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008202:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008204:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008206:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008208:	e841 2300 	strex	r3, r2, [r1]
 800820c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800820e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008210:	2b00      	cmp	r3, #0
 8008212:	d1e4      	bne.n	80081de <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	3308      	adds	r3, #8
 800821a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800821e:	e853 3f00 	ldrex	r3, [r3]
 8008222:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800822a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	3308      	adds	r3, #8
 8008232:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008234:	64ba      	str	r2, [r7, #72]	; 0x48
 8008236:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008238:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800823a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800823c:	e841 2300 	strex	r3, r2, [r1]
 8008240:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008244:	2b00      	cmp	r3, #0
 8008246:	d1e5      	bne.n	8008214 <UART_Start_Receive_IT+0x168>
 8008248:	e04a      	b.n	80082e0 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008252:	d107      	bne.n	8008264 <UART_Start_Receive_IT+0x1b8>
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	691b      	ldr	r3, [r3, #16]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d103      	bne.n	8008264 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	4a26      	ldr	r2, [pc, #152]	; (80082f8 <UART_Start_Receive_IT+0x24c>)
 8008260:	671a      	str	r2, [r3, #112]	; 0x70
 8008262:	e002      	b.n	800826a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	4a25      	ldr	r2, [pc, #148]	; (80082fc <UART_Start_Receive_IT+0x250>)
 8008268:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2200      	movs	r2, #0
 800826e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d019      	beq.n	80082ae <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008282:	e853 3f00 	ldrex	r3, [r3]
 8008286:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800828e:	677b      	str	r3, [r7, #116]	; 0x74
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	461a      	mov	r2, r3
 8008296:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008298:	637b      	str	r3, [r7, #52]	; 0x34
 800829a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800829e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082a0:	e841 2300 	strex	r3, r2, [r1]
 80082a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80082a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1e6      	bne.n	800827a <UART_Start_Receive_IT+0x1ce>
 80082ac:	e018      	b.n	80082e0 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	e853 3f00 	ldrex	r3, [r3]
 80082ba:	613b      	str	r3, [r7, #16]
   return(result);
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	f043 0320 	orr.w	r3, r3, #32
 80082c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	461a      	mov	r2, r3
 80082ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082cc:	623b      	str	r3, [r7, #32]
 80082ce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d0:	69f9      	ldr	r1, [r7, #28]
 80082d2:	6a3a      	ldr	r2, [r7, #32]
 80082d4:	e841 2300 	strex	r3, r2, [r1]
 80082d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1e6      	bne.n	80082ae <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	378c      	adds	r7, #140	; 0x8c
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop
 80082f0:	08008a09 	.word	0x08008a09
 80082f4:	08008711 	.word	0x08008711
 80082f8:	080085af 	.word	0x080085af
 80082fc:	0800844f 	.word	0x0800844f

08008300 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008300:	b480      	push	{r7}
 8008302:	b095      	sub	sp, #84	; 0x54
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008310:	e853 3f00 	ldrex	r3, [r3]
 8008314:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008318:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800831c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	461a      	mov	r2, r3
 8008324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008326:	643b      	str	r3, [r7, #64]	; 0x40
 8008328:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800832c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800832e:	e841 2300 	strex	r3, r2, [r1]
 8008332:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008336:	2b00      	cmp	r3, #0
 8008338:	d1e6      	bne.n	8008308 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	3308      	adds	r3, #8
 8008340:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008342:	6a3b      	ldr	r3, [r7, #32]
 8008344:	e853 3f00 	ldrex	r3, [r3]
 8008348:	61fb      	str	r3, [r7, #28]
   return(result);
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008350:	f023 0301 	bic.w	r3, r3, #1
 8008354:	64bb      	str	r3, [r7, #72]	; 0x48
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	3308      	adds	r3, #8
 800835c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800835e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008360:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008362:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008366:	e841 2300 	strex	r3, r2, [r1]
 800836a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800836c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1e3      	bne.n	800833a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008376:	2b01      	cmp	r3, #1
 8008378:	d118      	bne.n	80083ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	e853 3f00 	ldrex	r3, [r3]
 8008386:	60bb      	str	r3, [r7, #8]
   return(result);
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	f023 0310 	bic.w	r3, r3, #16
 800838e:	647b      	str	r3, [r7, #68]	; 0x44
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	461a      	mov	r2, r3
 8008396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008398:	61bb      	str	r3, [r7, #24]
 800839a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839c:	6979      	ldr	r1, [r7, #20]
 800839e:	69ba      	ldr	r2, [r7, #24]
 80083a0:	e841 2300 	strex	r3, r2, [r1]
 80083a4:	613b      	str	r3, [r7, #16]
   return(result);
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d1e6      	bne.n	800837a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2220      	movs	r2, #32
 80083b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	671a      	str	r2, [r3, #112]	; 0x70
}
 80083c0:	bf00      	nop
 80083c2:	3754      	adds	r7, #84	; 0x54
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2200      	movs	r2, #0
 80083de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f7ff f996 	bl	800771c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083f0:	bf00      	nop
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b088      	sub	sp, #32
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	e853 3f00 	ldrex	r3, [r3]
 800840c:	60bb      	str	r3, [r7, #8]
   return(result);
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008414:	61fb      	str	r3, [r7, #28]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	461a      	mov	r2, r3
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	61bb      	str	r3, [r7, #24]
 8008420:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008422:	6979      	ldr	r1, [r7, #20]
 8008424:	69ba      	ldr	r2, [r7, #24]
 8008426:	e841 2300 	strex	r3, r2, [r1]
 800842a:	613b      	str	r3, [r7, #16]
   return(result);
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1e6      	bne.n	8008400 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2220      	movs	r2, #32
 8008436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f7ff f961 	bl	8007708 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008446:	bf00      	nop
 8008448:	3720      	adds	r7, #32
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b096      	sub	sp, #88	; 0x58
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800845c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008466:	2b22      	cmp	r3, #34	; 0x22
 8008468:	f040 8095 	bne.w	8008596 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008472:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008476:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800847a:	b2d9      	uxtb	r1, r3
 800847c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008480:	b2da      	uxtb	r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008486:	400a      	ands	r2, r1
 8008488:	b2d2      	uxtb	r2, r2
 800848a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008490:	1c5a      	adds	r2, r3, #1
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800849c:	b29b      	uxth	r3, r3
 800849e:	3b01      	subs	r3, #1
 80084a0:	b29a      	uxth	r2, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d178      	bne.n	80085a6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084bc:	e853 3f00 	ldrex	r3, [r3]
 80084c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084c8:	653b      	str	r3, [r7, #80]	; 0x50
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	461a      	mov	r2, r3
 80084d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084d2:	647b      	str	r3, [r7, #68]	; 0x44
 80084d4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80084d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084da:	e841 2300 	strex	r3, r2, [r1]
 80084de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80084e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d1e6      	bne.n	80084b4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	3308      	adds	r3, #8
 80084ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f0:	e853 3f00 	ldrex	r3, [r3]
 80084f4:	623b      	str	r3, [r7, #32]
   return(result);
 80084f6:	6a3b      	ldr	r3, [r7, #32]
 80084f8:	f023 0301 	bic.w	r3, r3, #1
 80084fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	3308      	adds	r3, #8
 8008504:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008506:	633a      	str	r2, [r7, #48]	; 0x30
 8008508:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800850c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800850e:	e841 2300 	strex	r3, r2, [r1]
 8008512:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1e5      	bne.n	80084e6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2220      	movs	r2, #32
 800851e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800852c:	2b01      	cmp	r3, #1
 800852e:	d12e      	bne.n	800858e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	e853 3f00 	ldrex	r3, [r3]
 8008542:	60fb      	str	r3, [r7, #12]
   return(result);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f023 0310 	bic.w	r3, r3, #16
 800854a:	64bb      	str	r3, [r7, #72]	; 0x48
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	461a      	mov	r2, r3
 8008552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008554:	61fb      	str	r3, [r7, #28]
 8008556:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008558:	69b9      	ldr	r1, [r7, #24]
 800855a:	69fa      	ldr	r2, [r7, #28]
 800855c:	e841 2300 	strex	r3, r2, [r1]
 8008560:	617b      	str	r3, [r7, #20]
   return(result);
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d1e6      	bne.n	8008536 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	69db      	ldr	r3, [r3, #28]
 800856e:	f003 0310 	and.w	r3, r3, #16
 8008572:	2b10      	cmp	r3, #16
 8008574:	d103      	bne.n	800857e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2210      	movs	r2, #16
 800857c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008584:	4619      	mov	r1, r3
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f7ff f8d2 	bl	8007730 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800858c:	e00b      	b.n	80085a6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f7f9 fef8 	bl	8002384 <HAL_UART_RxCpltCallback>
}
 8008594:	e007      	b.n	80085a6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	699a      	ldr	r2, [r3, #24]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f042 0208 	orr.w	r2, r2, #8
 80085a4:	619a      	str	r2, [r3, #24]
}
 80085a6:	bf00      	nop
 80085a8:	3758      	adds	r7, #88	; 0x58
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b096      	sub	sp, #88	; 0x58
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80085bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085c6:	2b22      	cmp	r3, #34	; 0x22
 80085c8:	f040 8095 	bne.w	80086f6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085da:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80085dc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80085e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80085e4:	4013      	ands	r3, r2
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085ea:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085f0:	1c9a      	adds	r2, r3, #2
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	3b01      	subs	r3, #1
 8008600:	b29a      	uxth	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800860e:	b29b      	uxth	r3, r3
 8008610:	2b00      	cmp	r3, #0
 8008612:	d178      	bne.n	8008706 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800861c:	e853 3f00 	ldrex	r3, [r3]
 8008620:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008624:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008628:	64fb      	str	r3, [r7, #76]	; 0x4c
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	461a      	mov	r2, r3
 8008630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008632:	643b      	str	r3, [r7, #64]	; 0x40
 8008634:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008636:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008638:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800863a:	e841 2300 	strex	r3, r2, [r1]
 800863e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008642:	2b00      	cmp	r3, #0
 8008644:	d1e6      	bne.n	8008614 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	3308      	adds	r3, #8
 800864c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864e:	6a3b      	ldr	r3, [r7, #32]
 8008650:	e853 3f00 	ldrex	r3, [r3]
 8008654:	61fb      	str	r3, [r7, #28]
   return(result);
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	f023 0301 	bic.w	r3, r3, #1
 800865c:	64bb      	str	r3, [r7, #72]	; 0x48
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	3308      	adds	r3, #8
 8008664:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008666:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008668:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800866c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800866e:	e841 2300 	strex	r3, r2, [r1]
 8008672:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008676:	2b00      	cmp	r3, #0
 8008678:	d1e5      	bne.n	8008646 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2220      	movs	r2, #32
 800867e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800868c:	2b01      	cmp	r3, #1
 800868e:	d12e      	bne.n	80086ee <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	e853 3f00 	ldrex	r3, [r3]
 80086a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	f023 0310 	bic.w	r3, r3, #16
 80086aa:	647b      	str	r3, [r7, #68]	; 0x44
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	461a      	mov	r2, r3
 80086b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086b4:	61bb      	str	r3, [r7, #24]
 80086b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b8:	6979      	ldr	r1, [r7, #20]
 80086ba:	69ba      	ldr	r2, [r7, #24]
 80086bc:	e841 2300 	strex	r3, r2, [r1]
 80086c0:	613b      	str	r3, [r7, #16]
   return(result);
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d1e6      	bne.n	8008696 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	69db      	ldr	r3, [r3, #28]
 80086ce:	f003 0310 	and.w	r3, r3, #16
 80086d2:	2b10      	cmp	r3, #16
 80086d4:	d103      	bne.n	80086de <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2210      	movs	r2, #16
 80086dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80086e4:	4619      	mov	r1, r3
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f7ff f822 	bl	8007730 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80086ec:	e00b      	b.n	8008706 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f7f9 fe48 	bl	8002384 <HAL_UART_RxCpltCallback>
}
 80086f4:	e007      	b.n	8008706 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	699a      	ldr	r2, [r3, #24]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f042 0208 	orr.w	r2, r2, #8
 8008704:	619a      	str	r2, [r3, #24]
}
 8008706:	bf00      	nop
 8008708:	3758      	adds	r7, #88	; 0x58
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
	...

08008710 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b0a6      	sub	sp, #152	; 0x98
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800871e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	69db      	ldr	r3, [r3, #28]
 8008728:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008746:	2b22      	cmp	r3, #34	; 0x22
 8008748:	f040 814f 	bne.w	80089ea <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008752:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008756:	e0f6      	b.n	8008946 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008762:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8008766:	b2d9      	uxtb	r1, r3
 8008768:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800876c:	b2da      	uxtb	r2, r3
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008772:	400a      	ands	r2, r1
 8008774:	b2d2      	uxtb	r2, r2
 8008776:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800877c:	1c5a      	adds	r2, r3, #1
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008788:	b29b      	uxth	r3, r3
 800878a:	3b01      	subs	r3, #1
 800878c:	b29a      	uxth	r2, r3
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	69db      	ldr	r3, [r3, #28]
 800879a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800879e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80087a2:	f003 0307 	and.w	r3, r3, #7
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d053      	beq.n	8008852 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80087aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80087ae:	f003 0301 	and.w	r3, r3, #1
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d011      	beq.n	80087da <UART_RxISR_8BIT_FIFOEN+0xca>
 80087b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00b      	beq.n	80087da <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2201      	movs	r2, #1
 80087c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087d0:	f043 0201 	orr.w	r2, r3, #1
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80087de:	f003 0302 	and.w	r3, r3, #2
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d011      	beq.n	800880a <UART_RxISR_8BIT_FIFOEN+0xfa>
 80087e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80087ea:	f003 0301 	and.w	r3, r3, #1
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d00b      	beq.n	800880a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2202      	movs	r2, #2
 80087f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008800:	f043 0204 	orr.w	r2, r3, #4
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800880a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800880e:	f003 0304 	and.w	r3, r3, #4
 8008812:	2b00      	cmp	r3, #0
 8008814:	d011      	beq.n	800883a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008816:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800881a:	f003 0301 	and.w	r3, r3, #1
 800881e:	2b00      	cmp	r3, #0
 8008820:	d00b      	beq.n	800883a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2204      	movs	r2, #4
 8008828:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008830:	f043 0202 	orr.w	r2, r3, #2
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008840:	2b00      	cmp	r3, #0
 8008842:	d006      	beq.n	8008852 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f7fe ff69 	bl	800771c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008858:	b29b      	uxth	r3, r3
 800885a:	2b00      	cmp	r3, #0
 800885c:	d173      	bne.n	8008946 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008864:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008866:	e853 3f00 	ldrex	r3, [r3]
 800886a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800886c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800886e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008872:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	461a      	mov	r2, r3
 800887c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008880:	66bb      	str	r3, [r7, #104]	; 0x68
 8008882:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008884:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008886:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008888:	e841 2300 	strex	r3, r2, [r1]
 800888c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800888e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008890:	2b00      	cmp	r3, #0
 8008892:	d1e4      	bne.n	800885e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	3308      	adds	r3, #8
 800889a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800889c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800889e:	e853 3f00 	ldrex	r3, [r3]
 80088a2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80088a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088aa:	f023 0301 	bic.w	r3, r3, #1
 80088ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	3308      	adds	r3, #8
 80088b6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80088b8:	657a      	str	r2, [r7, #84]	; 0x54
 80088ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80088be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80088c0:	e841 2300 	strex	r3, r2, [r1]
 80088c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80088c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d1e3      	bne.n	8008894 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2220      	movs	r2, #32
 80088d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d12e      	bne.n	8008940 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f0:	e853 3f00 	ldrex	r3, [r3]
 80088f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80088f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f8:	f023 0310 	bic.w	r3, r3, #16
 80088fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	461a      	mov	r2, r3
 8008904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008906:	643b      	str	r3, [r7, #64]	; 0x40
 8008908:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800890c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800890e:	e841 2300 	strex	r3, r2, [r1]
 8008912:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1e6      	bne.n	80088e8 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	69db      	ldr	r3, [r3, #28]
 8008920:	f003 0310 	and.w	r3, r3, #16
 8008924:	2b10      	cmp	r3, #16
 8008926:	d103      	bne.n	8008930 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2210      	movs	r2, #16
 800892e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008936:	4619      	mov	r1, r3
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f7fe fef9 	bl	8007730 <HAL_UARTEx_RxEventCallback>
 800893e:	e002      	b.n	8008946 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f7f9 fd1f 	bl	8002384 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008946:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800894a:	2b00      	cmp	r3, #0
 800894c:	d006      	beq.n	800895c <UART_RxISR_8BIT_FIFOEN+0x24c>
 800894e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008952:	f003 0320 	and.w	r3, r3, #32
 8008956:	2b00      	cmp	r3, #0
 8008958:	f47f aefe 	bne.w	8008758 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008962:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008966:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800896a:	2b00      	cmp	r3, #0
 800896c:	d045      	beq.n	80089fa <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008974:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008978:	429a      	cmp	r2, r3
 800897a:	d23e      	bcs.n	80089fa <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	3308      	adds	r3, #8
 8008982:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008984:	6a3b      	ldr	r3, [r7, #32]
 8008986:	e853 3f00 	ldrex	r3, [r3]
 800898a:	61fb      	str	r3, [r7, #28]
   return(result);
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008992:	673b      	str	r3, [r7, #112]	; 0x70
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	3308      	adds	r3, #8
 800899a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800899c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800899e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089a4:	e841 2300 	strex	r3, r2, [r1]
 80089a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1e5      	bne.n	800897c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4a14      	ldr	r2, [pc, #80]	; (8008a04 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80089b4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	e853 3f00 	ldrex	r3, [r3]
 80089c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	f043 0320 	orr.w	r3, r3, #32
 80089ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	461a      	mov	r2, r3
 80089d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089d4:	61bb      	str	r3, [r7, #24]
 80089d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d8:	6979      	ldr	r1, [r7, #20]
 80089da:	69ba      	ldr	r2, [r7, #24]
 80089dc:	e841 2300 	strex	r3, r2, [r1]
 80089e0:	613b      	str	r3, [r7, #16]
   return(result);
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1e6      	bne.n	80089b6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089e8:	e007      	b.n	80089fa <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	699a      	ldr	r2, [r3, #24]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f042 0208 	orr.w	r2, r2, #8
 80089f8:	619a      	str	r2, [r3, #24]
}
 80089fa:	bf00      	nop
 80089fc:	3798      	adds	r7, #152	; 0x98
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	0800844f 	.word	0x0800844f

08008a08 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b0a8      	sub	sp, #160	; 0xa0
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008a16:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	69db      	ldr	r3, [r3, #28]
 8008a20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a3e:	2b22      	cmp	r3, #34	; 0x22
 8008a40:	f040 8153 	bne.w	8008cea <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008a4a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008a4e:	e0fa      	b.n	8008c46 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a56:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8008a62:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8008a66:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	b29a      	uxth	r2, r3
 8008a6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a72:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a78:	1c9a      	adds	r2, r3, #2
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	3b01      	subs	r3, #1
 8008a88:	b29a      	uxth	r2, r3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	69db      	ldr	r3, [r3, #28]
 8008a96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008a9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a9e:	f003 0307 	and.w	r3, r3, #7
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d053      	beq.n	8008b4e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008aa6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008aaa:	f003 0301 	and.w	r3, r3, #1
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d011      	beq.n	8008ad6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008ab2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00b      	beq.n	8008ad6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008acc:	f043 0201 	orr.w	r2, r3, #1
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ad6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ada:	f003 0302 	and.w	r3, r3, #2
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d011      	beq.n	8008b06 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008ae2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ae6:	f003 0301 	and.w	r3, r3, #1
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00b      	beq.n	8008b06 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2202      	movs	r2, #2
 8008af4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008afc:	f043 0204 	orr.w	r2, r3, #4
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b0a:	f003 0304 	and.w	r3, r3, #4
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d011      	beq.n	8008b36 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008b12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b16:	f003 0301 	and.w	r3, r3, #1
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00b      	beq.n	8008b36 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2204      	movs	r2, #4
 8008b24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b2c:	f043 0202 	orr.w	r2, r3, #2
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d006      	beq.n	8008b4e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f7fe fdeb 	bl	800771c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d175      	bne.n	8008c46 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b62:	e853 3f00 	ldrex	r3, [r3]
 8008b66:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008b68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	461a      	mov	r2, r3
 8008b78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b7e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b80:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008b82:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008b84:	e841 2300 	strex	r3, r2, [r1]
 8008b88:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008b8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d1e4      	bne.n	8008b5a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	3308      	adds	r3, #8
 8008b96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b9a:	e853 3f00 	ldrex	r3, [r3]
 8008b9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ba2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ba6:	f023 0301 	bic.w	r3, r3, #1
 8008baa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	3308      	adds	r3, #8
 8008bb4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008bb8:	65ba      	str	r2, [r7, #88]	; 0x58
 8008bba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008bbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008bc0:	e841 2300 	strex	r3, r2, [r1]
 8008bc4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d1e1      	bne.n	8008b90 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2220      	movs	r2, #32
 8008bd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d12e      	bne.n	8008c40 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf0:	e853 3f00 	ldrex	r3, [r3]
 8008bf4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bf8:	f023 0310 	bic.w	r3, r3, #16
 8008bfc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	461a      	mov	r2, r3
 8008c04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008c06:	647b      	str	r3, [r7, #68]	; 0x44
 8008c08:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c0e:	e841 2300 	strex	r3, r2, [r1]
 8008c12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d1e6      	bne.n	8008be8 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	69db      	ldr	r3, [r3, #28]
 8008c20:	f003 0310 	and.w	r3, r3, #16
 8008c24:	2b10      	cmp	r3, #16
 8008c26:	d103      	bne.n	8008c30 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2210      	movs	r2, #16
 8008c2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c36:	4619      	mov	r1, r3
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f7fe fd79 	bl	8007730 <HAL_UARTEx_RxEventCallback>
 8008c3e:	e002      	b.n	8008c46 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f7f9 fb9f 	bl	8002384 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c46:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d006      	beq.n	8008c5c <UART_RxISR_16BIT_FIFOEN+0x254>
 8008c4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c52:	f003 0320 	and.w	r3, r3, #32
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f47f aefa 	bne.w	8008a50 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c62:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008c66:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d045      	beq.n	8008cfa <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008c74:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d23e      	bcs.n	8008cfa <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	3308      	adds	r3, #8
 8008c82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c86:	e853 3f00 	ldrex	r3, [r3]
 8008c8a:	623b      	str	r3, [r7, #32]
   return(result);
 8008c8c:	6a3b      	ldr	r3, [r7, #32]
 8008c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c92:	677b      	str	r3, [r7, #116]	; 0x74
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	3308      	adds	r3, #8
 8008c9a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008c9c:	633a      	str	r2, [r7, #48]	; 0x30
 8008c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ca4:	e841 2300 	strex	r3, r2, [r1]
 8008ca8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d1e5      	bne.n	8008c7c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a14      	ldr	r2, [pc, #80]	; (8008d04 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8008cb4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	e853 3f00 	ldrex	r3, [r3]
 8008cc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f043 0320 	orr.w	r3, r3, #32
 8008cca:	673b      	str	r3, [r7, #112]	; 0x70
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008cd4:	61fb      	str	r3, [r7, #28]
 8008cd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd8:	69b9      	ldr	r1, [r7, #24]
 8008cda:	69fa      	ldr	r2, [r7, #28]
 8008cdc:	e841 2300 	strex	r3, r2, [r1]
 8008ce0:	617b      	str	r3, [r7, #20]
   return(result);
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d1e6      	bne.n	8008cb6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ce8:	e007      	b.n	8008cfa <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	699a      	ldr	r2, [r3, #24]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f042 0208 	orr.w	r2, r2, #8
 8008cf8:	619a      	str	r2, [r3, #24]
}
 8008cfa:	bf00      	nop
 8008cfc:	37a0      	adds	r7, #160	; 0xa0
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	080085af 	.word	0x080085af

08008d08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008d10:	bf00      	nop
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008d24:	bf00      	nop
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008d38:	bf00      	nop
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d101      	bne.n	8008d5a <HAL_UARTEx_DisableFifoMode+0x16>
 8008d56:	2302      	movs	r3, #2
 8008d58:	e027      	b.n	8008daa <HAL_UARTEx_DisableFifoMode+0x66>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2224      	movs	r2, #36	; 0x24
 8008d66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f022 0201 	bic.w	r2, r2, #1
 8008d80:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008d88:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2220      	movs	r2, #32
 8008d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3714      	adds	r7, #20
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b084      	sub	sp, #16
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
 8008dbe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d101      	bne.n	8008dce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008dca:	2302      	movs	r3, #2
 8008dcc:	e02d      	b.n	8008e2a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2224      	movs	r2, #36	; 0x24
 8008dda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f022 0201 	bic.w	r2, r2, #1
 8008df4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	683a      	ldr	r2, [r7, #0]
 8008e06:	430a      	orrs	r2, r1
 8008e08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 f850 	bl	8008eb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2220      	movs	r2, #32
 8008e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b084      	sub	sp, #16
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
 8008e3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d101      	bne.n	8008e4a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008e46:	2302      	movs	r3, #2
 8008e48:	e02d      	b.n	8008ea6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2224      	movs	r2, #36	; 0x24
 8008e56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f022 0201 	bic.w	r2, r2, #1
 8008e70:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	683a      	ldr	r2, [r7, #0]
 8008e82:	430a      	orrs	r2, r1
 8008e84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 f812 	bl	8008eb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2220      	movs	r2, #32
 8008e98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
	...

08008eb0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b085      	sub	sp, #20
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d108      	bne.n	8008ed2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008ed0:	e031      	b.n	8008f36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008ed2:	2308      	movs	r3, #8
 8008ed4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008ed6:	2308      	movs	r3, #8
 8008ed8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	0e5b      	lsrs	r3, r3, #25
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	f003 0307 	and.w	r3, r3, #7
 8008ee8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	0f5b      	lsrs	r3, r3, #29
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	f003 0307 	and.w	r3, r3, #7
 8008ef8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008efa:	7bbb      	ldrb	r3, [r7, #14]
 8008efc:	7b3a      	ldrb	r2, [r7, #12]
 8008efe:	4911      	ldr	r1, [pc, #68]	; (8008f44 <UARTEx_SetNbDataToProcess+0x94>)
 8008f00:	5c8a      	ldrb	r2, [r1, r2]
 8008f02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008f06:	7b3a      	ldrb	r2, [r7, #12]
 8008f08:	490f      	ldr	r1, [pc, #60]	; (8008f48 <UARTEx_SetNbDataToProcess+0x98>)
 8008f0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f10:	b29a      	uxth	r2, r3
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f18:	7bfb      	ldrb	r3, [r7, #15]
 8008f1a:	7b7a      	ldrb	r2, [r7, #13]
 8008f1c:	4909      	ldr	r1, [pc, #36]	; (8008f44 <UARTEx_SetNbDataToProcess+0x94>)
 8008f1e:	5c8a      	ldrb	r2, [r1, r2]
 8008f20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008f24:	7b7a      	ldrb	r2, [r7, #13]
 8008f26:	4908      	ldr	r1, [pc, #32]	; (8008f48 <UARTEx_SetNbDataToProcess+0x98>)
 8008f28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f2e:	b29a      	uxth	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008f36:	bf00      	nop
 8008f38:	3714      	adds	r7, #20
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	0800bf2c 	.word	0x0800bf2c
 8008f48:	0800bf34 	.word	0x0800bf34

08008f4c <atoi>:
 8008f4c:	220a      	movs	r2, #10
 8008f4e:	2100      	movs	r1, #0
 8008f50:	f000 b882 	b.w	8009058 <strtol>

08008f54 <_strtol_l.constprop.0>:
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f5a:	d001      	beq.n	8008f60 <_strtol_l.constprop.0+0xc>
 8008f5c:	2b24      	cmp	r3, #36	; 0x24
 8008f5e:	d906      	bls.n	8008f6e <_strtol_l.constprop.0+0x1a>
 8008f60:	f000 fee0 	bl	8009d24 <__errno>
 8008f64:	2316      	movs	r3, #22
 8008f66:	6003      	str	r3, [r0, #0]
 8008f68:	2000      	movs	r0, #0
 8008f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f6e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009054 <_strtol_l.constprop.0+0x100>
 8008f72:	460d      	mov	r5, r1
 8008f74:	462e      	mov	r6, r5
 8008f76:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f7a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008f7e:	f017 0708 	ands.w	r7, r7, #8
 8008f82:	d1f7      	bne.n	8008f74 <_strtol_l.constprop.0+0x20>
 8008f84:	2c2d      	cmp	r4, #45	; 0x2d
 8008f86:	d132      	bne.n	8008fee <_strtol_l.constprop.0+0x9a>
 8008f88:	782c      	ldrb	r4, [r5, #0]
 8008f8a:	2701      	movs	r7, #1
 8008f8c:	1cb5      	adds	r5, r6, #2
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d05b      	beq.n	800904a <_strtol_l.constprop.0+0xf6>
 8008f92:	2b10      	cmp	r3, #16
 8008f94:	d109      	bne.n	8008faa <_strtol_l.constprop.0+0x56>
 8008f96:	2c30      	cmp	r4, #48	; 0x30
 8008f98:	d107      	bne.n	8008faa <_strtol_l.constprop.0+0x56>
 8008f9a:	782c      	ldrb	r4, [r5, #0]
 8008f9c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008fa0:	2c58      	cmp	r4, #88	; 0x58
 8008fa2:	d14d      	bne.n	8009040 <_strtol_l.constprop.0+0xec>
 8008fa4:	786c      	ldrb	r4, [r5, #1]
 8008fa6:	2310      	movs	r3, #16
 8008fa8:	3502      	adds	r5, #2
 8008faa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008fae:	f108 38ff 	add.w	r8, r8, #4294967295
 8008fb2:	f04f 0e00 	mov.w	lr, #0
 8008fb6:	fbb8 f9f3 	udiv	r9, r8, r3
 8008fba:	4676      	mov	r6, lr
 8008fbc:	fb03 8a19 	mls	sl, r3, r9, r8
 8008fc0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008fc4:	f1bc 0f09 	cmp.w	ip, #9
 8008fc8:	d816      	bhi.n	8008ff8 <_strtol_l.constprop.0+0xa4>
 8008fca:	4664      	mov	r4, ip
 8008fcc:	42a3      	cmp	r3, r4
 8008fce:	dd24      	ble.n	800901a <_strtol_l.constprop.0+0xc6>
 8008fd0:	f1be 3fff 	cmp.w	lr, #4294967295
 8008fd4:	d008      	beq.n	8008fe8 <_strtol_l.constprop.0+0x94>
 8008fd6:	45b1      	cmp	r9, r6
 8008fd8:	d31c      	bcc.n	8009014 <_strtol_l.constprop.0+0xc0>
 8008fda:	d101      	bne.n	8008fe0 <_strtol_l.constprop.0+0x8c>
 8008fdc:	45a2      	cmp	sl, r4
 8008fde:	db19      	blt.n	8009014 <_strtol_l.constprop.0+0xc0>
 8008fe0:	fb06 4603 	mla	r6, r6, r3, r4
 8008fe4:	f04f 0e01 	mov.w	lr, #1
 8008fe8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008fec:	e7e8      	b.n	8008fc0 <_strtol_l.constprop.0+0x6c>
 8008fee:	2c2b      	cmp	r4, #43	; 0x2b
 8008ff0:	bf04      	itt	eq
 8008ff2:	782c      	ldrbeq	r4, [r5, #0]
 8008ff4:	1cb5      	addeq	r5, r6, #2
 8008ff6:	e7ca      	b.n	8008f8e <_strtol_l.constprop.0+0x3a>
 8008ff8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008ffc:	f1bc 0f19 	cmp.w	ip, #25
 8009000:	d801      	bhi.n	8009006 <_strtol_l.constprop.0+0xb2>
 8009002:	3c37      	subs	r4, #55	; 0x37
 8009004:	e7e2      	b.n	8008fcc <_strtol_l.constprop.0+0x78>
 8009006:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800900a:	f1bc 0f19 	cmp.w	ip, #25
 800900e:	d804      	bhi.n	800901a <_strtol_l.constprop.0+0xc6>
 8009010:	3c57      	subs	r4, #87	; 0x57
 8009012:	e7db      	b.n	8008fcc <_strtol_l.constprop.0+0x78>
 8009014:	f04f 3eff 	mov.w	lr, #4294967295
 8009018:	e7e6      	b.n	8008fe8 <_strtol_l.constprop.0+0x94>
 800901a:	f1be 3fff 	cmp.w	lr, #4294967295
 800901e:	d105      	bne.n	800902c <_strtol_l.constprop.0+0xd8>
 8009020:	2322      	movs	r3, #34	; 0x22
 8009022:	6003      	str	r3, [r0, #0]
 8009024:	4646      	mov	r6, r8
 8009026:	b942      	cbnz	r2, 800903a <_strtol_l.constprop.0+0xe6>
 8009028:	4630      	mov	r0, r6
 800902a:	e79e      	b.n	8008f6a <_strtol_l.constprop.0+0x16>
 800902c:	b107      	cbz	r7, 8009030 <_strtol_l.constprop.0+0xdc>
 800902e:	4276      	negs	r6, r6
 8009030:	2a00      	cmp	r2, #0
 8009032:	d0f9      	beq.n	8009028 <_strtol_l.constprop.0+0xd4>
 8009034:	f1be 0f00 	cmp.w	lr, #0
 8009038:	d000      	beq.n	800903c <_strtol_l.constprop.0+0xe8>
 800903a:	1e69      	subs	r1, r5, #1
 800903c:	6011      	str	r1, [r2, #0]
 800903e:	e7f3      	b.n	8009028 <_strtol_l.constprop.0+0xd4>
 8009040:	2430      	movs	r4, #48	; 0x30
 8009042:	2b00      	cmp	r3, #0
 8009044:	d1b1      	bne.n	8008faa <_strtol_l.constprop.0+0x56>
 8009046:	2308      	movs	r3, #8
 8009048:	e7af      	b.n	8008faa <_strtol_l.constprop.0+0x56>
 800904a:	2c30      	cmp	r4, #48	; 0x30
 800904c:	d0a5      	beq.n	8008f9a <_strtol_l.constprop.0+0x46>
 800904e:	230a      	movs	r3, #10
 8009050:	e7ab      	b.n	8008faa <_strtol_l.constprop.0+0x56>
 8009052:	bf00      	nop
 8009054:	0800bf3d 	.word	0x0800bf3d

08009058 <strtol>:
 8009058:	4613      	mov	r3, r2
 800905a:	460a      	mov	r2, r1
 800905c:	4601      	mov	r1, r0
 800905e:	4802      	ldr	r0, [pc, #8]	; (8009068 <strtol+0x10>)
 8009060:	6800      	ldr	r0, [r0, #0]
 8009062:	f7ff bf77 	b.w	8008f54 <_strtol_l.constprop.0>
 8009066:	bf00      	nop
 8009068:	20000120 	.word	0x20000120

0800906c <__cvt>:
 800906c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009070:	ec55 4b10 	vmov	r4, r5, d0
 8009074:	2d00      	cmp	r5, #0
 8009076:	460e      	mov	r6, r1
 8009078:	4619      	mov	r1, r3
 800907a:	462b      	mov	r3, r5
 800907c:	bfbb      	ittet	lt
 800907e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009082:	461d      	movlt	r5, r3
 8009084:	2300      	movge	r3, #0
 8009086:	232d      	movlt	r3, #45	; 0x2d
 8009088:	700b      	strb	r3, [r1, #0]
 800908a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800908c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009090:	4691      	mov	r9, r2
 8009092:	f023 0820 	bic.w	r8, r3, #32
 8009096:	bfbc      	itt	lt
 8009098:	4622      	movlt	r2, r4
 800909a:	4614      	movlt	r4, r2
 800909c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80090a0:	d005      	beq.n	80090ae <__cvt+0x42>
 80090a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80090a6:	d100      	bne.n	80090aa <__cvt+0x3e>
 80090a8:	3601      	adds	r6, #1
 80090aa:	2102      	movs	r1, #2
 80090ac:	e000      	b.n	80090b0 <__cvt+0x44>
 80090ae:	2103      	movs	r1, #3
 80090b0:	ab03      	add	r3, sp, #12
 80090b2:	9301      	str	r3, [sp, #4]
 80090b4:	ab02      	add	r3, sp, #8
 80090b6:	9300      	str	r3, [sp, #0]
 80090b8:	ec45 4b10 	vmov	d0, r4, r5
 80090bc:	4653      	mov	r3, sl
 80090be:	4632      	mov	r2, r6
 80090c0:	f000 ff02 	bl	8009ec8 <_dtoa_r>
 80090c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80090c8:	4607      	mov	r7, r0
 80090ca:	d102      	bne.n	80090d2 <__cvt+0x66>
 80090cc:	f019 0f01 	tst.w	r9, #1
 80090d0:	d022      	beq.n	8009118 <__cvt+0xac>
 80090d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80090d6:	eb07 0906 	add.w	r9, r7, r6
 80090da:	d110      	bne.n	80090fe <__cvt+0x92>
 80090dc:	783b      	ldrb	r3, [r7, #0]
 80090de:	2b30      	cmp	r3, #48	; 0x30
 80090e0:	d10a      	bne.n	80090f8 <__cvt+0x8c>
 80090e2:	2200      	movs	r2, #0
 80090e4:	2300      	movs	r3, #0
 80090e6:	4620      	mov	r0, r4
 80090e8:	4629      	mov	r1, r5
 80090ea:	f7f7 fd25 	bl	8000b38 <__aeabi_dcmpeq>
 80090ee:	b918      	cbnz	r0, 80090f8 <__cvt+0x8c>
 80090f0:	f1c6 0601 	rsb	r6, r6, #1
 80090f4:	f8ca 6000 	str.w	r6, [sl]
 80090f8:	f8da 3000 	ldr.w	r3, [sl]
 80090fc:	4499      	add	r9, r3
 80090fe:	2200      	movs	r2, #0
 8009100:	2300      	movs	r3, #0
 8009102:	4620      	mov	r0, r4
 8009104:	4629      	mov	r1, r5
 8009106:	f7f7 fd17 	bl	8000b38 <__aeabi_dcmpeq>
 800910a:	b108      	cbz	r0, 8009110 <__cvt+0xa4>
 800910c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009110:	2230      	movs	r2, #48	; 0x30
 8009112:	9b03      	ldr	r3, [sp, #12]
 8009114:	454b      	cmp	r3, r9
 8009116:	d307      	bcc.n	8009128 <__cvt+0xbc>
 8009118:	9b03      	ldr	r3, [sp, #12]
 800911a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800911c:	1bdb      	subs	r3, r3, r7
 800911e:	4638      	mov	r0, r7
 8009120:	6013      	str	r3, [r2, #0]
 8009122:	b004      	add	sp, #16
 8009124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009128:	1c59      	adds	r1, r3, #1
 800912a:	9103      	str	r1, [sp, #12]
 800912c:	701a      	strb	r2, [r3, #0]
 800912e:	e7f0      	b.n	8009112 <__cvt+0xa6>

08009130 <__exponent>:
 8009130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009132:	4603      	mov	r3, r0
 8009134:	2900      	cmp	r1, #0
 8009136:	bfb8      	it	lt
 8009138:	4249      	neglt	r1, r1
 800913a:	f803 2b02 	strb.w	r2, [r3], #2
 800913e:	bfb4      	ite	lt
 8009140:	222d      	movlt	r2, #45	; 0x2d
 8009142:	222b      	movge	r2, #43	; 0x2b
 8009144:	2909      	cmp	r1, #9
 8009146:	7042      	strb	r2, [r0, #1]
 8009148:	dd2a      	ble.n	80091a0 <__exponent+0x70>
 800914a:	f10d 0207 	add.w	r2, sp, #7
 800914e:	4617      	mov	r7, r2
 8009150:	260a      	movs	r6, #10
 8009152:	4694      	mov	ip, r2
 8009154:	fb91 f5f6 	sdiv	r5, r1, r6
 8009158:	fb06 1415 	mls	r4, r6, r5, r1
 800915c:	3430      	adds	r4, #48	; 0x30
 800915e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009162:	460c      	mov	r4, r1
 8009164:	2c63      	cmp	r4, #99	; 0x63
 8009166:	f102 32ff 	add.w	r2, r2, #4294967295
 800916a:	4629      	mov	r1, r5
 800916c:	dcf1      	bgt.n	8009152 <__exponent+0x22>
 800916e:	3130      	adds	r1, #48	; 0x30
 8009170:	f1ac 0402 	sub.w	r4, ip, #2
 8009174:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009178:	1c41      	adds	r1, r0, #1
 800917a:	4622      	mov	r2, r4
 800917c:	42ba      	cmp	r2, r7
 800917e:	d30a      	bcc.n	8009196 <__exponent+0x66>
 8009180:	f10d 0209 	add.w	r2, sp, #9
 8009184:	eba2 020c 	sub.w	r2, r2, ip
 8009188:	42bc      	cmp	r4, r7
 800918a:	bf88      	it	hi
 800918c:	2200      	movhi	r2, #0
 800918e:	4413      	add	r3, r2
 8009190:	1a18      	subs	r0, r3, r0
 8009192:	b003      	add	sp, #12
 8009194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009196:	f812 5b01 	ldrb.w	r5, [r2], #1
 800919a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800919e:	e7ed      	b.n	800917c <__exponent+0x4c>
 80091a0:	2330      	movs	r3, #48	; 0x30
 80091a2:	3130      	adds	r1, #48	; 0x30
 80091a4:	7083      	strb	r3, [r0, #2]
 80091a6:	70c1      	strb	r1, [r0, #3]
 80091a8:	1d03      	adds	r3, r0, #4
 80091aa:	e7f1      	b.n	8009190 <__exponent+0x60>

080091ac <_printf_float>:
 80091ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b0:	ed2d 8b02 	vpush	{d8}
 80091b4:	b08d      	sub	sp, #52	; 0x34
 80091b6:	460c      	mov	r4, r1
 80091b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80091bc:	4616      	mov	r6, r2
 80091be:	461f      	mov	r7, r3
 80091c0:	4605      	mov	r5, r0
 80091c2:	f000 fd65 	bl	8009c90 <_localeconv_r>
 80091c6:	f8d0 a000 	ldr.w	sl, [r0]
 80091ca:	4650      	mov	r0, sl
 80091cc:	f7f7 f888 	bl	80002e0 <strlen>
 80091d0:	2300      	movs	r3, #0
 80091d2:	930a      	str	r3, [sp, #40]	; 0x28
 80091d4:	6823      	ldr	r3, [r4, #0]
 80091d6:	9305      	str	r3, [sp, #20]
 80091d8:	f8d8 3000 	ldr.w	r3, [r8]
 80091dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80091e0:	3307      	adds	r3, #7
 80091e2:	f023 0307 	bic.w	r3, r3, #7
 80091e6:	f103 0208 	add.w	r2, r3, #8
 80091ea:	f8c8 2000 	str.w	r2, [r8]
 80091ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80091f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80091f6:	9307      	str	r3, [sp, #28]
 80091f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80091fc:	ee08 0a10 	vmov	s16, r0
 8009200:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009204:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009208:	4b9e      	ldr	r3, [pc, #632]	; (8009484 <_printf_float+0x2d8>)
 800920a:	f04f 32ff 	mov.w	r2, #4294967295
 800920e:	f7f7 fcc5 	bl	8000b9c <__aeabi_dcmpun>
 8009212:	bb88      	cbnz	r0, 8009278 <_printf_float+0xcc>
 8009214:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009218:	4b9a      	ldr	r3, [pc, #616]	; (8009484 <_printf_float+0x2d8>)
 800921a:	f04f 32ff 	mov.w	r2, #4294967295
 800921e:	f7f7 fc9f 	bl	8000b60 <__aeabi_dcmple>
 8009222:	bb48      	cbnz	r0, 8009278 <_printf_float+0xcc>
 8009224:	2200      	movs	r2, #0
 8009226:	2300      	movs	r3, #0
 8009228:	4640      	mov	r0, r8
 800922a:	4649      	mov	r1, r9
 800922c:	f7f7 fc8e 	bl	8000b4c <__aeabi_dcmplt>
 8009230:	b110      	cbz	r0, 8009238 <_printf_float+0x8c>
 8009232:	232d      	movs	r3, #45	; 0x2d
 8009234:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009238:	4a93      	ldr	r2, [pc, #588]	; (8009488 <_printf_float+0x2dc>)
 800923a:	4b94      	ldr	r3, [pc, #592]	; (800948c <_printf_float+0x2e0>)
 800923c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009240:	bf94      	ite	ls
 8009242:	4690      	movls	r8, r2
 8009244:	4698      	movhi	r8, r3
 8009246:	2303      	movs	r3, #3
 8009248:	6123      	str	r3, [r4, #16]
 800924a:	9b05      	ldr	r3, [sp, #20]
 800924c:	f023 0304 	bic.w	r3, r3, #4
 8009250:	6023      	str	r3, [r4, #0]
 8009252:	f04f 0900 	mov.w	r9, #0
 8009256:	9700      	str	r7, [sp, #0]
 8009258:	4633      	mov	r3, r6
 800925a:	aa0b      	add	r2, sp, #44	; 0x2c
 800925c:	4621      	mov	r1, r4
 800925e:	4628      	mov	r0, r5
 8009260:	f000 f9da 	bl	8009618 <_printf_common>
 8009264:	3001      	adds	r0, #1
 8009266:	f040 8090 	bne.w	800938a <_printf_float+0x1de>
 800926a:	f04f 30ff 	mov.w	r0, #4294967295
 800926e:	b00d      	add	sp, #52	; 0x34
 8009270:	ecbd 8b02 	vpop	{d8}
 8009274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009278:	4642      	mov	r2, r8
 800927a:	464b      	mov	r3, r9
 800927c:	4640      	mov	r0, r8
 800927e:	4649      	mov	r1, r9
 8009280:	f7f7 fc8c 	bl	8000b9c <__aeabi_dcmpun>
 8009284:	b140      	cbz	r0, 8009298 <_printf_float+0xec>
 8009286:	464b      	mov	r3, r9
 8009288:	2b00      	cmp	r3, #0
 800928a:	bfbc      	itt	lt
 800928c:	232d      	movlt	r3, #45	; 0x2d
 800928e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009292:	4a7f      	ldr	r2, [pc, #508]	; (8009490 <_printf_float+0x2e4>)
 8009294:	4b7f      	ldr	r3, [pc, #508]	; (8009494 <_printf_float+0x2e8>)
 8009296:	e7d1      	b.n	800923c <_printf_float+0x90>
 8009298:	6863      	ldr	r3, [r4, #4]
 800929a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800929e:	9206      	str	r2, [sp, #24]
 80092a0:	1c5a      	adds	r2, r3, #1
 80092a2:	d13f      	bne.n	8009324 <_printf_float+0x178>
 80092a4:	2306      	movs	r3, #6
 80092a6:	6063      	str	r3, [r4, #4]
 80092a8:	9b05      	ldr	r3, [sp, #20]
 80092aa:	6861      	ldr	r1, [r4, #4]
 80092ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80092b0:	2300      	movs	r3, #0
 80092b2:	9303      	str	r3, [sp, #12]
 80092b4:	ab0a      	add	r3, sp, #40	; 0x28
 80092b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80092ba:	ab09      	add	r3, sp, #36	; 0x24
 80092bc:	ec49 8b10 	vmov	d0, r8, r9
 80092c0:	9300      	str	r3, [sp, #0]
 80092c2:	6022      	str	r2, [r4, #0]
 80092c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80092c8:	4628      	mov	r0, r5
 80092ca:	f7ff fecf 	bl	800906c <__cvt>
 80092ce:	9b06      	ldr	r3, [sp, #24]
 80092d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80092d2:	2b47      	cmp	r3, #71	; 0x47
 80092d4:	4680      	mov	r8, r0
 80092d6:	d108      	bne.n	80092ea <_printf_float+0x13e>
 80092d8:	1cc8      	adds	r0, r1, #3
 80092da:	db02      	blt.n	80092e2 <_printf_float+0x136>
 80092dc:	6863      	ldr	r3, [r4, #4]
 80092de:	4299      	cmp	r1, r3
 80092e0:	dd41      	ble.n	8009366 <_printf_float+0x1ba>
 80092e2:	f1ab 0302 	sub.w	r3, fp, #2
 80092e6:	fa5f fb83 	uxtb.w	fp, r3
 80092ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80092ee:	d820      	bhi.n	8009332 <_printf_float+0x186>
 80092f0:	3901      	subs	r1, #1
 80092f2:	465a      	mov	r2, fp
 80092f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80092f8:	9109      	str	r1, [sp, #36]	; 0x24
 80092fa:	f7ff ff19 	bl	8009130 <__exponent>
 80092fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009300:	1813      	adds	r3, r2, r0
 8009302:	2a01      	cmp	r2, #1
 8009304:	4681      	mov	r9, r0
 8009306:	6123      	str	r3, [r4, #16]
 8009308:	dc02      	bgt.n	8009310 <_printf_float+0x164>
 800930a:	6822      	ldr	r2, [r4, #0]
 800930c:	07d2      	lsls	r2, r2, #31
 800930e:	d501      	bpl.n	8009314 <_printf_float+0x168>
 8009310:	3301      	adds	r3, #1
 8009312:	6123      	str	r3, [r4, #16]
 8009314:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009318:	2b00      	cmp	r3, #0
 800931a:	d09c      	beq.n	8009256 <_printf_float+0xaa>
 800931c:	232d      	movs	r3, #45	; 0x2d
 800931e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009322:	e798      	b.n	8009256 <_printf_float+0xaa>
 8009324:	9a06      	ldr	r2, [sp, #24]
 8009326:	2a47      	cmp	r2, #71	; 0x47
 8009328:	d1be      	bne.n	80092a8 <_printf_float+0xfc>
 800932a:	2b00      	cmp	r3, #0
 800932c:	d1bc      	bne.n	80092a8 <_printf_float+0xfc>
 800932e:	2301      	movs	r3, #1
 8009330:	e7b9      	b.n	80092a6 <_printf_float+0xfa>
 8009332:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009336:	d118      	bne.n	800936a <_printf_float+0x1be>
 8009338:	2900      	cmp	r1, #0
 800933a:	6863      	ldr	r3, [r4, #4]
 800933c:	dd0b      	ble.n	8009356 <_printf_float+0x1aa>
 800933e:	6121      	str	r1, [r4, #16]
 8009340:	b913      	cbnz	r3, 8009348 <_printf_float+0x19c>
 8009342:	6822      	ldr	r2, [r4, #0]
 8009344:	07d0      	lsls	r0, r2, #31
 8009346:	d502      	bpl.n	800934e <_printf_float+0x1a2>
 8009348:	3301      	adds	r3, #1
 800934a:	440b      	add	r3, r1
 800934c:	6123      	str	r3, [r4, #16]
 800934e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009350:	f04f 0900 	mov.w	r9, #0
 8009354:	e7de      	b.n	8009314 <_printf_float+0x168>
 8009356:	b913      	cbnz	r3, 800935e <_printf_float+0x1b2>
 8009358:	6822      	ldr	r2, [r4, #0]
 800935a:	07d2      	lsls	r2, r2, #31
 800935c:	d501      	bpl.n	8009362 <_printf_float+0x1b6>
 800935e:	3302      	adds	r3, #2
 8009360:	e7f4      	b.n	800934c <_printf_float+0x1a0>
 8009362:	2301      	movs	r3, #1
 8009364:	e7f2      	b.n	800934c <_printf_float+0x1a0>
 8009366:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800936a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800936c:	4299      	cmp	r1, r3
 800936e:	db05      	blt.n	800937c <_printf_float+0x1d0>
 8009370:	6823      	ldr	r3, [r4, #0]
 8009372:	6121      	str	r1, [r4, #16]
 8009374:	07d8      	lsls	r0, r3, #31
 8009376:	d5ea      	bpl.n	800934e <_printf_float+0x1a2>
 8009378:	1c4b      	adds	r3, r1, #1
 800937a:	e7e7      	b.n	800934c <_printf_float+0x1a0>
 800937c:	2900      	cmp	r1, #0
 800937e:	bfd4      	ite	le
 8009380:	f1c1 0202 	rsble	r2, r1, #2
 8009384:	2201      	movgt	r2, #1
 8009386:	4413      	add	r3, r2
 8009388:	e7e0      	b.n	800934c <_printf_float+0x1a0>
 800938a:	6823      	ldr	r3, [r4, #0]
 800938c:	055a      	lsls	r2, r3, #21
 800938e:	d407      	bmi.n	80093a0 <_printf_float+0x1f4>
 8009390:	6923      	ldr	r3, [r4, #16]
 8009392:	4642      	mov	r2, r8
 8009394:	4631      	mov	r1, r6
 8009396:	4628      	mov	r0, r5
 8009398:	47b8      	blx	r7
 800939a:	3001      	adds	r0, #1
 800939c:	d12c      	bne.n	80093f8 <_printf_float+0x24c>
 800939e:	e764      	b.n	800926a <_printf_float+0xbe>
 80093a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80093a4:	f240 80e0 	bls.w	8009568 <_printf_float+0x3bc>
 80093a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80093ac:	2200      	movs	r2, #0
 80093ae:	2300      	movs	r3, #0
 80093b0:	f7f7 fbc2 	bl	8000b38 <__aeabi_dcmpeq>
 80093b4:	2800      	cmp	r0, #0
 80093b6:	d034      	beq.n	8009422 <_printf_float+0x276>
 80093b8:	4a37      	ldr	r2, [pc, #220]	; (8009498 <_printf_float+0x2ec>)
 80093ba:	2301      	movs	r3, #1
 80093bc:	4631      	mov	r1, r6
 80093be:	4628      	mov	r0, r5
 80093c0:	47b8      	blx	r7
 80093c2:	3001      	adds	r0, #1
 80093c4:	f43f af51 	beq.w	800926a <_printf_float+0xbe>
 80093c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093cc:	429a      	cmp	r2, r3
 80093ce:	db02      	blt.n	80093d6 <_printf_float+0x22a>
 80093d0:	6823      	ldr	r3, [r4, #0]
 80093d2:	07d8      	lsls	r0, r3, #31
 80093d4:	d510      	bpl.n	80093f8 <_printf_float+0x24c>
 80093d6:	ee18 3a10 	vmov	r3, s16
 80093da:	4652      	mov	r2, sl
 80093dc:	4631      	mov	r1, r6
 80093de:	4628      	mov	r0, r5
 80093e0:	47b8      	blx	r7
 80093e2:	3001      	adds	r0, #1
 80093e4:	f43f af41 	beq.w	800926a <_printf_float+0xbe>
 80093e8:	f04f 0800 	mov.w	r8, #0
 80093ec:	f104 091a 	add.w	r9, r4, #26
 80093f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093f2:	3b01      	subs	r3, #1
 80093f4:	4543      	cmp	r3, r8
 80093f6:	dc09      	bgt.n	800940c <_printf_float+0x260>
 80093f8:	6823      	ldr	r3, [r4, #0]
 80093fa:	079b      	lsls	r3, r3, #30
 80093fc:	f100 8107 	bmi.w	800960e <_printf_float+0x462>
 8009400:	68e0      	ldr	r0, [r4, #12]
 8009402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009404:	4298      	cmp	r0, r3
 8009406:	bfb8      	it	lt
 8009408:	4618      	movlt	r0, r3
 800940a:	e730      	b.n	800926e <_printf_float+0xc2>
 800940c:	2301      	movs	r3, #1
 800940e:	464a      	mov	r2, r9
 8009410:	4631      	mov	r1, r6
 8009412:	4628      	mov	r0, r5
 8009414:	47b8      	blx	r7
 8009416:	3001      	adds	r0, #1
 8009418:	f43f af27 	beq.w	800926a <_printf_float+0xbe>
 800941c:	f108 0801 	add.w	r8, r8, #1
 8009420:	e7e6      	b.n	80093f0 <_printf_float+0x244>
 8009422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009424:	2b00      	cmp	r3, #0
 8009426:	dc39      	bgt.n	800949c <_printf_float+0x2f0>
 8009428:	4a1b      	ldr	r2, [pc, #108]	; (8009498 <_printf_float+0x2ec>)
 800942a:	2301      	movs	r3, #1
 800942c:	4631      	mov	r1, r6
 800942e:	4628      	mov	r0, r5
 8009430:	47b8      	blx	r7
 8009432:	3001      	adds	r0, #1
 8009434:	f43f af19 	beq.w	800926a <_printf_float+0xbe>
 8009438:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800943c:	4313      	orrs	r3, r2
 800943e:	d102      	bne.n	8009446 <_printf_float+0x29a>
 8009440:	6823      	ldr	r3, [r4, #0]
 8009442:	07d9      	lsls	r1, r3, #31
 8009444:	d5d8      	bpl.n	80093f8 <_printf_float+0x24c>
 8009446:	ee18 3a10 	vmov	r3, s16
 800944a:	4652      	mov	r2, sl
 800944c:	4631      	mov	r1, r6
 800944e:	4628      	mov	r0, r5
 8009450:	47b8      	blx	r7
 8009452:	3001      	adds	r0, #1
 8009454:	f43f af09 	beq.w	800926a <_printf_float+0xbe>
 8009458:	f04f 0900 	mov.w	r9, #0
 800945c:	f104 0a1a 	add.w	sl, r4, #26
 8009460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009462:	425b      	negs	r3, r3
 8009464:	454b      	cmp	r3, r9
 8009466:	dc01      	bgt.n	800946c <_printf_float+0x2c0>
 8009468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800946a:	e792      	b.n	8009392 <_printf_float+0x1e6>
 800946c:	2301      	movs	r3, #1
 800946e:	4652      	mov	r2, sl
 8009470:	4631      	mov	r1, r6
 8009472:	4628      	mov	r0, r5
 8009474:	47b8      	blx	r7
 8009476:	3001      	adds	r0, #1
 8009478:	f43f aef7 	beq.w	800926a <_printf_float+0xbe>
 800947c:	f109 0901 	add.w	r9, r9, #1
 8009480:	e7ee      	b.n	8009460 <_printf_float+0x2b4>
 8009482:	bf00      	nop
 8009484:	7fefffff 	.word	0x7fefffff
 8009488:	0800c03d 	.word	0x0800c03d
 800948c:	0800c041 	.word	0x0800c041
 8009490:	0800c045 	.word	0x0800c045
 8009494:	0800c049 	.word	0x0800c049
 8009498:	0800c04d 	.word	0x0800c04d
 800949c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800949e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80094a0:	429a      	cmp	r2, r3
 80094a2:	bfa8      	it	ge
 80094a4:	461a      	movge	r2, r3
 80094a6:	2a00      	cmp	r2, #0
 80094a8:	4691      	mov	r9, r2
 80094aa:	dc37      	bgt.n	800951c <_printf_float+0x370>
 80094ac:	f04f 0b00 	mov.w	fp, #0
 80094b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80094b4:	f104 021a 	add.w	r2, r4, #26
 80094b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80094ba:	9305      	str	r3, [sp, #20]
 80094bc:	eba3 0309 	sub.w	r3, r3, r9
 80094c0:	455b      	cmp	r3, fp
 80094c2:	dc33      	bgt.n	800952c <_printf_float+0x380>
 80094c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094c8:	429a      	cmp	r2, r3
 80094ca:	db3b      	blt.n	8009544 <_printf_float+0x398>
 80094cc:	6823      	ldr	r3, [r4, #0]
 80094ce:	07da      	lsls	r2, r3, #31
 80094d0:	d438      	bmi.n	8009544 <_printf_float+0x398>
 80094d2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80094d6:	eba2 0903 	sub.w	r9, r2, r3
 80094da:	9b05      	ldr	r3, [sp, #20]
 80094dc:	1ad2      	subs	r2, r2, r3
 80094de:	4591      	cmp	r9, r2
 80094e0:	bfa8      	it	ge
 80094e2:	4691      	movge	r9, r2
 80094e4:	f1b9 0f00 	cmp.w	r9, #0
 80094e8:	dc35      	bgt.n	8009556 <_printf_float+0x3aa>
 80094ea:	f04f 0800 	mov.w	r8, #0
 80094ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80094f2:	f104 0a1a 	add.w	sl, r4, #26
 80094f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094fa:	1a9b      	subs	r3, r3, r2
 80094fc:	eba3 0309 	sub.w	r3, r3, r9
 8009500:	4543      	cmp	r3, r8
 8009502:	f77f af79 	ble.w	80093f8 <_printf_float+0x24c>
 8009506:	2301      	movs	r3, #1
 8009508:	4652      	mov	r2, sl
 800950a:	4631      	mov	r1, r6
 800950c:	4628      	mov	r0, r5
 800950e:	47b8      	blx	r7
 8009510:	3001      	adds	r0, #1
 8009512:	f43f aeaa 	beq.w	800926a <_printf_float+0xbe>
 8009516:	f108 0801 	add.w	r8, r8, #1
 800951a:	e7ec      	b.n	80094f6 <_printf_float+0x34a>
 800951c:	4613      	mov	r3, r2
 800951e:	4631      	mov	r1, r6
 8009520:	4642      	mov	r2, r8
 8009522:	4628      	mov	r0, r5
 8009524:	47b8      	blx	r7
 8009526:	3001      	adds	r0, #1
 8009528:	d1c0      	bne.n	80094ac <_printf_float+0x300>
 800952a:	e69e      	b.n	800926a <_printf_float+0xbe>
 800952c:	2301      	movs	r3, #1
 800952e:	4631      	mov	r1, r6
 8009530:	4628      	mov	r0, r5
 8009532:	9205      	str	r2, [sp, #20]
 8009534:	47b8      	blx	r7
 8009536:	3001      	adds	r0, #1
 8009538:	f43f ae97 	beq.w	800926a <_printf_float+0xbe>
 800953c:	9a05      	ldr	r2, [sp, #20]
 800953e:	f10b 0b01 	add.w	fp, fp, #1
 8009542:	e7b9      	b.n	80094b8 <_printf_float+0x30c>
 8009544:	ee18 3a10 	vmov	r3, s16
 8009548:	4652      	mov	r2, sl
 800954a:	4631      	mov	r1, r6
 800954c:	4628      	mov	r0, r5
 800954e:	47b8      	blx	r7
 8009550:	3001      	adds	r0, #1
 8009552:	d1be      	bne.n	80094d2 <_printf_float+0x326>
 8009554:	e689      	b.n	800926a <_printf_float+0xbe>
 8009556:	9a05      	ldr	r2, [sp, #20]
 8009558:	464b      	mov	r3, r9
 800955a:	4442      	add	r2, r8
 800955c:	4631      	mov	r1, r6
 800955e:	4628      	mov	r0, r5
 8009560:	47b8      	blx	r7
 8009562:	3001      	adds	r0, #1
 8009564:	d1c1      	bne.n	80094ea <_printf_float+0x33e>
 8009566:	e680      	b.n	800926a <_printf_float+0xbe>
 8009568:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800956a:	2a01      	cmp	r2, #1
 800956c:	dc01      	bgt.n	8009572 <_printf_float+0x3c6>
 800956e:	07db      	lsls	r3, r3, #31
 8009570:	d53a      	bpl.n	80095e8 <_printf_float+0x43c>
 8009572:	2301      	movs	r3, #1
 8009574:	4642      	mov	r2, r8
 8009576:	4631      	mov	r1, r6
 8009578:	4628      	mov	r0, r5
 800957a:	47b8      	blx	r7
 800957c:	3001      	adds	r0, #1
 800957e:	f43f ae74 	beq.w	800926a <_printf_float+0xbe>
 8009582:	ee18 3a10 	vmov	r3, s16
 8009586:	4652      	mov	r2, sl
 8009588:	4631      	mov	r1, r6
 800958a:	4628      	mov	r0, r5
 800958c:	47b8      	blx	r7
 800958e:	3001      	adds	r0, #1
 8009590:	f43f ae6b 	beq.w	800926a <_printf_float+0xbe>
 8009594:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009598:	2200      	movs	r2, #0
 800959a:	2300      	movs	r3, #0
 800959c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80095a0:	f7f7 faca 	bl	8000b38 <__aeabi_dcmpeq>
 80095a4:	b9d8      	cbnz	r0, 80095de <_printf_float+0x432>
 80095a6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80095aa:	f108 0201 	add.w	r2, r8, #1
 80095ae:	4631      	mov	r1, r6
 80095b0:	4628      	mov	r0, r5
 80095b2:	47b8      	blx	r7
 80095b4:	3001      	adds	r0, #1
 80095b6:	d10e      	bne.n	80095d6 <_printf_float+0x42a>
 80095b8:	e657      	b.n	800926a <_printf_float+0xbe>
 80095ba:	2301      	movs	r3, #1
 80095bc:	4652      	mov	r2, sl
 80095be:	4631      	mov	r1, r6
 80095c0:	4628      	mov	r0, r5
 80095c2:	47b8      	blx	r7
 80095c4:	3001      	adds	r0, #1
 80095c6:	f43f ae50 	beq.w	800926a <_printf_float+0xbe>
 80095ca:	f108 0801 	add.w	r8, r8, #1
 80095ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095d0:	3b01      	subs	r3, #1
 80095d2:	4543      	cmp	r3, r8
 80095d4:	dcf1      	bgt.n	80095ba <_printf_float+0x40e>
 80095d6:	464b      	mov	r3, r9
 80095d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80095dc:	e6da      	b.n	8009394 <_printf_float+0x1e8>
 80095de:	f04f 0800 	mov.w	r8, #0
 80095e2:	f104 0a1a 	add.w	sl, r4, #26
 80095e6:	e7f2      	b.n	80095ce <_printf_float+0x422>
 80095e8:	2301      	movs	r3, #1
 80095ea:	4642      	mov	r2, r8
 80095ec:	e7df      	b.n	80095ae <_printf_float+0x402>
 80095ee:	2301      	movs	r3, #1
 80095f0:	464a      	mov	r2, r9
 80095f2:	4631      	mov	r1, r6
 80095f4:	4628      	mov	r0, r5
 80095f6:	47b8      	blx	r7
 80095f8:	3001      	adds	r0, #1
 80095fa:	f43f ae36 	beq.w	800926a <_printf_float+0xbe>
 80095fe:	f108 0801 	add.w	r8, r8, #1
 8009602:	68e3      	ldr	r3, [r4, #12]
 8009604:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009606:	1a5b      	subs	r3, r3, r1
 8009608:	4543      	cmp	r3, r8
 800960a:	dcf0      	bgt.n	80095ee <_printf_float+0x442>
 800960c:	e6f8      	b.n	8009400 <_printf_float+0x254>
 800960e:	f04f 0800 	mov.w	r8, #0
 8009612:	f104 0919 	add.w	r9, r4, #25
 8009616:	e7f4      	b.n	8009602 <_printf_float+0x456>

08009618 <_printf_common>:
 8009618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800961c:	4616      	mov	r6, r2
 800961e:	4699      	mov	r9, r3
 8009620:	688a      	ldr	r2, [r1, #8]
 8009622:	690b      	ldr	r3, [r1, #16]
 8009624:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009628:	4293      	cmp	r3, r2
 800962a:	bfb8      	it	lt
 800962c:	4613      	movlt	r3, r2
 800962e:	6033      	str	r3, [r6, #0]
 8009630:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009634:	4607      	mov	r7, r0
 8009636:	460c      	mov	r4, r1
 8009638:	b10a      	cbz	r2, 800963e <_printf_common+0x26>
 800963a:	3301      	adds	r3, #1
 800963c:	6033      	str	r3, [r6, #0]
 800963e:	6823      	ldr	r3, [r4, #0]
 8009640:	0699      	lsls	r1, r3, #26
 8009642:	bf42      	ittt	mi
 8009644:	6833      	ldrmi	r3, [r6, #0]
 8009646:	3302      	addmi	r3, #2
 8009648:	6033      	strmi	r3, [r6, #0]
 800964a:	6825      	ldr	r5, [r4, #0]
 800964c:	f015 0506 	ands.w	r5, r5, #6
 8009650:	d106      	bne.n	8009660 <_printf_common+0x48>
 8009652:	f104 0a19 	add.w	sl, r4, #25
 8009656:	68e3      	ldr	r3, [r4, #12]
 8009658:	6832      	ldr	r2, [r6, #0]
 800965a:	1a9b      	subs	r3, r3, r2
 800965c:	42ab      	cmp	r3, r5
 800965e:	dc26      	bgt.n	80096ae <_printf_common+0x96>
 8009660:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009664:	1e13      	subs	r3, r2, #0
 8009666:	6822      	ldr	r2, [r4, #0]
 8009668:	bf18      	it	ne
 800966a:	2301      	movne	r3, #1
 800966c:	0692      	lsls	r2, r2, #26
 800966e:	d42b      	bmi.n	80096c8 <_printf_common+0xb0>
 8009670:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009674:	4649      	mov	r1, r9
 8009676:	4638      	mov	r0, r7
 8009678:	47c0      	blx	r8
 800967a:	3001      	adds	r0, #1
 800967c:	d01e      	beq.n	80096bc <_printf_common+0xa4>
 800967e:	6823      	ldr	r3, [r4, #0]
 8009680:	6922      	ldr	r2, [r4, #16]
 8009682:	f003 0306 	and.w	r3, r3, #6
 8009686:	2b04      	cmp	r3, #4
 8009688:	bf02      	ittt	eq
 800968a:	68e5      	ldreq	r5, [r4, #12]
 800968c:	6833      	ldreq	r3, [r6, #0]
 800968e:	1aed      	subeq	r5, r5, r3
 8009690:	68a3      	ldr	r3, [r4, #8]
 8009692:	bf0c      	ite	eq
 8009694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009698:	2500      	movne	r5, #0
 800969a:	4293      	cmp	r3, r2
 800969c:	bfc4      	itt	gt
 800969e:	1a9b      	subgt	r3, r3, r2
 80096a0:	18ed      	addgt	r5, r5, r3
 80096a2:	2600      	movs	r6, #0
 80096a4:	341a      	adds	r4, #26
 80096a6:	42b5      	cmp	r5, r6
 80096a8:	d11a      	bne.n	80096e0 <_printf_common+0xc8>
 80096aa:	2000      	movs	r0, #0
 80096ac:	e008      	b.n	80096c0 <_printf_common+0xa8>
 80096ae:	2301      	movs	r3, #1
 80096b0:	4652      	mov	r2, sl
 80096b2:	4649      	mov	r1, r9
 80096b4:	4638      	mov	r0, r7
 80096b6:	47c0      	blx	r8
 80096b8:	3001      	adds	r0, #1
 80096ba:	d103      	bne.n	80096c4 <_printf_common+0xac>
 80096bc:	f04f 30ff 	mov.w	r0, #4294967295
 80096c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096c4:	3501      	adds	r5, #1
 80096c6:	e7c6      	b.n	8009656 <_printf_common+0x3e>
 80096c8:	18e1      	adds	r1, r4, r3
 80096ca:	1c5a      	adds	r2, r3, #1
 80096cc:	2030      	movs	r0, #48	; 0x30
 80096ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80096d2:	4422      	add	r2, r4
 80096d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80096d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80096dc:	3302      	adds	r3, #2
 80096de:	e7c7      	b.n	8009670 <_printf_common+0x58>
 80096e0:	2301      	movs	r3, #1
 80096e2:	4622      	mov	r2, r4
 80096e4:	4649      	mov	r1, r9
 80096e6:	4638      	mov	r0, r7
 80096e8:	47c0      	blx	r8
 80096ea:	3001      	adds	r0, #1
 80096ec:	d0e6      	beq.n	80096bc <_printf_common+0xa4>
 80096ee:	3601      	adds	r6, #1
 80096f0:	e7d9      	b.n	80096a6 <_printf_common+0x8e>
	...

080096f4 <_printf_i>:
 80096f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096f8:	7e0f      	ldrb	r7, [r1, #24]
 80096fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80096fc:	2f78      	cmp	r7, #120	; 0x78
 80096fe:	4691      	mov	r9, r2
 8009700:	4680      	mov	r8, r0
 8009702:	460c      	mov	r4, r1
 8009704:	469a      	mov	sl, r3
 8009706:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800970a:	d807      	bhi.n	800971c <_printf_i+0x28>
 800970c:	2f62      	cmp	r7, #98	; 0x62
 800970e:	d80a      	bhi.n	8009726 <_printf_i+0x32>
 8009710:	2f00      	cmp	r7, #0
 8009712:	f000 80d4 	beq.w	80098be <_printf_i+0x1ca>
 8009716:	2f58      	cmp	r7, #88	; 0x58
 8009718:	f000 80c0 	beq.w	800989c <_printf_i+0x1a8>
 800971c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009720:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009724:	e03a      	b.n	800979c <_printf_i+0xa8>
 8009726:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800972a:	2b15      	cmp	r3, #21
 800972c:	d8f6      	bhi.n	800971c <_printf_i+0x28>
 800972e:	a101      	add	r1, pc, #4	; (adr r1, 8009734 <_printf_i+0x40>)
 8009730:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009734:	0800978d 	.word	0x0800978d
 8009738:	080097a1 	.word	0x080097a1
 800973c:	0800971d 	.word	0x0800971d
 8009740:	0800971d 	.word	0x0800971d
 8009744:	0800971d 	.word	0x0800971d
 8009748:	0800971d 	.word	0x0800971d
 800974c:	080097a1 	.word	0x080097a1
 8009750:	0800971d 	.word	0x0800971d
 8009754:	0800971d 	.word	0x0800971d
 8009758:	0800971d 	.word	0x0800971d
 800975c:	0800971d 	.word	0x0800971d
 8009760:	080098a5 	.word	0x080098a5
 8009764:	080097cd 	.word	0x080097cd
 8009768:	0800985f 	.word	0x0800985f
 800976c:	0800971d 	.word	0x0800971d
 8009770:	0800971d 	.word	0x0800971d
 8009774:	080098c7 	.word	0x080098c7
 8009778:	0800971d 	.word	0x0800971d
 800977c:	080097cd 	.word	0x080097cd
 8009780:	0800971d 	.word	0x0800971d
 8009784:	0800971d 	.word	0x0800971d
 8009788:	08009867 	.word	0x08009867
 800978c:	682b      	ldr	r3, [r5, #0]
 800978e:	1d1a      	adds	r2, r3, #4
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	602a      	str	r2, [r5, #0]
 8009794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009798:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800979c:	2301      	movs	r3, #1
 800979e:	e09f      	b.n	80098e0 <_printf_i+0x1ec>
 80097a0:	6820      	ldr	r0, [r4, #0]
 80097a2:	682b      	ldr	r3, [r5, #0]
 80097a4:	0607      	lsls	r7, r0, #24
 80097a6:	f103 0104 	add.w	r1, r3, #4
 80097aa:	6029      	str	r1, [r5, #0]
 80097ac:	d501      	bpl.n	80097b2 <_printf_i+0xbe>
 80097ae:	681e      	ldr	r6, [r3, #0]
 80097b0:	e003      	b.n	80097ba <_printf_i+0xc6>
 80097b2:	0646      	lsls	r6, r0, #25
 80097b4:	d5fb      	bpl.n	80097ae <_printf_i+0xba>
 80097b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80097ba:	2e00      	cmp	r6, #0
 80097bc:	da03      	bge.n	80097c6 <_printf_i+0xd2>
 80097be:	232d      	movs	r3, #45	; 0x2d
 80097c0:	4276      	negs	r6, r6
 80097c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097c6:	485a      	ldr	r0, [pc, #360]	; (8009930 <_printf_i+0x23c>)
 80097c8:	230a      	movs	r3, #10
 80097ca:	e012      	b.n	80097f2 <_printf_i+0xfe>
 80097cc:	682b      	ldr	r3, [r5, #0]
 80097ce:	6820      	ldr	r0, [r4, #0]
 80097d0:	1d19      	adds	r1, r3, #4
 80097d2:	6029      	str	r1, [r5, #0]
 80097d4:	0605      	lsls	r5, r0, #24
 80097d6:	d501      	bpl.n	80097dc <_printf_i+0xe8>
 80097d8:	681e      	ldr	r6, [r3, #0]
 80097da:	e002      	b.n	80097e2 <_printf_i+0xee>
 80097dc:	0641      	lsls	r1, r0, #25
 80097de:	d5fb      	bpl.n	80097d8 <_printf_i+0xe4>
 80097e0:	881e      	ldrh	r6, [r3, #0]
 80097e2:	4853      	ldr	r0, [pc, #332]	; (8009930 <_printf_i+0x23c>)
 80097e4:	2f6f      	cmp	r7, #111	; 0x6f
 80097e6:	bf0c      	ite	eq
 80097e8:	2308      	moveq	r3, #8
 80097ea:	230a      	movne	r3, #10
 80097ec:	2100      	movs	r1, #0
 80097ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80097f2:	6865      	ldr	r5, [r4, #4]
 80097f4:	60a5      	str	r5, [r4, #8]
 80097f6:	2d00      	cmp	r5, #0
 80097f8:	bfa2      	ittt	ge
 80097fa:	6821      	ldrge	r1, [r4, #0]
 80097fc:	f021 0104 	bicge.w	r1, r1, #4
 8009800:	6021      	strge	r1, [r4, #0]
 8009802:	b90e      	cbnz	r6, 8009808 <_printf_i+0x114>
 8009804:	2d00      	cmp	r5, #0
 8009806:	d04b      	beq.n	80098a0 <_printf_i+0x1ac>
 8009808:	4615      	mov	r5, r2
 800980a:	fbb6 f1f3 	udiv	r1, r6, r3
 800980e:	fb03 6711 	mls	r7, r3, r1, r6
 8009812:	5dc7      	ldrb	r7, [r0, r7]
 8009814:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009818:	4637      	mov	r7, r6
 800981a:	42bb      	cmp	r3, r7
 800981c:	460e      	mov	r6, r1
 800981e:	d9f4      	bls.n	800980a <_printf_i+0x116>
 8009820:	2b08      	cmp	r3, #8
 8009822:	d10b      	bne.n	800983c <_printf_i+0x148>
 8009824:	6823      	ldr	r3, [r4, #0]
 8009826:	07de      	lsls	r6, r3, #31
 8009828:	d508      	bpl.n	800983c <_printf_i+0x148>
 800982a:	6923      	ldr	r3, [r4, #16]
 800982c:	6861      	ldr	r1, [r4, #4]
 800982e:	4299      	cmp	r1, r3
 8009830:	bfde      	ittt	le
 8009832:	2330      	movle	r3, #48	; 0x30
 8009834:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009838:	f105 35ff 	addle.w	r5, r5, #4294967295
 800983c:	1b52      	subs	r2, r2, r5
 800983e:	6122      	str	r2, [r4, #16]
 8009840:	f8cd a000 	str.w	sl, [sp]
 8009844:	464b      	mov	r3, r9
 8009846:	aa03      	add	r2, sp, #12
 8009848:	4621      	mov	r1, r4
 800984a:	4640      	mov	r0, r8
 800984c:	f7ff fee4 	bl	8009618 <_printf_common>
 8009850:	3001      	adds	r0, #1
 8009852:	d14a      	bne.n	80098ea <_printf_i+0x1f6>
 8009854:	f04f 30ff 	mov.w	r0, #4294967295
 8009858:	b004      	add	sp, #16
 800985a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800985e:	6823      	ldr	r3, [r4, #0]
 8009860:	f043 0320 	orr.w	r3, r3, #32
 8009864:	6023      	str	r3, [r4, #0]
 8009866:	4833      	ldr	r0, [pc, #204]	; (8009934 <_printf_i+0x240>)
 8009868:	2778      	movs	r7, #120	; 0x78
 800986a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800986e:	6823      	ldr	r3, [r4, #0]
 8009870:	6829      	ldr	r1, [r5, #0]
 8009872:	061f      	lsls	r7, r3, #24
 8009874:	f851 6b04 	ldr.w	r6, [r1], #4
 8009878:	d402      	bmi.n	8009880 <_printf_i+0x18c>
 800987a:	065f      	lsls	r7, r3, #25
 800987c:	bf48      	it	mi
 800987e:	b2b6      	uxthmi	r6, r6
 8009880:	07df      	lsls	r7, r3, #31
 8009882:	bf48      	it	mi
 8009884:	f043 0320 	orrmi.w	r3, r3, #32
 8009888:	6029      	str	r1, [r5, #0]
 800988a:	bf48      	it	mi
 800988c:	6023      	strmi	r3, [r4, #0]
 800988e:	b91e      	cbnz	r6, 8009898 <_printf_i+0x1a4>
 8009890:	6823      	ldr	r3, [r4, #0]
 8009892:	f023 0320 	bic.w	r3, r3, #32
 8009896:	6023      	str	r3, [r4, #0]
 8009898:	2310      	movs	r3, #16
 800989a:	e7a7      	b.n	80097ec <_printf_i+0xf8>
 800989c:	4824      	ldr	r0, [pc, #144]	; (8009930 <_printf_i+0x23c>)
 800989e:	e7e4      	b.n	800986a <_printf_i+0x176>
 80098a0:	4615      	mov	r5, r2
 80098a2:	e7bd      	b.n	8009820 <_printf_i+0x12c>
 80098a4:	682b      	ldr	r3, [r5, #0]
 80098a6:	6826      	ldr	r6, [r4, #0]
 80098a8:	6961      	ldr	r1, [r4, #20]
 80098aa:	1d18      	adds	r0, r3, #4
 80098ac:	6028      	str	r0, [r5, #0]
 80098ae:	0635      	lsls	r5, r6, #24
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	d501      	bpl.n	80098b8 <_printf_i+0x1c4>
 80098b4:	6019      	str	r1, [r3, #0]
 80098b6:	e002      	b.n	80098be <_printf_i+0x1ca>
 80098b8:	0670      	lsls	r0, r6, #25
 80098ba:	d5fb      	bpl.n	80098b4 <_printf_i+0x1c0>
 80098bc:	8019      	strh	r1, [r3, #0]
 80098be:	2300      	movs	r3, #0
 80098c0:	6123      	str	r3, [r4, #16]
 80098c2:	4615      	mov	r5, r2
 80098c4:	e7bc      	b.n	8009840 <_printf_i+0x14c>
 80098c6:	682b      	ldr	r3, [r5, #0]
 80098c8:	1d1a      	adds	r2, r3, #4
 80098ca:	602a      	str	r2, [r5, #0]
 80098cc:	681d      	ldr	r5, [r3, #0]
 80098ce:	6862      	ldr	r2, [r4, #4]
 80098d0:	2100      	movs	r1, #0
 80098d2:	4628      	mov	r0, r5
 80098d4:	f7f6 fcb4 	bl	8000240 <memchr>
 80098d8:	b108      	cbz	r0, 80098de <_printf_i+0x1ea>
 80098da:	1b40      	subs	r0, r0, r5
 80098dc:	6060      	str	r0, [r4, #4]
 80098de:	6863      	ldr	r3, [r4, #4]
 80098e0:	6123      	str	r3, [r4, #16]
 80098e2:	2300      	movs	r3, #0
 80098e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098e8:	e7aa      	b.n	8009840 <_printf_i+0x14c>
 80098ea:	6923      	ldr	r3, [r4, #16]
 80098ec:	462a      	mov	r2, r5
 80098ee:	4649      	mov	r1, r9
 80098f0:	4640      	mov	r0, r8
 80098f2:	47d0      	blx	sl
 80098f4:	3001      	adds	r0, #1
 80098f6:	d0ad      	beq.n	8009854 <_printf_i+0x160>
 80098f8:	6823      	ldr	r3, [r4, #0]
 80098fa:	079b      	lsls	r3, r3, #30
 80098fc:	d413      	bmi.n	8009926 <_printf_i+0x232>
 80098fe:	68e0      	ldr	r0, [r4, #12]
 8009900:	9b03      	ldr	r3, [sp, #12]
 8009902:	4298      	cmp	r0, r3
 8009904:	bfb8      	it	lt
 8009906:	4618      	movlt	r0, r3
 8009908:	e7a6      	b.n	8009858 <_printf_i+0x164>
 800990a:	2301      	movs	r3, #1
 800990c:	4632      	mov	r2, r6
 800990e:	4649      	mov	r1, r9
 8009910:	4640      	mov	r0, r8
 8009912:	47d0      	blx	sl
 8009914:	3001      	adds	r0, #1
 8009916:	d09d      	beq.n	8009854 <_printf_i+0x160>
 8009918:	3501      	adds	r5, #1
 800991a:	68e3      	ldr	r3, [r4, #12]
 800991c:	9903      	ldr	r1, [sp, #12]
 800991e:	1a5b      	subs	r3, r3, r1
 8009920:	42ab      	cmp	r3, r5
 8009922:	dcf2      	bgt.n	800990a <_printf_i+0x216>
 8009924:	e7eb      	b.n	80098fe <_printf_i+0x20a>
 8009926:	2500      	movs	r5, #0
 8009928:	f104 0619 	add.w	r6, r4, #25
 800992c:	e7f5      	b.n	800991a <_printf_i+0x226>
 800992e:	bf00      	nop
 8009930:	0800c04f 	.word	0x0800c04f
 8009934:	0800c060 	.word	0x0800c060

08009938 <std>:
 8009938:	2300      	movs	r3, #0
 800993a:	b510      	push	{r4, lr}
 800993c:	4604      	mov	r4, r0
 800993e:	e9c0 3300 	strd	r3, r3, [r0]
 8009942:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009946:	6083      	str	r3, [r0, #8]
 8009948:	8181      	strh	r1, [r0, #12]
 800994a:	6643      	str	r3, [r0, #100]	; 0x64
 800994c:	81c2      	strh	r2, [r0, #14]
 800994e:	6183      	str	r3, [r0, #24]
 8009950:	4619      	mov	r1, r3
 8009952:	2208      	movs	r2, #8
 8009954:	305c      	adds	r0, #92	; 0x5c
 8009956:	f000 f936 	bl	8009bc6 <memset>
 800995a:	4b05      	ldr	r3, [pc, #20]	; (8009970 <std+0x38>)
 800995c:	6263      	str	r3, [r4, #36]	; 0x24
 800995e:	4b05      	ldr	r3, [pc, #20]	; (8009974 <std+0x3c>)
 8009960:	62a3      	str	r3, [r4, #40]	; 0x28
 8009962:	4b05      	ldr	r3, [pc, #20]	; (8009978 <std+0x40>)
 8009964:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009966:	4b05      	ldr	r3, [pc, #20]	; (800997c <std+0x44>)
 8009968:	6224      	str	r4, [r4, #32]
 800996a:	6323      	str	r3, [r4, #48]	; 0x30
 800996c:	bd10      	pop	{r4, pc}
 800996e:	bf00      	nop
 8009970:	08009b41 	.word	0x08009b41
 8009974:	08009b63 	.word	0x08009b63
 8009978:	08009b9b 	.word	0x08009b9b
 800997c:	08009bbf 	.word	0x08009bbf

08009980 <stdio_exit_handler>:
 8009980:	4a02      	ldr	r2, [pc, #8]	; (800998c <stdio_exit_handler+0xc>)
 8009982:	4903      	ldr	r1, [pc, #12]	; (8009990 <stdio_exit_handler+0x10>)
 8009984:	4803      	ldr	r0, [pc, #12]	; (8009994 <stdio_exit_handler+0x14>)
 8009986:	f000 b869 	b.w	8009a5c <_fwalk_sglue>
 800998a:	bf00      	nop
 800998c:	200000c8 	.word	0x200000c8
 8009990:	0800b761 	.word	0x0800b761
 8009994:	200000d4 	.word	0x200000d4

08009998 <cleanup_stdio>:
 8009998:	6841      	ldr	r1, [r0, #4]
 800999a:	4b0c      	ldr	r3, [pc, #48]	; (80099cc <cleanup_stdio+0x34>)
 800999c:	4299      	cmp	r1, r3
 800999e:	b510      	push	{r4, lr}
 80099a0:	4604      	mov	r4, r0
 80099a2:	d001      	beq.n	80099a8 <cleanup_stdio+0x10>
 80099a4:	f001 fedc 	bl	800b760 <_fflush_r>
 80099a8:	68a1      	ldr	r1, [r4, #8]
 80099aa:	4b09      	ldr	r3, [pc, #36]	; (80099d0 <cleanup_stdio+0x38>)
 80099ac:	4299      	cmp	r1, r3
 80099ae:	d002      	beq.n	80099b6 <cleanup_stdio+0x1e>
 80099b0:	4620      	mov	r0, r4
 80099b2:	f001 fed5 	bl	800b760 <_fflush_r>
 80099b6:	68e1      	ldr	r1, [r4, #12]
 80099b8:	4b06      	ldr	r3, [pc, #24]	; (80099d4 <cleanup_stdio+0x3c>)
 80099ba:	4299      	cmp	r1, r3
 80099bc:	d004      	beq.n	80099c8 <cleanup_stdio+0x30>
 80099be:	4620      	mov	r0, r4
 80099c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099c4:	f001 becc 	b.w	800b760 <_fflush_r>
 80099c8:	bd10      	pop	{r4, pc}
 80099ca:	bf00      	nop
 80099cc:	20000650 	.word	0x20000650
 80099d0:	200006b8 	.word	0x200006b8
 80099d4:	20000720 	.word	0x20000720

080099d8 <global_stdio_init.part.0>:
 80099d8:	b510      	push	{r4, lr}
 80099da:	4b0b      	ldr	r3, [pc, #44]	; (8009a08 <global_stdio_init.part.0+0x30>)
 80099dc:	4c0b      	ldr	r4, [pc, #44]	; (8009a0c <global_stdio_init.part.0+0x34>)
 80099de:	4a0c      	ldr	r2, [pc, #48]	; (8009a10 <global_stdio_init.part.0+0x38>)
 80099e0:	601a      	str	r2, [r3, #0]
 80099e2:	4620      	mov	r0, r4
 80099e4:	2200      	movs	r2, #0
 80099e6:	2104      	movs	r1, #4
 80099e8:	f7ff ffa6 	bl	8009938 <std>
 80099ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80099f0:	2201      	movs	r2, #1
 80099f2:	2109      	movs	r1, #9
 80099f4:	f7ff ffa0 	bl	8009938 <std>
 80099f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80099fc:	2202      	movs	r2, #2
 80099fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a02:	2112      	movs	r1, #18
 8009a04:	f7ff bf98 	b.w	8009938 <std>
 8009a08:	20000788 	.word	0x20000788
 8009a0c:	20000650 	.word	0x20000650
 8009a10:	08009981 	.word	0x08009981

08009a14 <__sfp_lock_acquire>:
 8009a14:	4801      	ldr	r0, [pc, #4]	; (8009a1c <__sfp_lock_acquire+0x8>)
 8009a16:	f000 b9af 	b.w	8009d78 <__retarget_lock_acquire_recursive>
 8009a1a:	bf00      	nop
 8009a1c:	20000791 	.word	0x20000791

08009a20 <__sfp_lock_release>:
 8009a20:	4801      	ldr	r0, [pc, #4]	; (8009a28 <__sfp_lock_release+0x8>)
 8009a22:	f000 b9aa 	b.w	8009d7a <__retarget_lock_release_recursive>
 8009a26:	bf00      	nop
 8009a28:	20000791 	.word	0x20000791

08009a2c <__sinit>:
 8009a2c:	b510      	push	{r4, lr}
 8009a2e:	4604      	mov	r4, r0
 8009a30:	f7ff fff0 	bl	8009a14 <__sfp_lock_acquire>
 8009a34:	6a23      	ldr	r3, [r4, #32]
 8009a36:	b11b      	cbz	r3, 8009a40 <__sinit+0x14>
 8009a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a3c:	f7ff bff0 	b.w	8009a20 <__sfp_lock_release>
 8009a40:	4b04      	ldr	r3, [pc, #16]	; (8009a54 <__sinit+0x28>)
 8009a42:	6223      	str	r3, [r4, #32]
 8009a44:	4b04      	ldr	r3, [pc, #16]	; (8009a58 <__sinit+0x2c>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d1f5      	bne.n	8009a38 <__sinit+0xc>
 8009a4c:	f7ff ffc4 	bl	80099d8 <global_stdio_init.part.0>
 8009a50:	e7f2      	b.n	8009a38 <__sinit+0xc>
 8009a52:	bf00      	nop
 8009a54:	08009999 	.word	0x08009999
 8009a58:	20000788 	.word	0x20000788

08009a5c <_fwalk_sglue>:
 8009a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a60:	4607      	mov	r7, r0
 8009a62:	4688      	mov	r8, r1
 8009a64:	4614      	mov	r4, r2
 8009a66:	2600      	movs	r6, #0
 8009a68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a6c:	f1b9 0901 	subs.w	r9, r9, #1
 8009a70:	d505      	bpl.n	8009a7e <_fwalk_sglue+0x22>
 8009a72:	6824      	ldr	r4, [r4, #0]
 8009a74:	2c00      	cmp	r4, #0
 8009a76:	d1f7      	bne.n	8009a68 <_fwalk_sglue+0xc>
 8009a78:	4630      	mov	r0, r6
 8009a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a7e:	89ab      	ldrh	r3, [r5, #12]
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d907      	bls.n	8009a94 <_fwalk_sglue+0x38>
 8009a84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a88:	3301      	adds	r3, #1
 8009a8a:	d003      	beq.n	8009a94 <_fwalk_sglue+0x38>
 8009a8c:	4629      	mov	r1, r5
 8009a8e:	4638      	mov	r0, r7
 8009a90:	47c0      	blx	r8
 8009a92:	4306      	orrs	r6, r0
 8009a94:	3568      	adds	r5, #104	; 0x68
 8009a96:	e7e9      	b.n	8009a6c <_fwalk_sglue+0x10>

08009a98 <sniprintf>:
 8009a98:	b40c      	push	{r2, r3}
 8009a9a:	b530      	push	{r4, r5, lr}
 8009a9c:	4b17      	ldr	r3, [pc, #92]	; (8009afc <sniprintf+0x64>)
 8009a9e:	1e0c      	subs	r4, r1, #0
 8009aa0:	681d      	ldr	r5, [r3, #0]
 8009aa2:	b09d      	sub	sp, #116	; 0x74
 8009aa4:	da08      	bge.n	8009ab8 <sniprintf+0x20>
 8009aa6:	238b      	movs	r3, #139	; 0x8b
 8009aa8:	602b      	str	r3, [r5, #0]
 8009aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8009aae:	b01d      	add	sp, #116	; 0x74
 8009ab0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ab4:	b002      	add	sp, #8
 8009ab6:	4770      	bx	lr
 8009ab8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009abc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009ac0:	bf14      	ite	ne
 8009ac2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009ac6:	4623      	moveq	r3, r4
 8009ac8:	9304      	str	r3, [sp, #16]
 8009aca:	9307      	str	r3, [sp, #28]
 8009acc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009ad0:	9002      	str	r0, [sp, #8]
 8009ad2:	9006      	str	r0, [sp, #24]
 8009ad4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009ad8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009ada:	ab21      	add	r3, sp, #132	; 0x84
 8009adc:	a902      	add	r1, sp, #8
 8009ade:	4628      	mov	r0, r5
 8009ae0:	9301      	str	r3, [sp, #4]
 8009ae2:	f001 fcb9 	bl	800b458 <_svfiprintf_r>
 8009ae6:	1c43      	adds	r3, r0, #1
 8009ae8:	bfbc      	itt	lt
 8009aea:	238b      	movlt	r3, #139	; 0x8b
 8009aec:	602b      	strlt	r3, [r5, #0]
 8009aee:	2c00      	cmp	r4, #0
 8009af0:	d0dd      	beq.n	8009aae <sniprintf+0x16>
 8009af2:	9b02      	ldr	r3, [sp, #8]
 8009af4:	2200      	movs	r2, #0
 8009af6:	701a      	strb	r2, [r3, #0]
 8009af8:	e7d9      	b.n	8009aae <sniprintf+0x16>
 8009afa:	bf00      	nop
 8009afc:	20000120 	.word	0x20000120

08009b00 <siprintf>:
 8009b00:	b40e      	push	{r1, r2, r3}
 8009b02:	b500      	push	{lr}
 8009b04:	b09c      	sub	sp, #112	; 0x70
 8009b06:	ab1d      	add	r3, sp, #116	; 0x74
 8009b08:	9002      	str	r0, [sp, #8]
 8009b0a:	9006      	str	r0, [sp, #24]
 8009b0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b10:	4809      	ldr	r0, [pc, #36]	; (8009b38 <siprintf+0x38>)
 8009b12:	9107      	str	r1, [sp, #28]
 8009b14:	9104      	str	r1, [sp, #16]
 8009b16:	4909      	ldr	r1, [pc, #36]	; (8009b3c <siprintf+0x3c>)
 8009b18:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b1c:	9105      	str	r1, [sp, #20]
 8009b1e:	6800      	ldr	r0, [r0, #0]
 8009b20:	9301      	str	r3, [sp, #4]
 8009b22:	a902      	add	r1, sp, #8
 8009b24:	f001 fc98 	bl	800b458 <_svfiprintf_r>
 8009b28:	9b02      	ldr	r3, [sp, #8]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	701a      	strb	r2, [r3, #0]
 8009b2e:	b01c      	add	sp, #112	; 0x70
 8009b30:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b34:	b003      	add	sp, #12
 8009b36:	4770      	bx	lr
 8009b38:	20000120 	.word	0x20000120
 8009b3c:	ffff0208 	.word	0xffff0208

08009b40 <__sread>:
 8009b40:	b510      	push	{r4, lr}
 8009b42:	460c      	mov	r4, r1
 8009b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b48:	f000 f8c8 	bl	8009cdc <_read_r>
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	bfab      	itete	ge
 8009b50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b52:	89a3      	ldrhlt	r3, [r4, #12]
 8009b54:	181b      	addge	r3, r3, r0
 8009b56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b5a:	bfac      	ite	ge
 8009b5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b5e:	81a3      	strhlt	r3, [r4, #12]
 8009b60:	bd10      	pop	{r4, pc}

08009b62 <__swrite>:
 8009b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b66:	461f      	mov	r7, r3
 8009b68:	898b      	ldrh	r3, [r1, #12]
 8009b6a:	05db      	lsls	r3, r3, #23
 8009b6c:	4605      	mov	r5, r0
 8009b6e:	460c      	mov	r4, r1
 8009b70:	4616      	mov	r6, r2
 8009b72:	d505      	bpl.n	8009b80 <__swrite+0x1e>
 8009b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b78:	2302      	movs	r3, #2
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f000 f89c 	bl	8009cb8 <_lseek_r>
 8009b80:	89a3      	ldrh	r3, [r4, #12]
 8009b82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b8a:	81a3      	strh	r3, [r4, #12]
 8009b8c:	4632      	mov	r2, r6
 8009b8e:	463b      	mov	r3, r7
 8009b90:	4628      	mov	r0, r5
 8009b92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b96:	f000 b8b3 	b.w	8009d00 <_write_r>

08009b9a <__sseek>:
 8009b9a:	b510      	push	{r4, lr}
 8009b9c:	460c      	mov	r4, r1
 8009b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ba2:	f000 f889 	bl	8009cb8 <_lseek_r>
 8009ba6:	1c43      	adds	r3, r0, #1
 8009ba8:	89a3      	ldrh	r3, [r4, #12]
 8009baa:	bf15      	itete	ne
 8009bac:	6560      	strne	r0, [r4, #84]	; 0x54
 8009bae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009bb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009bb6:	81a3      	strheq	r3, [r4, #12]
 8009bb8:	bf18      	it	ne
 8009bba:	81a3      	strhne	r3, [r4, #12]
 8009bbc:	bd10      	pop	{r4, pc}

08009bbe <__sclose>:
 8009bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bc2:	f000 b869 	b.w	8009c98 <_close_r>

08009bc6 <memset>:
 8009bc6:	4402      	add	r2, r0
 8009bc8:	4603      	mov	r3, r0
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d100      	bne.n	8009bd0 <memset+0xa>
 8009bce:	4770      	bx	lr
 8009bd0:	f803 1b01 	strb.w	r1, [r3], #1
 8009bd4:	e7f9      	b.n	8009bca <memset+0x4>
	...

08009bd8 <strtok>:
 8009bd8:	4b16      	ldr	r3, [pc, #88]	; (8009c34 <strtok+0x5c>)
 8009bda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009bdc:	681e      	ldr	r6, [r3, #0]
 8009bde:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8009be0:	4605      	mov	r5, r0
 8009be2:	b9fc      	cbnz	r4, 8009c24 <strtok+0x4c>
 8009be4:	2050      	movs	r0, #80	; 0x50
 8009be6:	9101      	str	r1, [sp, #4]
 8009be8:	f000 ffac 	bl	800ab44 <malloc>
 8009bec:	9901      	ldr	r1, [sp, #4]
 8009bee:	6470      	str	r0, [r6, #68]	; 0x44
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	b920      	cbnz	r0, 8009bfe <strtok+0x26>
 8009bf4:	4b10      	ldr	r3, [pc, #64]	; (8009c38 <strtok+0x60>)
 8009bf6:	4811      	ldr	r0, [pc, #68]	; (8009c3c <strtok+0x64>)
 8009bf8:	215b      	movs	r1, #91	; 0x5b
 8009bfa:	f000 f8bf 	bl	8009d7c <__assert_func>
 8009bfe:	e9c0 4400 	strd	r4, r4, [r0]
 8009c02:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009c06:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009c0a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009c0e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009c12:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009c16:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009c1a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009c1e:	6184      	str	r4, [r0, #24]
 8009c20:	7704      	strb	r4, [r0, #28]
 8009c22:	6244      	str	r4, [r0, #36]	; 0x24
 8009c24:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8009c26:	2301      	movs	r3, #1
 8009c28:	4628      	mov	r0, r5
 8009c2a:	b002      	add	sp, #8
 8009c2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009c30:	f000 b806 	b.w	8009c40 <__strtok_r>
 8009c34:	20000120 	.word	0x20000120
 8009c38:	0800c071 	.word	0x0800c071
 8009c3c:	0800c088 	.word	0x0800c088

08009c40 <__strtok_r>:
 8009c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c42:	b908      	cbnz	r0, 8009c48 <__strtok_r+0x8>
 8009c44:	6810      	ldr	r0, [r2, #0]
 8009c46:	b188      	cbz	r0, 8009c6c <__strtok_r+0x2c>
 8009c48:	4604      	mov	r4, r0
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009c50:	460f      	mov	r7, r1
 8009c52:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009c56:	b91e      	cbnz	r6, 8009c60 <__strtok_r+0x20>
 8009c58:	b965      	cbnz	r5, 8009c74 <__strtok_r+0x34>
 8009c5a:	6015      	str	r5, [r2, #0]
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	e005      	b.n	8009c6c <__strtok_r+0x2c>
 8009c60:	42b5      	cmp	r5, r6
 8009c62:	d1f6      	bne.n	8009c52 <__strtok_r+0x12>
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d1f0      	bne.n	8009c4a <__strtok_r+0xa>
 8009c68:	6014      	str	r4, [r2, #0]
 8009c6a:	7003      	strb	r3, [r0, #0]
 8009c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c6e:	461c      	mov	r4, r3
 8009c70:	e00c      	b.n	8009c8c <__strtok_r+0x4c>
 8009c72:	b915      	cbnz	r5, 8009c7a <__strtok_r+0x3a>
 8009c74:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009c78:	460e      	mov	r6, r1
 8009c7a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009c7e:	42ab      	cmp	r3, r5
 8009c80:	d1f7      	bne.n	8009c72 <__strtok_r+0x32>
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d0f3      	beq.n	8009c6e <__strtok_r+0x2e>
 8009c86:	2300      	movs	r3, #0
 8009c88:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009c8c:	6014      	str	r4, [r2, #0]
 8009c8e:	e7ed      	b.n	8009c6c <__strtok_r+0x2c>

08009c90 <_localeconv_r>:
 8009c90:	4800      	ldr	r0, [pc, #0]	; (8009c94 <_localeconv_r+0x4>)
 8009c92:	4770      	bx	lr
 8009c94:	20000214 	.word	0x20000214

08009c98 <_close_r>:
 8009c98:	b538      	push	{r3, r4, r5, lr}
 8009c9a:	4d06      	ldr	r5, [pc, #24]	; (8009cb4 <_close_r+0x1c>)
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	4604      	mov	r4, r0
 8009ca0:	4608      	mov	r0, r1
 8009ca2:	602b      	str	r3, [r5, #0]
 8009ca4:	f7f7 fdad 	bl	8001802 <_close>
 8009ca8:	1c43      	adds	r3, r0, #1
 8009caa:	d102      	bne.n	8009cb2 <_close_r+0x1a>
 8009cac:	682b      	ldr	r3, [r5, #0]
 8009cae:	b103      	cbz	r3, 8009cb2 <_close_r+0x1a>
 8009cb0:	6023      	str	r3, [r4, #0]
 8009cb2:	bd38      	pop	{r3, r4, r5, pc}
 8009cb4:	2000078c 	.word	0x2000078c

08009cb8 <_lseek_r>:
 8009cb8:	b538      	push	{r3, r4, r5, lr}
 8009cba:	4d07      	ldr	r5, [pc, #28]	; (8009cd8 <_lseek_r+0x20>)
 8009cbc:	4604      	mov	r4, r0
 8009cbe:	4608      	mov	r0, r1
 8009cc0:	4611      	mov	r1, r2
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	602a      	str	r2, [r5, #0]
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	f7f7 fdc2 	bl	8001850 <_lseek>
 8009ccc:	1c43      	adds	r3, r0, #1
 8009cce:	d102      	bne.n	8009cd6 <_lseek_r+0x1e>
 8009cd0:	682b      	ldr	r3, [r5, #0]
 8009cd2:	b103      	cbz	r3, 8009cd6 <_lseek_r+0x1e>
 8009cd4:	6023      	str	r3, [r4, #0]
 8009cd6:	bd38      	pop	{r3, r4, r5, pc}
 8009cd8:	2000078c 	.word	0x2000078c

08009cdc <_read_r>:
 8009cdc:	b538      	push	{r3, r4, r5, lr}
 8009cde:	4d07      	ldr	r5, [pc, #28]	; (8009cfc <_read_r+0x20>)
 8009ce0:	4604      	mov	r4, r0
 8009ce2:	4608      	mov	r0, r1
 8009ce4:	4611      	mov	r1, r2
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	602a      	str	r2, [r5, #0]
 8009cea:	461a      	mov	r2, r3
 8009cec:	f7f7 fd50 	bl	8001790 <_read>
 8009cf0:	1c43      	adds	r3, r0, #1
 8009cf2:	d102      	bne.n	8009cfa <_read_r+0x1e>
 8009cf4:	682b      	ldr	r3, [r5, #0]
 8009cf6:	b103      	cbz	r3, 8009cfa <_read_r+0x1e>
 8009cf8:	6023      	str	r3, [r4, #0]
 8009cfa:	bd38      	pop	{r3, r4, r5, pc}
 8009cfc:	2000078c 	.word	0x2000078c

08009d00 <_write_r>:
 8009d00:	b538      	push	{r3, r4, r5, lr}
 8009d02:	4d07      	ldr	r5, [pc, #28]	; (8009d20 <_write_r+0x20>)
 8009d04:	4604      	mov	r4, r0
 8009d06:	4608      	mov	r0, r1
 8009d08:	4611      	mov	r1, r2
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	602a      	str	r2, [r5, #0]
 8009d0e:	461a      	mov	r2, r3
 8009d10:	f7f7 fd5b 	bl	80017ca <_write>
 8009d14:	1c43      	adds	r3, r0, #1
 8009d16:	d102      	bne.n	8009d1e <_write_r+0x1e>
 8009d18:	682b      	ldr	r3, [r5, #0]
 8009d1a:	b103      	cbz	r3, 8009d1e <_write_r+0x1e>
 8009d1c:	6023      	str	r3, [r4, #0]
 8009d1e:	bd38      	pop	{r3, r4, r5, pc}
 8009d20:	2000078c 	.word	0x2000078c

08009d24 <__errno>:
 8009d24:	4b01      	ldr	r3, [pc, #4]	; (8009d2c <__errno+0x8>)
 8009d26:	6818      	ldr	r0, [r3, #0]
 8009d28:	4770      	bx	lr
 8009d2a:	bf00      	nop
 8009d2c:	20000120 	.word	0x20000120

08009d30 <__libc_init_array>:
 8009d30:	b570      	push	{r4, r5, r6, lr}
 8009d32:	4d0d      	ldr	r5, [pc, #52]	; (8009d68 <__libc_init_array+0x38>)
 8009d34:	4c0d      	ldr	r4, [pc, #52]	; (8009d6c <__libc_init_array+0x3c>)
 8009d36:	1b64      	subs	r4, r4, r5
 8009d38:	10a4      	asrs	r4, r4, #2
 8009d3a:	2600      	movs	r6, #0
 8009d3c:	42a6      	cmp	r6, r4
 8009d3e:	d109      	bne.n	8009d54 <__libc_init_array+0x24>
 8009d40:	4d0b      	ldr	r5, [pc, #44]	; (8009d70 <__libc_init_array+0x40>)
 8009d42:	4c0c      	ldr	r4, [pc, #48]	; (8009d74 <__libc_init_array+0x44>)
 8009d44:	f002 f892 	bl	800be6c <_init>
 8009d48:	1b64      	subs	r4, r4, r5
 8009d4a:	10a4      	asrs	r4, r4, #2
 8009d4c:	2600      	movs	r6, #0
 8009d4e:	42a6      	cmp	r6, r4
 8009d50:	d105      	bne.n	8009d5e <__libc_init_array+0x2e>
 8009d52:	bd70      	pop	{r4, r5, r6, pc}
 8009d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d58:	4798      	blx	r3
 8009d5a:	3601      	adds	r6, #1
 8009d5c:	e7ee      	b.n	8009d3c <__libc_init_array+0xc>
 8009d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d62:	4798      	blx	r3
 8009d64:	3601      	adds	r6, #1
 8009d66:	e7f2      	b.n	8009d4e <__libc_init_array+0x1e>
 8009d68:	0800c310 	.word	0x0800c310
 8009d6c:	0800c310 	.word	0x0800c310
 8009d70:	0800c310 	.word	0x0800c310
 8009d74:	0800c314 	.word	0x0800c314

08009d78 <__retarget_lock_acquire_recursive>:
 8009d78:	4770      	bx	lr

08009d7a <__retarget_lock_release_recursive>:
 8009d7a:	4770      	bx	lr

08009d7c <__assert_func>:
 8009d7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d7e:	4614      	mov	r4, r2
 8009d80:	461a      	mov	r2, r3
 8009d82:	4b09      	ldr	r3, [pc, #36]	; (8009da8 <__assert_func+0x2c>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4605      	mov	r5, r0
 8009d88:	68d8      	ldr	r0, [r3, #12]
 8009d8a:	b14c      	cbz	r4, 8009da0 <__assert_func+0x24>
 8009d8c:	4b07      	ldr	r3, [pc, #28]	; (8009dac <__assert_func+0x30>)
 8009d8e:	9100      	str	r1, [sp, #0]
 8009d90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d94:	4906      	ldr	r1, [pc, #24]	; (8009db0 <__assert_func+0x34>)
 8009d96:	462b      	mov	r3, r5
 8009d98:	f001 fd0a 	bl	800b7b0 <fiprintf>
 8009d9c:	f001 fd52 	bl	800b844 <abort>
 8009da0:	4b04      	ldr	r3, [pc, #16]	; (8009db4 <__assert_func+0x38>)
 8009da2:	461c      	mov	r4, r3
 8009da4:	e7f3      	b.n	8009d8e <__assert_func+0x12>
 8009da6:	bf00      	nop
 8009da8:	20000120 	.word	0x20000120
 8009dac:	0800c0e2 	.word	0x0800c0e2
 8009db0:	0800c0ef 	.word	0x0800c0ef
 8009db4:	0800c11d 	.word	0x0800c11d

08009db8 <quorem>:
 8009db8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dbc:	6903      	ldr	r3, [r0, #16]
 8009dbe:	690c      	ldr	r4, [r1, #16]
 8009dc0:	42a3      	cmp	r3, r4
 8009dc2:	4607      	mov	r7, r0
 8009dc4:	db7e      	blt.n	8009ec4 <quorem+0x10c>
 8009dc6:	3c01      	subs	r4, #1
 8009dc8:	f101 0814 	add.w	r8, r1, #20
 8009dcc:	f100 0514 	add.w	r5, r0, #20
 8009dd0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009dd4:	9301      	str	r3, [sp, #4]
 8009dd6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009dda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009dde:	3301      	adds	r3, #1
 8009de0:	429a      	cmp	r2, r3
 8009de2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009de6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009dea:	fbb2 f6f3 	udiv	r6, r2, r3
 8009dee:	d331      	bcc.n	8009e54 <quorem+0x9c>
 8009df0:	f04f 0e00 	mov.w	lr, #0
 8009df4:	4640      	mov	r0, r8
 8009df6:	46ac      	mov	ip, r5
 8009df8:	46f2      	mov	sl, lr
 8009dfa:	f850 2b04 	ldr.w	r2, [r0], #4
 8009dfe:	b293      	uxth	r3, r2
 8009e00:	fb06 e303 	mla	r3, r6, r3, lr
 8009e04:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e08:	0c1a      	lsrs	r2, r3, #16
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	ebaa 0303 	sub.w	r3, sl, r3
 8009e10:	f8dc a000 	ldr.w	sl, [ip]
 8009e14:	fa13 f38a 	uxtah	r3, r3, sl
 8009e18:	fb06 220e 	mla	r2, r6, lr, r2
 8009e1c:	9300      	str	r3, [sp, #0]
 8009e1e:	9b00      	ldr	r3, [sp, #0]
 8009e20:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e24:	b292      	uxth	r2, r2
 8009e26:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009e2a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e2e:	f8bd 3000 	ldrh.w	r3, [sp]
 8009e32:	4581      	cmp	r9, r0
 8009e34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e38:	f84c 3b04 	str.w	r3, [ip], #4
 8009e3c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009e40:	d2db      	bcs.n	8009dfa <quorem+0x42>
 8009e42:	f855 300b 	ldr.w	r3, [r5, fp]
 8009e46:	b92b      	cbnz	r3, 8009e54 <quorem+0x9c>
 8009e48:	9b01      	ldr	r3, [sp, #4]
 8009e4a:	3b04      	subs	r3, #4
 8009e4c:	429d      	cmp	r5, r3
 8009e4e:	461a      	mov	r2, r3
 8009e50:	d32c      	bcc.n	8009eac <quorem+0xf4>
 8009e52:	613c      	str	r4, [r7, #16]
 8009e54:	4638      	mov	r0, r7
 8009e56:	f001 f9a5 	bl	800b1a4 <__mcmp>
 8009e5a:	2800      	cmp	r0, #0
 8009e5c:	db22      	blt.n	8009ea4 <quorem+0xec>
 8009e5e:	3601      	adds	r6, #1
 8009e60:	4629      	mov	r1, r5
 8009e62:	2000      	movs	r0, #0
 8009e64:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e68:	f8d1 c000 	ldr.w	ip, [r1]
 8009e6c:	b293      	uxth	r3, r2
 8009e6e:	1ac3      	subs	r3, r0, r3
 8009e70:	0c12      	lsrs	r2, r2, #16
 8009e72:	fa13 f38c 	uxtah	r3, r3, ip
 8009e76:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009e7a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e84:	45c1      	cmp	r9, r8
 8009e86:	f841 3b04 	str.w	r3, [r1], #4
 8009e8a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009e8e:	d2e9      	bcs.n	8009e64 <quorem+0xac>
 8009e90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e98:	b922      	cbnz	r2, 8009ea4 <quorem+0xec>
 8009e9a:	3b04      	subs	r3, #4
 8009e9c:	429d      	cmp	r5, r3
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	d30a      	bcc.n	8009eb8 <quorem+0x100>
 8009ea2:	613c      	str	r4, [r7, #16]
 8009ea4:	4630      	mov	r0, r6
 8009ea6:	b003      	add	sp, #12
 8009ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eac:	6812      	ldr	r2, [r2, #0]
 8009eae:	3b04      	subs	r3, #4
 8009eb0:	2a00      	cmp	r2, #0
 8009eb2:	d1ce      	bne.n	8009e52 <quorem+0x9a>
 8009eb4:	3c01      	subs	r4, #1
 8009eb6:	e7c9      	b.n	8009e4c <quorem+0x94>
 8009eb8:	6812      	ldr	r2, [r2, #0]
 8009eba:	3b04      	subs	r3, #4
 8009ebc:	2a00      	cmp	r2, #0
 8009ebe:	d1f0      	bne.n	8009ea2 <quorem+0xea>
 8009ec0:	3c01      	subs	r4, #1
 8009ec2:	e7eb      	b.n	8009e9c <quorem+0xe4>
 8009ec4:	2000      	movs	r0, #0
 8009ec6:	e7ee      	b.n	8009ea6 <quorem+0xee>

08009ec8 <_dtoa_r>:
 8009ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ecc:	ed2d 8b04 	vpush	{d8-d9}
 8009ed0:	69c5      	ldr	r5, [r0, #28]
 8009ed2:	b093      	sub	sp, #76	; 0x4c
 8009ed4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009ed8:	ec57 6b10 	vmov	r6, r7, d0
 8009edc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009ee0:	9107      	str	r1, [sp, #28]
 8009ee2:	4604      	mov	r4, r0
 8009ee4:	920a      	str	r2, [sp, #40]	; 0x28
 8009ee6:	930d      	str	r3, [sp, #52]	; 0x34
 8009ee8:	b975      	cbnz	r5, 8009f08 <_dtoa_r+0x40>
 8009eea:	2010      	movs	r0, #16
 8009eec:	f000 fe2a 	bl	800ab44 <malloc>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	61e0      	str	r0, [r4, #28]
 8009ef4:	b920      	cbnz	r0, 8009f00 <_dtoa_r+0x38>
 8009ef6:	4bae      	ldr	r3, [pc, #696]	; (800a1b0 <_dtoa_r+0x2e8>)
 8009ef8:	21ef      	movs	r1, #239	; 0xef
 8009efa:	48ae      	ldr	r0, [pc, #696]	; (800a1b4 <_dtoa_r+0x2ec>)
 8009efc:	f7ff ff3e 	bl	8009d7c <__assert_func>
 8009f00:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009f04:	6005      	str	r5, [r0, #0]
 8009f06:	60c5      	str	r5, [r0, #12]
 8009f08:	69e3      	ldr	r3, [r4, #28]
 8009f0a:	6819      	ldr	r1, [r3, #0]
 8009f0c:	b151      	cbz	r1, 8009f24 <_dtoa_r+0x5c>
 8009f0e:	685a      	ldr	r2, [r3, #4]
 8009f10:	604a      	str	r2, [r1, #4]
 8009f12:	2301      	movs	r3, #1
 8009f14:	4093      	lsls	r3, r2
 8009f16:	608b      	str	r3, [r1, #8]
 8009f18:	4620      	mov	r0, r4
 8009f1a:	f000 ff07 	bl	800ad2c <_Bfree>
 8009f1e:	69e3      	ldr	r3, [r4, #28]
 8009f20:	2200      	movs	r2, #0
 8009f22:	601a      	str	r2, [r3, #0]
 8009f24:	1e3b      	subs	r3, r7, #0
 8009f26:	bfbb      	ittet	lt
 8009f28:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009f2c:	9303      	strlt	r3, [sp, #12]
 8009f2e:	2300      	movge	r3, #0
 8009f30:	2201      	movlt	r2, #1
 8009f32:	bfac      	ite	ge
 8009f34:	f8c8 3000 	strge.w	r3, [r8]
 8009f38:	f8c8 2000 	strlt.w	r2, [r8]
 8009f3c:	4b9e      	ldr	r3, [pc, #632]	; (800a1b8 <_dtoa_r+0x2f0>)
 8009f3e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009f42:	ea33 0308 	bics.w	r3, r3, r8
 8009f46:	d11b      	bne.n	8009f80 <_dtoa_r+0xb8>
 8009f48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f4a:	f242 730f 	movw	r3, #9999	; 0x270f
 8009f4e:	6013      	str	r3, [r2, #0]
 8009f50:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009f54:	4333      	orrs	r3, r6
 8009f56:	f000 8593 	beq.w	800aa80 <_dtoa_r+0xbb8>
 8009f5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f5c:	b963      	cbnz	r3, 8009f78 <_dtoa_r+0xb0>
 8009f5e:	4b97      	ldr	r3, [pc, #604]	; (800a1bc <_dtoa_r+0x2f4>)
 8009f60:	e027      	b.n	8009fb2 <_dtoa_r+0xea>
 8009f62:	4b97      	ldr	r3, [pc, #604]	; (800a1c0 <_dtoa_r+0x2f8>)
 8009f64:	9300      	str	r3, [sp, #0]
 8009f66:	3308      	adds	r3, #8
 8009f68:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f6a:	6013      	str	r3, [r2, #0]
 8009f6c:	9800      	ldr	r0, [sp, #0]
 8009f6e:	b013      	add	sp, #76	; 0x4c
 8009f70:	ecbd 8b04 	vpop	{d8-d9}
 8009f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f78:	4b90      	ldr	r3, [pc, #576]	; (800a1bc <_dtoa_r+0x2f4>)
 8009f7a:	9300      	str	r3, [sp, #0]
 8009f7c:	3303      	adds	r3, #3
 8009f7e:	e7f3      	b.n	8009f68 <_dtoa_r+0xa0>
 8009f80:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f84:	2200      	movs	r2, #0
 8009f86:	ec51 0b17 	vmov	r0, r1, d7
 8009f8a:	eeb0 8a47 	vmov.f32	s16, s14
 8009f8e:	eef0 8a67 	vmov.f32	s17, s15
 8009f92:	2300      	movs	r3, #0
 8009f94:	f7f6 fdd0 	bl	8000b38 <__aeabi_dcmpeq>
 8009f98:	4681      	mov	r9, r0
 8009f9a:	b160      	cbz	r0, 8009fb6 <_dtoa_r+0xee>
 8009f9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	6013      	str	r3, [r2, #0]
 8009fa2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f000 8568 	beq.w	800aa7a <_dtoa_r+0xbb2>
 8009faa:	4b86      	ldr	r3, [pc, #536]	; (800a1c4 <_dtoa_r+0x2fc>)
 8009fac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009fae:	6013      	str	r3, [r2, #0]
 8009fb0:	3b01      	subs	r3, #1
 8009fb2:	9300      	str	r3, [sp, #0]
 8009fb4:	e7da      	b.n	8009f6c <_dtoa_r+0xa4>
 8009fb6:	aa10      	add	r2, sp, #64	; 0x40
 8009fb8:	a911      	add	r1, sp, #68	; 0x44
 8009fba:	4620      	mov	r0, r4
 8009fbc:	eeb0 0a48 	vmov.f32	s0, s16
 8009fc0:	eef0 0a68 	vmov.f32	s1, s17
 8009fc4:	f001 f994 	bl	800b2f0 <__d2b>
 8009fc8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009fcc:	4682      	mov	sl, r0
 8009fce:	2d00      	cmp	r5, #0
 8009fd0:	d07f      	beq.n	800a0d2 <_dtoa_r+0x20a>
 8009fd2:	ee18 3a90 	vmov	r3, s17
 8009fd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009fda:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009fde:	ec51 0b18 	vmov	r0, r1, d8
 8009fe2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009fe6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009fea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009fee:	4619      	mov	r1, r3
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	4b75      	ldr	r3, [pc, #468]	; (800a1c8 <_dtoa_r+0x300>)
 8009ff4:	f7f6 f980 	bl	80002f8 <__aeabi_dsub>
 8009ff8:	a367      	add	r3, pc, #412	; (adr r3, 800a198 <_dtoa_r+0x2d0>)
 8009ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffe:	f7f6 fb33 	bl	8000668 <__aeabi_dmul>
 800a002:	a367      	add	r3, pc, #412	; (adr r3, 800a1a0 <_dtoa_r+0x2d8>)
 800a004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a008:	f7f6 f978 	bl	80002fc <__adddf3>
 800a00c:	4606      	mov	r6, r0
 800a00e:	4628      	mov	r0, r5
 800a010:	460f      	mov	r7, r1
 800a012:	f7f6 fabf 	bl	8000594 <__aeabi_i2d>
 800a016:	a364      	add	r3, pc, #400	; (adr r3, 800a1a8 <_dtoa_r+0x2e0>)
 800a018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01c:	f7f6 fb24 	bl	8000668 <__aeabi_dmul>
 800a020:	4602      	mov	r2, r0
 800a022:	460b      	mov	r3, r1
 800a024:	4630      	mov	r0, r6
 800a026:	4639      	mov	r1, r7
 800a028:	f7f6 f968 	bl	80002fc <__adddf3>
 800a02c:	4606      	mov	r6, r0
 800a02e:	460f      	mov	r7, r1
 800a030:	f7f6 fdca 	bl	8000bc8 <__aeabi_d2iz>
 800a034:	2200      	movs	r2, #0
 800a036:	4683      	mov	fp, r0
 800a038:	2300      	movs	r3, #0
 800a03a:	4630      	mov	r0, r6
 800a03c:	4639      	mov	r1, r7
 800a03e:	f7f6 fd85 	bl	8000b4c <__aeabi_dcmplt>
 800a042:	b148      	cbz	r0, 800a058 <_dtoa_r+0x190>
 800a044:	4658      	mov	r0, fp
 800a046:	f7f6 faa5 	bl	8000594 <__aeabi_i2d>
 800a04a:	4632      	mov	r2, r6
 800a04c:	463b      	mov	r3, r7
 800a04e:	f7f6 fd73 	bl	8000b38 <__aeabi_dcmpeq>
 800a052:	b908      	cbnz	r0, 800a058 <_dtoa_r+0x190>
 800a054:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a058:	f1bb 0f16 	cmp.w	fp, #22
 800a05c:	d857      	bhi.n	800a10e <_dtoa_r+0x246>
 800a05e:	4b5b      	ldr	r3, [pc, #364]	; (800a1cc <_dtoa_r+0x304>)
 800a060:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a068:	ec51 0b18 	vmov	r0, r1, d8
 800a06c:	f7f6 fd6e 	bl	8000b4c <__aeabi_dcmplt>
 800a070:	2800      	cmp	r0, #0
 800a072:	d04e      	beq.n	800a112 <_dtoa_r+0x24a>
 800a074:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a078:	2300      	movs	r3, #0
 800a07a:	930c      	str	r3, [sp, #48]	; 0x30
 800a07c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a07e:	1b5b      	subs	r3, r3, r5
 800a080:	1e5a      	subs	r2, r3, #1
 800a082:	bf45      	ittet	mi
 800a084:	f1c3 0301 	rsbmi	r3, r3, #1
 800a088:	9305      	strmi	r3, [sp, #20]
 800a08a:	2300      	movpl	r3, #0
 800a08c:	2300      	movmi	r3, #0
 800a08e:	9206      	str	r2, [sp, #24]
 800a090:	bf54      	ite	pl
 800a092:	9305      	strpl	r3, [sp, #20]
 800a094:	9306      	strmi	r3, [sp, #24]
 800a096:	f1bb 0f00 	cmp.w	fp, #0
 800a09a:	db3c      	blt.n	800a116 <_dtoa_r+0x24e>
 800a09c:	9b06      	ldr	r3, [sp, #24]
 800a09e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a0a2:	445b      	add	r3, fp
 800a0a4:	9306      	str	r3, [sp, #24]
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	9308      	str	r3, [sp, #32]
 800a0aa:	9b07      	ldr	r3, [sp, #28]
 800a0ac:	2b09      	cmp	r3, #9
 800a0ae:	d868      	bhi.n	800a182 <_dtoa_r+0x2ba>
 800a0b0:	2b05      	cmp	r3, #5
 800a0b2:	bfc4      	itt	gt
 800a0b4:	3b04      	subgt	r3, #4
 800a0b6:	9307      	strgt	r3, [sp, #28]
 800a0b8:	9b07      	ldr	r3, [sp, #28]
 800a0ba:	f1a3 0302 	sub.w	r3, r3, #2
 800a0be:	bfcc      	ite	gt
 800a0c0:	2500      	movgt	r5, #0
 800a0c2:	2501      	movle	r5, #1
 800a0c4:	2b03      	cmp	r3, #3
 800a0c6:	f200 8085 	bhi.w	800a1d4 <_dtoa_r+0x30c>
 800a0ca:	e8df f003 	tbb	[pc, r3]
 800a0ce:	3b2e      	.short	0x3b2e
 800a0d0:	5839      	.short	0x5839
 800a0d2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a0d6:	441d      	add	r5, r3
 800a0d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a0dc:	2b20      	cmp	r3, #32
 800a0de:	bfc1      	itttt	gt
 800a0e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a0e4:	fa08 f803 	lslgt.w	r8, r8, r3
 800a0e8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a0ec:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a0f0:	bfd6      	itet	le
 800a0f2:	f1c3 0320 	rsble	r3, r3, #32
 800a0f6:	ea48 0003 	orrgt.w	r0, r8, r3
 800a0fa:	fa06 f003 	lslle.w	r0, r6, r3
 800a0fe:	f7f6 fa39 	bl	8000574 <__aeabi_ui2d>
 800a102:	2201      	movs	r2, #1
 800a104:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a108:	3d01      	subs	r5, #1
 800a10a:	920e      	str	r2, [sp, #56]	; 0x38
 800a10c:	e76f      	b.n	8009fee <_dtoa_r+0x126>
 800a10e:	2301      	movs	r3, #1
 800a110:	e7b3      	b.n	800a07a <_dtoa_r+0x1b2>
 800a112:	900c      	str	r0, [sp, #48]	; 0x30
 800a114:	e7b2      	b.n	800a07c <_dtoa_r+0x1b4>
 800a116:	9b05      	ldr	r3, [sp, #20]
 800a118:	eba3 030b 	sub.w	r3, r3, fp
 800a11c:	9305      	str	r3, [sp, #20]
 800a11e:	f1cb 0300 	rsb	r3, fp, #0
 800a122:	9308      	str	r3, [sp, #32]
 800a124:	2300      	movs	r3, #0
 800a126:	930b      	str	r3, [sp, #44]	; 0x2c
 800a128:	e7bf      	b.n	800a0aa <_dtoa_r+0x1e2>
 800a12a:	2300      	movs	r3, #0
 800a12c:	9309      	str	r3, [sp, #36]	; 0x24
 800a12e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a130:	2b00      	cmp	r3, #0
 800a132:	dc52      	bgt.n	800a1da <_dtoa_r+0x312>
 800a134:	2301      	movs	r3, #1
 800a136:	9301      	str	r3, [sp, #4]
 800a138:	9304      	str	r3, [sp, #16]
 800a13a:	461a      	mov	r2, r3
 800a13c:	920a      	str	r2, [sp, #40]	; 0x28
 800a13e:	e00b      	b.n	800a158 <_dtoa_r+0x290>
 800a140:	2301      	movs	r3, #1
 800a142:	e7f3      	b.n	800a12c <_dtoa_r+0x264>
 800a144:	2300      	movs	r3, #0
 800a146:	9309      	str	r3, [sp, #36]	; 0x24
 800a148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a14a:	445b      	add	r3, fp
 800a14c:	9301      	str	r3, [sp, #4]
 800a14e:	3301      	adds	r3, #1
 800a150:	2b01      	cmp	r3, #1
 800a152:	9304      	str	r3, [sp, #16]
 800a154:	bfb8      	it	lt
 800a156:	2301      	movlt	r3, #1
 800a158:	69e0      	ldr	r0, [r4, #28]
 800a15a:	2100      	movs	r1, #0
 800a15c:	2204      	movs	r2, #4
 800a15e:	f102 0614 	add.w	r6, r2, #20
 800a162:	429e      	cmp	r6, r3
 800a164:	d93d      	bls.n	800a1e2 <_dtoa_r+0x31a>
 800a166:	6041      	str	r1, [r0, #4]
 800a168:	4620      	mov	r0, r4
 800a16a:	f000 fd9f 	bl	800acac <_Balloc>
 800a16e:	9000      	str	r0, [sp, #0]
 800a170:	2800      	cmp	r0, #0
 800a172:	d139      	bne.n	800a1e8 <_dtoa_r+0x320>
 800a174:	4b16      	ldr	r3, [pc, #88]	; (800a1d0 <_dtoa_r+0x308>)
 800a176:	4602      	mov	r2, r0
 800a178:	f240 11af 	movw	r1, #431	; 0x1af
 800a17c:	e6bd      	b.n	8009efa <_dtoa_r+0x32>
 800a17e:	2301      	movs	r3, #1
 800a180:	e7e1      	b.n	800a146 <_dtoa_r+0x27e>
 800a182:	2501      	movs	r5, #1
 800a184:	2300      	movs	r3, #0
 800a186:	9307      	str	r3, [sp, #28]
 800a188:	9509      	str	r5, [sp, #36]	; 0x24
 800a18a:	f04f 33ff 	mov.w	r3, #4294967295
 800a18e:	9301      	str	r3, [sp, #4]
 800a190:	9304      	str	r3, [sp, #16]
 800a192:	2200      	movs	r2, #0
 800a194:	2312      	movs	r3, #18
 800a196:	e7d1      	b.n	800a13c <_dtoa_r+0x274>
 800a198:	636f4361 	.word	0x636f4361
 800a19c:	3fd287a7 	.word	0x3fd287a7
 800a1a0:	8b60c8b3 	.word	0x8b60c8b3
 800a1a4:	3fc68a28 	.word	0x3fc68a28
 800a1a8:	509f79fb 	.word	0x509f79fb
 800a1ac:	3fd34413 	.word	0x3fd34413
 800a1b0:	0800c071 	.word	0x0800c071
 800a1b4:	0800c12b 	.word	0x0800c12b
 800a1b8:	7ff00000 	.word	0x7ff00000
 800a1bc:	0800c127 	.word	0x0800c127
 800a1c0:	0800c11e 	.word	0x0800c11e
 800a1c4:	0800c04e 	.word	0x0800c04e
 800a1c8:	3ff80000 	.word	0x3ff80000
 800a1cc:	0800c218 	.word	0x0800c218
 800a1d0:	0800c183 	.word	0x0800c183
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a1d8:	e7d7      	b.n	800a18a <_dtoa_r+0x2c2>
 800a1da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1dc:	9301      	str	r3, [sp, #4]
 800a1de:	9304      	str	r3, [sp, #16]
 800a1e0:	e7ba      	b.n	800a158 <_dtoa_r+0x290>
 800a1e2:	3101      	adds	r1, #1
 800a1e4:	0052      	lsls	r2, r2, #1
 800a1e6:	e7ba      	b.n	800a15e <_dtoa_r+0x296>
 800a1e8:	69e3      	ldr	r3, [r4, #28]
 800a1ea:	9a00      	ldr	r2, [sp, #0]
 800a1ec:	601a      	str	r2, [r3, #0]
 800a1ee:	9b04      	ldr	r3, [sp, #16]
 800a1f0:	2b0e      	cmp	r3, #14
 800a1f2:	f200 80a8 	bhi.w	800a346 <_dtoa_r+0x47e>
 800a1f6:	2d00      	cmp	r5, #0
 800a1f8:	f000 80a5 	beq.w	800a346 <_dtoa_r+0x47e>
 800a1fc:	f1bb 0f00 	cmp.w	fp, #0
 800a200:	dd38      	ble.n	800a274 <_dtoa_r+0x3ac>
 800a202:	4bc0      	ldr	r3, [pc, #768]	; (800a504 <_dtoa_r+0x63c>)
 800a204:	f00b 020f 	and.w	r2, fp, #15
 800a208:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a20c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a210:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a214:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a218:	d019      	beq.n	800a24e <_dtoa_r+0x386>
 800a21a:	4bbb      	ldr	r3, [pc, #748]	; (800a508 <_dtoa_r+0x640>)
 800a21c:	ec51 0b18 	vmov	r0, r1, d8
 800a220:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a224:	f7f6 fb4a 	bl	80008bc <__aeabi_ddiv>
 800a228:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a22c:	f008 080f 	and.w	r8, r8, #15
 800a230:	2503      	movs	r5, #3
 800a232:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a508 <_dtoa_r+0x640>
 800a236:	f1b8 0f00 	cmp.w	r8, #0
 800a23a:	d10a      	bne.n	800a252 <_dtoa_r+0x38a>
 800a23c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a240:	4632      	mov	r2, r6
 800a242:	463b      	mov	r3, r7
 800a244:	f7f6 fb3a 	bl	80008bc <__aeabi_ddiv>
 800a248:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a24c:	e02b      	b.n	800a2a6 <_dtoa_r+0x3de>
 800a24e:	2502      	movs	r5, #2
 800a250:	e7ef      	b.n	800a232 <_dtoa_r+0x36a>
 800a252:	f018 0f01 	tst.w	r8, #1
 800a256:	d008      	beq.n	800a26a <_dtoa_r+0x3a2>
 800a258:	4630      	mov	r0, r6
 800a25a:	4639      	mov	r1, r7
 800a25c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a260:	f7f6 fa02 	bl	8000668 <__aeabi_dmul>
 800a264:	3501      	adds	r5, #1
 800a266:	4606      	mov	r6, r0
 800a268:	460f      	mov	r7, r1
 800a26a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a26e:	f109 0908 	add.w	r9, r9, #8
 800a272:	e7e0      	b.n	800a236 <_dtoa_r+0x36e>
 800a274:	f000 809f 	beq.w	800a3b6 <_dtoa_r+0x4ee>
 800a278:	f1cb 0600 	rsb	r6, fp, #0
 800a27c:	4ba1      	ldr	r3, [pc, #644]	; (800a504 <_dtoa_r+0x63c>)
 800a27e:	4fa2      	ldr	r7, [pc, #648]	; (800a508 <_dtoa_r+0x640>)
 800a280:	f006 020f 	and.w	r2, r6, #15
 800a284:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28c:	ec51 0b18 	vmov	r0, r1, d8
 800a290:	f7f6 f9ea 	bl	8000668 <__aeabi_dmul>
 800a294:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a298:	1136      	asrs	r6, r6, #4
 800a29a:	2300      	movs	r3, #0
 800a29c:	2502      	movs	r5, #2
 800a29e:	2e00      	cmp	r6, #0
 800a2a0:	d17e      	bne.n	800a3a0 <_dtoa_r+0x4d8>
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d1d0      	bne.n	800a248 <_dtoa_r+0x380>
 800a2a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2a8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	f000 8084 	beq.w	800a3ba <_dtoa_r+0x4f2>
 800a2b2:	4b96      	ldr	r3, [pc, #600]	; (800a50c <_dtoa_r+0x644>)
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	4640      	mov	r0, r8
 800a2b8:	4649      	mov	r1, r9
 800a2ba:	f7f6 fc47 	bl	8000b4c <__aeabi_dcmplt>
 800a2be:	2800      	cmp	r0, #0
 800a2c0:	d07b      	beq.n	800a3ba <_dtoa_r+0x4f2>
 800a2c2:	9b04      	ldr	r3, [sp, #16]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d078      	beq.n	800a3ba <_dtoa_r+0x4f2>
 800a2c8:	9b01      	ldr	r3, [sp, #4]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	dd39      	ble.n	800a342 <_dtoa_r+0x47a>
 800a2ce:	4b90      	ldr	r3, [pc, #576]	; (800a510 <_dtoa_r+0x648>)
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	4640      	mov	r0, r8
 800a2d4:	4649      	mov	r1, r9
 800a2d6:	f7f6 f9c7 	bl	8000668 <__aeabi_dmul>
 800a2da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2de:	9e01      	ldr	r6, [sp, #4]
 800a2e0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a2e4:	3501      	adds	r5, #1
 800a2e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a2ea:	4628      	mov	r0, r5
 800a2ec:	f7f6 f952 	bl	8000594 <__aeabi_i2d>
 800a2f0:	4642      	mov	r2, r8
 800a2f2:	464b      	mov	r3, r9
 800a2f4:	f7f6 f9b8 	bl	8000668 <__aeabi_dmul>
 800a2f8:	4b86      	ldr	r3, [pc, #536]	; (800a514 <_dtoa_r+0x64c>)
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f7f5 fffe 	bl	80002fc <__adddf3>
 800a300:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a304:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a308:	9303      	str	r3, [sp, #12]
 800a30a:	2e00      	cmp	r6, #0
 800a30c:	d158      	bne.n	800a3c0 <_dtoa_r+0x4f8>
 800a30e:	4b82      	ldr	r3, [pc, #520]	; (800a518 <_dtoa_r+0x650>)
 800a310:	2200      	movs	r2, #0
 800a312:	4640      	mov	r0, r8
 800a314:	4649      	mov	r1, r9
 800a316:	f7f5 ffef 	bl	80002f8 <__aeabi_dsub>
 800a31a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a31e:	4680      	mov	r8, r0
 800a320:	4689      	mov	r9, r1
 800a322:	f7f6 fc31 	bl	8000b88 <__aeabi_dcmpgt>
 800a326:	2800      	cmp	r0, #0
 800a328:	f040 8296 	bne.w	800a858 <_dtoa_r+0x990>
 800a32c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a330:	4640      	mov	r0, r8
 800a332:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a336:	4649      	mov	r1, r9
 800a338:	f7f6 fc08 	bl	8000b4c <__aeabi_dcmplt>
 800a33c:	2800      	cmp	r0, #0
 800a33e:	f040 8289 	bne.w	800a854 <_dtoa_r+0x98c>
 800a342:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a346:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f2c0 814e 	blt.w	800a5ea <_dtoa_r+0x722>
 800a34e:	f1bb 0f0e 	cmp.w	fp, #14
 800a352:	f300 814a 	bgt.w	800a5ea <_dtoa_r+0x722>
 800a356:	4b6b      	ldr	r3, [pc, #428]	; (800a504 <_dtoa_r+0x63c>)
 800a358:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a35c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a362:	2b00      	cmp	r3, #0
 800a364:	f280 80dc 	bge.w	800a520 <_dtoa_r+0x658>
 800a368:	9b04      	ldr	r3, [sp, #16]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	f300 80d8 	bgt.w	800a520 <_dtoa_r+0x658>
 800a370:	f040 826f 	bne.w	800a852 <_dtoa_r+0x98a>
 800a374:	4b68      	ldr	r3, [pc, #416]	; (800a518 <_dtoa_r+0x650>)
 800a376:	2200      	movs	r2, #0
 800a378:	4640      	mov	r0, r8
 800a37a:	4649      	mov	r1, r9
 800a37c:	f7f6 f974 	bl	8000668 <__aeabi_dmul>
 800a380:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a384:	f7f6 fbf6 	bl	8000b74 <__aeabi_dcmpge>
 800a388:	9e04      	ldr	r6, [sp, #16]
 800a38a:	4637      	mov	r7, r6
 800a38c:	2800      	cmp	r0, #0
 800a38e:	f040 8245 	bne.w	800a81c <_dtoa_r+0x954>
 800a392:	9d00      	ldr	r5, [sp, #0]
 800a394:	2331      	movs	r3, #49	; 0x31
 800a396:	f805 3b01 	strb.w	r3, [r5], #1
 800a39a:	f10b 0b01 	add.w	fp, fp, #1
 800a39e:	e241      	b.n	800a824 <_dtoa_r+0x95c>
 800a3a0:	07f2      	lsls	r2, r6, #31
 800a3a2:	d505      	bpl.n	800a3b0 <_dtoa_r+0x4e8>
 800a3a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3a8:	f7f6 f95e 	bl	8000668 <__aeabi_dmul>
 800a3ac:	3501      	adds	r5, #1
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	1076      	asrs	r6, r6, #1
 800a3b2:	3708      	adds	r7, #8
 800a3b4:	e773      	b.n	800a29e <_dtoa_r+0x3d6>
 800a3b6:	2502      	movs	r5, #2
 800a3b8:	e775      	b.n	800a2a6 <_dtoa_r+0x3de>
 800a3ba:	9e04      	ldr	r6, [sp, #16]
 800a3bc:	465f      	mov	r7, fp
 800a3be:	e792      	b.n	800a2e6 <_dtoa_r+0x41e>
 800a3c0:	9900      	ldr	r1, [sp, #0]
 800a3c2:	4b50      	ldr	r3, [pc, #320]	; (800a504 <_dtoa_r+0x63c>)
 800a3c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a3c8:	4431      	add	r1, r6
 800a3ca:	9102      	str	r1, [sp, #8]
 800a3cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3ce:	eeb0 9a47 	vmov.f32	s18, s14
 800a3d2:	eef0 9a67 	vmov.f32	s19, s15
 800a3d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a3da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a3de:	2900      	cmp	r1, #0
 800a3e0:	d044      	beq.n	800a46c <_dtoa_r+0x5a4>
 800a3e2:	494e      	ldr	r1, [pc, #312]	; (800a51c <_dtoa_r+0x654>)
 800a3e4:	2000      	movs	r0, #0
 800a3e6:	f7f6 fa69 	bl	80008bc <__aeabi_ddiv>
 800a3ea:	ec53 2b19 	vmov	r2, r3, d9
 800a3ee:	f7f5 ff83 	bl	80002f8 <__aeabi_dsub>
 800a3f2:	9d00      	ldr	r5, [sp, #0]
 800a3f4:	ec41 0b19 	vmov	d9, r0, r1
 800a3f8:	4649      	mov	r1, r9
 800a3fa:	4640      	mov	r0, r8
 800a3fc:	f7f6 fbe4 	bl	8000bc8 <__aeabi_d2iz>
 800a400:	4606      	mov	r6, r0
 800a402:	f7f6 f8c7 	bl	8000594 <__aeabi_i2d>
 800a406:	4602      	mov	r2, r0
 800a408:	460b      	mov	r3, r1
 800a40a:	4640      	mov	r0, r8
 800a40c:	4649      	mov	r1, r9
 800a40e:	f7f5 ff73 	bl	80002f8 <__aeabi_dsub>
 800a412:	3630      	adds	r6, #48	; 0x30
 800a414:	f805 6b01 	strb.w	r6, [r5], #1
 800a418:	ec53 2b19 	vmov	r2, r3, d9
 800a41c:	4680      	mov	r8, r0
 800a41e:	4689      	mov	r9, r1
 800a420:	f7f6 fb94 	bl	8000b4c <__aeabi_dcmplt>
 800a424:	2800      	cmp	r0, #0
 800a426:	d164      	bne.n	800a4f2 <_dtoa_r+0x62a>
 800a428:	4642      	mov	r2, r8
 800a42a:	464b      	mov	r3, r9
 800a42c:	4937      	ldr	r1, [pc, #220]	; (800a50c <_dtoa_r+0x644>)
 800a42e:	2000      	movs	r0, #0
 800a430:	f7f5 ff62 	bl	80002f8 <__aeabi_dsub>
 800a434:	ec53 2b19 	vmov	r2, r3, d9
 800a438:	f7f6 fb88 	bl	8000b4c <__aeabi_dcmplt>
 800a43c:	2800      	cmp	r0, #0
 800a43e:	f040 80b6 	bne.w	800a5ae <_dtoa_r+0x6e6>
 800a442:	9b02      	ldr	r3, [sp, #8]
 800a444:	429d      	cmp	r5, r3
 800a446:	f43f af7c 	beq.w	800a342 <_dtoa_r+0x47a>
 800a44a:	4b31      	ldr	r3, [pc, #196]	; (800a510 <_dtoa_r+0x648>)
 800a44c:	ec51 0b19 	vmov	r0, r1, d9
 800a450:	2200      	movs	r2, #0
 800a452:	f7f6 f909 	bl	8000668 <__aeabi_dmul>
 800a456:	4b2e      	ldr	r3, [pc, #184]	; (800a510 <_dtoa_r+0x648>)
 800a458:	ec41 0b19 	vmov	d9, r0, r1
 800a45c:	2200      	movs	r2, #0
 800a45e:	4640      	mov	r0, r8
 800a460:	4649      	mov	r1, r9
 800a462:	f7f6 f901 	bl	8000668 <__aeabi_dmul>
 800a466:	4680      	mov	r8, r0
 800a468:	4689      	mov	r9, r1
 800a46a:	e7c5      	b.n	800a3f8 <_dtoa_r+0x530>
 800a46c:	ec51 0b17 	vmov	r0, r1, d7
 800a470:	f7f6 f8fa 	bl	8000668 <__aeabi_dmul>
 800a474:	9b02      	ldr	r3, [sp, #8]
 800a476:	9d00      	ldr	r5, [sp, #0]
 800a478:	930f      	str	r3, [sp, #60]	; 0x3c
 800a47a:	ec41 0b19 	vmov	d9, r0, r1
 800a47e:	4649      	mov	r1, r9
 800a480:	4640      	mov	r0, r8
 800a482:	f7f6 fba1 	bl	8000bc8 <__aeabi_d2iz>
 800a486:	4606      	mov	r6, r0
 800a488:	f7f6 f884 	bl	8000594 <__aeabi_i2d>
 800a48c:	3630      	adds	r6, #48	; 0x30
 800a48e:	4602      	mov	r2, r0
 800a490:	460b      	mov	r3, r1
 800a492:	4640      	mov	r0, r8
 800a494:	4649      	mov	r1, r9
 800a496:	f7f5 ff2f 	bl	80002f8 <__aeabi_dsub>
 800a49a:	f805 6b01 	strb.w	r6, [r5], #1
 800a49e:	9b02      	ldr	r3, [sp, #8]
 800a4a0:	429d      	cmp	r5, r3
 800a4a2:	4680      	mov	r8, r0
 800a4a4:	4689      	mov	r9, r1
 800a4a6:	f04f 0200 	mov.w	r2, #0
 800a4aa:	d124      	bne.n	800a4f6 <_dtoa_r+0x62e>
 800a4ac:	4b1b      	ldr	r3, [pc, #108]	; (800a51c <_dtoa_r+0x654>)
 800a4ae:	ec51 0b19 	vmov	r0, r1, d9
 800a4b2:	f7f5 ff23 	bl	80002fc <__adddf3>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	4640      	mov	r0, r8
 800a4bc:	4649      	mov	r1, r9
 800a4be:	f7f6 fb63 	bl	8000b88 <__aeabi_dcmpgt>
 800a4c2:	2800      	cmp	r0, #0
 800a4c4:	d173      	bne.n	800a5ae <_dtoa_r+0x6e6>
 800a4c6:	ec53 2b19 	vmov	r2, r3, d9
 800a4ca:	4914      	ldr	r1, [pc, #80]	; (800a51c <_dtoa_r+0x654>)
 800a4cc:	2000      	movs	r0, #0
 800a4ce:	f7f5 ff13 	bl	80002f8 <__aeabi_dsub>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	4640      	mov	r0, r8
 800a4d8:	4649      	mov	r1, r9
 800a4da:	f7f6 fb37 	bl	8000b4c <__aeabi_dcmplt>
 800a4de:	2800      	cmp	r0, #0
 800a4e0:	f43f af2f 	beq.w	800a342 <_dtoa_r+0x47a>
 800a4e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a4e6:	1e6b      	subs	r3, r5, #1
 800a4e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a4ee:	2b30      	cmp	r3, #48	; 0x30
 800a4f0:	d0f8      	beq.n	800a4e4 <_dtoa_r+0x61c>
 800a4f2:	46bb      	mov	fp, r7
 800a4f4:	e04a      	b.n	800a58c <_dtoa_r+0x6c4>
 800a4f6:	4b06      	ldr	r3, [pc, #24]	; (800a510 <_dtoa_r+0x648>)
 800a4f8:	f7f6 f8b6 	bl	8000668 <__aeabi_dmul>
 800a4fc:	4680      	mov	r8, r0
 800a4fe:	4689      	mov	r9, r1
 800a500:	e7bd      	b.n	800a47e <_dtoa_r+0x5b6>
 800a502:	bf00      	nop
 800a504:	0800c218 	.word	0x0800c218
 800a508:	0800c1f0 	.word	0x0800c1f0
 800a50c:	3ff00000 	.word	0x3ff00000
 800a510:	40240000 	.word	0x40240000
 800a514:	401c0000 	.word	0x401c0000
 800a518:	40140000 	.word	0x40140000
 800a51c:	3fe00000 	.word	0x3fe00000
 800a520:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a524:	9d00      	ldr	r5, [sp, #0]
 800a526:	4642      	mov	r2, r8
 800a528:	464b      	mov	r3, r9
 800a52a:	4630      	mov	r0, r6
 800a52c:	4639      	mov	r1, r7
 800a52e:	f7f6 f9c5 	bl	80008bc <__aeabi_ddiv>
 800a532:	f7f6 fb49 	bl	8000bc8 <__aeabi_d2iz>
 800a536:	9001      	str	r0, [sp, #4]
 800a538:	f7f6 f82c 	bl	8000594 <__aeabi_i2d>
 800a53c:	4642      	mov	r2, r8
 800a53e:	464b      	mov	r3, r9
 800a540:	f7f6 f892 	bl	8000668 <__aeabi_dmul>
 800a544:	4602      	mov	r2, r0
 800a546:	460b      	mov	r3, r1
 800a548:	4630      	mov	r0, r6
 800a54a:	4639      	mov	r1, r7
 800a54c:	f7f5 fed4 	bl	80002f8 <__aeabi_dsub>
 800a550:	9e01      	ldr	r6, [sp, #4]
 800a552:	9f04      	ldr	r7, [sp, #16]
 800a554:	3630      	adds	r6, #48	; 0x30
 800a556:	f805 6b01 	strb.w	r6, [r5], #1
 800a55a:	9e00      	ldr	r6, [sp, #0]
 800a55c:	1bae      	subs	r6, r5, r6
 800a55e:	42b7      	cmp	r7, r6
 800a560:	4602      	mov	r2, r0
 800a562:	460b      	mov	r3, r1
 800a564:	d134      	bne.n	800a5d0 <_dtoa_r+0x708>
 800a566:	f7f5 fec9 	bl	80002fc <__adddf3>
 800a56a:	4642      	mov	r2, r8
 800a56c:	464b      	mov	r3, r9
 800a56e:	4606      	mov	r6, r0
 800a570:	460f      	mov	r7, r1
 800a572:	f7f6 fb09 	bl	8000b88 <__aeabi_dcmpgt>
 800a576:	b9c8      	cbnz	r0, 800a5ac <_dtoa_r+0x6e4>
 800a578:	4642      	mov	r2, r8
 800a57a:	464b      	mov	r3, r9
 800a57c:	4630      	mov	r0, r6
 800a57e:	4639      	mov	r1, r7
 800a580:	f7f6 fada 	bl	8000b38 <__aeabi_dcmpeq>
 800a584:	b110      	cbz	r0, 800a58c <_dtoa_r+0x6c4>
 800a586:	9b01      	ldr	r3, [sp, #4]
 800a588:	07db      	lsls	r3, r3, #31
 800a58a:	d40f      	bmi.n	800a5ac <_dtoa_r+0x6e4>
 800a58c:	4651      	mov	r1, sl
 800a58e:	4620      	mov	r0, r4
 800a590:	f000 fbcc 	bl	800ad2c <_Bfree>
 800a594:	2300      	movs	r3, #0
 800a596:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a598:	702b      	strb	r3, [r5, #0]
 800a59a:	f10b 0301 	add.w	r3, fp, #1
 800a59e:	6013      	str	r3, [r2, #0]
 800a5a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	f43f ace2 	beq.w	8009f6c <_dtoa_r+0xa4>
 800a5a8:	601d      	str	r5, [r3, #0]
 800a5aa:	e4df      	b.n	8009f6c <_dtoa_r+0xa4>
 800a5ac:	465f      	mov	r7, fp
 800a5ae:	462b      	mov	r3, r5
 800a5b0:	461d      	mov	r5, r3
 800a5b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5b6:	2a39      	cmp	r2, #57	; 0x39
 800a5b8:	d106      	bne.n	800a5c8 <_dtoa_r+0x700>
 800a5ba:	9a00      	ldr	r2, [sp, #0]
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d1f7      	bne.n	800a5b0 <_dtoa_r+0x6e8>
 800a5c0:	9900      	ldr	r1, [sp, #0]
 800a5c2:	2230      	movs	r2, #48	; 0x30
 800a5c4:	3701      	adds	r7, #1
 800a5c6:	700a      	strb	r2, [r1, #0]
 800a5c8:	781a      	ldrb	r2, [r3, #0]
 800a5ca:	3201      	adds	r2, #1
 800a5cc:	701a      	strb	r2, [r3, #0]
 800a5ce:	e790      	b.n	800a4f2 <_dtoa_r+0x62a>
 800a5d0:	4ba3      	ldr	r3, [pc, #652]	; (800a860 <_dtoa_r+0x998>)
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	f7f6 f848 	bl	8000668 <__aeabi_dmul>
 800a5d8:	2200      	movs	r2, #0
 800a5da:	2300      	movs	r3, #0
 800a5dc:	4606      	mov	r6, r0
 800a5de:	460f      	mov	r7, r1
 800a5e0:	f7f6 faaa 	bl	8000b38 <__aeabi_dcmpeq>
 800a5e4:	2800      	cmp	r0, #0
 800a5e6:	d09e      	beq.n	800a526 <_dtoa_r+0x65e>
 800a5e8:	e7d0      	b.n	800a58c <_dtoa_r+0x6c4>
 800a5ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5ec:	2a00      	cmp	r2, #0
 800a5ee:	f000 80ca 	beq.w	800a786 <_dtoa_r+0x8be>
 800a5f2:	9a07      	ldr	r2, [sp, #28]
 800a5f4:	2a01      	cmp	r2, #1
 800a5f6:	f300 80ad 	bgt.w	800a754 <_dtoa_r+0x88c>
 800a5fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5fc:	2a00      	cmp	r2, #0
 800a5fe:	f000 80a5 	beq.w	800a74c <_dtoa_r+0x884>
 800a602:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a606:	9e08      	ldr	r6, [sp, #32]
 800a608:	9d05      	ldr	r5, [sp, #20]
 800a60a:	9a05      	ldr	r2, [sp, #20]
 800a60c:	441a      	add	r2, r3
 800a60e:	9205      	str	r2, [sp, #20]
 800a610:	9a06      	ldr	r2, [sp, #24]
 800a612:	2101      	movs	r1, #1
 800a614:	441a      	add	r2, r3
 800a616:	4620      	mov	r0, r4
 800a618:	9206      	str	r2, [sp, #24]
 800a61a:	f000 fc3d 	bl	800ae98 <__i2b>
 800a61e:	4607      	mov	r7, r0
 800a620:	b165      	cbz	r5, 800a63c <_dtoa_r+0x774>
 800a622:	9b06      	ldr	r3, [sp, #24]
 800a624:	2b00      	cmp	r3, #0
 800a626:	dd09      	ble.n	800a63c <_dtoa_r+0x774>
 800a628:	42ab      	cmp	r3, r5
 800a62a:	9a05      	ldr	r2, [sp, #20]
 800a62c:	bfa8      	it	ge
 800a62e:	462b      	movge	r3, r5
 800a630:	1ad2      	subs	r2, r2, r3
 800a632:	9205      	str	r2, [sp, #20]
 800a634:	9a06      	ldr	r2, [sp, #24]
 800a636:	1aed      	subs	r5, r5, r3
 800a638:	1ad3      	subs	r3, r2, r3
 800a63a:	9306      	str	r3, [sp, #24]
 800a63c:	9b08      	ldr	r3, [sp, #32]
 800a63e:	b1f3      	cbz	r3, 800a67e <_dtoa_r+0x7b6>
 800a640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a642:	2b00      	cmp	r3, #0
 800a644:	f000 80a3 	beq.w	800a78e <_dtoa_r+0x8c6>
 800a648:	2e00      	cmp	r6, #0
 800a64a:	dd10      	ble.n	800a66e <_dtoa_r+0x7a6>
 800a64c:	4639      	mov	r1, r7
 800a64e:	4632      	mov	r2, r6
 800a650:	4620      	mov	r0, r4
 800a652:	f000 fce1 	bl	800b018 <__pow5mult>
 800a656:	4652      	mov	r2, sl
 800a658:	4601      	mov	r1, r0
 800a65a:	4607      	mov	r7, r0
 800a65c:	4620      	mov	r0, r4
 800a65e:	f000 fc31 	bl	800aec4 <__multiply>
 800a662:	4651      	mov	r1, sl
 800a664:	4680      	mov	r8, r0
 800a666:	4620      	mov	r0, r4
 800a668:	f000 fb60 	bl	800ad2c <_Bfree>
 800a66c:	46c2      	mov	sl, r8
 800a66e:	9b08      	ldr	r3, [sp, #32]
 800a670:	1b9a      	subs	r2, r3, r6
 800a672:	d004      	beq.n	800a67e <_dtoa_r+0x7b6>
 800a674:	4651      	mov	r1, sl
 800a676:	4620      	mov	r0, r4
 800a678:	f000 fcce 	bl	800b018 <__pow5mult>
 800a67c:	4682      	mov	sl, r0
 800a67e:	2101      	movs	r1, #1
 800a680:	4620      	mov	r0, r4
 800a682:	f000 fc09 	bl	800ae98 <__i2b>
 800a686:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a688:	2b00      	cmp	r3, #0
 800a68a:	4606      	mov	r6, r0
 800a68c:	f340 8081 	ble.w	800a792 <_dtoa_r+0x8ca>
 800a690:	461a      	mov	r2, r3
 800a692:	4601      	mov	r1, r0
 800a694:	4620      	mov	r0, r4
 800a696:	f000 fcbf 	bl	800b018 <__pow5mult>
 800a69a:	9b07      	ldr	r3, [sp, #28]
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	4606      	mov	r6, r0
 800a6a0:	dd7a      	ble.n	800a798 <_dtoa_r+0x8d0>
 800a6a2:	f04f 0800 	mov.w	r8, #0
 800a6a6:	6933      	ldr	r3, [r6, #16]
 800a6a8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a6ac:	6918      	ldr	r0, [r3, #16]
 800a6ae:	f000 fba5 	bl	800adfc <__hi0bits>
 800a6b2:	f1c0 0020 	rsb	r0, r0, #32
 800a6b6:	9b06      	ldr	r3, [sp, #24]
 800a6b8:	4418      	add	r0, r3
 800a6ba:	f010 001f 	ands.w	r0, r0, #31
 800a6be:	f000 8094 	beq.w	800a7ea <_dtoa_r+0x922>
 800a6c2:	f1c0 0320 	rsb	r3, r0, #32
 800a6c6:	2b04      	cmp	r3, #4
 800a6c8:	f340 8085 	ble.w	800a7d6 <_dtoa_r+0x90e>
 800a6cc:	9b05      	ldr	r3, [sp, #20]
 800a6ce:	f1c0 001c 	rsb	r0, r0, #28
 800a6d2:	4403      	add	r3, r0
 800a6d4:	9305      	str	r3, [sp, #20]
 800a6d6:	9b06      	ldr	r3, [sp, #24]
 800a6d8:	4403      	add	r3, r0
 800a6da:	4405      	add	r5, r0
 800a6dc:	9306      	str	r3, [sp, #24]
 800a6de:	9b05      	ldr	r3, [sp, #20]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	dd05      	ble.n	800a6f0 <_dtoa_r+0x828>
 800a6e4:	4651      	mov	r1, sl
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	f000 fcef 	bl	800b0cc <__lshift>
 800a6ee:	4682      	mov	sl, r0
 800a6f0:	9b06      	ldr	r3, [sp, #24]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	dd05      	ble.n	800a702 <_dtoa_r+0x83a>
 800a6f6:	4631      	mov	r1, r6
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	f000 fce6 	bl	800b0cc <__lshift>
 800a700:	4606      	mov	r6, r0
 800a702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a704:	2b00      	cmp	r3, #0
 800a706:	d072      	beq.n	800a7ee <_dtoa_r+0x926>
 800a708:	4631      	mov	r1, r6
 800a70a:	4650      	mov	r0, sl
 800a70c:	f000 fd4a 	bl	800b1a4 <__mcmp>
 800a710:	2800      	cmp	r0, #0
 800a712:	da6c      	bge.n	800a7ee <_dtoa_r+0x926>
 800a714:	2300      	movs	r3, #0
 800a716:	4651      	mov	r1, sl
 800a718:	220a      	movs	r2, #10
 800a71a:	4620      	mov	r0, r4
 800a71c:	f000 fb28 	bl	800ad70 <__multadd>
 800a720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a722:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a726:	4682      	mov	sl, r0
 800a728:	2b00      	cmp	r3, #0
 800a72a:	f000 81b0 	beq.w	800aa8e <_dtoa_r+0xbc6>
 800a72e:	2300      	movs	r3, #0
 800a730:	4639      	mov	r1, r7
 800a732:	220a      	movs	r2, #10
 800a734:	4620      	mov	r0, r4
 800a736:	f000 fb1b 	bl	800ad70 <__multadd>
 800a73a:	9b01      	ldr	r3, [sp, #4]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	4607      	mov	r7, r0
 800a740:	f300 8096 	bgt.w	800a870 <_dtoa_r+0x9a8>
 800a744:	9b07      	ldr	r3, [sp, #28]
 800a746:	2b02      	cmp	r3, #2
 800a748:	dc59      	bgt.n	800a7fe <_dtoa_r+0x936>
 800a74a:	e091      	b.n	800a870 <_dtoa_r+0x9a8>
 800a74c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a74e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a752:	e758      	b.n	800a606 <_dtoa_r+0x73e>
 800a754:	9b04      	ldr	r3, [sp, #16]
 800a756:	1e5e      	subs	r6, r3, #1
 800a758:	9b08      	ldr	r3, [sp, #32]
 800a75a:	42b3      	cmp	r3, r6
 800a75c:	bfbf      	itttt	lt
 800a75e:	9b08      	ldrlt	r3, [sp, #32]
 800a760:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a762:	9608      	strlt	r6, [sp, #32]
 800a764:	1af3      	sublt	r3, r6, r3
 800a766:	bfb4      	ite	lt
 800a768:	18d2      	addlt	r2, r2, r3
 800a76a:	1b9e      	subge	r6, r3, r6
 800a76c:	9b04      	ldr	r3, [sp, #16]
 800a76e:	bfbc      	itt	lt
 800a770:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a772:	2600      	movlt	r6, #0
 800a774:	2b00      	cmp	r3, #0
 800a776:	bfb7      	itett	lt
 800a778:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a77c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a780:	1a9d      	sublt	r5, r3, r2
 800a782:	2300      	movlt	r3, #0
 800a784:	e741      	b.n	800a60a <_dtoa_r+0x742>
 800a786:	9e08      	ldr	r6, [sp, #32]
 800a788:	9d05      	ldr	r5, [sp, #20]
 800a78a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a78c:	e748      	b.n	800a620 <_dtoa_r+0x758>
 800a78e:	9a08      	ldr	r2, [sp, #32]
 800a790:	e770      	b.n	800a674 <_dtoa_r+0x7ac>
 800a792:	9b07      	ldr	r3, [sp, #28]
 800a794:	2b01      	cmp	r3, #1
 800a796:	dc19      	bgt.n	800a7cc <_dtoa_r+0x904>
 800a798:	9b02      	ldr	r3, [sp, #8]
 800a79a:	b9bb      	cbnz	r3, 800a7cc <_dtoa_r+0x904>
 800a79c:	9b03      	ldr	r3, [sp, #12]
 800a79e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7a2:	b99b      	cbnz	r3, 800a7cc <_dtoa_r+0x904>
 800a7a4:	9b03      	ldr	r3, [sp, #12]
 800a7a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a7aa:	0d1b      	lsrs	r3, r3, #20
 800a7ac:	051b      	lsls	r3, r3, #20
 800a7ae:	b183      	cbz	r3, 800a7d2 <_dtoa_r+0x90a>
 800a7b0:	9b05      	ldr	r3, [sp, #20]
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	9305      	str	r3, [sp, #20]
 800a7b6:	9b06      	ldr	r3, [sp, #24]
 800a7b8:	3301      	adds	r3, #1
 800a7ba:	9306      	str	r3, [sp, #24]
 800a7bc:	f04f 0801 	mov.w	r8, #1
 800a7c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	f47f af6f 	bne.w	800a6a6 <_dtoa_r+0x7de>
 800a7c8:	2001      	movs	r0, #1
 800a7ca:	e774      	b.n	800a6b6 <_dtoa_r+0x7ee>
 800a7cc:	f04f 0800 	mov.w	r8, #0
 800a7d0:	e7f6      	b.n	800a7c0 <_dtoa_r+0x8f8>
 800a7d2:	4698      	mov	r8, r3
 800a7d4:	e7f4      	b.n	800a7c0 <_dtoa_r+0x8f8>
 800a7d6:	d082      	beq.n	800a6de <_dtoa_r+0x816>
 800a7d8:	9a05      	ldr	r2, [sp, #20]
 800a7da:	331c      	adds	r3, #28
 800a7dc:	441a      	add	r2, r3
 800a7de:	9205      	str	r2, [sp, #20]
 800a7e0:	9a06      	ldr	r2, [sp, #24]
 800a7e2:	441a      	add	r2, r3
 800a7e4:	441d      	add	r5, r3
 800a7e6:	9206      	str	r2, [sp, #24]
 800a7e8:	e779      	b.n	800a6de <_dtoa_r+0x816>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	e7f4      	b.n	800a7d8 <_dtoa_r+0x910>
 800a7ee:	9b04      	ldr	r3, [sp, #16]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	dc37      	bgt.n	800a864 <_dtoa_r+0x99c>
 800a7f4:	9b07      	ldr	r3, [sp, #28]
 800a7f6:	2b02      	cmp	r3, #2
 800a7f8:	dd34      	ble.n	800a864 <_dtoa_r+0x99c>
 800a7fa:	9b04      	ldr	r3, [sp, #16]
 800a7fc:	9301      	str	r3, [sp, #4]
 800a7fe:	9b01      	ldr	r3, [sp, #4]
 800a800:	b963      	cbnz	r3, 800a81c <_dtoa_r+0x954>
 800a802:	4631      	mov	r1, r6
 800a804:	2205      	movs	r2, #5
 800a806:	4620      	mov	r0, r4
 800a808:	f000 fab2 	bl	800ad70 <__multadd>
 800a80c:	4601      	mov	r1, r0
 800a80e:	4606      	mov	r6, r0
 800a810:	4650      	mov	r0, sl
 800a812:	f000 fcc7 	bl	800b1a4 <__mcmp>
 800a816:	2800      	cmp	r0, #0
 800a818:	f73f adbb 	bgt.w	800a392 <_dtoa_r+0x4ca>
 800a81c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a81e:	9d00      	ldr	r5, [sp, #0]
 800a820:	ea6f 0b03 	mvn.w	fp, r3
 800a824:	f04f 0800 	mov.w	r8, #0
 800a828:	4631      	mov	r1, r6
 800a82a:	4620      	mov	r0, r4
 800a82c:	f000 fa7e 	bl	800ad2c <_Bfree>
 800a830:	2f00      	cmp	r7, #0
 800a832:	f43f aeab 	beq.w	800a58c <_dtoa_r+0x6c4>
 800a836:	f1b8 0f00 	cmp.w	r8, #0
 800a83a:	d005      	beq.n	800a848 <_dtoa_r+0x980>
 800a83c:	45b8      	cmp	r8, r7
 800a83e:	d003      	beq.n	800a848 <_dtoa_r+0x980>
 800a840:	4641      	mov	r1, r8
 800a842:	4620      	mov	r0, r4
 800a844:	f000 fa72 	bl	800ad2c <_Bfree>
 800a848:	4639      	mov	r1, r7
 800a84a:	4620      	mov	r0, r4
 800a84c:	f000 fa6e 	bl	800ad2c <_Bfree>
 800a850:	e69c      	b.n	800a58c <_dtoa_r+0x6c4>
 800a852:	2600      	movs	r6, #0
 800a854:	4637      	mov	r7, r6
 800a856:	e7e1      	b.n	800a81c <_dtoa_r+0x954>
 800a858:	46bb      	mov	fp, r7
 800a85a:	4637      	mov	r7, r6
 800a85c:	e599      	b.n	800a392 <_dtoa_r+0x4ca>
 800a85e:	bf00      	nop
 800a860:	40240000 	.word	0x40240000
 800a864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a866:	2b00      	cmp	r3, #0
 800a868:	f000 80c8 	beq.w	800a9fc <_dtoa_r+0xb34>
 800a86c:	9b04      	ldr	r3, [sp, #16]
 800a86e:	9301      	str	r3, [sp, #4]
 800a870:	2d00      	cmp	r5, #0
 800a872:	dd05      	ble.n	800a880 <_dtoa_r+0x9b8>
 800a874:	4639      	mov	r1, r7
 800a876:	462a      	mov	r2, r5
 800a878:	4620      	mov	r0, r4
 800a87a:	f000 fc27 	bl	800b0cc <__lshift>
 800a87e:	4607      	mov	r7, r0
 800a880:	f1b8 0f00 	cmp.w	r8, #0
 800a884:	d05b      	beq.n	800a93e <_dtoa_r+0xa76>
 800a886:	6879      	ldr	r1, [r7, #4]
 800a888:	4620      	mov	r0, r4
 800a88a:	f000 fa0f 	bl	800acac <_Balloc>
 800a88e:	4605      	mov	r5, r0
 800a890:	b928      	cbnz	r0, 800a89e <_dtoa_r+0x9d6>
 800a892:	4b83      	ldr	r3, [pc, #524]	; (800aaa0 <_dtoa_r+0xbd8>)
 800a894:	4602      	mov	r2, r0
 800a896:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a89a:	f7ff bb2e 	b.w	8009efa <_dtoa_r+0x32>
 800a89e:	693a      	ldr	r2, [r7, #16]
 800a8a0:	3202      	adds	r2, #2
 800a8a2:	0092      	lsls	r2, r2, #2
 800a8a4:	f107 010c 	add.w	r1, r7, #12
 800a8a8:	300c      	adds	r0, #12
 800a8aa:	f000 ffbd 	bl	800b828 <memcpy>
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	4629      	mov	r1, r5
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	f000 fc0a 	bl	800b0cc <__lshift>
 800a8b8:	9b00      	ldr	r3, [sp, #0]
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	9304      	str	r3, [sp, #16]
 800a8be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	9308      	str	r3, [sp, #32]
 800a8c6:	9b02      	ldr	r3, [sp, #8]
 800a8c8:	f003 0301 	and.w	r3, r3, #1
 800a8cc:	46b8      	mov	r8, r7
 800a8ce:	9306      	str	r3, [sp, #24]
 800a8d0:	4607      	mov	r7, r0
 800a8d2:	9b04      	ldr	r3, [sp, #16]
 800a8d4:	4631      	mov	r1, r6
 800a8d6:	3b01      	subs	r3, #1
 800a8d8:	4650      	mov	r0, sl
 800a8da:	9301      	str	r3, [sp, #4]
 800a8dc:	f7ff fa6c 	bl	8009db8 <quorem>
 800a8e0:	4641      	mov	r1, r8
 800a8e2:	9002      	str	r0, [sp, #8]
 800a8e4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a8e8:	4650      	mov	r0, sl
 800a8ea:	f000 fc5b 	bl	800b1a4 <__mcmp>
 800a8ee:	463a      	mov	r2, r7
 800a8f0:	9005      	str	r0, [sp, #20]
 800a8f2:	4631      	mov	r1, r6
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	f000 fc71 	bl	800b1dc <__mdiff>
 800a8fa:	68c2      	ldr	r2, [r0, #12]
 800a8fc:	4605      	mov	r5, r0
 800a8fe:	bb02      	cbnz	r2, 800a942 <_dtoa_r+0xa7a>
 800a900:	4601      	mov	r1, r0
 800a902:	4650      	mov	r0, sl
 800a904:	f000 fc4e 	bl	800b1a4 <__mcmp>
 800a908:	4602      	mov	r2, r0
 800a90a:	4629      	mov	r1, r5
 800a90c:	4620      	mov	r0, r4
 800a90e:	9209      	str	r2, [sp, #36]	; 0x24
 800a910:	f000 fa0c 	bl	800ad2c <_Bfree>
 800a914:	9b07      	ldr	r3, [sp, #28]
 800a916:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a918:	9d04      	ldr	r5, [sp, #16]
 800a91a:	ea43 0102 	orr.w	r1, r3, r2
 800a91e:	9b06      	ldr	r3, [sp, #24]
 800a920:	4319      	orrs	r1, r3
 800a922:	d110      	bne.n	800a946 <_dtoa_r+0xa7e>
 800a924:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a928:	d029      	beq.n	800a97e <_dtoa_r+0xab6>
 800a92a:	9b05      	ldr	r3, [sp, #20]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	dd02      	ble.n	800a936 <_dtoa_r+0xa6e>
 800a930:	9b02      	ldr	r3, [sp, #8]
 800a932:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a936:	9b01      	ldr	r3, [sp, #4]
 800a938:	f883 9000 	strb.w	r9, [r3]
 800a93c:	e774      	b.n	800a828 <_dtoa_r+0x960>
 800a93e:	4638      	mov	r0, r7
 800a940:	e7ba      	b.n	800a8b8 <_dtoa_r+0x9f0>
 800a942:	2201      	movs	r2, #1
 800a944:	e7e1      	b.n	800a90a <_dtoa_r+0xa42>
 800a946:	9b05      	ldr	r3, [sp, #20]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	db04      	blt.n	800a956 <_dtoa_r+0xa8e>
 800a94c:	9907      	ldr	r1, [sp, #28]
 800a94e:	430b      	orrs	r3, r1
 800a950:	9906      	ldr	r1, [sp, #24]
 800a952:	430b      	orrs	r3, r1
 800a954:	d120      	bne.n	800a998 <_dtoa_r+0xad0>
 800a956:	2a00      	cmp	r2, #0
 800a958:	dded      	ble.n	800a936 <_dtoa_r+0xa6e>
 800a95a:	4651      	mov	r1, sl
 800a95c:	2201      	movs	r2, #1
 800a95e:	4620      	mov	r0, r4
 800a960:	f000 fbb4 	bl	800b0cc <__lshift>
 800a964:	4631      	mov	r1, r6
 800a966:	4682      	mov	sl, r0
 800a968:	f000 fc1c 	bl	800b1a4 <__mcmp>
 800a96c:	2800      	cmp	r0, #0
 800a96e:	dc03      	bgt.n	800a978 <_dtoa_r+0xab0>
 800a970:	d1e1      	bne.n	800a936 <_dtoa_r+0xa6e>
 800a972:	f019 0f01 	tst.w	r9, #1
 800a976:	d0de      	beq.n	800a936 <_dtoa_r+0xa6e>
 800a978:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a97c:	d1d8      	bne.n	800a930 <_dtoa_r+0xa68>
 800a97e:	9a01      	ldr	r2, [sp, #4]
 800a980:	2339      	movs	r3, #57	; 0x39
 800a982:	7013      	strb	r3, [r2, #0]
 800a984:	462b      	mov	r3, r5
 800a986:	461d      	mov	r5, r3
 800a988:	3b01      	subs	r3, #1
 800a98a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a98e:	2a39      	cmp	r2, #57	; 0x39
 800a990:	d06c      	beq.n	800aa6c <_dtoa_r+0xba4>
 800a992:	3201      	adds	r2, #1
 800a994:	701a      	strb	r2, [r3, #0]
 800a996:	e747      	b.n	800a828 <_dtoa_r+0x960>
 800a998:	2a00      	cmp	r2, #0
 800a99a:	dd07      	ble.n	800a9ac <_dtoa_r+0xae4>
 800a99c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a9a0:	d0ed      	beq.n	800a97e <_dtoa_r+0xab6>
 800a9a2:	9a01      	ldr	r2, [sp, #4]
 800a9a4:	f109 0301 	add.w	r3, r9, #1
 800a9a8:	7013      	strb	r3, [r2, #0]
 800a9aa:	e73d      	b.n	800a828 <_dtoa_r+0x960>
 800a9ac:	9b04      	ldr	r3, [sp, #16]
 800a9ae:	9a08      	ldr	r2, [sp, #32]
 800a9b0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d043      	beq.n	800aa40 <_dtoa_r+0xb78>
 800a9b8:	4651      	mov	r1, sl
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	220a      	movs	r2, #10
 800a9be:	4620      	mov	r0, r4
 800a9c0:	f000 f9d6 	bl	800ad70 <__multadd>
 800a9c4:	45b8      	cmp	r8, r7
 800a9c6:	4682      	mov	sl, r0
 800a9c8:	f04f 0300 	mov.w	r3, #0
 800a9cc:	f04f 020a 	mov.w	r2, #10
 800a9d0:	4641      	mov	r1, r8
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	d107      	bne.n	800a9e6 <_dtoa_r+0xb1e>
 800a9d6:	f000 f9cb 	bl	800ad70 <__multadd>
 800a9da:	4680      	mov	r8, r0
 800a9dc:	4607      	mov	r7, r0
 800a9de:	9b04      	ldr	r3, [sp, #16]
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	9304      	str	r3, [sp, #16]
 800a9e4:	e775      	b.n	800a8d2 <_dtoa_r+0xa0a>
 800a9e6:	f000 f9c3 	bl	800ad70 <__multadd>
 800a9ea:	4639      	mov	r1, r7
 800a9ec:	4680      	mov	r8, r0
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	220a      	movs	r2, #10
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	f000 f9bc 	bl	800ad70 <__multadd>
 800a9f8:	4607      	mov	r7, r0
 800a9fa:	e7f0      	b.n	800a9de <_dtoa_r+0xb16>
 800a9fc:	9b04      	ldr	r3, [sp, #16]
 800a9fe:	9301      	str	r3, [sp, #4]
 800aa00:	9d00      	ldr	r5, [sp, #0]
 800aa02:	4631      	mov	r1, r6
 800aa04:	4650      	mov	r0, sl
 800aa06:	f7ff f9d7 	bl	8009db8 <quorem>
 800aa0a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800aa0e:	9b00      	ldr	r3, [sp, #0]
 800aa10:	f805 9b01 	strb.w	r9, [r5], #1
 800aa14:	1aea      	subs	r2, r5, r3
 800aa16:	9b01      	ldr	r3, [sp, #4]
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	dd07      	ble.n	800aa2c <_dtoa_r+0xb64>
 800aa1c:	4651      	mov	r1, sl
 800aa1e:	2300      	movs	r3, #0
 800aa20:	220a      	movs	r2, #10
 800aa22:	4620      	mov	r0, r4
 800aa24:	f000 f9a4 	bl	800ad70 <__multadd>
 800aa28:	4682      	mov	sl, r0
 800aa2a:	e7ea      	b.n	800aa02 <_dtoa_r+0xb3a>
 800aa2c:	9b01      	ldr	r3, [sp, #4]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	bfc8      	it	gt
 800aa32:	461d      	movgt	r5, r3
 800aa34:	9b00      	ldr	r3, [sp, #0]
 800aa36:	bfd8      	it	le
 800aa38:	2501      	movle	r5, #1
 800aa3a:	441d      	add	r5, r3
 800aa3c:	f04f 0800 	mov.w	r8, #0
 800aa40:	4651      	mov	r1, sl
 800aa42:	2201      	movs	r2, #1
 800aa44:	4620      	mov	r0, r4
 800aa46:	f000 fb41 	bl	800b0cc <__lshift>
 800aa4a:	4631      	mov	r1, r6
 800aa4c:	4682      	mov	sl, r0
 800aa4e:	f000 fba9 	bl	800b1a4 <__mcmp>
 800aa52:	2800      	cmp	r0, #0
 800aa54:	dc96      	bgt.n	800a984 <_dtoa_r+0xabc>
 800aa56:	d102      	bne.n	800aa5e <_dtoa_r+0xb96>
 800aa58:	f019 0f01 	tst.w	r9, #1
 800aa5c:	d192      	bne.n	800a984 <_dtoa_r+0xabc>
 800aa5e:	462b      	mov	r3, r5
 800aa60:	461d      	mov	r5, r3
 800aa62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa66:	2a30      	cmp	r2, #48	; 0x30
 800aa68:	d0fa      	beq.n	800aa60 <_dtoa_r+0xb98>
 800aa6a:	e6dd      	b.n	800a828 <_dtoa_r+0x960>
 800aa6c:	9a00      	ldr	r2, [sp, #0]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d189      	bne.n	800a986 <_dtoa_r+0xabe>
 800aa72:	f10b 0b01 	add.w	fp, fp, #1
 800aa76:	2331      	movs	r3, #49	; 0x31
 800aa78:	e796      	b.n	800a9a8 <_dtoa_r+0xae0>
 800aa7a:	4b0a      	ldr	r3, [pc, #40]	; (800aaa4 <_dtoa_r+0xbdc>)
 800aa7c:	f7ff ba99 	b.w	8009fb2 <_dtoa_r+0xea>
 800aa80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	f47f aa6d 	bne.w	8009f62 <_dtoa_r+0x9a>
 800aa88:	4b07      	ldr	r3, [pc, #28]	; (800aaa8 <_dtoa_r+0xbe0>)
 800aa8a:	f7ff ba92 	b.w	8009fb2 <_dtoa_r+0xea>
 800aa8e:	9b01      	ldr	r3, [sp, #4]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	dcb5      	bgt.n	800aa00 <_dtoa_r+0xb38>
 800aa94:	9b07      	ldr	r3, [sp, #28]
 800aa96:	2b02      	cmp	r3, #2
 800aa98:	f73f aeb1 	bgt.w	800a7fe <_dtoa_r+0x936>
 800aa9c:	e7b0      	b.n	800aa00 <_dtoa_r+0xb38>
 800aa9e:	bf00      	nop
 800aaa0:	0800c183 	.word	0x0800c183
 800aaa4:	0800c04d 	.word	0x0800c04d
 800aaa8:	0800c11e 	.word	0x0800c11e

0800aaac <_free_r>:
 800aaac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aaae:	2900      	cmp	r1, #0
 800aab0:	d044      	beq.n	800ab3c <_free_r+0x90>
 800aab2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aab6:	9001      	str	r0, [sp, #4]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	f1a1 0404 	sub.w	r4, r1, #4
 800aabe:	bfb8      	it	lt
 800aac0:	18e4      	addlt	r4, r4, r3
 800aac2:	f000 f8e7 	bl	800ac94 <__malloc_lock>
 800aac6:	4a1e      	ldr	r2, [pc, #120]	; (800ab40 <_free_r+0x94>)
 800aac8:	9801      	ldr	r0, [sp, #4]
 800aaca:	6813      	ldr	r3, [r2, #0]
 800aacc:	b933      	cbnz	r3, 800aadc <_free_r+0x30>
 800aace:	6063      	str	r3, [r4, #4]
 800aad0:	6014      	str	r4, [r2, #0]
 800aad2:	b003      	add	sp, #12
 800aad4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aad8:	f000 b8e2 	b.w	800aca0 <__malloc_unlock>
 800aadc:	42a3      	cmp	r3, r4
 800aade:	d908      	bls.n	800aaf2 <_free_r+0x46>
 800aae0:	6825      	ldr	r5, [r4, #0]
 800aae2:	1961      	adds	r1, r4, r5
 800aae4:	428b      	cmp	r3, r1
 800aae6:	bf01      	itttt	eq
 800aae8:	6819      	ldreq	r1, [r3, #0]
 800aaea:	685b      	ldreq	r3, [r3, #4]
 800aaec:	1949      	addeq	r1, r1, r5
 800aaee:	6021      	streq	r1, [r4, #0]
 800aaf0:	e7ed      	b.n	800aace <_free_r+0x22>
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	685b      	ldr	r3, [r3, #4]
 800aaf6:	b10b      	cbz	r3, 800aafc <_free_r+0x50>
 800aaf8:	42a3      	cmp	r3, r4
 800aafa:	d9fa      	bls.n	800aaf2 <_free_r+0x46>
 800aafc:	6811      	ldr	r1, [r2, #0]
 800aafe:	1855      	adds	r5, r2, r1
 800ab00:	42a5      	cmp	r5, r4
 800ab02:	d10b      	bne.n	800ab1c <_free_r+0x70>
 800ab04:	6824      	ldr	r4, [r4, #0]
 800ab06:	4421      	add	r1, r4
 800ab08:	1854      	adds	r4, r2, r1
 800ab0a:	42a3      	cmp	r3, r4
 800ab0c:	6011      	str	r1, [r2, #0]
 800ab0e:	d1e0      	bne.n	800aad2 <_free_r+0x26>
 800ab10:	681c      	ldr	r4, [r3, #0]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	6053      	str	r3, [r2, #4]
 800ab16:	440c      	add	r4, r1
 800ab18:	6014      	str	r4, [r2, #0]
 800ab1a:	e7da      	b.n	800aad2 <_free_r+0x26>
 800ab1c:	d902      	bls.n	800ab24 <_free_r+0x78>
 800ab1e:	230c      	movs	r3, #12
 800ab20:	6003      	str	r3, [r0, #0]
 800ab22:	e7d6      	b.n	800aad2 <_free_r+0x26>
 800ab24:	6825      	ldr	r5, [r4, #0]
 800ab26:	1961      	adds	r1, r4, r5
 800ab28:	428b      	cmp	r3, r1
 800ab2a:	bf04      	itt	eq
 800ab2c:	6819      	ldreq	r1, [r3, #0]
 800ab2e:	685b      	ldreq	r3, [r3, #4]
 800ab30:	6063      	str	r3, [r4, #4]
 800ab32:	bf04      	itt	eq
 800ab34:	1949      	addeq	r1, r1, r5
 800ab36:	6021      	streq	r1, [r4, #0]
 800ab38:	6054      	str	r4, [r2, #4]
 800ab3a:	e7ca      	b.n	800aad2 <_free_r+0x26>
 800ab3c:	b003      	add	sp, #12
 800ab3e:	bd30      	pop	{r4, r5, pc}
 800ab40:	20000794 	.word	0x20000794

0800ab44 <malloc>:
 800ab44:	4b02      	ldr	r3, [pc, #8]	; (800ab50 <malloc+0xc>)
 800ab46:	4601      	mov	r1, r0
 800ab48:	6818      	ldr	r0, [r3, #0]
 800ab4a:	f000 b823 	b.w	800ab94 <_malloc_r>
 800ab4e:	bf00      	nop
 800ab50:	20000120 	.word	0x20000120

0800ab54 <sbrk_aligned>:
 800ab54:	b570      	push	{r4, r5, r6, lr}
 800ab56:	4e0e      	ldr	r6, [pc, #56]	; (800ab90 <sbrk_aligned+0x3c>)
 800ab58:	460c      	mov	r4, r1
 800ab5a:	6831      	ldr	r1, [r6, #0]
 800ab5c:	4605      	mov	r5, r0
 800ab5e:	b911      	cbnz	r1, 800ab66 <sbrk_aligned+0x12>
 800ab60:	f000 fe52 	bl	800b808 <_sbrk_r>
 800ab64:	6030      	str	r0, [r6, #0]
 800ab66:	4621      	mov	r1, r4
 800ab68:	4628      	mov	r0, r5
 800ab6a:	f000 fe4d 	bl	800b808 <_sbrk_r>
 800ab6e:	1c43      	adds	r3, r0, #1
 800ab70:	d00a      	beq.n	800ab88 <sbrk_aligned+0x34>
 800ab72:	1cc4      	adds	r4, r0, #3
 800ab74:	f024 0403 	bic.w	r4, r4, #3
 800ab78:	42a0      	cmp	r0, r4
 800ab7a:	d007      	beq.n	800ab8c <sbrk_aligned+0x38>
 800ab7c:	1a21      	subs	r1, r4, r0
 800ab7e:	4628      	mov	r0, r5
 800ab80:	f000 fe42 	bl	800b808 <_sbrk_r>
 800ab84:	3001      	adds	r0, #1
 800ab86:	d101      	bne.n	800ab8c <sbrk_aligned+0x38>
 800ab88:	f04f 34ff 	mov.w	r4, #4294967295
 800ab8c:	4620      	mov	r0, r4
 800ab8e:	bd70      	pop	{r4, r5, r6, pc}
 800ab90:	20000798 	.word	0x20000798

0800ab94 <_malloc_r>:
 800ab94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab98:	1ccd      	adds	r5, r1, #3
 800ab9a:	f025 0503 	bic.w	r5, r5, #3
 800ab9e:	3508      	adds	r5, #8
 800aba0:	2d0c      	cmp	r5, #12
 800aba2:	bf38      	it	cc
 800aba4:	250c      	movcc	r5, #12
 800aba6:	2d00      	cmp	r5, #0
 800aba8:	4607      	mov	r7, r0
 800abaa:	db01      	blt.n	800abb0 <_malloc_r+0x1c>
 800abac:	42a9      	cmp	r1, r5
 800abae:	d905      	bls.n	800abbc <_malloc_r+0x28>
 800abb0:	230c      	movs	r3, #12
 800abb2:	603b      	str	r3, [r7, #0]
 800abb4:	2600      	movs	r6, #0
 800abb6:	4630      	mov	r0, r6
 800abb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abbc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ac90 <_malloc_r+0xfc>
 800abc0:	f000 f868 	bl	800ac94 <__malloc_lock>
 800abc4:	f8d8 3000 	ldr.w	r3, [r8]
 800abc8:	461c      	mov	r4, r3
 800abca:	bb5c      	cbnz	r4, 800ac24 <_malloc_r+0x90>
 800abcc:	4629      	mov	r1, r5
 800abce:	4638      	mov	r0, r7
 800abd0:	f7ff ffc0 	bl	800ab54 <sbrk_aligned>
 800abd4:	1c43      	adds	r3, r0, #1
 800abd6:	4604      	mov	r4, r0
 800abd8:	d155      	bne.n	800ac86 <_malloc_r+0xf2>
 800abda:	f8d8 4000 	ldr.w	r4, [r8]
 800abde:	4626      	mov	r6, r4
 800abe0:	2e00      	cmp	r6, #0
 800abe2:	d145      	bne.n	800ac70 <_malloc_r+0xdc>
 800abe4:	2c00      	cmp	r4, #0
 800abe6:	d048      	beq.n	800ac7a <_malloc_r+0xe6>
 800abe8:	6823      	ldr	r3, [r4, #0]
 800abea:	4631      	mov	r1, r6
 800abec:	4638      	mov	r0, r7
 800abee:	eb04 0903 	add.w	r9, r4, r3
 800abf2:	f000 fe09 	bl	800b808 <_sbrk_r>
 800abf6:	4581      	cmp	r9, r0
 800abf8:	d13f      	bne.n	800ac7a <_malloc_r+0xe6>
 800abfa:	6821      	ldr	r1, [r4, #0]
 800abfc:	1a6d      	subs	r5, r5, r1
 800abfe:	4629      	mov	r1, r5
 800ac00:	4638      	mov	r0, r7
 800ac02:	f7ff ffa7 	bl	800ab54 <sbrk_aligned>
 800ac06:	3001      	adds	r0, #1
 800ac08:	d037      	beq.n	800ac7a <_malloc_r+0xe6>
 800ac0a:	6823      	ldr	r3, [r4, #0]
 800ac0c:	442b      	add	r3, r5
 800ac0e:	6023      	str	r3, [r4, #0]
 800ac10:	f8d8 3000 	ldr.w	r3, [r8]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d038      	beq.n	800ac8a <_malloc_r+0xf6>
 800ac18:	685a      	ldr	r2, [r3, #4]
 800ac1a:	42a2      	cmp	r2, r4
 800ac1c:	d12b      	bne.n	800ac76 <_malloc_r+0xe2>
 800ac1e:	2200      	movs	r2, #0
 800ac20:	605a      	str	r2, [r3, #4]
 800ac22:	e00f      	b.n	800ac44 <_malloc_r+0xb0>
 800ac24:	6822      	ldr	r2, [r4, #0]
 800ac26:	1b52      	subs	r2, r2, r5
 800ac28:	d41f      	bmi.n	800ac6a <_malloc_r+0xd6>
 800ac2a:	2a0b      	cmp	r2, #11
 800ac2c:	d917      	bls.n	800ac5e <_malloc_r+0xca>
 800ac2e:	1961      	adds	r1, r4, r5
 800ac30:	42a3      	cmp	r3, r4
 800ac32:	6025      	str	r5, [r4, #0]
 800ac34:	bf18      	it	ne
 800ac36:	6059      	strne	r1, [r3, #4]
 800ac38:	6863      	ldr	r3, [r4, #4]
 800ac3a:	bf08      	it	eq
 800ac3c:	f8c8 1000 	streq.w	r1, [r8]
 800ac40:	5162      	str	r2, [r4, r5]
 800ac42:	604b      	str	r3, [r1, #4]
 800ac44:	4638      	mov	r0, r7
 800ac46:	f104 060b 	add.w	r6, r4, #11
 800ac4a:	f000 f829 	bl	800aca0 <__malloc_unlock>
 800ac4e:	f026 0607 	bic.w	r6, r6, #7
 800ac52:	1d23      	adds	r3, r4, #4
 800ac54:	1af2      	subs	r2, r6, r3
 800ac56:	d0ae      	beq.n	800abb6 <_malloc_r+0x22>
 800ac58:	1b9b      	subs	r3, r3, r6
 800ac5a:	50a3      	str	r3, [r4, r2]
 800ac5c:	e7ab      	b.n	800abb6 <_malloc_r+0x22>
 800ac5e:	42a3      	cmp	r3, r4
 800ac60:	6862      	ldr	r2, [r4, #4]
 800ac62:	d1dd      	bne.n	800ac20 <_malloc_r+0x8c>
 800ac64:	f8c8 2000 	str.w	r2, [r8]
 800ac68:	e7ec      	b.n	800ac44 <_malloc_r+0xb0>
 800ac6a:	4623      	mov	r3, r4
 800ac6c:	6864      	ldr	r4, [r4, #4]
 800ac6e:	e7ac      	b.n	800abca <_malloc_r+0x36>
 800ac70:	4634      	mov	r4, r6
 800ac72:	6876      	ldr	r6, [r6, #4]
 800ac74:	e7b4      	b.n	800abe0 <_malloc_r+0x4c>
 800ac76:	4613      	mov	r3, r2
 800ac78:	e7cc      	b.n	800ac14 <_malloc_r+0x80>
 800ac7a:	230c      	movs	r3, #12
 800ac7c:	603b      	str	r3, [r7, #0]
 800ac7e:	4638      	mov	r0, r7
 800ac80:	f000 f80e 	bl	800aca0 <__malloc_unlock>
 800ac84:	e797      	b.n	800abb6 <_malloc_r+0x22>
 800ac86:	6025      	str	r5, [r4, #0]
 800ac88:	e7dc      	b.n	800ac44 <_malloc_r+0xb0>
 800ac8a:	605b      	str	r3, [r3, #4]
 800ac8c:	deff      	udf	#255	; 0xff
 800ac8e:	bf00      	nop
 800ac90:	20000794 	.word	0x20000794

0800ac94 <__malloc_lock>:
 800ac94:	4801      	ldr	r0, [pc, #4]	; (800ac9c <__malloc_lock+0x8>)
 800ac96:	f7ff b86f 	b.w	8009d78 <__retarget_lock_acquire_recursive>
 800ac9a:	bf00      	nop
 800ac9c:	20000790 	.word	0x20000790

0800aca0 <__malloc_unlock>:
 800aca0:	4801      	ldr	r0, [pc, #4]	; (800aca8 <__malloc_unlock+0x8>)
 800aca2:	f7ff b86a 	b.w	8009d7a <__retarget_lock_release_recursive>
 800aca6:	bf00      	nop
 800aca8:	20000790 	.word	0x20000790

0800acac <_Balloc>:
 800acac:	b570      	push	{r4, r5, r6, lr}
 800acae:	69c6      	ldr	r6, [r0, #28]
 800acb0:	4604      	mov	r4, r0
 800acb2:	460d      	mov	r5, r1
 800acb4:	b976      	cbnz	r6, 800acd4 <_Balloc+0x28>
 800acb6:	2010      	movs	r0, #16
 800acb8:	f7ff ff44 	bl	800ab44 <malloc>
 800acbc:	4602      	mov	r2, r0
 800acbe:	61e0      	str	r0, [r4, #28]
 800acc0:	b920      	cbnz	r0, 800accc <_Balloc+0x20>
 800acc2:	4b18      	ldr	r3, [pc, #96]	; (800ad24 <_Balloc+0x78>)
 800acc4:	4818      	ldr	r0, [pc, #96]	; (800ad28 <_Balloc+0x7c>)
 800acc6:	216b      	movs	r1, #107	; 0x6b
 800acc8:	f7ff f858 	bl	8009d7c <__assert_func>
 800accc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800acd0:	6006      	str	r6, [r0, #0]
 800acd2:	60c6      	str	r6, [r0, #12]
 800acd4:	69e6      	ldr	r6, [r4, #28]
 800acd6:	68f3      	ldr	r3, [r6, #12]
 800acd8:	b183      	cbz	r3, 800acfc <_Balloc+0x50>
 800acda:	69e3      	ldr	r3, [r4, #28]
 800acdc:	68db      	ldr	r3, [r3, #12]
 800acde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ace2:	b9b8      	cbnz	r0, 800ad14 <_Balloc+0x68>
 800ace4:	2101      	movs	r1, #1
 800ace6:	fa01 f605 	lsl.w	r6, r1, r5
 800acea:	1d72      	adds	r2, r6, #5
 800acec:	0092      	lsls	r2, r2, #2
 800acee:	4620      	mov	r0, r4
 800acf0:	f000 fdaf 	bl	800b852 <_calloc_r>
 800acf4:	b160      	cbz	r0, 800ad10 <_Balloc+0x64>
 800acf6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800acfa:	e00e      	b.n	800ad1a <_Balloc+0x6e>
 800acfc:	2221      	movs	r2, #33	; 0x21
 800acfe:	2104      	movs	r1, #4
 800ad00:	4620      	mov	r0, r4
 800ad02:	f000 fda6 	bl	800b852 <_calloc_r>
 800ad06:	69e3      	ldr	r3, [r4, #28]
 800ad08:	60f0      	str	r0, [r6, #12]
 800ad0a:	68db      	ldr	r3, [r3, #12]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d1e4      	bne.n	800acda <_Balloc+0x2e>
 800ad10:	2000      	movs	r0, #0
 800ad12:	bd70      	pop	{r4, r5, r6, pc}
 800ad14:	6802      	ldr	r2, [r0, #0]
 800ad16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ad20:	e7f7      	b.n	800ad12 <_Balloc+0x66>
 800ad22:	bf00      	nop
 800ad24:	0800c071 	.word	0x0800c071
 800ad28:	0800c194 	.word	0x0800c194

0800ad2c <_Bfree>:
 800ad2c:	b570      	push	{r4, r5, r6, lr}
 800ad2e:	69c6      	ldr	r6, [r0, #28]
 800ad30:	4605      	mov	r5, r0
 800ad32:	460c      	mov	r4, r1
 800ad34:	b976      	cbnz	r6, 800ad54 <_Bfree+0x28>
 800ad36:	2010      	movs	r0, #16
 800ad38:	f7ff ff04 	bl	800ab44 <malloc>
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	61e8      	str	r0, [r5, #28]
 800ad40:	b920      	cbnz	r0, 800ad4c <_Bfree+0x20>
 800ad42:	4b09      	ldr	r3, [pc, #36]	; (800ad68 <_Bfree+0x3c>)
 800ad44:	4809      	ldr	r0, [pc, #36]	; (800ad6c <_Bfree+0x40>)
 800ad46:	218f      	movs	r1, #143	; 0x8f
 800ad48:	f7ff f818 	bl	8009d7c <__assert_func>
 800ad4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad50:	6006      	str	r6, [r0, #0]
 800ad52:	60c6      	str	r6, [r0, #12]
 800ad54:	b13c      	cbz	r4, 800ad66 <_Bfree+0x3a>
 800ad56:	69eb      	ldr	r3, [r5, #28]
 800ad58:	6862      	ldr	r2, [r4, #4]
 800ad5a:	68db      	ldr	r3, [r3, #12]
 800ad5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad60:	6021      	str	r1, [r4, #0]
 800ad62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad66:	bd70      	pop	{r4, r5, r6, pc}
 800ad68:	0800c071 	.word	0x0800c071
 800ad6c:	0800c194 	.word	0x0800c194

0800ad70 <__multadd>:
 800ad70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad74:	690d      	ldr	r5, [r1, #16]
 800ad76:	4607      	mov	r7, r0
 800ad78:	460c      	mov	r4, r1
 800ad7a:	461e      	mov	r6, r3
 800ad7c:	f101 0c14 	add.w	ip, r1, #20
 800ad80:	2000      	movs	r0, #0
 800ad82:	f8dc 3000 	ldr.w	r3, [ip]
 800ad86:	b299      	uxth	r1, r3
 800ad88:	fb02 6101 	mla	r1, r2, r1, r6
 800ad8c:	0c1e      	lsrs	r6, r3, #16
 800ad8e:	0c0b      	lsrs	r3, r1, #16
 800ad90:	fb02 3306 	mla	r3, r2, r6, r3
 800ad94:	b289      	uxth	r1, r1
 800ad96:	3001      	adds	r0, #1
 800ad98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad9c:	4285      	cmp	r5, r0
 800ad9e:	f84c 1b04 	str.w	r1, [ip], #4
 800ada2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ada6:	dcec      	bgt.n	800ad82 <__multadd+0x12>
 800ada8:	b30e      	cbz	r6, 800adee <__multadd+0x7e>
 800adaa:	68a3      	ldr	r3, [r4, #8]
 800adac:	42ab      	cmp	r3, r5
 800adae:	dc19      	bgt.n	800ade4 <__multadd+0x74>
 800adb0:	6861      	ldr	r1, [r4, #4]
 800adb2:	4638      	mov	r0, r7
 800adb4:	3101      	adds	r1, #1
 800adb6:	f7ff ff79 	bl	800acac <_Balloc>
 800adba:	4680      	mov	r8, r0
 800adbc:	b928      	cbnz	r0, 800adca <__multadd+0x5a>
 800adbe:	4602      	mov	r2, r0
 800adc0:	4b0c      	ldr	r3, [pc, #48]	; (800adf4 <__multadd+0x84>)
 800adc2:	480d      	ldr	r0, [pc, #52]	; (800adf8 <__multadd+0x88>)
 800adc4:	21ba      	movs	r1, #186	; 0xba
 800adc6:	f7fe ffd9 	bl	8009d7c <__assert_func>
 800adca:	6922      	ldr	r2, [r4, #16]
 800adcc:	3202      	adds	r2, #2
 800adce:	f104 010c 	add.w	r1, r4, #12
 800add2:	0092      	lsls	r2, r2, #2
 800add4:	300c      	adds	r0, #12
 800add6:	f000 fd27 	bl	800b828 <memcpy>
 800adda:	4621      	mov	r1, r4
 800addc:	4638      	mov	r0, r7
 800adde:	f7ff ffa5 	bl	800ad2c <_Bfree>
 800ade2:	4644      	mov	r4, r8
 800ade4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ade8:	3501      	adds	r5, #1
 800adea:	615e      	str	r6, [r3, #20]
 800adec:	6125      	str	r5, [r4, #16]
 800adee:	4620      	mov	r0, r4
 800adf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adf4:	0800c183 	.word	0x0800c183
 800adf8:	0800c194 	.word	0x0800c194

0800adfc <__hi0bits>:
 800adfc:	0c03      	lsrs	r3, r0, #16
 800adfe:	041b      	lsls	r3, r3, #16
 800ae00:	b9d3      	cbnz	r3, 800ae38 <__hi0bits+0x3c>
 800ae02:	0400      	lsls	r0, r0, #16
 800ae04:	2310      	movs	r3, #16
 800ae06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ae0a:	bf04      	itt	eq
 800ae0c:	0200      	lsleq	r0, r0, #8
 800ae0e:	3308      	addeq	r3, #8
 800ae10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ae14:	bf04      	itt	eq
 800ae16:	0100      	lsleq	r0, r0, #4
 800ae18:	3304      	addeq	r3, #4
 800ae1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ae1e:	bf04      	itt	eq
 800ae20:	0080      	lsleq	r0, r0, #2
 800ae22:	3302      	addeq	r3, #2
 800ae24:	2800      	cmp	r0, #0
 800ae26:	db05      	blt.n	800ae34 <__hi0bits+0x38>
 800ae28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ae2c:	f103 0301 	add.w	r3, r3, #1
 800ae30:	bf08      	it	eq
 800ae32:	2320      	moveq	r3, #32
 800ae34:	4618      	mov	r0, r3
 800ae36:	4770      	bx	lr
 800ae38:	2300      	movs	r3, #0
 800ae3a:	e7e4      	b.n	800ae06 <__hi0bits+0xa>

0800ae3c <__lo0bits>:
 800ae3c:	6803      	ldr	r3, [r0, #0]
 800ae3e:	f013 0207 	ands.w	r2, r3, #7
 800ae42:	d00c      	beq.n	800ae5e <__lo0bits+0x22>
 800ae44:	07d9      	lsls	r1, r3, #31
 800ae46:	d422      	bmi.n	800ae8e <__lo0bits+0x52>
 800ae48:	079a      	lsls	r2, r3, #30
 800ae4a:	bf49      	itett	mi
 800ae4c:	085b      	lsrmi	r3, r3, #1
 800ae4e:	089b      	lsrpl	r3, r3, #2
 800ae50:	6003      	strmi	r3, [r0, #0]
 800ae52:	2201      	movmi	r2, #1
 800ae54:	bf5c      	itt	pl
 800ae56:	6003      	strpl	r3, [r0, #0]
 800ae58:	2202      	movpl	r2, #2
 800ae5a:	4610      	mov	r0, r2
 800ae5c:	4770      	bx	lr
 800ae5e:	b299      	uxth	r1, r3
 800ae60:	b909      	cbnz	r1, 800ae66 <__lo0bits+0x2a>
 800ae62:	0c1b      	lsrs	r3, r3, #16
 800ae64:	2210      	movs	r2, #16
 800ae66:	b2d9      	uxtb	r1, r3
 800ae68:	b909      	cbnz	r1, 800ae6e <__lo0bits+0x32>
 800ae6a:	3208      	adds	r2, #8
 800ae6c:	0a1b      	lsrs	r3, r3, #8
 800ae6e:	0719      	lsls	r1, r3, #28
 800ae70:	bf04      	itt	eq
 800ae72:	091b      	lsreq	r3, r3, #4
 800ae74:	3204      	addeq	r2, #4
 800ae76:	0799      	lsls	r1, r3, #30
 800ae78:	bf04      	itt	eq
 800ae7a:	089b      	lsreq	r3, r3, #2
 800ae7c:	3202      	addeq	r2, #2
 800ae7e:	07d9      	lsls	r1, r3, #31
 800ae80:	d403      	bmi.n	800ae8a <__lo0bits+0x4e>
 800ae82:	085b      	lsrs	r3, r3, #1
 800ae84:	f102 0201 	add.w	r2, r2, #1
 800ae88:	d003      	beq.n	800ae92 <__lo0bits+0x56>
 800ae8a:	6003      	str	r3, [r0, #0]
 800ae8c:	e7e5      	b.n	800ae5a <__lo0bits+0x1e>
 800ae8e:	2200      	movs	r2, #0
 800ae90:	e7e3      	b.n	800ae5a <__lo0bits+0x1e>
 800ae92:	2220      	movs	r2, #32
 800ae94:	e7e1      	b.n	800ae5a <__lo0bits+0x1e>
	...

0800ae98 <__i2b>:
 800ae98:	b510      	push	{r4, lr}
 800ae9a:	460c      	mov	r4, r1
 800ae9c:	2101      	movs	r1, #1
 800ae9e:	f7ff ff05 	bl	800acac <_Balloc>
 800aea2:	4602      	mov	r2, r0
 800aea4:	b928      	cbnz	r0, 800aeb2 <__i2b+0x1a>
 800aea6:	4b05      	ldr	r3, [pc, #20]	; (800aebc <__i2b+0x24>)
 800aea8:	4805      	ldr	r0, [pc, #20]	; (800aec0 <__i2b+0x28>)
 800aeaa:	f240 1145 	movw	r1, #325	; 0x145
 800aeae:	f7fe ff65 	bl	8009d7c <__assert_func>
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	6144      	str	r4, [r0, #20]
 800aeb6:	6103      	str	r3, [r0, #16]
 800aeb8:	bd10      	pop	{r4, pc}
 800aeba:	bf00      	nop
 800aebc:	0800c183 	.word	0x0800c183
 800aec0:	0800c194 	.word	0x0800c194

0800aec4 <__multiply>:
 800aec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec8:	4691      	mov	r9, r2
 800aeca:	690a      	ldr	r2, [r1, #16]
 800aecc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aed0:	429a      	cmp	r2, r3
 800aed2:	bfb8      	it	lt
 800aed4:	460b      	movlt	r3, r1
 800aed6:	460c      	mov	r4, r1
 800aed8:	bfbc      	itt	lt
 800aeda:	464c      	movlt	r4, r9
 800aedc:	4699      	movlt	r9, r3
 800aede:	6927      	ldr	r7, [r4, #16]
 800aee0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aee4:	68a3      	ldr	r3, [r4, #8]
 800aee6:	6861      	ldr	r1, [r4, #4]
 800aee8:	eb07 060a 	add.w	r6, r7, sl
 800aeec:	42b3      	cmp	r3, r6
 800aeee:	b085      	sub	sp, #20
 800aef0:	bfb8      	it	lt
 800aef2:	3101      	addlt	r1, #1
 800aef4:	f7ff feda 	bl	800acac <_Balloc>
 800aef8:	b930      	cbnz	r0, 800af08 <__multiply+0x44>
 800aefa:	4602      	mov	r2, r0
 800aefc:	4b44      	ldr	r3, [pc, #272]	; (800b010 <__multiply+0x14c>)
 800aefe:	4845      	ldr	r0, [pc, #276]	; (800b014 <__multiply+0x150>)
 800af00:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800af04:	f7fe ff3a 	bl	8009d7c <__assert_func>
 800af08:	f100 0514 	add.w	r5, r0, #20
 800af0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800af10:	462b      	mov	r3, r5
 800af12:	2200      	movs	r2, #0
 800af14:	4543      	cmp	r3, r8
 800af16:	d321      	bcc.n	800af5c <__multiply+0x98>
 800af18:	f104 0314 	add.w	r3, r4, #20
 800af1c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800af20:	f109 0314 	add.w	r3, r9, #20
 800af24:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800af28:	9202      	str	r2, [sp, #8]
 800af2a:	1b3a      	subs	r2, r7, r4
 800af2c:	3a15      	subs	r2, #21
 800af2e:	f022 0203 	bic.w	r2, r2, #3
 800af32:	3204      	adds	r2, #4
 800af34:	f104 0115 	add.w	r1, r4, #21
 800af38:	428f      	cmp	r7, r1
 800af3a:	bf38      	it	cc
 800af3c:	2204      	movcc	r2, #4
 800af3e:	9201      	str	r2, [sp, #4]
 800af40:	9a02      	ldr	r2, [sp, #8]
 800af42:	9303      	str	r3, [sp, #12]
 800af44:	429a      	cmp	r2, r3
 800af46:	d80c      	bhi.n	800af62 <__multiply+0x9e>
 800af48:	2e00      	cmp	r6, #0
 800af4a:	dd03      	ble.n	800af54 <__multiply+0x90>
 800af4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800af50:	2b00      	cmp	r3, #0
 800af52:	d05b      	beq.n	800b00c <__multiply+0x148>
 800af54:	6106      	str	r6, [r0, #16]
 800af56:	b005      	add	sp, #20
 800af58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af5c:	f843 2b04 	str.w	r2, [r3], #4
 800af60:	e7d8      	b.n	800af14 <__multiply+0x50>
 800af62:	f8b3 a000 	ldrh.w	sl, [r3]
 800af66:	f1ba 0f00 	cmp.w	sl, #0
 800af6a:	d024      	beq.n	800afb6 <__multiply+0xf2>
 800af6c:	f104 0e14 	add.w	lr, r4, #20
 800af70:	46a9      	mov	r9, r5
 800af72:	f04f 0c00 	mov.w	ip, #0
 800af76:	f85e 2b04 	ldr.w	r2, [lr], #4
 800af7a:	f8d9 1000 	ldr.w	r1, [r9]
 800af7e:	fa1f fb82 	uxth.w	fp, r2
 800af82:	b289      	uxth	r1, r1
 800af84:	fb0a 110b 	mla	r1, sl, fp, r1
 800af88:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800af8c:	f8d9 2000 	ldr.w	r2, [r9]
 800af90:	4461      	add	r1, ip
 800af92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800af96:	fb0a c20b 	mla	r2, sl, fp, ip
 800af9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800af9e:	b289      	uxth	r1, r1
 800afa0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800afa4:	4577      	cmp	r7, lr
 800afa6:	f849 1b04 	str.w	r1, [r9], #4
 800afaa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800afae:	d8e2      	bhi.n	800af76 <__multiply+0xb2>
 800afb0:	9a01      	ldr	r2, [sp, #4]
 800afb2:	f845 c002 	str.w	ip, [r5, r2]
 800afb6:	9a03      	ldr	r2, [sp, #12]
 800afb8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800afbc:	3304      	adds	r3, #4
 800afbe:	f1b9 0f00 	cmp.w	r9, #0
 800afc2:	d021      	beq.n	800b008 <__multiply+0x144>
 800afc4:	6829      	ldr	r1, [r5, #0]
 800afc6:	f104 0c14 	add.w	ip, r4, #20
 800afca:	46ae      	mov	lr, r5
 800afcc:	f04f 0a00 	mov.w	sl, #0
 800afd0:	f8bc b000 	ldrh.w	fp, [ip]
 800afd4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800afd8:	fb09 220b 	mla	r2, r9, fp, r2
 800afdc:	4452      	add	r2, sl
 800afde:	b289      	uxth	r1, r1
 800afe0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800afe4:	f84e 1b04 	str.w	r1, [lr], #4
 800afe8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800afec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aff0:	f8be 1000 	ldrh.w	r1, [lr]
 800aff4:	fb09 110a 	mla	r1, r9, sl, r1
 800aff8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800affc:	4567      	cmp	r7, ip
 800affe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b002:	d8e5      	bhi.n	800afd0 <__multiply+0x10c>
 800b004:	9a01      	ldr	r2, [sp, #4]
 800b006:	50a9      	str	r1, [r5, r2]
 800b008:	3504      	adds	r5, #4
 800b00a:	e799      	b.n	800af40 <__multiply+0x7c>
 800b00c:	3e01      	subs	r6, #1
 800b00e:	e79b      	b.n	800af48 <__multiply+0x84>
 800b010:	0800c183 	.word	0x0800c183
 800b014:	0800c194 	.word	0x0800c194

0800b018 <__pow5mult>:
 800b018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b01c:	4615      	mov	r5, r2
 800b01e:	f012 0203 	ands.w	r2, r2, #3
 800b022:	4606      	mov	r6, r0
 800b024:	460f      	mov	r7, r1
 800b026:	d007      	beq.n	800b038 <__pow5mult+0x20>
 800b028:	4c25      	ldr	r4, [pc, #148]	; (800b0c0 <__pow5mult+0xa8>)
 800b02a:	3a01      	subs	r2, #1
 800b02c:	2300      	movs	r3, #0
 800b02e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b032:	f7ff fe9d 	bl	800ad70 <__multadd>
 800b036:	4607      	mov	r7, r0
 800b038:	10ad      	asrs	r5, r5, #2
 800b03a:	d03d      	beq.n	800b0b8 <__pow5mult+0xa0>
 800b03c:	69f4      	ldr	r4, [r6, #28]
 800b03e:	b97c      	cbnz	r4, 800b060 <__pow5mult+0x48>
 800b040:	2010      	movs	r0, #16
 800b042:	f7ff fd7f 	bl	800ab44 <malloc>
 800b046:	4602      	mov	r2, r0
 800b048:	61f0      	str	r0, [r6, #28]
 800b04a:	b928      	cbnz	r0, 800b058 <__pow5mult+0x40>
 800b04c:	4b1d      	ldr	r3, [pc, #116]	; (800b0c4 <__pow5mult+0xac>)
 800b04e:	481e      	ldr	r0, [pc, #120]	; (800b0c8 <__pow5mult+0xb0>)
 800b050:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b054:	f7fe fe92 	bl	8009d7c <__assert_func>
 800b058:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b05c:	6004      	str	r4, [r0, #0]
 800b05e:	60c4      	str	r4, [r0, #12]
 800b060:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b064:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b068:	b94c      	cbnz	r4, 800b07e <__pow5mult+0x66>
 800b06a:	f240 2171 	movw	r1, #625	; 0x271
 800b06e:	4630      	mov	r0, r6
 800b070:	f7ff ff12 	bl	800ae98 <__i2b>
 800b074:	2300      	movs	r3, #0
 800b076:	f8c8 0008 	str.w	r0, [r8, #8]
 800b07a:	4604      	mov	r4, r0
 800b07c:	6003      	str	r3, [r0, #0]
 800b07e:	f04f 0900 	mov.w	r9, #0
 800b082:	07eb      	lsls	r3, r5, #31
 800b084:	d50a      	bpl.n	800b09c <__pow5mult+0x84>
 800b086:	4639      	mov	r1, r7
 800b088:	4622      	mov	r2, r4
 800b08a:	4630      	mov	r0, r6
 800b08c:	f7ff ff1a 	bl	800aec4 <__multiply>
 800b090:	4639      	mov	r1, r7
 800b092:	4680      	mov	r8, r0
 800b094:	4630      	mov	r0, r6
 800b096:	f7ff fe49 	bl	800ad2c <_Bfree>
 800b09a:	4647      	mov	r7, r8
 800b09c:	106d      	asrs	r5, r5, #1
 800b09e:	d00b      	beq.n	800b0b8 <__pow5mult+0xa0>
 800b0a0:	6820      	ldr	r0, [r4, #0]
 800b0a2:	b938      	cbnz	r0, 800b0b4 <__pow5mult+0x9c>
 800b0a4:	4622      	mov	r2, r4
 800b0a6:	4621      	mov	r1, r4
 800b0a8:	4630      	mov	r0, r6
 800b0aa:	f7ff ff0b 	bl	800aec4 <__multiply>
 800b0ae:	6020      	str	r0, [r4, #0]
 800b0b0:	f8c0 9000 	str.w	r9, [r0]
 800b0b4:	4604      	mov	r4, r0
 800b0b6:	e7e4      	b.n	800b082 <__pow5mult+0x6a>
 800b0b8:	4638      	mov	r0, r7
 800b0ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0be:	bf00      	nop
 800b0c0:	0800c2e0 	.word	0x0800c2e0
 800b0c4:	0800c071 	.word	0x0800c071
 800b0c8:	0800c194 	.word	0x0800c194

0800b0cc <__lshift>:
 800b0cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0d0:	460c      	mov	r4, r1
 800b0d2:	6849      	ldr	r1, [r1, #4]
 800b0d4:	6923      	ldr	r3, [r4, #16]
 800b0d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b0da:	68a3      	ldr	r3, [r4, #8]
 800b0dc:	4607      	mov	r7, r0
 800b0de:	4691      	mov	r9, r2
 800b0e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b0e4:	f108 0601 	add.w	r6, r8, #1
 800b0e8:	42b3      	cmp	r3, r6
 800b0ea:	db0b      	blt.n	800b104 <__lshift+0x38>
 800b0ec:	4638      	mov	r0, r7
 800b0ee:	f7ff fddd 	bl	800acac <_Balloc>
 800b0f2:	4605      	mov	r5, r0
 800b0f4:	b948      	cbnz	r0, 800b10a <__lshift+0x3e>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	4b28      	ldr	r3, [pc, #160]	; (800b19c <__lshift+0xd0>)
 800b0fa:	4829      	ldr	r0, [pc, #164]	; (800b1a0 <__lshift+0xd4>)
 800b0fc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b100:	f7fe fe3c 	bl	8009d7c <__assert_func>
 800b104:	3101      	adds	r1, #1
 800b106:	005b      	lsls	r3, r3, #1
 800b108:	e7ee      	b.n	800b0e8 <__lshift+0x1c>
 800b10a:	2300      	movs	r3, #0
 800b10c:	f100 0114 	add.w	r1, r0, #20
 800b110:	f100 0210 	add.w	r2, r0, #16
 800b114:	4618      	mov	r0, r3
 800b116:	4553      	cmp	r3, sl
 800b118:	db33      	blt.n	800b182 <__lshift+0xb6>
 800b11a:	6920      	ldr	r0, [r4, #16]
 800b11c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b120:	f104 0314 	add.w	r3, r4, #20
 800b124:	f019 091f 	ands.w	r9, r9, #31
 800b128:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b12c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b130:	d02b      	beq.n	800b18a <__lshift+0xbe>
 800b132:	f1c9 0e20 	rsb	lr, r9, #32
 800b136:	468a      	mov	sl, r1
 800b138:	2200      	movs	r2, #0
 800b13a:	6818      	ldr	r0, [r3, #0]
 800b13c:	fa00 f009 	lsl.w	r0, r0, r9
 800b140:	4310      	orrs	r0, r2
 800b142:	f84a 0b04 	str.w	r0, [sl], #4
 800b146:	f853 2b04 	ldr.w	r2, [r3], #4
 800b14a:	459c      	cmp	ip, r3
 800b14c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b150:	d8f3      	bhi.n	800b13a <__lshift+0x6e>
 800b152:	ebac 0304 	sub.w	r3, ip, r4
 800b156:	3b15      	subs	r3, #21
 800b158:	f023 0303 	bic.w	r3, r3, #3
 800b15c:	3304      	adds	r3, #4
 800b15e:	f104 0015 	add.w	r0, r4, #21
 800b162:	4584      	cmp	ip, r0
 800b164:	bf38      	it	cc
 800b166:	2304      	movcc	r3, #4
 800b168:	50ca      	str	r2, [r1, r3]
 800b16a:	b10a      	cbz	r2, 800b170 <__lshift+0xa4>
 800b16c:	f108 0602 	add.w	r6, r8, #2
 800b170:	3e01      	subs	r6, #1
 800b172:	4638      	mov	r0, r7
 800b174:	612e      	str	r6, [r5, #16]
 800b176:	4621      	mov	r1, r4
 800b178:	f7ff fdd8 	bl	800ad2c <_Bfree>
 800b17c:	4628      	mov	r0, r5
 800b17e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b182:	f842 0f04 	str.w	r0, [r2, #4]!
 800b186:	3301      	adds	r3, #1
 800b188:	e7c5      	b.n	800b116 <__lshift+0x4a>
 800b18a:	3904      	subs	r1, #4
 800b18c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b190:	f841 2f04 	str.w	r2, [r1, #4]!
 800b194:	459c      	cmp	ip, r3
 800b196:	d8f9      	bhi.n	800b18c <__lshift+0xc0>
 800b198:	e7ea      	b.n	800b170 <__lshift+0xa4>
 800b19a:	bf00      	nop
 800b19c:	0800c183 	.word	0x0800c183
 800b1a0:	0800c194 	.word	0x0800c194

0800b1a4 <__mcmp>:
 800b1a4:	b530      	push	{r4, r5, lr}
 800b1a6:	6902      	ldr	r2, [r0, #16]
 800b1a8:	690c      	ldr	r4, [r1, #16]
 800b1aa:	1b12      	subs	r2, r2, r4
 800b1ac:	d10e      	bne.n	800b1cc <__mcmp+0x28>
 800b1ae:	f100 0314 	add.w	r3, r0, #20
 800b1b2:	3114      	adds	r1, #20
 800b1b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b1b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b1bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b1c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b1c4:	42a5      	cmp	r5, r4
 800b1c6:	d003      	beq.n	800b1d0 <__mcmp+0x2c>
 800b1c8:	d305      	bcc.n	800b1d6 <__mcmp+0x32>
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	4610      	mov	r0, r2
 800b1ce:	bd30      	pop	{r4, r5, pc}
 800b1d0:	4283      	cmp	r3, r0
 800b1d2:	d3f3      	bcc.n	800b1bc <__mcmp+0x18>
 800b1d4:	e7fa      	b.n	800b1cc <__mcmp+0x28>
 800b1d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b1da:	e7f7      	b.n	800b1cc <__mcmp+0x28>

0800b1dc <__mdiff>:
 800b1dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1e0:	460c      	mov	r4, r1
 800b1e2:	4606      	mov	r6, r0
 800b1e4:	4611      	mov	r1, r2
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	4690      	mov	r8, r2
 800b1ea:	f7ff ffdb 	bl	800b1a4 <__mcmp>
 800b1ee:	1e05      	subs	r5, r0, #0
 800b1f0:	d110      	bne.n	800b214 <__mdiff+0x38>
 800b1f2:	4629      	mov	r1, r5
 800b1f4:	4630      	mov	r0, r6
 800b1f6:	f7ff fd59 	bl	800acac <_Balloc>
 800b1fa:	b930      	cbnz	r0, 800b20a <__mdiff+0x2e>
 800b1fc:	4b3a      	ldr	r3, [pc, #232]	; (800b2e8 <__mdiff+0x10c>)
 800b1fe:	4602      	mov	r2, r0
 800b200:	f240 2137 	movw	r1, #567	; 0x237
 800b204:	4839      	ldr	r0, [pc, #228]	; (800b2ec <__mdiff+0x110>)
 800b206:	f7fe fdb9 	bl	8009d7c <__assert_func>
 800b20a:	2301      	movs	r3, #1
 800b20c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b210:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b214:	bfa4      	itt	ge
 800b216:	4643      	movge	r3, r8
 800b218:	46a0      	movge	r8, r4
 800b21a:	4630      	mov	r0, r6
 800b21c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b220:	bfa6      	itte	ge
 800b222:	461c      	movge	r4, r3
 800b224:	2500      	movge	r5, #0
 800b226:	2501      	movlt	r5, #1
 800b228:	f7ff fd40 	bl	800acac <_Balloc>
 800b22c:	b920      	cbnz	r0, 800b238 <__mdiff+0x5c>
 800b22e:	4b2e      	ldr	r3, [pc, #184]	; (800b2e8 <__mdiff+0x10c>)
 800b230:	4602      	mov	r2, r0
 800b232:	f240 2145 	movw	r1, #581	; 0x245
 800b236:	e7e5      	b.n	800b204 <__mdiff+0x28>
 800b238:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b23c:	6926      	ldr	r6, [r4, #16]
 800b23e:	60c5      	str	r5, [r0, #12]
 800b240:	f104 0914 	add.w	r9, r4, #20
 800b244:	f108 0514 	add.w	r5, r8, #20
 800b248:	f100 0e14 	add.w	lr, r0, #20
 800b24c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b250:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b254:	f108 0210 	add.w	r2, r8, #16
 800b258:	46f2      	mov	sl, lr
 800b25a:	2100      	movs	r1, #0
 800b25c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b260:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b264:	fa11 f88b 	uxtah	r8, r1, fp
 800b268:	b299      	uxth	r1, r3
 800b26a:	0c1b      	lsrs	r3, r3, #16
 800b26c:	eba8 0801 	sub.w	r8, r8, r1
 800b270:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b274:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b278:	fa1f f888 	uxth.w	r8, r8
 800b27c:	1419      	asrs	r1, r3, #16
 800b27e:	454e      	cmp	r6, r9
 800b280:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b284:	f84a 3b04 	str.w	r3, [sl], #4
 800b288:	d8e8      	bhi.n	800b25c <__mdiff+0x80>
 800b28a:	1b33      	subs	r3, r6, r4
 800b28c:	3b15      	subs	r3, #21
 800b28e:	f023 0303 	bic.w	r3, r3, #3
 800b292:	3304      	adds	r3, #4
 800b294:	3415      	adds	r4, #21
 800b296:	42a6      	cmp	r6, r4
 800b298:	bf38      	it	cc
 800b29a:	2304      	movcc	r3, #4
 800b29c:	441d      	add	r5, r3
 800b29e:	4473      	add	r3, lr
 800b2a0:	469e      	mov	lr, r3
 800b2a2:	462e      	mov	r6, r5
 800b2a4:	4566      	cmp	r6, ip
 800b2a6:	d30e      	bcc.n	800b2c6 <__mdiff+0xea>
 800b2a8:	f10c 0203 	add.w	r2, ip, #3
 800b2ac:	1b52      	subs	r2, r2, r5
 800b2ae:	f022 0203 	bic.w	r2, r2, #3
 800b2b2:	3d03      	subs	r5, #3
 800b2b4:	45ac      	cmp	ip, r5
 800b2b6:	bf38      	it	cc
 800b2b8:	2200      	movcc	r2, #0
 800b2ba:	4413      	add	r3, r2
 800b2bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b2c0:	b17a      	cbz	r2, 800b2e2 <__mdiff+0x106>
 800b2c2:	6107      	str	r7, [r0, #16]
 800b2c4:	e7a4      	b.n	800b210 <__mdiff+0x34>
 800b2c6:	f856 8b04 	ldr.w	r8, [r6], #4
 800b2ca:	fa11 f288 	uxtah	r2, r1, r8
 800b2ce:	1414      	asrs	r4, r2, #16
 800b2d0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b2d4:	b292      	uxth	r2, r2
 800b2d6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b2da:	f84e 2b04 	str.w	r2, [lr], #4
 800b2de:	1421      	asrs	r1, r4, #16
 800b2e0:	e7e0      	b.n	800b2a4 <__mdiff+0xc8>
 800b2e2:	3f01      	subs	r7, #1
 800b2e4:	e7ea      	b.n	800b2bc <__mdiff+0xe0>
 800b2e6:	bf00      	nop
 800b2e8:	0800c183 	.word	0x0800c183
 800b2ec:	0800c194 	.word	0x0800c194

0800b2f0 <__d2b>:
 800b2f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b2f4:	460f      	mov	r7, r1
 800b2f6:	2101      	movs	r1, #1
 800b2f8:	ec59 8b10 	vmov	r8, r9, d0
 800b2fc:	4616      	mov	r6, r2
 800b2fe:	f7ff fcd5 	bl	800acac <_Balloc>
 800b302:	4604      	mov	r4, r0
 800b304:	b930      	cbnz	r0, 800b314 <__d2b+0x24>
 800b306:	4602      	mov	r2, r0
 800b308:	4b24      	ldr	r3, [pc, #144]	; (800b39c <__d2b+0xac>)
 800b30a:	4825      	ldr	r0, [pc, #148]	; (800b3a0 <__d2b+0xb0>)
 800b30c:	f240 310f 	movw	r1, #783	; 0x30f
 800b310:	f7fe fd34 	bl	8009d7c <__assert_func>
 800b314:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b318:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b31c:	bb2d      	cbnz	r5, 800b36a <__d2b+0x7a>
 800b31e:	9301      	str	r3, [sp, #4]
 800b320:	f1b8 0300 	subs.w	r3, r8, #0
 800b324:	d026      	beq.n	800b374 <__d2b+0x84>
 800b326:	4668      	mov	r0, sp
 800b328:	9300      	str	r3, [sp, #0]
 800b32a:	f7ff fd87 	bl	800ae3c <__lo0bits>
 800b32e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b332:	b1e8      	cbz	r0, 800b370 <__d2b+0x80>
 800b334:	f1c0 0320 	rsb	r3, r0, #32
 800b338:	fa02 f303 	lsl.w	r3, r2, r3
 800b33c:	430b      	orrs	r3, r1
 800b33e:	40c2      	lsrs	r2, r0
 800b340:	6163      	str	r3, [r4, #20]
 800b342:	9201      	str	r2, [sp, #4]
 800b344:	9b01      	ldr	r3, [sp, #4]
 800b346:	61a3      	str	r3, [r4, #24]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	bf14      	ite	ne
 800b34c:	2202      	movne	r2, #2
 800b34e:	2201      	moveq	r2, #1
 800b350:	6122      	str	r2, [r4, #16]
 800b352:	b1bd      	cbz	r5, 800b384 <__d2b+0x94>
 800b354:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b358:	4405      	add	r5, r0
 800b35a:	603d      	str	r5, [r7, #0]
 800b35c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b360:	6030      	str	r0, [r6, #0]
 800b362:	4620      	mov	r0, r4
 800b364:	b003      	add	sp, #12
 800b366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b36a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b36e:	e7d6      	b.n	800b31e <__d2b+0x2e>
 800b370:	6161      	str	r1, [r4, #20]
 800b372:	e7e7      	b.n	800b344 <__d2b+0x54>
 800b374:	a801      	add	r0, sp, #4
 800b376:	f7ff fd61 	bl	800ae3c <__lo0bits>
 800b37a:	9b01      	ldr	r3, [sp, #4]
 800b37c:	6163      	str	r3, [r4, #20]
 800b37e:	3020      	adds	r0, #32
 800b380:	2201      	movs	r2, #1
 800b382:	e7e5      	b.n	800b350 <__d2b+0x60>
 800b384:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b388:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b38c:	6038      	str	r0, [r7, #0]
 800b38e:	6918      	ldr	r0, [r3, #16]
 800b390:	f7ff fd34 	bl	800adfc <__hi0bits>
 800b394:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b398:	e7e2      	b.n	800b360 <__d2b+0x70>
 800b39a:	bf00      	nop
 800b39c:	0800c183 	.word	0x0800c183
 800b3a0:	0800c194 	.word	0x0800c194

0800b3a4 <__ssputs_r>:
 800b3a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3a8:	688e      	ldr	r6, [r1, #8]
 800b3aa:	461f      	mov	r7, r3
 800b3ac:	42be      	cmp	r6, r7
 800b3ae:	680b      	ldr	r3, [r1, #0]
 800b3b0:	4682      	mov	sl, r0
 800b3b2:	460c      	mov	r4, r1
 800b3b4:	4690      	mov	r8, r2
 800b3b6:	d82c      	bhi.n	800b412 <__ssputs_r+0x6e>
 800b3b8:	898a      	ldrh	r2, [r1, #12]
 800b3ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b3be:	d026      	beq.n	800b40e <__ssputs_r+0x6a>
 800b3c0:	6965      	ldr	r5, [r4, #20]
 800b3c2:	6909      	ldr	r1, [r1, #16]
 800b3c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b3c8:	eba3 0901 	sub.w	r9, r3, r1
 800b3cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b3d0:	1c7b      	adds	r3, r7, #1
 800b3d2:	444b      	add	r3, r9
 800b3d4:	106d      	asrs	r5, r5, #1
 800b3d6:	429d      	cmp	r5, r3
 800b3d8:	bf38      	it	cc
 800b3da:	461d      	movcc	r5, r3
 800b3dc:	0553      	lsls	r3, r2, #21
 800b3de:	d527      	bpl.n	800b430 <__ssputs_r+0x8c>
 800b3e0:	4629      	mov	r1, r5
 800b3e2:	f7ff fbd7 	bl	800ab94 <_malloc_r>
 800b3e6:	4606      	mov	r6, r0
 800b3e8:	b360      	cbz	r0, 800b444 <__ssputs_r+0xa0>
 800b3ea:	6921      	ldr	r1, [r4, #16]
 800b3ec:	464a      	mov	r2, r9
 800b3ee:	f000 fa1b 	bl	800b828 <memcpy>
 800b3f2:	89a3      	ldrh	r3, [r4, #12]
 800b3f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3fc:	81a3      	strh	r3, [r4, #12]
 800b3fe:	6126      	str	r6, [r4, #16]
 800b400:	6165      	str	r5, [r4, #20]
 800b402:	444e      	add	r6, r9
 800b404:	eba5 0509 	sub.w	r5, r5, r9
 800b408:	6026      	str	r6, [r4, #0]
 800b40a:	60a5      	str	r5, [r4, #8]
 800b40c:	463e      	mov	r6, r7
 800b40e:	42be      	cmp	r6, r7
 800b410:	d900      	bls.n	800b414 <__ssputs_r+0x70>
 800b412:	463e      	mov	r6, r7
 800b414:	6820      	ldr	r0, [r4, #0]
 800b416:	4632      	mov	r2, r6
 800b418:	4641      	mov	r1, r8
 800b41a:	f000 f9db 	bl	800b7d4 <memmove>
 800b41e:	68a3      	ldr	r3, [r4, #8]
 800b420:	1b9b      	subs	r3, r3, r6
 800b422:	60a3      	str	r3, [r4, #8]
 800b424:	6823      	ldr	r3, [r4, #0]
 800b426:	4433      	add	r3, r6
 800b428:	6023      	str	r3, [r4, #0]
 800b42a:	2000      	movs	r0, #0
 800b42c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b430:	462a      	mov	r2, r5
 800b432:	f000 fa36 	bl	800b8a2 <_realloc_r>
 800b436:	4606      	mov	r6, r0
 800b438:	2800      	cmp	r0, #0
 800b43a:	d1e0      	bne.n	800b3fe <__ssputs_r+0x5a>
 800b43c:	6921      	ldr	r1, [r4, #16]
 800b43e:	4650      	mov	r0, sl
 800b440:	f7ff fb34 	bl	800aaac <_free_r>
 800b444:	230c      	movs	r3, #12
 800b446:	f8ca 3000 	str.w	r3, [sl]
 800b44a:	89a3      	ldrh	r3, [r4, #12]
 800b44c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b450:	81a3      	strh	r3, [r4, #12]
 800b452:	f04f 30ff 	mov.w	r0, #4294967295
 800b456:	e7e9      	b.n	800b42c <__ssputs_r+0x88>

0800b458 <_svfiprintf_r>:
 800b458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b45c:	4698      	mov	r8, r3
 800b45e:	898b      	ldrh	r3, [r1, #12]
 800b460:	061b      	lsls	r3, r3, #24
 800b462:	b09d      	sub	sp, #116	; 0x74
 800b464:	4607      	mov	r7, r0
 800b466:	460d      	mov	r5, r1
 800b468:	4614      	mov	r4, r2
 800b46a:	d50e      	bpl.n	800b48a <_svfiprintf_r+0x32>
 800b46c:	690b      	ldr	r3, [r1, #16]
 800b46e:	b963      	cbnz	r3, 800b48a <_svfiprintf_r+0x32>
 800b470:	2140      	movs	r1, #64	; 0x40
 800b472:	f7ff fb8f 	bl	800ab94 <_malloc_r>
 800b476:	6028      	str	r0, [r5, #0]
 800b478:	6128      	str	r0, [r5, #16]
 800b47a:	b920      	cbnz	r0, 800b486 <_svfiprintf_r+0x2e>
 800b47c:	230c      	movs	r3, #12
 800b47e:	603b      	str	r3, [r7, #0]
 800b480:	f04f 30ff 	mov.w	r0, #4294967295
 800b484:	e0d0      	b.n	800b628 <_svfiprintf_r+0x1d0>
 800b486:	2340      	movs	r3, #64	; 0x40
 800b488:	616b      	str	r3, [r5, #20]
 800b48a:	2300      	movs	r3, #0
 800b48c:	9309      	str	r3, [sp, #36]	; 0x24
 800b48e:	2320      	movs	r3, #32
 800b490:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b494:	f8cd 800c 	str.w	r8, [sp, #12]
 800b498:	2330      	movs	r3, #48	; 0x30
 800b49a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b640 <_svfiprintf_r+0x1e8>
 800b49e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b4a2:	f04f 0901 	mov.w	r9, #1
 800b4a6:	4623      	mov	r3, r4
 800b4a8:	469a      	mov	sl, r3
 800b4aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4ae:	b10a      	cbz	r2, 800b4b4 <_svfiprintf_r+0x5c>
 800b4b0:	2a25      	cmp	r2, #37	; 0x25
 800b4b2:	d1f9      	bne.n	800b4a8 <_svfiprintf_r+0x50>
 800b4b4:	ebba 0b04 	subs.w	fp, sl, r4
 800b4b8:	d00b      	beq.n	800b4d2 <_svfiprintf_r+0x7a>
 800b4ba:	465b      	mov	r3, fp
 800b4bc:	4622      	mov	r2, r4
 800b4be:	4629      	mov	r1, r5
 800b4c0:	4638      	mov	r0, r7
 800b4c2:	f7ff ff6f 	bl	800b3a4 <__ssputs_r>
 800b4c6:	3001      	adds	r0, #1
 800b4c8:	f000 80a9 	beq.w	800b61e <_svfiprintf_r+0x1c6>
 800b4cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4ce:	445a      	add	r2, fp
 800b4d0:	9209      	str	r2, [sp, #36]	; 0x24
 800b4d2:	f89a 3000 	ldrb.w	r3, [sl]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	f000 80a1 	beq.w	800b61e <_svfiprintf_r+0x1c6>
 800b4dc:	2300      	movs	r3, #0
 800b4de:	f04f 32ff 	mov.w	r2, #4294967295
 800b4e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4e6:	f10a 0a01 	add.w	sl, sl, #1
 800b4ea:	9304      	str	r3, [sp, #16]
 800b4ec:	9307      	str	r3, [sp, #28]
 800b4ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4f2:	931a      	str	r3, [sp, #104]	; 0x68
 800b4f4:	4654      	mov	r4, sl
 800b4f6:	2205      	movs	r2, #5
 800b4f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4fc:	4850      	ldr	r0, [pc, #320]	; (800b640 <_svfiprintf_r+0x1e8>)
 800b4fe:	f7f4 fe9f 	bl	8000240 <memchr>
 800b502:	9a04      	ldr	r2, [sp, #16]
 800b504:	b9d8      	cbnz	r0, 800b53e <_svfiprintf_r+0xe6>
 800b506:	06d0      	lsls	r0, r2, #27
 800b508:	bf44      	itt	mi
 800b50a:	2320      	movmi	r3, #32
 800b50c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b510:	0711      	lsls	r1, r2, #28
 800b512:	bf44      	itt	mi
 800b514:	232b      	movmi	r3, #43	; 0x2b
 800b516:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b51a:	f89a 3000 	ldrb.w	r3, [sl]
 800b51e:	2b2a      	cmp	r3, #42	; 0x2a
 800b520:	d015      	beq.n	800b54e <_svfiprintf_r+0xf6>
 800b522:	9a07      	ldr	r2, [sp, #28]
 800b524:	4654      	mov	r4, sl
 800b526:	2000      	movs	r0, #0
 800b528:	f04f 0c0a 	mov.w	ip, #10
 800b52c:	4621      	mov	r1, r4
 800b52e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b532:	3b30      	subs	r3, #48	; 0x30
 800b534:	2b09      	cmp	r3, #9
 800b536:	d94d      	bls.n	800b5d4 <_svfiprintf_r+0x17c>
 800b538:	b1b0      	cbz	r0, 800b568 <_svfiprintf_r+0x110>
 800b53a:	9207      	str	r2, [sp, #28]
 800b53c:	e014      	b.n	800b568 <_svfiprintf_r+0x110>
 800b53e:	eba0 0308 	sub.w	r3, r0, r8
 800b542:	fa09 f303 	lsl.w	r3, r9, r3
 800b546:	4313      	orrs	r3, r2
 800b548:	9304      	str	r3, [sp, #16]
 800b54a:	46a2      	mov	sl, r4
 800b54c:	e7d2      	b.n	800b4f4 <_svfiprintf_r+0x9c>
 800b54e:	9b03      	ldr	r3, [sp, #12]
 800b550:	1d19      	adds	r1, r3, #4
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	9103      	str	r1, [sp, #12]
 800b556:	2b00      	cmp	r3, #0
 800b558:	bfbb      	ittet	lt
 800b55a:	425b      	neglt	r3, r3
 800b55c:	f042 0202 	orrlt.w	r2, r2, #2
 800b560:	9307      	strge	r3, [sp, #28]
 800b562:	9307      	strlt	r3, [sp, #28]
 800b564:	bfb8      	it	lt
 800b566:	9204      	strlt	r2, [sp, #16]
 800b568:	7823      	ldrb	r3, [r4, #0]
 800b56a:	2b2e      	cmp	r3, #46	; 0x2e
 800b56c:	d10c      	bne.n	800b588 <_svfiprintf_r+0x130>
 800b56e:	7863      	ldrb	r3, [r4, #1]
 800b570:	2b2a      	cmp	r3, #42	; 0x2a
 800b572:	d134      	bne.n	800b5de <_svfiprintf_r+0x186>
 800b574:	9b03      	ldr	r3, [sp, #12]
 800b576:	1d1a      	adds	r2, r3, #4
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	9203      	str	r2, [sp, #12]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	bfb8      	it	lt
 800b580:	f04f 33ff 	movlt.w	r3, #4294967295
 800b584:	3402      	adds	r4, #2
 800b586:	9305      	str	r3, [sp, #20]
 800b588:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b650 <_svfiprintf_r+0x1f8>
 800b58c:	7821      	ldrb	r1, [r4, #0]
 800b58e:	2203      	movs	r2, #3
 800b590:	4650      	mov	r0, sl
 800b592:	f7f4 fe55 	bl	8000240 <memchr>
 800b596:	b138      	cbz	r0, 800b5a8 <_svfiprintf_r+0x150>
 800b598:	9b04      	ldr	r3, [sp, #16]
 800b59a:	eba0 000a 	sub.w	r0, r0, sl
 800b59e:	2240      	movs	r2, #64	; 0x40
 800b5a0:	4082      	lsls	r2, r0
 800b5a2:	4313      	orrs	r3, r2
 800b5a4:	3401      	adds	r4, #1
 800b5a6:	9304      	str	r3, [sp, #16]
 800b5a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ac:	4825      	ldr	r0, [pc, #148]	; (800b644 <_svfiprintf_r+0x1ec>)
 800b5ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5b2:	2206      	movs	r2, #6
 800b5b4:	f7f4 fe44 	bl	8000240 <memchr>
 800b5b8:	2800      	cmp	r0, #0
 800b5ba:	d038      	beq.n	800b62e <_svfiprintf_r+0x1d6>
 800b5bc:	4b22      	ldr	r3, [pc, #136]	; (800b648 <_svfiprintf_r+0x1f0>)
 800b5be:	bb1b      	cbnz	r3, 800b608 <_svfiprintf_r+0x1b0>
 800b5c0:	9b03      	ldr	r3, [sp, #12]
 800b5c2:	3307      	adds	r3, #7
 800b5c4:	f023 0307 	bic.w	r3, r3, #7
 800b5c8:	3308      	adds	r3, #8
 800b5ca:	9303      	str	r3, [sp, #12]
 800b5cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5ce:	4433      	add	r3, r6
 800b5d0:	9309      	str	r3, [sp, #36]	; 0x24
 800b5d2:	e768      	b.n	800b4a6 <_svfiprintf_r+0x4e>
 800b5d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5d8:	460c      	mov	r4, r1
 800b5da:	2001      	movs	r0, #1
 800b5dc:	e7a6      	b.n	800b52c <_svfiprintf_r+0xd4>
 800b5de:	2300      	movs	r3, #0
 800b5e0:	3401      	adds	r4, #1
 800b5e2:	9305      	str	r3, [sp, #20]
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	f04f 0c0a 	mov.w	ip, #10
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5f0:	3a30      	subs	r2, #48	; 0x30
 800b5f2:	2a09      	cmp	r2, #9
 800b5f4:	d903      	bls.n	800b5fe <_svfiprintf_r+0x1a6>
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d0c6      	beq.n	800b588 <_svfiprintf_r+0x130>
 800b5fa:	9105      	str	r1, [sp, #20]
 800b5fc:	e7c4      	b.n	800b588 <_svfiprintf_r+0x130>
 800b5fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800b602:	4604      	mov	r4, r0
 800b604:	2301      	movs	r3, #1
 800b606:	e7f0      	b.n	800b5ea <_svfiprintf_r+0x192>
 800b608:	ab03      	add	r3, sp, #12
 800b60a:	9300      	str	r3, [sp, #0]
 800b60c:	462a      	mov	r2, r5
 800b60e:	4b0f      	ldr	r3, [pc, #60]	; (800b64c <_svfiprintf_r+0x1f4>)
 800b610:	a904      	add	r1, sp, #16
 800b612:	4638      	mov	r0, r7
 800b614:	f7fd fdca 	bl	80091ac <_printf_float>
 800b618:	1c42      	adds	r2, r0, #1
 800b61a:	4606      	mov	r6, r0
 800b61c:	d1d6      	bne.n	800b5cc <_svfiprintf_r+0x174>
 800b61e:	89ab      	ldrh	r3, [r5, #12]
 800b620:	065b      	lsls	r3, r3, #25
 800b622:	f53f af2d 	bmi.w	800b480 <_svfiprintf_r+0x28>
 800b626:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b628:	b01d      	add	sp, #116	; 0x74
 800b62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b62e:	ab03      	add	r3, sp, #12
 800b630:	9300      	str	r3, [sp, #0]
 800b632:	462a      	mov	r2, r5
 800b634:	4b05      	ldr	r3, [pc, #20]	; (800b64c <_svfiprintf_r+0x1f4>)
 800b636:	a904      	add	r1, sp, #16
 800b638:	4638      	mov	r0, r7
 800b63a:	f7fe f85b 	bl	80096f4 <_printf_i>
 800b63e:	e7eb      	b.n	800b618 <_svfiprintf_r+0x1c0>
 800b640:	0800c2ec 	.word	0x0800c2ec
 800b644:	0800c2f6 	.word	0x0800c2f6
 800b648:	080091ad 	.word	0x080091ad
 800b64c:	0800b3a5 	.word	0x0800b3a5
 800b650:	0800c2f2 	.word	0x0800c2f2

0800b654 <__sflush_r>:
 800b654:	898a      	ldrh	r2, [r1, #12]
 800b656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b65a:	4605      	mov	r5, r0
 800b65c:	0710      	lsls	r0, r2, #28
 800b65e:	460c      	mov	r4, r1
 800b660:	d458      	bmi.n	800b714 <__sflush_r+0xc0>
 800b662:	684b      	ldr	r3, [r1, #4]
 800b664:	2b00      	cmp	r3, #0
 800b666:	dc05      	bgt.n	800b674 <__sflush_r+0x20>
 800b668:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	dc02      	bgt.n	800b674 <__sflush_r+0x20>
 800b66e:	2000      	movs	r0, #0
 800b670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b674:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b676:	2e00      	cmp	r6, #0
 800b678:	d0f9      	beq.n	800b66e <__sflush_r+0x1a>
 800b67a:	2300      	movs	r3, #0
 800b67c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b680:	682f      	ldr	r7, [r5, #0]
 800b682:	6a21      	ldr	r1, [r4, #32]
 800b684:	602b      	str	r3, [r5, #0]
 800b686:	d032      	beq.n	800b6ee <__sflush_r+0x9a>
 800b688:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b68a:	89a3      	ldrh	r3, [r4, #12]
 800b68c:	075a      	lsls	r2, r3, #29
 800b68e:	d505      	bpl.n	800b69c <__sflush_r+0x48>
 800b690:	6863      	ldr	r3, [r4, #4]
 800b692:	1ac0      	subs	r0, r0, r3
 800b694:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b696:	b10b      	cbz	r3, 800b69c <__sflush_r+0x48>
 800b698:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b69a:	1ac0      	subs	r0, r0, r3
 800b69c:	2300      	movs	r3, #0
 800b69e:	4602      	mov	r2, r0
 800b6a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6a2:	6a21      	ldr	r1, [r4, #32]
 800b6a4:	4628      	mov	r0, r5
 800b6a6:	47b0      	blx	r6
 800b6a8:	1c43      	adds	r3, r0, #1
 800b6aa:	89a3      	ldrh	r3, [r4, #12]
 800b6ac:	d106      	bne.n	800b6bc <__sflush_r+0x68>
 800b6ae:	6829      	ldr	r1, [r5, #0]
 800b6b0:	291d      	cmp	r1, #29
 800b6b2:	d82b      	bhi.n	800b70c <__sflush_r+0xb8>
 800b6b4:	4a29      	ldr	r2, [pc, #164]	; (800b75c <__sflush_r+0x108>)
 800b6b6:	410a      	asrs	r2, r1
 800b6b8:	07d6      	lsls	r6, r2, #31
 800b6ba:	d427      	bmi.n	800b70c <__sflush_r+0xb8>
 800b6bc:	2200      	movs	r2, #0
 800b6be:	6062      	str	r2, [r4, #4]
 800b6c0:	04d9      	lsls	r1, r3, #19
 800b6c2:	6922      	ldr	r2, [r4, #16]
 800b6c4:	6022      	str	r2, [r4, #0]
 800b6c6:	d504      	bpl.n	800b6d2 <__sflush_r+0x7e>
 800b6c8:	1c42      	adds	r2, r0, #1
 800b6ca:	d101      	bne.n	800b6d0 <__sflush_r+0x7c>
 800b6cc:	682b      	ldr	r3, [r5, #0]
 800b6ce:	b903      	cbnz	r3, 800b6d2 <__sflush_r+0x7e>
 800b6d0:	6560      	str	r0, [r4, #84]	; 0x54
 800b6d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6d4:	602f      	str	r7, [r5, #0]
 800b6d6:	2900      	cmp	r1, #0
 800b6d8:	d0c9      	beq.n	800b66e <__sflush_r+0x1a>
 800b6da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6de:	4299      	cmp	r1, r3
 800b6e0:	d002      	beq.n	800b6e8 <__sflush_r+0x94>
 800b6e2:	4628      	mov	r0, r5
 800b6e4:	f7ff f9e2 	bl	800aaac <_free_r>
 800b6e8:	2000      	movs	r0, #0
 800b6ea:	6360      	str	r0, [r4, #52]	; 0x34
 800b6ec:	e7c0      	b.n	800b670 <__sflush_r+0x1c>
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	47b0      	blx	r6
 800b6f4:	1c41      	adds	r1, r0, #1
 800b6f6:	d1c8      	bne.n	800b68a <__sflush_r+0x36>
 800b6f8:	682b      	ldr	r3, [r5, #0]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d0c5      	beq.n	800b68a <__sflush_r+0x36>
 800b6fe:	2b1d      	cmp	r3, #29
 800b700:	d001      	beq.n	800b706 <__sflush_r+0xb2>
 800b702:	2b16      	cmp	r3, #22
 800b704:	d101      	bne.n	800b70a <__sflush_r+0xb6>
 800b706:	602f      	str	r7, [r5, #0]
 800b708:	e7b1      	b.n	800b66e <__sflush_r+0x1a>
 800b70a:	89a3      	ldrh	r3, [r4, #12]
 800b70c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b710:	81a3      	strh	r3, [r4, #12]
 800b712:	e7ad      	b.n	800b670 <__sflush_r+0x1c>
 800b714:	690f      	ldr	r7, [r1, #16]
 800b716:	2f00      	cmp	r7, #0
 800b718:	d0a9      	beq.n	800b66e <__sflush_r+0x1a>
 800b71a:	0793      	lsls	r3, r2, #30
 800b71c:	680e      	ldr	r6, [r1, #0]
 800b71e:	bf08      	it	eq
 800b720:	694b      	ldreq	r3, [r1, #20]
 800b722:	600f      	str	r7, [r1, #0]
 800b724:	bf18      	it	ne
 800b726:	2300      	movne	r3, #0
 800b728:	eba6 0807 	sub.w	r8, r6, r7
 800b72c:	608b      	str	r3, [r1, #8]
 800b72e:	f1b8 0f00 	cmp.w	r8, #0
 800b732:	dd9c      	ble.n	800b66e <__sflush_r+0x1a>
 800b734:	6a21      	ldr	r1, [r4, #32]
 800b736:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b738:	4643      	mov	r3, r8
 800b73a:	463a      	mov	r2, r7
 800b73c:	4628      	mov	r0, r5
 800b73e:	47b0      	blx	r6
 800b740:	2800      	cmp	r0, #0
 800b742:	dc06      	bgt.n	800b752 <__sflush_r+0xfe>
 800b744:	89a3      	ldrh	r3, [r4, #12]
 800b746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b74a:	81a3      	strh	r3, [r4, #12]
 800b74c:	f04f 30ff 	mov.w	r0, #4294967295
 800b750:	e78e      	b.n	800b670 <__sflush_r+0x1c>
 800b752:	4407      	add	r7, r0
 800b754:	eba8 0800 	sub.w	r8, r8, r0
 800b758:	e7e9      	b.n	800b72e <__sflush_r+0xda>
 800b75a:	bf00      	nop
 800b75c:	dfbffffe 	.word	0xdfbffffe

0800b760 <_fflush_r>:
 800b760:	b538      	push	{r3, r4, r5, lr}
 800b762:	690b      	ldr	r3, [r1, #16]
 800b764:	4605      	mov	r5, r0
 800b766:	460c      	mov	r4, r1
 800b768:	b913      	cbnz	r3, 800b770 <_fflush_r+0x10>
 800b76a:	2500      	movs	r5, #0
 800b76c:	4628      	mov	r0, r5
 800b76e:	bd38      	pop	{r3, r4, r5, pc}
 800b770:	b118      	cbz	r0, 800b77a <_fflush_r+0x1a>
 800b772:	6a03      	ldr	r3, [r0, #32]
 800b774:	b90b      	cbnz	r3, 800b77a <_fflush_r+0x1a>
 800b776:	f7fe f959 	bl	8009a2c <__sinit>
 800b77a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d0f3      	beq.n	800b76a <_fflush_r+0xa>
 800b782:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b784:	07d0      	lsls	r0, r2, #31
 800b786:	d404      	bmi.n	800b792 <_fflush_r+0x32>
 800b788:	0599      	lsls	r1, r3, #22
 800b78a:	d402      	bmi.n	800b792 <_fflush_r+0x32>
 800b78c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b78e:	f7fe faf3 	bl	8009d78 <__retarget_lock_acquire_recursive>
 800b792:	4628      	mov	r0, r5
 800b794:	4621      	mov	r1, r4
 800b796:	f7ff ff5d 	bl	800b654 <__sflush_r>
 800b79a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b79c:	07da      	lsls	r2, r3, #31
 800b79e:	4605      	mov	r5, r0
 800b7a0:	d4e4      	bmi.n	800b76c <_fflush_r+0xc>
 800b7a2:	89a3      	ldrh	r3, [r4, #12]
 800b7a4:	059b      	lsls	r3, r3, #22
 800b7a6:	d4e1      	bmi.n	800b76c <_fflush_r+0xc>
 800b7a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7aa:	f7fe fae6 	bl	8009d7a <__retarget_lock_release_recursive>
 800b7ae:	e7dd      	b.n	800b76c <_fflush_r+0xc>

0800b7b0 <fiprintf>:
 800b7b0:	b40e      	push	{r1, r2, r3}
 800b7b2:	b503      	push	{r0, r1, lr}
 800b7b4:	4601      	mov	r1, r0
 800b7b6:	ab03      	add	r3, sp, #12
 800b7b8:	4805      	ldr	r0, [pc, #20]	; (800b7d0 <fiprintf+0x20>)
 800b7ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7be:	6800      	ldr	r0, [r0, #0]
 800b7c0:	9301      	str	r3, [sp, #4]
 800b7c2:	f000 f8d3 	bl	800b96c <_vfiprintf_r>
 800b7c6:	b002      	add	sp, #8
 800b7c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7cc:	b003      	add	sp, #12
 800b7ce:	4770      	bx	lr
 800b7d0:	20000120 	.word	0x20000120

0800b7d4 <memmove>:
 800b7d4:	4288      	cmp	r0, r1
 800b7d6:	b510      	push	{r4, lr}
 800b7d8:	eb01 0402 	add.w	r4, r1, r2
 800b7dc:	d902      	bls.n	800b7e4 <memmove+0x10>
 800b7de:	4284      	cmp	r4, r0
 800b7e0:	4623      	mov	r3, r4
 800b7e2:	d807      	bhi.n	800b7f4 <memmove+0x20>
 800b7e4:	1e43      	subs	r3, r0, #1
 800b7e6:	42a1      	cmp	r1, r4
 800b7e8:	d008      	beq.n	800b7fc <memmove+0x28>
 800b7ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b7f2:	e7f8      	b.n	800b7e6 <memmove+0x12>
 800b7f4:	4402      	add	r2, r0
 800b7f6:	4601      	mov	r1, r0
 800b7f8:	428a      	cmp	r2, r1
 800b7fa:	d100      	bne.n	800b7fe <memmove+0x2a>
 800b7fc:	bd10      	pop	{r4, pc}
 800b7fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b802:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b806:	e7f7      	b.n	800b7f8 <memmove+0x24>

0800b808 <_sbrk_r>:
 800b808:	b538      	push	{r3, r4, r5, lr}
 800b80a:	4d06      	ldr	r5, [pc, #24]	; (800b824 <_sbrk_r+0x1c>)
 800b80c:	2300      	movs	r3, #0
 800b80e:	4604      	mov	r4, r0
 800b810:	4608      	mov	r0, r1
 800b812:	602b      	str	r3, [r5, #0]
 800b814:	f7f6 f82a 	bl	800186c <_sbrk>
 800b818:	1c43      	adds	r3, r0, #1
 800b81a:	d102      	bne.n	800b822 <_sbrk_r+0x1a>
 800b81c:	682b      	ldr	r3, [r5, #0]
 800b81e:	b103      	cbz	r3, 800b822 <_sbrk_r+0x1a>
 800b820:	6023      	str	r3, [r4, #0]
 800b822:	bd38      	pop	{r3, r4, r5, pc}
 800b824:	2000078c 	.word	0x2000078c

0800b828 <memcpy>:
 800b828:	440a      	add	r2, r1
 800b82a:	4291      	cmp	r1, r2
 800b82c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b830:	d100      	bne.n	800b834 <memcpy+0xc>
 800b832:	4770      	bx	lr
 800b834:	b510      	push	{r4, lr}
 800b836:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b83a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b83e:	4291      	cmp	r1, r2
 800b840:	d1f9      	bne.n	800b836 <memcpy+0xe>
 800b842:	bd10      	pop	{r4, pc}

0800b844 <abort>:
 800b844:	b508      	push	{r3, lr}
 800b846:	2006      	movs	r0, #6
 800b848:	f000 fa68 	bl	800bd1c <raise>
 800b84c:	2001      	movs	r0, #1
 800b84e:	f7f5 ff95 	bl	800177c <_exit>

0800b852 <_calloc_r>:
 800b852:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b854:	fba1 2402 	umull	r2, r4, r1, r2
 800b858:	b94c      	cbnz	r4, 800b86e <_calloc_r+0x1c>
 800b85a:	4611      	mov	r1, r2
 800b85c:	9201      	str	r2, [sp, #4]
 800b85e:	f7ff f999 	bl	800ab94 <_malloc_r>
 800b862:	9a01      	ldr	r2, [sp, #4]
 800b864:	4605      	mov	r5, r0
 800b866:	b930      	cbnz	r0, 800b876 <_calloc_r+0x24>
 800b868:	4628      	mov	r0, r5
 800b86a:	b003      	add	sp, #12
 800b86c:	bd30      	pop	{r4, r5, pc}
 800b86e:	220c      	movs	r2, #12
 800b870:	6002      	str	r2, [r0, #0]
 800b872:	2500      	movs	r5, #0
 800b874:	e7f8      	b.n	800b868 <_calloc_r+0x16>
 800b876:	4621      	mov	r1, r4
 800b878:	f7fe f9a5 	bl	8009bc6 <memset>
 800b87c:	e7f4      	b.n	800b868 <_calloc_r+0x16>

0800b87e <__ascii_mbtowc>:
 800b87e:	b082      	sub	sp, #8
 800b880:	b901      	cbnz	r1, 800b884 <__ascii_mbtowc+0x6>
 800b882:	a901      	add	r1, sp, #4
 800b884:	b142      	cbz	r2, 800b898 <__ascii_mbtowc+0x1a>
 800b886:	b14b      	cbz	r3, 800b89c <__ascii_mbtowc+0x1e>
 800b888:	7813      	ldrb	r3, [r2, #0]
 800b88a:	600b      	str	r3, [r1, #0]
 800b88c:	7812      	ldrb	r2, [r2, #0]
 800b88e:	1e10      	subs	r0, r2, #0
 800b890:	bf18      	it	ne
 800b892:	2001      	movne	r0, #1
 800b894:	b002      	add	sp, #8
 800b896:	4770      	bx	lr
 800b898:	4610      	mov	r0, r2
 800b89a:	e7fb      	b.n	800b894 <__ascii_mbtowc+0x16>
 800b89c:	f06f 0001 	mvn.w	r0, #1
 800b8a0:	e7f8      	b.n	800b894 <__ascii_mbtowc+0x16>

0800b8a2 <_realloc_r>:
 800b8a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8a6:	4680      	mov	r8, r0
 800b8a8:	4614      	mov	r4, r2
 800b8aa:	460e      	mov	r6, r1
 800b8ac:	b921      	cbnz	r1, 800b8b8 <_realloc_r+0x16>
 800b8ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8b2:	4611      	mov	r1, r2
 800b8b4:	f7ff b96e 	b.w	800ab94 <_malloc_r>
 800b8b8:	b92a      	cbnz	r2, 800b8c6 <_realloc_r+0x24>
 800b8ba:	f7ff f8f7 	bl	800aaac <_free_r>
 800b8be:	4625      	mov	r5, r4
 800b8c0:	4628      	mov	r0, r5
 800b8c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8c6:	f000 fa45 	bl	800bd54 <_malloc_usable_size_r>
 800b8ca:	4284      	cmp	r4, r0
 800b8cc:	4607      	mov	r7, r0
 800b8ce:	d802      	bhi.n	800b8d6 <_realloc_r+0x34>
 800b8d0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b8d4:	d812      	bhi.n	800b8fc <_realloc_r+0x5a>
 800b8d6:	4621      	mov	r1, r4
 800b8d8:	4640      	mov	r0, r8
 800b8da:	f7ff f95b 	bl	800ab94 <_malloc_r>
 800b8de:	4605      	mov	r5, r0
 800b8e0:	2800      	cmp	r0, #0
 800b8e2:	d0ed      	beq.n	800b8c0 <_realloc_r+0x1e>
 800b8e4:	42bc      	cmp	r4, r7
 800b8e6:	4622      	mov	r2, r4
 800b8e8:	4631      	mov	r1, r6
 800b8ea:	bf28      	it	cs
 800b8ec:	463a      	movcs	r2, r7
 800b8ee:	f7ff ff9b 	bl	800b828 <memcpy>
 800b8f2:	4631      	mov	r1, r6
 800b8f4:	4640      	mov	r0, r8
 800b8f6:	f7ff f8d9 	bl	800aaac <_free_r>
 800b8fa:	e7e1      	b.n	800b8c0 <_realloc_r+0x1e>
 800b8fc:	4635      	mov	r5, r6
 800b8fe:	e7df      	b.n	800b8c0 <_realloc_r+0x1e>

0800b900 <__ascii_wctomb>:
 800b900:	b149      	cbz	r1, 800b916 <__ascii_wctomb+0x16>
 800b902:	2aff      	cmp	r2, #255	; 0xff
 800b904:	bf85      	ittet	hi
 800b906:	238a      	movhi	r3, #138	; 0x8a
 800b908:	6003      	strhi	r3, [r0, #0]
 800b90a:	700a      	strbls	r2, [r1, #0]
 800b90c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b910:	bf98      	it	ls
 800b912:	2001      	movls	r0, #1
 800b914:	4770      	bx	lr
 800b916:	4608      	mov	r0, r1
 800b918:	4770      	bx	lr

0800b91a <__sfputc_r>:
 800b91a:	6893      	ldr	r3, [r2, #8]
 800b91c:	3b01      	subs	r3, #1
 800b91e:	2b00      	cmp	r3, #0
 800b920:	b410      	push	{r4}
 800b922:	6093      	str	r3, [r2, #8]
 800b924:	da08      	bge.n	800b938 <__sfputc_r+0x1e>
 800b926:	6994      	ldr	r4, [r2, #24]
 800b928:	42a3      	cmp	r3, r4
 800b92a:	db01      	blt.n	800b930 <__sfputc_r+0x16>
 800b92c:	290a      	cmp	r1, #10
 800b92e:	d103      	bne.n	800b938 <__sfputc_r+0x1e>
 800b930:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b934:	f000 b934 	b.w	800bba0 <__swbuf_r>
 800b938:	6813      	ldr	r3, [r2, #0]
 800b93a:	1c58      	adds	r0, r3, #1
 800b93c:	6010      	str	r0, [r2, #0]
 800b93e:	7019      	strb	r1, [r3, #0]
 800b940:	4608      	mov	r0, r1
 800b942:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b946:	4770      	bx	lr

0800b948 <__sfputs_r>:
 800b948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b94a:	4606      	mov	r6, r0
 800b94c:	460f      	mov	r7, r1
 800b94e:	4614      	mov	r4, r2
 800b950:	18d5      	adds	r5, r2, r3
 800b952:	42ac      	cmp	r4, r5
 800b954:	d101      	bne.n	800b95a <__sfputs_r+0x12>
 800b956:	2000      	movs	r0, #0
 800b958:	e007      	b.n	800b96a <__sfputs_r+0x22>
 800b95a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b95e:	463a      	mov	r2, r7
 800b960:	4630      	mov	r0, r6
 800b962:	f7ff ffda 	bl	800b91a <__sfputc_r>
 800b966:	1c43      	adds	r3, r0, #1
 800b968:	d1f3      	bne.n	800b952 <__sfputs_r+0xa>
 800b96a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b96c <_vfiprintf_r>:
 800b96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b970:	460d      	mov	r5, r1
 800b972:	b09d      	sub	sp, #116	; 0x74
 800b974:	4614      	mov	r4, r2
 800b976:	4698      	mov	r8, r3
 800b978:	4606      	mov	r6, r0
 800b97a:	b118      	cbz	r0, 800b984 <_vfiprintf_r+0x18>
 800b97c:	6a03      	ldr	r3, [r0, #32]
 800b97e:	b90b      	cbnz	r3, 800b984 <_vfiprintf_r+0x18>
 800b980:	f7fe f854 	bl	8009a2c <__sinit>
 800b984:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b986:	07d9      	lsls	r1, r3, #31
 800b988:	d405      	bmi.n	800b996 <_vfiprintf_r+0x2a>
 800b98a:	89ab      	ldrh	r3, [r5, #12]
 800b98c:	059a      	lsls	r2, r3, #22
 800b98e:	d402      	bmi.n	800b996 <_vfiprintf_r+0x2a>
 800b990:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b992:	f7fe f9f1 	bl	8009d78 <__retarget_lock_acquire_recursive>
 800b996:	89ab      	ldrh	r3, [r5, #12]
 800b998:	071b      	lsls	r3, r3, #28
 800b99a:	d501      	bpl.n	800b9a0 <_vfiprintf_r+0x34>
 800b99c:	692b      	ldr	r3, [r5, #16]
 800b99e:	b99b      	cbnz	r3, 800b9c8 <_vfiprintf_r+0x5c>
 800b9a0:	4629      	mov	r1, r5
 800b9a2:	4630      	mov	r0, r6
 800b9a4:	f000 f93a 	bl	800bc1c <__swsetup_r>
 800b9a8:	b170      	cbz	r0, 800b9c8 <_vfiprintf_r+0x5c>
 800b9aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9ac:	07dc      	lsls	r4, r3, #31
 800b9ae:	d504      	bpl.n	800b9ba <_vfiprintf_r+0x4e>
 800b9b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9b4:	b01d      	add	sp, #116	; 0x74
 800b9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ba:	89ab      	ldrh	r3, [r5, #12]
 800b9bc:	0598      	lsls	r0, r3, #22
 800b9be:	d4f7      	bmi.n	800b9b0 <_vfiprintf_r+0x44>
 800b9c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9c2:	f7fe f9da 	bl	8009d7a <__retarget_lock_release_recursive>
 800b9c6:	e7f3      	b.n	800b9b0 <_vfiprintf_r+0x44>
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	9309      	str	r3, [sp, #36]	; 0x24
 800b9cc:	2320      	movs	r3, #32
 800b9ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9d6:	2330      	movs	r3, #48	; 0x30
 800b9d8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bb8c <_vfiprintf_r+0x220>
 800b9dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9e0:	f04f 0901 	mov.w	r9, #1
 800b9e4:	4623      	mov	r3, r4
 800b9e6:	469a      	mov	sl, r3
 800b9e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9ec:	b10a      	cbz	r2, 800b9f2 <_vfiprintf_r+0x86>
 800b9ee:	2a25      	cmp	r2, #37	; 0x25
 800b9f0:	d1f9      	bne.n	800b9e6 <_vfiprintf_r+0x7a>
 800b9f2:	ebba 0b04 	subs.w	fp, sl, r4
 800b9f6:	d00b      	beq.n	800ba10 <_vfiprintf_r+0xa4>
 800b9f8:	465b      	mov	r3, fp
 800b9fa:	4622      	mov	r2, r4
 800b9fc:	4629      	mov	r1, r5
 800b9fe:	4630      	mov	r0, r6
 800ba00:	f7ff ffa2 	bl	800b948 <__sfputs_r>
 800ba04:	3001      	adds	r0, #1
 800ba06:	f000 80a9 	beq.w	800bb5c <_vfiprintf_r+0x1f0>
 800ba0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba0c:	445a      	add	r2, fp
 800ba0e:	9209      	str	r2, [sp, #36]	; 0x24
 800ba10:	f89a 3000 	ldrb.w	r3, [sl]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	f000 80a1 	beq.w	800bb5c <_vfiprintf_r+0x1f0>
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ba20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba24:	f10a 0a01 	add.w	sl, sl, #1
 800ba28:	9304      	str	r3, [sp, #16]
 800ba2a:	9307      	str	r3, [sp, #28]
 800ba2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba30:	931a      	str	r3, [sp, #104]	; 0x68
 800ba32:	4654      	mov	r4, sl
 800ba34:	2205      	movs	r2, #5
 800ba36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba3a:	4854      	ldr	r0, [pc, #336]	; (800bb8c <_vfiprintf_r+0x220>)
 800ba3c:	f7f4 fc00 	bl	8000240 <memchr>
 800ba40:	9a04      	ldr	r2, [sp, #16]
 800ba42:	b9d8      	cbnz	r0, 800ba7c <_vfiprintf_r+0x110>
 800ba44:	06d1      	lsls	r1, r2, #27
 800ba46:	bf44      	itt	mi
 800ba48:	2320      	movmi	r3, #32
 800ba4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba4e:	0713      	lsls	r3, r2, #28
 800ba50:	bf44      	itt	mi
 800ba52:	232b      	movmi	r3, #43	; 0x2b
 800ba54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba58:	f89a 3000 	ldrb.w	r3, [sl]
 800ba5c:	2b2a      	cmp	r3, #42	; 0x2a
 800ba5e:	d015      	beq.n	800ba8c <_vfiprintf_r+0x120>
 800ba60:	9a07      	ldr	r2, [sp, #28]
 800ba62:	4654      	mov	r4, sl
 800ba64:	2000      	movs	r0, #0
 800ba66:	f04f 0c0a 	mov.w	ip, #10
 800ba6a:	4621      	mov	r1, r4
 800ba6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba70:	3b30      	subs	r3, #48	; 0x30
 800ba72:	2b09      	cmp	r3, #9
 800ba74:	d94d      	bls.n	800bb12 <_vfiprintf_r+0x1a6>
 800ba76:	b1b0      	cbz	r0, 800baa6 <_vfiprintf_r+0x13a>
 800ba78:	9207      	str	r2, [sp, #28]
 800ba7a:	e014      	b.n	800baa6 <_vfiprintf_r+0x13a>
 800ba7c:	eba0 0308 	sub.w	r3, r0, r8
 800ba80:	fa09 f303 	lsl.w	r3, r9, r3
 800ba84:	4313      	orrs	r3, r2
 800ba86:	9304      	str	r3, [sp, #16]
 800ba88:	46a2      	mov	sl, r4
 800ba8a:	e7d2      	b.n	800ba32 <_vfiprintf_r+0xc6>
 800ba8c:	9b03      	ldr	r3, [sp, #12]
 800ba8e:	1d19      	adds	r1, r3, #4
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	9103      	str	r1, [sp, #12]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	bfbb      	ittet	lt
 800ba98:	425b      	neglt	r3, r3
 800ba9a:	f042 0202 	orrlt.w	r2, r2, #2
 800ba9e:	9307      	strge	r3, [sp, #28]
 800baa0:	9307      	strlt	r3, [sp, #28]
 800baa2:	bfb8      	it	lt
 800baa4:	9204      	strlt	r2, [sp, #16]
 800baa6:	7823      	ldrb	r3, [r4, #0]
 800baa8:	2b2e      	cmp	r3, #46	; 0x2e
 800baaa:	d10c      	bne.n	800bac6 <_vfiprintf_r+0x15a>
 800baac:	7863      	ldrb	r3, [r4, #1]
 800baae:	2b2a      	cmp	r3, #42	; 0x2a
 800bab0:	d134      	bne.n	800bb1c <_vfiprintf_r+0x1b0>
 800bab2:	9b03      	ldr	r3, [sp, #12]
 800bab4:	1d1a      	adds	r2, r3, #4
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	9203      	str	r2, [sp, #12]
 800baba:	2b00      	cmp	r3, #0
 800babc:	bfb8      	it	lt
 800babe:	f04f 33ff 	movlt.w	r3, #4294967295
 800bac2:	3402      	adds	r4, #2
 800bac4:	9305      	str	r3, [sp, #20]
 800bac6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bb9c <_vfiprintf_r+0x230>
 800baca:	7821      	ldrb	r1, [r4, #0]
 800bacc:	2203      	movs	r2, #3
 800bace:	4650      	mov	r0, sl
 800bad0:	f7f4 fbb6 	bl	8000240 <memchr>
 800bad4:	b138      	cbz	r0, 800bae6 <_vfiprintf_r+0x17a>
 800bad6:	9b04      	ldr	r3, [sp, #16]
 800bad8:	eba0 000a 	sub.w	r0, r0, sl
 800badc:	2240      	movs	r2, #64	; 0x40
 800bade:	4082      	lsls	r2, r0
 800bae0:	4313      	orrs	r3, r2
 800bae2:	3401      	adds	r4, #1
 800bae4:	9304      	str	r3, [sp, #16]
 800bae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baea:	4829      	ldr	r0, [pc, #164]	; (800bb90 <_vfiprintf_r+0x224>)
 800baec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800baf0:	2206      	movs	r2, #6
 800baf2:	f7f4 fba5 	bl	8000240 <memchr>
 800baf6:	2800      	cmp	r0, #0
 800baf8:	d03f      	beq.n	800bb7a <_vfiprintf_r+0x20e>
 800bafa:	4b26      	ldr	r3, [pc, #152]	; (800bb94 <_vfiprintf_r+0x228>)
 800bafc:	bb1b      	cbnz	r3, 800bb46 <_vfiprintf_r+0x1da>
 800bafe:	9b03      	ldr	r3, [sp, #12]
 800bb00:	3307      	adds	r3, #7
 800bb02:	f023 0307 	bic.w	r3, r3, #7
 800bb06:	3308      	adds	r3, #8
 800bb08:	9303      	str	r3, [sp, #12]
 800bb0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb0c:	443b      	add	r3, r7
 800bb0e:	9309      	str	r3, [sp, #36]	; 0x24
 800bb10:	e768      	b.n	800b9e4 <_vfiprintf_r+0x78>
 800bb12:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb16:	460c      	mov	r4, r1
 800bb18:	2001      	movs	r0, #1
 800bb1a:	e7a6      	b.n	800ba6a <_vfiprintf_r+0xfe>
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	3401      	adds	r4, #1
 800bb20:	9305      	str	r3, [sp, #20]
 800bb22:	4619      	mov	r1, r3
 800bb24:	f04f 0c0a 	mov.w	ip, #10
 800bb28:	4620      	mov	r0, r4
 800bb2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb2e:	3a30      	subs	r2, #48	; 0x30
 800bb30:	2a09      	cmp	r2, #9
 800bb32:	d903      	bls.n	800bb3c <_vfiprintf_r+0x1d0>
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d0c6      	beq.n	800bac6 <_vfiprintf_r+0x15a>
 800bb38:	9105      	str	r1, [sp, #20]
 800bb3a:	e7c4      	b.n	800bac6 <_vfiprintf_r+0x15a>
 800bb3c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb40:	4604      	mov	r4, r0
 800bb42:	2301      	movs	r3, #1
 800bb44:	e7f0      	b.n	800bb28 <_vfiprintf_r+0x1bc>
 800bb46:	ab03      	add	r3, sp, #12
 800bb48:	9300      	str	r3, [sp, #0]
 800bb4a:	462a      	mov	r2, r5
 800bb4c:	4b12      	ldr	r3, [pc, #72]	; (800bb98 <_vfiprintf_r+0x22c>)
 800bb4e:	a904      	add	r1, sp, #16
 800bb50:	4630      	mov	r0, r6
 800bb52:	f7fd fb2b 	bl	80091ac <_printf_float>
 800bb56:	4607      	mov	r7, r0
 800bb58:	1c78      	adds	r0, r7, #1
 800bb5a:	d1d6      	bne.n	800bb0a <_vfiprintf_r+0x19e>
 800bb5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb5e:	07d9      	lsls	r1, r3, #31
 800bb60:	d405      	bmi.n	800bb6e <_vfiprintf_r+0x202>
 800bb62:	89ab      	ldrh	r3, [r5, #12]
 800bb64:	059a      	lsls	r2, r3, #22
 800bb66:	d402      	bmi.n	800bb6e <_vfiprintf_r+0x202>
 800bb68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb6a:	f7fe f906 	bl	8009d7a <__retarget_lock_release_recursive>
 800bb6e:	89ab      	ldrh	r3, [r5, #12]
 800bb70:	065b      	lsls	r3, r3, #25
 800bb72:	f53f af1d 	bmi.w	800b9b0 <_vfiprintf_r+0x44>
 800bb76:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb78:	e71c      	b.n	800b9b4 <_vfiprintf_r+0x48>
 800bb7a:	ab03      	add	r3, sp, #12
 800bb7c:	9300      	str	r3, [sp, #0]
 800bb7e:	462a      	mov	r2, r5
 800bb80:	4b05      	ldr	r3, [pc, #20]	; (800bb98 <_vfiprintf_r+0x22c>)
 800bb82:	a904      	add	r1, sp, #16
 800bb84:	4630      	mov	r0, r6
 800bb86:	f7fd fdb5 	bl	80096f4 <_printf_i>
 800bb8a:	e7e4      	b.n	800bb56 <_vfiprintf_r+0x1ea>
 800bb8c:	0800c2ec 	.word	0x0800c2ec
 800bb90:	0800c2f6 	.word	0x0800c2f6
 800bb94:	080091ad 	.word	0x080091ad
 800bb98:	0800b949 	.word	0x0800b949
 800bb9c:	0800c2f2 	.word	0x0800c2f2

0800bba0 <__swbuf_r>:
 800bba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bba2:	460e      	mov	r6, r1
 800bba4:	4614      	mov	r4, r2
 800bba6:	4605      	mov	r5, r0
 800bba8:	b118      	cbz	r0, 800bbb2 <__swbuf_r+0x12>
 800bbaa:	6a03      	ldr	r3, [r0, #32]
 800bbac:	b90b      	cbnz	r3, 800bbb2 <__swbuf_r+0x12>
 800bbae:	f7fd ff3d 	bl	8009a2c <__sinit>
 800bbb2:	69a3      	ldr	r3, [r4, #24]
 800bbb4:	60a3      	str	r3, [r4, #8]
 800bbb6:	89a3      	ldrh	r3, [r4, #12]
 800bbb8:	071a      	lsls	r2, r3, #28
 800bbba:	d525      	bpl.n	800bc08 <__swbuf_r+0x68>
 800bbbc:	6923      	ldr	r3, [r4, #16]
 800bbbe:	b31b      	cbz	r3, 800bc08 <__swbuf_r+0x68>
 800bbc0:	6823      	ldr	r3, [r4, #0]
 800bbc2:	6922      	ldr	r2, [r4, #16]
 800bbc4:	1a98      	subs	r0, r3, r2
 800bbc6:	6963      	ldr	r3, [r4, #20]
 800bbc8:	b2f6      	uxtb	r6, r6
 800bbca:	4283      	cmp	r3, r0
 800bbcc:	4637      	mov	r7, r6
 800bbce:	dc04      	bgt.n	800bbda <__swbuf_r+0x3a>
 800bbd0:	4621      	mov	r1, r4
 800bbd2:	4628      	mov	r0, r5
 800bbd4:	f7ff fdc4 	bl	800b760 <_fflush_r>
 800bbd8:	b9e0      	cbnz	r0, 800bc14 <__swbuf_r+0x74>
 800bbda:	68a3      	ldr	r3, [r4, #8]
 800bbdc:	3b01      	subs	r3, #1
 800bbde:	60a3      	str	r3, [r4, #8]
 800bbe0:	6823      	ldr	r3, [r4, #0]
 800bbe2:	1c5a      	adds	r2, r3, #1
 800bbe4:	6022      	str	r2, [r4, #0]
 800bbe6:	701e      	strb	r6, [r3, #0]
 800bbe8:	6962      	ldr	r2, [r4, #20]
 800bbea:	1c43      	adds	r3, r0, #1
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d004      	beq.n	800bbfa <__swbuf_r+0x5a>
 800bbf0:	89a3      	ldrh	r3, [r4, #12]
 800bbf2:	07db      	lsls	r3, r3, #31
 800bbf4:	d506      	bpl.n	800bc04 <__swbuf_r+0x64>
 800bbf6:	2e0a      	cmp	r6, #10
 800bbf8:	d104      	bne.n	800bc04 <__swbuf_r+0x64>
 800bbfa:	4621      	mov	r1, r4
 800bbfc:	4628      	mov	r0, r5
 800bbfe:	f7ff fdaf 	bl	800b760 <_fflush_r>
 800bc02:	b938      	cbnz	r0, 800bc14 <__swbuf_r+0x74>
 800bc04:	4638      	mov	r0, r7
 800bc06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc08:	4621      	mov	r1, r4
 800bc0a:	4628      	mov	r0, r5
 800bc0c:	f000 f806 	bl	800bc1c <__swsetup_r>
 800bc10:	2800      	cmp	r0, #0
 800bc12:	d0d5      	beq.n	800bbc0 <__swbuf_r+0x20>
 800bc14:	f04f 37ff 	mov.w	r7, #4294967295
 800bc18:	e7f4      	b.n	800bc04 <__swbuf_r+0x64>
	...

0800bc1c <__swsetup_r>:
 800bc1c:	b538      	push	{r3, r4, r5, lr}
 800bc1e:	4b2a      	ldr	r3, [pc, #168]	; (800bcc8 <__swsetup_r+0xac>)
 800bc20:	4605      	mov	r5, r0
 800bc22:	6818      	ldr	r0, [r3, #0]
 800bc24:	460c      	mov	r4, r1
 800bc26:	b118      	cbz	r0, 800bc30 <__swsetup_r+0x14>
 800bc28:	6a03      	ldr	r3, [r0, #32]
 800bc2a:	b90b      	cbnz	r3, 800bc30 <__swsetup_r+0x14>
 800bc2c:	f7fd fefe 	bl	8009a2c <__sinit>
 800bc30:	89a3      	ldrh	r3, [r4, #12]
 800bc32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc36:	0718      	lsls	r0, r3, #28
 800bc38:	d422      	bmi.n	800bc80 <__swsetup_r+0x64>
 800bc3a:	06d9      	lsls	r1, r3, #27
 800bc3c:	d407      	bmi.n	800bc4e <__swsetup_r+0x32>
 800bc3e:	2309      	movs	r3, #9
 800bc40:	602b      	str	r3, [r5, #0]
 800bc42:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc46:	81a3      	strh	r3, [r4, #12]
 800bc48:	f04f 30ff 	mov.w	r0, #4294967295
 800bc4c:	e034      	b.n	800bcb8 <__swsetup_r+0x9c>
 800bc4e:	0758      	lsls	r0, r3, #29
 800bc50:	d512      	bpl.n	800bc78 <__swsetup_r+0x5c>
 800bc52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc54:	b141      	cbz	r1, 800bc68 <__swsetup_r+0x4c>
 800bc56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc5a:	4299      	cmp	r1, r3
 800bc5c:	d002      	beq.n	800bc64 <__swsetup_r+0x48>
 800bc5e:	4628      	mov	r0, r5
 800bc60:	f7fe ff24 	bl	800aaac <_free_r>
 800bc64:	2300      	movs	r3, #0
 800bc66:	6363      	str	r3, [r4, #52]	; 0x34
 800bc68:	89a3      	ldrh	r3, [r4, #12]
 800bc6a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc6e:	81a3      	strh	r3, [r4, #12]
 800bc70:	2300      	movs	r3, #0
 800bc72:	6063      	str	r3, [r4, #4]
 800bc74:	6923      	ldr	r3, [r4, #16]
 800bc76:	6023      	str	r3, [r4, #0]
 800bc78:	89a3      	ldrh	r3, [r4, #12]
 800bc7a:	f043 0308 	orr.w	r3, r3, #8
 800bc7e:	81a3      	strh	r3, [r4, #12]
 800bc80:	6923      	ldr	r3, [r4, #16]
 800bc82:	b94b      	cbnz	r3, 800bc98 <__swsetup_r+0x7c>
 800bc84:	89a3      	ldrh	r3, [r4, #12]
 800bc86:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc8e:	d003      	beq.n	800bc98 <__swsetup_r+0x7c>
 800bc90:	4621      	mov	r1, r4
 800bc92:	4628      	mov	r0, r5
 800bc94:	f000 f88c 	bl	800bdb0 <__smakebuf_r>
 800bc98:	89a0      	ldrh	r0, [r4, #12]
 800bc9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc9e:	f010 0301 	ands.w	r3, r0, #1
 800bca2:	d00a      	beq.n	800bcba <__swsetup_r+0x9e>
 800bca4:	2300      	movs	r3, #0
 800bca6:	60a3      	str	r3, [r4, #8]
 800bca8:	6963      	ldr	r3, [r4, #20]
 800bcaa:	425b      	negs	r3, r3
 800bcac:	61a3      	str	r3, [r4, #24]
 800bcae:	6923      	ldr	r3, [r4, #16]
 800bcb0:	b943      	cbnz	r3, 800bcc4 <__swsetup_r+0xa8>
 800bcb2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bcb6:	d1c4      	bne.n	800bc42 <__swsetup_r+0x26>
 800bcb8:	bd38      	pop	{r3, r4, r5, pc}
 800bcba:	0781      	lsls	r1, r0, #30
 800bcbc:	bf58      	it	pl
 800bcbe:	6963      	ldrpl	r3, [r4, #20]
 800bcc0:	60a3      	str	r3, [r4, #8]
 800bcc2:	e7f4      	b.n	800bcae <__swsetup_r+0x92>
 800bcc4:	2000      	movs	r0, #0
 800bcc6:	e7f7      	b.n	800bcb8 <__swsetup_r+0x9c>
 800bcc8:	20000120 	.word	0x20000120

0800bccc <_raise_r>:
 800bccc:	291f      	cmp	r1, #31
 800bcce:	b538      	push	{r3, r4, r5, lr}
 800bcd0:	4604      	mov	r4, r0
 800bcd2:	460d      	mov	r5, r1
 800bcd4:	d904      	bls.n	800bce0 <_raise_r+0x14>
 800bcd6:	2316      	movs	r3, #22
 800bcd8:	6003      	str	r3, [r0, #0]
 800bcda:	f04f 30ff 	mov.w	r0, #4294967295
 800bcde:	bd38      	pop	{r3, r4, r5, pc}
 800bce0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bce2:	b112      	cbz	r2, 800bcea <_raise_r+0x1e>
 800bce4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bce8:	b94b      	cbnz	r3, 800bcfe <_raise_r+0x32>
 800bcea:	4620      	mov	r0, r4
 800bcec:	f000 f830 	bl	800bd50 <_getpid_r>
 800bcf0:	462a      	mov	r2, r5
 800bcf2:	4601      	mov	r1, r0
 800bcf4:	4620      	mov	r0, r4
 800bcf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcfa:	f000 b817 	b.w	800bd2c <_kill_r>
 800bcfe:	2b01      	cmp	r3, #1
 800bd00:	d00a      	beq.n	800bd18 <_raise_r+0x4c>
 800bd02:	1c59      	adds	r1, r3, #1
 800bd04:	d103      	bne.n	800bd0e <_raise_r+0x42>
 800bd06:	2316      	movs	r3, #22
 800bd08:	6003      	str	r3, [r0, #0]
 800bd0a:	2001      	movs	r0, #1
 800bd0c:	e7e7      	b.n	800bcde <_raise_r+0x12>
 800bd0e:	2400      	movs	r4, #0
 800bd10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bd14:	4628      	mov	r0, r5
 800bd16:	4798      	blx	r3
 800bd18:	2000      	movs	r0, #0
 800bd1a:	e7e0      	b.n	800bcde <_raise_r+0x12>

0800bd1c <raise>:
 800bd1c:	4b02      	ldr	r3, [pc, #8]	; (800bd28 <raise+0xc>)
 800bd1e:	4601      	mov	r1, r0
 800bd20:	6818      	ldr	r0, [r3, #0]
 800bd22:	f7ff bfd3 	b.w	800bccc <_raise_r>
 800bd26:	bf00      	nop
 800bd28:	20000120 	.word	0x20000120

0800bd2c <_kill_r>:
 800bd2c:	b538      	push	{r3, r4, r5, lr}
 800bd2e:	4d07      	ldr	r5, [pc, #28]	; (800bd4c <_kill_r+0x20>)
 800bd30:	2300      	movs	r3, #0
 800bd32:	4604      	mov	r4, r0
 800bd34:	4608      	mov	r0, r1
 800bd36:	4611      	mov	r1, r2
 800bd38:	602b      	str	r3, [r5, #0]
 800bd3a:	f7f5 fd0f 	bl	800175c <_kill>
 800bd3e:	1c43      	adds	r3, r0, #1
 800bd40:	d102      	bne.n	800bd48 <_kill_r+0x1c>
 800bd42:	682b      	ldr	r3, [r5, #0]
 800bd44:	b103      	cbz	r3, 800bd48 <_kill_r+0x1c>
 800bd46:	6023      	str	r3, [r4, #0]
 800bd48:	bd38      	pop	{r3, r4, r5, pc}
 800bd4a:	bf00      	nop
 800bd4c:	2000078c 	.word	0x2000078c

0800bd50 <_getpid_r>:
 800bd50:	f7f5 bcfc 	b.w	800174c <_getpid>

0800bd54 <_malloc_usable_size_r>:
 800bd54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd58:	1f18      	subs	r0, r3, #4
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	bfbc      	itt	lt
 800bd5e:	580b      	ldrlt	r3, [r1, r0]
 800bd60:	18c0      	addlt	r0, r0, r3
 800bd62:	4770      	bx	lr

0800bd64 <__swhatbuf_r>:
 800bd64:	b570      	push	{r4, r5, r6, lr}
 800bd66:	460c      	mov	r4, r1
 800bd68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd6c:	2900      	cmp	r1, #0
 800bd6e:	b096      	sub	sp, #88	; 0x58
 800bd70:	4615      	mov	r5, r2
 800bd72:	461e      	mov	r6, r3
 800bd74:	da0d      	bge.n	800bd92 <__swhatbuf_r+0x2e>
 800bd76:	89a3      	ldrh	r3, [r4, #12]
 800bd78:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bd7c:	f04f 0100 	mov.w	r1, #0
 800bd80:	bf0c      	ite	eq
 800bd82:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bd86:	2340      	movne	r3, #64	; 0x40
 800bd88:	2000      	movs	r0, #0
 800bd8a:	6031      	str	r1, [r6, #0]
 800bd8c:	602b      	str	r3, [r5, #0]
 800bd8e:	b016      	add	sp, #88	; 0x58
 800bd90:	bd70      	pop	{r4, r5, r6, pc}
 800bd92:	466a      	mov	r2, sp
 800bd94:	f000 f848 	bl	800be28 <_fstat_r>
 800bd98:	2800      	cmp	r0, #0
 800bd9a:	dbec      	blt.n	800bd76 <__swhatbuf_r+0x12>
 800bd9c:	9901      	ldr	r1, [sp, #4]
 800bd9e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bda2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bda6:	4259      	negs	r1, r3
 800bda8:	4159      	adcs	r1, r3
 800bdaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdae:	e7eb      	b.n	800bd88 <__swhatbuf_r+0x24>

0800bdb0 <__smakebuf_r>:
 800bdb0:	898b      	ldrh	r3, [r1, #12]
 800bdb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bdb4:	079d      	lsls	r5, r3, #30
 800bdb6:	4606      	mov	r6, r0
 800bdb8:	460c      	mov	r4, r1
 800bdba:	d507      	bpl.n	800bdcc <__smakebuf_r+0x1c>
 800bdbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bdc0:	6023      	str	r3, [r4, #0]
 800bdc2:	6123      	str	r3, [r4, #16]
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	6163      	str	r3, [r4, #20]
 800bdc8:	b002      	add	sp, #8
 800bdca:	bd70      	pop	{r4, r5, r6, pc}
 800bdcc:	ab01      	add	r3, sp, #4
 800bdce:	466a      	mov	r2, sp
 800bdd0:	f7ff ffc8 	bl	800bd64 <__swhatbuf_r>
 800bdd4:	9900      	ldr	r1, [sp, #0]
 800bdd6:	4605      	mov	r5, r0
 800bdd8:	4630      	mov	r0, r6
 800bdda:	f7fe fedb 	bl	800ab94 <_malloc_r>
 800bdde:	b948      	cbnz	r0, 800bdf4 <__smakebuf_r+0x44>
 800bde0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bde4:	059a      	lsls	r2, r3, #22
 800bde6:	d4ef      	bmi.n	800bdc8 <__smakebuf_r+0x18>
 800bde8:	f023 0303 	bic.w	r3, r3, #3
 800bdec:	f043 0302 	orr.w	r3, r3, #2
 800bdf0:	81a3      	strh	r3, [r4, #12]
 800bdf2:	e7e3      	b.n	800bdbc <__smakebuf_r+0xc>
 800bdf4:	89a3      	ldrh	r3, [r4, #12]
 800bdf6:	6020      	str	r0, [r4, #0]
 800bdf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdfc:	81a3      	strh	r3, [r4, #12]
 800bdfe:	9b00      	ldr	r3, [sp, #0]
 800be00:	6163      	str	r3, [r4, #20]
 800be02:	9b01      	ldr	r3, [sp, #4]
 800be04:	6120      	str	r0, [r4, #16]
 800be06:	b15b      	cbz	r3, 800be20 <__smakebuf_r+0x70>
 800be08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be0c:	4630      	mov	r0, r6
 800be0e:	f000 f81d 	bl	800be4c <_isatty_r>
 800be12:	b128      	cbz	r0, 800be20 <__smakebuf_r+0x70>
 800be14:	89a3      	ldrh	r3, [r4, #12]
 800be16:	f023 0303 	bic.w	r3, r3, #3
 800be1a:	f043 0301 	orr.w	r3, r3, #1
 800be1e:	81a3      	strh	r3, [r4, #12]
 800be20:	89a3      	ldrh	r3, [r4, #12]
 800be22:	431d      	orrs	r5, r3
 800be24:	81a5      	strh	r5, [r4, #12]
 800be26:	e7cf      	b.n	800bdc8 <__smakebuf_r+0x18>

0800be28 <_fstat_r>:
 800be28:	b538      	push	{r3, r4, r5, lr}
 800be2a:	4d07      	ldr	r5, [pc, #28]	; (800be48 <_fstat_r+0x20>)
 800be2c:	2300      	movs	r3, #0
 800be2e:	4604      	mov	r4, r0
 800be30:	4608      	mov	r0, r1
 800be32:	4611      	mov	r1, r2
 800be34:	602b      	str	r3, [r5, #0]
 800be36:	f7f5 fcf0 	bl	800181a <_fstat>
 800be3a:	1c43      	adds	r3, r0, #1
 800be3c:	d102      	bne.n	800be44 <_fstat_r+0x1c>
 800be3e:	682b      	ldr	r3, [r5, #0]
 800be40:	b103      	cbz	r3, 800be44 <_fstat_r+0x1c>
 800be42:	6023      	str	r3, [r4, #0]
 800be44:	bd38      	pop	{r3, r4, r5, pc}
 800be46:	bf00      	nop
 800be48:	2000078c 	.word	0x2000078c

0800be4c <_isatty_r>:
 800be4c:	b538      	push	{r3, r4, r5, lr}
 800be4e:	4d06      	ldr	r5, [pc, #24]	; (800be68 <_isatty_r+0x1c>)
 800be50:	2300      	movs	r3, #0
 800be52:	4604      	mov	r4, r0
 800be54:	4608      	mov	r0, r1
 800be56:	602b      	str	r3, [r5, #0]
 800be58:	f7f5 fcef 	bl	800183a <_isatty>
 800be5c:	1c43      	adds	r3, r0, #1
 800be5e:	d102      	bne.n	800be66 <_isatty_r+0x1a>
 800be60:	682b      	ldr	r3, [r5, #0]
 800be62:	b103      	cbz	r3, 800be66 <_isatty_r+0x1a>
 800be64:	6023      	str	r3, [r4, #0]
 800be66:	bd38      	pop	{r3, r4, r5, pc}
 800be68:	2000078c 	.word	0x2000078c

0800be6c <_init>:
 800be6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be6e:	bf00      	nop
 800be70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be72:	bc08      	pop	{r3}
 800be74:	469e      	mov	lr, r3
 800be76:	4770      	bx	lr

0800be78 <_fini>:
 800be78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be7a:	bf00      	nop
 800be7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be7e:	bc08      	pop	{r3}
 800be80:	469e      	mov	lr, r3
 800be82:	4770      	bx	lr
